
Reversi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6f8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0011b1b4  0800a8f8  0800a8f8  0001a8f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08125aac  08125aac  001400bc  2**0
                  CONTENTS
  4 .ARM          00000008  08125aac  08125aac  00135aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08125ab4  08125ab4  001400bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08125ab4  08125ab4  00135ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08125ab8  08125ab8  00135ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  08125abc  00140000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000060c  200000bc  08125b78  001400bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006c8  08125b78  001406c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  001400bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021617  00000000  00000000  001400ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003e25  00000000  00000000  00161701  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000019d8  00000000  00000000  00165528  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000017f0  00000000  00000000  00166f00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002ff5a  00000000  00000000  001686f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016054  00000000  00000000  0019864a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001237e2  00000000  00000000  001ae69e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002d1e80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000705c  00000000  00000000  002d1efc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000bc 	.word	0x200000bc
 800021c:	00000000 	.word	0x00000000
 8000220:	0800a8e0 	.word	0x0800a8e0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000c0 	.word	0x200000c0
 800023c:	0800a8e0 	.word	0x0800a8e0

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <ft6x06_Init>:
  *         from MCU to FT6206 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Init(uint16_t DeviceAddr)
{  
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = ft6x06_GetInstance(DeviceAddr);
 80005ea:	88fb      	ldrh	r3, [r7, #6]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 f90d 	bl	800080c <ft6x06_GetInstance>
 80005f2:	4603      	mov	r3, r0
 80005f4:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 80005f6:	7bfb      	ldrb	r3, [r7, #15]
 80005f8:	2bff      	cmp	r3, #255	; 0xff
 80005fa:	d10e      	bne.n	800061a <ft6x06_Init+0x3a>
  {
    /* Look for empty instance */
    empty = ft6x06_GetInstance(0);
 80005fc:	2000      	movs	r0, #0
 80005fe:	f000 f905 	bl	800080c <ft6x06_GetInstance>
 8000602:	4603      	mov	r3, r0
 8000604:	73bb      	strb	r3, [r7, #14]
    
    if(empty < FT6x06_MAX_INSTANCE)
 8000606:	7bbb      	ldrb	r3, [r7, #14]
 8000608:	2b01      	cmp	r3, #1
 800060a:	d806      	bhi.n	800061a <ft6x06_Init+0x3a>
    {
      /* Register the current device instance */
      ft6x06[empty] = DeviceAddr;
 800060c:	7bbb      	ldrb	r3, [r7, #14]
 800060e:	88fa      	ldrh	r2, [r7, #6]
 8000610:	b2d1      	uxtb	r1, r2
 8000612:	4a04      	ldr	r2, [pc, #16]	; (8000624 <ft6x06_Init+0x44>)
 8000614:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      TS_IO_Init(); 
 8000616:	f000 fd05 	bl	8001024 <TS_IO_Init>
    }
  }
}
 800061a:	bf00      	nop
 800061c:	3710      	adds	r7, #16
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	200000d8 	.word	0x200000d8

08000628 <ft6x06_Reset>:
  *         @note : Not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 8000632:	bf00      	nop
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr

0800063e <ft6x06_ReadID>:
  *         able to read the FT6206 device ID, and verify this is a FT6206.
  * @param  DeviceAddr: I2C FT6x06 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft6x06_ReadID(uint16_t DeviceAddr)
{
 800063e:	b580      	push	{r7, lr}
 8000640:	b082      	sub	sp, #8
 8000642:	af00      	add	r7, sp, #0
 8000644:	4603      	mov	r3, r0
 8000646:	80fb      	strh	r3, [r7, #6]
  /* Initialize I2C link if needed */
  TS_IO_Init();
 8000648:	f000 fcec 	bl	8001024 <TS_IO_Init>
  
  /* Return the device ID value */
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 800064c:	88fb      	ldrh	r3, [r7, #6]
 800064e:	b2db      	uxtb	r3, r3
 8000650:	21a8      	movs	r1, #168	; 0xa8
 8000652:	4618      	mov	r0, r3
 8000654:	f000 fd0a 	bl	800106c <TS_IO_Read>
 8000658:	4603      	mov	r3, r0
 800065a:	b29b      	uxth	r3, r3
}
 800065c:	4618      	mov	r0, r3
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}

08000664 <ft6x06_TS_Start>:
  *         the touch screen).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft6x06_TS_Start(uint16_t DeviceAddr)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	80fb      	strh	r3, [r7, #6]
  /* Hw Calibration sequence start : should be done once after each power up */
  /* This is called internal calibration of the touch screen                 */
  ft6x06_TS_Calibration(DeviceAddr);
#endif
  /* Minimum static configuration of FT6206 */
  ft6x06_TS_Configure(DeviceAddr);
 800066e:	88fb      	ldrh	r3, [r7, #6]
 8000670:	4618      	mov	r0, r3
 8000672:	f000 f8bc 	bl	80007ee <ft6x06_TS_Configure>

  /* By default set FT6206 IC in Polling mode : no INT generation on FT6206 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft6x06_TS_DisableIT(DeviceAddr);
 8000676:	88fb      	ldrh	r3, [r7, #6]
 8000678:	4618      	mov	r0, r3
 800067a:	f000 f88d 	bl	8000798 <ft6x06_TS_DisableIT>
}
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
	...

08000688 <ft6x06_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft6x06_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	73fb      	strb	r3, [r7, #15]

  /* Read register FT6206_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 8000696:	88fb      	ldrh	r3, [r7, #6]
 8000698:	b2db      	uxtb	r3, r3
 800069a:	2102      	movs	r1, #2
 800069c:	4618      	mov	r0, r3
 800069e:	f000 fce5 	bl	800106c <TS_IO_Read>
 80006a2:	4603      	mov	r3, r0
 80006a4:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT6206_TD_STAT_MASK;
 80006a6:	7bfb      	ldrb	r3, [r7, #15]
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	f003 030f 	and.w	r3, r3, #15
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 80006b2:	7bfb      	ldrb	r3, [r7, #15]
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	2b02      	cmp	r3, #2
 80006b8:	d901      	bls.n	80006be <ft6x06_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft6x06 driver internal global : current number of active touches */
  ft6x06_handle.currActiveTouchNb = nbTouch;
 80006be:	7bfb      	ldrb	r3, [r7, #15]
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <ft6x06_TS_DetectTouch+0x50>)
 80006c4:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft6x06_handle.currActiveTouchIdx = 0;
 80006c6:	4b04      	ldr	r3, [pc, #16]	; (80006d8 <ft6x06_TS_DetectTouch+0x50>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80006cc:	7bfb      	ldrb	r3, [r7, #15]
 80006ce:	b2db      	uxtb	r3, r3
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	3710      	adds	r7, #16
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	200000dc 	.word	0x200000dc

080006dc <ft6x06_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft6x06_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
 80006e8:	81fb      	strh	r3, [r7, #14]
  uint8_t regAddress = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	75fb      	strb	r3, [r7, #23]
  uint8_t  dataxy[4];
  
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 80006ee:	4b1f      	ldr	r3, [pc, #124]	; (800076c <ft6x06_TS_GetXY+0x90>)
 80006f0:	789a      	ldrb	r2, [r3, #2]
 80006f2:	4b1e      	ldr	r3, [pc, #120]	; (800076c <ft6x06_TS_GetXY+0x90>)
 80006f4:	785b      	ldrb	r3, [r3, #1]
 80006f6:	429a      	cmp	r2, r3
 80006f8:	d234      	bcs.n	8000764 <ft6x06_TS_GetXY+0x88>
  {
    switch(ft6x06_handle.currActiveTouchIdx)
 80006fa:	4b1c      	ldr	r3, [pc, #112]	; (800076c <ft6x06_TS_GetXY+0x90>)
 80006fc:	789b      	ldrb	r3, [r3, #2]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d002      	beq.n	8000708 <ft6x06_TS_GetXY+0x2c>
 8000702:	2b01      	cmp	r3, #1
 8000704:	d003      	beq.n	800070e <ft6x06_TS_GetXY+0x32>
    case 1 :
      regAddress = FT6206_P2_XH_REG; 
      break;

    default :
      break;
 8000706:	e005      	b.n	8000714 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P1_XH_REG; 
 8000708:	2303      	movs	r3, #3
 800070a:	75fb      	strb	r3, [r7, #23]
      break;
 800070c:	e002      	b.n	8000714 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P2_XH_REG; 
 800070e:	2309      	movs	r3, #9
 8000710:	75fb      	strb	r3, [r7, #23]
      break;
 8000712:	bf00      	nop
    }
    
    /* Read X and Y positions */
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 8000714:	89fb      	ldrh	r3, [r7, #14]
 8000716:	b2d8      	uxtb	r0, r3
 8000718:	f107 0210 	add.w	r2, r7, #16
 800071c:	7df9      	ldrb	r1, [r7, #23]
 800071e:	2304      	movs	r3, #4
 8000720:	f000 fcc2 	bl	80010a8 <TS_IO_ReadMultiple>

    /* Send back ready X position to caller */
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 8000724:	7c3b      	ldrb	r3, [r7, #16]
 8000726:	021b      	lsls	r3, r3, #8
 8000728:	b21b      	sxth	r3, r3
 800072a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800072e:	b21a      	sxth	r2, r3
 8000730:	7c7b      	ldrb	r3, [r7, #17]
 8000732:	b21b      	sxth	r3, r3
 8000734:	4313      	orrs	r3, r2
 8000736:	b21b      	sxth	r3, r3
 8000738:	b29a      	uxth	r2, r3
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	801a      	strh	r2, [r3, #0]
    
    /* Send back ready Y position to caller */
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 800073e:	7cbb      	ldrb	r3, [r7, #18]
 8000740:	021b      	lsls	r3, r3, #8
 8000742:	b21b      	sxth	r3, r3
 8000744:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000748:	b21a      	sxth	r2, r3
 800074a:	7cfb      	ldrb	r3, [r7, #19]
 800074c:	b21b      	sxth	r3, r3
 800074e:	4313      	orrs	r3, r2
 8000750:	b21b      	sxth	r3, r3
 8000752:	b29a      	uxth	r2, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	801a      	strh	r2, [r3, #0]
    
    ft6x06_handle.currActiveTouchIdx++;
 8000758:	4b04      	ldr	r3, [pc, #16]	; (800076c <ft6x06_TS_GetXY+0x90>)
 800075a:	789b      	ldrb	r3, [r3, #2]
 800075c:	3301      	adds	r3, #1
 800075e:	b2da      	uxtb	r2, r3
 8000760:	4b02      	ldr	r3, [pc, #8]	; (800076c <ft6x06_TS_GetXY+0x90>)
 8000762:	709a      	strb	r2, [r3, #2]
  }
}
 8000764:	bf00      	nop
 8000766:	3718      	adds	r7, #24
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	200000dc 	.word	0x200000dc

08000770 <ft6x06_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_EnableIT(uint16_t DeviceAddr)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_TRIGGER & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 800077e:	2301      	movs	r3, #1
 8000780:	73fb      	strb	r3, [r7, #15]
  
  /* Set interrupt trigger mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8000782:	88fb      	ldrh	r3, [r7, #6]
 8000784:	b2db      	uxtb	r3, r3
 8000786:	7bfa      	ldrb	r2, [r7, #15]
 8000788:	21a4      	movs	r1, #164	; 0xa4
 800078a:	4618      	mov	r0, r3
 800078c:	f000 fc54 	bl	8001038 <TS_IO_Write>
}
 8000790:	bf00      	nop
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <ft6x06_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_DisableIT(uint16_t DeviceAddr)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_POLLING & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 80007a6:	2300      	movs	r3, #0
 80007a8:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 80007aa:	88fb      	ldrh	r3, [r7, #6]
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	7bfa      	ldrb	r2, [r7, #15]
 80007b0:	21a4      	movs	r1, #164	; 0xa4
 80007b2:	4618      	mov	r0, r3
 80007b4:	f000 fc40 	bl	8001038 <TS_IO_Write>
}
 80007b8:	bf00      	nop
 80007ba:	3710      	adds	r7, #16
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <ft6x06_TS_ITStatus>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
 80007ca:	2300      	movs	r3, #0
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	370c      	adds	r7, #12
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr

080007d8 <ft6x06_TS_ClearIT>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_TS_ClearIT(uint16_t DeviceAddr)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT6206 */
}
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr

080007ee <ft6x06_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT6206 Device address for communication on I2C Bus.
  * @retval Status FT6206_STATUS_OK or FT6206_STATUS_NOT_OK.
  */
static uint32_t ft6x06_TS_Configure(uint16_t DeviceAddr)
{
 80007ee:	b480      	push	{r7}
 80007f0:	b085      	sub	sp, #20
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	4603      	mov	r3, r0
 80007f6:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT6206_STATUS_OK;
 80007f8:	2300      	movs	r3, #0
 80007fa:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT6206 */

  return(status);
 80007fc:	68fb      	ldr	r3, [r7, #12]
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3714      	adds	r7, #20
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
	...

0800080c <ft6x06_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t ft6x06_GetInstance(uint16_t DeviceAddr)
{
 800080c:	b480      	push	{r7}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 800081a:	2300      	movs	r3, #0
 800081c:	73fb      	strb	r3, [r7, #15]
 800081e:	e00b      	b.n	8000838 <ft6x06_GetInstance+0x2c>
  {
    if(ft6x06[idx] == DeviceAddr)
 8000820:	7bfb      	ldrb	r3, [r7, #15]
 8000822:	4a0a      	ldr	r2, [pc, #40]	; (800084c <ft6x06_GetInstance+0x40>)
 8000824:	5cd3      	ldrb	r3, [r2, r3]
 8000826:	b29b      	uxth	r3, r3
 8000828:	88fa      	ldrh	r2, [r7, #6]
 800082a:	429a      	cmp	r2, r3
 800082c:	d101      	bne.n	8000832 <ft6x06_GetInstance+0x26>
    {
      return idx; 
 800082e:	7bfb      	ldrb	r3, [r7, #15]
 8000830:	e006      	b.n	8000840 <ft6x06_GetInstance+0x34>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 8000832:	7bfb      	ldrb	r3, [r7, #15]
 8000834:	3301      	adds	r3, #1
 8000836:	73fb      	strb	r3, [r7, #15]
 8000838:	7bfb      	ldrb	r3, [r7, #15]
 800083a:	2b01      	cmp	r3, #1
 800083c:	d9f0      	bls.n	8000820 <ft6x06_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 800083e:	23ff      	movs	r3, #255	; 0xff
}
 8000840:	4618      	mov	r0, r3
 8000842:	3714      	adds	r7, #20
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr
 800084c:	200000d8 	.word	0x200000d8

08000850 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800085a:	49be      	ldr	r1, [pc, #760]	; (8000b54 <OTM8009A_Init+0x304>)
 800085c:	2000      	movs	r0, #0
 800085e:	f001 fab3 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 8000862:	49bd      	ldr	r1, [pc, #756]	; (8000b58 <OTM8009A_Init+0x308>)
 8000864:	2003      	movs	r0, #3
 8000866:	f001 faaf 	bl	8001dc8 <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 800086a:	49bc      	ldr	r1, [pc, #752]	; (8000b5c <OTM8009A_Init+0x30c>)
 800086c:	2000      	movs	r0, #0
 800086e:	f001 faab 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8000872:	49bb      	ldr	r1, [pc, #748]	; (8000b60 <OTM8009A_Init+0x310>)
 8000874:	2002      	movs	r0, #2
 8000876:	f001 faa7 	bl	8001dc8 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800087a:	49b8      	ldr	r1, [pc, #736]	; (8000b5c <OTM8009A_Init+0x30c>)
 800087c:	2000      	movs	r0, #0
 800087e:	f001 faa3 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 8000882:	49b8      	ldr	r1, [pc, #736]	; (8000b64 <OTM8009A_Init+0x314>)
 8000884:	2000      	movs	r0, #0
 8000886:	f001 fa9f 	bl	8001dc8 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 800088a:	200a      	movs	r0, #10
 800088c:	f000 fc2a 	bl	80010e4 <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 8000890:	49b5      	ldr	r1, [pc, #724]	; (8000b68 <OTM8009A_Init+0x318>)
 8000892:	2000      	movs	r0, #0
 8000894:	f001 fa98 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 8000898:	49b4      	ldr	r1, [pc, #720]	; (8000b6c <OTM8009A_Init+0x31c>)
 800089a:	2000      	movs	r0, #0
 800089c:	f001 fa94 	bl	8001dc8 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 80008a0:	200a      	movs	r0, #10
 80008a2:	f000 fc1f 	bl	80010e4 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 80008a6:	49b2      	ldr	r1, [pc, #712]	; (8000b70 <OTM8009A_Init+0x320>)
 80008a8:	2000      	movs	r0, #0
 80008aa:	f001 fa8d 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 80008ae:	49b1      	ldr	r1, [pc, #708]	; (8000b74 <OTM8009A_Init+0x324>)
 80008b0:	2000      	movs	r0, #0
 80008b2:	f001 fa89 	bl	8001dc8 <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 80008b6:	49b0      	ldr	r1, [pc, #704]	; (8000b78 <OTM8009A_Init+0x328>)
 80008b8:	2000      	movs	r0, #0
 80008ba:	f001 fa85 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 80008be:	49af      	ldr	r1, [pc, #700]	; (8000b7c <OTM8009A_Init+0x32c>)
 80008c0:	2000      	movs	r0, #0
 80008c2:	f001 fa81 	bl	8001dc8 <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 80008c6:	49ae      	ldr	r1, [pc, #696]	; (8000b80 <OTM8009A_Init+0x330>)
 80008c8:	2000      	movs	r0, #0
 80008ca:	f001 fa7d 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 80008ce:	49ad      	ldr	r1, [pc, #692]	; (8000b84 <OTM8009A_Init+0x334>)
 80008d0:	2000      	movs	r0, #0
 80008d2:	f001 fa79 	bl	8001dc8 <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80008d6:	499f      	ldr	r1, [pc, #636]	; (8000b54 <OTM8009A_Init+0x304>)
 80008d8:	2000      	movs	r0, #0
 80008da:	f001 fa75 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 80008de:	49aa      	ldr	r1, [pc, #680]	; (8000b88 <OTM8009A_Init+0x338>)
 80008e0:	2000      	movs	r0, #0
 80008e2:	f001 fa71 	bl	8001dc8 <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80008e6:	49a9      	ldr	r1, [pc, #676]	; (8000b8c <OTM8009A_Init+0x33c>)
 80008e8:	2000      	movs	r0, #0
 80008ea:	f001 fa6d 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 80008ee:	49a8      	ldr	r1, [pc, #672]	; (8000b90 <OTM8009A_Init+0x340>)
 80008f0:	2000      	movs	r0, #0
 80008f2:	f001 fa69 	bl	8001dc8 <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 80008f6:	49a7      	ldr	r1, [pc, #668]	; (8000b94 <OTM8009A_Init+0x344>)
 80008f8:	2000      	movs	r0, #0
 80008fa:	f001 fa65 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 80008fe:	49a6      	ldr	r1, [pc, #664]	; (8000b98 <OTM8009A_Init+0x348>)
 8000900:	2000      	movs	r0, #0
 8000902:	f001 fa61 	bl	8001dc8 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 8000906:	49a5      	ldr	r1, [pc, #660]	; (8000b9c <OTM8009A_Init+0x34c>)
 8000908:	2000      	movs	r0, #0
 800090a:	f001 fa5d 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 800090e:	49a4      	ldr	r1, [pc, #656]	; (8000ba0 <OTM8009A_Init+0x350>)
 8000910:	2000      	movs	r0, #0
 8000912:	f001 fa59 	bl	8001dc8 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 8000916:	49a3      	ldr	r1, [pc, #652]	; (8000ba4 <OTM8009A_Init+0x354>)
 8000918:	2000      	movs	r0, #0
 800091a:	f001 fa55 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 800091e:	4997      	ldr	r1, [pc, #604]	; (8000b7c <OTM8009A_Init+0x32c>)
 8000920:	2000      	movs	r0, #0
 8000922:	f001 fa51 	bl	8001dc8 <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000926:	498b      	ldr	r1, [pc, #556]	; (8000b54 <OTM8009A_Init+0x304>)
 8000928:	2000      	movs	r0, #0
 800092a:	f001 fa4d 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 800092e:	499e      	ldr	r1, [pc, #632]	; (8000ba8 <OTM8009A_Init+0x358>)
 8000930:	2002      	movs	r0, #2
 8000932:	f001 fa49 	bl	8001dc8 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 8000936:	499d      	ldr	r1, [pc, #628]	; (8000bac <OTM8009A_Init+0x35c>)
 8000938:	2000      	movs	r0, #0
 800093a:	f001 fa45 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 800093e:	499c      	ldr	r1, [pc, #624]	; (8000bb0 <OTM8009A_Init+0x360>)
 8000940:	2000      	movs	r0, #0
 8000942:	f001 fa41 	bl	8001dc8 <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 8000946:	499b      	ldr	r1, [pc, #620]	; (8000bb4 <OTM8009A_Init+0x364>)
 8000948:	2000      	movs	r0, #0
 800094a:	f001 fa3d 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 800094e:	499a      	ldr	r1, [pc, #616]	; (8000bb8 <OTM8009A_Init+0x368>)
 8000950:	2000      	movs	r0, #0
 8000952:	f001 fa39 	bl	8001dc8 <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 8000956:	4999      	ldr	r1, [pc, #612]	; (8000bbc <OTM8009A_Init+0x36c>)
 8000958:	2000      	movs	r0, #0
 800095a:	f001 fa35 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 800095e:	4998      	ldr	r1, [pc, #608]	; (8000bc0 <OTM8009A_Init+0x370>)
 8000960:	2000      	movs	r0, #0
 8000962:	f001 fa31 	bl	8001dc8 <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8000966:	4989      	ldr	r1, [pc, #548]	; (8000b8c <OTM8009A_Init+0x33c>)
 8000968:	2000      	movs	r0, #0
 800096a:	f001 fa2d 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 800096e:	4995      	ldr	r1, [pc, #596]	; (8000bc4 <OTM8009A_Init+0x374>)
 8000970:	2000      	movs	r0, #0
 8000972:	f001 fa29 	bl	8001dc8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8000976:	4987      	ldr	r1, [pc, #540]	; (8000b94 <OTM8009A_Init+0x344>)
 8000978:	2000      	movs	r0, #0
 800097a:	f001 fa25 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 800097e:	4992      	ldr	r1, [pc, #584]	; (8000bc8 <OTM8009A_Init+0x378>)
 8000980:	2000      	movs	r0, #0
 8000982:	f001 fa21 	bl	8001dc8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 8000986:	4991      	ldr	r1, [pc, #580]	; (8000bcc <OTM8009A_Init+0x37c>)
 8000988:	2000      	movs	r0, #0
 800098a:	f001 fa1d 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 800098e:	4990      	ldr	r1, [pc, #576]	; (8000bd0 <OTM8009A_Init+0x380>)
 8000990:	2002      	movs	r0, #2
 8000992:	f001 fa19 	bl	8001dc8 <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8000996:	4971      	ldr	r1, [pc, #452]	; (8000b5c <OTM8009A_Init+0x30c>)
 8000998:	2000      	movs	r0, #0
 800099a:	f001 fa15 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 800099e:	498d      	ldr	r1, [pc, #564]	; (8000bd4 <OTM8009A_Init+0x384>)
 80009a0:	2006      	movs	r0, #6
 80009a2:	f001 fa11 	bl	8001dc8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80009a6:	498c      	ldr	r1, [pc, #560]	; (8000bd8 <OTM8009A_Init+0x388>)
 80009a8:	2000      	movs	r0, #0
 80009aa:	f001 fa0d 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 80009ae:	498b      	ldr	r1, [pc, #556]	; (8000bdc <OTM8009A_Init+0x38c>)
 80009b0:	200e      	movs	r0, #14
 80009b2:	f001 fa09 	bl	8001dc8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80009b6:	498a      	ldr	r1, [pc, #552]	; (8000be0 <OTM8009A_Init+0x390>)
 80009b8:	2000      	movs	r0, #0
 80009ba:	f001 fa05 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 80009be:	4989      	ldr	r1, [pc, #548]	; (8000be4 <OTM8009A_Init+0x394>)
 80009c0:	200e      	movs	r0, #14
 80009c2:	f001 fa01 	bl	8001dc8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80009c6:	4988      	ldr	r1, [pc, #544]	; (8000be8 <OTM8009A_Init+0x398>)
 80009c8:	2000      	movs	r0, #0
 80009ca:	f001 f9fd 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 80009ce:	4987      	ldr	r1, [pc, #540]	; (8000bec <OTM8009A_Init+0x39c>)
 80009d0:	200a      	movs	r0, #10
 80009d2:	f001 f9f9 	bl	8001dc8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80009d6:	4986      	ldr	r1, [pc, #536]	; (8000bf0 <OTM8009A_Init+0x3a0>)
 80009d8:	2000      	movs	r0, #0
 80009da:	f001 f9f5 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 80009de:	4985      	ldr	r1, [pc, #532]	; (8000bf4 <OTM8009A_Init+0x3a4>)
 80009e0:	2000      	movs	r0, #0
 80009e2:	f001 f9f1 	bl	8001dc8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80009e6:	495d      	ldr	r1, [pc, #372]	; (8000b5c <OTM8009A_Init+0x30c>)
 80009e8:	2000      	movs	r0, #0
 80009ea:	f001 f9ed 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 80009ee:	4982      	ldr	r1, [pc, #520]	; (8000bf8 <OTM8009A_Init+0x3a8>)
 80009f0:	200a      	movs	r0, #10
 80009f2:	f001 f9e9 	bl	8001dc8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 80009f6:	4981      	ldr	r1, [pc, #516]	; (8000bfc <OTM8009A_Init+0x3ac>)
 80009f8:	2000      	movs	r0, #0
 80009fa:	f001 f9e5 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 80009fe:	4980      	ldr	r1, [pc, #512]	; (8000c00 <OTM8009A_Init+0x3b0>)
 8000a00:	200f      	movs	r0, #15
 8000a02:	f001 f9e1 	bl	8001dc8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8000a06:	4974      	ldr	r1, [pc, #464]	; (8000bd8 <OTM8009A_Init+0x388>)
 8000a08:	2000      	movs	r0, #0
 8000a0a:	f001 f9dd 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 8000a0e:	497d      	ldr	r1, [pc, #500]	; (8000c04 <OTM8009A_Init+0x3b4>)
 8000a10:	200f      	movs	r0, #15
 8000a12:	f001 f9d9 	bl	8001dc8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8000a16:	4972      	ldr	r1, [pc, #456]	; (8000be0 <OTM8009A_Init+0x390>)
 8000a18:	2000      	movs	r0, #0
 8000a1a:	f001 f9d5 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 8000a1e:	497a      	ldr	r1, [pc, #488]	; (8000c08 <OTM8009A_Init+0x3b8>)
 8000a20:	200a      	movs	r0, #10
 8000a22:	f001 f9d1 	bl	8001dc8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8000a26:	4970      	ldr	r1, [pc, #448]	; (8000be8 <OTM8009A_Init+0x398>)
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f001 f9cd 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 8000a2e:	4977      	ldr	r1, [pc, #476]	; (8000c0c <OTM8009A_Init+0x3bc>)
 8000a30:	200f      	movs	r0, #15
 8000a32:	f001 f9c9 	bl	8001dc8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8000a36:	496e      	ldr	r1, [pc, #440]	; (8000bf0 <OTM8009A_Init+0x3a0>)
 8000a38:	2000      	movs	r0, #0
 8000a3a:	f001 f9c5 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 8000a3e:	4974      	ldr	r1, [pc, #464]	; (8000c10 <OTM8009A_Init+0x3c0>)
 8000a40:	200f      	movs	r0, #15
 8000a42:	f001 f9c1 	bl	8001dc8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 8000a46:	4973      	ldr	r1, [pc, #460]	; (8000c14 <OTM8009A_Init+0x3c4>)
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f001 f9bd 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 8000a4e:	4972      	ldr	r1, [pc, #456]	; (8000c18 <OTM8009A_Init+0x3c8>)
 8000a50:	200a      	movs	r0, #10
 8000a52:	f001 f9b9 	bl	8001dc8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 8000a56:	4971      	ldr	r1, [pc, #452]	; (8000c1c <OTM8009A_Init+0x3cc>)
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f001 f9b5 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 8000a5e:	4970      	ldr	r1, [pc, #448]	; (8000c20 <OTM8009A_Init+0x3d0>)
 8000a60:	200a      	movs	r0, #10
 8000a62:	f001 f9b1 	bl	8001dc8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8000a66:	493d      	ldr	r1, [pc, #244]	; (8000b5c <OTM8009A_Init+0x30c>)
 8000a68:	2000      	movs	r0, #0
 8000a6a:	f001 f9ad 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 8000a6e:	496d      	ldr	r1, [pc, #436]	; (8000c24 <OTM8009A_Init+0x3d4>)
 8000a70:	200a      	movs	r0, #10
 8000a72:	f001 f9a9 	bl	8001dc8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8000a76:	4961      	ldr	r1, [pc, #388]	; (8000bfc <OTM8009A_Init+0x3ac>)
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f001 f9a5 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 8000a7e:	496a      	ldr	r1, [pc, #424]	; (8000c28 <OTM8009A_Init+0x3d8>)
 8000a80:	200f      	movs	r0, #15
 8000a82:	f001 f9a1 	bl	8001dc8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8000a86:	4954      	ldr	r1, [pc, #336]	; (8000bd8 <OTM8009A_Init+0x388>)
 8000a88:	2000      	movs	r0, #0
 8000a8a:	f001 f99d 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 8000a8e:	4967      	ldr	r1, [pc, #412]	; (8000c2c <OTM8009A_Init+0x3dc>)
 8000a90:	200f      	movs	r0, #15
 8000a92:	f001 f999 	bl	8001dc8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8000a96:	4952      	ldr	r1, [pc, #328]	; (8000be0 <OTM8009A_Init+0x390>)
 8000a98:	2000      	movs	r0, #0
 8000a9a:	f001 f995 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 8000a9e:	4964      	ldr	r1, [pc, #400]	; (8000c30 <OTM8009A_Init+0x3e0>)
 8000aa0:	200a      	movs	r0, #10
 8000aa2:	f001 f991 	bl	8001dc8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8000aa6:	4950      	ldr	r1, [pc, #320]	; (8000be8 <OTM8009A_Init+0x398>)
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	f001 f98d 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 8000aae:	4961      	ldr	r1, [pc, #388]	; (8000c34 <OTM8009A_Init+0x3e4>)
 8000ab0:	200f      	movs	r0, #15
 8000ab2:	f001 f989 	bl	8001dc8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8000ab6:	494e      	ldr	r1, [pc, #312]	; (8000bf0 <OTM8009A_Init+0x3a0>)
 8000ab8:	2000      	movs	r0, #0
 8000aba:	f001 f985 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 8000abe:	495e      	ldr	r1, [pc, #376]	; (8000c38 <OTM8009A_Init+0x3e8>)
 8000ac0:	200f      	movs	r0, #15
 8000ac2:	f001 f981 	bl	8001dc8 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8000ac6:	4931      	ldr	r1, [pc, #196]	; (8000b8c <OTM8009A_Init+0x33c>)
 8000ac8:	2000      	movs	r0, #0
 8000aca:	f001 f97d 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 8000ace:	495b      	ldr	r1, [pc, #364]	; (8000c3c <OTM8009A_Init+0x3ec>)
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	f001 f979 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 8000ad6:	495a      	ldr	r1, [pc, #360]	; (8000c40 <OTM8009A_Init+0x3f0>)
 8000ad8:	2000      	movs	r0, #0
 8000ada:	f001 f975 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 8000ade:	4959      	ldr	r1, [pc, #356]	; (8000c44 <OTM8009A_Init+0x3f4>)
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f001 f971 	bl	8001dc8 <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 8000ae6:	4958      	ldr	r1, [pc, #352]	; (8000c48 <OTM8009A_Init+0x3f8>)
 8000ae8:	2000      	movs	r0, #0
 8000aea:	f001 f96d 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 8000aee:	4957      	ldr	r1, [pc, #348]	; (8000c4c <OTM8009A_Init+0x3fc>)
 8000af0:	2000      	movs	r0, #0
 8000af2:	f001 f969 	bl	8001dc8 <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000af6:	4917      	ldr	r1, [pc, #92]	; (8000b54 <OTM8009A_Init+0x304>)
 8000af8:	2000      	movs	r0, #0
 8000afa:	f001 f965 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 8000afe:	4954      	ldr	r1, [pc, #336]	; (8000c50 <OTM8009A_Init+0x400>)
 8000b00:	2003      	movs	r0, #3
 8000b02:	f001 f961 	bl	8001dc8 <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000b06:	4913      	ldr	r1, [pc, #76]	; (8000b54 <OTM8009A_Init+0x304>)
 8000b08:	2000      	movs	r0, #0
 8000b0a:	f001 f95d 	bl	8001dc8 <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000b0e:	4911      	ldr	r1, [pc, #68]	; (8000b54 <OTM8009A_Init+0x304>)
 8000b10:	2000      	movs	r0, #0
 8000b12:	f001 f959 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 8000b16:	494f      	ldr	r1, [pc, #316]	; (8000c54 <OTM8009A_Init+0x404>)
 8000b18:	2010      	movs	r0, #16
 8000b1a:	f001 f955 	bl	8001dc8 <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000b1e:	490d      	ldr	r1, [pc, #52]	; (8000b54 <OTM8009A_Init+0x304>)
 8000b20:	2000      	movs	r0, #0
 8000b22:	f001 f951 	bl	8001dc8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 8000b26:	494c      	ldr	r1, [pc, #304]	; (8000c58 <OTM8009A_Init+0x408>)
 8000b28:	2010      	movs	r0, #16
 8000b2a:	f001 f94d 	bl	8001dc8 <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 8000b2e:	494b      	ldr	r1, [pc, #300]	; (8000c5c <OTM8009A_Init+0x40c>)
 8000b30:	2000      	movs	r0, #0
 8000b32:	f001 f949 	bl	8001dc8 <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 8000b36:	2078      	movs	r0, #120	; 0x78
 8000b38:	f000 fad4 	bl	80010e4 <OTM8009A_IO_Delay>

  switch(ColorCoding)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	f000 8090 	beq.w	8000c64 <OTM8009A_Init+0x414>
 8000b44:	2b02      	cmp	r3, #2
 8000b46:	d000      	beq.n	8000b4a <OTM8009A_Init+0x2fa>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
    break;
  default :
    break;
 8000b48:	e091      	b.n	8000c6e <OTM8009A_Init+0x41e>
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 8000b4a:	4945      	ldr	r1, [pc, #276]	; (8000c60 <OTM8009A_Init+0x410>)
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	f001 f93b 	bl	8001dc8 <DSI_IO_WriteCmd>
    break;
 8000b52:	e08c      	b.n	8000c6e <OTM8009A_Init+0x41e>
 8000b54:	0800aaa4 	.word	0x0800aaa4
 8000b58:	0800a95c 	.word	0x0800a95c
 8000b5c:	0800aaa8 	.word	0x0800aaa8
 8000b60:	0800a960 	.word	0x0800a960
 8000b64:	0800aaac 	.word	0x0800aaac
 8000b68:	0800aab0 	.word	0x0800aab0
 8000b6c:	0800aab4 	.word	0x0800aab4
 8000b70:	0800aab8 	.word	0x0800aab8
 8000b74:	0800aabc 	.word	0x0800aabc
 8000b78:	0800aac0 	.word	0x0800aac0
 8000b7c:	0800aac4 	.word	0x0800aac4
 8000b80:	0800aac8 	.word	0x0800aac8
 8000b84:	0800aacc 	.word	0x0800aacc
 8000b88:	0800aad0 	.word	0x0800aad0
 8000b8c:	0800aad4 	.word	0x0800aad4
 8000b90:	0800aad8 	.word	0x0800aad8
 8000b94:	0800aadc 	.word	0x0800aadc
 8000b98:	0800aae0 	.word	0x0800aae0
 8000b9c:	0800aae4 	.word	0x0800aae4
 8000ba0:	0800aae8 	.word	0x0800aae8
 8000ba4:	0800aaec 	.word	0x0800aaec
 8000ba8:	0800a98c 	.word	0x0800a98c
 8000bac:	0800aaf0 	.word	0x0800aaf0
 8000bb0:	0800aaf4 	.word	0x0800aaf4
 8000bb4:	0800aaf8 	.word	0x0800aaf8
 8000bb8:	0800aafc 	.word	0x0800aafc
 8000bbc:	0800ab00 	.word	0x0800ab00
 8000bc0:	0800ab04 	.word	0x0800ab04
 8000bc4:	0800ab08 	.word	0x0800ab08
 8000bc8:	0800ab0c 	.word	0x0800ab0c
 8000bcc:	0800ab10 	.word	0x0800ab10
 8000bd0:	0800a990 	.word	0x0800a990
 8000bd4:	0800a994 	.word	0x0800a994
 8000bd8:	0800ab14 	.word	0x0800ab14
 8000bdc:	0800a99c 	.word	0x0800a99c
 8000be0:	0800ab18 	.word	0x0800ab18
 8000be4:	0800a9ac 	.word	0x0800a9ac
 8000be8:	0800ab1c 	.word	0x0800ab1c
 8000bec:	0800a9bc 	.word	0x0800a9bc
 8000bf0:	0800ab20 	.word	0x0800ab20
 8000bf4:	0800ab58 	.word	0x0800ab58
 8000bf8:	0800a9c8 	.word	0x0800a9c8
 8000bfc:	0800ab24 	.word	0x0800ab24
 8000c00:	0800a9d4 	.word	0x0800a9d4
 8000c04:	0800a9e4 	.word	0x0800a9e4
 8000c08:	0800a9f4 	.word	0x0800a9f4
 8000c0c:	0800aa00 	.word	0x0800aa00
 8000c10:	0800aa10 	.word	0x0800aa10
 8000c14:	0800ab28 	.word	0x0800ab28
 8000c18:	0800aa20 	.word	0x0800aa20
 8000c1c:	0800ab2c 	.word	0x0800ab2c
 8000c20:	0800aa2c 	.word	0x0800aa2c
 8000c24:	0800aa38 	.word	0x0800aa38
 8000c28:	0800aa44 	.word	0x0800aa44
 8000c2c:	0800aa54 	.word	0x0800aa54
 8000c30:	0800aa64 	.word	0x0800aa64
 8000c34:	0800aa70 	.word	0x0800aa70
 8000c38:	0800aa80 	.word	0x0800aa80
 8000c3c:	0800ab5c 	.word	0x0800ab5c
 8000c40:	0800ab60 	.word	0x0800ab60
 8000c44:	0800ab64 	.word	0x0800ab64
 8000c48:	0800ab68 	.word	0x0800ab68
 8000c4c:	0800ab6c 	.word	0x0800ab6c
 8000c50:	0800aa90 	.word	0x0800aa90
 8000c54:	0800a964 	.word	0x0800a964
 8000c58:	0800a978 	.word	0x0800a978
 8000c5c:	0800ab30 	.word	0x0800ab30
 8000c60:	0800ab34 	.word	0x0800ab34
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8000c64:	491a      	ldr	r1, [pc, #104]	; (8000cd0 <OTM8009A_Init+0x480>)
 8000c66:	2000      	movs	r0, #0
 8000c68:	f001 f8ae 	bl	8001dc8 <DSI_IO_WriteCmd>
    break;
 8000c6c:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d10b      	bne.n	8000c8c <OTM8009A_Init+0x43c>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8000c74:	4917      	ldr	r1, [pc, #92]	; (8000cd4 <OTM8009A_Init+0x484>)
 8000c76:	2000      	movs	r0, #0
 8000c78:	f001 f8a6 	bl	8001dc8 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 8000c7c:	4916      	ldr	r1, [pc, #88]	; (8000cd8 <OTM8009A_Init+0x488>)
 8000c7e:	2004      	movs	r0, #4
 8000c80:	f001 f8a2 	bl	8001dc8 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8000c84:	4915      	ldr	r1, [pc, #84]	; (8000cdc <OTM8009A_Init+0x48c>)
 8000c86:	2004      	movs	r0, #4
 8000c88:	f001 f89e 	bl	8001dc8 <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 8000c8c:	4914      	ldr	r1, [pc, #80]	; (8000ce0 <OTM8009A_Init+0x490>)
 8000c8e:	2000      	movs	r0, #0
 8000c90:	f001 f89a 	bl	8001dc8 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8000c94:	4913      	ldr	r1, [pc, #76]	; (8000ce4 <OTM8009A_Init+0x494>)
 8000c96:	2000      	movs	r0, #0
 8000c98:	f001 f896 	bl	8001dc8 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 8000c9c:	4912      	ldr	r1, [pc, #72]	; (8000ce8 <OTM8009A_Init+0x498>)
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f001 f892 	bl	8001dc8 <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8000ca4:	4911      	ldr	r1, [pc, #68]	; (8000cec <OTM8009A_Init+0x49c>)
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f001 f88e 	bl	8001dc8 <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 8000cac:	4910      	ldr	r1, [pc, #64]	; (8000cf0 <OTM8009A_Init+0x4a0>)
 8000cae:	2000      	movs	r0, #0
 8000cb0:	f001 f88a 	bl	8001dc8 <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000cb4:	490f      	ldr	r1, [pc, #60]	; (8000cf4 <OTM8009A_Init+0x4a4>)
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	f001 f886 	bl	8001dc8 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 8000cbc:	490e      	ldr	r1, [pc, #56]	; (8000cf8 <OTM8009A_Init+0x4a8>)
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	f001 f882 	bl	8001dc8 <DSI_IO_WriteCmd>

  return 0;
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	0800ab38 	.word	0x0800ab38
 8000cd4:	0800ab3c 	.word	0x0800ab3c
 8000cd8:	0800aa94 	.word	0x0800aa94
 8000cdc:	0800aa9c 	.word	0x0800aa9c
 8000ce0:	0800ab40 	.word	0x0800ab40
 8000ce4:	0800ab44 	.word	0x0800ab44
 8000ce8:	0800ab48 	.word	0x0800ab48
 8000cec:	0800ab4c 	.word	0x0800ab4c
 8000cf0:	0800ab50 	.word	0x0800ab50
 8000cf4:	0800aaa4 	.word	0x0800aaa4
 8000cf8:	0800ab54 	.word	0x0800ab54

08000cfc <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b088      	sub	sp, #32
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE();
 8000d06:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <BSP_LED_Init+0x54>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a11      	ldr	r2, [pc, #68]	; (8000d50 <BSP_LED_Init+0x54>)
 8000d0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b0f      	ldr	r3, [pc, #60]	; (8000d50 <BSP_LED_Init+0x54>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d1a:	60bb      	str	r3, [r7, #8]
 8000d1c:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	4a0c      	ldr	r2, [pc, #48]	; (8000d54 <BSP_LED_Init+0x58>)
 8000d22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d26:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8000d30:	2303      	movs	r3, #3
 8000d32:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	4a08      	ldr	r2, [pc, #32]	; (8000d58 <BSP_LED_Init+0x5c>)
 8000d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d3c:	f107 020c 	add.w	r2, r7, #12
 8000d40:	4611      	mov	r1, r2
 8000d42:	4618      	mov	r0, r3
 8000d44:	f004 f8d8 	bl	8004ef8 <HAL_GPIO_Init>

}
 8000d48:	bf00      	nop
 8000d4a:	3720      	adds	r7, #32
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40023800 	.word	0x40023800
 8000d54:	20000028 	.word	0x20000028
 8000d58:	20000030 	.word	0x20000030

08000d5c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08c      	sub	sp, #48	; 0x30
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4a58      	ldr	r2, [pc, #352]	; (8000ec8 <I2Cx_MspInit+0x16c>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d15b      	bne.n	8000e24 <I2Cx_MspInit+0xc8>
  {
  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_AUDIO_I2Cx_SCL_GPIO_CLK_ENABLE();
 8000d6c:	4b57      	ldr	r3, [pc, #348]	; (8000ecc <I2Cx_MspInit+0x170>)
 8000d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d70:	4a56      	ldr	r2, [pc, #344]	; (8000ecc <I2Cx_MspInit+0x170>)
 8000d72:	f043 0308 	orr.w	r3, r3, #8
 8000d76:	6313      	str	r3, [r2, #48]	; 0x30
 8000d78:	4b54      	ldr	r3, [pc, #336]	; (8000ecc <I2Cx_MspInit+0x170>)
 8000d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7c:	f003 0308 	and.w	r3, r3, #8
 8000d80:	61bb      	str	r3, [r7, #24]
 8000d82:	69bb      	ldr	r3, [r7, #24]
  DISCOVERY_AUDIO_I2Cx_SDA_GPIO_CLK_ENABLE();
 8000d84:	4b51      	ldr	r3, [pc, #324]	; (8000ecc <I2Cx_MspInit+0x170>)
 8000d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d88:	4a50      	ldr	r2, [pc, #320]	; (8000ecc <I2Cx_MspInit+0x170>)
 8000d8a:	f043 0302 	orr.w	r3, r3, #2
 8000d8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d90:	4b4e      	ldr	r3, [pc, #312]	; (8000ecc <I2Cx_MspInit+0x170>)
 8000d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d94:	f003 0302 	and.w	r3, r3, #2
 8000d98:	617b      	str	r3, [r7, #20]
 8000d9a:	697b      	ldr	r3, [r7, #20]
  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8000d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000da0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000da2:	2312      	movs	r3, #18
 8000da4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000daa:	2302      	movs	r3, #2
 8000dac:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_AF;
 8000dae:	2304      	movs	r3, #4
 8000db0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_GPIO_PORT, &gpio_init_structure);
 8000db2:	f107 031c 	add.w	r3, r7, #28
 8000db6:	4619      	mov	r1, r3
 8000db8:	4845      	ldr	r0, [pc, #276]	; (8000ed0 <I2Cx_MspInit+0x174>)
 8000dba:	f004 f89d 	bl	8004ef8 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8000dbe:	2380      	movs	r3, #128	; 0x80
 8000dc0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SDA_AF;
 8000dc2:	230b      	movs	r3, #11
 8000dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SDA_GPIO_PORT, &gpio_init_structure);
 8000dc6:	f107 031c 	add.w	r3, r7, #28
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4841      	ldr	r0, [pc, #260]	; (8000ed4 <I2Cx_MspInit+0x178>)
 8000dce:	f004 f893 	bl	8004ef8 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8000dd2:	4b3e      	ldr	r3, [pc, #248]	; (8000ecc <I2Cx_MspInit+0x170>)
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd6:	4a3d      	ldr	r2, [pc, #244]	; (8000ecc <I2Cx_MspInit+0x170>)
 8000dd8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dde:	4b3b      	ldr	r3, [pc, #236]	; (8000ecc <I2Cx_MspInit+0x170>)
 8000de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000de6:	613b      	str	r3, [r7, #16]
 8000de8:	693b      	ldr	r3, [r7, #16]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8000dea:	4b38      	ldr	r3, [pc, #224]	; (8000ecc <I2Cx_MspInit+0x170>)
 8000dec:	6a1b      	ldr	r3, [r3, #32]
 8000dee:	4a37      	ldr	r2, [pc, #220]	; (8000ecc <I2Cx_MspInit+0x170>)
 8000df0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000df4:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8000df6:	4b35      	ldr	r3, [pc, #212]	; (8000ecc <I2Cx_MspInit+0x170>)
 8000df8:	6a1b      	ldr	r3, [r3, #32]
 8000dfa:	4a34      	ldr	r2, [pc, #208]	; (8000ecc <I2Cx_MspInit+0x170>)
 8000dfc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000e00:	6213      	str	r3, [r2, #32]

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000e02:	2200      	movs	r2, #0
 8000e04:	210f      	movs	r1, #15
 8000e06:	205f      	movs	r0, #95	; 0x5f
 8000e08:	f002 fb6b 	bl	80034e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8000e0c:	205f      	movs	r0, #95	; 0x5f
 8000e0e:	f002 fb84 	bl	800351a <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8000e12:	2200      	movs	r2, #0
 8000e14:	210f      	movs	r1, #15
 8000e16:	2060      	movs	r0, #96	; 0x60
 8000e18:	f002 fb63 	bl	80034e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);    
 8000e1c:	2060      	movs	r0, #96	; 0x60
 8000e1e:	f002 fb7c 	bl	800351a <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8000e22:	e04d      	b.n	8000ec0 <I2Cx_MspInit+0x164>
  DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000e24:	4b29      	ldr	r3, [pc, #164]	; (8000ecc <I2Cx_MspInit+0x170>)
 8000e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e28:	4a28      	ldr	r2, [pc, #160]	; (8000ecc <I2Cx_MspInit+0x170>)
 8000e2a:	f043 0302 	orr.w	r3, r3, #2
 8000e2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e30:	4b26      	ldr	r3, [pc, #152]	; (8000ecc <I2Cx_MspInit+0x170>)
 8000e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e34:	f003 0302 	and.w	r3, r3, #2
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8000e3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e40:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000e42:	2312      	movs	r3, #18
 8000e44:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8000e4e:	2304      	movs	r3, #4
 8000e50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000e52:	f107 031c 	add.w	r3, r7, #28
 8000e56:	4619      	mov	r1, r3
 8000e58:	481e      	ldr	r0, [pc, #120]	; (8000ed4 <I2Cx_MspInit+0x178>)
 8000e5a:	f004 f84d 	bl	8004ef8 <HAL_GPIO_Init>
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8000e5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000e64:	f107 031c 	add.w	r3, r7, #28
 8000e68:	4619      	mov	r1, r3
 8000e6a:	481a      	ldr	r0, [pc, #104]	; (8000ed4 <I2Cx_MspInit+0x178>)
 8000e6c:	f004 f844 	bl	8004ef8 <HAL_GPIO_Init>
  DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8000e70:	4b16      	ldr	r3, [pc, #88]	; (8000ecc <I2Cx_MspInit+0x170>)
 8000e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e74:	4a15      	ldr	r2, [pc, #84]	; (8000ecc <I2Cx_MspInit+0x170>)
 8000e76:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e7c:	4b13      	ldr	r3, [pc, #76]	; (8000ecc <I2Cx_MspInit+0x170>)
 8000e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	68bb      	ldr	r3, [r7, #8]
  DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8000e88:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <I2Cx_MspInit+0x170>)
 8000e8a:	6a1b      	ldr	r3, [r3, #32]
 8000e8c:	4a0f      	ldr	r2, [pc, #60]	; (8000ecc <I2Cx_MspInit+0x170>)
 8000e8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e92:	6213      	str	r3, [r2, #32]
  DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8000e94:	4b0d      	ldr	r3, [pc, #52]	; (8000ecc <I2Cx_MspInit+0x170>)
 8000e96:	6a1b      	ldr	r3, [r3, #32]
 8000e98:	4a0c      	ldr	r2, [pc, #48]	; (8000ecc <I2Cx_MspInit+0x170>)
 8000e9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000e9e:	6213      	str	r3, [r2, #32]
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	210f      	movs	r1, #15
 8000ea4:	201f      	movs	r0, #31
 8000ea6:	f002 fb1c 	bl	80034e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8000eaa:	201f      	movs	r0, #31
 8000eac:	f002 fb35 	bl	800351a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	210f      	movs	r1, #15
 8000eb4:	2020      	movs	r0, #32
 8000eb6:	f002 fb14 	bl	80034e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8000eba:	2020      	movs	r0, #32
 8000ebc:	f002 fb2d 	bl	800351a <HAL_NVIC_EnableIRQ>
}
 8000ec0:	bf00      	nop
 8000ec2:	3730      	adds	r7, #48	; 0x30
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	200000e0 	.word	0x200000e0
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40020c00 	.word	0x40020c00
 8000ed4:	40020400 	.word	0x40020400

08000ed8 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f004 fdf1 	bl	8005ac8 <HAL_I2C_GetState>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d125      	bne.n	8000f38 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4a14      	ldr	r2, [pc, #80]	; (8000f40 <I2Cx_Init+0x68>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d103      	bne.n	8000efc <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4a13      	ldr	r2, [pc, #76]	; (8000f44 <I2Cx_Init+0x6c>)
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	e002      	b.n	8000f02 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a12      	ldr	r2, [pc, #72]	; (8000f48 <I2Cx_Init+0x70>)
 8000f00:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a11      	ldr	r2, [pc, #68]	; (8000f4c <I2Cx_Init+0x74>)
 8000f06:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2201      	movs	r2, #1
 8000f12:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2200      	movs	r2, #0
 8000f18:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2200      	movs	r2, #0
 8000f24:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f7ff ff15 	bl	8000d5c <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f004 fac6 	bl	80054c4 <HAL_I2C_Init>
  }
}
 8000f38:	bf00      	nop
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	200000e0 	.word	0x200000e0
 8000f44:	40006000 	.word	0x40006000
 8000f48:	40005400 	.word	0x40005400
 8000f4c:	40912732 	.word	0x40912732

08000f50 <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08a      	sub	sp, #40	; 0x28
 8000f54:	af04      	add	r7, sp, #16
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	4608      	mov	r0, r1
 8000f5a:	4611      	mov	r1, r2
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	4603      	mov	r3, r0
 8000f60:	72fb      	strb	r3, [r7, #11]
 8000f62:	460b      	mov	r3, r1
 8000f64:	813b      	strh	r3, [r7, #8]
 8000f66:	4613      	mov	r3, r2
 8000f68:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000f6e:	7afb      	ldrb	r3, [r7, #11]
 8000f70:	b299      	uxth	r1, r3
 8000f72:	88f8      	ldrh	r0, [r7, #6]
 8000f74:	893a      	ldrh	r2, [r7, #8]
 8000f76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f7a:	9302      	str	r3, [sp, #8]
 8000f7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f7e:	9301      	str	r3, [sp, #4]
 8000f80:	6a3b      	ldr	r3, [r7, #32]
 8000f82:	9300      	str	r3, [sp, #0]
 8000f84:	4603      	mov	r3, r0
 8000f86:	68f8      	ldr	r0, [r7, #12]
 8000f88:	f004 fc84 	bl	8005894 <HAL_I2C_Mem_Read>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8000f90:	7dfb      	ldrb	r3, [r7, #23]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d004      	beq.n	8000fa0 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8000f96:	7afb      	ldrb	r3, [r7, #11]
 8000f98:	4619      	mov	r1, r3
 8000f9a:	68f8      	ldr	r0, [r7, #12]
 8000f9c:	f000 f832 	bl	8001004 <I2Cx_Error>
  }
  return status;
 8000fa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3718      	adds	r7, #24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b08a      	sub	sp, #40	; 0x28
 8000fae:	af04      	add	r7, sp, #16
 8000fb0:	60f8      	str	r0, [r7, #12]
 8000fb2:	4608      	mov	r0, r1
 8000fb4:	4611      	mov	r1, r2
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	4603      	mov	r3, r0
 8000fba:	72fb      	strb	r3, [r7, #11]
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	813b      	strh	r3, [r7, #8]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000fc8:	7afb      	ldrb	r3, [r7, #11]
 8000fca:	b299      	uxth	r1, r3
 8000fcc:	88f8      	ldrh	r0, [r7, #6]
 8000fce:	893a      	ldrh	r2, [r7, #8]
 8000fd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd4:	9302      	str	r3, [sp, #8]
 8000fd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fd8:	9301      	str	r3, [sp, #4]
 8000fda:	6a3b      	ldr	r3, [r7, #32]
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	4603      	mov	r3, r0
 8000fe0:	68f8      	ldr	r0, [r7, #12]
 8000fe2:	f004 fb43 	bl	800566c <HAL_I2C_Mem_Write>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8000fea:	7dfb      	ldrb	r3, [r7, #23]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d004      	beq.n	8000ffa <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8000ff0:	7afb      	ldrb	r3, [r7, #11]
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	68f8      	ldr	r0, [r7, #12]
 8000ff6:	f000 f805 	bl	8001004 <I2Cx_Error>
  }
  return status;
 8000ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3718      	adds	r7, #24
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	460b      	mov	r3, r1
 800100e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f004 fae7 	bl	80055e4 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f7ff ff5e 	bl	8000ed8 <I2Cx_Init>
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8001028:	4802      	ldr	r0, [pc, #8]	; (8001034 <TS_IO_Init+0x10>)
 800102a:	f7ff ff55 	bl	8000ed8 <I2Cx_Init>
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	200000e0 	.word	0x200000e0

08001038 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af02      	add	r7, sp, #8
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
 8001042:	460b      	mov	r3, r1
 8001044:	71bb      	strb	r3, [r7, #6]
 8001046:	4613      	mov	r3, r2
 8001048:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800104a:	79bb      	ldrb	r3, [r7, #6]
 800104c:	b29a      	uxth	r2, r3
 800104e:	79f9      	ldrb	r1, [r7, #7]
 8001050:	2301      	movs	r3, #1
 8001052:	9301      	str	r3, [sp, #4]
 8001054:	1d7b      	adds	r3, r7, #5
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	2301      	movs	r3, #1
 800105a:	4803      	ldr	r0, [pc, #12]	; (8001068 <TS_IO_Write+0x30>)
 800105c:	f7ff ffa5 	bl	8000faa <I2Cx_WriteMultiple>
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	200000e0 	.word	0x200000e0

0800106c <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af02      	add	r7, sp, #8
 8001072:	4603      	mov	r3, r0
 8001074:	460a      	mov	r2, r1
 8001076:	71fb      	strb	r3, [r7, #7]
 8001078:	4613      	mov	r3, r2
 800107a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001080:	79bb      	ldrb	r3, [r7, #6]
 8001082:	b29a      	uxth	r2, r3
 8001084:	79f9      	ldrb	r1, [r7, #7]
 8001086:	2301      	movs	r3, #1
 8001088:	9301      	str	r3, [sp, #4]
 800108a:	f107 030f 	add.w	r3, r7, #15
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	2301      	movs	r3, #1
 8001092:	4804      	ldr	r0, [pc, #16]	; (80010a4 <TS_IO_Read+0x38>)
 8001094:	f7ff ff5c 	bl	8000f50 <I2Cx_ReadMultiple>

  return read_value;
 8001098:	7bfb      	ldrb	r3, [r7, #15]
}
 800109a:	4618      	mov	r0, r3
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	200000e0 	.word	0x200000e0

080010a8 <TS_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af02      	add	r7, sp, #8
 80010ae:	603a      	str	r2, [r7, #0]
 80010b0:	461a      	mov	r2, r3
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
 80010b6:	460b      	mov	r3, r1
 80010b8:	71bb      	strb	r3, [r7, #6]
 80010ba:	4613      	mov	r3, r2
 80010bc:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80010be:	79bb      	ldrb	r3, [r7, #6]
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	79f9      	ldrb	r1, [r7, #7]
 80010c4:	88bb      	ldrh	r3, [r7, #4]
 80010c6:	9301      	str	r3, [sp, #4]
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	2301      	movs	r3, #1
 80010ce:	4804      	ldr	r0, [pc, #16]	; (80010e0 <TS_IO_ReadMultiple+0x38>)
 80010d0:	f7ff ff3e 	bl	8000f50 <I2Cx_ReadMultiple>
 80010d4:	4603      	mov	r3, r0
 80010d6:	b29b      	uxth	r3, r3
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	200000e0 	.word	0x200000e0

080010e4 <OTM8009A_IO_Delay>:
/**
  * @brief  OTM8009A delay
  * @param  Delay: Delay in ms
  */
void OTM8009A_IO_Delay(uint32_t Delay)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f001 fc53 	bl	8002998 <HAL_Delay>
}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <BSP_LCD_Init>:
/**
  * @brief  Initializes the DSI LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 80010fe:	2001      	movs	r0, #1
 8001100:	f000 f804 	bl	800110c <BSP_LCD_InitEx>
 8001104:	4603      	mov	r3, r0
}
 8001106:	4618      	mov	r0, r3
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <BSP_LCD_InitEx>:
  *     - OTM8009A LCD Display IC Driver ititialization
  * @param  orientation: LCD orientation, can be LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(LCD_OrientationTypeDef orientation)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b090      	sub	sp, #64	; 0x40
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
  DSI_PLLInitTypeDef dsiPllInit;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  uint32_t LcdClock  = 27429; /*!< LcdClk = 27429 kHz */
 8001116:	f646 3325 	movw	r3, #27429	; 0x6b25
 800111a:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t read_id = 0;
 800111c:	2300      	movs	r3, #0
 800111e:	877b      	strh	r3, [r7, #58]	; 0x3a

  uint32_t laneByteClk_kHz = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t                   HFP; /*!< Horizontal Front Porch time in units of lcdClk */
  uint32_t                   HACT; /*!< Horizontal Active time in units of lcdClk = imageSize X in pixels to display */

  /* Toggle Hardware Reset of the DSI LCD using
  * its XRES signal (active low) */
  BSP_LCD_Reset();
 8001124:	f000 f936 	bl	8001394 <BSP_LCD_Reset>

  /* Check the connected monitor */
  read_id = LCD_IO_GetID();
 8001128:	f000 fe78 	bl	8001e1c <LCD_IO_GetID>
 800112c:	4603      	mov	r3, r0
 800112e:	877b      	strh	r3, [r7, #58]	; 0x3a
  else if(read_id != LCD_DSI_ID)
  {
    return LCD_ERROR;  
  }
#else
  if(read_id != LCD_DSI_ID)
 8001130:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001132:	2b11      	cmp	r3, #17
 8001134:	d001      	beq.n	800113a <BSP_LCD_InitEx+0x2e>
  {
    return LCD_ERROR;  
 8001136:	2301      	movs	r3, #1
 8001138:	e113      	b.n	8001362 <BSP_LCD_InitEx+0x256>
  * This will set IP blocks LTDC, DSI and DMA2D
  * - out of reset
  * - clocked
  * - NVIC IRQ related to IP blocks enabled
  */
  BSP_LCD_MspInit();
 800113a:	f000 fe77 	bl	8001e2c <BSP_LCD_MspInit>

/*************************DSI Initialization***********************************/  

  /* Base address of DSI Host/Wrapper registers to be set before calling De-Init */
  hdsi_discovery.Instance = DSI;
 800113e:	4b8b      	ldr	r3, [pc, #556]	; (800136c <BSP_LCD_InitEx+0x260>)
 8001140:	4a8b      	ldr	r2, [pc, #556]	; (8001370 <BSP_LCD_InitEx+0x264>)
 8001142:	601a      	str	r2, [r3, #0]

  HAL_DSI_DeInit(&(hdsi_discovery));
 8001144:	4889      	ldr	r0, [pc, #548]	; (800136c <BSP_LCD_InitEx+0x260>)
 8001146:	f002 ffc9 	bl	80040dc <HAL_DSI_DeInit>

  dsiPllInit.PLLNDIV  = 100;
 800114a:	2364      	movs	r3, #100	; 0x64
 800114c:	60bb      	str	r3, [r7, #8]
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
 800114e:	2305      	movs	r3, #5
 8001150:	60fb      	str	r3, [r7, #12]
  dsiPllInit.PLLODF  = DSI_PLL_OUT_DIV1;
 8001152:	2300      	movs	r3, #0
 8001154:	613b      	str	r3, [r7, #16]
  laneByteClk_kHz = 62500; /* 500 MHz / 8 = 62.5 MHz = 62500 kHz */
 8001156:	f24f 4324 	movw	r3, #62500	; 0xf424
 800115a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set number of Lanes */
  hdsi_discovery.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 800115c:	4b83      	ldr	r3, [pc, #524]	; (800136c <BSP_LCD_InitEx+0x260>)
 800115e:	2201      	movs	r2, #1
 8001160:	60da      	str	r2, [r3, #12]

  /* TXEscapeCkdiv = f(LaneByteClk)/15.62 = 4 */
  hdsi_discovery.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 8001162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001164:	089b      	lsrs	r3, r3, #2
 8001166:	4a83      	ldr	r2, [pc, #524]	; (8001374 <BSP_LCD_InitEx+0x268>)
 8001168:	fba2 2303 	umull	r2, r3, r2, r3
 800116c:	0a9b      	lsrs	r3, r3, #10
 800116e:	4a7f      	ldr	r2, [pc, #508]	; (800136c <BSP_LCD_InitEx+0x260>)
 8001170:	6093      	str	r3, [r2, #8]

  HAL_DSI_Init(&(hdsi_discovery), &(dsiPllInit));
 8001172:	f107 0308 	add.w	r3, r7, #8
 8001176:	4619      	mov	r1, r3
 8001178:	487c      	ldr	r0, [pc, #496]	; (800136c <BSP_LCD_InitEx+0x260>)
 800117a:	f002 fe95 	bl	8003ea8 <HAL_DSI_Init>

  /* Timing parameters for all Video modes
  * Set Timing parameters of LTDC depending on its chosen orientation
  */
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d108      	bne.n	8001196 <BSP_LCD_InitEx+0x8a>
  {
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 8001184:	4b7c      	ldr	r3, [pc, #496]	; (8001378 <BSP_LCD_InitEx+0x26c>)
 8001186:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800118a:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 800118c:	4b7b      	ldr	r3, [pc, #492]	; (800137c <BSP_LCD_InitEx+0x270>)
 800118e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	e007      	b.n	80011a6 <BSP_LCD_InitEx+0x9a>
  }
  else
  {
    /* lcd_orientation == LCD_ORIENTATION_LANDSCAPE */
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 8001196:	4b78      	ldr	r3, [pc, #480]	; (8001378 <BSP_LCD_InitEx+0x26c>)
 8001198:	f44f 7248 	mov.w	r2, #800	; 0x320
 800119c:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 800119e:	4b77      	ldr	r3, [pc, #476]	; (800137c <BSP_LCD_InitEx+0x270>)
 80011a0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80011a4:	601a      	str	r2, [r3, #0]
  }

  HACT = lcd_x_size;
 80011a6:	4b74      	ldr	r3, [pc, #464]	; (8001378 <BSP_LCD_InitEx+0x26c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	633b      	str	r3, [r7, #48]	; 0x30
  VACT = lcd_y_size;
 80011ac:	4b73      	ldr	r3, [pc, #460]	; (800137c <BSP_LCD_InitEx+0x270>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* The following values are same for portrait and landscape orientations */
  VSA  = OTM8009A_480X800_VSYNC;        /* 12  */
 80011b2:	2301      	movs	r3, #1
 80011b4:	62bb      	str	r3, [r7, #40]	; 0x28
  VBP  = OTM8009A_480X800_VBP;          /* 12  */
 80011b6:	230f      	movs	r3, #15
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
  VFP  = OTM8009A_480X800_VFP;          /* 12  */
 80011ba:	2310      	movs	r3, #16
 80011bc:	623b      	str	r3, [r7, #32]
  HSA  = OTM8009A_480X800_HSYNC;        /* 63  */
 80011be:	2302      	movs	r3, #2
 80011c0:	61fb      	str	r3, [r7, #28]
  HBP  = OTM8009A_480X800_HBP;          /* 120 */
 80011c2:	2322      	movs	r3, #34	; 0x22
 80011c4:	61bb      	str	r3, [r7, #24]
  HFP  = OTM8009A_480X800_HFP;          /* 120 */   
 80011c6:	2322      	movs	r3, #34	; 0x22
 80011c8:	617b      	str	r3, [r7, #20]

  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 80011ca:	4b6d      	ldr	r3, [pc, #436]	; (8001380 <BSP_LCD_InitEx+0x274>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 80011d0:	4b6b      	ldr	r3, [pc, #428]	; (8001380 <BSP_LCD_InitEx+0x274>)
 80011d2:	2205      	movs	r2, #5
 80011d4:	605a      	str	r2, [r3, #4]
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 80011d6:	4b6a      	ldr	r3, [pc, #424]	; (8001380 <BSP_LCD_InitEx+0x274>)
 80011d8:	2200      	movs	r2, #0
 80011da:	621a      	str	r2, [r3, #32]
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 80011dc:	4b68      	ldr	r3, [pc, #416]	; (8001380 <BSP_LCD_InitEx+0x274>)
 80011de:	2200      	movs	r2, #0
 80011e0:	61da      	str	r2, [r3, #28]
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 80011e2:	4b67      	ldr	r3, [pc, #412]	; (8001380 <BSP_LCD_InitEx+0x274>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	625a      	str	r2, [r3, #36]	; 0x24
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 80011e8:	4b65      	ldr	r3, [pc, #404]	; (8001380 <BSP_LCD_InitEx+0x274>)
 80011ea:	2202      	movs	r2, #2
 80011ec:	60da      	str	r2, [r3, #12]
  hdsivideo_handle.NullPacketSize = 0xFFF;
 80011ee:	4b64      	ldr	r3, [pc, #400]	; (8001380 <BSP_LCD_InitEx+0x274>)
 80011f0:	f640 72ff 	movw	r2, #4095	; 0xfff
 80011f4:	619a      	str	r2, [r3, #24]
  hdsivideo_handle.NumberOfChunks = 0;
 80011f6:	4b62      	ldr	r3, [pc, #392]	; (8001380 <BSP_LCD_InitEx+0x274>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	615a      	str	r2, [r3, #20]
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 80011fc:	4a60      	ldr	r2, [pc, #384]	; (8001380 <BSP_LCD_InitEx+0x274>)
 80011fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001200:	6113      	str	r3, [r2, #16]
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz)/LcdClock;
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001206:	fb02 f203 	mul.w	r2, r2, r3
 800120a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800120c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001210:	4a5b      	ldr	r2, [pc, #364]	; (8001380 <BSP_LCD_InitEx+0x274>)
 8001212:	6293      	str	r3, [r2, #40]	; 0x28
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz)/LcdClock;
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001218:	fb02 f203 	mul.w	r2, r2, r3
 800121c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800121e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001222:	4a57      	ldr	r2, [pc, #348]	; (8001380 <BSP_LCD_InitEx+0x274>)
 8001224:	62d3      	str	r3, [r2, #44]	; 0x2c
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz)/LcdClock; /* Value depending on display orientation choice portrait/landscape */
 8001226:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	441a      	add	r2, r3
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	441a      	add	r2, r3
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	4413      	add	r3, r2
 8001234:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001236:	fb02 f203 	mul.w	r2, r2, r3
 800123a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800123c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001240:	4a4f      	ldr	r2, [pc, #316]	; (8001380 <BSP_LCD_InitEx+0x274>)
 8001242:	6313      	str	r3, [r2, #48]	; 0x30
  hdsivideo_handle.VerticalSyncActive        = VSA;
 8001244:	4a4e      	ldr	r2, [pc, #312]	; (8001380 <BSP_LCD_InitEx+0x274>)
 8001246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001248:	6353      	str	r3, [r2, #52]	; 0x34
  hdsivideo_handle.VerticalBackPorch         = VBP;
 800124a:	4a4d      	ldr	r2, [pc, #308]	; (8001380 <BSP_LCD_InitEx+0x274>)
 800124c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124e:	6393      	str	r3, [r2, #56]	; 0x38
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 8001250:	4a4b      	ldr	r2, [pc, #300]	; (8001380 <BSP_LCD_InitEx+0x274>)
 8001252:	6a3b      	ldr	r3, [r7, #32]
 8001254:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 8001256:	4a4a      	ldr	r2, [pc, #296]	; (8001380 <BSP_LCD_InitEx+0x274>)
 8001258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800125a:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable or disable sending LP command while streaming is active in video mode */
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 800125c:	4b48      	ldr	r3, [pc, #288]	; (8001380 <BSP_LCD_InitEx+0x274>)
 800125e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001262:	645a      	str	r2, [r3, #68]	; 0x44

  /* Largest packet size possible to transmit in LP mode in VSA, VBP, VFP regions */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPLargestPacketSize = 16;
 8001264:	4b46      	ldr	r3, [pc, #280]	; (8001380 <BSP_LCD_InitEx+0x274>)
 8001266:	2210      	movs	r2, #16
 8001268:	649a      	str	r2, [r3, #72]	; 0x48

  /* Largest packet size possible to transmit in LP mode in HFP region during VACT period */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 800126a:	4b45      	ldr	r3, [pc, #276]	; (8001380 <BSP_LCD_InitEx+0x274>)
 800126c:	2200      	movs	r2, #0
 800126e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Specify for each region of the video frame, if the transmission of command in LP mode is allowed in this region */
  /* while streaming is active in video mode                                                                         */
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 8001270:	4b43      	ldr	r3, [pc, #268]	; (8001380 <BSP_LCD_InitEx+0x274>)
 8001272:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001276:	651a      	str	r2, [r3, #80]	; 0x50
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 8001278:	4b41      	ldr	r3, [pc, #260]	; (8001380 <BSP_LCD_InitEx+0x274>)
 800127a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800127e:	655a      	str	r2, [r3, #84]	; 0x54
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 8001280:	4b3f      	ldr	r3, [pc, #252]	; (8001380 <BSP_LCD_InitEx+0x274>)
 8001282:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001286:	659a      	str	r2, [r3, #88]	; 0x58
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 8001288:	4b3d      	ldr	r3, [pc, #244]	; (8001380 <BSP_LCD_InitEx+0x274>)
 800128a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800128e:	65da      	str	r2, [r3, #92]	; 0x5c
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 8001290:	4b3b      	ldr	r3, [pc, #236]	; (8001380 <BSP_LCD_InitEx+0x274>)
 8001292:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001296:	661a      	str	r2, [r3, #96]	; 0x60
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 8001298:	4b39      	ldr	r3, [pc, #228]	; (8001380 <BSP_LCD_InitEx+0x274>)
 800129a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800129e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure DSI Video mode timings with settings set above */
  HAL_DSI_ConfigVideoMode(&(hdsi_discovery), &(hdsivideo_handle));
 80012a0:	4937      	ldr	r1, [pc, #220]	; (8001380 <BSP_LCD_InitEx+0x274>)
 80012a2:	4832      	ldr	r0, [pc, #200]	; (800136c <BSP_LCD_InitEx+0x260>)
 80012a4:	f003 f872 	bl	800438c <HAL_DSI_ConfigVideoMode>
  
  
/************************LTDC Initialization***********************************/  

  /* Timing Configuration */    
  hltdc_discovery.Init.HorizontalSync = (HSA - 1);
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	4a35      	ldr	r2, [pc, #212]	; (8001384 <BSP_LCD_InitEx+0x278>)
 80012ae:	6153      	str	r3, [r2, #20]
  hltdc_discovery.Init.AccumulatedHBP = (HSA + HBP - 1);
 80012b0:	69fa      	ldr	r2, [r7, #28]
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	4413      	add	r3, r2
 80012b6:	3b01      	subs	r3, #1
 80012b8:	4a32      	ldr	r2, [pc, #200]	; (8001384 <BSP_LCD_InitEx+0x278>)
 80012ba:	61d3      	str	r3, [r2, #28]
  hltdc_discovery.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 80012bc:	4b2e      	ldr	r3, [pc, #184]	; (8001378 <BSP_LCD_InitEx+0x26c>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	441a      	add	r2, r3
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	4413      	add	r3, r2
 80012c8:	3b01      	subs	r3, #1
 80012ca:	4a2e      	ldr	r2, [pc, #184]	; (8001384 <BSP_LCD_InitEx+0x278>)
 80012cc:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc_discovery.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 80012ce:	4b2a      	ldr	r3, [pc, #168]	; (8001378 <BSP_LCD_InitEx+0x26c>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	441a      	add	r2, r3
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	441a      	add	r2, r3
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	4413      	add	r3, r2
 80012de:	3b01      	subs	r3, #1
 80012e0:	4a28      	ldr	r2, [pc, #160]	; (8001384 <BSP_LCD_InitEx+0x278>)
 80012e2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Initialize the LCD pixel width and pixel height */
  hltdc_discovery.LayerCfg->ImageWidth  = lcd_x_size;
 80012e4:	4b24      	ldr	r3, [pc, #144]	; (8001378 <BSP_LCD_InitEx+0x26c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a26      	ldr	r2, [pc, #152]	; (8001384 <BSP_LCD_InitEx+0x278>)
 80012ea:	6613      	str	r3, [r2, #96]	; 0x60
  hltdc_discovery.LayerCfg->ImageHeight = lcd_y_size;   
 80012ec:	4b23      	ldr	r3, [pc, #140]	; (800137c <BSP_LCD_InitEx+0x270>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a24      	ldr	r2, [pc, #144]	; (8001384 <BSP_LCD_InitEx+0x278>)
 80012f2:	6653      	str	r3, [r2, #100]	; 0x64
    * PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz 
    * PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 384 Mhz 
    * PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 384 MHz / 7 = 54.85 MHz 
    * LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_2 = 54.85 MHz / 2 = 27.429 MHz 
    */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80012f4:	4b24      	ldr	r3, [pc, #144]	; (8001388 <BSP_LCD_InitEx+0x27c>)
 80012f6:	2208      	movs	r2, #8
 80012f8:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80012fa:	4b23      	ldr	r3, [pc, #140]	; (8001388 <BSP_LCD_InitEx+0x27c>)
 80012fc:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001300:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 8001302:	4b21      	ldr	r3, [pc, #132]	; (8001388 <BSP_LCD_InitEx+0x27c>)
 8001304:	2207      	movs	r2, #7
 8001306:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001308:	4b1f      	ldr	r3, [pc, #124]	; (8001388 <BSP_LCD_InitEx+0x27c>)
 800130a:	2200      	movs	r2, #0
 800130c:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800130e:	481e      	ldr	r0, [pc, #120]	; (8001388 <BSP_LCD_InitEx+0x27c>)
 8001310:	f005 fd58 	bl	8006dc4 <HAL_RCCEx_PeriphCLKConfig>

  /* Background value */
  hltdc_discovery.Init.Backcolor.Blue = 0;
 8001314:	4b1b      	ldr	r3, [pc, #108]	; (8001384 <BSP_LCD_InitEx+0x278>)
 8001316:	2200      	movs	r2, #0
 8001318:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc_discovery.Init.Backcolor.Green = 0;
 800131c:	4b19      	ldr	r3, [pc, #100]	; (8001384 <BSP_LCD_InitEx+0x278>)
 800131e:	2200      	movs	r2, #0
 8001320:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc_discovery.Init.Backcolor.Red = 0;
 8001324:	4b17      	ldr	r3, [pc, #92]	; (8001384 <BSP_LCD_InitEx+0x278>)
 8001326:	2200      	movs	r2, #0
 8001328:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  hltdc_discovery.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800132c:	4b15      	ldr	r3, [pc, #84]	; (8001384 <BSP_LCD_InitEx+0x278>)
 800132e:	2200      	movs	r2, #0
 8001330:	611a      	str	r2, [r3, #16]
  hltdc_discovery.Instance = LTDC;
 8001332:	4b14      	ldr	r3, [pc, #80]	; (8001384 <BSP_LCD_InitEx+0x278>)
 8001334:	4a15      	ldr	r2, [pc, #84]	; (800138c <BSP_LCD_InitEx+0x280>)
 8001336:	601a      	str	r2, [r3, #0]

  /* Get LTDC Configuration from DSI Configuration */
  HAL_LTDC_StructInitFromVideoConfig(&(hltdc_discovery), &(hdsivideo_handle));
 8001338:	4911      	ldr	r1, [pc, #68]	; (8001380 <BSP_LCD_InitEx+0x274>)
 800133a:	4812      	ldr	r0, [pc, #72]	; (8001384 <BSP_LCD_InitEx+0x278>)
 800133c:	f005 f896 	bl	800646c <HAL_LTDCEx_StructInitFromVideoConfig>

  /* Initialize the LTDC */  
  HAL_LTDC_Init(&hltdc_discovery);
 8001340:	4810      	ldr	r0, [pc, #64]	; (8001384 <BSP_LCD_InitEx+0x278>)
 8001342:	f004 fdeb 	bl	8005f1c <HAL_LTDC_Init>

  /* Enable the DSI host and wrapper after the LTDC initialization
     To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
  HAL_DSI_Start(&hdsi_discovery);
 8001346:	4809      	ldr	r0, [pc, #36]	; (800136c <BSP_LCD_InitEx+0x260>)
 8001348:	f003 fcb2 	bl	8004cb0 <HAL_DSI_Start>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 800134c:	f000 ff32 	bl	80021b4 <BSP_SDRAM_Init>
#endif /* DATA_IN_ExtSDRAM */

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001350:	480f      	ldr	r0, [pc, #60]	; (8001390 <BSP_LCD_InitEx+0x284>)
 8001352:	f000 f901 	bl	8001558 <BSP_LCD_SetFont>
/***********************OTM8009A Initialization********************************/ 

  /* Initialize the OTM8009A LCD Display IC Driver (KoD LCD IC Driver)
  *  depending on configuration set in 'hdsivideo_handle'.
  */
  OTM8009A_Init(OTM8009A_FORMAT_RGB888, orientation);
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	4619      	mov	r1, r3
 800135a:	2000      	movs	r0, #0
 800135c:	f7ff fa78 	bl	8000850 <OTM8009A_Init>

/***********************End OTM8009A Initialization****************************/ 

  return LCD_OK; 
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3740      	adds	r7, #64	; 0x40
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	200003fc 	.word	0x200003fc
 8001370:	40016c00 	.word	0x40016c00
 8001374:	43215e57 	.word	0x43215e57
 8001378:	20000040 	.word	0x20000040
 800137c:	20000044 	.word	0x20000044
 8001380:	2000012c 	.word	0x2000012c
 8001384:	20000354 	.word	0x20000354
 8001388:	200001b4 	.word	0x200001b4
 800138c:	40016800 	.word	0x40016800
 8001390:	20000038 	.word	0x20000038

08001394 <BSP_LCD_Reset>:
  * @brief  BSP LCD Reset
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and desactivating it later.
  */
void BSP_LCD_Reset(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800139a:	4b18      	ldr	r3, [pc, #96]	; (80013fc <BSP_LCD_Reset+0x68>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	4a17      	ldr	r2, [pc, #92]	; (80013fc <BSP_LCD_Reset+0x68>)
 80013a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013a4:	6313      	str	r3, [r2, #48]	; 0x30
 80013a6:	4b15      	ldr	r3, [pc, #84]	; (80013fc <BSP_LCD_Reset+0x68>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013ae:	603b      	str	r3, [r7, #0]
 80013b0:	683b      	ldr	r3, [r7, #0]

    /* Configure the GPIO on PJ15 */
    gpio_init_structure.Pin   = GPIO_PIN_15;
 80013b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013b6:	607b      	str	r3, [r7, #4]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80013b8:	2301      	movs	r3, #1
 80013ba:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 80013bc:	2301      	movs	r3, #1
 80013be:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80013c0:	2303      	movs	r3, #3
 80013c2:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 80013c4:	1d3b      	adds	r3, r7, #4
 80013c6:	4619      	mov	r1, r3
 80013c8:	480d      	ldr	r0, [pc, #52]	; (8001400 <BSP_LCD_Reset+0x6c>)
 80013ca:	f003 fd95 	bl	8004ef8 <HAL_GPIO_Init>

    /* Activate XRES active low */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_RESET);
 80013ce:	2200      	movs	r2, #0
 80013d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013d4:	480a      	ldr	r0, [pc, #40]	; (8001400 <BSP_LCD_Reset+0x6c>)
 80013d6:	f004 f843 	bl	8005460 <HAL_GPIO_WritePin>

    HAL_Delay(20); /* wait 20 ms */
 80013da:	2014      	movs	r0, #20
 80013dc:	f001 fadc 	bl	8002998 <HAL_Delay>

    /* Desactivate XRES */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_SET);
 80013e0:	2201      	movs	r2, #1
 80013e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013e6:	4806      	ldr	r0, [pc, #24]	; (8001400 <BSP_LCD_Reset+0x6c>)
 80013e8:	f004 f83a 	bl	8005460 <HAL_GPIO_WritePin>
    
    /* Wait for 10ms after releasing XRES before sending commands */
    HAL_Delay(10);
 80013ec:	200a      	movs	r0, #10
 80013ee:	f001 fad3 	bl	8002998 <HAL_Delay>
}
 80013f2:	bf00      	nop
 80013f4:	3718      	adds	r7, #24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40023800 	.word	0x40023800
 8001400:	40022400 	.word	0x40022400

08001404 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  return (lcd_x_size);
 8001408:	4b03      	ldr	r3, [pc, #12]	; (8001418 <BSP_LCD_GetXSize+0x14>)
 800140a:	681b      	ldr	r3, [r3, #0]
}
 800140c:	4618      	mov	r0, r3
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	20000040 	.word	0x20000040

0800141c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return (lcd_y_size);
 8001420:	4b03      	ldr	r3, [pc, #12]	; (8001430 <BSP_LCD_GetYSize+0x14>)
 8001422:	681b      	ldr	r3, [r3, #0]
}
 8001424:	4618      	mov	r0, r3
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	20000044 	.word	0x20000044

08001434 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b090      	sub	sp, #64	; 0x40
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	6039      	str	r1, [r7, #0]
 800143e:	80fb      	strh	r3, [r7, #6]
    LCD_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 8001440:	2300      	movs	r3, #0
 8001442:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8001444:	f7ff ffde 	bl	8001404 <BSP_LCD_GetXSize>
 8001448:	4603      	mov	r3, r0
 800144a:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8001450:	f7ff ffe4 	bl	800141c <BSP_LCD_GetYSize>
 8001454:	4603      	mov	r3, r0
 8001456:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001458:	2300      	movs	r3, #0
 800145a:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8001460:	23ff      	movs	r3, #255	; 0xff
 8001462:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8001464:	2300      	movs	r3, #0
 8001466:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8001468:	2300      	movs	r3, #0
 800146a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8001474:	2300      	movs	r3, #0
 8001476:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800147a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800147e:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001480:	2307      	movs	r3, #7
 8001482:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8001484:	f7ff ffbe 	bl	8001404 <BSP_LCD_GetXSize>
 8001488:	4603      	mov	r3, r0
 800148a:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 800148c:	f7ff ffc6 	bl	800141c <BSP_LCD_GetYSize>
 8001490:	4603      	mov	r3, r0
 8001492:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hltdc_discovery, &Layercfg, LayerIndex); 
 8001494:	88fa      	ldrh	r2, [r7, #6]
 8001496:	f107 030c 	add.w	r3, r7, #12
 800149a:	4619      	mov	r1, r3
 800149c:	4812      	ldr	r0, [pc, #72]	; (80014e8 <BSP_LCD_LayerDefaultInit+0xb4>)
 800149e:	f004 fe0d 	bl	80060bc <HAL_LTDC_ConfigLayer>
  
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80014a2:	88fa      	ldrh	r2, [r7, #6]
 80014a4:	4911      	ldr	r1, [pc, #68]	; (80014ec <BSP_LCD_LayerDefaultInit+0xb8>)
 80014a6:	4613      	mov	r3, r2
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	4413      	add	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	440b      	add	r3, r1
 80014b0:	3304      	adds	r3, #4
 80014b2:	f04f 32ff 	mov.w	r2, #4294967295
 80014b6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80014b8:	88fa      	ldrh	r2, [r7, #6]
 80014ba:	490c      	ldr	r1, [pc, #48]	; (80014ec <BSP_LCD_LayerDefaultInit+0xb8>)
 80014bc:	4613      	mov	r3, r2
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	4413      	add	r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	440b      	add	r3, r1
 80014c6:	3308      	adds	r3, #8
 80014c8:	4a09      	ldr	r2, [pc, #36]	; (80014f0 <BSP_LCD_LayerDefaultInit+0xbc>)
 80014ca:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 80014cc:	88fa      	ldrh	r2, [r7, #6]
 80014ce:	4907      	ldr	r1, [pc, #28]	; (80014ec <BSP_LCD_LayerDefaultInit+0xb8>)
 80014d0:	4613      	mov	r3, r2
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	4413      	add	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	440b      	add	r3, r1
 80014da:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80014de:	601a      	str	r2, [r3, #0]
}
 80014e0:	bf00      	nop
 80014e2:	3740      	adds	r7, #64	; 0x40
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20000354 	.word	0x20000354
 80014ec:	2000019c 	.word	0x2000019c
 80014f0:	20000038 	.word	0x20000038

080014f4 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80014fc:	4b07      	ldr	r3, [pc, #28]	; (800151c <BSP_LCD_SetTextColor+0x28>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	4907      	ldr	r1, [pc, #28]	; (8001520 <BSP_LCD_SetTextColor+0x2c>)
 8001502:	4613      	mov	r3, r2
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	4413      	add	r3, r2
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	440b      	add	r3, r1
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	601a      	str	r2, [r3, #0]
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	20000198 	.word	0x20000198
 8001520:	2000019c 	.word	0x2000019c

08001524 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 800152c:	4b08      	ldr	r3, [pc, #32]	; (8001550 <BSP_LCD_SetBackColor+0x2c>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4908      	ldr	r1, [pc, #32]	; (8001554 <BSP_LCD_SetBackColor+0x30>)
 8001532:	4613      	mov	r3, r2
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	4413      	add	r3, r2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	440b      	add	r3, r1
 800153c:	3304      	adds	r3, #4
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	601a      	str	r2, [r3, #0]
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	20000198 	.word	0x20000198
 8001554:	2000019c 	.word	0x2000019c

08001558 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8001560:	4b08      	ldr	r3, [pc, #32]	; (8001584 <BSP_LCD_SetFont+0x2c>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4908      	ldr	r1, [pc, #32]	; (8001588 <BSP_LCD_SetFont+0x30>)
 8001566:	4613      	mov	r3, r2
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	4413      	add	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	440b      	add	r3, r1
 8001570:	3308      	adds	r3, #8
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	601a      	str	r2, [r3, #0]
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	20000198 	.word	0x20000198
 8001588:	2000019c 	.word	0x2000019c

0800158c <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8001590:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <BSP_LCD_GetFont+0x24>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	4907      	ldr	r1, [pc, #28]	; (80015b4 <BSP_LCD_GetFont+0x28>)
 8001596:	4613      	mov	r3, r2
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	4413      	add	r3, r2
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	440b      	add	r3, r1
 80015a0:	3308      	adds	r3, #8
 80015a2:	681b      	ldr	r3, [r3, #0]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	20000198 	.word	0x20000198
 80015b4:	2000019c 	.word	0x2000019c

080015b8 <BSP_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 80015b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af02      	add	r7, sp, #8
 80015be:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80015c0:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <BSP_LCD_Clear+0x48>)
 80015c2:	681c      	ldr	r4, [r3, #0]
 80015c4:	4b0e      	ldr	r3, [pc, #56]	; (8001600 <BSP_LCD_Clear+0x48>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a0e      	ldr	r2, [pc, #56]	; (8001604 <BSP_LCD_Clear+0x4c>)
 80015ca:	2134      	movs	r1, #52	; 0x34
 80015cc:	fb01 f303 	mul.w	r3, r1, r3
 80015d0:	4413      	add	r3, r2
 80015d2:	335c      	adds	r3, #92	; 0x5c
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	461d      	mov	r5, r3
 80015d8:	f7ff ff14 	bl	8001404 <BSP_LCD_GetXSize>
 80015dc:	4606      	mov	r6, r0
 80015de:	f7ff ff1d 	bl	800141c <BSP_LCD_GetYSize>
 80015e2:	4602      	mov	r2, r0
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	9301      	str	r3, [sp, #4]
 80015e8:	2300      	movs	r3, #0
 80015ea:	9300      	str	r3, [sp, #0]
 80015ec:	4613      	mov	r3, r2
 80015ee:	4632      	mov	r2, r6
 80015f0:	4629      	mov	r1, r5
 80015f2:	4620      	mov	r0, r4
 80015f4:	f000 fd62 	bl	80020bc <LL_FillBuffer>
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001600:	20000198 	.word	0x20000198
 8001604:	20000354 	.word	0x20000354

08001608 <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001608:	b590      	push	{r4, r7, lr}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	80fb      	strh	r3, [r7, #6]
 8001612:	460b      	mov	r3, r1
 8001614:	80bb      	strh	r3, [r7, #4]
 8001616:	4613      	mov	r3, r2
 8001618:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800161a:	4b1b      	ldr	r3, [pc, #108]	; (8001688 <BSP_LCD_DisplayChar+0x80>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	491b      	ldr	r1, [pc, #108]	; (800168c <BSP_LCD_DisplayChar+0x84>)
 8001620:	4613      	mov	r3, r2
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	4413      	add	r3, r2
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	440b      	add	r3, r1
 800162a:	3308      	adds	r3, #8
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6819      	ldr	r1, [r3, #0]
 8001630:	78fb      	ldrb	r3, [r7, #3]
 8001632:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001636:	4b14      	ldr	r3, [pc, #80]	; (8001688 <BSP_LCD_DisplayChar+0x80>)
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	4c14      	ldr	r4, [pc, #80]	; (800168c <BSP_LCD_DisplayChar+0x84>)
 800163c:	4613      	mov	r3, r2
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	4413      	add	r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	4423      	add	r3, r4
 8001646:	3308      	adds	r3, #8
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800164c:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001650:	4b0d      	ldr	r3, [pc, #52]	; (8001688 <BSP_LCD_DisplayChar+0x80>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4c0d      	ldr	r4, [pc, #52]	; (800168c <BSP_LCD_DisplayChar+0x84>)
 8001656:	4613      	mov	r3, r2
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	4413      	add	r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4423      	add	r3, r4
 8001660:	3308      	adds	r3, #8
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	889b      	ldrh	r3, [r3, #4]
 8001666:	3307      	adds	r3, #7
 8001668:	2b00      	cmp	r3, #0
 800166a:	da00      	bge.n	800166e <BSP_LCD_DisplayChar+0x66>
 800166c:	3307      	adds	r3, #7
 800166e:	10db      	asrs	r3, r3, #3
 8001670:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001674:	18ca      	adds	r2, r1, r3
 8001676:	88b9      	ldrh	r1, [r7, #4]
 8001678:	88fb      	ldrh	r3, [r7, #6]
 800167a:	4618      	mov	r0, r3
 800167c:	f000 fc66 	bl	8001f4c <DrawChar>
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	bd90      	pop	{r4, r7, pc}
 8001688:	20000198 	.word	0x20000198
 800168c:	2000019c 	.word	0x2000019c

08001690 <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8001690:	b5b0      	push	{r4, r5, r7, lr}
 8001692:	b088      	sub	sp, #32
 8001694:	af00      	add	r7, sp, #0
 8001696:	60ba      	str	r2, [r7, #8]
 8001698:	461a      	mov	r2, r3
 800169a:	4603      	mov	r3, r0
 800169c:	81fb      	strh	r3, [r7, #14]
 800169e:	460b      	mov	r3, r1
 80016a0:	81bb      	strh	r3, [r7, #12]
 80016a2:	4613      	mov	r3, r2
 80016a4:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80016a6:	2301      	movs	r3, #1
 80016a8:	83fb      	strh	r3, [r7, #30]
 80016aa:	2300      	movs	r3, #0
 80016ac:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61bb      	str	r3, [r7, #24]
 80016b2:	2300      	movs	r3, #0
 80016b4:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) size ++ ;
 80016ba:	e002      	b.n	80016c2 <BSP_LCD_DisplayStringAt+0x32>
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	3301      	adds	r3, #1
 80016c0:	61bb      	str	r3, [r7, #24]
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	1c5a      	adds	r2, r3, #1
 80016c6:	617a      	str	r2, [r7, #20]
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1f6      	bne.n	80016bc <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80016ce:	f7ff fe99 	bl	8001404 <BSP_LCD_GetXSize>
 80016d2:	4b4f      	ldr	r3, [pc, #316]	; (8001810 <BSP_LCD_DisplayStringAt+0x180>)
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	494f      	ldr	r1, [pc, #316]	; (8001814 <BSP_LCD_DisplayStringAt+0x184>)
 80016d8:	4613      	mov	r3, r2
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	4413      	add	r3, r2
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	440b      	add	r3, r1
 80016e2:	3308      	adds	r3, #8
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	889b      	ldrh	r3, [r3, #4]
 80016e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80016ec:	613b      	str	r3, [r7, #16]

  switch (Mode)
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d01c      	beq.n	800172e <BSP_LCD_DisplayStringAt+0x9e>
 80016f4:	2b03      	cmp	r3, #3
 80016f6:	d017      	beq.n	8001728 <BSP_LCD_DisplayStringAt+0x98>
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d12e      	bne.n	800175a <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	1ad1      	subs	r1, r2, r3
 8001702:	4b43      	ldr	r3, [pc, #268]	; (8001810 <BSP_LCD_DisplayStringAt+0x180>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	4843      	ldr	r0, [pc, #268]	; (8001814 <BSP_LCD_DisplayStringAt+0x184>)
 8001708:	4613      	mov	r3, r2
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	4413      	add	r3, r2
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	4403      	add	r3, r0
 8001712:	3308      	adds	r3, #8
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	889b      	ldrh	r3, [r3, #4]
 8001718:	fb03 f301 	mul.w	r3, r3, r1
 800171c:	085b      	lsrs	r3, r3, #1
 800171e:	b29a      	uxth	r2, r3
 8001720:	89fb      	ldrh	r3, [r7, #14]
 8001722:	4413      	add	r3, r2
 8001724:	83fb      	strh	r3, [r7, #30]
      break;
 8001726:	e01b      	b.n	8001760 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8001728:	89fb      	ldrh	r3, [r7, #14]
 800172a:	83fb      	strh	r3, [r7, #30]
      break;
 800172c:	e018      	b.n	8001760 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	b299      	uxth	r1, r3
 8001736:	4b36      	ldr	r3, [pc, #216]	; (8001810 <BSP_LCD_DisplayStringAt+0x180>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	4836      	ldr	r0, [pc, #216]	; (8001814 <BSP_LCD_DisplayStringAt+0x184>)
 800173c:	4613      	mov	r3, r2
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	4413      	add	r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	4403      	add	r3, r0
 8001746:	3308      	adds	r3, #8
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	889b      	ldrh	r3, [r3, #4]
 800174c:	fb11 f303 	smulbb	r3, r1, r3
 8001750:	b29a      	uxth	r2, r3
 8001752:	89fb      	ldrh	r3, [r7, #14]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	83fb      	strh	r3, [r7, #30]
      break;
 8001758:	e002      	b.n	8001760 <BSP_LCD_DisplayStringAt+0xd0>
    }
  default:
    {
      refcolumn = Xpos;
 800175a:	89fb      	ldrh	r3, [r7, #14]
 800175c:	83fb      	strh	r3, [r7, #30]
      break;
 800175e:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8001760:	8bfb      	ldrh	r3, [r7, #30]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d003      	beq.n	800176e <BSP_LCD_DisplayStringAt+0xde>
 8001766:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800176a:	2b00      	cmp	r3, #0
 800176c:	da1d      	bge.n	80017aa <BSP_LCD_DisplayStringAt+0x11a>
  {
    refcolumn = 1;
 800176e:	2301      	movs	r3, #1
 8001770:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001772:	e01a      	b.n	80017aa <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	781a      	ldrb	r2, [r3, #0]
 8001778:	89b9      	ldrh	r1, [r7, #12]
 800177a:	8bfb      	ldrh	r3, [r7, #30]
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff ff43 	bl	8001608 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8001782:	4b23      	ldr	r3, [pc, #140]	; (8001810 <BSP_LCD_DisplayStringAt+0x180>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	4923      	ldr	r1, [pc, #140]	; (8001814 <BSP_LCD_DisplayStringAt+0x184>)
 8001788:	4613      	mov	r3, r2
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	4413      	add	r3, r2
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	440b      	add	r3, r1
 8001792:	3308      	adds	r3, #8
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	889a      	ldrh	r2, [r3, #4]
 8001798:	8bfb      	ldrh	r3, [r7, #30]
 800179a:	4413      	add	r3, r2
 800179c:	83fb      	strh	r3, [r7, #30]

    /* Point on the next character */
    Text++;
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	3301      	adds	r3, #1
 80017a2:	60bb      	str	r3, [r7, #8]
    i++;
 80017a4:	8bbb      	ldrh	r3, [r7, #28]
 80017a6:	3301      	adds	r3, #1
 80017a8:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	bf14      	ite	ne
 80017b2:	2301      	movne	r3, #1
 80017b4:	2300      	moveq	r3, #0
 80017b6:	b2dc      	uxtb	r4, r3
 80017b8:	f7ff fe24 	bl	8001404 <BSP_LCD_GetXSize>
 80017bc:	4605      	mov	r5, r0
 80017be:	8bb9      	ldrh	r1, [r7, #28]
 80017c0:	4b13      	ldr	r3, [pc, #76]	; (8001810 <BSP_LCD_DisplayStringAt+0x180>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	4813      	ldr	r0, [pc, #76]	; (8001814 <BSP_LCD_DisplayStringAt+0x184>)
 80017c6:	4613      	mov	r3, r2
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	4413      	add	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	4403      	add	r3, r0
 80017d0:	3308      	adds	r3, #8
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	889b      	ldrh	r3, [r3, #4]
 80017d6:	fb03 f301 	mul.w	r3, r3, r1
 80017da:	1aeb      	subs	r3, r5, r3
 80017dc:	b299      	uxth	r1, r3
 80017de:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <BSP_LCD_DisplayStringAt+0x180>)
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	480c      	ldr	r0, [pc, #48]	; (8001814 <BSP_LCD_DisplayStringAt+0x184>)
 80017e4:	4613      	mov	r3, r2
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	4413      	add	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4403      	add	r3, r0
 80017ee:	3308      	adds	r3, #8
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	889b      	ldrh	r3, [r3, #4]
 80017f4:	4299      	cmp	r1, r3
 80017f6:	bf2c      	ite	cs
 80017f8:	2301      	movcs	r3, #1
 80017fa:	2300      	movcc	r3, #0
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	4023      	ands	r3, r4
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1b6      	bne.n	8001774 <BSP_LCD_DisplayStringAt+0xe4>
  }

}
 8001806:	bf00      	nop
 8001808:	3720      	adds	r7, #32
 800180a:	46bd      	mov	sp, r7
 800180c:	bdb0      	pop	{r4, r5, r7, pc}
 800180e:	bf00      	nop
 8001810:	20000198 	.word	0x20000198
 8001814:	2000019c 	.word	0x2000019c

08001818 <BSP_LCD_DrawHLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001818:	b5b0      	push	{r4, r5, r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af02      	add	r7, sp, #8
 800181e:	4603      	mov	r3, r0
 8001820:	80fb      	strh	r3, [r7, #6]
 8001822:	460b      	mov	r3, r1
 8001824:	80bb      	strh	r3, [r7, #4]
 8001826:	4613      	mov	r3, r2
 8001828:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 800182a:	2300      	movs	r3, #0
 800182c:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800182e:	4b16      	ldr	r3, [pc, #88]	; (8001888 <BSP_LCD_DrawHLine+0x70>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a16      	ldr	r2, [pc, #88]	; (800188c <BSP_LCD_DrawHLine+0x74>)
 8001834:	2134      	movs	r1, #52	; 0x34
 8001836:	fb01 f303 	mul.w	r3, r1, r3
 800183a:	4413      	add	r3, r2
 800183c:	335c      	adds	r3, #92	; 0x5c
 800183e:	681c      	ldr	r4, [r3, #0]
 8001840:	f7ff fde0 	bl	8001404 <BSP_LCD_GetXSize>
 8001844:	4602      	mov	r2, r0
 8001846:	88bb      	ldrh	r3, [r7, #4]
 8001848:	fb03 f202 	mul.w	r2, r3, r2
 800184c:	88fb      	ldrh	r3, [r7, #6]
 800184e:	4413      	add	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	4423      	add	r3, r4
 8001854:	60fb      	str	r3, [r7, #12]

  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8001856:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <BSP_LCD_DrawHLine+0x70>)
 8001858:	6818      	ldr	r0, [r3, #0]
 800185a:	68fc      	ldr	r4, [r7, #12]
 800185c:	887d      	ldrh	r5, [r7, #2]
 800185e:	4b0a      	ldr	r3, [pc, #40]	; (8001888 <BSP_LCD_DrawHLine+0x70>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	490b      	ldr	r1, [pc, #44]	; (8001890 <BSP_LCD_DrawHLine+0x78>)
 8001864:	4613      	mov	r3, r2
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	4413      	add	r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	440b      	add	r3, r1
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	9301      	str	r3, [sp, #4]
 8001872:	2300      	movs	r3, #0
 8001874:	9300      	str	r3, [sp, #0]
 8001876:	2301      	movs	r3, #1
 8001878:	462a      	mov	r2, r5
 800187a:	4621      	mov	r1, r4
 800187c:	f000 fc1e 	bl	80020bc <LL_FillBuffer>
}
 8001880:	bf00      	nop
 8001882:	3710      	adds	r7, #16
 8001884:	46bd      	mov	sp, r7
 8001886:	bdb0      	pop	{r4, r5, r7, pc}
 8001888:	20000198 	.word	0x20000198
 800188c:	20000354 	.word	0x20000354
 8001890:	2000019c 	.word	0x2000019c

08001894 <BSP_LCD_DrawCircle>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8001894:	b590      	push	{r4, r7, lr}
 8001896:	b087      	sub	sp, #28
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	80fb      	strh	r3, [r7, #6]
 800189e:	460b      	mov	r3, r1
 80018a0:	80bb      	strh	r3, [r7, #4]
 80018a2:	4613      	mov	r3, r2
 80018a4:	807b      	strh	r3, [r7, #2]
  int32_t   D;    /* Decision Variable */
  uint32_t  CurX; /* Current X Value */
  uint32_t  CurY; /* Current Y Value */

  D = 3 - (Radius << 1);
 80018a6:	887b      	ldrh	r3, [r7, #2]
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	f1c3 0303 	rsb	r3, r3, #3
 80018ae:	617b      	str	r3, [r7, #20]
  CurX = 0;
 80018b0:	2300      	movs	r3, #0
 80018b2:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 80018b4:	887b      	ldrh	r3, [r7, #2]
 80018b6:	60fb      	str	r3, [r7, #12]

  while (CurX <= CurY)
 80018b8:	e0cf      	b.n	8001a5a <BSP_LCD_DrawCircle+0x1c6>
  {
    BSP_LCD_DrawPixel((Xpos + CurX), (Ypos - CurY), DrawProp[ActiveLayer].TextColor);
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	b29a      	uxth	r2, r3
 80018be:	88fb      	ldrh	r3, [r7, #6]
 80018c0:	4413      	add	r3, r2
 80018c2:	b298      	uxth	r0, r3
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	88ba      	ldrh	r2, [r7, #4]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	b29c      	uxth	r4, r3
 80018ce:	4b67      	ldr	r3, [pc, #412]	; (8001a6c <BSP_LCD_DrawCircle+0x1d8>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	4967      	ldr	r1, [pc, #412]	; (8001a70 <BSP_LCD_DrawCircle+0x1dc>)
 80018d4:	4613      	mov	r3, r2
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	4413      	add	r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	440b      	add	r3, r1
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	461a      	mov	r2, r3
 80018e2:	4621      	mov	r1, r4
 80018e4:	f000 fb0c 	bl	8001f00 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurX), (Ypos - CurY), DrawProp[ActiveLayer].TextColor);
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	88fa      	ldrh	r2, [r7, #6]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	b298      	uxth	r0, r3
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	88ba      	ldrh	r2, [r7, #4]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	b29c      	uxth	r4, r3
 80018fc:	4b5b      	ldr	r3, [pc, #364]	; (8001a6c <BSP_LCD_DrawCircle+0x1d8>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	495b      	ldr	r1, [pc, #364]	; (8001a70 <BSP_LCD_DrawCircle+0x1dc>)
 8001902:	4613      	mov	r3, r2
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	4413      	add	r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	440b      	add	r3, r1
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	461a      	mov	r2, r3
 8001910:	4621      	mov	r1, r4
 8001912:	f000 faf5 	bl	8001f00 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + CurY), (Ypos - CurX), DrawProp[ActiveLayer].TextColor);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	b29a      	uxth	r2, r3
 800191a:	88fb      	ldrh	r3, [r7, #6]
 800191c:	4413      	add	r3, r2
 800191e:	b298      	uxth	r0, r3
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	b29b      	uxth	r3, r3
 8001924:	88ba      	ldrh	r2, [r7, #4]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	b29c      	uxth	r4, r3
 800192a:	4b50      	ldr	r3, [pc, #320]	; (8001a6c <BSP_LCD_DrawCircle+0x1d8>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	4950      	ldr	r1, [pc, #320]	; (8001a70 <BSP_LCD_DrawCircle+0x1dc>)
 8001930:	4613      	mov	r3, r2
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	4413      	add	r3, r2
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	440b      	add	r3, r1
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	461a      	mov	r2, r3
 800193e:	4621      	mov	r1, r4
 8001940:	f000 fade 	bl	8001f00 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurY), (Ypos - CurX), DrawProp[ActiveLayer].TextColor);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	b29b      	uxth	r3, r3
 8001948:	88fa      	ldrh	r2, [r7, #6]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	b298      	uxth	r0, r3
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	b29b      	uxth	r3, r3
 8001952:	88ba      	ldrh	r2, [r7, #4]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	b29c      	uxth	r4, r3
 8001958:	4b44      	ldr	r3, [pc, #272]	; (8001a6c <BSP_LCD_DrawCircle+0x1d8>)
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	4944      	ldr	r1, [pc, #272]	; (8001a70 <BSP_LCD_DrawCircle+0x1dc>)
 800195e:	4613      	mov	r3, r2
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	4413      	add	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	440b      	add	r3, r1
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	461a      	mov	r2, r3
 800196c:	4621      	mov	r1, r4
 800196e:	f000 fac7 	bl	8001f00 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + CurX), (Ypos + CurY), DrawProp[ActiveLayer].TextColor);
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	b29a      	uxth	r2, r3
 8001976:	88fb      	ldrh	r3, [r7, #6]
 8001978:	4413      	add	r3, r2
 800197a:	b298      	uxth	r0, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	b29a      	uxth	r2, r3
 8001980:	88bb      	ldrh	r3, [r7, #4]
 8001982:	4413      	add	r3, r2
 8001984:	b29c      	uxth	r4, r3
 8001986:	4b39      	ldr	r3, [pc, #228]	; (8001a6c <BSP_LCD_DrawCircle+0x1d8>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	4939      	ldr	r1, [pc, #228]	; (8001a70 <BSP_LCD_DrawCircle+0x1dc>)
 800198c:	4613      	mov	r3, r2
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	4413      	add	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	440b      	add	r3, r1
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	461a      	mov	r2, r3
 800199a:	4621      	mov	r1, r4
 800199c:	f000 fab0 	bl	8001f00 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurX), (Ypos + CurY), DrawProp[ActiveLayer].TextColor);
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	88fa      	ldrh	r2, [r7, #6]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	b298      	uxth	r0, r3
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	b29a      	uxth	r2, r3
 80019ae:	88bb      	ldrh	r3, [r7, #4]
 80019b0:	4413      	add	r3, r2
 80019b2:	b29c      	uxth	r4, r3
 80019b4:	4b2d      	ldr	r3, [pc, #180]	; (8001a6c <BSP_LCD_DrawCircle+0x1d8>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	492d      	ldr	r1, [pc, #180]	; (8001a70 <BSP_LCD_DrawCircle+0x1dc>)
 80019ba:	4613      	mov	r3, r2
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	4413      	add	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	440b      	add	r3, r1
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	461a      	mov	r2, r3
 80019c8:	4621      	mov	r1, r4
 80019ca:	f000 fa99 	bl	8001f00 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + CurY), (Ypos + CurX), DrawProp[ActiveLayer].TextColor);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	b29a      	uxth	r2, r3
 80019d2:	88fb      	ldrh	r3, [r7, #6]
 80019d4:	4413      	add	r3, r2
 80019d6:	b298      	uxth	r0, r3
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	b29a      	uxth	r2, r3
 80019dc:	88bb      	ldrh	r3, [r7, #4]
 80019de:	4413      	add	r3, r2
 80019e0:	b29c      	uxth	r4, r3
 80019e2:	4b22      	ldr	r3, [pc, #136]	; (8001a6c <BSP_LCD_DrawCircle+0x1d8>)
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	4922      	ldr	r1, [pc, #136]	; (8001a70 <BSP_LCD_DrawCircle+0x1dc>)
 80019e8:	4613      	mov	r3, r2
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	4413      	add	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	440b      	add	r3, r1
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	461a      	mov	r2, r3
 80019f6:	4621      	mov	r1, r4
 80019f8:	f000 fa82 	bl	8001f00 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurY), (Ypos + CurX), DrawProp[ActiveLayer].TextColor);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	88fa      	ldrh	r2, [r7, #6]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	b298      	uxth	r0, r3
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	88bb      	ldrh	r3, [r7, #4]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	b29c      	uxth	r4, r3
 8001a10:	4b16      	ldr	r3, [pc, #88]	; (8001a6c <BSP_LCD_DrawCircle+0x1d8>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	4916      	ldr	r1, [pc, #88]	; (8001a70 <BSP_LCD_DrawCircle+0x1dc>)
 8001a16:	4613      	mov	r3, r2
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	4413      	add	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	440b      	add	r3, r1
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	461a      	mov	r2, r3
 8001a24:	4621      	mov	r1, r4
 8001a26:	f000 fa6b 	bl	8001f00 <BSP_LCD_DrawPixel>

    if (D < 0)
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	da06      	bge.n	8001a3e <BSP_LCD_DrawCircle+0x1aa>
    {
      D += (CurX << 2) + 6;
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	009a      	lsls	r2, r3, #2
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	4413      	add	r3, r2
 8001a38:	3306      	adds	r3, #6
 8001a3a:	617b      	str	r3, [r7, #20]
 8001a3c:	e00a      	b.n	8001a54 <BSP_LCD_DrawCircle+0x1c0>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	009a      	lsls	r2, r3, #2
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	4413      	add	r3, r2
 8001a4a:	330a      	adds	r3, #10
 8001a4c:	617b      	str	r3, [r7, #20]
      CurY--;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	3b01      	subs	r3, #1
 8001a52:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	3301      	adds	r3, #1
 8001a58:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	f67f af2b 	bls.w	80018ba <BSP_LCD_DrawCircle+0x26>
  }
}
 8001a64:	bf00      	nop
 8001a66:	371c      	adds	r7, #28
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd90      	pop	{r4, r7, pc}
 8001a6c:	20000198 	.word	0x20000198
 8001a70:	2000019c 	.word	0x2000019c

08001a74 <BSP_LCD_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 8001a74:	b590      	push	{r4, r7, lr}
 8001a76:	b08b      	sub	sp, #44	; 0x2c
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	627b      	str	r3, [r7, #36]	; 0x24
 8001a84:	2300      	movs	r3, #0
 8001a86:	61bb      	str	r3, [r7, #24]
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	613b      	str	r3, [r7, #16]
  uint32_t Address;
  uint32_t InputColorMode = 0;
 8001a90:	2300      	movs	r3, #0
 8001a92:	61fb      	str	r3, [r7, #28]

  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	330a      	adds	r3, #10
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	330b      	adds	r3, #11
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	021b      	lsls	r3, r3, #8
 8001aa4:	441a      	add	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	330c      	adds	r3, #12
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	041b      	lsls	r3, r3, #16
 8001aae:	441a      	add	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	330d      	adds	r3, #13
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	061b      	lsls	r3, r3, #24
 8001ab8:	4413      	add	r3, r2
 8001aba:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3312      	adds	r3, #18
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	3313      	adds	r3, #19
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	021b      	lsls	r3, r3, #8
 8001acc:	441a      	add	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	3314      	adds	r3, #20
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	041b      	lsls	r3, r3, #16
 8001ad6:	441a      	add	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3315      	adds	r3, #21
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	061b      	lsls	r3, r3, #24
 8001ae0:	4413      	add	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3316      	adds	r3, #22
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	461a      	mov	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3317      	adds	r3, #23
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	021b      	lsls	r3, r3, #8
 8001af4:	441a      	add	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	3318      	adds	r3, #24
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	041b      	lsls	r3, r3, #16
 8001afe:	441a      	add	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3319      	adds	r3, #25
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	061b      	lsls	r3, r3, #24
 8001b08:	4413      	add	r3, r2
 8001b0a:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	331c      	adds	r3, #28
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	461a      	mov	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	331d      	adds	r3, #29
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	021b      	lsls	r3, r3, #8
 8001b1c:	4413      	add	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8001b20:	4b2a      	ldr	r3, [pc, #168]	; (8001bcc <BSP_LCD_DrawBitmap+0x158>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a2a      	ldr	r2, [pc, #168]	; (8001bd0 <BSP_LCD_DrawBitmap+0x15c>)
 8001b26:	2134      	movs	r1, #52	; 0x34
 8001b28:	fb01 f303 	mul.w	r3, r1, r3
 8001b2c:	4413      	add	r3, r2
 8001b2e:	335c      	adds	r3, #92	; 0x5c
 8001b30:	681c      	ldr	r4, [r3, #0]
 8001b32:	f7ff fc67 	bl	8001404 <BSP_LCD_GetXSize>
 8001b36:	4602      	mov	r2, r0
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	fb03 f202 	mul.w	r2, r3, r2
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	4413      	add	r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4423      	add	r3, r4
 8001b46:	623b      	str	r3, [r7, #32]

  /* Get the layer pixel format */
  if ((bit_pixel/8) == 4)
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	3b20      	subs	r3, #32
 8001b4c:	2b07      	cmp	r3, #7
 8001b4e:	d802      	bhi.n	8001b56 <BSP_LCD_DrawBitmap+0xe2>
  {
    InputColorMode = DMA2D_INPUT_ARGB8888;
 8001b50:	2300      	movs	r3, #0
 8001b52:	61fb      	str	r3, [r7, #28]
 8001b54:	e008      	b.n	8001b68 <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	3b10      	subs	r3, #16
 8001b5a:	2b07      	cmp	r3, #7
 8001b5c:	d802      	bhi.n	8001b64 <BSP_LCD_DrawBitmap+0xf0>
  {
    InputColorMode = DMA2D_INPUT_RGB565;
 8001b5e:	2302      	movs	r3, #2
 8001b60:	61fb      	str	r3, [r7, #28]
 8001b62:	e001      	b.n	8001b68 <BSP_LCD_DrawBitmap+0xf4>
  }
  else
  {
    InputColorMode = DMA2D_INPUT_RGB888;
 8001b64:	2301      	movs	r3, #1
 8001b66:	61fb      	str	r3, [r7, #28]
  }

  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	fb02 f303 	mul.w	r3, r2, r3
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	08d2      	lsrs	r2, r2, #3
 8001b76:	fb02 f203 	mul.w	r2, r2, r3
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7c:	4413      	add	r3, r2
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	4413      	add	r3, r2
 8001b82:	607b      	str	r3, [r7, #4]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8001b84:	2300      	movs	r3, #0
 8001b86:	627b      	str	r3, [r7, #36]	; 0x24
 8001b88:	e018      	b.n	8001bbc <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)Address, width, InputColorMode);
 8001b8a:	6a39      	ldr	r1, [r7, #32]
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f000 facb 	bl	800212c <LL_ConvertLineToARGB8888>

    /* Increment the source and destination buffers */
    Address+=  (BSP_LCD_GetXSize()*4);
 8001b96:	f7ff fc35 	bl	8001404 <BSP_LCD_GetXSize>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	6a3a      	ldr	r2, [r7, #32]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	08db      	lsrs	r3, r3, #3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	fb02 f303 	mul.w	r3, r2, r3
 8001bae:	425b      	negs	r3, r3
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb8:	3301      	adds	r3, #1
 8001bba:	627b      	str	r3, [r7, #36]	; 0x24
 8001bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d3e2      	bcc.n	8001b8a <BSP_LCD_DrawBitmap+0x116>
  }
}
 8001bc4:	bf00      	nop
 8001bc6:	372c      	adds	r7, #44	; 0x2c
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd90      	pop	{r4, r7, pc}
 8001bcc:	20000198 	.word	0x20000198
 8001bd0:	20000354 	.word	0x20000354

08001bd4 <BSP_LCD_FillRect>:
  * @param  Ypos: Y position
  * @param  Width: Rectangle width
  * @param  Height: Rectangle height
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bd8:	b086      	sub	sp, #24
 8001bda:	af02      	add	r7, sp, #8
 8001bdc:	4604      	mov	r4, r0
 8001bde:	4608      	mov	r0, r1
 8001be0:	4611      	mov	r1, r2
 8001be2:	461a      	mov	r2, r3
 8001be4:	4623      	mov	r3, r4
 8001be6:	80fb      	strh	r3, [r7, #6]
 8001be8:	4603      	mov	r3, r0
 8001bea:	80bb      	strh	r3, [r7, #4]
 8001bec:	460b      	mov	r3, r1
 8001bee:	807b      	strh	r3, [r7, #2]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	803b      	strh	r3, [r7, #0]
  uint32_t  Xaddress = 0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001bf8:	4b20      	ldr	r3, [pc, #128]	; (8001c7c <BSP_LCD_FillRect+0xa8>)
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	4920      	ldr	r1, [pc, #128]	; (8001c80 <BSP_LCD_FillRect+0xac>)
 8001bfe:	4613      	mov	r3, r2
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	4413      	add	r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	440b      	add	r3, r1
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff fc72 	bl	80014f4 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001c10:	4b1a      	ldr	r3, [pc, #104]	; (8001c7c <BSP_LCD_FillRect+0xa8>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a1b      	ldr	r2, [pc, #108]	; (8001c84 <BSP_LCD_FillRect+0xb0>)
 8001c16:	2134      	movs	r1, #52	; 0x34
 8001c18:	fb01 f303 	mul.w	r3, r1, r3
 8001c1c:	4413      	add	r3, r2
 8001c1e:	335c      	adds	r3, #92	; 0x5c
 8001c20:	681c      	ldr	r4, [r3, #0]
 8001c22:	f7ff fbef 	bl	8001404 <BSP_LCD_GetXSize>
 8001c26:	4602      	mov	r2, r0
 8001c28:	88bb      	ldrh	r3, [r7, #4]
 8001c2a:	fb03 f202 	mul.w	r2, r3, r2
 8001c2e:	88fb      	ldrh	r3, [r7, #6]
 8001c30:	4413      	add	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	4423      	add	r3, r4
 8001c36:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001c38:	4b10      	ldr	r3, [pc, #64]	; (8001c7c <BSP_LCD_FillRect+0xa8>)
 8001c3a:	681c      	ldr	r4, [r3, #0]
 8001c3c:	68fd      	ldr	r5, [r7, #12]
 8001c3e:	887e      	ldrh	r6, [r7, #2]
 8001c40:	f8b7 8000 	ldrh.w	r8, [r7]
 8001c44:	f7ff fbde 	bl	8001404 <BSP_LCD_GetXSize>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	887b      	ldrh	r3, [r7, #2]
 8001c4c:	1ad1      	subs	r1, r2, r3
 8001c4e:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <BSP_LCD_FillRect+0xa8>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	480b      	ldr	r0, [pc, #44]	; (8001c80 <BSP_LCD_FillRect+0xac>)
 8001c54:	4613      	mov	r3, r2
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	4413      	add	r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	4403      	add	r3, r0
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	9301      	str	r3, [sp, #4]
 8001c62:	9100      	str	r1, [sp, #0]
 8001c64:	4643      	mov	r3, r8
 8001c66:	4632      	mov	r2, r6
 8001c68:	4629      	mov	r1, r5
 8001c6a:	4620      	mov	r0, r4
 8001c6c:	f000 fa26 	bl	80020bc <LL_FillBuffer>
}
 8001c70:	bf00      	nop
 8001c72:	3710      	adds	r7, #16
 8001c74:	46bd      	mov	sp, r7
 8001c76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20000198 	.word	0x20000198
 8001c80:	2000019c 	.word	0x2000019c
 8001c84:	20000354 	.word	0x20000354

08001c88 <BSP_LCD_FillCircle>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	80fb      	strh	r3, [r7, #6]
 8001c92:	460b      	mov	r3, r1
 8001c94:	80bb      	strh	r3, [r7, #4]
 8001c96:	4613      	mov	r3, r2
 8001c98:	807b      	strh	r3, [r7, #2]
  int32_t  D;     /* Decision Variable */
  uint32_t  CurX; /* Current X Value */
  uint32_t  CurY; /* Current Y Value */

  D = 3 - (Radius << 1);
 8001c9a:	887b      	ldrh	r3, [r7, #2]
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	f1c3 0303 	rsb	r3, r3, #3
 8001ca2:	617b      	str	r3, [r7, #20]

  CurX = 0;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 8001ca8:	887b      	ldrh	r3, [r7, #2]
 8001caa:	60fb      	str	r3, [r7, #12]

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001cac:	4b44      	ldr	r3, [pc, #272]	; (8001dc0 <BSP_LCD_FillCircle+0x138>)
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	4944      	ldr	r1, [pc, #272]	; (8001dc4 <BSP_LCD_FillCircle+0x13c>)
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	4413      	add	r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	440b      	add	r3, r1
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff fc18 	bl	80014f4 <BSP_LCD_SetTextColor>

  while (CurX <= CurY)
 8001cc4:	e061      	b.n	8001d8a <BSP_LCD_FillCircle+0x102>
  {
    if(CurY > 0)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d021      	beq.n	8001d10 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - CurY, Ypos + CurX, 2*CurY);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	88fa      	ldrh	r2, [r7, #6]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	b298      	uxth	r0, r3
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	88bb      	ldrh	r3, [r7, #4]
 8001cdc:	4413      	add	r3, r2
 8001cde:	b299      	uxth	r1, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	461a      	mov	r2, r3
 8001cea:	f7ff fd95 	bl	8001818 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - CurY, Ypos - CurX, 2*CurY);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	88fa      	ldrh	r2, [r7, #6]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	b298      	uxth	r0, r3
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	88ba      	ldrh	r2, [r7, #4]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	b299      	uxth	r1, r3
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	f7ff fd84 	bl	8001818 <BSP_LCD_DrawHLine>
    }

    if(CurX > 0)
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d021      	beq.n	8001d5a <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - CurX, Ypos - CurY, 2*CurX);
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	88fa      	ldrh	r2, [r7, #6]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	b298      	uxth	r0, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	88ba      	ldrh	r2, [r7, #4]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	b299      	uxth	r1, r3
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	461a      	mov	r2, r3
 8001d34:	f7ff fd70 	bl	8001818 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - CurX, Ypos + CurY, 2*CurX);
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	88fa      	ldrh	r2, [r7, #6]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	b298      	uxth	r0, r3
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	88bb      	ldrh	r3, [r7, #4]
 8001d48:	4413      	add	r3, r2
 8001d4a:	b299      	uxth	r1, r3
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	461a      	mov	r2, r3
 8001d56:	f7ff fd5f 	bl	8001818 <BSP_LCD_DrawHLine>
    }
    if (D < 0)
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	da06      	bge.n	8001d6e <BSP_LCD_FillCircle+0xe6>
    {
      D += (CurX << 2) + 6;
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	009a      	lsls	r2, r3, #2
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	4413      	add	r3, r2
 8001d68:	3306      	adds	r3, #6
 8001d6a:	617b      	str	r3, [r7, #20]
 8001d6c:	e00a      	b.n	8001d84 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	009a      	lsls	r2, r3, #2
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	4413      	add	r3, r2
 8001d7a:	330a      	adds	r3, #10
 8001d7c:	617b      	str	r3, [r7, #20]
      CurY--;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	3b01      	subs	r3, #1
 8001d82:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	3301      	adds	r3, #1
 8001d88:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d999      	bls.n	8001cc6 <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001d92:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <BSP_LCD_FillCircle+0x138>)
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	490b      	ldr	r1, [pc, #44]	; (8001dc4 <BSP_LCD_FillCircle+0x13c>)
 8001d98:	4613      	mov	r3, r2
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	4413      	add	r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	440b      	add	r3, r1
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff fba5 	bl	80014f4 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8001daa:	887a      	ldrh	r2, [r7, #2]
 8001dac:	88b9      	ldrh	r1, [r7, #4]
 8001dae:	88fb      	ldrh	r3, [r7, #6]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff fd6f 	bl	8001894 <BSP_LCD_DrawCircle>
}
 8001db6:	bf00      	nop
 8001db8:	3718      	adds	r7, #24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20000198 	.word	0x20000198
 8001dc4:	2000019c 	.word	0x2000019c

08001dc8 <DSI_IO_WriteCmd>:
  *                 If inferior to 2, a long write command is performed else short.
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af02      	add	r7, sp, #8
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d80d      	bhi.n	8001df4 <DSI_IO_WriteCmd+0x2c>
  {
   HAL_DSI_ShortWrite(&hdsi_discovery, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	461a      	mov	r2, r3
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	3301      	adds	r3, #1
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	9300      	str	r3, [sp, #0]
 8001de6:	4613      	mov	r3, r2
 8001de8:	2215      	movs	r2, #21
 8001dea:	2100      	movs	r1, #0
 8001dec:	480a      	ldr	r0, [pc, #40]	; (8001e18 <DSI_IO_WriteCmd+0x50>)
 8001dee:	f002 ff9b 	bl	8004d28 <HAL_DSI_ShortWrite>
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  } 
}
 8001df2:	e00d      	b.n	8001e10 <DSI_IO_WriteCmd+0x48>
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4413      	add	r3, r2
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	9301      	str	r3, [sp, #4]
 8001e02:	9200      	str	r2, [sp, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2239      	movs	r2, #57	; 0x39
 8001e08:	2100      	movs	r1, #0
 8001e0a:	4803      	ldr	r0, [pc, #12]	; (8001e18 <DSI_IO_WriteCmd+0x50>)
 8001e0c:	f002 ffae 	bl	8004d6c <HAL_DSI_LongWrite>
}
 8001e10:	bf00      	nop
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	200003fc 	.word	0x200003fc

08001e1c <LCD_IO_GetID>:
  * @brief  Returns the ID of connected screen by checking the HDMI
  *        (adv7533 component) ID or LCD DSI (via TS ID) ID.
  * @retval LCD ID
  */
static uint16_t LCD_IO_GetID(void)
{ 
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  else
  {
    return 0;
  }
#else 
  return LCD_DSI_ID; 
 8001e20:	2311      	movs	r3, #17
#endif /* USE_LCD_HDMI */
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <BSP_LCD_MspInit>:
/**
  * @brief  Initialize the BSP LCD Msp.
  * Application can surcharge if needed this function implementation
  */
__weak void BSP_LCD_MspInit(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001e32:	4b32      	ldr	r3, [pc, #200]	; (8001efc <BSP_LCD_MspInit+0xd0>)
 8001e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e36:	4a31      	ldr	r2, [pc, #196]	; (8001efc <BSP_LCD_MspInit+0xd0>)
 8001e38:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001e3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e3e:	4b2f      	ldr	r3, [pc, #188]	; (8001efc <BSP_LCD_MspInit+0xd0>)
 8001e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e42:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]

  /** @brief Toggle Sw reset of LTDC IP */
  __HAL_RCC_LTDC_FORCE_RESET();
 8001e4a:	4b2c      	ldr	r3, [pc, #176]	; (8001efc <BSP_LCD_MspInit+0xd0>)
 8001e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4e:	4a2b      	ldr	r2, [pc, #172]	; (8001efc <BSP_LCD_MspInit+0xd0>)
 8001e50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001e54:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 8001e56:	4b29      	ldr	r3, [pc, #164]	; (8001efc <BSP_LCD_MspInit+0xd0>)
 8001e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5a:	4a28      	ldr	r2, [pc, #160]	; (8001efc <BSP_LCD_MspInit+0xd0>)
 8001e5c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001e60:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief Enable the DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8001e62:	4b26      	ldr	r3, [pc, #152]	; (8001efc <BSP_LCD_MspInit+0xd0>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	4a25      	ldr	r2, [pc, #148]	; (8001efc <BSP_LCD_MspInit+0xd0>)
 8001e68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6e:	4b23      	ldr	r3, [pc, #140]	; (8001efc <BSP_LCD_MspInit+0xd0>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e76:	60bb      	str	r3, [r7, #8]
 8001e78:	68bb      	ldr	r3, [r7, #8]

  /** @brief Toggle Sw reset of DMA2D IP */
  __HAL_RCC_DMA2D_FORCE_RESET();
 8001e7a:	4b20      	ldr	r3, [pc, #128]	; (8001efc <BSP_LCD_MspInit+0xd0>)
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	4a1f      	ldr	r2, [pc, #124]	; (8001efc <BSP_LCD_MspInit+0xd0>)
 8001e80:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e84:	6113      	str	r3, [r2, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 8001e86:	4b1d      	ldr	r3, [pc, #116]	; (8001efc <BSP_LCD_MspInit+0xd0>)
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	4a1c      	ldr	r2, [pc, #112]	; (8001efc <BSP_LCD_MspInit+0xd0>)
 8001e8c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001e90:	6113      	str	r3, [r2, #16]

  /** @brief Enable DSI Host and wrapper clocks */
  __HAL_RCC_DSI_CLK_ENABLE();
 8001e92:	4b1a      	ldr	r3, [pc, #104]	; (8001efc <BSP_LCD_MspInit+0xd0>)
 8001e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e96:	4a19      	ldr	r2, [pc, #100]	; (8001efc <BSP_LCD_MspInit+0xd0>)
 8001e98:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e9e:	4b17      	ldr	r3, [pc, #92]	; (8001efc <BSP_LCD_MspInit+0xd0>)
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ea6:	607b      	str	r3, [r7, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]

  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
 8001eaa:	4b14      	ldr	r3, [pc, #80]	; (8001efc <BSP_LCD_MspInit+0xd0>)
 8001eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eae:	4a13      	ldr	r2, [pc, #76]	; (8001efc <BSP_LCD_MspInit+0xd0>)
 8001eb0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001eb4:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 8001eb6:	4b11      	ldr	r3, [pc, #68]	; (8001efc <BSP_LCD_MspInit+0xd0>)
 8001eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eba:	4a10      	ldr	r2, [pc, #64]	; (8001efc <BSP_LCD_MspInit+0xd0>)
 8001ebc:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8001ec0:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	2103      	movs	r1, #3
 8001ec6:	2058      	movs	r0, #88	; 0x58
 8001ec8:	f001 fb0b 	bl	80034e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001ecc:	2058      	movs	r0, #88	; 0x58
 8001ece:	f001 fb24 	bl	800351a <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	2103      	movs	r1, #3
 8001ed6:	205a      	movs	r0, #90	; 0x5a
 8001ed8:	f001 fb03 	bl	80034e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001edc:	205a      	movs	r0, #90	; 0x5a
 8001ede:	f001 fb1c 	bl	800351a <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	2103      	movs	r1, #3
 8001ee6:	2062      	movs	r0, #98	; 0x62
 8001ee8:	f001 fafb 	bl	80034e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001eec:	2062      	movs	r0, #98	; 0x62
 8001eee:	f001 fb14 	bl	800351a <HAL_NVIC_EnableIRQ>
}
 8001ef2:	bf00      	nop
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40023800 	.word	0x40023800

08001f00 <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8001f00:	b5b0      	push	{r4, r5, r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	603a      	str	r2, [r7, #0]
 8001f0a:	80fb      	strh	r3, [r7, #6]
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001f10:	4b0c      	ldr	r3, [pc, #48]	; (8001f44 <BSP_LCD_DrawPixel+0x44>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a0c      	ldr	r2, [pc, #48]	; (8001f48 <BSP_LCD_DrawPixel+0x48>)
 8001f16:	2134      	movs	r1, #52	; 0x34
 8001f18:	fb01 f303 	mul.w	r3, r1, r3
 8001f1c:	4413      	add	r3, r2
 8001f1e:	335c      	adds	r3, #92	; 0x5c
 8001f20:	681c      	ldr	r4, [r3, #0]
 8001f22:	88bd      	ldrh	r5, [r7, #4]
 8001f24:	f7ff fa6e 	bl	8001404 <BSP_LCD_GetXSize>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	fb03 f205 	mul.w	r2, r3, r5
 8001f2e:	88fb      	ldrh	r3, [r7, #6]
 8001f30:	4413      	add	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4423      	add	r3, r4
 8001f36:	461a      	mov	r2, r3
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	6013      	str	r3, [r2, #0]
}
 8001f3c:	bf00      	nop
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bdb0      	pop	{r4, r5, r7, pc}
 8001f44:	20000198 	.word	0x20000198
 8001f48:	20000354 	.word	0x20000354

08001f4c <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b088      	sub	sp, #32
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	603a      	str	r2, [r7, #0]
 8001f56:	80fb      	strh	r3, [r7, #6]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	61fb      	str	r3, [r7, #28]
 8001f60:	2300      	movs	r3, #0
 8001f62:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[ActiveLayer].pFont->Height;
 8001f64:	4b53      	ldr	r3, [pc, #332]	; (80020b4 <DrawChar+0x168>)
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	4953      	ldr	r1, [pc, #332]	; (80020b8 <DrawChar+0x16c>)
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	4413      	add	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	440b      	add	r3, r1
 8001f74:	3308      	adds	r3, #8
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	88db      	ldrh	r3, [r3, #6]
 8001f7a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8001f7c:	4b4d      	ldr	r3, [pc, #308]	; (80020b4 <DrawChar+0x168>)
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	494d      	ldr	r1, [pc, #308]	; (80020b8 <DrawChar+0x16c>)
 8001f82:	4613      	mov	r3, r2
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	4413      	add	r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	440b      	add	r3, r1
 8001f8c:	3308      	adds	r3, #8
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	889b      	ldrh	r3, [r3, #4]
 8001f92:	823b      	strh	r3, [r7, #16]

  offset =  8 *((width + 7)/8) -  width ;
 8001f94:	8a3b      	ldrh	r3, [r7, #16]
 8001f96:	3307      	adds	r3, #7
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	da00      	bge.n	8001f9e <DrawChar+0x52>
 8001f9c:	3307      	adds	r3, #7
 8001f9e:	10db      	asrs	r3, r3, #3
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	8a3b      	ldrh	r3, [r7, #16]
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61fb      	str	r3, [r7, #28]
 8001fb2:	e076      	b.n	80020a2 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8001fb4:	8a3b      	ldrh	r3, [r7, #16]
 8001fb6:	3307      	adds	r3, #7
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	da00      	bge.n	8001fbe <DrawChar+0x72>
 8001fbc:	3307      	adds	r3, #7
 8001fbe:	10db      	asrs	r3, r3, #3
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	fb03 f302 	mul.w	r3, r3, r2
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	4413      	add	r3, r2
 8001fcc:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8001fce:	8a3b      	ldrh	r3, [r7, #16]
 8001fd0:	3307      	adds	r3, #7
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	da00      	bge.n	8001fd8 <DrawChar+0x8c>
 8001fd6:	3307      	adds	r3, #7
 8001fd8:	10db      	asrs	r3, r3, #3
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d002      	beq.n	8001fe4 <DrawChar+0x98>
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d004      	beq.n	8001fec <DrawChar+0xa0>
 8001fe2:	e00c      	b.n	8001ffe <DrawChar+0xb2>
    {

    case 1:
      line =  pchar[0];
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	617b      	str	r3, [r7, #20]
      break;
 8001fea:	e016      	b.n	800201a <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	021b      	lsls	r3, r3, #8
 8001ff2:	68ba      	ldr	r2, [r7, #8]
 8001ff4:	3201      	adds	r2, #1
 8001ff6:	7812      	ldrb	r2, [r2, #0]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	617b      	str	r3, [r7, #20]
      break;
 8001ffc:	e00d      	b.n	800201a <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	041a      	lsls	r2, r3, #16
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	3301      	adds	r3, #1
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	021b      	lsls	r3, r3, #8
 800200c:	4313      	orrs	r3, r2
 800200e:	68ba      	ldr	r2, [r7, #8]
 8002010:	3202      	adds	r2, #2
 8002012:	7812      	ldrb	r2, [r2, #0]
 8002014:	4313      	orrs	r3, r2
 8002016:	617b      	str	r3, [r7, #20]
      break;
 8002018:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 800201a:	2300      	movs	r3, #0
 800201c:	61bb      	str	r3, [r7, #24]
 800201e:	e036      	b.n	800208e <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1)))
 8002020:	8a3a      	ldrh	r2, [r7, #16]
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	1ad2      	subs	r2, r2, r3
 8002026:	7bfb      	ldrb	r3, [r7, #15]
 8002028:	4413      	add	r3, r2
 800202a:	3b01      	subs	r3, #1
 800202c:	2201      	movs	r2, #1
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	461a      	mov	r2, r3
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	4013      	ands	r3, r2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d012      	beq.n	8002062 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	b29a      	uxth	r2, r3
 8002040:	88fb      	ldrh	r3, [r7, #6]
 8002042:	4413      	add	r3, r2
 8002044:	b298      	uxth	r0, r3
 8002046:	4b1b      	ldr	r3, [pc, #108]	; (80020b4 <DrawChar+0x168>)
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	491b      	ldr	r1, [pc, #108]	; (80020b8 <DrawChar+0x16c>)
 800204c:	4613      	mov	r3, r2
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	4413      	add	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	440b      	add	r3, r1
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	88bb      	ldrh	r3, [r7, #4]
 800205a:	4619      	mov	r1, r3
 800205c:	f7ff ff50 	bl	8001f00 <BSP_LCD_DrawPixel>
 8002060:	e012      	b.n	8002088 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	b29a      	uxth	r2, r3
 8002066:	88fb      	ldrh	r3, [r7, #6]
 8002068:	4413      	add	r3, r2
 800206a:	b298      	uxth	r0, r3
 800206c:	4b11      	ldr	r3, [pc, #68]	; (80020b4 <DrawChar+0x168>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	4911      	ldr	r1, [pc, #68]	; (80020b8 <DrawChar+0x16c>)
 8002072:	4613      	mov	r3, r2
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	4413      	add	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	440b      	add	r3, r1
 800207c:	3304      	adds	r3, #4
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	88bb      	ldrh	r3, [r7, #4]
 8002082:	4619      	mov	r1, r3
 8002084:	f7ff ff3c 	bl	8001f00 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	3301      	adds	r3, #1
 800208c:	61bb      	str	r3, [r7, #24]
 800208e:	8a3b      	ldrh	r3, [r7, #16]
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	429a      	cmp	r2, r3
 8002094:	d3c4      	bcc.n	8002020 <DrawChar+0xd4>
      }
    }
    Ypos++;
 8002096:	88bb      	ldrh	r3, [r7, #4]
 8002098:	3301      	adds	r3, #1
 800209a:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	3301      	adds	r3, #1
 80020a0:	61fb      	str	r3, [r7, #28]
 80020a2:	8a7b      	ldrh	r3, [r7, #18]
 80020a4:	69fa      	ldr	r2, [r7, #28]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d384      	bcc.n	8001fb4 <DrawChar+0x68>
  }
}
 80020aa:	bf00      	nop
 80020ac:	3720      	adds	r7, #32
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	20000198 	.word	0x20000198
 80020b8:	2000019c 	.word	0x2000019c

080020bc <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af02      	add	r7, sp, #8
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
 80020c8:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_discovery.Init.Mode         = DMA2D_R2M;
 80020ca:	4b16      	ldr	r3, [pc, #88]	; (8002124 <LL_FillBuffer+0x68>)
 80020cc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80020d0:	605a      	str	r2, [r3, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 80020d2:	4b14      	ldr	r3, [pc, #80]	; (8002124 <LL_FillBuffer+0x68>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	609a      	str	r2, [r3, #8]
  hdma2d_discovery.Init.OutputOffset = OffLine;
 80020d8:	4a12      	ldr	r2, [pc, #72]	; (8002124 <LL_FillBuffer+0x68>)
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	60d3      	str	r3, [r2, #12]

  hdma2d_discovery.Instance = DMA2D;
 80020de:	4b11      	ldr	r3, [pc, #68]	; (8002124 <LL_FillBuffer+0x68>)
 80020e0:	4a11      	ldr	r2, [pc, #68]	; (8002128 <LL_FillBuffer+0x6c>)
 80020e2:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 80020e4:	480f      	ldr	r0, [pc, #60]	; (8002124 <LL_FillBuffer+0x68>)
 80020e6:	f001 fbef 	bl	80038c8 <HAL_DMA2D_Init>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d115      	bne.n	800211c <LL_FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, LayerIndex) == HAL_OK)
 80020f0:	68f9      	ldr	r1, [r7, #12]
 80020f2:	480c      	ldr	r0, [pc, #48]	; (8002124 <LL_FillBuffer+0x68>)
 80020f4:	f001 fd56 	bl	8003ba4 <HAL_DMA2D_ConfigLayer>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d10e      	bne.n	800211c <LL_FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&hdma2d_discovery, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80020fe:	68ba      	ldr	r2, [r7, #8]
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	9300      	str	r3, [sp, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	69f9      	ldr	r1, [r7, #28]
 8002108:	4806      	ldr	r0, [pc, #24]	; (8002124 <LL_FillBuffer+0x68>)
 800210a:	f001 fc37 	bl	800397c <HAL_DMA2D_Start>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d103      	bne.n	800211c <LL_FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 8002114:	210a      	movs	r1, #10
 8002116:	4803      	ldr	r0, [pc, #12]	; (8002124 <LL_FillBuffer+0x68>)
 8002118:	f001 fc5b 	bl	80039d2 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 800211c:	bf00      	nop
 800211e:	3710      	adds	r7, #16
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	200002fc 	.word	0x200002fc
 8002128:	4002b000 	.word	0x4002b000

0800212c <LL_ConvertLineToARGB8888>:
  * @param  pDst: Output color
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af02      	add	r7, sp, #8
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
 8002138:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hdma2d_discovery.Init.Mode         = DMA2D_M2M_PFC;
 800213a:	4b1c      	ldr	r3, [pc, #112]	; (80021ac <LL_ConvertLineToARGB8888+0x80>)
 800213c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002140:	605a      	str	r2, [r3, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 8002142:	4b1a      	ldr	r3, [pc, #104]	; (80021ac <LL_ConvertLineToARGB8888+0x80>)
 8002144:	2200      	movs	r2, #0
 8002146:	609a      	str	r2, [r3, #8]
  hdma2d_discovery.Init.OutputOffset = 0;
 8002148:	4b18      	ldr	r3, [pc, #96]	; (80021ac <LL_ConvertLineToARGB8888+0x80>)
 800214a:	2200      	movs	r2, #0
 800214c:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hdma2d_discovery.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800214e:	4b17      	ldr	r3, [pc, #92]	; (80021ac <LL_ConvertLineToARGB8888+0x80>)
 8002150:	2200      	movs	r2, #0
 8002152:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d_discovery.LayerCfg[1].InputAlpha = 0xFF;
 8002154:	4b15      	ldr	r3, [pc, #84]	; (80021ac <LL_ConvertLineToARGB8888+0x80>)
 8002156:	22ff      	movs	r2, #255	; 0xff
 8002158:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d_discovery.LayerCfg[1].InputColorMode = ColorMode;
 800215a:	4a14      	ldr	r2, [pc, #80]	; (80021ac <LL_ConvertLineToARGB8888+0x80>)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdma2d_discovery.LayerCfg[1].InputOffset = 0;
 8002160:	4b12      	ldr	r3, [pc, #72]	; (80021ac <LL_ConvertLineToARGB8888+0x80>)
 8002162:	2200      	movs	r2, #0
 8002164:	639a      	str	r2, [r3, #56]	; 0x38

  hdma2d_discovery.Instance = DMA2D;
 8002166:	4b11      	ldr	r3, [pc, #68]	; (80021ac <LL_ConvertLineToARGB8888+0x80>)
 8002168:	4a11      	ldr	r2, [pc, #68]	; (80021b0 <LL_ConvertLineToARGB8888+0x84>)
 800216a:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 800216c:	480f      	ldr	r0, [pc, #60]	; (80021ac <LL_ConvertLineToARGB8888+0x80>)
 800216e:	f001 fbab 	bl	80038c8 <HAL_DMA2D_Init>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d115      	bne.n	80021a4 <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, 1) == HAL_OK)
 8002178:	2101      	movs	r1, #1
 800217a:	480c      	ldr	r0, [pc, #48]	; (80021ac <LL_ConvertLineToARGB8888+0x80>)
 800217c:	f001 fd12 	bl	8003ba4 <HAL_DMA2D_ConfigLayer>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d10e      	bne.n	80021a4 <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hdma2d_discovery, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8002186:	68f9      	ldr	r1, [r7, #12]
 8002188:	68ba      	ldr	r2, [r7, #8]
 800218a:	2301      	movs	r3, #1
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4806      	ldr	r0, [pc, #24]	; (80021ac <LL_ConvertLineToARGB8888+0x80>)
 8002192:	f001 fbf3 	bl	800397c <HAL_DMA2D_Start>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d103      	bne.n	80021a4 <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 800219c:	210a      	movs	r1, #10
 800219e:	4803      	ldr	r0, [pc, #12]	; (80021ac <LL_ConvertLineToARGB8888+0x80>)
 80021a0:	f001 fc17 	bl	80039d2 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 80021a4:	bf00      	nop
 80021a6:	3710      	adds	r7, #16
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	200002fc 	.word	0x200002fc
 80021b0:	4002b000 	.word	0x4002b000

080021b4 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80021b8:	4b29      	ldr	r3, [pc, #164]	; (8002260 <BSP_SDRAM_Init+0xac>)
 80021ba:	4a2a      	ldr	r2, [pc, #168]	; (8002264 <BSP_SDRAM_Init+0xb0>)
 80021bc:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80021be:	4b2a      	ldr	r3, [pc, #168]	; (8002268 <BSP_SDRAM_Init+0xb4>)
 80021c0:	2202      	movs	r2, #2
 80021c2:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80021c4:	4b28      	ldr	r3, [pc, #160]	; (8002268 <BSP_SDRAM_Init+0xb4>)
 80021c6:	2207      	movs	r2, #7
 80021c8:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80021ca:	4b27      	ldr	r3, [pc, #156]	; (8002268 <BSP_SDRAM_Init+0xb4>)
 80021cc:	2204      	movs	r2, #4
 80021ce:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 80021d0:	4b25      	ldr	r3, [pc, #148]	; (8002268 <BSP_SDRAM_Init+0xb4>)
 80021d2:	2207      	movs	r2, #7
 80021d4:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 80021d6:	4b24      	ldr	r3, [pc, #144]	; (8002268 <BSP_SDRAM_Init+0xb4>)
 80021d8:	2202      	movs	r2, #2
 80021da:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 80021dc:	4b22      	ldr	r3, [pc, #136]	; (8002268 <BSP_SDRAM_Init+0xb4>)
 80021de:	2202      	movs	r2, #2
 80021e0:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 80021e2:	4b21      	ldr	r3, [pc, #132]	; (8002268 <BSP_SDRAM_Init+0xb4>)
 80021e4:	2202      	movs	r2, #2
 80021e6:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80021e8:	4b1d      	ldr	r3, [pc, #116]	; (8002260 <BSP_SDRAM_Init+0xac>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80021ee:	4b1c      	ldr	r3, [pc, #112]	; (8002260 <BSP_SDRAM_Init+0xac>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80021f4:	4b1a      	ldr	r3, [pc, #104]	; (8002260 <BSP_SDRAM_Init+0xac>)
 80021f6:	2204      	movs	r2, #4
 80021f8:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80021fa:	4b19      	ldr	r3, [pc, #100]	; (8002260 <BSP_SDRAM_Init+0xac>)
 80021fc:	2220      	movs	r2, #32
 80021fe:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002200:	4b17      	ldr	r3, [pc, #92]	; (8002260 <BSP_SDRAM_Init+0xac>)
 8002202:	2240      	movs	r2, #64	; 0x40
 8002204:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8002206:	4b16      	ldr	r3, [pc, #88]	; (8002260 <BSP_SDRAM_Init+0xac>)
 8002208:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800220c:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800220e:	4b14      	ldr	r3, [pc, #80]	; (8002260 <BSP_SDRAM_Init+0xac>)
 8002210:	2200      	movs	r2, #0
 8002212:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002214:	4b12      	ldr	r3, [pc, #72]	; (8002260 <BSP_SDRAM_Init+0xac>)
 8002216:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800221a:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800221c:	4b10      	ldr	r3, [pc, #64]	; (8002260 <BSP_SDRAM_Init+0xac>)
 800221e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002222:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8002224:	4b0e      	ldr	r3, [pc, #56]	; (8002260 <BSP_SDRAM_Init+0xac>)
 8002226:	2200      	movs	r2, #0
 8002228:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800222a:	2100      	movs	r1, #0
 800222c:	480c      	ldr	r0, [pc, #48]	; (8002260 <BSP_SDRAM_Init+0xac>)
 800222e:	f000 f87f 	bl	8002330 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8002232:	490d      	ldr	r1, [pc, #52]	; (8002268 <BSP_SDRAM_Init+0xb4>)
 8002234:	480a      	ldr	r0, [pc, #40]	; (8002260 <BSP_SDRAM_Init+0xac>)
 8002236:	f005 f9eb 	bl	8007610 <HAL_SDRAM_Init>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d003      	beq.n	8002248 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002240:	4b0a      	ldr	r3, [pc, #40]	; (800226c <BSP_SDRAM_Init+0xb8>)
 8002242:	2201      	movs	r2, #1
 8002244:	701a      	strb	r2, [r3, #0]
 8002246:	e002      	b.n	800224e <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002248:	4b08      	ldr	r3, [pc, #32]	; (800226c <BSP_SDRAM_Init+0xb8>)
 800224a:	2200      	movs	r2, #0
 800224c:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800224e:	f240 6003 	movw	r0, #1539	; 0x603
 8002252:	f000 f80d 	bl	8002270 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8002256:	4b05      	ldr	r3, [pc, #20]	; (800226c <BSP_SDRAM_Init+0xb8>)
 8002258:	781b      	ldrb	r3, [r3, #0]
}
 800225a:	4618      	mov	r0, r3
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	20000418 	.word	0x20000418
 8002264:	a0000140 	.word	0xa0000140
 8002268:	20000244 	.word	0x20000244
 800226c:	20000048 	.word	0x20000048

08002270 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8002278:	2300      	movs	r3, #0
 800227a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800227c:	4b2a      	ldr	r3, [pc, #168]	; (8002328 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800227e:	2201      	movs	r2, #1
 8002280:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002282:	4b29      	ldr	r3, [pc, #164]	; (8002328 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002284:	2210      	movs	r2, #16
 8002286:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002288:	4b27      	ldr	r3, [pc, #156]	; (8002328 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800228a:	2201      	movs	r2, #1
 800228c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800228e:	4b26      	ldr	r3, [pc, #152]	; (8002328 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002290:	2200      	movs	r2, #0
 8002292:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002294:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002298:	4923      	ldr	r1, [pc, #140]	; (8002328 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800229a:	4824      	ldr	r0, [pc, #144]	; (800232c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800229c:	f005 f9ec 	bl	8007678 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80022a0:	2001      	movs	r0, #1
 80022a2:	f000 fb79 	bl	8002998 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80022a6:	4b20      	ldr	r3, [pc, #128]	; (8002328 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022a8:	2202      	movs	r2, #2
 80022aa:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80022ac:	4b1e      	ldr	r3, [pc, #120]	; (8002328 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022ae:	2210      	movs	r2, #16
 80022b0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80022b2:	4b1d      	ldr	r3, [pc, #116]	; (8002328 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022b4:	2201      	movs	r2, #1
 80022b6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80022b8:	4b1b      	ldr	r3, [pc, #108]	; (8002328 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80022be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022c2:	4919      	ldr	r1, [pc, #100]	; (8002328 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022c4:	4819      	ldr	r0, [pc, #100]	; (800232c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80022c6:	f005 f9d7 	bl	8007678 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80022ca:	4b17      	ldr	r3, [pc, #92]	; (8002328 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022cc:	2203      	movs	r2, #3
 80022ce:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80022d0:	4b15      	ldr	r3, [pc, #84]	; (8002328 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022d2:	2210      	movs	r2, #16
 80022d4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80022d6:	4b14      	ldr	r3, [pc, #80]	; (8002328 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022d8:	2208      	movs	r2, #8
 80022da:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80022dc:	4b12      	ldr	r3, [pc, #72]	; (8002328 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022de:	2200      	movs	r2, #0
 80022e0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80022e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022e6:	4910      	ldr	r1, [pc, #64]	; (8002328 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022e8:	4810      	ldr	r0, [pc, #64]	; (800232c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80022ea:	f005 f9c5 	bl	8007678 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80022ee:	f44f 730c 	mov.w	r3, #560	; 0x230
 80022f2:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80022f4:	4b0c      	ldr	r3, [pc, #48]	; (8002328 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022f6:	2204      	movs	r2, #4
 80022f8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80022fa:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022fc:	2210      	movs	r2, #16
 80022fe:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002300:	4b09      	ldr	r3, [pc, #36]	; (8002328 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002302:	2201      	movs	r2, #1
 8002304:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	4a07      	ldr	r2, [pc, #28]	; (8002328 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800230a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800230c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002310:	4905      	ldr	r1, [pc, #20]	; (8002328 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002312:	4806      	ldr	r0, [pc, #24]	; (800232c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002314:	f005 f9b0 	bl	8007678 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8002318:	6879      	ldr	r1, [r7, #4]
 800231a:	4804      	ldr	r0, [pc, #16]	; (800232c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800231c:	f005 f9d7 	bl	80076ce <HAL_SDRAM_ProgramRefreshRate>
}
 8002320:	bf00      	nop
 8002322:	3710      	adds	r7, #16
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	20000260 	.word	0x20000260
 800232c:	20000418 	.word	0x20000418

08002330 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params  
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8002330:	b580      	push	{r7, lr}
 8002332:	b090      	sub	sp, #64	; 0x40
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800233a:	4b71      	ldr	r3, [pc, #452]	; (8002500 <BSP_SDRAM_MspInit+0x1d0>)
 800233c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800233e:	4a70      	ldr	r2, [pc, #448]	; (8002500 <BSP_SDRAM_MspInit+0x1d0>)
 8002340:	f043 0301 	orr.w	r3, r3, #1
 8002344:	6393      	str	r3, [r2, #56]	; 0x38
 8002346:	4b6e      	ldr	r3, [pc, #440]	; (8002500 <BSP_SDRAM_MspInit+0x1d0>)
 8002348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002350:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8002352:	4b6b      	ldr	r3, [pc, #428]	; (8002500 <BSP_SDRAM_MspInit+0x1d0>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002356:	4a6a      	ldr	r2, [pc, #424]	; (8002500 <BSP_SDRAM_MspInit+0x1d0>)
 8002358:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800235c:	6313      	str	r3, [r2, #48]	; 0x30
 800235e:	4b68      	ldr	r3, [pc, #416]	; (8002500 <BSP_SDRAM_MspInit+0x1d0>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002366:	627b      	str	r3, [r7, #36]	; 0x24
 8002368:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800236a:	4b65      	ldr	r3, [pc, #404]	; (8002500 <BSP_SDRAM_MspInit+0x1d0>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236e:	4a64      	ldr	r2, [pc, #400]	; (8002500 <BSP_SDRAM_MspInit+0x1d0>)
 8002370:	f043 0308 	orr.w	r3, r3, #8
 8002374:	6313      	str	r3, [r2, #48]	; 0x30
 8002376:	4b62      	ldr	r3, [pc, #392]	; (8002500 <BSP_SDRAM_MspInit+0x1d0>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237a:	f003 0308 	and.w	r3, r3, #8
 800237e:	623b      	str	r3, [r7, #32]
 8002380:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002382:	4b5f      	ldr	r3, [pc, #380]	; (8002500 <BSP_SDRAM_MspInit+0x1d0>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	4a5e      	ldr	r2, [pc, #376]	; (8002500 <BSP_SDRAM_MspInit+0x1d0>)
 8002388:	f043 0310 	orr.w	r3, r3, #16
 800238c:	6313      	str	r3, [r2, #48]	; 0x30
 800238e:	4b5c      	ldr	r3, [pc, #368]	; (8002500 <BSP_SDRAM_MspInit+0x1d0>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	f003 0310 	and.w	r3, r3, #16
 8002396:	61fb      	str	r3, [r7, #28]
 8002398:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800239a:	4b59      	ldr	r3, [pc, #356]	; (8002500 <BSP_SDRAM_MspInit+0x1d0>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	4a58      	ldr	r2, [pc, #352]	; (8002500 <BSP_SDRAM_MspInit+0x1d0>)
 80023a0:	f043 0320 	orr.w	r3, r3, #32
 80023a4:	6313      	str	r3, [r2, #48]	; 0x30
 80023a6:	4b56      	ldr	r3, [pc, #344]	; (8002500 <BSP_SDRAM_MspInit+0x1d0>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	f003 0320 	and.w	r3, r3, #32
 80023ae:	61bb      	str	r3, [r7, #24]
 80023b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80023b2:	4b53      	ldr	r3, [pc, #332]	; (8002500 <BSP_SDRAM_MspInit+0x1d0>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	4a52      	ldr	r2, [pc, #328]	; (8002500 <BSP_SDRAM_MspInit+0x1d0>)
 80023b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023bc:	6313      	str	r3, [r2, #48]	; 0x30
 80023be:	4b50      	ldr	r3, [pc, #320]	; (8002500 <BSP_SDRAM_MspInit+0x1d0>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023c6:	617b      	str	r3, [r7, #20]
 80023c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023ca:	4b4d      	ldr	r3, [pc, #308]	; (8002500 <BSP_SDRAM_MspInit+0x1d0>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	4a4c      	ldr	r2, [pc, #304]	; (8002500 <BSP_SDRAM_MspInit+0x1d0>)
 80023d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023d4:	6313      	str	r3, [r2, #48]	; 0x30
 80023d6:	4b4a      	ldr	r3, [pc, #296]	; (8002500 <BSP_SDRAM_MspInit+0x1d0>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023de:	613b      	str	r3, [r7, #16]
 80023e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80023e2:	4b47      	ldr	r3, [pc, #284]	; (8002500 <BSP_SDRAM_MspInit+0x1d0>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	4a46      	ldr	r2, [pc, #280]	; (8002500 <BSP_SDRAM_MspInit+0x1d0>)
 80023e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ec:	6313      	str	r3, [r2, #48]	; 0x30
 80023ee:	4b44      	ldr	r3, [pc, #272]	; (8002500 <BSP_SDRAM_MspInit+0x1d0>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80023fa:	2302      	movs	r3, #2
 80023fc:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80023fe:	2301      	movs	r3, #1
 8002400:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8002402:	2303      	movs	r3, #3
 8002404:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8002406:	230c      	movs	r3, #12
 8002408:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 800240a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800240e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_14 | GPIO_PIN_15;
 
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002410:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002414:	4619      	mov	r1, r3
 8002416:	483b      	ldr	r0, [pc, #236]	; (8002504 <BSP_SDRAM_MspInit+0x1d4>)
 8002418:	f002 fd6e 	bl	8004ef8 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800241c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002420:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
      
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002422:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002426:	4619      	mov	r1, r3
 8002428:	4837      	ldr	r0, [pc, #220]	; (8002508 <BSP_SDRAM_MspInit+0x1d8>)
 800242a:	f002 fd65 	bl	8004ef8 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800242e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002432:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
    
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002434:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002438:	4619      	mov	r1, r3
 800243a:	4834      	ldr	r0, [pc, #208]	; (800250c <BSP_SDRAM_MspInit+0x1dc>)
 800243c:	f002 fd5c 	bl	8004ef8 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4|\
 8002440:	f248 1337 	movw	r3, #33079	; 0x8137
 8002444:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002446:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800244a:	4619      	mov	r1, r3
 800244c:	4830      	ldr	r0, [pc, #192]	; (8002510 <BSP_SDRAM_MspInit+0x1e0>)
 800244e:	f002 fd53 	bl	8004ef8 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8002452:	f64f 732c 	movw	r3, #65324	; 0xff2c
 8002456:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8002458:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800245c:	4619      	mov	r1, r3
 800245e:	482d      	ldr	r0, [pc, #180]	; (8002514 <BSP_SDRAM_MspInit+0x1e4>)
 8002460:	f002 fd4a 	bl	8004ef8 <HAL_GPIO_Init>
  
  /* GPIOI configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8002464:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8002468:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
 800246a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800246e:	4619      	mov	r1, r3
 8002470:	4829      	ldr	r0, [pc, #164]	; (8002518 <BSP_SDRAM_MspInit+0x1e8>)
 8002472:	f002 fd41 	bl	8004ef8 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002476:	4b29      	ldr	r3, [pc, #164]	; (800251c <BSP_SDRAM_MspInit+0x1ec>)
 8002478:	2200      	movs	r2, #0
 800247a:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800247c:	4b27      	ldr	r3, [pc, #156]	; (800251c <BSP_SDRAM_MspInit+0x1ec>)
 800247e:	2280      	movs	r2, #128	; 0x80
 8002480:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002482:	4b26      	ldr	r3, [pc, #152]	; (800251c <BSP_SDRAM_MspInit+0x1ec>)
 8002484:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002488:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800248a:	4b24      	ldr	r3, [pc, #144]	; (800251c <BSP_SDRAM_MspInit+0x1ec>)
 800248c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002490:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002492:	4b22      	ldr	r3, [pc, #136]	; (800251c <BSP_SDRAM_MspInit+0x1ec>)
 8002494:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002498:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800249a:	4b20      	ldr	r3, [pc, #128]	; (800251c <BSP_SDRAM_MspInit+0x1ec>)
 800249c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024a0:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 80024a2:	4b1e      	ldr	r3, [pc, #120]	; (800251c <BSP_SDRAM_MspInit+0x1ec>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80024a8:	4b1c      	ldr	r3, [pc, #112]	; (800251c <BSP_SDRAM_MspInit+0x1ec>)
 80024aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024ae:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80024b0:	4b1a      	ldr	r3, [pc, #104]	; (800251c <BSP_SDRAM_MspInit+0x1ec>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80024b6:	4b19      	ldr	r3, [pc, #100]	; (800251c <BSP_SDRAM_MspInit+0x1ec>)
 80024b8:	2203      	movs	r2, #3
 80024ba:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80024bc:	4b17      	ldr	r3, [pc, #92]	; (800251c <BSP_SDRAM_MspInit+0x1ec>)
 80024be:	2200      	movs	r2, #0
 80024c0:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80024c2:	4b16      	ldr	r3, [pc, #88]	; (800251c <BSP_SDRAM_MspInit+0x1ec>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80024c8:	4b14      	ldr	r3, [pc, #80]	; (800251c <BSP_SDRAM_MspInit+0x1ec>)
 80024ca:	4a15      	ldr	r2, [pc, #84]	; (8002520 <BSP_SDRAM_MspInit+0x1f0>)
 80024cc:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a12      	ldr	r2, [pc, #72]	; (800251c <BSP_SDRAM_MspInit+0x1ec>)
 80024d2:	631a      	str	r2, [r3, #48]	; 0x30
 80024d4:	4a11      	ldr	r2, [pc, #68]	; (800251c <BSP_SDRAM_MspInit+0x1ec>)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80024da:	4810      	ldr	r0, [pc, #64]	; (800251c <BSP_SDRAM_MspInit+0x1ec>)
 80024dc:	f001 f8e6 	bl	80036ac <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80024e0:	480e      	ldr	r0, [pc, #56]	; (800251c <BSP_SDRAM_MspInit+0x1ec>)
 80024e2:	f001 f835 	bl	8003550 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80024e6:	2200      	movs	r2, #0
 80024e8:	210f      	movs	r1, #15
 80024ea:	2038      	movs	r0, #56	; 0x38
 80024ec:	f000 fff9 	bl	80034e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80024f0:	2038      	movs	r0, #56	; 0x38
 80024f2:	f001 f812 	bl	800351a <HAL_NVIC_EnableIRQ>
}
 80024f6:	bf00      	nop
 80024f8:	3740      	adds	r7, #64	; 0x40
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40023800 	.word	0x40023800
 8002504:	40020c00 	.word	0x40020c00
 8002508:	40021000 	.word	0x40021000
 800250c:	40021400 	.word	0x40021400
 8002510:	40021800 	.word	0x40021800
 8002514:	40021c00 	.word	0x40021c00
 8002518:	40022000 	.word	0x40022000
 800251c:	20000270 	.word	0x20000270
 8002520:	40026410 	.word	0x40026410

08002524 <BSP_TS_Init>:
  * @param  ts_SizeX : Maximum X size of the TS area on LCD
  * @param  ts_SizeY : Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	4603      	mov	r3, r0
 800252c:	460a      	mov	r2, r1
 800252e:	80fb      	strh	r3, [r7, #6]
 8002530:	4613      	mov	r3, r2
 8002532:	80bb      	strh	r3, [r7, #4]
  uint8_t ts_status = TS_OK;
 8002534:	2300      	movs	r3, #0
 8002536:	73fb      	strb	r3, [r7, #15]
  uint8_t ts_id1, ts_id2 = 0;
 8002538:	2300      	movs	r3, #0
 800253a:	73bb      	strb	r3, [r7, #14]
  /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
  /* but the prototype of Init() is like that in template and should be respected       */

  /* Initialize the communication channel to sensor (I2C) if necessary */
  /* that is initialization is done only once after a power up         */
  ft6x06_ts_drv.Init(I2C_Address);
 800253c:	4b25      	ldr	r3, [pc, #148]	; (80025d4 <BSP_TS_Init+0xb0>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a25      	ldr	r2, [pc, #148]	; (80025d8 <BSP_TS_Init+0xb4>)
 8002542:	7812      	ldrb	r2, [r2, #0]
 8002544:	b292      	uxth	r2, r2
 8002546:	4610      	mov	r0, r2
 8002548:	4798      	blx	r3

  ts_id1 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 800254a:	4b22      	ldr	r3, [pc, #136]	; (80025d4 <BSP_TS_Init+0xb0>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2054      	movs	r0, #84	; 0x54
 8002550:	4798      	blx	r3
 8002552:	4603      	mov	r3, r0
 8002554:	737b      	strb	r3, [r7, #13]
  if(ts_id1 != FT6206_ID_VALUE)
 8002556:	7b7b      	ldrb	r3, [r7, #13]
 8002558:	2b11      	cmp	r3, #17
 800255a:	d009      	beq.n	8002570 <BSP_TS_Init+0x4c>
  {
    ts_id2 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS_A02);
 800255c:	4b1d      	ldr	r3, [pc, #116]	; (80025d4 <BSP_TS_Init+0xb0>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	2070      	movs	r0, #112	; 0x70
 8002562:	4798      	blx	r3
 8002564:	4603      	mov	r3, r0
 8002566:	73bb      	strb	r3, [r7, #14]
    I2C_Address    = TS_I2C_ADDRESS_A02;    
 8002568:	4b1b      	ldr	r3, [pc, #108]	; (80025d8 <BSP_TS_Init+0xb4>)
 800256a:	2270      	movs	r2, #112	; 0x70
 800256c:	701a      	strb	r2, [r3, #0]
 800256e:	e002      	b.n	8002576 <BSP_TS_Init+0x52>
  }
  else
  {
    I2C_Address    = TS_I2C_ADDRESS;    
 8002570:	4b19      	ldr	r3, [pc, #100]	; (80025d8 <BSP_TS_Init+0xb4>)
 8002572:	2254      	movs	r2, #84	; 0x54
 8002574:	701a      	strb	r2, [r3, #0]
  }
  
  /* Scan FT6xx6 TouchScreen IC controller ID register by I2C Read       */
  /* Verify this is a FT6206 or FT6336G, otherwise this is an error case */
  if((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 8002576:	7b7b      	ldrb	r3, [r7, #13]
 8002578:	2b11      	cmp	r3, #17
 800257a:	d002      	beq.n	8002582 <BSP_TS_Init+0x5e>
 800257c:	7bbb      	ldrb	r3, [r7, #14]
 800257e:	2b11      	cmp	r3, #17
 8002580:	d121      	bne.n	80025c6 <BSP_TS_Init+0xa2>
  {
    /* Found FT6206 : Initialize the TS driver structure */
    ts_driver = &ft6x06_ts_drv;
 8002582:	4b16      	ldr	r3, [pc, #88]	; (80025dc <BSP_TS_Init+0xb8>)
 8002584:	4a13      	ldr	r2, [pc, #76]	; (80025d4 <BSP_TS_Init+0xb0>)
 8002586:	601a      	str	r2, [r3, #0]

    /* Get LCD chosen orientation */
    if(ts_SizeX < ts_SizeY)
 8002588:	88fa      	ldrh	r2, [r7, #6]
 800258a:	88bb      	ldrh	r3, [r7, #4]
 800258c:	429a      	cmp	r2, r3
 800258e:	d203      	bcs.n	8002598 <BSP_TS_Init+0x74>
    {
      ts_orientation = TS_SWAP_NONE;                
 8002590:	4b13      	ldr	r3, [pc, #76]	; (80025e0 <BSP_TS_Init+0xbc>)
 8002592:	2201      	movs	r2, #1
 8002594:	701a      	strb	r2, [r3, #0]
 8002596:	e002      	b.n	800259e <BSP_TS_Init+0x7a>
    }
    else
    {
      ts_orientation = TS_SWAP_XY | TS_SWAP_Y;                 
 8002598:	4b11      	ldr	r3, [pc, #68]	; (80025e0 <BSP_TS_Init+0xbc>)
 800259a:	220c      	movs	r2, #12
 800259c:	701a      	strb	r2, [r3, #0]
    }

    if(ts_status == TS_OK)
 800259e:	7bfb      	ldrb	r3, [r7, #15]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d112      	bne.n	80025ca <BSP_TS_Init+0xa6>
    {
      /* Software reset the TouchScreen */
      ts_driver->Reset(I2C_Address);
 80025a4:	4b0d      	ldr	r3, [pc, #52]	; (80025dc <BSP_TS_Init+0xb8>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	4a0b      	ldr	r2, [pc, #44]	; (80025d8 <BSP_TS_Init+0xb4>)
 80025ac:	7812      	ldrb	r2, [r2, #0]
 80025ae:	b292      	uxth	r2, r2
 80025b0:	4610      	mov	r0, r2
 80025b2:	4798      	blx	r3

      /* Calibrate, Configure and Start the TouchScreen driver */
      ts_driver->Start(I2C_Address);
 80025b4:	4b09      	ldr	r3, [pc, #36]	; (80025dc <BSP_TS_Init+0xb8>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	4a07      	ldr	r2, [pc, #28]	; (80025d8 <BSP_TS_Init+0xb4>)
 80025bc:	7812      	ldrb	r2, [r2, #0]
 80025be:	b292      	uxth	r2, r2
 80025c0:	4610      	mov	r0, r2
 80025c2:	4798      	blx	r3
    if(ts_status == TS_OK)
 80025c4:	e001      	b.n	80025ca <BSP_TS_Init+0xa6>

    } /* of if(ts_status == TS_OK) */
  }
  else
  {
    ts_status = TS_DEVICE_NOT_FOUND;
 80025c6:	2303      	movs	r3, #3
 80025c8:	73fb      	strb	r3, [r7, #15]
  }

  return (ts_status);
 80025ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	20000000 	.word	0x20000000
 80025d8:	200002d5 	.word	0x200002d5
 80025dc:	200002d0 	.word	0x200002d0
 80025e0:	200002d4 	.word	0x200002d4

080025e4 <BSP_TS_ITConfig>:
/**
  * @brief  Configures and enables the touch screen interrupts.
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_ITConfig(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af00      	add	r7, sp, #0
  uint8_t ts_status = TS_OK;
 80025ea:	2300      	movs	r3, #0
 80025ec:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef gpio_init_structure;

  /* Msp Init of GPIO used for TS_INT pin coming from TouchScreen driver IC FT6x06 */
  /* When touchscreen is operated in interrupt mode */
  BSP_TS_INT_MspInit();
 80025ee:	f000 f94f 	bl	8002890 <BSP_TS_INT_MspInit>

  /* Configure Interrupt mode for TS_INT pin falling edge : when a new touch is available */
  /* TS_INT pin is active on low level on new touch available */
  gpio_init_structure.Pin = TS_INT_PIN;
 80025f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025f6:	603b      	str	r3, [r7, #0]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80025f8:	2301      	movs	r3, #1
 80025fa:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80025fc:	2302      	movs	r3, #2
 80025fe:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 8002600:	4b0d      	ldr	r3, [pc, #52]	; (8002638 <BSP_TS_ITConfig+0x54>)
 8002602:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 8002604:	463b      	mov	r3, r7
 8002606:	4619      	mov	r1, r3
 8002608:	480c      	ldr	r0, [pc, #48]	; (800263c <BSP_TS_ITConfig+0x58>)
 800260a:	f002 fc75 	bl	8004ef8 <HAL_GPIO_Init>

  /* Enable and set the TS_INT EXTI Interrupt to an intermediate priority */
  HAL_NVIC_SetPriority((IRQn_Type)(TS_INT_EXTI_IRQn), 0x0F, 0x00);
 800260e:	2200      	movs	r2, #0
 8002610:	210f      	movs	r1, #15
 8002612:	2028      	movs	r0, #40	; 0x28
 8002614:	f000 ff65 	bl	80034e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(TS_INT_EXTI_IRQn));
 8002618:	2028      	movs	r0, #40	; 0x28
 800261a:	f000 ff7e 	bl	800351a <HAL_NVIC_EnableIRQ>

  /* Enable the TS in interrupt mode */
  /* In that case the INT output of FT6206 when new touch is available */
  /* is active on low level and directed on EXTI */
  ts_driver->EnableIT(I2C_Address);
 800261e:	4b08      	ldr	r3, [pc, #32]	; (8002640 <BSP_TS_ITConfig+0x5c>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	4a07      	ldr	r2, [pc, #28]	; (8002644 <BSP_TS_ITConfig+0x60>)
 8002626:	7812      	ldrb	r2, [r2, #0]
 8002628:	b292      	uxth	r2, r2
 800262a:	4610      	mov	r0, r2
 800262c:	4798      	blx	r3

  return (ts_status);
 800262e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002630:	4618      	mov	r0, r3
 8002632:	3718      	adds	r7, #24
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	10210000 	.word	0x10210000
 800263c:	40022000 	.word	0x40022000
 8002640:	200002d0 	.word	0x200002d0
 8002644:	200002d5 	.word	0x200002d5

08002648 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8002648:	b590      	push	{r4, r7, lr}
 800264a:	b089      	sub	sp, #36	; 0x24
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8002650:	2300      	movs	r3, #0
 8002652:	76fb      	strb	r3, [r7, #27]
  uint32_t area = 0;
  uint32_t event = 0;
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = ts_driver->DetectTouch(I2C_Address);
 8002654:	4b89      	ldr	r3, [pc, #548]	; (800287c <BSP_TS_GetState+0x234>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	4a89      	ldr	r2, [pc, #548]	; (8002880 <BSP_TS_GetState+0x238>)
 800265c:	7812      	ldrb	r2, [r2, #0]
 800265e:	b292      	uxth	r2, r2
 8002660:	4610      	mov	r0, r2
 8002662:	4798      	blx	r3
 8002664:	4603      	mov	r3, r0
 8002666:	461a      	mov	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	701a      	strb	r2, [r3, #0]
  if(TS_State->touchDetected)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	2b00      	cmp	r3, #0
 8002672:	f000 80fe 	beq.w	8002872 <BSP_TS_GetState+0x22a>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8002676:	2300      	movs	r3, #0
 8002678:	61fb      	str	r3, [r7, #28]
 800267a:	e0f3      	b.n	8002864 <BSP_TS_GetState+0x21c>
    {
      /* Get each touch coordinates */
      ts_driver->GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 800267c:	4b7f      	ldr	r3, [pc, #508]	; (800287c <BSP_TS_GetState+0x234>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	4a7f      	ldr	r2, [pc, #508]	; (8002880 <BSP_TS_GetState+0x238>)
 8002684:	7812      	ldrb	r2, [r2, #0]
 8002686:	b290      	uxth	r0, r2
 8002688:	f107 0110 	add.w	r1, r7, #16
 800268c:	69fa      	ldr	r2, [r7, #28]
 800268e:	0052      	lsls	r2, r2, #1
 8002690:	188c      	adds	r4, r1, r2
 8002692:	f107 010c 	add.w	r1, r7, #12
 8002696:	69fa      	ldr	r2, [r7, #28]
 8002698:	0052      	lsls	r2, r2, #1
 800269a:	440a      	add	r2, r1
 800269c:	4621      	mov	r1, r4
 800269e:	4798      	blx	r3

      if(ts_orientation & TS_SWAP_XY)
 80026a0:	4b78      	ldr	r3, [pc, #480]	; (8002884 <BSP_TS_GetState+0x23c>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	f003 0308 	and.w	r3, r3, #8
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d01d      	beq.n	80026e8 <BSP_TS_GetState+0xa0>
      {
        tmp = Raw_x[index];
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	f107 0220 	add.w	r2, r7, #32
 80026b4:	4413      	add	r3, r2
 80026b6:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80026ba:	833b      	strh	r3, [r7, #24]
        Raw_x[index] = Raw_y[index]; 
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	f107 0220 	add.w	r2, r7, #32
 80026c4:	4413      	add	r3, r2
 80026c6:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	f107 0120 	add.w	r1, r7, #32
 80026d2:	440b      	add	r3, r1
 80026d4:	f823 2c10 	strh.w	r2, [r3, #-16]
        Raw_y[index] = tmp;
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	f107 0220 	add.w	r2, r7, #32
 80026e0:	4413      	add	r3, r2
 80026e2:	8b3a      	ldrh	r2, [r7, #24]
 80026e4:	f823 2c14 	strh.w	r2, [r3, #-20]
      }
      
      if(ts_orientation & TS_SWAP_X)
 80026e8:	4b66      	ldr	r3, [pc, #408]	; (8002884 <BSP_TS_GetState+0x23c>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d011      	beq.n	8002718 <BSP_TS_GetState+0xd0>
      {
        Raw_x[index] = FT_6206_MAX_WIDTH - 1 - Raw_x[index];
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	f107 0220 	add.w	r2, r7, #32
 80026fc:	4413      	add	r3, r2
 80026fe:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 8002702:	f240 331f 	movw	r3, #799	; 0x31f
 8002706:	1a9b      	subs	r3, r3, r2
 8002708:	b29a      	uxth	r2, r3
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	f107 0120 	add.w	r1, r7, #32
 8002712:	440b      	add	r3, r1
 8002714:	f823 2c10 	strh.w	r2, [r3, #-16]
      }

      if(ts_orientation & TS_SWAP_Y)
 8002718:	4b5a      	ldr	r3, [pc, #360]	; (8002884 <BSP_TS_GetState+0x23c>)
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	2b00      	cmp	r3, #0
 8002722:	d011      	beq.n	8002748 <BSP_TS_GetState+0x100>
      {
        Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	f107 0220 	add.w	r2, r7, #32
 800272c:	4413      	add	r3, r2
 800272e:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8002732:	f240 13df 	movw	r3, #479	; 0x1df
 8002736:	1a9b      	subs	r3, r3, r2
 8002738:	b29a      	uxth	r2, r3
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	f107 0120 	add.w	r1, r7, #32
 8002742:	440b      	add	r3, r1
 8002744:	f823 2c14 	strh.w	r2, [r3, #-20]
      }
            
      xDiff = Raw_x[index] > _x[index]? (Raw_x[index] - _x[index]): (_x[index] - Raw_x[index]);
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	f107 0220 	add.w	r2, r7, #32
 8002750:	4413      	add	r3, r2
 8002752:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8002756:	4619      	mov	r1, r3
 8002758:	4a4b      	ldr	r2, [pc, #300]	; (8002888 <BSP_TS_GetState+0x240>)
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002760:	4299      	cmp	r1, r3
 8002762:	d90e      	bls.n	8002782 <BSP_TS_GetState+0x13a>
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	f107 0220 	add.w	r2, r7, #32
 800276c:	4413      	add	r3, r2
 800276e:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 8002772:	4945      	ldr	r1, [pc, #276]	; (8002888 <BSP_TS_GetState+0x240>)
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800277a:	b29b      	uxth	r3, r3
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	b29b      	uxth	r3, r3
 8002780:	e00d      	b.n	800279e <BSP_TS_GetState+0x156>
 8002782:	4a41      	ldr	r2, [pc, #260]	; (8002888 <BSP_TS_GetState+0x240>)
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800278a:	b29a      	uxth	r2, r3
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	f107 0120 	add.w	r1, r7, #32
 8002794:	440b      	add	r3, r1
 8002796:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	b29b      	uxth	r3, r3
 800279e:	82fb      	strh	r3, [r7, #22]
      yDiff = Raw_y[index] > _y[index]? (Raw_y[index] - _y[index]): (_y[index] - Raw_y[index]);
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	f107 0220 	add.w	r2, r7, #32
 80027a8:	4413      	add	r3, r2
 80027aa:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80027ae:	4619      	mov	r1, r3
 80027b0:	4a36      	ldr	r2, [pc, #216]	; (800288c <BSP_TS_GetState+0x244>)
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027b8:	4299      	cmp	r1, r3
 80027ba:	d90e      	bls.n	80027da <BSP_TS_GetState+0x192>
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	f107 0220 	add.w	r2, r7, #32
 80027c4:	4413      	add	r3, r2
 80027c6:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 80027ca:	4930      	ldr	r1, [pc, #192]	; (800288c <BSP_TS_GetState+0x244>)
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	e00d      	b.n	80027f6 <BSP_TS_GetState+0x1ae>
 80027da:	4a2c      	ldr	r2, [pc, #176]	; (800288c <BSP_TS_GetState+0x244>)
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	f107 0120 	add.w	r1, r7, #32
 80027ec:	440b      	add	r3, r1
 80027ee:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	82bb      	strh	r3, [r7, #20]

      if ((xDiff + yDiff) > 5)
 80027f8:	8afa      	ldrh	r2, [r7, #22]
 80027fa:	8abb      	ldrh	r3, [r7, #20]
 80027fc:	4413      	add	r3, r2
 80027fe:	2b05      	cmp	r3, #5
 8002800:	dd17      	ble.n	8002832 <BSP_TS_GetState+0x1ea>
      {
        _x[index] = Raw_x[index];
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	f107 0220 	add.w	r2, r7, #32
 800280a:	4413      	add	r3, r2
 800280c:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8002810:	4619      	mov	r1, r3
 8002812:	4a1d      	ldr	r2, [pc, #116]	; (8002888 <BSP_TS_GetState+0x240>)
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = Raw_y[index];
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	f107 0220 	add.w	r2, r7, #32
 8002822:	4413      	add	r3, r2
 8002824:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002828:	4619      	mov	r1, r3
 800282a:	4a18      	ldr	r2, [pc, #96]	; (800288c <BSP_TS_GetState+0x244>)
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }


      TS_State->touchX[index] = _x[index];
 8002832:	4a15      	ldr	r2, [pc, #84]	; (8002888 <BSP_TS_GetState+0x240>)
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800283a:	b299      	uxth	r1, r3
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	4413      	add	r3, r2
 8002844:	460a      	mov	r2, r1
 8002846:	805a      	strh	r2, [r3, #2]
      TS_State->touchY[index] = _y[index];
 8002848:	4a10      	ldr	r2, [pc, #64]	; (800288c <BSP_TS_GetState+0x244>)
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002850:	b299      	uxth	r1, r3
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	4413      	add	r3, r2
 800285a:	460a      	mov	r2, r1
 800285c:	80da      	strh	r2, [r3, #6]
    for(index=0; index < TS_State->touchDetected; index++)
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	3301      	adds	r3, #1
 8002862:	61fb      	str	r3, [r7, #28]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	461a      	mov	r2, r3
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	4293      	cmp	r3, r2
 800286e:	f4ff af05 	bcc.w	800267c <BSP_TS_GetState+0x34>
    ts_status = BSP_TS_Get_GestureId(TS_State);
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8002872:	7efb      	ldrb	r3, [r7, #27]
}
 8002874:	4618      	mov	r0, r3
 8002876:	3724      	adds	r7, #36	; 0x24
 8002878:	46bd      	mov	sp, r7
 800287a:	bd90      	pop	{r4, r7, pc}
 800287c:	200002d0 	.word	0x200002d0
 8002880:	200002d5 	.word	0x200002d5
 8002884:	200002d4 	.word	0x200002d4
 8002888:	200002d8 	.word	0x200002d8
 800288c:	200002e0 	.word	0x200002e0

08002890 <BSP_TS_INT_MspInit>:
/**
  * @brief  Initializes the TS_INT pin MSP.
  * @retval None
  */
__weak void BSP_TS_INT_MspInit(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  TS_INT_GPIO_CLK_ENABLE();
 8002896:	4b0f      	ldr	r3, [pc, #60]	; (80028d4 <BSP_TS_INT_MspInit+0x44>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	4a0e      	ldr	r2, [pc, #56]	; (80028d4 <BSP_TS_INT_MspInit+0x44>)
 800289c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028a0:	6313      	str	r3, [r2, #48]	; 0x30
 80028a2:	4b0c      	ldr	r3, [pc, #48]	; (80028d4 <BSP_TS_INT_MspInit+0x44>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028aa:	603b      	str	r3, [r7, #0]
 80028ac:	683b      	ldr	r3, [r7, #0]

  /* GPIO configuration in input for TouchScreen interrupt signal on TS_INT pin */
  gpio_init_structure.Pin       = TS_INT_PIN;
 80028ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028b2:	607b      	str	r3, [r7, #4]

  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 80028b4:	2300      	movs	r3, #0
 80028b6:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80028b8:	2301      	movs	r3, #1
 80028ba:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80028bc:	2303      	movs	r3, #3
 80028be:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 80028c0:	1d3b      	adds	r3, r7, #4
 80028c2:	4619      	mov	r1, r3
 80028c4:	4804      	ldr	r0, [pc, #16]	; (80028d8 <BSP_TS_INT_MspInit+0x48>)
 80028c6:	f002 fb17 	bl	8004ef8 <HAL_GPIO_Init>
}
 80028ca:	bf00      	nop
 80028cc:	3718      	adds	r7, #24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	40023800 	.word	0x40023800
 80028d8:	40022000 	.word	0x40022000

080028dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028e0:	2003      	movs	r0, #3
 80028e2:	f000 fdf3 	bl	80034cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028e6:	2000      	movs	r0, #0
 80028e8:	f000 f806 	bl	80028f8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80028ec:	f007 f8fc 	bl	8009ae8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	bd80      	pop	{r7, pc}
	...

080028f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002900:	4b12      	ldr	r3, [pc, #72]	; (800294c <HAL_InitTick+0x54>)
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	4b12      	ldr	r3, [pc, #72]	; (8002950 <HAL_InitTick+0x58>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	4619      	mov	r1, r3
 800290a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800290e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002912:	fbb2 f3f3 	udiv	r3, r2, r3
 8002916:	4618      	mov	r0, r3
 8002918:	f000 fe0d 	bl	8003536 <HAL_SYSTICK_Config>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e00e      	b.n	8002944 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2b0f      	cmp	r3, #15
 800292a:	d80a      	bhi.n	8002942 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800292c:	2200      	movs	r2, #0
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	f04f 30ff 	mov.w	r0, #4294967295
 8002934:	f000 fdd5 	bl	80034e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002938:	4a06      	ldr	r2, [pc, #24]	; (8002954 <HAL_InitTick+0x5c>)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800293e:	2300      	movs	r3, #0
 8002940:	e000      	b.n	8002944 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
}
 8002944:	4618      	mov	r0, r3
 8002946:	3708      	adds	r7, #8
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	20000054 	.word	0x20000054
 8002950:	20000050 	.word	0x20000050
 8002954:	2000004c 	.word	0x2000004c

08002958 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800295c:	4b06      	ldr	r3, [pc, #24]	; (8002978 <HAL_IncTick+0x20>)
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	461a      	mov	r2, r3
 8002962:	4b06      	ldr	r3, [pc, #24]	; (800297c <HAL_IncTick+0x24>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4413      	add	r3, r2
 8002968:	4a04      	ldr	r2, [pc, #16]	; (800297c <HAL_IncTick+0x24>)
 800296a:	6013      	str	r3, [r2, #0]
}
 800296c:	bf00      	nop
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	20000050 	.word	0x20000050
 800297c:	2000044c 	.word	0x2000044c

08002980 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  return uwTick;
 8002984:	4b03      	ldr	r3, [pc, #12]	; (8002994 <HAL_GetTick+0x14>)
 8002986:	681b      	ldr	r3, [r3, #0]
}
 8002988:	4618      	mov	r0, r3
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	2000044c 	.word	0x2000044c

08002998 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029a0:	f7ff ffee 	bl	8002980 <HAL_GetTick>
 80029a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b0:	d005      	beq.n	80029be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029b2:	4b09      	ldr	r3, [pc, #36]	; (80029d8 <HAL_Delay+0x40>)
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	461a      	mov	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	4413      	add	r3, r2
 80029bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029be:	bf00      	nop
 80029c0:	f7ff ffde 	bl	8002980 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d8f7      	bhi.n	80029c0 <HAL_Delay+0x28>
  {
  }
}
 80029d0:	bf00      	nop
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	20000050 	.word	0x20000050

080029dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029e4:	2300      	movs	r3, #0
 80029e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e031      	b.n	8002a56 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d109      	bne.n	8002a0e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f007 f898 	bl	8009b30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	f003 0310 	and.w	r3, r3, #16
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d116      	bne.n	8002a48 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a1e:	4b10      	ldr	r3, [pc, #64]	; (8002a60 <HAL_ADC_Init+0x84>)
 8002a20:	4013      	ands	r3, r2
 8002a22:	f043 0202 	orr.w	r2, r3, #2
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 fb7a 	bl	8003124 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	f023 0303 	bic.w	r3, r3, #3
 8002a3e:	f043 0201 	orr.w	r2, r3, #1
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	641a      	str	r2, [r3, #64]	; 0x40
 8002a46:	e001      	b.n	8002a4c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	ffffeefd 	.word	0xffffeefd

08002a64 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b085      	sub	sp, #20
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d101      	bne.n	8002a7e <HAL_ADC_Start_IT+0x1a>
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	e0a8      	b.n	8002bd0 <HAL_ADC_Start_IT+0x16c>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2201      	movs	r2, #1
 8002a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d018      	beq.n	8002ac6 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689a      	ldr	r2, [r3, #8]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f042 0201 	orr.w	r2, r2, #1
 8002aa2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002aa4:	4b4d      	ldr	r3, [pc, #308]	; (8002bdc <HAL_ADC_Start_IT+0x178>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a4d      	ldr	r2, [pc, #308]	; (8002be0 <HAL_ADC_Start_IT+0x17c>)
 8002aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8002aae:	0c9a      	lsrs	r2, r3, #18
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	4413      	add	r3, r2
 8002ab6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002ab8:	e002      	b.n	8002ac0 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	3b01      	subs	r3, #1
 8002abe:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1f9      	bne.n	8002aba <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f003 0301 	and.w	r3, r3, #1
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d17c      	bne.n	8002bce <HAL_ADC_Start_IT+0x16a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ad8:	4b42      	ldr	r3, [pc, #264]	; (8002be4 <HAL_ADC_Start_IT+0x180>)
 8002ada:	4013      	ands	r3, r2
 8002adc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d007      	beq.n	8002b02 <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002afa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b0e:	d106      	bne.n	8002b1e <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b14:	f023 0206 	bic.w	r2, r3, #6
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	645a      	str	r2, [r3, #68]	; 0x44
 8002b1c:	e002      	b.n	8002b24 <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002b34:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6859      	ldr	r1, [r3, #4]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	4b29      	ldr	r3, [pc, #164]	; (8002be8 <HAL_ADC_Start_IT+0x184>)
 8002b42:	430b      	orrs	r3, r1
 8002b44:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002b46:	4b29      	ldr	r3, [pc, #164]	; (8002bec <HAL_ADC_Start_IT+0x188>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f003 031f 	and.w	r3, r3, #31
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d10f      	bne.n	8002b72 <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d136      	bne.n	8002bce <HAL_ADC_Start_IT+0x16a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689a      	ldr	r2, [r3, #8]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b6e:	609a      	str	r2, [r3, #8]
 8002b70:	e02d      	b.n	8002bce <HAL_ADC_Start_IT+0x16a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a1e      	ldr	r2, [pc, #120]	; (8002bf0 <HAL_ADC_Start_IT+0x18c>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d10e      	bne.n	8002b9a <HAL_ADC_Start_IT+0x136>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d107      	bne.n	8002b9a <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	689a      	ldr	r2, [r3, #8]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b98:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002b9a:	4b14      	ldr	r3, [pc, #80]	; (8002bec <HAL_ADC_Start_IT+0x188>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f003 0310 	and.w	r3, r3, #16
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d113      	bne.n	8002bce <HAL_ADC_Start_IT+0x16a>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a12      	ldr	r2, [pc, #72]	; (8002bf4 <HAL_ADC_Start_IT+0x190>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d10e      	bne.n	8002bce <HAL_ADC_Start_IT+0x16a>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d107      	bne.n	8002bce <HAL_ADC_Start_IT+0x16a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	689a      	ldr	r2, [r3, #8]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002bcc:	609a      	str	r2, [r3, #8]
      } 
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3714      	adds	r7, #20
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	20000054 	.word	0x20000054
 8002be0:	431bde83 	.word	0x431bde83
 8002be4:	fffff8fe 	.word	0xfffff8fe
 8002be8:	04000020 	.word	0x04000020
 8002bec:	40012300 	.word	0x40012300
 8002bf0:	40012000 	.word	0x40012000
 8002bf4:	40012200 	.word	0x40012200

08002bf8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8002c00:	2300      	movs	r3, #0
 8002c02:	60fb      	str	r3, [r7, #12]
 8002c04:	2300      	movs	r3, #0
 8002c06:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	bf0c      	ite	eq
 8002c16:	2301      	moveq	r3, #1
 8002c18:	2300      	movne	r3, #0
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f003 0320 	and.w	r3, r3, #32
 8002c28:	2b20      	cmp	r3, #32
 8002c2a:	bf0c      	ite	eq
 8002c2c:	2301      	moveq	r3, #1
 8002c2e:	2300      	movne	r3, #0
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d049      	beq.n	8002cce <HAL_ADC_IRQHandler+0xd6>
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d046      	beq.n	8002cce <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c44:	f003 0310 	and.w	r3, r3, #16
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d105      	bne.n	8002c58 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c50:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d12b      	bne.n	8002cbe <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d127      	bne.n	8002cbe <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c74:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d006      	beq.n	8002c8a <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d119      	bne.n	8002cbe <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	685a      	ldr	r2, [r3, #4]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f022 0220 	bic.w	r2, r2, #32
 8002c98:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d105      	bne.n	8002cbe <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	f043 0201 	orr.w	r2, r3, #1
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f005 ff80 	bl	8008bc4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f06f 0212 	mvn.w	r2, #18
 8002ccc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0304 	and.w	r3, r3, #4
 8002cd8:	2b04      	cmp	r3, #4
 8002cda:	bf0c      	ite	eq
 8002cdc:	2301      	moveq	r3, #1
 8002cde:	2300      	movne	r3, #0
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cee:	2b80      	cmp	r3, #128	; 0x80
 8002cf0:	bf0c      	ite	eq
 8002cf2:	2301      	moveq	r3, #1
 8002cf4:	2300      	movne	r3, #0
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d057      	beq.n	8002db0 <HAL_ADC_IRQHandler+0x1b8>
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d054      	beq.n	8002db0 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	f003 0310 	and.w	r3, r3, #16
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d105      	bne.n	8002d1e <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d139      	bne.n	8002da0 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d32:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d006      	beq.n	8002d48 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d12b      	bne.n	8002da0 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d124      	bne.n	8002da0 <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d11d      	bne.n	8002da0 <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d119      	bne.n	8002da0 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	685a      	ldr	r2, [r3, #4]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d7a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d80:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d105      	bne.n	8002da0 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d98:	f043 0201 	orr.w	r2, r3, #1
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f000 fab9 	bl	8003318 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f06f 020c 	mvn.w	r2, #12
 8002dae:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	bf0c      	ite	eq
 8002dbe:	2301      	moveq	r3, #1
 8002dc0:	2300      	movne	r3, #0
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd0:	2b40      	cmp	r3, #64	; 0x40
 8002dd2:	bf0c      	ite	eq
 8002dd4:	2301      	moveq	r3, #1
 8002dd6:	2300      	movne	r3, #0
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d017      	beq.n	8002e12 <HAL_ADC_IRQHandler+0x21a>
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d014      	beq.n	8002e12 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d10d      	bne.n	8002e12 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 f846 	bl	8002e94 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f06f 0201 	mvn.w	r2, #1
 8002e10:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0320 	and.w	r3, r3, #32
 8002e1c:	2b20      	cmp	r3, #32
 8002e1e:	bf0c      	ite	eq
 8002e20:	2301      	moveq	r3, #1
 8002e22:	2300      	movne	r3, #0
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e36:	bf0c      	ite	eq
 8002e38:	2301      	moveq	r3, #1
 8002e3a:	2300      	movne	r3, #0
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d015      	beq.n	8002e72 <HAL_ADC_IRQHandler+0x27a>
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d012      	beq.n	8002e72 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e50:	f043 0202 	orr.w	r2, r3, #2
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f06f 0220 	mvn.w	r2, #32
 8002e60:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 f820 	bl	8002ea8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f06f 0220 	mvn.w	r2, #32
 8002e70:	601a      	str	r2, [r3, #0]
  }
}
 8002e72:	bf00      	nop
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002e7a:	b480      	push	{r7}
 8002e7c:	b083      	sub	sp, #12
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d101      	bne.n	8002ed8 <HAL_ADC_ConfigChannel+0x1c>
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	e115      	b.n	8003104 <HAL_ADC_ConfigChannel+0x248>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2b09      	cmp	r3, #9
 8002ee6:	d935      	bls.n	8002f54 <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68d9      	ldr	r1, [r3, #12]
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	4413      	add	r3, r2
 8002efc:	3b1e      	subs	r3, #30
 8002efe:	2207      	movs	r2, #7
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	43da      	mvns	r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	400a      	ands	r2, r1
 8002f0c:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a7f      	ldr	r2, [pc, #508]	; (8003110 <HAL_ADC_ConfigChannel+0x254>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d10a      	bne.n	8002f2e <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68d9      	ldr	r1, [r3, #12]
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	061a      	lsls	r2, r3, #24
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	60da      	str	r2, [r3, #12]
 8002f2c:	e035      	b.n	8002f9a <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68d9      	ldr	r1, [r3, #12]
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	4618      	mov	r0, r3
 8002f40:	4603      	mov	r3, r0
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	4403      	add	r3, r0
 8002f46:	3b1e      	subs	r3, #30
 8002f48:	409a      	lsls	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	60da      	str	r2, [r3, #12]
 8002f52:	e022      	b.n	8002f9a <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6919      	ldr	r1, [r3, #16]
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	461a      	mov	r2, r3
 8002f62:	4613      	mov	r3, r2
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	4413      	add	r3, r2
 8002f68:	2207      	movs	r2, #7
 8002f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6e:	43da      	mvns	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	400a      	ands	r2, r1
 8002f76:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6919      	ldr	r1, [r3, #16]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	689a      	ldr	r2, [r3, #8]
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	4618      	mov	r0, r3
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	4403      	add	r3, r0
 8002f90:	409a      	lsls	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	430a      	orrs	r2, r1
 8002f98:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	2b06      	cmp	r3, #6
 8002fa0:	d824      	bhi.n	8002fec <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	4613      	mov	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	4413      	add	r3, r2
 8002fb2:	3b05      	subs	r3, #5
 8002fb4:	221f      	movs	r2, #31
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	43da      	mvns	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	400a      	ands	r2, r1
 8002fc2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685a      	ldr	r2, [r3, #4]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	4413      	add	r3, r2
 8002fdc:	3b05      	subs	r3, #5
 8002fde:	fa00 f203 	lsl.w	r2, r0, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	635a      	str	r2, [r3, #52]	; 0x34
 8002fea:	e04c      	b.n	8003086 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	2b0c      	cmp	r3, #12
 8002ff2:	d824      	bhi.n	800303e <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	4613      	mov	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4413      	add	r3, r2
 8003004:	3b23      	subs	r3, #35	; 0x23
 8003006:	221f      	movs	r2, #31
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	43da      	mvns	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	400a      	ands	r2, r1
 8003014:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	b29b      	uxth	r3, r3
 8003022:	4618      	mov	r0, r3
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685a      	ldr	r2, [r3, #4]
 8003028:	4613      	mov	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4413      	add	r3, r2
 800302e:	3b23      	subs	r3, #35	; 0x23
 8003030:	fa00 f203 	lsl.w	r2, r0, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	430a      	orrs	r2, r1
 800303a:	631a      	str	r2, [r3, #48]	; 0x30
 800303c:	e023      	b.n	8003086 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685a      	ldr	r2, [r3, #4]
 8003048:	4613      	mov	r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	4413      	add	r3, r2
 800304e:	3b41      	subs	r3, #65	; 0x41
 8003050:	221f      	movs	r2, #31
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	43da      	mvns	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	400a      	ands	r2, r1
 800305e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	b29b      	uxth	r3, r3
 800306c:	4618      	mov	r0, r3
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685a      	ldr	r2, [r3, #4]
 8003072:	4613      	mov	r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	4413      	add	r3, r2
 8003078:	3b41      	subs	r3, #65	; 0x41
 800307a:	fa00 f203 	lsl.w	r2, r0, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	430a      	orrs	r2, r1
 8003084:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a22      	ldr	r2, [pc, #136]	; (8003114 <HAL_ADC_ConfigChannel+0x258>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d109      	bne.n	80030a4 <HAL_ADC_ConfigChannel+0x1e8>
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2b12      	cmp	r3, #18
 8003096:	d105      	bne.n	80030a4 <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003098:	4b1f      	ldr	r3, [pc, #124]	; (8003118 <HAL_ADC_ConfigChannel+0x25c>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	4a1e      	ldr	r2, [pc, #120]	; (8003118 <HAL_ADC_ConfigChannel+0x25c>)
 800309e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80030a2:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a1a      	ldr	r2, [pc, #104]	; (8003114 <HAL_ADC_ConfigChannel+0x258>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d125      	bne.n	80030fa <HAL_ADC_ConfigChannel+0x23e>
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a17      	ldr	r2, [pc, #92]	; (8003110 <HAL_ADC_ConfigChannel+0x254>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d003      	beq.n	80030c0 <HAL_ADC_ConfigChannel+0x204>
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2b11      	cmp	r3, #17
 80030be:	d11c      	bne.n	80030fa <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80030c0:	4b15      	ldr	r3, [pc, #84]	; (8003118 <HAL_ADC_ConfigChannel+0x25c>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	4a14      	ldr	r2, [pc, #80]	; (8003118 <HAL_ADC_ConfigChannel+0x25c>)
 80030c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80030ca:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a0f      	ldr	r2, [pc, #60]	; (8003110 <HAL_ADC_ConfigChannel+0x254>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d111      	bne.n	80030fa <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80030d6:	4b11      	ldr	r3, [pc, #68]	; (800311c <HAL_ADC_ConfigChannel+0x260>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a11      	ldr	r2, [pc, #68]	; (8003120 <HAL_ADC_ConfigChannel+0x264>)
 80030dc:	fba2 2303 	umull	r2, r3, r2, r3
 80030e0:	0c9a      	lsrs	r2, r3, #18
 80030e2:	4613      	mov	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4413      	add	r3, r2
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80030ec:	e002      	b.n	80030f4 <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	3b01      	subs	r3, #1
 80030f2:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1f9      	bne.n	80030ee <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	3714      	adds	r7, #20
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr
 8003110:	10000012 	.word	0x10000012
 8003114:	40012000 	.word	0x40012000
 8003118:	40012300 	.word	0x40012300
 800311c:	20000054 	.word	0x20000054
 8003120:	431bde83 	.word	0x431bde83

08003124 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800312c:	4b78      	ldr	r3, [pc, #480]	; (8003310 <ADC_Init+0x1ec>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	4a77      	ldr	r2, [pc, #476]	; (8003310 <ADC_Init+0x1ec>)
 8003132:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003136:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003138:	4b75      	ldr	r3, [pc, #468]	; (8003310 <ADC_Init+0x1ec>)
 800313a:	685a      	ldr	r2, [r3, #4]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	4973      	ldr	r1, [pc, #460]	; (8003310 <ADC_Init+0x1ec>)
 8003142:	4313      	orrs	r3, r2
 8003144:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	685a      	ldr	r2, [r3, #4]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003154:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	6859      	ldr	r1, [r3, #4]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	691b      	ldr	r3, [r3, #16]
 8003160:	021a      	lsls	r2, r3, #8
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	430a      	orrs	r2, r1
 8003168:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	685a      	ldr	r2, [r3, #4]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003178:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6859      	ldr	r1, [r3, #4]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689a      	ldr	r2, [r3, #8]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	430a      	orrs	r2, r1
 800318a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689a      	ldr	r2, [r3, #8]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800319a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6899      	ldr	r1, [r3, #8]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68da      	ldr	r2, [r3, #12]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	430a      	orrs	r2, r1
 80031ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b2:	4a58      	ldr	r2, [pc, #352]	; (8003314 <ADC_Init+0x1f0>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d022      	beq.n	80031fe <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	689a      	ldr	r2, [r3, #8]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6899      	ldr	r1, [r3, #8]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6899      	ldr	r1, [r3, #8]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	609a      	str	r2, [r3, #8]
 80031fc:	e00f      	b.n	800321e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800320c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	689a      	ldr	r2, [r3, #8]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800321c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	689a      	ldr	r2, [r3, #8]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 0202 	bic.w	r2, r2, #2
 800322c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	6899      	ldr	r1, [r3, #8]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	005a      	lsls	r2, r3, #1
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	430a      	orrs	r2, r1
 8003240:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d01b      	beq.n	8003284 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685a      	ldr	r2, [r3, #4]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800325a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	685a      	ldr	r2, [r3, #4]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800326a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6859      	ldr	r1, [r3, #4]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003276:	3b01      	subs	r3, #1
 8003278:	035a      	lsls	r2, r3, #13
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	430a      	orrs	r2, r1
 8003280:	605a      	str	r2, [r3, #4]
 8003282:	e007      	b.n	8003294 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	685a      	ldr	r2, [r3, #4]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003292:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80032a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	69db      	ldr	r3, [r3, #28]
 80032ae:	3b01      	subs	r3, #1
 80032b0:	051a      	lsls	r2, r3, #20
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80032c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	6899      	ldr	r1, [r3, #8]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032d6:	025a      	lsls	r2, r3, #9
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	430a      	orrs	r2, r1
 80032de:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689a      	ldr	r2, [r3, #8]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6899      	ldr	r1, [r3, #8]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	029a      	lsls	r2, r3, #10
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	430a      	orrs	r2, r1
 8003302:	609a      	str	r2, [r3, #8]
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr
 8003310:	40012300 	.word	0x40012300
 8003314:	0f000001 	.word	0x0f000001

08003318 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f003 0307 	and.w	r3, r3, #7
 800333a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800333c:	4b0b      	ldr	r3, [pc, #44]	; (800336c <__NVIC_SetPriorityGrouping+0x40>)
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003342:	68ba      	ldr	r2, [r7, #8]
 8003344:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003348:	4013      	ands	r3, r2
 800334a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003354:	4b06      	ldr	r3, [pc, #24]	; (8003370 <__NVIC_SetPriorityGrouping+0x44>)
 8003356:	4313      	orrs	r3, r2
 8003358:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800335a:	4a04      	ldr	r2, [pc, #16]	; (800336c <__NVIC_SetPriorityGrouping+0x40>)
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	60d3      	str	r3, [r2, #12]
}
 8003360:	bf00      	nop
 8003362:	3714      	adds	r7, #20
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr
 800336c:	e000ed00 	.word	0xe000ed00
 8003370:	05fa0000 	.word	0x05fa0000

08003374 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003378:	4b04      	ldr	r3, [pc, #16]	; (800338c <__NVIC_GetPriorityGrouping+0x18>)
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	0a1b      	lsrs	r3, r3, #8
 800337e:	f003 0307 	and.w	r3, r3, #7
}
 8003382:	4618      	mov	r0, r3
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr
 800338c:	e000ed00 	.word	0xe000ed00

08003390 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	4603      	mov	r3, r0
 8003398:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800339a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	db0b      	blt.n	80033ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033a2:	79fb      	ldrb	r3, [r7, #7]
 80033a4:	f003 021f 	and.w	r2, r3, #31
 80033a8:	4907      	ldr	r1, [pc, #28]	; (80033c8 <__NVIC_EnableIRQ+0x38>)
 80033aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ae:	095b      	lsrs	r3, r3, #5
 80033b0:	2001      	movs	r0, #1
 80033b2:	fa00 f202 	lsl.w	r2, r0, r2
 80033b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033ba:	bf00      	nop
 80033bc:	370c      	adds	r7, #12
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	e000e100 	.word	0xe000e100

080033cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	4603      	mov	r3, r0
 80033d4:	6039      	str	r1, [r7, #0]
 80033d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	db0a      	blt.n	80033f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	b2da      	uxtb	r2, r3
 80033e4:	490c      	ldr	r1, [pc, #48]	; (8003418 <__NVIC_SetPriority+0x4c>)
 80033e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ea:	0112      	lsls	r2, r2, #4
 80033ec:	b2d2      	uxtb	r2, r2
 80033ee:	440b      	add	r3, r1
 80033f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033f4:	e00a      	b.n	800340c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	b2da      	uxtb	r2, r3
 80033fa:	4908      	ldr	r1, [pc, #32]	; (800341c <__NVIC_SetPriority+0x50>)
 80033fc:	79fb      	ldrb	r3, [r7, #7]
 80033fe:	f003 030f 	and.w	r3, r3, #15
 8003402:	3b04      	subs	r3, #4
 8003404:	0112      	lsls	r2, r2, #4
 8003406:	b2d2      	uxtb	r2, r2
 8003408:	440b      	add	r3, r1
 800340a:	761a      	strb	r2, [r3, #24]
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr
 8003418:	e000e100 	.word	0xe000e100
 800341c:	e000ed00 	.word	0xe000ed00

08003420 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003420:	b480      	push	{r7}
 8003422:	b089      	sub	sp, #36	; 0x24
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f003 0307 	and.w	r3, r3, #7
 8003432:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	f1c3 0307 	rsb	r3, r3, #7
 800343a:	2b04      	cmp	r3, #4
 800343c:	bf28      	it	cs
 800343e:	2304      	movcs	r3, #4
 8003440:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	3304      	adds	r3, #4
 8003446:	2b06      	cmp	r3, #6
 8003448:	d902      	bls.n	8003450 <NVIC_EncodePriority+0x30>
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	3b03      	subs	r3, #3
 800344e:	e000      	b.n	8003452 <NVIC_EncodePriority+0x32>
 8003450:	2300      	movs	r3, #0
 8003452:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003454:	f04f 32ff 	mov.w	r2, #4294967295
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	fa02 f303 	lsl.w	r3, r2, r3
 800345e:	43da      	mvns	r2, r3
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	401a      	ands	r2, r3
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003468:	f04f 31ff 	mov.w	r1, #4294967295
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	fa01 f303 	lsl.w	r3, r1, r3
 8003472:	43d9      	mvns	r1, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003478:	4313      	orrs	r3, r2
         );
}
 800347a:	4618      	mov	r0, r3
 800347c:	3724      	adds	r7, #36	; 0x24
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
	...

08003488 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	3b01      	subs	r3, #1
 8003494:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003498:	d301      	bcc.n	800349e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800349a:	2301      	movs	r3, #1
 800349c:	e00f      	b.n	80034be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800349e:	4a0a      	ldr	r2, [pc, #40]	; (80034c8 <SysTick_Config+0x40>)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	3b01      	subs	r3, #1
 80034a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034a6:	210f      	movs	r1, #15
 80034a8:	f04f 30ff 	mov.w	r0, #4294967295
 80034ac:	f7ff ff8e 	bl	80033cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034b0:	4b05      	ldr	r3, [pc, #20]	; (80034c8 <SysTick_Config+0x40>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034b6:	4b04      	ldr	r3, [pc, #16]	; (80034c8 <SysTick_Config+0x40>)
 80034b8:	2207      	movs	r2, #7
 80034ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3708      	adds	r7, #8
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	e000e010 	.word	0xe000e010

080034cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f7ff ff29 	bl	800332c <__NVIC_SetPriorityGrouping>
}
 80034da:	bf00      	nop
 80034dc:	3708      	adds	r7, #8
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b086      	sub	sp, #24
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	4603      	mov	r3, r0
 80034ea:	60b9      	str	r1, [r7, #8]
 80034ec:	607a      	str	r2, [r7, #4]
 80034ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80034f0:	2300      	movs	r3, #0
 80034f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034f4:	f7ff ff3e 	bl	8003374 <__NVIC_GetPriorityGrouping>
 80034f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	68b9      	ldr	r1, [r7, #8]
 80034fe:	6978      	ldr	r0, [r7, #20]
 8003500:	f7ff ff8e 	bl	8003420 <NVIC_EncodePriority>
 8003504:	4602      	mov	r2, r0
 8003506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800350a:	4611      	mov	r1, r2
 800350c:	4618      	mov	r0, r3
 800350e:	f7ff ff5d 	bl	80033cc <__NVIC_SetPriority>
}
 8003512:	bf00      	nop
 8003514:	3718      	adds	r7, #24
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b082      	sub	sp, #8
 800351e:	af00      	add	r7, sp, #0
 8003520:	4603      	mov	r3, r0
 8003522:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003528:	4618      	mov	r0, r3
 800352a:	f7ff ff31 	bl	8003390 <__NVIC_EnableIRQ>
}
 800352e:	bf00      	nop
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b082      	sub	sp, #8
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f7ff ffa2 	bl	8003488 <SysTick_Config>
 8003544:	4603      	mov	r3, r0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
	...

08003550 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003558:	2300      	movs	r3, #0
 800355a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800355c:	f7ff fa10 	bl	8002980 <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d101      	bne.n	800356c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e099      	b.n	80036a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2202      	movs	r2, #2
 8003578:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f022 0201 	bic.w	r2, r2, #1
 800358a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800358c:	e00f      	b.n	80035ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800358e:	f7ff f9f7 	bl	8002980 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b05      	cmp	r3, #5
 800359a:	d908      	bls.n	80035ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2220      	movs	r2, #32
 80035a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2203      	movs	r2, #3
 80035a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e078      	b.n	80036a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0301 	and.w	r3, r3, #1
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1e8      	bne.n	800358e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	4b38      	ldr	r3, [pc, #224]	; (80036a8 <HAL_DMA_Init+0x158>)
 80035c8:	4013      	ands	r3, r2
 80035ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685a      	ldr	r2, [r3, #4]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003604:	2b04      	cmp	r3, #4
 8003606:	d107      	bne.n	8003618 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003610:	4313      	orrs	r3, r2
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	4313      	orrs	r3, r2
 8003616:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	f023 0307 	bic.w	r3, r3, #7
 800362e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003634:	697a      	ldr	r2, [r7, #20]
 8003636:	4313      	orrs	r3, r2
 8003638:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363e:	2b04      	cmp	r3, #4
 8003640:	d117      	bne.n	8003672 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	4313      	orrs	r3, r2
 800364a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00e      	beq.n	8003672 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 f8bd 	bl	80037d4 <DMA_CheckFifoParam>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d008      	beq.n	8003672 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2240      	movs	r2, #64	; 0x40
 8003664:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800366e:	2301      	movs	r3, #1
 8003670:	e016      	b.n	80036a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 f874 	bl	8003768 <DMA_CalcBaseAndBitshift>
 8003680:	4603      	mov	r3, r0
 8003682:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003688:	223f      	movs	r2, #63	; 0x3f
 800368a:	409a      	lsls	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3718      	adds	r7, #24
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	e010803f 	.word	0xe010803f

080036ac <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d101      	bne.n	80036be <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e050      	b.n	8003760 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d101      	bne.n	80036ce <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80036ca:	2302      	movs	r3, #2
 80036cc:	e048      	b.n	8003760 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f022 0201 	bic.w	r2, r2, #1
 80036dc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2200      	movs	r2, #0
 80036e4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2200      	movs	r2, #0
 80036ec:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2200      	movs	r2, #0
 80036f4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2200      	movs	r2, #0
 80036fc:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2200      	movs	r2, #0
 8003704:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2221      	movs	r2, #33	; 0x21
 800370c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f82a 	bl	8003768 <DMA_CalcBaseAndBitshift>
 8003714:	4603      	mov	r3, r0
 8003716:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800371c:	223f      	movs	r2, #63	; 0x3f
 800371e:	409a      	lsls	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3710      	adds	r7, #16
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	b2db      	uxtb	r3, r3
 8003776:	3b10      	subs	r3, #16
 8003778:	4a13      	ldr	r2, [pc, #76]	; (80037c8 <DMA_CalcBaseAndBitshift+0x60>)
 800377a:	fba2 2303 	umull	r2, r3, r2, r3
 800377e:	091b      	lsrs	r3, r3, #4
 8003780:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003782:	4a12      	ldr	r2, [pc, #72]	; (80037cc <DMA_CalcBaseAndBitshift+0x64>)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	4413      	add	r3, r2
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	461a      	mov	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2b03      	cmp	r3, #3
 8003794:	d908      	bls.n	80037a8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	461a      	mov	r2, r3
 800379c:	4b0c      	ldr	r3, [pc, #48]	; (80037d0 <DMA_CalcBaseAndBitshift+0x68>)
 800379e:	4013      	ands	r3, r2
 80037a0:	1d1a      	adds	r2, r3, #4
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	659a      	str	r2, [r3, #88]	; 0x58
 80037a6:	e006      	b.n	80037b6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	461a      	mov	r2, r3
 80037ae:	4b08      	ldr	r3, [pc, #32]	; (80037d0 <DMA_CalcBaseAndBitshift+0x68>)
 80037b0:	4013      	ands	r3, r2
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3714      	adds	r7, #20
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	aaaaaaab 	.word	0xaaaaaaab
 80037cc:	0800c628 	.word	0x0800c628
 80037d0:	fffffc00 	.word	0xfffffc00

080037d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037dc:	2300      	movs	r3, #0
 80037de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d11f      	bne.n	800382e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	2b03      	cmp	r3, #3
 80037f2:	d855      	bhi.n	80038a0 <DMA_CheckFifoParam+0xcc>
 80037f4:	a201      	add	r2, pc, #4	; (adr r2, 80037fc <DMA_CheckFifoParam+0x28>)
 80037f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037fa:	bf00      	nop
 80037fc:	0800380d 	.word	0x0800380d
 8003800:	0800381f 	.word	0x0800381f
 8003804:	0800380d 	.word	0x0800380d
 8003808:	080038a1 	.word	0x080038a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003810:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d045      	beq.n	80038a4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800381c:	e042      	b.n	80038a4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003822:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003826:	d13f      	bne.n	80038a8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800382c:	e03c      	b.n	80038a8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003836:	d121      	bne.n	800387c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	2b03      	cmp	r3, #3
 800383c:	d836      	bhi.n	80038ac <DMA_CheckFifoParam+0xd8>
 800383e:	a201      	add	r2, pc, #4	; (adr r2, 8003844 <DMA_CheckFifoParam+0x70>)
 8003840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003844:	08003855 	.word	0x08003855
 8003848:	0800385b 	.word	0x0800385b
 800384c:	08003855 	.word	0x08003855
 8003850:	0800386d 	.word	0x0800386d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	73fb      	strb	r3, [r7, #15]
      break;
 8003858:	e02f      	b.n	80038ba <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d024      	beq.n	80038b0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800386a:	e021      	b.n	80038b0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003870:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003874:	d11e      	bne.n	80038b4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800387a:	e01b      	b.n	80038b4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	2b02      	cmp	r3, #2
 8003880:	d902      	bls.n	8003888 <DMA_CheckFifoParam+0xb4>
 8003882:	2b03      	cmp	r3, #3
 8003884:	d003      	beq.n	800388e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003886:	e018      	b.n	80038ba <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	73fb      	strb	r3, [r7, #15]
      break;
 800388c:	e015      	b.n	80038ba <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003892:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00e      	beq.n	80038b8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	73fb      	strb	r3, [r7, #15]
      break;
 800389e:	e00b      	b.n	80038b8 <DMA_CheckFifoParam+0xe4>
      break;
 80038a0:	bf00      	nop
 80038a2:	e00a      	b.n	80038ba <DMA_CheckFifoParam+0xe6>
      break;
 80038a4:	bf00      	nop
 80038a6:	e008      	b.n	80038ba <DMA_CheckFifoParam+0xe6>
      break;
 80038a8:	bf00      	nop
 80038aa:	e006      	b.n	80038ba <DMA_CheckFifoParam+0xe6>
      break;
 80038ac:	bf00      	nop
 80038ae:	e004      	b.n	80038ba <DMA_CheckFifoParam+0xe6>
      break;
 80038b0:	bf00      	nop
 80038b2:	e002      	b.n	80038ba <DMA_CheckFifoParam+0xe6>
      break;   
 80038b4:	bf00      	nop
 80038b6:	e000      	b.n	80038ba <DMA_CheckFifoParam+0xe6>
      break;
 80038b8:	bf00      	nop
    }
  } 
  
  return status; 
 80038ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3714      	adds	r7, #20
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e049      	b.n	800396e <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d106      	bne.n	80038f4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f006 f944 	bl	8009b7c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2202      	movs	r2, #2
 80038f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685a      	ldr	r2, [r3, #4]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	430a      	orrs	r2, r1
 8003910:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003918:	f023 0107 	bic.w	r1, r3, #7
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	430a      	orrs	r2, r1
 8003926:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800392e:	4b12      	ldr	r3, [pc, #72]	; (8003978 <HAL_DMA2D_Init+0xb0>)
 8003930:	4013      	ands	r3, r2
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	68d1      	ldr	r1, [r2, #12]
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	6812      	ldr	r2, [r2, #0]
 800393a:	430b      	orrs	r3, r1
 800393c:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003944:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	051a      	lsls	r2, r3, #20
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	055b      	lsls	r3, r3, #21
 8003954:	431a      	orrs	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	430a      	orrs	r2, r1
 800395c:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	ffffc000 	.word	0xffffc000

0800397c <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b086      	sub	sp, #24
 8003980:	af02      	add	r7, sp, #8
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
 8003988:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003990:	2b01      	cmp	r3, #1
 8003992:	d101      	bne.n	8003998 <HAL_DMA2D_Start+0x1c>
 8003994:	2302      	movs	r3, #2
 8003996:	e018      	b.n	80039ca <HAL_DMA2D_Start+0x4e>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2202      	movs	r2, #2
 80039a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	9300      	str	r3, [sp, #0]
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	68b9      	ldr	r1, [r7, #8]
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	f000 f994 	bl	8003ce0 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f042 0201 	orr.w	r2, r2, #1
 80039c6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b086      	sub	sp, #24
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
 80039da:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80039dc:	2300      	movs	r3, #0
 80039de:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d056      	beq.n	8003a9c <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 80039ee:	f7fe ffc7 	bl	8002980 <HAL_GetTick>
 80039f2:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80039f4:	e04b      	b.n	8003a8e <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d023      	beq.n	8003a50 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f003 0320 	and.w	r3, r3, #32
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d005      	beq.n	8003a1e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a16:	f043 0202 	orr.w	r2, r3, #2
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d005      	beq.n	8003a34 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a2c:	f043 0201 	orr.w	r2, r3, #1
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2221      	movs	r2, #33	; 0x21
 8003a3a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2204      	movs	r2, #4
 8003a40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e0a5      	b.n	8003b9c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a56:	d01a      	beq.n	8003a8e <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8003a58:	f7fe ff92 	bl	8002980 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d302      	bcc.n	8003a6e <HAL_DMA2D_PollForTransfer+0x9c>
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10f      	bne.n	8003a8e <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a72:	f043 0220 	orr.w	r2, r3, #32
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2203      	movs	r2, #3
 8003a7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e086      	b.n	8003b9c <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d0ac      	beq.n	80039f6 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	69db      	ldr	r3, [r3, #28]
 8003aa2:	f003 0320 	and.w	r3, r3, #32
 8003aa6:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aae:	f003 0320 	and.w	r3, r3, #32
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d061      	beq.n	8003b82 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003abe:	f7fe ff5f 	bl	8002980 <HAL_GetTick>
 8003ac2:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003ac4:	e056      	b.n	8003b74 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d02e      	beq.n	8003b36 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f003 0308 	and.w	r3, r3, #8
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d005      	beq.n	8003aee <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae6:	f043 0204 	orr.w	r2, r3, #4
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f003 0320 	and.w	r3, r3, #32
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d005      	beq.n	8003b04 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003afc:	f043 0202 	orr.w	r2, r3, #2
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d005      	beq.n	8003b1a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b12:	f043 0201 	orr.w	r2, r3, #1
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2229      	movs	r2, #41	; 0x29
 8003b20:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2204      	movs	r2, #4
 8003b26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e032      	b.n	8003b9c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b3c:	d01a      	beq.n	8003b74 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8003b3e:	f7fe ff1f 	bl	8002980 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	683a      	ldr	r2, [r7, #0]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d302      	bcc.n	8003b54 <HAL_DMA2D_PollForTransfer+0x182>
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10f      	bne.n	8003b74 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b58:	f043 0220 	orr.w	r2, r3, #32
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2203      	movs	r2, #3
 8003b64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e013      	b.n	8003b9c <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f003 0310 	and.w	r3, r3, #16
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d0a1      	beq.n	8003ac6 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2212      	movs	r2, #18
 8003b88:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3718      	adds	r7, #24
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b087      	sub	sp, #28
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d101      	bne.n	8003bc4 <HAL_DMA2D_ConfigLayer+0x20>
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	e084      	b.n	8003cce <HAL_DMA2D_ConfigLayer+0x12a>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2202      	movs	r2, #2
 8003bd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003bd4:	683a      	ldr	r2, [r7, #0]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	005b      	lsls	r3, r3, #1
 8003bda:	4413      	add	r3, r2
 8003bdc:	00db      	lsls	r3, r3, #3
 8003bde:	3320      	adds	r3, #32
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	4413      	add	r3, r2
 8003be4:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	685a      	ldr	r2, [r3, #4]
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	041b      	lsls	r3, r3, #16
 8003bf0:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8003bf8:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8003c00:	4313      	orrs	r3, r2
 8003c02:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8003c04:	4b35      	ldr	r3, [pc, #212]	; (8003cdc <HAL_DMA2D_ConfigLayer+0x138>)
 8003c06:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	2b0a      	cmp	r3, #10
 8003c0e:	d003      	beq.n	8003c18 <HAL_DMA2D_ConfigLayer+0x74>
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	2b09      	cmp	r3, #9
 8003c16:	d107      	bne.n	8003c28 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003c20:	697a      	ldr	r2, [r7, #20]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	617b      	str	r3, [r7, #20]
 8003c26:	e005      	b.n	8003c34 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	061b      	lsls	r3, r3, #24
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d120      	bne.n	8003c7c <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	43db      	mvns	r3, r3
 8003c44:	ea02 0103 	and.w	r1, r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	697a      	ldr	r2, [r7, #20]
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	6812      	ldr	r2, [r2, #0]
 8003c5a:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	2b0a      	cmp	r3, #10
 8003c62:	d003      	beq.n	8003c6c <HAL_DMA2D_ConfigLayer+0xc8>
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	2b09      	cmp	r3, #9
 8003c6a:	d127      	bne.n	8003cbc <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	68da      	ldr	r2, [r3, #12]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003c78:	629a      	str	r2, [r3, #40]	; 0x28
 8003c7a:	e01f      	b.n	8003cbc <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	69da      	ldr	r2, [r3, #28]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	43db      	mvns	r3, r3
 8003c86:	ea02 0103 	and.w	r1, r2, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	697a      	ldr	r2, [r7, #20]
 8003c90:	430a      	orrs	r2, r1
 8003c92:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	6812      	ldr	r2, [r2, #0]
 8003c9c:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	2b0a      	cmp	r3, #10
 8003ca4:	d003      	beq.n	8003cae <HAL_DMA2D_ConfigLayer+0x10a>
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	2b09      	cmp	r3, #9
 8003cac:	d106      	bne.n	8003cbc <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	68da      	ldr	r2, [r3, #12]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003cba:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	371c      	adds	r7, #28
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	ff33000f 	.word	0xff33000f

08003ce0 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b08b      	sub	sp, #44	; 0x2c
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
 8003cec:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf4:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	041a      	lsls	r2, r3, #16
 8003cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	430a      	orrs	r2, r1
 8003d06:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d18:	d174      	bne.n	8003e04 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003d20:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003d28:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003d30:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d108      	bne.n	8003d52 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	431a      	orrs	r2, r3
 8003d46:	6a3b      	ldr	r3, [r7, #32]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d50:	e053      	b.n	8003dfa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d106      	bne.n	8003d68 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003d5a:	69ba      	ldr	r2, [r7, #24]
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	627b      	str	r3, [r7, #36]	; 0x24
 8003d66:	e048      	b.n	8003dfa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d111      	bne.n	8003d94 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	0cdb      	lsrs	r3, r3, #19
 8003d74:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	0a9b      	lsrs	r3, r3, #10
 8003d7a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	08db      	lsrs	r3, r3, #3
 8003d80:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	015a      	lsls	r2, r3, #5
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	02db      	lsls	r3, r3, #11
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	627b      	str	r3, [r7, #36]	; 0x24
 8003d92:	e032      	b.n	8003dfa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	2b03      	cmp	r3, #3
 8003d9a:	d117      	bne.n	8003dcc <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003d9c:	6a3b      	ldr	r3, [r7, #32]
 8003d9e:	0fdb      	lsrs	r3, r3, #31
 8003da0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	0cdb      	lsrs	r3, r3, #19
 8003da6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	0adb      	lsrs	r3, r3, #11
 8003dac:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	08db      	lsrs	r3, r3, #3
 8003db2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	015a      	lsls	r2, r3, #5
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	029b      	lsls	r3, r3, #10
 8003dbc:	431a      	orrs	r2, r3
 8003dbe:	6a3b      	ldr	r3, [r7, #32]
 8003dc0:	03db      	lsls	r3, r3, #15
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	697a      	ldr	r2, [r7, #20]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8003dca:	e016      	b.n	8003dfa <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003dcc:	6a3b      	ldr	r3, [r7, #32]
 8003dce:	0f1b      	lsrs	r3, r3, #28
 8003dd0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	0d1b      	lsrs	r3, r3, #20
 8003dd6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	0b1b      	lsrs	r3, r3, #12
 8003ddc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	091b      	lsrs	r3, r3, #4
 8003de2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	011a      	lsls	r2, r3, #4
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	021b      	lsls	r3, r3, #8
 8003dec:	431a      	orrs	r2, r3
 8003dee:	6a3b      	ldr	r3, [r7, #32]
 8003df0:	031b      	lsls	r3, r3, #12
 8003df2:	4313      	orrs	r3, r2
 8003df4:	697a      	ldr	r2, [r7, #20]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e00:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003e02:	e003      	b.n	8003e0c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68ba      	ldr	r2, [r7, #8]
 8003e0a:	60da      	str	r2, [r3, #12]
}
 8003e0c:	bf00      	nop
 8003e0e:	372c      	adds	r7, #44	; 0x2c
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]
 8003e24:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	019a      	lsls	r2, r3, #6
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	431a      	orrs	r2, r3
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	021b      	lsls	r3, r3, #8
 8003e32:	431a      	orrs	r2, r3
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	041b      	lsls	r3, r3, #16
 8003e38:	431a      	orrs	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8003e3e:	bf00      	nop
 8003e40:	3714      	adds	r7, #20
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr

08003e4a <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b086      	sub	sp, #24
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	60f8      	str	r0, [r7, #12]
 8003e52:	60b9      	str	r1, [r7, #8]
 8003e54:	607a      	str	r2, [r7, #4]
 8003e56:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e58:	f7fe fd92 	bl	8002980 <HAL_GetTick>
 8003e5c:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003e5e:	e009      	b.n	8003e74 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 8003e60:	f7fe fd8e 	bl	8002980 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e6e:	d901      	bls.n	8003e74 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e015      	b.n	8003ea0 <DSI_ShortWrite+0x56>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d0ee      	beq.n	8003e60 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	019a      	lsls	r2, r3, #6
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	431a      	orrs	r2, r3
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	021b      	lsls	r3, r3, #8
 8003e8e:	ea42 0103 	orr.w	r1, r2, r3
 8003e92:	6a3b      	ldr	r3, [r7, #32]
 8003e94:	041a      	lsls	r2, r3, #16
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3718      	adds	r7, #24
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b088      	sub	sp, #32
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d101      	bne.n	8003ebc <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e106      	b.n	80040ca <HAL_DSI_Init+0x222>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	7c5b      	ldrb	r3, [r3, #17]
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d102      	bne.n	8003ecc <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f005 fe78 	bl	8009bbc <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2203      	movs	r2, #3
 8003ed0:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	613b      	str	r3, [r7, #16]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003ee6:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003ef2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ef6:	613b      	str	r3, [r7, #16]
 8003ef8:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003efa:	f7fe fd41 	bl	8002980 <HAL_GetTick>
 8003efe:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003f00:	e009      	b.n	8003f16 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003f02:	f7fe fd3d 	bl	8002980 <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f10:	d901      	bls.n	8003f16 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e0d9      	b.n	80040ca <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003f1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d0ed      	beq.n	8003f02 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	4b68      	ldr	r3, [pc, #416]	; (80040d4 <HAL_DSI_Init+0x22c>)
 8003f34:	400b      	ands	r3, r1
 8003f36:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	009a      	lsls	r2, r3, #2
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	02db      	lsls	r3, r3, #11
 8003f4e:	431a      	orrs	r2, r3
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	041b      	lsls	r3, r3, #16
 8003f56:	431a      	orrs	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8003f62:	2300      	movs	r3, #0
 8003f64:	60fb      	str	r3, [r7, #12]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f042 0201 	orr.w	r2, r2, #1
 8003f76:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	60fb      	str	r3, [r7, #12]
 8003f88:	68fb      	ldr	r3, [r7, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f8a:	f7fe fcf9 	bl	8002980 <HAL_GetTick>
 8003f8e:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003f90:	e009      	b.n	8003fa6 <HAL_DSI_Init+0xfe>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003f92:	f7fe fcf5 	bl	8002980 <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003fa0:	d901      	bls.n	8003fa6 <HAL_DSI_Init+0xfe>
    {
      return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e091      	b.n	80040ca <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d0ed      	beq.n	8003f92 <HAL_DSI_Init+0xea>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f042 0206 	orr.w	r2, r2, #6
 8003fc6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f022 0203 	bic.w	r2, r2, #3
 8003fda:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	431a      	orrs	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f042 0201 	orr.w	r2, r2, #1
 8003ff4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f022 0203 	bic.w	r2, r2, #3
 8004008:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	68da      	ldr	r2, [r3, #12]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	430a      	orrs	r2, r1
 800401e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	689a      	ldr	r2, [r3, #8]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004030:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	6899      	ldr	r1, [r3, #8]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689a      	ldr	r2, [r3, #8]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	430a      	orrs	r2, r1
 8004042:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d002      	beq.n	8004052 <HAL_DSI_Init+0x1aa>
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	e000      	b.n	8004054 <HAL_DSI_Init+0x1ac>
 8004052:	2301      	movs	r3, #1
 8004054:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	4a1f      	ldr	r2, [pc, #124]	; (80040d8 <HAL_DSI_Init+0x230>)
 800405a:	fb02 f203 	mul.w	r2, r2, r3
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f003 0303 	and.w	r3, r3, #3
 8004066:	409a      	lsls	r2, r3
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8004070:	fb01 f303 	mul.w	r3, r1, r3
 8004074:	fbb2 f3f3 	udiv	r3, r2, r3
 8004078:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800408a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	430a      	orrs	r2, r1
 800409e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	619a      	str	r2, [r3, #24]

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2201      	movs	r2, #1
 80040c6:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3720      	adds	r7, #32
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	fffc8603 	.word	0xfffc8603
 80040d8:	003d0900 	.word	0x003d0900

080040dc <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e066      	b.n	80041bc <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2203      	movs	r2, #3
 80040f2:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 80040f4:	2300      	movs	r3, #0
 80040f6:	617b      	str	r3, [r7, #20]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 0208 	bic.w	r2, r2, #8
 8004108:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004114:	f003 0308 	and.w	r3, r3, #8
 8004118:	617b      	str	r3, [r7, #20]
 800411a:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 800411c:	2300      	movs	r3, #0
 800411e:	613b      	str	r3, [r7, #16]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	685a      	ldr	r2, [r3, #4]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f022 0201 	bic.w	r2, r2, #1
 800412e:	605a      	str	r2, [r3, #4]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	613b      	str	r3, [r7, #16]
 800413c:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f022 0206 	bic.w	r2, r2, #6
 800414e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 8004152:	2300      	movs	r3, #0
 8004154:	60fb      	str	r3, [r7, #12]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f022 0201 	bic.w	r2, r2, #1
 8004166:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	60fb      	str	r3, [r7, #12]
 8004178:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 800417a:	2300      	movs	r3, #0
 800417c:	60bb      	str	r3, [r7, #8]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800418e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800419a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800419e:	60bb      	str	r3, [r7, #8]
 80041a0:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f005 fd4e 	bl	8009c44 <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3718      	adds	r7, #24
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @ref DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	7c1b      	ldrb	r3, [r3, #16]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d101      	bne.n	80041da <HAL_DSI_ConfigErrorMonitor+0x16>
 80041d6:	2302      	movs	r3, #2
 80041d8:	e0aa      	b.n	8004330 <HAL_DSI_ConfigErrorMonitor+0x16c>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2201      	movs	r2, #1
 80041de:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	f003 0301 	and.w	r3, r3, #1
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00a      	beq.n	800421a <HAL_DSI_ConfigErrorMonitor+0x56>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004214:	430b      	orrs	r3, r1
 8004216:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	f003 0302 	and.w	r3, r3, #2
 8004220:	2b00      	cmp	r3, #0
 8004222:	d009      	beq.n	8004238 <HAL_DSI_ConfigErrorMonitor+0x74>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8004234:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	f003 0304 	and.w	r3, r3, #4
 800423e:	2b00      	cmp	r3, #0
 8004240:	d009      	beq.n	8004256 <HAL_DSI_ConfigErrorMonitor+0x92>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f042 0201 	orr.w	r2, r2, #1
 8004252:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	f003 0308 	and.w	r3, r3, #8
 800425c:	2b00      	cmp	r3, #0
 800425e:	d009      	beq.n	8004274 <HAL_DSI_ConfigErrorMonitor+0xb0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f042 0202 	orr.w	r2, r2, #2
 8004270:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	f003 0310 	and.w	r3, r3, #16
 800427a:	2b00      	cmp	r3, #0
 800427c:	d009      	beq.n	8004292 <HAL_DSI_ConfigErrorMonitor+0xce>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f042 020c 	orr.w	r2, r2, #12
 800428e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	f003 0320 	and.w	r3, r3, #32
 8004298:	2b00      	cmp	r3, #0
 800429a:	d009      	beq.n	80042b0 <HAL_DSI_ConfigErrorMonitor+0xec>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f042 0210 	orr.w	r2, r2, #16
 80042ac:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d009      	beq.n	80042ce <HAL_DSI_ConfigErrorMonitor+0x10a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f042 0220 	orr.w	r2, r2, #32
 80042ca:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d009      	beq.n	80042ec <HAL_DSI_ConfigErrorMonitor+0x128>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042e8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d009      	beq.n	800430a <HAL_DSI_ConfigErrorMonitor+0x146>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004306:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004310:	2b00      	cmp	r3, #0
 8004312:	d009      	beq.n	8004328 <HAL_DSI_ConfigErrorMonitor+0x164>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8004324:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	7c1b      	ldrb	r3, [r3, #16]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d101      	bne.n	8004352 <HAL_DSI_SetGenericVCID+0x16>
 800434e:	2302      	movs	r3, #2
 8004350:	e016      	b.n	8004380 <HAL_DSI_SetGenericVCID+0x44>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2201      	movs	r2, #1
 8004356:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f022 0203 	bic.w	r2, r2, #3
 8004366:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	683a      	ldr	r2, [r7, #0]
 8004374:	430a      	orrs	r2, r1
 8004376:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	7c1b      	ldrb	r3, [r3, #16]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d101      	bne.n	80043a2 <HAL_DSI_ConfigVideoMode+0x16>
 800439e:	2302      	movs	r3, #2
 80043a0:	e1ee      	b.n	8004780 <HAL_DSI_ConfigVideoMode+0x3f4>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2201      	movs	r2, #1
 80043a6:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f022 0201 	bic.w	r2, r2, #1
 80043b6:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f022 0201 	bic.w	r2, r2, #1
 80043c8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f022 0203 	bic.w	r2, r2, #3
 80043da:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	68da      	ldr	r2, [r3, #12]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	430a      	orrs	r2, r1
 80043ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	4b8b      	ldr	r3, [pc, #556]	; (8004628 <HAL_DSI_ConfigVideoMode+0x29c>)
 80043fa:	400b      	ands	r3, r1
 80043fc:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	691a      	ldr	r2, [r3, #16]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	430a      	orrs	r2, r1
 800440e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	4b84      	ldr	r3, [pc, #528]	; (800462c <HAL_DSI_ConfigVideoMode+0x2a0>)
 800441c:	400b      	ands	r3, r1
 800441e:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	695a      	ldr	r2, [r3, #20]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	430a      	orrs	r2, r1
 8004430:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	4b7b      	ldr	r3, [pc, #492]	; (800462c <HAL_DSI_ConfigVideoMode+0x2a0>)
 800443e:	400b      	ands	r3, r1
 8004440:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	699a      	ldr	r2, [r3, #24]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	430a      	orrs	r2, r1
 8004452:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68da      	ldr	r2, [r3, #12]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f022 0203 	bic.w	r2, r2, #3
 8004462:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68d9      	ldr	r1, [r3, #12]
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	430a      	orrs	r2, r1
 8004474:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	695a      	ldr	r2, [r3, #20]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f022 0207 	bic.w	r2, r2, #7
 8004484:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	6959      	ldr	r1, [r3, #20]
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	6a1b      	ldr	r3, [r3, #32]
 8004494:	431a      	orrs	r2, r3
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	69db      	ldr	r3, [r3, #28]
 800449a:	431a      	orrs	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	430a      	orrs	r2, r1
 80044a2:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	691a      	ldr	r2, [r3, #16]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f022 020f 	bic.w	r2, r2, #15
 80044b2:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	6919      	ldr	r1, [r3, #16]
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	685a      	ldr	r2, [r3, #4]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f022 020e 	bic.w	r2, r2, #14
 80044d6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	005a      	lsls	r2, r3, #1
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	430a      	orrs	r2, r1
 80044ee:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	2b03      	cmp	r3, #3
 80044f8:	d110      	bne.n	800451c <HAL_DSI_ConfigVideoMode+0x190>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	691a      	ldr	r2, [r3, #16]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004508:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	6919      	ldr	r1, [r3, #16]
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	689a      	ldr	r2, [r3, #8]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	430a      	orrs	r2, r1
 800451a:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	4b42      	ldr	r3, [pc, #264]	; (8004630 <HAL_DSI_ConfigVideoMode+0x2a4>)
 8004528:	400b      	ands	r3, r1
 800452a:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	430a      	orrs	r2, r1
 800453c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	4b39      	ldr	r3, [pc, #228]	; (8004630 <HAL_DSI_ConfigVideoMode+0x2a4>)
 800454a:	400b      	ands	r3, r1
 800454c:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	430a      	orrs	r2, r1
 800455e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	4b32      	ldr	r3, [pc, #200]	; (8004634 <HAL_DSI_ConfigVideoMode+0x2a8>)
 800456c:	400b      	ands	r3, r1
 800456e:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	430a      	orrs	r2, r1
 8004580:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	4b2a      	ldr	r3, [pc, #168]	; (8004638 <HAL_DSI_ConfigVideoMode+0x2ac>)
 800458e:	400b      	ands	r3, r1
 8004590:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	430a      	orrs	r2, r1
 80045a2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	4b22      	ldr	r3, [pc, #136]	; (8004638 <HAL_DSI_ConfigVideoMode+0x2ac>)
 80045b0:	400b      	ands	r3, r1
 80045b2:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	430a      	orrs	r2, r1
 80045c4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	4b19      	ldr	r3, [pc, #100]	; (8004638 <HAL_DSI_ConfigVideoMode+0x2ac>)
 80045d2:	400b      	ands	r3, r1
 80045d4:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	430a      	orrs	r2, r1
 80045e6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	4b0d      	ldr	r3, [pc, #52]	; (8004628 <HAL_DSI_ConfigVideoMode+0x29c>)
 80045f4:	400b      	ands	r3, r1
 80045f6:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	430a      	orrs	r2, r1
 8004608:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004618:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004624:	e00a      	b.n	800463c <HAL_DSI_ConfigVideoMode+0x2b0>
 8004626:	bf00      	nop
 8004628:	ffffc000 	.word	0xffffc000
 800462c:	ffffe000 	.word	0xffffe000
 8004630:	fffff000 	.word	0xfffff000
 8004634:	ffff8000 	.word	0xffff8000
 8004638:	fffffc00 	.word	0xfffffc00
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	430a      	orrs	r2, r1
 8004642:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	699a      	ldr	r2, [r3, #24]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8004652:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	6999      	ldr	r1, [r3, #24]
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800465e:	041a      	lsls	r2, r3, #16
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	430a      	orrs	r2, r1
 8004666:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	699a      	ldr	r2, [r3, #24]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004676:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	6999      	ldr	r1, [r3, #24]
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	430a      	orrs	r2, r1
 8004688:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004698:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	430a      	orrs	r2, r1
 80046aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046ba:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	430a      	orrs	r2, r1
 80046cc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046dc:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	430a      	orrs	r2, r1
 80046ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046fe:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	430a      	orrs	r2, r1
 8004710:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004720:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	430a      	orrs	r2, r1
 8004732:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004742:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	430a      	orrs	r2, r1
 8004754:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004764:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	430a      	orrs	r2, r1
 8004776:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800477e:	2300      	movs	r3, #0
}
 8004780:	4618      	mov	r0, r3
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	7c1b      	ldrb	r3, [r3, #16]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d101      	bne.n	80047a2 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 800479e:	2302      	movs	r3, #2
 80047a0:	e0c5      	b.n	800492e <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2201      	movs	r2, #1
 80047a6:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f042 0201 	orr.w	r2, r2, #1
 80047b6:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f022 0201 	bic.w	r2, r2, #1
 80047c8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f042 0201 	orr.w	r2, r2, #1
 80047dc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68da      	ldr	r2, [r3, #12]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f022 0203 	bic.w	r2, r2, #3
 80047ee:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68d9      	ldr	r1, [r3, #12]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	430a      	orrs	r2, r1
 8004800:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	695a      	ldr	r2, [r3, #20]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 0207 	bic.w	r2, r2, #7
 8004810:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	6959      	ldr	r1, [r3, #20]
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	69da      	ldr	r2, [r3, #28]
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	431a      	orrs	r2, r3
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	431a      	orrs	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	430a      	orrs	r2, r1
 800482e:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	691a      	ldr	r2, [r3, #16]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f022 020f 	bic.w	r2, r2, #15
 800483e:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	6919      	ldr	r1, [r3, #16]
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	685a      	ldr	r2, [r3, #4]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	430a      	orrs	r2, r1
 8004850:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 020e 	bic.w	r2, r2, #14
 8004862:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	005a      	lsls	r2, r3, #1
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	430a      	orrs	r2, r1
 800487a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	4b2c      	ldr	r3, [pc, #176]	; (800493c <HAL_DSI_ConfigAdaptedCommandMode+0x1b0>)
 800488a:	400b      	ands	r3, r1
 800488c:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	689a      	ldr	r2, [r3, #8]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	430a      	orrs	r2, r1
 800489e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80048b0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	68da      	ldr	r2, [r3, #12]
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	431a      	orrs	r2, r3
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ca:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80048d0:	431a      	orrs	r2, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	430a      	orrs	r2, r1
 80048d8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f022 0201 	bic.w	r2, r2, #1
 80048ea:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	430a      	orrs	r2, r1
 80048fc:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f042 0201 	orr.w	r2, r2, #1
 800490e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f042 0202 	orr.w	r2, r2, #2
 8004922:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	370c      	adds	r7, #12
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	ffff0000 	.word	0xffff0000

08004940 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	7c1b      	ldrb	r3, [r3, #16]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d101      	bne.n	8004956 <HAL_DSI_ConfigCommand+0x16>
 8004952:	2302      	movs	r3, #2
 8004954:	e049      	b.n	80049ea <HAL_DSI_ConfigCommand+0xaa>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2201      	movs	r2, #1
 800495a:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	4b24      	ldr	r3, [pc, #144]	; (80049f8 <HAL_DSI_ConfigCommand+0xb8>)
 8004968:	400b      	ands	r3, r1
 800496a:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800497a:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8004980:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 8004986:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 800498c:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 8004992:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 8004998:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 800499e:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 80049a4:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 80049aa:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 80049b0:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 80049b6:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	430a      	orrs	r2, r1
 80049be:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f022 0202 	bic.w	r2, r2, #2
 80049ce:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	430a      	orrs	r2, r1
 80049e0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	370c      	adds	r7, #12
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	fef080ff 	.word	0xfef080ff

080049fc <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @ref DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	7c1b      	ldrb	r3, [r3, #16]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d101      	bne.n	8004a12 <HAL_DSI_ConfigFlowControl+0x16>
 8004a0e:	2302      	movs	r3, #2
 8004a10:	e016      	b.n	8004a40 <HAL_DSI_ConfigFlowControl+0x44>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2201      	movs	r2, #1
 8004a16:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f022 021f 	bic.w	r2, r2, #31
 8004a26:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	683a      	ldr	r2, [r7, #0]
 8004a34:	430a      	orrs	r2, r1
 8004a36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b085      	sub	sp, #20
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	7c1b      	ldrb	r3, [r3, #16]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d101      	bne.n	8004a62 <HAL_DSI_ConfigPhyTimer+0x16>
 8004a5e:	2302      	movs	r3, #2
 8004a60:	e058      	b.n	8004b14 <HAL_DSI_ConfigPhyTimer+0xc8>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2201      	movs	r2, #1
 8004a66:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	4293      	cmp	r3, r2
 8004a72:	bf38      	it	cc
 8004a74:	4613      	movcc	r3, r2
 8004a76:	60fb      	str	r3, [r7, #12]
     This timings are configured by the HS2LP_TIME and LP2HS_TIME in the DSI Host Clock Lane Timer Configuration Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8004a88:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	041a      	lsls	r2, r3, #16
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	431a      	orrs	r2, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8004ab6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	691a      	ldr	r2, [r3, #16]
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	041b      	lsls	r3, r3, #16
 8004acc:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8004ad4:	431a      	orrs	r2, r3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	430a      	orrs	r2, r1
 8004adc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004af0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	695b      	ldr	r3, [r3, #20]
 8004b00:	021a      	lsls	r2, r3, #8
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	430a      	orrs	r2, r1
 8004b08:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3714      	adds	r7, #20
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	7c1b      	ldrb	r3, [r3, #16]
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d101      	bne.n	8004b36 <HAL_DSI_ConfigHostTimeouts+0x16>
 8004b32:	2302      	movs	r3, #2
 8004b34:	e0b4      	b.n	8004ca0 <HAL_DSI_ConfigHostTimeouts+0x180>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	689a      	ldr	r2, [r3, #8]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004b4a:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	6899      	ldr	r1, [r3, #8]
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	021a      	lsls	r2, r3, #8
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	b292      	uxth	r2, r2
 8004b6c:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	041a      	lsls	r2, r3, #16
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	4b47      	ldr	r3, [pc, #284]	; (8004cac <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004b8e:	400b      	ands	r3, r1
 8004b90:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	689a      	ldr	r2, [r3, #8]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	4b3f      	ldr	r3, [pc, #252]	; (8004cac <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004bb0:	400b      	ands	r3, r1
 8004bb2:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	68da      	ldr	r2, [r3, #12]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	430a      	orrs	r2, r1
 8004bc4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	4b36      	ldr	r3, [pc, #216]	; (8004cac <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004bd4:	400b      	ands	r3, r1
 8004bd6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	691a      	ldr	r2, [r3, #16]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	430a      	orrs	r2, r1
 8004bec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	4b2b      	ldr	r3, [pc, #172]	; (8004cac <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004bfe:	400b      	ands	r3, r1
 8004c00:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	695a      	ldr	r2, [r3, #20]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	430a      	orrs	r2, r1
 8004c16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004c2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	699a      	ldr	r2, [r3, #24]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	4b16      	ldr	r3, [pc, #88]	; (8004cac <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004c52:	400b      	ands	r3, r1
 8004c54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	69da      	ldr	r2, [r3, #28]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	4b0c      	ldr	r3, [pc, #48]	; (8004cac <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004c7c:	400b      	ands	r3, r1
 8004c7e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	6a1a      	ldr	r2, [r3, #32]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	430a      	orrs	r2, r1
 8004c94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr
 8004cac:	ffff0000 	.word	0xffff0000

08004cb0 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	7c1b      	ldrb	r3, [r3, #16]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d101      	bne.n	8004cc4 <HAL_DSI_Start+0x14>
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	e02b      	b.n	8004d1c <HAL_DSI_Start+0x6c>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8004cca:	2300      	movs	r3, #0
 8004ccc:	60fb      	str	r3, [r7, #12]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	685a      	ldr	r2, [r3, #4]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f042 0201 	orr.w	r2, r2, #1
 8004cdc:	605a      	str	r2, [r3, #4]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f003 0301 	and.w	r3, r3, #1
 8004ce8:	60fb      	str	r3, [r7, #12]
 8004cea:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8004cec:	2300      	movs	r3, #0
 8004cee:	60bb      	str	r3, [r7, #8]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f042 0208 	orr.w	r2, r2, #8
 8004d00:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004d0c:	f003 0308 	and.w	r3, r3, #8
 8004d10:	60bb      	str	r3, [r7, #8]
 8004d12:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3714      	adds	r7, #20
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b088      	sub	sp, #32
 8004d2c:	af02      	add	r7, sp, #8
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	607a      	str	r2, [r7, #4]
 8004d34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	7c1b      	ldrb	r3, [r3, #16]
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d101      	bne.n	8004d42 <HAL_DSI_ShortWrite+0x1a>
 8004d3e:	2302      	movs	r3, #2
 8004d40:	e010      	b.n	8004d64 <HAL_DSI_ShortWrite+0x3c>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2201      	movs	r2, #1
 8004d46:	741a      	strb	r2, [r3, #16]

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8004d48:	6a3b      	ldr	r3, [r7, #32]
 8004d4a:	9300      	str	r3, [sp, #0]
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	68b9      	ldr	r1, [r7, #8]
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	f7ff f879 	bl	8003e4a <DSI_ShortWrite>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	741a      	strb	r2, [r3, #16]

  return status;
 8004d62:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3718      	adds	r7, #24
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b08c      	sub	sp, #48	; 0x30
 8004d70:	af02      	add	r7, sp, #8
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	607a      	str	r2, [r7, #4]
 8004d78:	603b      	str	r3, [r7, #0]
  uint32_t uicounter, nbBytes, count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8004d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d7c:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	7c1b      	ldrb	r3, [r3, #16]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d101      	bne.n	8004d8a <HAL_DSI_LongWrite+0x1e>
 8004d86:	2302      	movs	r3, #2
 8004d88:	e084      	b.n	8004e94 <HAL_DSI_LongWrite+0x128>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d90:	f7fd fdf6 	bl	8002980 <HAL_GetTick>
 8004d94:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004d96:	e00c      	b.n	8004db2 <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004d98:	f7fd fdf2 	bl	8002980 <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004da6:	d904      	bls.n	8004db2 <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e070      	b.n	8004e94 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004db8:	f003 0301 	and.w	r3, r3, #1
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d0eb      	beq.n	8004d98 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8004dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc2:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	2b03      	cmp	r3, #3
 8004dc8:	bf28      	it	cs
 8004dca:	2303      	movcs	r3, #3
 8004dcc:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8004dce:	2300      	movs	r3, #0
 8004dd0:	623b      	str	r3, [r7, #32]
 8004dd2:	e00f      	b.n	8004df4 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8004dd4:	69ba      	ldr	r2, [r7, #24]
 8004dd6:	6a3b      	ldr	r3, [r7, #32]
 8004dd8:	4413      	add	r3, r2
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	461a      	mov	r2, r3
 8004dde:	6a3b      	ldr	r3, [r7, #32]
 8004de0:	3301      	adds	r3, #1
 8004de2:	00db      	lsls	r3, r3, #3
 8004de4:	fa02 f303 	lsl.w	r3, r2, r3
 8004de8:	69fa      	ldr	r2, [r7, #28]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8004dee:	6a3b      	ldr	r3, [r7, #32]
 8004df0:	3301      	adds	r3, #1
 8004df2:	623b      	str	r3, [r7, #32]
 8004df4:	6a3a      	ldr	r2, [r7, #32]
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d3eb      	bcc.n	8004dd4 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	69fa      	ldr	r2, [r7, #28]
 8004e02:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8004e04:	683a      	ldr	r2, [r7, #0]
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8004e0c:	69ba      	ldr	r2, [r7, #24]
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	4413      	add	r3, r2
 8004e12:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8004e14:	e028      	b.n	8004e68 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8004e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e18:	2b04      	cmp	r3, #4
 8004e1a:	bf28      	it	cs
 8004e1c:	2304      	movcs	r3, #4
 8004e1e:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8004e20:	2300      	movs	r3, #0
 8004e22:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8004e24:	2300      	movs	r3, #0
 8004e26:	623b      	str	r3, [r7, #32]
 8004e28:	e00e      	b.n	8004e48 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8004e2a:	69ba      	ldr	r2, [r7, #24]
 8004e2c:	6a3b      	ldr	r3, [r7, #32]
 8004e2e:	4413      	add	r3, r2
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	461a      	mov	r2, r3
 8004e34:	6a3b      	ldr	r3, [r7, #32]
 8004e36:	00db      	lsls	r3, r3, #3
 8004e38:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3c:	69fa      	ldr	r2, [r7, #28]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8004e42:	6a3b      	ldr	r3, [r7, #32]
 8004e44:	3301      	adds	r3, #1
 8004e46:	623b      	str	r3, [r7, #32]
 8004e48:	6a3a      	ldr	r2, [r7, #32]
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d3ec      	bcc.n	8004e2a <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	69fa      	ldr	r2, [r7, #28]
 8004e56:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8004e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8004e60:	69ba      	ldr	r2, [r7, #24]
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	4413      	add	r3, r2
 8004e66:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8004e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1d3      	bne.n	8004e16 <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004e76:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	9300      	str	r3, [sp, #0]
 8004e82:	4613      	mov	r3, r2
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	68b9      	ldr	r1, [r7, #8]
 8004e88:	f7fe ffc6 	bl	8003e18 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004e92:	2300      	movs	r3, #0
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3728      	adds	r7, #40	; 0x28
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	7c1b      	ldrb	r3, [r3, #16]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d101      	bne.n	8004eb2 <HAL_DSI_SetLowPowerRXFilter+0x16>
 8004eae:	2302      	movs	r3, #2
 8004eb0:	e01b      	b.n	8004eea <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8004ec8:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	065a      	lsls	r2, r3, #25
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	430a      	orrs	r2, r1
 8004ede:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	370c      	adds	r7, #12
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
	...

08004ef8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b089      	sub	sp, #36	; 0x24
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004f02:	2300      	movs	r3, #0
 8004f04:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004f06:	2300      	movs	r3, #0
 8004f08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004f12:	2300      	movs	r3, #0
 8004f14:	61fb      	str	r3, [r7, #28]
 8004f16:	e175      	b.n	8005204 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004f18:	2201      	movs	r2, #1
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	697a      	ldr	r2, [r7, #20]
 8004f28:	4013      	ands	r3, r2
 8004f2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004f2c:	693a      	ldr	r2, [r7, #16]
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	f040 8164 	bne.w	80051fe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d003      	beq.n	8004f46 <HAL_GPIO_Init+0x4e>
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	2b12      	cmp	r3, #18
 8004f44:	d123      	bne.n	8004f8e <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	08da      	lsrs	r2, r3, #3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	3208      	adds	r2, #8
 8004f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	f003 0307 	and.w	r3, r3, #7
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	220f      	movs	r2, #15
 8004f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f62:	43db      	mvns	r3, r3
 8004f64:	69ba      	ldr	r2, [r7, #24]
 8004f66:	4013      	ands	r3, r2
 8004f68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	691a      	ldr	r2, [r3, #16]
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	f003 0307 	and.w	r3, r3, #7
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7a:	69ba      	ldr	r2, [r7, #24]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	08da      	lsrs	r2, r3, #3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	3208      	adds	r2, #8
 8004f88:	69b9      	ldr	r1, [r7, #24]
 8004f8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	005b      	lsls	r3, r3, #1
 8004f98:	2203      	movs	r2, #3
 8004f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9e:	43db      	mvns	r3, r3
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f003 0203 	and.w	r2, r3, #3
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	005b      	lsls	r3, r3, #1
 8004fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb6:	69ba      	ldr	r2, [r7, #24]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	69ba      	ldr	r2, [r7, #24]
 8004fc0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d00b      	beq.n	8004fe2 <HAL_GPIO_Init+0xea>
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d007      	beq.n	8004fe2 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004fd6:	2b11      	cmp	r3, #17
 8004fd8:	d003      	beq.n	8004fe2 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	2b12      	cmp	r3, #18
 8004fe0:	d130      	bne.n	8005044 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	005b      	lsls	r3, r3, #1
 8004fec:	2203      	movs	r2, #3
 8004fee:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff2:	43db      	mvns	r3, r3
 8004ff4:	69ba      	ldr	r2, [r7, #24]
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	68da      	ldr	r2, [r3, #12]
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	005b      	lsls	r3, r3, #1
 8005002:	fa02 f303 	lsl.w	r3, r2, r3
 8005006:	69ba      	ldr	r2, [r7, #24]
 8005008:	4313      	orrs	r3, r2
 800500a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	69ba      	ldr	r2, [r7, #24]
 8005010:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005018:	2201      	movs	r2, #1
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	fa02 f303 	lsl.w	r3, r2, r3
 8005020:	43db      	mvns	r3, r3
 8005022:	69ba      	ldr	r2, [r7, #24]
 8005024:	4013      	ands	r3, r2
 8005026:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	091b      	lsrs	r3, r3, #4
 800502e:	f003 0201 	and.w	r2, r3, #1
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	fa02 f303 	lsl.w	r3, r2, r3
 8005038:	69ba      	ldr	r2, [r7, #24]
 800503a:	4313      	orrs	r3, r2
 800503c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	69ba      	ldr	r2, [r7, #24]
 8005042:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	005b      	lsls	r3, r3, #1
 800504e:	2203      	movs	r2, #3
 8005050:	fa02 f303 	lsl.w	r3, r2, r3
 8005054:	43db      	mvns	r3, r3
 8005056:	69ba      	ldr	r2, [r7, #24]
 8005058:	4013      	ands	r3, r2
 800505a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	689a      	ldr	r2, [r3, #8]
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	005b      	lsls	r3, r3, #1
 8005064:	fa02 f303 	lsl.w	r3, r2, r3
 8005068:	69ba      	ldr	r2, [r7, #24]
 800506a:	4313      	orrs	r3, r2
 800506c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800507c:	2b00      	cmp	r3, #0
 800507e:	f000 80be 	beq.w	80051fe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005082:	4b65      	ldr	r3, [pc, #404]	; (8005218 <HAL_GPIO_Init+0x320>)
 8005084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005086:	4a64      	ldr	r2, [pc, #400]	; (8005218 <HAL_GPIO_Init+0x320>)
 8005088:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800508c:	6453      	str	r3, [r2, #68]	; 0x44
 800508e:	4b62      	ldr	r3, [pc, #392]	; (8005218 <HAL_GPIO_Init+0x320>)
 8005090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005092:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005096:	60fb      	str	r3, [r7, #12]
 8005098:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800509a:	4a60      	ldr	r2, [pc, #384]	; (800521c <HAL_GPIO_Init+0x324>)
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	089b      	lsrs	r3, r3, #2
 80050a0:	3302      	adds	r3, #2
 80050a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	f003 0303 	and.w	r3, r3, #3
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	220f      	movs	r2, #15
 80050b2:	fa02 f303 	lsl.w	r3, r2, r3
 80050b6:	43db      	mvns	r3, r3
 80050b8:	69ba      	ldr	r2, [r7, #24]
 80050ba:	4013      	ands	r3, r2
 80050bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a57      	ldr	r2, [pc, #348]	; (8005220 <HAL_GPIO_Init+0x328>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d037      	beq.n	8005136 <HAL_GPIO_Init+0x23e>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a56      	ldr	r2, [pc, #344]	; (8005224 <HAL_GPIO_Init+0x32c>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d031      	beq.n	8005132 <HAL_GPIO_Init+0x23a>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a55      	ldr	r2, [pc, #340]	; (8005228 <HAL_GPIO_Init+0x330>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d02b      	beq.n	800512e <HAL_GPIO_Init+0x236>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a54      	ldr	r2, [pc, #336]	; (800522c <HAL_GPIO_Init+0x334>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d025      	beq.n	800512a <HAL_GPIO_Init+0x232>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a53      	ldr	r2, [pc, #332]	; (8005230 <HAL_GPIO_Init+0x338>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d01f      	beq.n	8005126 <HAL_GPIO_Init+0x22e>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a52      	ldr	r2, [pc, #328]	; (8005234 <HAL_GPIO_Init+0x33c>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d019      	beq.n	8005122 <HAL_GPIO_Init+0x22a>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a51      	ldr	r2, [pc, #324]	; (8005238 <HAL_GPIO_Init+0x340>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d013      	beq.n	800511e <HAL_GPIO_Init+0x226>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a50      	ldr	r2, [pc, #320]	; (800523c <HAL_GPIO_Init+0x344>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d00d      	beq.n	800511a <HAL_GPIO_Init+0x222>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a4f      	ldr	r2, [pc, #316]	; (8005240 <HAL_GPIO_Init+0x348>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d007      	beq.n	8005116 <HAL_GPIO_Init+0x21e>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a4e      	ldr	r2, [pc, #312]	; (8005244 <HAL_GPIO_Init+0x34c>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d101      	bne.n	8005112 <HAL_GPIO_Init+0x21a>
 800510e:	2309      	movs	r3, #9
 8005110:	e012      	b.n	8005138 <HAL_GPIO_Init+0x240>
 8005112:	230a      	movs	r3, #10
 8005114:	e010      	b.n	8005138 <HAL_GPIO_Init+0x240>
 8005116:	2308      	movs	r3, #8
 8005118:	e00e      	b.n	8005138 <HAL_GPIO_Init+0x240>
 800511a:	2307      	movs	r3, #7
 800511c:	e00c      	b.n	8005138 <HAL_GPIO_Init+0x240>
 800511e:	2306      	movs	r3, #6
 8005120:	e00a      	b.n	8005138 <HAL_GPIO_Init+0x240>
 8005122:	2305      	movs	r3, #5
 8005124:	e008      	b.n	8005138 <HAL_GPIO_Init+0x240>
 8005126:	2304      	movs	r3, #4
 8005128:	e006      	b.n	8005138 <HAL_GPIO_Init+0x240>
 800512a:	2303      	movs	r3, #3
 800512c:	e004      	b.n	8005138 <HAL_GPIO_Init+0x240>
 800512e:	2302      	movs	r3, #2
 8005130:	e002      	b.n	8005138 <HAL_GPIO_Init+0x240>
 8005132:	2301      	movs	r3, #1
 8005134:	e000      	b.n	8005138 <HAL_GPIO_Init+0x240>
 8005136:	2300      	movs	r3, #0
 8005138:	69fa      	ldr	r2, [r7, #28]
 800513a:	f002 0203 	and.w	r2, r2, #3
 800513e:	0092      	lsls	r2, r2, #2
 8005140:	4093      	lsls	r3, r2
 8005142:	69ba      	ldr	r2, [r7, #24]
 8005144:	4313      	orrs	r3, r2
 8005146:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005148:	4934      	ldr	r1, [pc, #208]	; (800521c <HAL_GPIO_Init+0x324>)
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	089b      	lsrs	r3, r3, #2
 800514e:	3302      	adds	r3, #2
 8005150:	69ba      	ldr	r2, [r7, #24]
 8005152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005156:	4b3c      	ldr	r3, [pc, #240]	; (8005248 <HAL_GPIO_Init+0x350>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	43db      	mvns	r3, r3
 8005160:	69ba      	ldr	r2, [r7, #24]
 8005162:	4013      	ands	r3, r2
 8005164:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d003      	beq.n	800517a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005172:	69ba      	ldr	r2, [r7, #24]
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	4313      	orrs	r3, r2
 8005178:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800517a:	4a33      	ldr	r2, [pc, #204]	; (8005248 <HAL_GPIO_Init+0x350>)
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005180:	4b31      	ldr	r3, [pc, #196]	; (8005248 <HAL_GPIO_Init+0x350>)
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	43db      	mvns	r3, r3
 800518a:	69ba      	ldr	r2, [r7, #24]
 800518c:	4013      	ands	r3, r2
 800518e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d003      	beq.n	80051a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800519c:	69ba      	ldr	r2, [r7, #24]
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80051a4:	4a28      	ldr	r2, [pc, #160]	; (8005248 <HAL_GPIO_Init+0x350>)
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80051aa:	4b27      	ldr	r3, [pc, #156]	; (8005248 <HAL_GPIO_Init+0x350>)
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	43db      	mvns	r3, r3
 80051b4:	69ba      	ldr	r2, [r7, #24]
 80051b6:	4013      	ands	r3, r2
 80051b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d003      	beq.n	80051ce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80051c6:	69ba      	ldr	r2, [r7, #24]
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80051ce:	4a1e      	ldr	r2, [pc, #120]	; (8005248 <HAL_GPIO_Init+0x350>)
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80051d4:	4b1c      	ldr	r3, [pc, #112]	; (8005248 <HAL_GPIO_Init+0x350>)
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	43db      	mvns	r3, r3
 80051de:	69ba      	ldr	r2, [r7, #24]
 80051e0:	4013      	ands	r3, r2
 80051e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d003      	beq.n	80051f8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80051f0:	69ba      	ldr	r2, [r7, #24]
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80051f8:	4a13      	ldr	r2, [pc, #76]	; (8005248 <HAL_GPIO_Init+0x350>)
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	3301      	adds	r3, #1
 8005202:	61fb      	str	r3, [r7, #28]
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	2b0f      	cmp	r3, #15
 8005208:	f67f ae86 	bls.w	8004f18 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800520c:	bf00      	nop
 800520e:	3724      	adds	r7, #36	; 0x24
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr
 8005218:	40023800 	.word	0x40023800
 800521c:	40013800 	.word	0x40013800
 8005220:	40020000 	.word	0x40020000
 8005224:	40020400 	.word	0x40020400
 8005228:	40020800 	.word	0x40020800
 800522c:	40020c00 	.word	0x40020c00
 8005230:	40021000 	.word	0x40021000
 8005234:	40021400 	.word	0x40021400
 8005238:	40021800 	.word	0x40021800
 800523c:	40021c00 	.word	0x40021c00
 8005240:	40022000 	.word	0x40022000
 8005244:	40022400 	.word	0x40022400
 8005248:	40013c00 	.word	0x40013c00

0800524c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800524c:	b480      	push	{r7}
 800524e:	b087      	sub	sp, #28
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8005256:	2300      	movs	r3, #0
 8005258:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800525a:	2300      	movs	r3, #0
 800525c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800525e:	2300      	movs	r3, #0
 8005260:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005262:	2300      	movs	r3, #0
 8005264:	617b      	str	r3, [r7, #20]
 8005266:	e0d9      	b.n	800541c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005268:	2201      	movs	r2, #1
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	fa02 f303 	lsl.w	r3, r2, r3
 8005270:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005272:	683a      	ldr	r2, [r7, #0]
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	4013      	ands	r3, r2
 8005278:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	429a      	cmp	r2, r3
 8005280:	f040 80c9 	bne.w	8005416 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8005284:	4a6a      	ldr	r2, [pc, #424]	; (8005430 <HAL_GPIO_DeInit+0x1e4>)
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	089b      	lsrs	r3, r3, #2
 800528a:	3302      	adds	r3, #2
 800528c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005290:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	f003 0303 	and.w	r3, r3, #3
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	220f      	movs	r2, #15
 800529c:	fa02 f303 	lsl.w	r3, r2, r3
 80052a0:	68ba      	ldr	r2, [r7, #8]
 80052a2:	4013      	ands	r3, r2
 80052a4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a62      	ldr	r2, [pc, #392]	; (8005434 <HAL_GPIO_DeInit+0x1e8>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d037      	beq.n	800531e <HAL_GPIO_DeInit+0xd2>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a61      	ldr	r2, [pc, #388]	; (8005438 <HAL_GPIO_DeInit+0x1ec>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d031      	beq.n	800531a <HAL_GPIO_DeInit+0xce>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a60      	ldr	r2, [pc, #384]	; (800543c <HAL_GPIO_DeInit+0x1f0>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d02b      	beq.n	8005316 <HAL_GPIO_DeInit+0xca>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a5f      	ldr	r2, [pc, #380]	; (8005440 <HAL_GPIO_DeInit+0x1f4>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d025      	beq.n	8005312 <HAL_GPIO_DeInit+0xc6>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a5e      	ldr	r2, [pc, #376]	; (8005444 <HAL_GPIO_DeInit+0x1f8>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d01f      	beq.n	800530e <HAL_GPIO_DeInit+0xc2>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a5d      	ldr	r2, [pc, #372]	; (8005448 <HAL_GPIO_DeInit+0x1fc>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d019      	beq.n	800530a <HAL_GPIO_DeInit+0xbe>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a5c      	ldr	r2, [pc, #368]	; (800544c <HAL_GPIO_DeInit+0x200>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d013      	beq.n	8005306 <HAL_GPIO_DeInit+0xba>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a5b      	ldr	r2, [pc, #364]	; (8005450 <HAL_GPIO_DeInit+0x204>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d00d      	beq.n	8005302 <HAL_GPIO_DeInit+0xb6>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a5a      	ldr	r2, [pc, #360]	; (8005454 <HAL_GPIO_DeInit+0x208>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d007      	beq.n	80052fe <HAL_GPIO_DeInit+0xb2>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a59      	ldr	r2, [pc, #356]	; (8005458 <HAL_GPIO_DeInit+0x20c>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d101      	bne.n	80052fa <HAL_GPIO_DeInit+0xae>
 80052f6:	2309      	movs	r3, #9
 80052f8:	e012      	b.n	8005320 <HAL_GPIO_DeInit+0xd4>
 80052fa:	230a      	movs	r3, #10
 80052fc:	e010      	b.n	8005320 <HAL_GPIO_DeInit+0xd4>
 80052fe:	2308      	movs	r3, #8
 8005300:	e00e      	b.n	8005320 <HAL_GPIO_DeInit+0xd4>
 8005302:	2307      	movs	r3, #7
 8005304:	e00c      	b.n	8005320 <HAL_GPIO_DeInit+0xd4>
 8005306:	2306      	movs	r3, #6
 8005308:	e00a      	b.n	8005320 <HAL_GPIO_DeInit+0xd4>
 800530a:	2305      	movs	r3, #5
 800530c:	e008      	b.n	8005320 <HAL_GPIO_DeInit+0xd4>
 800530e:	2304      	movs	r3, #4
 8005310:	e006      	b.n	8005320 <HAL_GPIO_DeInit+0xd4>
 8005312:	2303      	movs	r3, #3
 8005314:	e004      	b.n	8005320 <HAL_GPIO_DeInit+0xd4>
 8005316:	2302      	movs	r3, #2
 8005318:	e002      	b.n	8005320 <HAL_GPIO_DeInit+0xd4>
 800531a:	2301      	movs	r3, #1
 800531c:	e000      	b.n	8005320 <HAL_GPIO_DeInit+0xd4>
 800531e:	2300      	movs	r3, #0
 8005320:	697a      	ldr	r2, [r7, #20]
 8005322:	f002 0203 	and.w	r2, r2, #3
 8005326:	0092      	lsls	r2, r2, #2
 8005328:	4093      	lsls	r3, r2
 800532a:	68ba      	ldr	r2, [r7, #8]
 800532c:	429a      	cmp	r2, r3
 800532e:	d132      	bne.n	8005396 <HAL_GPIO_DeInit+0x14a>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	f003 0303 	and.w	r3, r3, #3
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	220f      	movs	r2, #15
 800533a:	fa02 f303 	lsl.w	r3, r2, r3
 800533e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8005340:	4a3b      	ldr	r2, [pc, #236]	; (8005430 <HAL_GPIO_DeInit+0x1e4>)
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	089b      	lsrs	r3, r3, #2
 8005346:	3302      	adds	r3, #2
 8005348:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	43da      	mvns	r2, r3
 8005350:	4837      	ldr	r0, [pc, #220]	; (8005430 <HAL_GPIO_DeInit+0x1e4>)
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	089b      	lsrs	r3, r3, #2
 8005356:	400a      	ands	r2, r1
 8005358:	3302      	adds	r3, #2
 800535a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800535e:	4b3f      	ldr	r3, [pc, #252]	; (800545c <HAL_GPIO_DeInit+0x210>)
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	43db      	mvns	r3, r3
 8005366:	493d      	ldr	r1, [pc, #244]	; (800545c <HAL_GPIO_DeInit+0x210>)
 8005368:	4013      	ands	r3, r2
 800536a:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800536c:	4b3b      	ldr	r3, [pc, #236]	; (800545c <HAL_GPIO_DeInit+0x210>)
 800536e:	685a      	ldr	r2, [r3, #4]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	43db      	mvns	r3, r3
 8005374:	4939      	ldr	r1, [pc, #228]	; (800545c <HAL_GPIO_DeInit+0x210>)
 8005376:	4013      	ands	r3, r2
 8005378:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800537a:	4b38      	ldr	r3, [pc, #224]	; (800545c <HAL_GPIO_DeInit+0x210>)
 800537c:	689a      	ldr	r2, [r3, #8]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	43db      	mvns	r3, r3
 8005382:	4936      	ldr	r1, [pc, #216]	; (800545c <HAL_GPIO_DeInit+0x210>)
 8005384:	4013      	ands	r3, r2
 8005386:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005388:	4b34      	ldr	r3, [pc, #208]	; (800545c <HAL_GPIO_DeInit+0x210>)
 800538a:	68da      	ldr	r2, [r3, #12]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	43db      	mvns	r3, r3
 8005390:	4932      	ldr	r1, [pc, #200]	; (800545c <HAL_GPIO_DeInit+0x210>)
 8005392:	4013      	ands	r3, r2
 8005394:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	005b      	lsls	r3, r3, #1
 800539e:	2103      	movs	r1, #3
 80053a0:	fa01 f303 	lsl.w	r3, r1, r3
 80053a4:	43db      	mvns	r3, r3
 80053a6:	401a      	ands	r2, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	08da      	lsrs	r2, r3, #3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	3208      	adds	r2, #8
 80053b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	f003 0307 	and.w	r3, r3, #7
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	220f      	movs	r2, #15
 80053c2:	fa02 f303 	lsl.w	r3, r2, r3
 80053c6:	43db      	mvns	r3, r3
 80053c8:	697a      	ldr	r2, [r7, #20]
 80053ca:	08d2      	lsrs	r2, r2, #3
 80053cc:	4019      	ands	r1, r3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	3208      	adds	r2, #8
 80053d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	689a      	ldr	r2, [r3, #8]
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	005b      	lsls	r3, r3, #1
 80053de:	2103      	movs	r1, #3
 80053e0:	fa01 f303 	lsl.w	r3, r1, r3
 80053e4:	43db      	mvns	r3, r3
 80053e6:	401a      	ands	r2, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685a      	ldr	r2, [r3, #4]
 80053f0:	2101      	movs	r1, #1
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	fa01 f303 	lsl.w	r3, r1, r3
 80053f8:	43db      	mvns	r3, r3
 80053fa:	401a      	ands	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	68da      	ldr	r2, [r3, #12]
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	005b      	lsls	r3, r3, #1
 8005408:	2103      	movs	r1, #3
 800540a:	fa01 f303 	lsl.w	r3, r1, r3
 800540e:	43db      	mvns	r3, r3
 8005410:	401a      	ands	r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	60da      	str	r2, [r3, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	3301      	adds	r3, #1
 800541a:	617b      	str	r3, [r7, #20]
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	2b0f      	cmp	r3, #15
 8005420:	f67f af22 	bls.w	8005268 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005424:	bf00      	nop
 8005426:	371c      	adds	r7, #28
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr
 8005430:	40013800 	.word	0x40013800
 8005434:	40020000 	.word	0x40020000
 8005438:	40020400 	.word	0x40020400
 800543c:	40020800 	.word	0x40020800
 8005440:	40020c00 	.word	0x40020c00
 8005444:	40021000 	.word	0x40021000
 8005448:	40021400 	.word	0x40021400
 800544c:	40021800 	.word	0x40021800
 8005450:	40021c00 	.word	0x40021c00
 8005454:	40022000 	.word	0x40022000
 8005458:	40022400 	.word	0x40022400
 800545c:	40013c00 	.word	0x40013c00

08005460 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	460b      	mov	r3, r1
 800546a:	807b      	strh	r3, [r7, #2]
 800546c:	4613      	mov	r3, r2
 800546e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005470:	787b      	ldrb	r3, [r7, #1]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d003      	beq.n	800547e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005476:	887a      	ldrh	r2, [r7, #2]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800547c:	e003      	b.n	8005486 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800547e:	887b      	ldrh	r3, [r7, #2]
 8005480:	041a      	lsls	r2, r3, #16
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	619a      	str	r2, [r3, #24]
}
 8005486:	bf00      	nop
 8005488:	370c      	adds	r7, #12
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr
	...

08005494 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
 800549a:	4603      	mov	r3, r0
 800549c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800549e:	4b08      	ldr	r3, [pc, #32]	; (80054c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80054a0:	695a      	ldr	r2, [r3, #20]
 80054a2:	88fb      	ldrh	r3, [r7, #6]
 80054a4:	4013      	ands	r3, r2
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d006      	beq.n	80054b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80054aa:	4a05      	ldr	r2, [pc, #20]	; (80054c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80054ac:	88fb      	ldrh	r3, [r7, #6]
 80054ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80054b0:	88fb      	ldrh	r3, [r7, #6]
 80054b2:	4618      	mov	r0, r3
 80054b4:	f003 fb98 	bl	8008be8 <HAL_GPIO_EXTI_Callback>
  }
}
 80054b8:	bf00      	nop
 80054ba:	3708      	adds	r7, #8
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	40013c00 	.word	0x40013c00

080054c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d101      	bne.n	80054d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e07f      	b.n	80055d6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d106      	bne.n	80054f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 f8a9 	bl	8005642 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2224      	movs	r2, #36	; 0x24
 80054f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f022 0201 	bic.w	r2, r2, #1
 8005506:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	685a      	ldr	r2, [r3, #4]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005514:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	689a      	ldr	r2, [r3, #8]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005524:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	2b01      	cmp	r3, #1
 800552c:	d107      	bne.n	800553e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	689a      	ldr	r2, [r3, #8]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800553a:	609a      	str	r2, [r3, #8]
 800553c:	e006      	b.n	800554c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	689a      	ldr	r2, [r3, #8]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800554a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	2b02      	cmp	r3, #2
 8005552:	d104      	bne.n	800555e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800555c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	6859      	ldr	r1, [r3, #4]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	4b1d      	ldr	r3, [pc, #116]	; (80055e0 <HAL_I2C_Init+0x11c>)
 800556a:	430b      	orrs	r3, r1
 800556c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68da      	ldr	r2, [r3, #12]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800557c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	691a      	ldr	r2, [r3, #16]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	695b      	ldr	r3, [r3, #20]
 8005586:	ea42 0103 	orr.w	r1, r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	021a      	lsls	r2, r3, #8
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	430a      	orrs	r2, r1
 8005596:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	69d9      	ldr	r1, [r3, #28]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a1a      	ldr	r2, [r3, #32]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	430a      	orrs	r2, r1
 80055a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f042 0201 	orr.w	r2, r2, #1
 80055b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2220      	movs	r2, #32
 80055c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3708      	adds	r7, #8
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	02008000 	.word	0x02008000

080055e4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b082      	sub	sp, #8
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d101      	bne.n	80055f6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e021      	b.n	800563a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2224      	movs	r2, #36	; 0x24
 80055fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f022 0201 	bic.w	r2, r2, #1
 800560c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 f821 	bl	8005656 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3708      	adds	r7, #8
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}

08005642 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005642:	b480      	push	{r7}
 8005644:	b083      	sub	sp, #12
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800564a:	bf00      	nop
 800564c:	370c      	adds	r7, #12
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr

08005656 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8005656:	b480      	push	{r7}
 8005658:	b083      	sub	sp, #12
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800565e:	bf00      	nop
 8005660:	370c      	adds	r7, #12
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
	...

0800566c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b088      	sub	sp, #32
 8005670:	af02      	add	r7, sp, #8
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	4608      	mov	r0, r1
 8005676:	4611      	mov	r1, r2
 8005678:	461a      	mov	r2, r3
 800567a:	4603      	mov	r3, r0
 800567c:	817b      	strh	r3, [r7, #10]
 800567e:	460b      	mov	r3, r1
 8005680:	813b      	strh	r3, [r7, #8]
 8005682:	4613      	mov	r3, r2
 8005684:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800568c:	b2db      	uxtb	r3, r3
 800568e:	2b20      	cmp	r3, #32
 8005690:	f040 80f9 	bne.w	8005886 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005694:	6a3b      	ldr	r3, [r7, #32]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d002      	beq.n	80056a0 <HAL_I2C_Mem_Write+0x34>
 800569a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800569c:	2b00      	cmp	r3, #0
 800569e:	d105      	bne.n	80056ac <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056a6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e0ed      	b.n	8005888 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d101      	bne.n	80056ba <HAL_I2C_Mem_Write+0x4e>
 80056b6:	2302      	movs	r3, #2
 80056b8:	e0e6      	b.n	8005888 <HAL_I2C_Mem_Write+0x21c>
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2201      	movs	r2, #1
 80056be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80056c2:	f7fd f95d 	bl	8002980 <HAL_GetTick>
 80056c6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	9300      	str	r3, [sp, #0]
 80056cc:	2319      	movs	r3, #25
 80056ce:	2201      	movs	r2, #1
 80056d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80056d4:	68f8      	ldr	r0, [r7, #12]
 80056d6:	f000 fad1 	bl	8005c7c <I2C_WaitOnFlagUntilTimeout>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d001      	beq.n	80056e4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e0d1      	b.n	8005888 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2221      	movs	r2, #33	; 0x21
 80056e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2240      	movs	r2, #64	; 0x40
 80056f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2200      	movs	r2, #0
 80056f8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6a3a      	ldr	r2, [r7, #32]
 80056fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005704:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800570c:	88f8      	ldrh	r0, [r7, #6]
 800570e:	893a      	ldrh	r2, [r7, #8]
 8005710:	8979      	ldrh	r1, [r7, #10]
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	9301      	str	r3, [sp, #4]
 8005716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005718:	9300      	str	r3, [sp, #0]
 800571a:	4603      	mov	r3, r0
 800571c:	68f8      	ldr	r0, [r7, #12]
 800571e:	f000 f9e1 	bl	8005ae4 <I2C_RequestMemoryWrite>
 8005722:	4603      	mov	r3, r0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d005      	beq.n	8005734 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2200      	movs	r2, #0
 800572c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e0a9      	b.n	8005888 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005738:	b29b      	uxth	r3, r3
 800573a:	2bff      	cmp	r3, #255	; 0xff
 800573c:	d90e      	bls.n	800575c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	22ff      	movs	r2, #255	; 0xff
 8005742:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005748:	b2da      	uxtb	r2, r3
 800574a:	8979      	ldrh	r1, [r7, #10]
 800574c:	2300      	movs	r3, #0
 800574e:	9300      	str	r3, [sp, #0]
 8005750:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	f000 fbb3 	bl	8005ec0 <I2C_TransferConfig>
 800575a:	e00f      	b.n	800577c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005760:	b29a      	uxth	r2, r3
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800576a:	b2da      	uxtb	r2, r3
 800576c:	8979      	ldrh	r1, [r7, #10]
 800576e:	2300      	movs	r3, #0
 8005770:	9300      	str	r3, [sp, #0]
 8005772:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005776:	68f8      	ldr	r0, [r7, #12]
 8005778:	f000 fba2 	bl	8005ec0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800577c:	697a      	ldr	r2, [r7, #20]
 800577e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005780:	68f8      	ldr	r0, [r7, #12]
 8005782:	f000 fabb 	bl	8005cfc <I2C_WaitOnTXISFlagUntilTimeout>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d001      	beq.n	8005790 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e07b      	b.n	8005888 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005794:	781a      	ldrb	r2, [r3, #0]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a0:	1c5a      	adds	r2, r3, #1
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	3b01      	subs	r3, #1
 80057ae:	b29a      	uxth	r2, r3
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057b8:	3b01      	subs	r3, #1
 80057ba:	b29a      	uxth	r2, r3
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d034      	beq.n	8005834 <HAL_I2C_Mem_Write+0x1c8>
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d130      	bne.n	8005834 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	9300      	str	r3, [sp, #0]
 80057d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d8:	2200      	movs	r2, #0
 80057da:	2180      	movs	r1, #128	; 0x80
 80057dc:	68f8      	ldr	r0, [r7, #12]
 80057de:	f000 fa4d 	bl	8005c7c <I2C_WaitOnFlagUntilTimeout>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d001      	beq.n	80057ec <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e04d      	b.n	8005888 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	2bff      	cmp	r3, #255	; 0xff
 80057f4:	d90e      	bls.n	8005814 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	22ff      	movs	r2, #255	; 0xff
 80057fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005800:	b2da      	uxtb	r2, r3
 8005802:	8979      	ldrh	r1, [r7, #10]
 8005804:	2300      	movs	r3, #0
 8005806:	9300      	str	r3, [sp, #0]
 8005808:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800580c:	68f8      	ldr	r0, [r7, #12]
 800580e:	f000 fb57 	bl	8005ec0 <I2C_TransferConfig>
 8005812:	e00f      	b.n	8005834 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005818:	b29a      	uxth	r2, r3
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005822:	b2da      	uxtb	r2, r3
 8005824:	8979      	ldrh	r1, [r7, #10]
 8005826:	2300      	movs	r3, #0
 8005828:	9300      	str	r3, [sp, #0]
 800582a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800582e:	68f8      	ldr	r0, [r7, #12]
 8005830:	f000 fb46 	bl	8005ec0 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005838:	b29b      	uxth	r3, r3
 800583a:	2b00      	cmp	r3, #0
 800583c:	d19e      	bne.n	800577c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005842:	68f8      	ldr	r0, [r7, #12]
 8005844:	f000 fa9a 	bl	8005d7c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d001      	beq.n	8005852 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e01a      	b.n	8005888 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2220      	movs	r2, #32
 8005858:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	6859      	ldr	r1, [r3, #4]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	4b0a      	ldr	r3, [pc, #40]	; (8005890 <HAL_I2C_Mem_Write+0x224>)
 8005866:	400b      	ands	r3, r1
 8005868:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2220      	movs	r2, #32
 800586e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2200      	movs	r2, #0
 8005876:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005882:	2300      	movs	r3, #0
 8005884:	e000      	b.n	8005888 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005886:	2302      	movs	r3, #2
  }
}
 8005888:	4618      	mov	r0, r3
 800588a:	3718      	adds	r7, #24
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	fe00e800 	.word	0xfe00e800

08005894 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b088      	sub	sp, #32
 8005898:	af02      	add	r7, sp, #8
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	4608      	mov	r0, r1
 800589e:	4611      	mov	r1, r2
 80058a0:	461a      	mov	r2, r3
 80058a2:	4603      	mov	r3, r0
 80058a4:	817b      	strh	r3, [r7, #10]
 80058a6:	460b      	mov	r3, r1
 80058a8:	813b      	strh	r3, [r7, #8]
 80058aa:	4613      	mov	r3, r2
 80058ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	2b20      	cmp	r3, #32
 80058b8:	f040 80fd 	bne.w	8005ab6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80058bc:	6a3b      	ldr	r3, [r7, #32]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d002      	beq.n	80058c8 <HAL_I2C_Mem_Read+0x34>
 80058c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d105      	bne.n	80058d4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058ce:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e0f1      	b.n	8005ab8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d101      	bne.n	80058e2 <HAL_I2C_Mem_Read+0x4e>
 80058de:	2302      	movs	r3, #2
 80058e0:	e0ea      	b.n	8005ab8 <HAL_I2C_Mem_Read+0x224>
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2201      	movs	r2, #1
 80058e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80058ea:	f7fd f849 	bl	8002980 <HAL_GetTick>
 80058ee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	9300      	str	r3, [sp, #0]
 80058f4:	2319      	movs	r3, #25
 80058f6:	2201      	movs	r2, #1
 80058f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80058fc:	68f8      	ldr	r0, [r7, #12]
 80058fe:	f000 f9bd 	bl	8005c7c <I2C_WaitOnFlagUntilTimeout>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d001      	beq.n	800590c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e0d5      	b.n	8005ab8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2222      	movs	r2, #34	; 0x22
 8005910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2240      	movs	r2, #64	; 0x40
 8005918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2200      	movs	r2, #0
 8005920:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6a3a      	ldr	r2, [r7, #32]
 8005926:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800592c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2200      	movs	r2, #0
 8005932:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005934:	88f8      	ldrh	r0, [r7, #6]
 8005936:	893a      	ldrh	r2, [r7, #8]
 8005938:	8979      	ldrh	r1, [r7, #10]
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	9301      	str	r3, [sp, #4]
 800593e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005940:	9300      	str	r3, [sp, #0]
 8005942:	4603      	mov	r3, r0
 8005944:	68f8      	ldr	r0, [r7, #12]
 8005946:	f000 f921 	bl	8005b8c <I2C_RequestMemoryRead>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d005      	beq.n	800595c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2200      	movs	r2, #0
 8005954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e0ad      	b.n	8005ab8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005960:	b29b      	uxth	r3, r3
 8005962:	2bff      	cmp	r3, #255	; 0xff
 8005964:	d90e      	bls.n	8005984 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	22ff      	movs	r2, #255	; 0xff
 800596a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005970:	b2da      	uxtb	r2, r3
 8005972:	8979      	ldrh	r1, [r7, #10]
 8005974:	4b52      	ldr	r3, [pc, #328]	; (8005ac0 <HAL_I2C_Mem_Read+0x22c>)
 8005976:	9300      	str	r3, [sp, #0]
 8005978:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800597c:	68f8      	ldr	r0, [r7, #12]
 800597e:	f000 fa9f 	bl	8005ec0 <I2C_TransferConfig>
 8005982:	e00f      	b.n	80059a4 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005988:	b29a      	uxth	r2, r3
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005992:	b2da      	uxtb	r2, r3
 8005994:	8979      	ldrh	r1, [r7, #10]
 8005996:	4b4a      	ldr	r3, [pc, #296]	; (8005ac0 <HAL_I2C_Mem_Read+0x22c>)
 8005998:	9300      	str	r3, [sp, #0]
 800599a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800599e:	68f8      	ldr	r0, [r7, #12]
 80059a0:	f000 fa8e 	bl	8005ec0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	9300      	str	r3, [sp, #0]
 80059a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059aa:	2200      	movs	r2, #0
 80059ac:	2104      	movs	r1, #4
 80059ae:	68f8      	ldr	r0, [r7, #12]
 80059b0:	f000 f964 	bl	8005c7c <I2C_WaitOnFlagUntilTimeout>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d001      	beq.n	80059be <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e07c      	b.n	8005ab8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c8:	b2d2      	uxtb	r2, r2
 80059ca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d0:	1c5a      	adds	r2, r3, #1
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059da:	3b01      	subs	r3, #1
 80059dc:	b29a      	uxth	r2, r3
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	3b01      	subs	r3, #1
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d034      	beq.n	8005a64 <HAL_I2C_Mem_Read+0x1d0>
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d130      	bne.n	8005a64 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	9300      	str	r3, [sp, #0]
 8005a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a08:	2200      	movs	r2, #0
 8005a0a:	2180      	movs	r1, #128	; 0x80
 8005a0c:	68f8      	ldr	r0, [r7, #12]
 8005a0e:	f000 f935 	bl	8005c7c <I2C_WaitOnFlagUntilTimeout>
 8005a12:	4603      	mov	r3, r0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d001      	beq.n	8005a1c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e04d      	b.n	8005ab8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	2bff      	cmp	r3, #255	; 0xff
 8005a24:	d90e      	bls.n	8005a44 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	22ff      	movs	r2, #255	; 0xff
 8005a2a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a30:	b2da      	uxtb	r2, r3
 8005a32:	8979      	ldrh	r1, [r7, #10]
 8005a34:	2300      	movs	r3, #0
 8005a36:	9300      	str	r3, [sp, #0]
 8005a38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a3c:	68f8      	ldr	r0, [r7, #12]
 8005a3e:	f000 fa3f 	bl	8005ec0 <I2C_TransferConfig>
 8005a42:	e00f      	b.n	8005a64 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a52:	b2da      	uxtb	r2, r3
 8005a54:	8979      	ldrh	r1, [r7, #10]
 8005a56:	2300      	movs	r3, #0
 8005a58:	9300      	str	r3, [sp, #0]
 8005a5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a5e:	68f8      	ldr	r0, [r7, #12]
 8005a60:	f000 fa2e 	bl	8005ec0 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d19a      	bne.n	80059a4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a6e:	697a      	ldr	r2, [r7, #20]
 8005a70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a72:	68f8      	ldr	r0, [r7, #12]
 8005a74:	f000 f982 	bl	8005d7c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d001      	beq.n	8005a82 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e01a      	b.n	8005ab8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2220      	movs	r2, #32
 8005a88:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	6859      	ldr	r1, [r3, #4]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	4b0b      	ldr	r3, [pc, #44]	; (8005ac4 <HAL_I2C_Mem_Read+0x230>)
 8005a96:	400b      	ands	r3, r1
 8005a98:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2220      	movs	r2, #32
 8005a9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	e000      	b.n	8005ab8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005ab6:	2302      	movs	r3, #2
  }
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3718      	adds	r7, #24
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	80002400 	.word	0x80002400
 8005ac4:	fe00e800 	.word	0xfe00e800

08005ac8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ad6:	b2db      	uxtb	r3, r3
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	370c      	adds	r7, #12
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b086      	sub	sp, #24
 8005ae8:	af02      	add	r7, sp, #8
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	4608      	mov	r0, r1
 8005aee:	4611      	mov	r1, r2
 8005af0:	461a      	mov	r2, r3
 8005af2:	4603      	mov	r3, r0
 8005af4:	817b      	strh	r3, [r7, #10]
 8005af6:	460b      	mov	r3, r1
 8005af8:	813b      	strh	r3, [r7, #8]
 8005afa:	4613      	mov	r3, r2
 8005afc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005afe:	88fb      	ldrh	r3, [r7, #6]
 8005b00:	b2da      	uxtb	r2, r3
 8005b02:	8979      	ldrh	r1, [r7, #10]
 8005b04:	4b20      	ldr	r3, [pc, #128]	; (8005b88 <I2C_RequestMemoryWrite+0xa4>)
 8005b06:	9300      	str	r3, [sp, #0]
 8005b08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b0c:	68f8      	ldr	r0, [r7, #12]
 8005b0e:	f000 f9d7 	bl	8005ec0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b12:	69fa      	ldr	r2, [r7, #28]
 8005b14:	69b9      	ldr	r1, [r7, #24]
 8005b16:	68f8      	ldr	r0, [r7, #12]
 8005b18:	f000 f8f0 	bl	8005cfc <I2C_WaitOnTXISFlagUntilTimeout>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d001      	beq.n	8005b26 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e02c      	b.n	8005b80 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b26:	88fb      	ldrh	r3, [r7, #6]
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d105      	bne.n	8005b38 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b2c:	893b      	ldrh	r3, [r7, #8]
 8005b2e:	b2da      	uxtb	r2, r3
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	629a      	str	r2, [r3, #40]	; 0x28
 8005b36:	e015      	b.n	8005b64 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005b38:	893b      	ldrh	r3, [r7, #8]
 8005b3a:	0a1b      	lsrs	r3, r3, #8
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	b2da      	uxtb	r2, r3
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b46:	69fa      	ldr	r2, [r7, #28]
 8005b48:	69b9      	ldr	r1, [r7, #24]
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	f000 f8d6 	bl	8005cfc <I2C_WaitOnTXISFlagUntilTimeout>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d001      	beq.n	8005b5a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e012      	b.n	8005b80 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b5a:	893b      	ldrh	r3, [r7, #8]
 8005b5c:	b2da      	uxtb	r2, r3
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	9300      	str	r3, [sp, #0]
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	2180      	movs	r1, #128	; 0x80
 8005b6e:	68f8      	ldr	r0, [r7, #12]
 8005b70:	f000 f884 	bl	8005c7c <I2C_WaitOnFlagUntilTimeout>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d001      	beq.n	8005b7e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e000      	b.n	8005b80 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3710      	adds	r7, #16
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	80002000 	.word	0x80002000

08005b8c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b086      	sub	sp, #24
 8005b90:	af02      	add	r7, sp, #8
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	4608      	mov	r0, r1
 8005b96:	4611      	mov	r1, r2
 8005b98:	461a      	mov	r2, r3
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	817b      	strh	r3, [r7, #10]
 8005b9e:	460b      	mov	r3, r1
 8005ba0:	813b      	strh	r3, [r7, #8]
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005ba6:	88fb      	ldrh	r3, [r7, #6]
 8005ba8:	b2da      	uxtb	r2, r3
 8005baa:	8979      	ldrh	r1, [r7, #10]
 8005bac:	4b20      	ldr	r3, [pc, #128]	; (8005c30 <I2C_RequestMemoryRead+0xa4>)
 8005bae:	9300      	str	r3, [sp, #0]
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	68f8      	ldr	r0, [r7, #12]
 8005bb4:	f000 f984 	bl	8005ec0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bb8:	69fa      	ldr	r2, [r7, #28]
 8005bba:	69b9      	ldr	r1, [r7, #24]
 8005bbc:	68f8      	ldr	r0, [r7, #12]
 8005bbe:	f000 f89d 	bl	8005cfc <I2C_WaitOnTXISFlagUntilTimeout>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d001      	beq.n	8005bcc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e02c      	b.n	8005c26 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005bcc:	88fb      	ldrh	r3, [r7, #6]
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d105      	bne.n	8005bde <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005bd2:	893b      	ldrh	r3, [r7, #8]
 8005bd4:	b2da      	uxtb	r2, r3
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	629a      	str	r2, [r3, #40]	; 0x28
 8005bdc:	e015      	b.n	8005c0a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005bde:	893b      	ldrh	r3, [r7, #8]
 8005be0:	0a1b      	lsrs	r3, r3, #8
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	b2da      	uxtb	r2, r3
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bec:	69fa      	ldr	r2, [r7, #28]
 8005bee:	69b9      	ldr	r1, [r7, #24]
 8005bf0:	68f8      	ldr	r0, [r7, #12]
 8005bf2:	f000 f883 	bl	8005cfc <I2C_WaitOnTXISFlagUntilTimeout>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d001      	beq.n	8005c00 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e012      	b.n	8005c26 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c00:	893b      	ldrh	r3, [r7, #8]
 8005c02:	b2da      	uxtb	r2, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	9300      	str	r3, [sp, #0]
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	2200      	movs	r2, #0
 8005c12:	2140      	movs	r1, #64	; 0x40
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f000 f831 	bl	8005c7c <I2C_WaitOnFlagUntilTimeout>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d001      	beq.n	8005c24 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e000      	b.n	8005c26 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3710      	adds	r7, #16
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	80002000 	.word	0x80002000

08005c34 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	699b      	ldr	r3, [r3, #24]
 8005c42:	f003 0302 	and.w	r3, r3, #2
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d103      	bne.n	8005c52 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	699b      	ldr	r3, [r3, #24]
 8005c58:	f003 0301 	and.w	r3, r3, #1
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d007      	beq.n	8005c70 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	699a      	ldr	r2, [r3, #24]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f042 0201 	orr.w	r2, r2, #1
 8005c6e:	619a      	str	r2, [r3, #24]
  }
}
 8005c70:	bf00      	nop
 8005c72:	370c      	adds	r7, #12
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	603b      	str	r3, [r7, #0]
 8005c88:	4613      	mov	r3, r2
 8005c8a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c8c:	e022      	b.n	8005cd4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c94:	d01e      	beq.n	8005cd4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c96:	f7fc fe73 	bl	8002980 <HAL_GetTick>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	1ad3      	subs	r3, r2, r3
 8005ca0:	683a      	ldr	r2, [r7, #0]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d302      	bcc.n	8005cac <I2C_WaitOnFlagUntilTimeout+0x30>
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d113      	bne.n	8005cd4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cb0:	f043 0220 	orr.w	r2, r3, #32
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2220      	movs	r2, #32
 8005cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e00f      	b.n	8005cf4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	699a      	ldr	r2, [r3, #24]
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	4013      	ands	r3, r2
 8005cde:	68ba      	ldr	r2, [r7, #8]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	bf0c      	ite	eq
 8005ce4:	2301      	moveq	r3, #1
 8005ce6:	2300      	movne	r3, #0
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	461a      	mov	r2, r3
 8005cec:	79fb      	ldrb	r3, [r7, #7]
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d0cd      	beq.n	8005c8e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005cf2:	2300      	movs	r3, #0
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3710      	adds	r7, #16
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005d08:	e02c      	b.n	8005d64 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	68b9      	ldr	r1, [r7, #8]
 8005d0e:	68f8      	ldr	r0, [r7, #12]
 8005d10:	f000 f870 	bl	8005df4 <I2C_IsAcknowledgeFailed>
 8005d14:	4603      	mov	r3, r0
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d001      	beq.n	8005d1e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e02a      	b.n	8005d74 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d24:	d01e      	beq.n	8005d64 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d26:	f7fc fe2b 	bl	8002980 <HAL_GetTick>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	68ba      	ldr	r2, [r7, #8]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d302      	bcc.n	8005d3c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d113      	bne.n	8005d64 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d40:	f043 0220 	orr.w	r2, r3, #32
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2220      	movs	r2, #32
 8005d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e007      	b.n	8005d74 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	699b      	ldr	r3, [r3, #24]
 8005d6a:	f003 0302 	and.w	r3, r3, #2
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d1cb      	bne.n	8005d0a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3710      	adds	r7, #16
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b084      	sub	sp, #16
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d88:	e028      	b.n	8005ddc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	68b9      	ldr	r1, [r7, #8]
 8005d8e:	68f8      	ldr	r0, [r7, #12]
 8005d90:	f000 f830 	bl	8005df4 <I2C_IsAcknowledgeFailed>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d001      	beq.n	8005d9e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e026      	b.n	8005dec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d9e:	f7fc fdef 	bl	8002980 <HAL_GetTick>
 8005da2:	4602      	mov	r2, r0
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	68ba      	ldr	r2, [r7, #8]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d302      	bcc.n	8005db4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d113      	bne.n	8005ddc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005db8:	f043 0220 	orr.w	r2, r3, #32
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2220      	movs	r2, #32
 8005dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e007      	b.n	8005dec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	699b      	ldr	r3, [r3, #24]
 8005de2:	f003 0320 	and.w	r3, r3, #32
 8005de6:	2b20      	cmp	r3, #32
 8005de8:	d1cf      	bne.n	8005d8a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3710      	adds	r7, #16
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	699b      	ldr	r3, [r3, #24]
 8005e06:	f003 0310 	and.w	r3, r3, #16
 8005e0a:	2b10      	cmp	r3, #16
 8005e0c:	d151      	bne.n	8005eb2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e0e:	e022      	b.n	8005e56 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e16:	d01e      	beq.n	8005e56 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e18:	f7fc fdb2 	bl	8002980 <HAL_GetTick>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	68ba      	ldr	r2, [r7, #8]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d302      	bcc.n	8005e2e <I2C_IsAcknowledgeFailed+0x3a>
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d113      	bne.n	8005e56 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e32:	f043 0220 	orr.w	r2, r3, #32
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2220      	movs	r2, #32
 8005e3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e02e      	b.n	8005eb4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	699b      	ldr	r3, [r3, #24]
 8005e5c:	f003 0320 	and.w	r3, r3, #32
 8005e60:	2b20      	cmp	r3, #32
 8005e62:	d1d5      	bne.n	8005e10 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2210      	movs	r2, #16
 8005e6a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2220      	movs	r2, #32
 8005e72:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005e74:	68f8      	ldr	r0, [r7, #12]
 8005e76:	f7ff fedd 	bl	8005c34 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	6859      	ldr	r1, [r3, #4]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	4b0d      	ldr	r3, [pc, #52]	; (8005ebc <I2C_IsAcknowledgeFailed+0xc8>)
 8005e86:	400b      	ands	r3, r1
 8005e88:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e8e:	f043 0204 	orr.w	r2, r3, #4
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2220      	movs	r2, #32
 8005e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e000      	b.n	8005eb4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3710      	adds	r7, #16
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	fe00e800 	.word	0xfe00e800

08005ec0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b085      	sub	sp, #20
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	607b      	str	r3, [r7, #4]
 8005eca:	460b      	mov	r3, r1
 8005ecc:	817b      	strh	r3, [r7, #10]
 8005ece:	4613      	mov	r3, r2
 8005ed0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	685a      	ldr	r2, [r3, #4]
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	0d5b      	lsrs	r3, r3, #21
 8005edc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005ee0:	4b0d      	ldr	r3, [pc, #52]	; (8005f18 <I2C_TransferConfig+0x58>)
 8005ee2:	430b      	orrs	r3, r1
 8005ee4:	43db      	mvns	r3, r3
 8005ee6:	ea02 0103 	and.w	r1, r2, r3
 8005eea:	897b      	ldrh	r3, [r7, #10]
 8005eec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005ef0:	7a7b      	ldrb	r3, [r7, #9]
 8005ef2:	041b      	lsls	r3, r3, #16
 8005ef4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005ef8:	431a      	orrs	r2, r3
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	431a      	orrs	r2, r3
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	431a      	orrs	r2, r3
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	430a      	orrs	r2, r1
 8005f08:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005f0a:	bf00      	nop
 8005f0c:	3714      	adds	r7, #20
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	03ff63ff 	.word	0x03ff63ff

08005f1c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d101      	bne.n	8005f2e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e0bf      	b.n	80060ae <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d106      	bne.n	8005f48 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f003 fe9c 	bl	8009c80 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	699a      	ldr	r2, [r3, #24]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005f5e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	6999      	ldr	r1, [r3, #24]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	685a      	ldr	r2, [r3, #4]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005f74:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	430a      	orrs	r2, r1
 8005f82:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	6899      	ldr	r1, [r3, #8]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	4b4a      	ldr	r3, [pc, #296]	; (80060b8 <HAL_LTDC_Init+0x19c>)
 8005f90:	400b      	ands	r3, r1
 8005f92:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	695b      	ldr	r3, [r3, #20]
 8005f98:	041b      	lsls	r3, r3, #16
 8005f9a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	6899      	ldr	r1, [r3, #8]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	699a      	ldr	r2, [r3, #24]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	431a      	orrs	r2, r3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	430a      	orrs	r2, r1
 8005fb0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68d9      	ldr	r1, [r3, #12]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	4b3e      	ldr	r3, [pc, #248]	; (80060b8 <HAL_LTDC_Init+0x19c>)
 8005fbe:	400b      	ands	r3, r1
 8005fc0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	69db      	ldr	r3, [r3, #28]
 8005fc6:	041b      	lsls	r3, r3, #16
 8005fc8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68d9      	ldr	r1, [r3, #12]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6a1a      	ldr	r2, [r3, #32]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	431a      	orrs	r2, r3
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	430a      	orrs	r2, r1
 8005fde:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	6919      	ldr	r1, [r3, #16]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	4b33      	ldr	r3, [pc, #204]	; (80060b8 <HAL_LTDC_Init+0x19c>)
 8005fec:	400b      	ands	r3, r1
 8005fee:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff4:	041b      	lsls	r3, r3, #16
 8005ff6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	6919      	ldr	r1, [r3, #16]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	431a      	orrs	r2, r3
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	430a      	orrs	r2, r1
 800600c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	6959      	ldr	r1, [r3, #20]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	4b27      	ldr	r3, [pc, #156]	; (80060b8 <HAL_LTDC_Init+0x19c>)
 800601a:	400b      	ands	r3, r1
 800601c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006022:	041b      	lsls	r3, r3, #16
 8006024:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	6959      	ldr	r1, [r3, #20]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	431a      	orrs	r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	430a      	orrs	r2, r1
 800603a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006042:	021b      	lsls	r3, r3, #8
 8006044:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800604c:	041b      	lsls	r3, r3, #16
 800604e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800605e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006066:	68ba      	ldr	r2, [r7, #8]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	4313      	orrs	r3, r2
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006072:	431a      	orrs	r2, r3
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	430a      	orrs	r2, r1
 800607a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f042 0206 	orr.w	r2, r2, #6
 800608a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	699a      	ldr	r2, [r3, #24]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f042 0201 	orr.w	r2, r2, #1
 800609a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3710      	adds	r7, #16
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop
 80060b8:	f000f800 	.word	0xf000f800

080060bc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80060bc:	b5b0      	push	{r4, r5, r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d101      	bne.n	80060d6 <HAL_LTDC_ConfigLayer+0x1a>
 80060d2:	2302      	movs	r3, #2
 80060d4:	e02c      	b.n	8006130 <HAL_LTDC_ConfigLayer+0x74>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2201      	movs	r2, #1
 80060da:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2202      	movs	r2, #2
 80060e2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80060e6:	68fa      	ldr	r2, [r7, #12]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2134      	movs	r1, #52	; 0x34
 80060ec:	fb01 f303 	mul.w	r3, r1, r3
 80060f0:	4413      	add	r3, r2
 80060f2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	4614      	mov	r4, r2
 80060fa:	461d      	mov	r5, r3
 80060fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80060fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006100:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006102:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006104:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006106:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006108:	682b      	ldr	r3, [r5, #0]
 800610a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	68b9      	ldr	r1, [r7, #8]
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	f000 f811 	bl	8006138 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2201      	movs	r2, #1
 800611c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2201      	movs	r2, #1
 8006122:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2200      	movs	r2, #0
 800612a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800612e:	2300      	movs	r3, #0
}
 8006130:	4618      	mov	r0, r3
 8006132:	3710      	adds	r7, #16
 8006134:	46bd      	mov	sp, r7
 8006136:	bdb0      	pop	{r4, r5, r7, pc}

08006138 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006138:	b480      	push	{r7}
 800613a:	b089      	sub	sp, #36	; 0x24
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	685a      	ldr	r2, [r3, #4]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68db      	ldr	r3, [r3, #12]
 800614e:	0c1b      	lsrs	r3, r3, #16
 8006150:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006154:	4413      	add	r3, r2
 8006156:	041b      	lsls	r3, r3, #16
 8006158:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	461a      	mov	r2, r3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	01db      	lsls	r3, r3, #7
 8006164:	4413      	add	r3, r2
 8006166:	3384      	adds	r3, #132	; 0x84
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	68fa      	ldr	r2, [r7, #12]
 800616c:	6812      	ldr	r2, [r2, #0]
 800616e:	4611      	mov	r1, r2
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	01d2      	lsls	r2, r2, #7
 8006174:	440a      	add	r2, r1
 8006176:	3284      	adds	r2, #132	; 0x84
 8006178:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800617c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	0c1b      	lsrs	r3, r3, #16
 800618a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800618e:	4413      	add	r3, r2
 8006190:	1c5a      	adds	r2, r3, #1
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4619      	mov	r1, r3
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	01db      	lsls	r3, r3, #7
 800619c:	440b      	add	r3, r1
 800619e:	3384      	adds	r3, #132	; 0x84
 80061a0:	4619      	mov	r1, r3
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	68da      	ldr	r2, [r3, #12]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061b6:	4413      	add	r3, r2
 80061b8:	041b      	lsls	r3, r3, #16
 80061ba:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	461a      	mov	r2, r3
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	01db      	lsls	r3, r3, #7
 80061c6:	4413      	add	r3, r2
 80061c8:	3384      	adds	r3, #132	; 0x84
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	6812      	ldr	r2, [r2, #0]
 80061d0:	4611      	mov	r1, r2
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	01d2      	lsls	r2, r2, #7
 80061d6:	440a      	add	r2, r1
 80061d8:	3284      	adds	r2, #132	; 0x84
 80061da:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80061de:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	689a      	ldr	r2, [r3, #8]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061ee:	4413      	add	r3, r2
 80061f0:	1c5a      	adds	r2, r3, #1
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4619      	mov	r1, r3
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	01db      	lsls	r3, r3, #7
 80061fc:	440b      	add	r3, r1
 80061fe:	3384      	adds	r3, #132	; 0x84
 8006200:	4619      	mov	r1, r3
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	4313      	orrs	r3, r2
 8006206:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	461a      	mov	r2, r3
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	01db      	lsls	r3, r3, #7
 8006212:	4413      	add	r3, r2
 8006214:	3384      	adds	r3, #132	; 0x84
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	68fa      	ldr	r2, [r7, #12]
 800621a:	6812      	ldr	r2, [r2, #0]
 800621c:	4611      	mov	r1, r2
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	01d2      	lsls	r2, r2, #7
 8006222:	440a      	add	r2, r1
 8006224:	3284      	adds	r2, #132	; 0x84
 8006226:	f023 0307 	bic.w	r3, r3, #7
 800622a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	461a      	mov	r2, r3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	01db      	lsls	r3, r3, #7
 8006236:	4413      	add	r3, r2
 8006238:	3384      	adds	r3, #132	; 0x84
 800623a:	461a      	mov	r2, r3
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006248:	021b      	lsls	r3, r3, #8
 800624a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006252:	041b      	lsls	r3, r3, #16
 8006254:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	699b      	ldr	r3, [r3, #24]
 800625a:	061b      	lsls	r3, r3, #24
 800625c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	461a      	mov	r2, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	01db      	lsls	r3, r3, #7
 8006268:	4413      	add	r3, r2
 800626a:	3384      	adds	r3, #132	; 0x84
 800626c:	699b      	ldr	r3, [r3, #24]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	461a      	mov	r2, r3
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	01db      	lsls	r3, r3, #7
 8006278:	4413      	add	r3, r2
 800627a:	3384      	adds	r3, #132	; 0x84
 800627c:	461a      	mov	r2, r3
 800627e:	2300      	movs	r3, #0
 8006280:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006288:	461a      	mov	r2, r3
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	431a      	orrs	r2, r3
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	431a      	orrs	r2, r3
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4619      	mov	r1, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	01db      	lsls	r3, r3, #7
 800629c:	440b      	add	r3, r1
 800629e:	3384      	adds	r3, #132	; 0x84
 80062a0:	4619      	mov	r1, r3
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	461a      	mov	r2, r3
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	01db      	lsls	r3, r3, #7
 80062b2:	4413      	add	r3, r2
 80062b4:	3384      	adds	r3, #132	; 0x84
 80062b6:	695b      	ldr	r3, [r3, #20]
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	6812      	ldr	r2, [r2, #0]
 80062bc:	4611      	mov	r1, r2
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	01d2      	lsls	r2, r2, #7
 80062c2:	440a      	add	r2, r1
 80062c4:	3284      	adds	r2, #132	; 0x84
 80062c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80062ca:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	461a      	mov	r2, r3
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	01db      	lsls	r3, r3, #7
 80062d6:	4413      	add	r3, r2
 80062d8:	3384      	adds	r3, #132	; 0x84
 80062da:	461a      	mov	r2, r3
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	695b      	ldr	r3, [r3, #20]
 80062e0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	461a      	mov	r2, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	01db      	lsls	r3, r3, #7
 80062ec:	4413      	add	r3, r2
 80062ee:	3384      	adds	r3, #132	; 0x84
 80062f0:	69da      	ldr	r2, [r3, #28]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4619      	mov	r1, r3
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	01db      	lsls	r3, r3, #7
 80062fc:	440b      	add	r3, r1
 80062fe:	3384      	adds	r3, #132	; 0x84
 8006300:	4619      	mov	r1, r3
 8006302:	4b58      	ldr	r3, [pc, #352]	; (8006464 <LTDC_SetConfig+0x32c>)
 8006304:	4013      	ands	r3, r2
 8006306:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	69da      	ldr	r2, [r3, #28]
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	6a1b      	ldr	r3, [r3, #32]
 8006310:	68f9      	ldr	r1, [r7, #12]
 8006312:	6809      	ldr	r1, [r1, #0]
 8006314:	4608      	mov	r0, r1
 8006316:	6879      	ldr	r1, [r7, #4]
 8006318:	01c9      	lsls	r1, r1, #7
 800631a:	4401      	add	r1, r0
 800631c:	3184      	adds	r1, #132	; 0x84
 800631e:	4313      	orrs	r3, r2
 8006320:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	461a      	mov	r2, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	01db      	lsls	r3, r3, #7
 800632c:	4413      	add	r3, r2
 800632e:	3384      	adds	r3, #132	; 0x84
 8006330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	461a      	mov	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	01db      	lsls	r3, r3, #7
 800633c:	4413      	add	r3, r2
 800633e:	3384      	adds	r3, #132	; 0x84
 8006340:	461a      	mov	r2, r3
 8006342:	2300      	movs	r3, #0
 8006344:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	461a      	mov	r2, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	01db      	lsls	r3, r3, #7
 8006350:	4413      	add	r3, r2
 8006352:	3384      	adds	r3, #132	; 0x84
 8006354:	461a      	mov	r2, r3
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d102      	bne.n	800636a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006364:	2304      	movs	r3, #4
 8006366:	61fb      	str	r3, [r7, #28]
 8006368:	e01b      	b.n	80063a2 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	2b01      	cmp	r3, #1
 8006370:	d102      	bne.n	8006378 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006372:	2303      	movs	r3, #3
 8006374:	61fb      	str	r3, [r7, #28]
 8006376:	e014      	b.n	80063a2 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	2b04      	cmp	r3, #4
 800637e:	d00b      	beq.n	8006398 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006384:	2b02      	cmp	r3, #2
 8006386:	d007      	beq.n	8006398 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800638c:	2b03      	cmp	r3, #3
 800638e:	d003      	beq.n	8006398 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006394:	2b07      	cmp	r3, #7
 8006396:	d102      	bne.n	800639e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006398:	2302      	movs	r3, #2
 800639a:	61fb      	str	r3, [r7, #28]
 800639c:	e001      	b.n	80063a2 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800639e:	2301      	movs	r3, #1
 80063a0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	461a      	mov	r2, r3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	01db      	lsls	r3, r3, #7
 80063ac:	4413      	add	r3, r2
 80063ae:	3384      	adds	r3, #132	; 0x84
 80063b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	6812      	ldr	r2, [r2, #0]
 80063b6:	4611      	mov	r1, r2
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	01d2      	lsls	r2, r2, #7
 80063bc:	440a      	add	r2, r1
 80063be:	3284      	adds	r2, #132	; 0x84
 80063c0:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80063c4:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ca:	69fa      	ldr	r2, [r7, #28]
 80063cc:	fb02 f303 	mul.w	r3, r2, r3
 80063d0:	041a      	lsls	r2, r3, #16
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	6859      	ldr	r1, [r3, #4]
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	1acb      	subs	r3, r1, r3
 80063dc:	69f9      	ldr	r1, [r7, #28]
 80063de:	fb01 f303 	mul.w	r3, r1, r3
 80063e2:	3303      	adds	r3, #3
 80063e4:	68f9      	ldr	r1, [r7, #12]
 80063e6:	6809      	ldr	r1, [r1, #0]
 80063e8:	4608      	mov	r0, r1
 80063ea:	6879      	ldr	r1, [r7, #4]
 80063ec:	01c9      	lsls	r1, r1, #7
 80063ee:	4401      	add	r1, r0
 80063f0:	3184      	adds	r1, #132	; 0x84
 80063f2:	4313      	orrs	r3, r2
 80063f4:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	461a      	mov	r2, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	01db      	lsls	r3, r3, #7
 8006400:	4413      	add	r3, r2
 8006402:	3384      	adds	r3, #132	; 0x84
 8006404:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4619      	mov	r1, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	01db      	lsls	r3, r3, #7
 8006410:	440b      	add	r3, r1
 8006412:	3384      	adds	r3, #132	; 0x84
 8006414:	4619      	mov	r1, r3
 8006416:	4b14      	ldr	r3, [pc, #80]	; (8006468 <LTDC_SetConfig+0x330>)
 8006418:	4013      	ands	r3, r2
 800641a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	461a      	mov	r2, r3
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	01db      	lsls	r3, r3, #7
 8006426:	4413      	add	r3, r2
 8006428:	3384      	adds	r3, #132	; 0x84
 800642a:	461a      	mov	r2, r3
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006430:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	461a      	mov	r2, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	01db      	lsls	r3, r3, #7
 800643c:	4413      	add	r3, r2
 800643e:	3384      	adds	r3, #132	; 0x84
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	6812      	ldr	r2, [r2, #0]
 8006446:	4611      	mov	r1, r2
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	01d2      	lsls	r2, r2, #7
 800644c:	440a      	add	r2, r1
 800644e:	3284      	adds	r2, #132	; 0x84
 8006450:	f043 0301 	orr.w	r3, r3, #1
 8006454:	6013      	str	r3, [r2, #0]
}
 8006456:	bf00      	nop
 8006458:	3724      	adds	r7, #36	; 0x24
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr
 8006462:	bf00      	nop
 8006464:	fffff8f8 	.word	0xfffff8f8
 8006468:	fffff800 	.word	0xfffff800

0800646c <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647a:	2b00      	cmp	r3, #0
 800647c:	d101      	bne.n	8006482 <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 800647e:	2200      	movs	r2, #0
 8006480:	e001      	b.n	8006486 <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 8006482:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	6a1b      	ldr	r3, [r3, #32]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d102      	bne.n	8006498 <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 8006492:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006496:	e000      	b.n	800649a <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 8006498:	2200      	movs	r2, #0
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	69db      	ldr	r3, [r3, #28]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d102      	bne.n	80064ac <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 80064a6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80064aa:	e000      	b.n	80064ae <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 80064ac:	2200      	movs	r2, #0
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	605a      	str	r2, [r3, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064b6:	1e5a      	subs	r2, r3, #1
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c4:	4413      	add	r3, r2
 80064c6:	1e5a      	subs	r2, r3, #1
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive - 1U;
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d4:	441a      	add	r2, r3
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064da:	4413      	add	r3, r2
 80064dc:	1e5a      	subs	r2, r3, #1
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ea:	441a      	add	r2, r3
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f0:	441a      	add	r2, r3
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064f6:	4413      	add	r3, r2
 80064f8:	1e5a      	subs	r2, r3, #1
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80064fe:	2300      	movs	r3, #0
}
 8006500:	4618      	mov	r0, r3
 8006502:	370c      	adds	r7, #12
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b082      	sub	sp, #8
 8006510:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006512:	2300      	movs	r3, #0
 8006514:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006516:	4b23      	ldr	r3, [pc, #140]	; (80065a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8006518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651a:	4a22      	ldr	r2, [pc, #136]	; (80065a4 <HAL_PWREx_EnableOverDrive+0x98>)
 800651c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006520:	6413      	str	r3, [r2, #64]	; 0x40
 8006522:	4b20      	ldr	r3, [pc, #128]	; (80065a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8006524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800652a:	603b      	str	r3, [r7, #0]
 800652c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800652e:	4b1e      	ldr	r3, [pc, #120]	; (80065a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a1d      	ldr	r2, [pc, #116]	; (80065a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006538:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800653a:	f7fc fa21 	bl	8002980 <HAL_GetTick>
 800653e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006540:	e009      	b.n	8006556 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006542:	f7fc fa1d 	bl	8002980 <HAL_GetTick>
 8006546:	4602      	mov	r2, r0
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006550:	d901      	bls.n	8006556 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006552:	2303      	movs	r3, #3
 8006554:	e022      	b.n	800659c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006556:	4b14      	ldr	r3, [pc, #80]	; (80065a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800655e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006562:	d1ee      	bne.n	8006542 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006564:	4b10      	ldr	r3, [pc, #64]	; (80065a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a0f      	ldr	r2, [pc, #60]	; (80065a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800656a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800656e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006570:	f7fc fa06 	bl	8002980 <HAL_GetTick>
 8006574:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006576:	e009      	b.n	800658c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006578:	f7fc fa02 	bl	8002980 <HAL_GetTick>
 800657c:	4602      	mov	r2, r0
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006586:	d901      	bls.n	800658c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006588:	2303      	movs	r3, #3
 800658a:	e007      	b.n	800659c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800658c:	4b06      	ldr	r3, [pc, #24]	; (80065a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006594:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006598:	d1ee      	bne.n	8006578 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800659a:	2300      	movs	r3, #0
}
 800659c:	4618      	mov	r0, r3
 800659e:	3708      	adds	r7, #8
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	40023800 	.word	0x40023800
 80065a8:	40007000 	.word	0x40007000

080065ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b086      	sub	sp, #24
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 80065b4:	2300      	movs	r3, #0
 80065b6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d101      	bne.n	80065c2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	e25e      	b.n	8006a80 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f003 0301 	and.w	r3, r3, #1
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	f000 8087 	beq.w	80066de <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80065d0:	4b96      	ldr	r3, [pc, #600]	; (800682c <HAL_RCC_OscConfig+0x280>)
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	f003 030c 	and.w	r3, r3, #12
 80065d8:	2b04      	cmp	r3, #4
 80065da:	d00c      	beq.n	80065f6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065dc:	4b93      	ldr	r3, [pc, #588]	; (800682c <HAL_RCC_OscConfig+0x280>)
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	f003 030c 	and.w	r3, r3, #12
 80065e4:	2b08      	cmp	r3, #8
 80065e6:	d112      	bne.n	800660e <HAL_RCC_OscConfig+0x62>
 80065e8:	4b90      	ldr	r3, [pc, #576]	; (800682c <HAL_RCC_OscConfig+0x280>)
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065f4:	d10b      	bne.n	800660e <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065f6:	4b8d      	ldr	r3, [pc, #564]	; (800682c <HAL_RCC_OscConfig+0x280>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d06c      	beq.n	80066dc <HAL_RCC_OscConfig+0x130>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d168      	bne.n	80066dc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e238      	b.n	8006a80 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006616:	d106      	bne.n	8006626 <HAL_RCC_OscConfig+0x7a>
 8006618:	4b84      	ldr	r3, [pc, #528]	; (800682c <HAL_RCC_OscConfig+0x280>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a83      	ldr	r2, [pc, #524]	; (800682c <HAL_RCC_OscConfig+0x280>)
 800661e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006622:	6013      	str	r3, [r2, #0]
 8006624:	e02e      	b.n	8006684 <HAL_RCC_OscConfig+0xd8>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d10c      	bne.n	8006648 <HAL_RCC_OscConfig+0x9c>
 800662e:	4b7f      	ldr	r3, [pc, #508]	; (800682c <HAL_RCC_OscConfig+0x280>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a7e      	ldr	r2, [pc, #504]	; (800682c <HAL_RCC_OscConfig+0x280>)
 8006634:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006638:	6013      	str	r3, [r2, #0]
 800663a:	4b7c      	ldr	r3, [pc, #496]	; (800682c <HAL_RCC_OscConfig+0x280>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a7b      	ldr	r2, [pc, #492]	; (800682c <HAL_RCC_OscConfig+0x280>)
 8006640:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006644:	6013      	str	r3, [r2, #0]
 8006646:	e01d      	b.n	8006684 <HAL_RCC_OscConfig+0xd8>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006650:	d10c      	bne.n	800666c <HAL_RCC_OscConfig+0xc0>
 8006652:	4b76      	ldr	r3, [pc, #472]	; (800682c <HAL_RCC_OscConfig+0x280>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a75      	ldr	r2, [pc, #468]	; (800682c <HAL_RCC_OscConfig+0x280>)
 8006658:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800665c:	6013      	str	r3, [r2, #0]
 800665e:	4b73      	ldr	r3, [pc, #460]	; (800682c <HAL_RCC_OscConfig+0x280>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a72      	ldr	r2, [pc, #456]	; (800682c <HAL_RCC_OscConfig+0x280>)
 8006664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006668:	6013      	str	r3, [r2, #0]
 800666a:	e00b      	b.n	8006684 <HAL_RCC_OscConfig+0xd8>
 800666c:	4b6f      	ldr	r3, [pc, #444]	; (800682c <HAL_RCC_OscConfig+0x280>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a6e      	ldr	r2, [pc, #440]	; (800682c <HAL_RCC_OscConfig+0x280>)
 8006672:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006676:	6013      	str	r3, [r2, #0]
 8006678:	4b6c      	ldr	r3, [pc, #432]	; (800682c <HAL_RCC_OscConfig+0x280>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a6b      	ldr	r2, [pc, #428]	; (800682c <HAL_RCC_OscConfig+0x280>)
 800667e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006682:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d013      	beq.n	80066b4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800668c:	f7fc f978 	bl	8002980 <HAL_GetTick>
 8006690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006692:	e008      	b.n	80066a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006694:	f7fc f974 	bl	8002980 <HAL_GetTick>
 8006698:	4602      	mov	r2, r0
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	1ad3      	subs	r3, r2, r3
 800669e:	2b64      	cmp	r3, #100	; 0x64
 80066a0:	d901      	bls.n	80066a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80066a2:	2303      	movs	r3, #3
 80066a4:	e1ec      	b.n	8006a80 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066a6:	4b61      	ldr	r3, [pc, #388]	; (800682c <HAL_RCC_OscConfig+0x280>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d0f0      	beq.n	8006694 <HAL_RCC_OscConfig+0xe8>
 80066b2:	e014      	b.n	80066de <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066b4:	f7fc f964 	bl	8002980 <HAL_GetTick>
 80066b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066ba:	e008      	b.n	80066ce <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80066bc:	f7fc f960 	bl	8002980 <HAL_GetTick>
 80066c0:	4602      	mov	r2, r0
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	1ad3      	subs	r3, r2, r3
 80066c6:	2b64      	cmp	r3, #100	; 0x64
 80066c8:	d901      	bls.n	80066ce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80066ca:	2303      	movs	r3, #3
 80066cc:	e1d8      	b.n	8006a80 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066ce:	4b57      	ldr	r3, [pc, #348]	; (800682c <HAL_RCC_OscConfig+0x280>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d1f0      	bne.n	80066bc <HAL_RCC_OscConfig+0x110>
 80066da:	e000      	b.n	80066de <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 0302 	and.w	r3, r3, #2
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d069      	beq.n	80067be <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80066ea:	4b50      	ldr	r3, [pc, #320]	; (800682c <HAL_RCC_OscConfig+0x280>)
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	f003 030c 	and.w	r3, r3, #12
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00b      	beq.n	800670e <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066f6:	4b4d      	ldr	r3, [pc, #308]	; (800682c <HAL_RCC_OscConfig+0x280>)
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	f003 030c 	and.w	r3, r3, #12
 80066fe:	2b08      	cmp	r3, #8
 8006700:	d11c      	bne.n	800673c <HAL_RCC_OscConfig+0x190>
 8006702:	4b4a      	ldr	r3, [pc, #296]	; (800682c <HAL_RCC_OscConfig+0x280>)
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800670a:	2b00      	cmp	r3, #0
 800670c:	d116      	bne.n	800673c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800670e:	4b47      	ldr	r3, [pc, #284]	; (800682c <HAL_RCC_OscConfig+0x280>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f003 0302 	and.w	r3, r3, #2
 8006716:	2b00      	cmp	r3, #0
 8006718:	d005      	beq.n	8006726 <HAL_RCC_OscConfig+0x17a>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	2b01      	cmp	r3, #1
 8006720:	d001      	beq.n	8006726 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e1ac      	b.n	8006a80 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006726:	4b41      	ldr	r3, [pc, #260]	; (800682c <HAL_RCC_OscConfig+0x280>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	00db      	lsls	r3, r3, #3
 8006734:	493d      	ldr	r1, [pc, #244]	; (800682c <HAL_RCC_OscConfig+0x280>)
 8006736:	4313      	orrs	r3, r2
 8006738:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800673a:	e040      	b.n	80067be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d023      	beq.n	800678c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006744:	4b39      	ldr	r3, [pc, #228]	; (800682c <HAL_RCC_OscConfig+0x280>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a38      	ldr	r2, [pc, #224]	; (800682c <HAL_RCC_OscConfig+0x280>)
 800674a:	f043 0301 	orr.w	r3, r3, #1
 800674e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006750:	f7fc f916 	bl	8002980 <HAL_GetTick>
 8006754:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006756:	e008      	b.n	800676a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006758:	f7fc f912 	bl	8002980 <HAL_GetTick>
 800675c:	4602      	mov	r2, r0
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	1ad3      	subs	r3, r2, r3
 8006762:	2b02      	cmp	r3, #2
 8006764:	d901      	bls.n	800676a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006766:	2303      	movs	r3, #3
 8006768:	e18a      	b.n	8006a80 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800676a:	4b30      	ldr	r3, [pc, #192]	; (800682c <HAL_RCC_OscConfig+0x280>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 0302 	and.w	r3, r3, #2
 8006772:	2b00      	cmp	r3, #0
 8006774:	d0f0      	beq.n	8006758 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006776:	4b2d      	ldr	r3, [pc, #180]	; (800682c <HAL_RCC_OscConfig+0x280>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	00db      	lsls	r3, r3, #3
 8006784:	4929      	ldr	r1, [pc, #164]	; (800682c <HAL_RCC_OscConfig+0x280>)
 8006786:	4313      	orrs	r3, r2
 8006788:	600b      	str	r3, [r1, #0]
 800678a:	e018      	b.n	80067be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800678c:	4b27      	ldr	r3, [pc, #156]	; (800682c <HAL_RCC_OscConfig+0x280>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a26      	ldr	r2, [pc, #152]	; (800682c <HAL_RCC_OscConfig+0x280>)
 8006792:	f023 0301 	bic.w	r3, r3, #1
 8006796:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006798:	f7fc f8f2 	bl	8002980 <HAL_GetTick>
 800679c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800679e:	e008      	b.n	80067b2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80067a0:	f7fc f8ee 	bl	8002980 <HAL_GetTick>
 80067a4:	4602      	mov	r2, r0
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	1ad3      	subs	r3, r2, r3
 80067aa:	2b02      	cmp	r3, #2
 80067ac:	d901      	bls.n	80067b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80067ae:	2303      	movs	r3, #3
 80067b0:	e166      	b.n	8006a80 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067b2:	4b1e      	ldr	r3, [pc, #120]	; (800682c <HAL_RCC_OscConfig+0x280>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f003 0302 	and.w	r3, r3, #2
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d1f0      	bne.n	80067a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 0308 	and.w	r3, r3, #8
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d038      	beq.n	800683c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	695b      	ldr	r3, [r3, #20]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d019      	beq.n	8006806 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067d2:	4b16      	ldr	r3, [pc, #88]	; (800682c <HAL_RCC_OscConfig+0x280>)
 80067d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067d6:	4a15      	ldr	r2, [pc, #84]	; (800682c <HAL_RCC_OscConfig+0x280>)
 80067d8:	f043 0301 	orr.w	r3, r3, #1
 80067dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067de:	f7fc f8cf 	bl	8002980 <HAL_GetTick>
 80067e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067e4:	e008      	b.n	80067f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80067e6:	f7fc f8cb 	bl	8002980 <HAL_GetTick>
 80067ea:	4602      	mov	r2, r0
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	d901      	bls.n	80067f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80067f4:	2303      	movs	r3, #3
 80067f6:	e143      	b.n	8006a80 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067f8:	4b0c      	ldr	r3, [pc, #48]	; (800682c <HAL_RCC_OscConfig+0x280>)
 80067fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067fc:	f003 0302 	and.w	r3, r3, #2
 8006800:	2b00      	cmp	r3, #0
 8006802:	d0f0      	beq.n	80067e6 <HAL_RCC_OscConfig+0x23a>
 8006804:	e01a      	b.n	800683c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006806:	4b09      	ldr	r3, [pc, #36]	; (800682c <HAL_RCC_OscConfig+0x280>)
 8006808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800680a:	4a08      	ldr	r2, [pc, #32]	; (800682c <HAL_RCC_OscConfig+0x280>)
 800680c:	f023 0301 	bic.w	r3, r3, #1
 8006810:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006812:	f7fc f8b5 	bl	8002980 <HAL_GetTick>
 8006816:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006818:	e00a      	b.n	8006830 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800681a:	f7fc f8b1 	bl	8002980 <HAL_GetTick>
 800681e:	4602      	mov	r2, r0
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	1ad3      	subs	r3, r2, r3
 8006824:	2b02      	cmp	r3, #2
 8006826:	d903      	bls.n	8006830 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006828:	2303      	movs	r3, #3
 800682a:	e129      	b.n	8006a80 <HAL_RCC_OscConfig+0x4d4>
 800682c:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006830:	4b95      	ldr	r3, [pc, #596]	; (8006a88 <HAL_RCC_OscConfig+0x4dc>)
 8006832:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006834:	f003 0302 	and.w	r3, r3, #2
 8006838:	2b00      	cmp	r3, #0
 800683a:	d1ee      	bne.n	800681a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f003 0304 	and.w	r3, r3, #4
 8006844:	2b00      	cmp	r3, #0
 8006846:	f000 80a4 	beq.w	8006992 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800684a:	4b8f      	ldr	r3, [pc, #572]	; (8006a88 <HAL_RCC_OscConfig+0x4dc>)
 800684c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006852:	2b00      	cmp	r3, #0
 8006854:	d10d      	bne.n	8006872 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006856:	4b8c      	ldr	r3, [pc, #560]	; (8006a88 <HAL_RCC_OscConfig+0x4dc>)
 8006858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800685a:	4a8b      	ldr	r2, [pc, #556]	; (8006a88 <HAL_RCC_OscConfig+0x4dc>)
 800685c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006860:	6413      	str	r3, [r2, #64]	; 0x40
 8006862:	4b89      	ldr	r3, [pc, #548]	; (8006a88 <HAL_RCC_OscConfig+0x4dc>)
 8006864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800686a:	60fb      	str	r3, [r7, #12]
 800686c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800686e:	2301      	movs	r3, #1
 8006870:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006872:	4b86      	ldr	r3, [pc, #536]	; (8006a8c <HAL_RCC_OscConfig+0x4e0>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800687a:	2b00      	cmp	r3, #0
 800687c:	d118      	bne.n	80068b0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800687e:	4b83      	ldr	r3, [pc, #524]	; (8006a8c <HAL_RCC_OscConfig+0x4e0>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a82      	ldr	r2, [pc, #520]	; (8006a8c <HAL_RCC_OscConfig+0x4e0>)
 8006884:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006888:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800688a:	f7fc f879 	bl	8002980 <HAL_GetTick>
 800688e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006890:	e008      	b.n	80068a4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006892:	f7fc f875 	bl	8002980 <HAL_GetTick>
 8006896:	4602      	mov	r2, r0
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	1ad3      	subs	r3, r2, r3
 800689c:	2b64      	cmp	r3, #100	; 0x64
 800689e:	d901      	bls.n	80068a4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80068a0:	2303      	movs	r3, #3
 80068a2:	e0ed      	b.n	8006a80 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068a4:	4b79      	ldr	r3, [pc, #484]	; (8006a8c <HAL_RCC_OscConfig+0x4e0>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d0f0      	beq.n	8006892 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d106      	bne.n	80068c6 <HAL_RCC_OscConfig+0x31a>
 80068b8:	4b73      	ldr	r3, [pc, #460]	; (8006a88 <HAL_RCC_OscConfig+0x4dc>)
 80068ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068bc:	4a72      	ldr	r2, [pc, #456]	; (8006a88 <HAL_RCC_OscConfig+0x4dc>)
 80068be:	f043 0301 	orr.w	r3, r3, #1
 80068c2:	6713      	str	r3, [r2, #112]	; 0x70
 80068c4:	e02d      	b.n	8006922 <HAL_RCC_OscConfig+0x376>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d10c      	bne.n	80068e8 <HAL_RCC_OscConfig+0x33c>
 80068ce:	4b6e      	ldr	r3, [pc, #440]	; (8006a88 <HAL_RCC_OscConfig+0x4dc>)
 80068d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068d2:	4a6d      	ldr	r2, [pc, #436]	; (8006a88 <HAL_RCC_OscConfig+0x4dc>)
 80068d4:	f023 0301 	bic.w	r3, r3, #1
 80068d8:	6713      	str	r3, [r2, #112]	; 0x70
 80068da:	4b6b      	ldr	r3, [pc, #428]	; (8006a88 <HAL_RCC_OscConfig+0x4dc>)
 80068dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068de:	4a6a      	ldr	r2, [pc, #424]	; (8006a88 <HAL_RCC_OscConfig+0x4dc>)
 80068e0:	f023 0304 	bic.w	r3, r3, #4
 80068e4:	6713      	str	r3, [r2, #112]	; 0x70
 80068e6:	e01c      	b.n	8006922 <HAL_RCC_OscConfig+0x376>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	2b05      	cmp	r3, #5
 80068ee:	d10c      	bne.n	800690a <HAL_RCC_OscConfig+0x35e>
 80068f0:	4b65      	ldr	r3, [pc, #404]	; (8006a88 <HAL_RCC_OscConfig+0x4dc>)
 80068f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068f4:	4a64      	ldr	r2, [pc, #400]	; (8006a88 <HAL_RCC_OscConfig+0x4dc>)
 80068f6:	f043 0304 	orr.w	r3, r3, #4
 80068fa:	6713      	str	r3, [r2, #112]	; 0x70
 80068fc:	4b62      	ldr	r3, [pc, #392]	; (8006a88 <HAL_RCC_OscConfig+0x4dc>)
 80068fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006900:	4a61      	ldr	r2, [pc, #388]	; (8006a88 <HAL_RCC_OscConfig+0x4dc>)
 8006902:	f043 0301 	orr.w	r3, r3, #1
 8006906:	6713      	str	r3, [r2, #112]	; 0x70
 8006908:	e00b      	b.n	8006922 <HAL_RCC_OscConfig+0x376>
 800690a:	4b5f      	ldr	r3, [pc, #380]	; (8006a88 <HAL_RCC_OscConfig+0x4dc>)
 800690c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800690e:	4a5e      	ldr	r2, [pc, #376]	; (8006a88 <HAL_RCC_OscConfig+0x4dc>)
 8006910:	f023 0301 	bic.w	r3, r3, #1
 8006914:	6713      	str	r3, [r2, #112]	; 0x70
 8006916:	4b5c      	ldr	r3, [pc, #368]	; (8006a88 <HAL_RCC_OscConfig+0x4dc>)
 8006918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800691a:	4a5b      	ldr	r2, [pc, #364]	; (8006a88 <HAL_RCC_OscConfig+0x4dc>)
 800691c:	f023 0304 	bic.w	r3, r3, #4
 8006920:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d015      	beq.n	8006956 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800692a:	f7fc f829 	bl	8002980 <HAL_GetTick>
 800692e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006930:	e00a      	b.n	8006948 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006932:	f7fc f825 	bl	8002980 <HAL_GetTick>
 8006936:	4602      	mov	r2, r0
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	1ad3      	subs	r3, r2, r3
 800693c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006940:	4293      	cmp	r3, r2
 8006942:	d901      	bls.n	8006948 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006944:	2303      	movs	r3, #3
 8006946:	e09b      	b.n	8006a80 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006948:	4b4f      	ldr	r3, [pc, #316]	; (8006a88 <HAL_RCC_OscConfig+0x4dc>)
 800694a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800694c:	f003 0302 	and.w	r3, r3, #2
 8006950:	2b00      	cmp	r3, #0
 8006952:	d0ee      	beq.n	8006932 <HAL_RCC_OscConfig+0x386>
 8006954:	e014      	b.n	8006980 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006956:	f7fc f813 	bl	8002980 <HAL_GetTick>
 800695a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800695c:	e00a      	b.n	8006974 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800695e:	f7fc f80f 	bl	8002980 <HAL_GetTick>
 8006962:	4602      	mov	r2, r0
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	1ad3      	subs	r3, r2, r3
 8006968:	f241 3288 	movw	r2, #5000	; 0x1388
 800696c:	4293      	cmp	r3, r2
 800696e:	d901      	bls.n	8006974 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006970:	2303      	movs	r3, #3
 8006972:	e085      	b.n	8006a80 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006974:	4b44      	ldr	r3, [pc, #272]	; (8006a88 <HAL_RCC_OscConfig+0x4dc>)
 8006976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006978:	f003 0302 	and.w	r3, r3, #2
 800697c:	2b00      	cmp	r3, #0
 800697e:	d1ee      	bne.n	800695e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006980:	7dfb      	ldrb	r3, [r7, #23]
 8006982:	2b01      	cmp	r3, #1
 8006984:	d105      	bne.n	8006992 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006986:	4b40      	ldr	r3, [pc, #256]	; (8006a88 <HAL_RCC_OscConfig+0x4dc>)
 8006988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800698a:	4a3f      	ldr	r2, [pc, #252]	; (8006a88 <HAL_RCC_OscConfig+0x4dc>)
 800698c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006990:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	699b      	ldr	r3, [r3, #24]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d071      	beq.n	8006a7e <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800699a:	4b3b      	ldr	r3, [pc, #236]	; (8006a88 <HAL_RCC_OscConfig+0x4dc>)
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	f003 030c 	and.w	r3, r3, #12
 80069a2:	2b08      	cmp	r3, #8
 80069a4:	d069      	beq.n	8006a7a <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	699b      	ldr	r3, [r3, #24]
 80069aa:	2b02      	cmp	r3, #2
 80069ac:	d14b      	bne.n	8006a46 <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069ae:	4b36      	ldr	r3, [pc, #216]	; (8006a88 <HAL_RCC_OscConfig+0x4dc>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a35      	ldr	r2, [pc, #212]	; (8006a88 <HAL_RCC_OscConfig+0x4dc>)
 80069b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80069b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069ba:	f7fb ffe1 	bl	8002980 <HAL_GetTick>
 80069be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069c0:	e008      	b.n	80069d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069c2:	f7fb ffdd 	bl	8002980 <HAL_GetTick>
 80069c6:	4602      	mov	r2, r0
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	1ad3      	subs	r3, r2, r3
 80069cc:	2b02      	cmp	r3, #2
 80069ce:	d901      	bls.n	80069d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80069d0:	2303      	movs	r3, #3
 80069d2:	e055      	b.n	8006a80 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069d4:	4b2c      	ldr	r3, [pc, #176]	; (8006a88 <HAL_RCC_OscConfig+0x4dc>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d1f0      	bne.n	80069c2 <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	69da      	ldr	r2, [r3, #28]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6a1b      	ldr	r3, [r3, #32]
 80069e8:	431a      	orrs	r2, r3
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ee:	019b      	lsls	r3, r3, #6
 80069f0:	431a      	orrs	r2, r3
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f6:	085b      	lsrs	r3, r3, #1
 80069f8:	3b01      	subs	r3, #1
 80069fa:	041b      	lsls	r3, r3, #16
 80069fc:	431a      	orrs	r2, r3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a02:	061b      	lsls	r3, r3, #24
 8006a04:	431a      	orrs	r2, r3
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a0a:	071b      	lsls	r3, r3, #28
 8006a0c:	491e      	ldr	r1, [pc, #120]	; (8006a88 <HAL_RCC_OscConfig+0x4dc>)
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a12:	4b1d      	ldr	r3, [pc, #116]	; (8006a88 <HAL_RCC_OscConfig+0x4dc>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a1c      	ldr	r2, [pc, #112]	; (8006a88 <HAL_RCC_OscConfig+0x4dc>)
 8006a18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a1e:	f7fb ffaf 	bl	8002980 <HAL_GetTick>
 8006a22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a24:	e008      	b.n	8006a38 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a26:	f7fb ffab 	bl	8002980 <HAL_GetTick>
 8006a2a:	4602      	mov	r2, r0
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	1ad3      	subs	r3, r2, r3
 8006a30:	2b02      	cmp	r3, #2
 8006a32:	d901      	bls.n	8006a38 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8006a34:	2303      	movs	r3, #3
 8006a36:	e023      	b.n	8006a80 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a38:	4b13      	ldr	r3, [pc, #76]	; (8006a88 <HAL_RCC_OscConfig+0x4dc>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d0f0      	beq.n	8006a26 <HAL_RCC_OscConfig+0x47a>
 8006a44:	e01b      	b.n	8006a7e <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a46:	4b10      	ldr	r3, [pc, #64]	; (8006a88 <HAL_RCC_OscConfig+0x4dc>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a0f      	ldr	r2, [pc, #60]	; (8006a88 <HAL_RCC_OscConfig+0x4dc>)
 8006a4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a52:	f7fb ff95 	bl	8002980 <HAL_GetTick>
 8006a56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a58:	e008      	b.n	8006a6c <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a5a:	f7fb ff91 	bl	8002980 <HAL_GetTick>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	1ad3      	subs	r3, r2, r3
 8006a64:	2b02      	cmp	r3, #2
 8006a66:	d901      	bls.n	8006a6c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006a68:	2303      	movs	r3, #3
 8006a6a:	e009      	b.n	8006a80 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a6c:	4b06      	ldr	r3, [pc, #24]	; (8006a88 <HAL_RCC_OscConfig+0x4dc>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d1f0      	bne.n	8006a5a <HAL_RCC_OscConfig+0x4ae>
 8006a78:	e001      	b.n	8006a7e <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e000      	b.n	8006a80 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 8006a7e:	2300      	movs	r3, #0
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3718      	adds	r7, #24
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	40023800 	.word	0x40023800
 8006a8c:	40007000 	.word	0x40007000

08006a90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d101      	bne.n	8006aa8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	e0ce      	b.n	8006c46 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006aa8:	4b69      	ldr	r3, [pc, #420]	; (8006c50 <HAL_RCC_ClockConfig+0x1c0>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 030f 	and.w	r3, r3, #15
 8006ab0:	683a      	ldr	r2, [r7, #0]
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d910      	bls.n	8006ad8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ab6:	4b66      	ldr	r3, [pc, #408]	; (8006c50 <HAL_RCC_ClockConfig+0x1c0>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f023 020f 	bic.w	r2, r3, #15
 8006abe:	4964      	ldr	r1, [pc, #400]	; (8006c50 <HAL_RCC_ClockConfig+0x1c0>)
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ac6:	4b62      	ldr	r3, [pc, #392]	; (8006c50 <HAL_RCC_ClockConfig+0x1c0>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f003 030f 	and.w	r3, r3, #15
 8006ace:	683a      	ldr	r2, [r7, #0]
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d001      	beq.n	8006ad8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	e0b6      	b.n	8006c46 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 0302 	and.w	r3, r3, #2
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d020      	beq.n	8006b26 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 0304 	and.w	r3, r3, #4
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d005      	beq.n	8006afc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006af0:	4b58      	ldr	r3, [pc, #352]	; (8006c54 <HAL_RCC_ClockConfig+0x1c4>)
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	4a57      	ldr	r2, [pc, #348]	; (8006c54 <HAL_RCC_ClockConfig+0x1c4>)
 8006af6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006afa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 0308 	and.w	r3, r3, #8
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d005      	beq.n	8006b14 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b08:	4b52      	ldr	r3, [pc, #328]	; (8006c54 <HAL_RCC_ClockConfig+0x1c4>)
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	4a51      	ldr	r2, [pc, #324]	; (8006c54 <HAL_RCC_ClockConfig+0x1c4>)
 8006b0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006b12:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b14:	4b4f      	ldr	r3, [pc, #316]	; (8006c54 <HAL_RCC_ClockConfig+0x1c4>)
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	494c      	ldr	r1, [pc, #304]	; (8006c54 <HAL_RCC_ClockConfig+0x1c4>)
 8006b22:	4313      	orrs	r3, r2
 8006b24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 0301 	and.w	r3, r3, #1
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d040      	beq.n	8006bb4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d107      	bne.n	8006b4a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b3a:	4b46      	ldr	r3, [pc, #280]	; (8006c54 <HAL_RCC_ClockConfig+0x1c4>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d115      	bne.n	8006b72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e07d      	b.n	8006c46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	d107      	bne.n	8006b62 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b52:	4b40      	ldr	r3, [pc, #256]	; (8006c54 <HAL_RCC_ClockConfig+0x1c4>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d109      	bne.n	8006b72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e071      	b.n	8006c46 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b62:	4b3c      	ldr	r3, [pc, #240]	; (8006c54 <HAL_RCC_ClockConfig+0x1c4>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 0302 	and.w	r3, r3, #2
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d101      	bne.n	8006b72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e069      	b.n	8006c46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b72:	4b38      	ldr	r3, [pc, #224]	; (8006c54 <HAL_RCC_ClockConfig+0x1c4>)
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	f023 0203 	bic.w	r2, r3, #3
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	4935      	ldr	r1, [pc, #212]	; (8006c54 <HAL_RCC_ClockConfig+0x1c4>)
 8006b80:	4313      	orrs	r3, r2
 8006b82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b84:	f7fb fefc 	bl	8002980 <HAL_GetTick>
 8006b88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b8a:	e00a      	b.n	8006ba2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b8c:	f7fb fef8 	bl	8002980 <HAL_GetTick>
 8006b90:	4602      	mov	r2, r0
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	1ad3      	subs	r3, r2, r3
 8006b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d901      	bls.n	8006ba2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	e051      	b.n	8006c46 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ba2:	4b2c      	ldr	r3, [pc, #176]	; (8006c54 <HAL_RCC_ClockConfig+0x1c4>)
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	f003 020c 	and.w	r2, r3, #12
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d1eb      	bne.n	8006b8c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006bb4:	4b26      	ldr	r3, [pc, #152]	; (8006c50 <HAL_RCC_ClockConfig+0x1c0>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f003 030f 	and.w	r3, r3, #15
 8006bbc:	683a      	ldr	r2, [r7, #0]
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d210      	bcs.n	8006be4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bc2:	4b23      	ldr	r3, [pc, #140]	; (8006c50 <HAL_RCC_ClockConfig+0x1c0>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f023 020f 	bic.w	r2, r3, #15
 8006bca:	4921      	ldr	r1, [pc, #132]	; (8006c50 <HAL_RCC_ClockConfig+0x1c0>)
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bd2:	4b1f      	ldr	r3, [pc, #124]	; (8006c50 <HAL_RCC_ClockConfig+0x1c0>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 030f 	and.w	r3, r3, #15
 8006bda:	683a      	ldr	r2, [r7, #0]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d001      	beq.n	8006be4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	e030      	b.n	8006c46 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f003 0304 	and.w	r3, r3, #4
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d008      	beq.n	8006c02 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006bf0:	4b18      	ldr	r3, [pc, #96]	; (8006c54 <HAL_RCC_ClockConfig+0x1c4>)
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	68db      	ldr	r3, [r3, #12]
 8006bfc:	4915      	ldr	r1, [pc, #84]	; (8006c54 <HAL_RCC_ClockConfig+0x1c4>)
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f003 0308 	and.w	r3, r3, #8
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d009      	beq.n	8006c22 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006c0e:	4b11      	ldr	r3, [pc, #68]	; (8006c54 <HAL_RCC_ClockConfig+0x1c4>)
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	00db      	lsls	r3, r3, #3
 8006c1c:	490d      	ldr	r1, [pc, #52]	; (8006c54 <HAL_RCC_ClockConfig+0x1c4>)
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006c22:	f000 f81d 	bl	8006c60 <HAL_RCC_GetSysClockFreq>
 8006c26:	4601      	mov	r1, r0
 8006c28:	4b0a      	ldr	r3, [pc, #40]	; (8006c54 <HAL_RCC_ClockConfig+0x1c4>)
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	091b      	lsrs	r3, r3, #4
 8006c2e:	f003 030f 	and.w	r3, r3, #15
 8006c32:	4a09      	ldr	r2, [pc, #36]	; (8006c58 <HAL_RCC_ClockConfig+0x1c8>)
 8006c34:	5cd3      	ldrb	r3, [r2, r3]
 8006c36:	fa21 f303 	lsr.w	r3, r1, r3
 8006c3a:	4a08      	ldr	r2, [pc, #32]	; (8006c5c <HAL_RCC_ClockConfig+0x1cc>)
 8006c3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006c3e:	2000      	movs	r0, #0
 8006c40:	f7fb fe5a 	bl	80028f8 <HAL_InitTick>

  return HAL_OK;
 8006c44:	2300      	movs	r3, #0
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3710      	adds	r7, #16
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	bf00      	nop
 8006c50:	40023c00 	.word	0x40023c00
 8006c54:	40023800 	.word	0x40023800
 8006c58:	08125a68 	.word	0x08125a68
 8006c5c:	20000054 	.word	0x20000054

08006c60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c62:	b085      	sub	sp, #20
 8006c64:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006c66:	2300      	movs	r3, #0
 8006c68:	607b      	str	r3, [r7, #4]
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	60fb      	str	r3, [r7, #12]
 8006c6e:	2300      	movs	r3, #0
 8006c70:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8006c72:	2300      	movs	r3, #0
 8006c74:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c76:	4b50      	ldr	r3, [pc, #320]	; (8006db8 <HAL_RCC_GetSysClockFreq+0x158>)
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	f003 030c 	and.w	r3, r3, #12
 8006c7e:	2b04      	cmp	r3, #4
 8006c80:	d007      	beq.n	8006c92 <HAL_RCC_GetSysClockFreq+0x32>
 8006c82:	2b08      	cmp	r3, #8
 8006c84:	d008      	beq.n	8006c98 <HAL_RCC_GetSysClockFreq+0x38>
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	f040 808d 	bne.w	8006da6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c8c:	4b4b      	ldr	r3, [pc, #300]	; (8006dbc <HAL_RCC_GetSysClockFreq+0x15c>)
 8006c8e:	60bb      	str	r3, [r7, #8]
       break;
 8006c90:	e08c      	b.n	8006dac <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006c92:	4b4b      	ldr	r3, [pc, #300]	; (8006dc0 <HAL_RCC_GetSysClockFreq+0x160>)
 8006c94:	60bb      	str	r3, [r7, #8]
      break;
 8006c96:	e089      	b.n	8006dac <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c98:	4b47      	ldr	r3, [pc, #284]	; (8006db8 <HAL_RCC_GetSysClockFreq+0x158>)
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ca0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006ca2:	4b45      	ldr	r3, [pc, #276]	; (8006db8 <HAL_RCC_GetSysClockFreq+0x158>)
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d023      	beq.n	8006cf6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006cae:	4b42      	ldr	r3, [pc, #264]	; (8006db8 <HAL_RCC_GetSysClockFreq+0x158>)
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	099b      	lsrs	r3, r3, #6
 8006cb4:	f04f 0400 	mov.w	r4, #0
 8006cb8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006cbc:	f04f 0200 	mov.w	r2, #0
 8006cc0:	ea03 0501 	and.w	r5, r3, r1
 8006cc4:	ea04 0602 	and.w	r6, r4, r2
 8006cc8:	4a3d      	ldr	r2, [pc, #244]	; (8006dc0 <HAL_RCC_GetSysClockFreq+0x160>)
 8006cca:	fb02 f106 	mul.w	r1, r2, r6
 8006cce:	2200      	movs	r2, #0
 8006cd0:	fb02 f205 	mul.w	r2, r2, r5
 8006cd4:	440a      	add	r2, r1
 8006cd6:	493a      	ldr	r1, [pc, #232]	; (8006dc0 <HAL_RCC_GetSysClockFreq+0x160>)
 8006cd8:	fba5 0101 	umull	r0, r1, r5, r1
 8006cdc:	1853      	adds	r3, r2, r1
 8006cde:	4619      	mov	r1, r3
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f04f 0400 	mov.w	r4, #0
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	4623      	mov	r3, r4
 8006cea:	f7f9 faf9 	bl	80002e0 <__aeabi_uldivmod>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	460c      	mov	r4, r1
 8006cf2:	60fb      	str	r3, [r7, #12]
 8006cf4:	e049      	b.n	8006d8a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006cf6:	4b30      	ldr	r3, [pc, #192]	; (8006db8 <HAL_RCC_GetSysClockFreq+0x158>)
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	099b      	lsrs	r3, r3, #6
 8006cfc:	f04f 0400 	mov.w	r4, #0
 8006d00:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006d04:	f04f 0200 	mov.w	r2, #0
 8006d08:	ea03 0501 	and.w	r5, r3, r1
 8006d0c:	ea04 0602 	and.w	r6, r4, r2
 8006d10:	4629      	mov	r1, r5
 8006d12:	4632      	mov	r2, r6
 8006d14:	f04f 0300 	mov.w	r3, #0
 8006d18:	f04f 0400 	mov.w	r4, #0
 8006d1c:	0154      	lsls	r4, r2, #5
 8006d1e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006d22:	014b      	lsls	r3, r1, #5
 8006d24:	4619      	mov	r1, r3
 8006d26:	4622      	mov	r2, r4
 8006d28:	1b49      	subs	r1, r1, r5
 8006d2a:	eb62 0206 	sbc.w	r2, r2, r6
 8006d2e:	f04f 0300 	mov.w	r3, #0
 8006d32:	f04f 0400 	mov.w	r4, #0
 8006d36:	0194      	lsls	r4, r2, #6
 8006d38:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006d3c:	018b      	lsls	r3, r1, #6
 8006d3e:	1a5b      	subs	r3, r3, r1
 8006d40:	eb64 0402 	sbc.w	r4, r4, r2
 8006d44:	f04f 0100 	mov.w	r1, #0
 8006d48:	f04f 0200 	mov.w	r2, #0
 8006d4c:	00e2      	lsls	r2, r4, #3
 8006d4e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006d52:	00d9      	lsls	r1, r3, #3
 8006d54:	460b      	mov	r3, r1
 8006d56:	4614      	mov	r4, r2
 8006d58:	195b      	adds	r3, r3, r5
 8006d5a:	eb44 0406 	adc.w	r4, r4, r6
 8006d5e:	f04f 0100 	mov.w	r1, #0
 8006d62:	f04f 0200 	mov.w	r2, #0
 8006d66:	02a2      	lsls	r2, r4, #10
 8006d68:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006d6c:	0299      	lsls	r1, r3, #10
 8006d6e:	460b      	mov	r3, r1
 8006d70:	4614      	mov	r4, r2
 8006d72:	4618      	mov	r0, r3
 8006d74:	4621      	mov	r1, r4
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f04f 0400 	mov.w	r4, #0
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	4623      	mov	r3, r4
 8006d80:	f7f9 faae 	bl	80002e0 <__aeabi_uldivmod>
 8006d84:	4603      	mov	r3, r0
 8006d86:	460c      	mov	r4, r1
 8006d88:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8006d8a:	4b0b      	ldr	r3, [pc, #44]	; (8006db8 <HAL_RCC_GetSysClockFreq+0x158>)
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	0c1b      	lsrs	r3, r3, #16
 8006d90:	f003 0303 	and.w	r3, r3, #3
 8006d94:	3301      	adds	r3, #1
 8006d96:	005b      	lsls	r3, r3, #1
 8006d98:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006d9a:	68fa      	ldr	r2, [r7, #12]
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006da2:	60bb      	str	r3, [r7, #8]
      break;
 8006da4:	e002      	b.n	8006dac <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006da6:	4b05      	ldr	r3, [pc, #20]	; (8006dbc <HAL_RCC_GetSysClockFreq+0x15c>)
 8006da8:	60bb      	str	r3, [r7, #8]
      break;
 8006daa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006dac:	68bb      	ldr	r3, [r7, #8]
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3714      	adds	r7, #20
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006db6:	bf00      	nop
 8006db8:	40023800 	.word	0x40023800
 8006dbc:	00f42400 	.word	0x00f42400
 8006dc0:	017d7840 	.word	0x017d7840

08006dc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b088      	sub	sp, #32
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f003 0301 	and.w	r3, r3, #1
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d012      	beq.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006dec:	4b69      	ldr	r3, [pc, #420]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	4a68      	ldr	r2, [pc, #416]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006df2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006df6:	6093      	str	r3, [r2, #8]
 8006df8:	4b66      	ldr	r3, [pc, #408]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dfa:	689a      	ldr	r2, [r3, #8]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e00:	4964      	ldr	r1, [pc, #400]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e02:	4313      	orrs	r3, r2
 8006e04:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d101      	bne.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d017      	beq.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006e1e:	4b5d      	ldr	r3, [pc, #372]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e2c:	4959      	ldr	r1, [pc, #356]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e3c:	d101      	bne.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d101      	bne.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d017      	beq.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006e5a:	4b4e      	ldr	r3, [pc, #312]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e60:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e68:	494a      	ldr	r1, [pc, #296]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e78:	d101      	bne.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d101      	bne.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006e86:	2301      	movs	r3, #1
 8006e88:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d001      	beq.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006e96:	2301      	movs	r3, #1
 8006e98:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f003 0320 	and.w	r3, r3, #32
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	f000 808b 	beq.w	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006ea8:	4b3a      	ldr	r3, [pc, #232]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eac:	4a39      	ldr	r2, [pc, #228]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006eae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006eb2:	6413      	str	r3, [r2, #64]	; 0x40
 8006eb4:	4b37      	ldr	r3, [pc, #220]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ebc:	60bb      	str	r3, [r7, #8]
 8006ebe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006ec0:	4b35      	ldr	r3, [pc, #212]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a34      	ldr	r2, [pc, #208]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006ec6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006eca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ecc:	f7fb fd58 	bl	8002980 <HAL_GetTick>
 8006ed0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006ed2:	e008      	b.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ed4:	f7fb fd54 	bl	8002980 <HAL_GetTick>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	1ad3      	subs	r3, r2, r3
 8006ede:	2b64      	cmp	r3, #100	; 0x64
 8006ee0:	d901      	bls.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006ee2:	2303      	movs	r3, #3
 8006ee4:	e38d      	b.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006ee6:	4b2c      	ldr	r3, [pc, #176]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d0f0      	beq.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006ef2:	4b28      	ldr	r3, [pc, #160]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ef6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006efa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d035      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f0a:	693a      	ldr	r2, [r7, #16]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d02e      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006f10:	4b20      	ldr	r3, [pc, #128]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f18:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006f1a:	4b1e      	ldr	r3, [pc, #120]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f1e:	4a1d      	ldr	r2, [pc, #116]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f24:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006f26:	4b1b      	ldr	r3, [pc, #108]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f2a:	4a1a      	ldr	r2, [pc, #104]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f30:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006f32:	4a18      	ldr	r2, [pc, #96]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006f38:	4b16      	ldr	r3, [pc, #88]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f3c:	f003 0301 	and.w	r3, r3, #1
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d114      	bne.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f44:	f7fb fd1c 	bl	8002980 <HAL_GetTick>
 8006f48:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f4a:	e00a      	b.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f4c:	f7fb fd18 	bl	8002980 <HAL_GetTick>
 8006f50:	4602      	mov	r2, r0
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	1ad3      	subs	r3, r2, r3
 8006f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d901      	bls.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006f5e:	2303      	movs	r3, #3
 8006f60:	e34f      	b.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f62:	4b0c      	ldr	r3, [pc, #48]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f66:	f003 0302 	and.w	r3, r3, #2
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d0ee      	beq.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f7a:	d111      	bne.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006f7c:	4b05      	ldr	r3, [pc, #20]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006f88:	4b04      	ldr	r3, [pc, #16]	; (8006f9c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006f8a:	400b      	ands	r3, r1
 8006f8c:	4901      	ldr	r1, [pc, #4]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	608b      	str	r3, [r1, #8]
 8006f92:	e00b      	b.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006f94:	40023800 	.word	0x40023800
 8006f98:	40007000 	.word	0x40007000
 8006f9c:	0ffffcff 	.word	0x0ffffcff
 8006fa0:	4bb3      	ldr	r3, [pc, #716]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	4ab2      	ldr	r2, [pc, #712]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006fa6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006faa:	6093      	str	r3, [r2, #8]
 8006fac:	4bb0      	ldr	r3, [pc, #704]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006fae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fb8:	49ad      	ldr	r1, [pc, #692]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f003 0310 	and.w	r3, r3, #16
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d010      	beq.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006fca:	4ba9      	ldr	r3, [pc, #676]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006fcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fd0:	4aa7      	ldr	r2, [pc, #668]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006fd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006fd6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006fda:	4ba5      	ldr	r3, [pc, #660]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006fdc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe4:	49a2      	ldr	r1, [pc, #648]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d00a      	beq.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006ff8:	4b9d      	ldr	r3, [pc, #628]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ffe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007006:	499a      	ldr	r1, [pc, #616]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007008:	4313      	orrs	r3, r2
 800700a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007016:	2b00      	cmp	r3, #0
 8007018:	d00a      	beq.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800701a:	4b95      	ldr	r3, [pc, #596]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800701c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007020:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007028:	4991      	ldr	r1, [pc, #580]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800702a:	4313      	orrs	r3, r2
 800702c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007038:	2b00      	cmp	r3, #0
 800703a:	d00a      	beq.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800703c:	4b8c      	ldr	r3, [pc, #560]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800703e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007042:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800704a:	4989      	ldr	r1, [pc, #548]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800704c:	4313      	orrs	r3, r2
 800704e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800705a:	2b00      	cmp	r3, #0
 800705c:	d00a      	beq.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800705e:	4b84      	ldr	r3, [pc, #528]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007064:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800706c:	4980      	ldr	r1, [pc, #512]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800706e:	4313      	orrs	r3, r2
 8007070:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800707c:	2b00      	cmp	r3, #0
 800707e:	d00a      	beq.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007080:	4b7b      	ldr	r3, [pc, #492]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007086:	f023 0203 	bic.w	r2, r3, #3
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800708e:	4978      	ldr	r1, [pc, #480]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007090:	4313      	orrs	r3, r2
 8007092:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d00a      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80070a2:	4b73      	ldr	r3, [pc, #460]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070a8:	f023 020c 	bic.w	r2, r3, #12
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070b0:	496f      	ldr	r1, [pc, #444]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070b2:	4313      	orrs	r3, r2
 80070b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d00a      	beq.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80070c4:	4b6a      	ldr	r3, [pc, #424]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070ca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070d2:	4967      	ldr	r1, [pc, #412]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070d4:	4313      	orrs	r3, r2
 80070d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d00a      	beq.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80070e6:	4b62      	ldr	r3, [pc, #392]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070ec:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070f4:	495e      	ldr	r1, [pc, #376]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070f6:	4313      	orrs	r3, r2
 80070f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007104:	2b00      	cmp	r3, #0
 8007106:	d00a      	beq.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007108:	4b59      	ldr	r3, [pc, #356]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800710a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800710e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007116:	4956      	ldr	r1, [pc, #344]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007118:	4313      	orrs	r3, r2
 800711a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007126:	2b00      	cmp	r3, #0
 8007128:	d00a      	beq.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800712a:	4b51      	ldr	r3, [pc, #324]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800712c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007130:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007138:	494d      	ldr	r1, [pc, #308]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800713a:	4313      	orrs	r3, r2
 800713c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007148:	2b00      	cmp	r3, #0
 800714a:	d00a      	beq.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800714c:	4b48      	ldr	r3, [pc, #288]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800714e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007152:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800715a:	4945      	ldr	r1, [pc, #276]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800715c:	4313      	orrs	r3, r2
 800715e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800716a:	2b00      	cmp	r3, #0
 800716c:	d00a      	beq.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800716e:	4b40      	ldr	r3, [pc, #256]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007174:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800717c:	493c      	ldr	r1, [pc, #240]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800717e:	4313      	orrs	r3, r2
 8007180:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800718c:	2b00      	cmp	r3, #0
 800718e:	d00a      	beq.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007190:	4b37      	ldr	r3, [pc, #220]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007196:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800719e:	4934      	ldr	r1, [pc, #208]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80071a0:	4313      	orrs	r3, r2
 80071a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d011      	beq.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80071b2:	4b2f      	ldr	r3, [pc, #188]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80071b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071b8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071c0:	492b      	ldr	r1, [pc, #172]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80071c2:	4313      	orrs	r3, r2
 80071c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071d0:	d101      	bne.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80071d2:	2301      	movs	r3, #1
 80071d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f003 0308 	and.w	r3, r3, #8
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d001      	beq.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80071e2:	2301      	movs	r3, #1
 80071e4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d00a      	beq.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80071f2:	4b1f      	ldr	r3, [pc, #124]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80071f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071f8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007200:	491b      	ldr	r1, [pc, #108]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007202:	4313      	orrs	r3, r2
 8007204:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007210:	2b00      	cmp	r3, #0
 8007212:	d00b      	beq.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007214:	4b16      	ldr	r3, [pc, #88]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800721a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007224:	4912      	ldr	r1, [pc, #72]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007226:	4313      	orrs	r3, r2
 8007228:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007234:	2b00      	cmp	r3, #0
 8007236:	d00b      	beq.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8007238:	4b0d      	ldr	r3, [pc, #52]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800723a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800723e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007248:	4909      	ldr	r1, [pc, #36]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800724a:	4313      	orrs	r3, r2
 800724c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007258:	2b00      	cmp	r3, #0
 800725a:	d00f      	beq.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800725c:	4b04      	ldr	r3, [pc, #16]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800725e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007262:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800726c:	e002      	b.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800726e:	bf00      	nop
 8007270:	40023800 	.word	0x40023800
 8007274:	4985      	ldr	r1, [pc, #532]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007276:	4313      	orrs	r3, r2
 8007278:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007284:	2b00      	cmp	r3, #0
 8007286:	d00b      	beq.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007288:	4b80      	ldr	r3, [pc, #512]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800728a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800728e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007298:	497c      	ldr	r1, [pc, #496]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800729a:	4313      	orrs	r3, r2
 800729c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80072a0:	69fb      	ldr	r3, [r7, #28]
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d005      	beq.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072ae:	f040 80d6 	bne.w	800745e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80072b2:	4b76      	ldr	r3, [pc, #472]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a75      	ldr	r2, [pc, #468]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80072b8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80072bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072be:	f7fb fb5f 	bl	8002980 <HAL_GetTick>
 80072c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80072c4:	e008      	b.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80072c6:	f7fb fb5b 	bl	8002980 <HAL_GetTick>
 80072ca:	4602      	mov	r2, r0
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	1ad3      	subs	r3, r2, r3
 80072d0:	2b64      	cmp	r3, #100	; 0x64
 80072d2:	d901      	bls.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80072d4:	2303      	movs	r3, #3
 80072d6:	e194      	b.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80072d8:	4b6c      	ldr	r3, [pc, #432]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d1f0      	bne.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f003 0301 	and.w	r3, r3, #1
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d021      	beq.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x570>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d11d      	bne.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80072f8:	4b64      	ldr	r3, [pc, #400]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80072fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072fe:	0c1b      	lsrs	r3, r3, #16
 8007300:	f003 0303 	and.w	r3, r3, #3
 8007304:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007306:	4b61      	ldr	r3, [pc, #388]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007308:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800730c:	0e1b      	lsrs	r3, r3, #24
 800730e:	f003 030f 	and.w	r3, r3, #15
 8007312:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	019a      	lsls	r2, r3, #6
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	041b      	lsls	r3, r3, #16
 800731e:	431a      	orrs	r2, r3
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	061b      	lsls	r3, r3, #24
 8007324:	431a      	orrs	r2, r3
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	689b      	ldr	r3, [r3, #8]
 800732a:	071b      	lsls	r3, r3, #28
 800732c:	4957      	ldr	r1, [pc, #348]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800732e:	4313      	orrs	r3, r2
 8007330:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800733c:	2b00      	cmp	r3, #0
 800733e:	d004      	beq.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007344:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007348:	d00a      	beq.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007352:	2b00      	cmp	r3, #0
 8007354:	d02e      	beq.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800735a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800735e:	d129      	bne.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007360:	4b4a      	ldr	r3, [pc, #296]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007362:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007366:	0c1b      	lsrs	r3, r3, #16
 8007368:	f003 0303 	and.w	r3, r3, #3
 800736c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800736e:	4b47      	ldr	r3, [pc, #284]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007370:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007374:	0f1b      	lsrs	r3, r3, #28
 8007376:	f003 0307 	and.w	r3, r3, #7
 800737a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	019a      	lsls	r2, r3, #6
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	041b      	lsls	r3, r3, #16
 8007386:	431a      	orrs	r2, r3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	68db      	ldr	r3, [r3, #12]
 800738c:	061b      	lsls	r3, r3, #24
 800738e:	431a      	orrs	r2, r3
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	071b      	lsls	r3, r3, #28
 8007394:	493d      	ldr	r1, [pc, #244]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007396:	4313      	orrs	r3, r2
 8007398:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800739c:	4b3b      	ldr	r3, [pc, #236]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800739e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073a2:	f023 021f 	bic.w	r2, r3, #31
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073aa:	3b01      	subs	r3, #1
 80073ac:	4937      	ldr	r1, [pc, #220]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80073ae:	4313      	orrs	r3, r2
 80073b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d01d      	beq.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80073c0:	4b32      	ldr	r3, [pc, #200]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80073c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073c6:	0e1b      	lsrs	r3, r3, #24
 80073c8:	f003 030f 	and.w	r3, r3, #15
 80073cc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80073ce:	4b2f      	ldr	r3, [pc, #188]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80073d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073d4:	0f1b      	lsrs	r3, r3, #28
 80073d6:	f003 0307 	and.w	r3, r3, #7
 80073da:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	019a      	lsls	r2, r3, #6
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	691b      	ldr	r3, [r3, #16]
 80073e6:	041b      	lsls	r3, r3, #16
 80073e8:	431a      	orrs	r2, r3
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	061b      	lsls	r3, r3, #24
 80073ee:	431a      	orrs	r2, r3
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	071b      	lsls	r3, r3, #28
 80073f4:	4925      	ldr	r1, [pc, #148]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80073f6:	4313      	orrs	r3, r2
 80073f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007404:	2b00      	cmp	r3, #0
 8007406:	d011      	beq.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	019a      	lsls	r2, r3, #6
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	691b      	ldr	r3, [r3, #16]
 8007412:	041b      	lsls	r3, r3, #16
 8007414:	431a      	orrs	r2, r3
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	68db      	ldr	r3, [r3, #12]
 800741a:	061b      	lsls	r3, r3, #24
 800741c:	431a      	orrs	r2, r3
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	689b      	ldr	r3, [r3, #8]
 8007422:	071b      	lsls	r3, r3, #28
 8007424:	4919      	ldr	r1, [pc, #100]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007426:	4313      	orrs	r3, r2
 8007428:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800742c:	4b17      	ldr	r3, [pc, #92]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a16      	ldr	r2, [pc, #88]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007432:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007436:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007438:	f7fb faa2 	bl	8002980 <HAL_GetTick>
 800743c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800743e:	e008      	b.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007440:	f7fb fa9e 	bl	8002980 <HAL_GetTick>
 8007444:	4602      	mov	r2, r0
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	1ad3      	subs	r3, r2, r3
 800744a:	2b64      	cmp	r3, #100	; 0x64
 800744c:	d901      	bls.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800744e:	2303      	movs	r3, #3
 8007450:	e0d7      	b.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007452:	4b0e      	ldr	r3, [pc, #56]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800745a:	2b00      	cmp	r3, #0
 800745c:	d0f0      	beq.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800745e:	69bb      	ldr	r3, [r7, #24]
 8007460:	2b01      	cmp	r3, #1
 8007462:	f040 80cd 	bne.w	8007600 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007466:	4b09      	ldr	r3, [pc, #36]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a08      	ldr	r2, [pc, #32]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800746c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007470:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007472:	f7fb fa85 	bl	8002980 <HAL_GetTick>
 8007476:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007478:	e00a      	b.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800747a:	f7fb fa81 	bl	8002980 <HAL_GetTick>
 800747e:	4602      	mov	r2, r0
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	1ad3      	subs	r3, r2, r3
 8007484:	2b64      	cmp	r3, #100	; 0x64
 8007486:	d903      	bls.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007488:	2303      	movs	r3, #3
 800748a:	e0ba      	b.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 800748c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007490:	4b5e      	ldr	r3, [pc, #376]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007498:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800749c:	d0ed      	beq.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d003      	beq.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d009      	beq.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d02e      	beq.n	800751c <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d12a      	bne.n	800751c <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80074c6:	4b51      	ldr	r3, [pc, #324]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80074c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074cc:	0c1b      	lsrs	r3, r3, #16
 80074ce:	f003 0303 	and.w	r3, r3, #3
 80074d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80074d4:	4b4d      	ldr	r3, [pc, #308]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80074d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074da:	0f1b      	lsrs	r3, r3, #28
 80074dc:	f003 0307 	and.w	r3, r3, #7
 80074e0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	695b      	ldr	r3, [r3, #20]
 80074e6:	019a      	lsls	r2, r3, #6
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	041b      	lsls	r3, r3, #16
 80074ec:	431a      	orrs	r2, r3
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	699b      	ldr	r3, [r3, #24]
 80074f2:	061b      	lsls	r3, r3, #24
 80074f4:	431a      	orrs	r2, r3
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	071b      	lsls	r3, r3, #28
 80074fa:	4944      	ldr	r1, [pc, #272]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80074fc:	4313      	orrs	r3, r2
 80074fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007502:	4b42      	ldr	r3, [pc, #264]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007504:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007508:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007510:	3b01      	subs	r3, #1
 8007512:	021b      	lsls	r3, r3, #8
 8007514:	493d      	ldr	r1, [pc, #244]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007516:	4313      	orrs	r3, r2
 8007518:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007524:	2b00      	cmp	r3, #0
 8007526:	d022      	beq.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800752c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007530:	d11d      	bne.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007532:	4b36      	ldr	r3, [pc, #216]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007538:	0e1b      	lsrs	r3, r3, #24
 800753a:	f003 030f 	and.w	r3, r3, #15
 800753e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007540:	4b32      	ldr	r3, [pc, #200]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007546:	0f1b      	lsrs	r3, r3, #28
 8007548:	f003 0307 	and.w	r3, r3, #7
 800754c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	695b      	ldr	r3, [r3, #20]
 8007552:	019a      	lsls	r2, r3, #6
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6a1b      	ldr	r3, [r3, #32]
 8007558:	041b      	lsls	r3, r3, #16
 800755a:	431a      	orrs	r2, r3
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	061b      	lsls	r3, r3, #24
 8007560:	431a      	orrs	r2, r3
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	071b      	lsls	r3, r3, #28
 8007566:	4929      	ldr	r1, [pc, #164]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007568:	4313      	orrs	r3, r2
 800756a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f003 0308 	and.w	r3, r3, #8
 8007576:	2b00      	cmp	r3, #0
 8007578:	d028      	beq.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800757a:	4b24      	ldr	r3, [pc, #144]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800757c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007580:	0e1b      	lsrs	r3, r3, #24
 8007582:	f003 030f 	and.w	r3, r3, #15
 8007586:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007588:	4b20      	ldr	r3, [pc, #128]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800758a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800758e:	0c1b      	lsrs	r3, r3, #16
 8007590:	f003 0303 	and.w	r3, r3, #3
 8007594:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	695b      	ldr	r3, [r3, #20]
 800759a:	019a      	lsls	r2, r3, #6
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	041b      	lsls	r3, r3, #16
 80075a0:	431a      	orrs	r2, r3
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	061b      	lsls	r3, r3, #24
 80075a6:	431a      	orrs	r2, r3
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	69db      	ldr	r3, [r3, #28]
 80075ac:	071b      	lsls	r3, r3, #28
 80075ae:	4917      	ldr	r1, [pc, #92]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80075b0:	4313      	orrs	r3, r2
 80075b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80075b6:	4b15      	ldr	r3, [pc, #84]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80075b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c4:	4911      	ldr	r1, [pc, #68]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80075c6:	4313      	orrs	r3, r2
 80075c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80075cc:	4b0f      	ldr	r3, [pc, #60]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a0e      	ldr	r2, [pc, #56]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80075d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075d8:	f7fb f9d2 	bl	8002980 <HAL_GetTick>
 80075dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80075de:	e008      	b.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80075e0:	f7fb f9ce 	bl	8002980 <HAL_GetTick>
 80075e4:	4602      	mov	r2, r0
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	1ad3      	subs	r3, r2, r3
 80075ea:	2b64      	cmp	r3, #100	; 0x64
 80075ec:	d901      	bls.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80075ee:	2303      	movs	r3, #3
 80075f0:	e007      	b.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80075f2:	4b06      	ldr	r3, [pc, #24]	; (800760c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075fe:	d1ef      	bne.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8007600:	2300      	movs	r3, #0
}
 8007602:	4618      	mov	r0, r3
 8007604:	3720      	adds	r7, #32
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}
 800760a:	bf00      	nop
 800760c:	40023800 	.word	0x40023800

08007610 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8007610:	b580      	push	{r7, lr}
 8007612:	b082      	sub	sp, #8
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d101      	bne.n	8007624 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	e025      	b.n	8007670 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800762a:	b2db      	uxtb	r3, r3
 800762c:	2b00      	cmp	r3, #0
 800762e:	d106      	bne.n	800763e <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2200      	movs	r2, #0
 8007634:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f002 fc27 	bl	8009e8c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2202      	movs	r2, #2
 8007642:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	3304      	adds	r3, #4
 800764e:	4619      	mov	r1, r3
 8007650:	4610      	mov	r0, r2
 8007652:	f000 fb13 	bl	8007c7c <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6818      	ldr	r0, [r3, #0]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	461a      	mov	r2, r3
 8007660:	6839      	ldr	r1, [r7, #0]
 8007662:	f000 fb7d 	bl	8007d60 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2201      	movs	r2, #1
 800766a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800766e:	2300      	movs	r3, #0
}
 8007670:	4618      	mov	r0, r3
 8007672:	3708      	adds	r7, #8
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	60f8      	str	r0, [r7, #12]
 8007680:	60b9      	str	r1, [r7, #8]
 8007682:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800768a:	b2db      	uxtb	r3, r3
 800768c:	2b02      	cmp	r3, #2
 800768e:	d101      	bne.n	8007694 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8007690:	2302      	movs	r3, #2
 8007692:	e018      	b.n	80076c6 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2202      	movs	r2, #2
 8007698:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	68b9      	ldr	r1, [r7, #8]
 80076a4:	4618      	mov	r0, r3
 80076a6:	f000 fbdb 	bl	8007e60 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	2b02      	cmp	r3, #2
 80076b0:	d104      	bne.n	80076bc <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2205      	movs	r2, #5
 80076b6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80076ba:	e003      	b.n	80076c4 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2201      	movs	r2, #1
 80076c0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80076c4:	2300      	movs	r3, #0
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3710      	adds	r7, #16
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}

080076ce <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b082      	sub	sp, #8
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
 80076d6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	2b02      	cmp	r3, #2
 80076e2:	d101      	bne.n	80076e8 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80076e4:	2302      	movs	r3, #2
 80076e6:	e00e      	b.n	8007706 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2202      	movs	r2, #2
 80076ec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	6839      	ldr	r1, [r7, #0]
 80076f6:	4618      	mov	r0, r3
 80076f8:	f000 fbd3 	bl	8007ea2 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8007704:	2300      	movs	r3, #0
}
 8007706:	4618      	mov	r0, r3
 8007708:	3708      	adds	r7, #8
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}

0800770e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800770e:	b580      	push	{r7, lr}
 8007710:	b082      	sub	sp, #8
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d101      	bne.n	8007720 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	e01d      	b.n	800775c <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007726:	b2db      	uxtb	r3, r3
 8007728:	2b00      	cmp	r3, #0
 800772a:	d106      	bne.n	800773a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f002 fac3 	bl	8009cc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2202      	movs	r2, #2
 800773e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	3304      	adds	r3, #4
 800774a:	4619      	mov	r1, r3
 800774c:	4610      	mov	r0, r2
 800774e:	f000 f97b 	bl	8007a48 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2201      	movs	r2, #1
 8007756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800775a:	2300      	movs	r3, #0
}
 800775c:	4618      	mov	r0, r3
 800775e:	3708      	adds	r7, #8
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}

08007764 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007764:	b480      	push	{r7}
 8007766:	b085      	sub	sp, #20
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	68da      	ldr	r2, [r3, #12]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f042 0201 	orr.w	r2, r2, #1
 800777a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	689a      	ldr	r2, [r3, #8]
 8007782:	4b0c      	ldr	r3, [pc, #48]	; (80077b4 <HAL_TIM_Base_Start_IT+0x50>)
 8007784:	4013      	ands	r3, r2
 8007786:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2b06      	cmp	r3, #6
 800778c:	d00b      	beq.n	80077a6 <HAL_TIM_Base_Start_IT+0x42>
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007794:	d007      	beq.n	80077a6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f042 0201 	orr.w	r2, r2, #1
 80077a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80077a6:	2300      	movs	r3, #0
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3714      	adds	r7, #20
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr
 80077b4:	00010007 	.word	0x00010007

080077b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b082      	sub	sp, #8
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	691b      	ldr	r3, [r3, #16]
 80077c6:	f003 0302 	and.w	r3, r3, #2
 80077ca:	2b02      	cmp	r3, #2
 80077cc:	d122      	bne.n	8007814 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	68db      	ldr	r3, [r3, #12]
 80077d4:	f003 0302 	and.w	r3, r3, #2
 80077d8:	2b02      	cmp	r3, #2
 80077da:	d11b      	bne.n	8007814 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f06f 0202 	mvn.w	r2, #2
 80077e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2201      	movs	r2, #1
 80077ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	699b      	ldr	r3, [r3, #24]
 80077f2:	f003 0303 	and.w	r3, r3, #3
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d003      	beq.n	8007802 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 f905 	bl	8007a0a <HAL_TIM_IC_CaptureCallback>
 8007800:	e005      	b.n	800780e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 f8f7 	bl	80079f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 f908 	bl	8007a1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	691b      	ldr	r3, [r3, #16]
 800781a:	f003 0304 	and.w	r3, r3, #4
 800781e:	2b04      	cmp	r3, #4
 8007820:	d122      	bne.n	8007868 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	f003 0304 	and.w	r3, r3, #4
 800782c:	2b04      	cmp	r3, #4
 800782e:	d11b      	bne.n	8007868 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f06f 0204 	mvn.w	r2, #4
 8007838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2202      	movs	r2, #2
 800783e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	699b      	ldr	r3, [r3, #24]
 8007846:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800784a:	2b00      	cmp	r3, #0
 800784c:	d003      	beq.n	8007856 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 f8db 	bl	8007a0a <HAL_TIM_IC_CaptureCallback>
 8007854:	e005      	b.n	8007862 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 f8cd 	bl	80079f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 f8de 	bl	8007a1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2200      	movs	r2, #0
 8007866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	f003 0308 	and.w	r3, r3, #8
 8007872:	2b08      	cmp	r3, #8
 8007874:	d122      	bne.n	80078bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	f003 0308 	and.w	r3, r3, #8
 8007880:	2b08      	cmp	r3, #8
 8007882:	d11b      	bne.n	80078bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f06f 0208 	mvn.w	r2, #8
 800788c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2204      	movs	r2, #4
 8007892:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	69db      	ldr	r3, [r3, #28]
 800789a:	f003 0303 	and.w	r3, r3, #3
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d003      	beq.n	80078aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 f8b1 	bl	8007a0a <HAL_TIM_IC_CaptureCallback>
 80078a8:	e005      	b.n	80078b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 f8a3 	bl	80079f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 f8b4 	bl	8007a1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2200      	movs	r2, #0
 80078ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	691b      	ldr	r3, [r3, #16]
 80078c2:	f003 0310 	and.w	r3, r3, #16
 80078c6:	2b10      	cmp	r3, #16
 80078c8:	d122      	bne.n	8007910 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	68db      	ldr	r3, [r3, #12]
 80078d0:	f003 0310 	and.w	r3, r3, #16
 80078d4:	2b10      	cmp	r3, #16
 80078d6:	d11b      	bne.n	8007910 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f06f 0210 	mvn.w	r2, #16
 80078e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2208      	movs	r2, #8
 80078e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	69db      	ldr	r3, [r3, #28]
 80078ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d003      	beq.n	80078fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 f887 	bl	8007a0a <HAL_TIM_IC_CaptureCallback>
 80078fc:	e005      	b.n	800790a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 f879 	bl	80079f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 f88a 	bl	8007a1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	691b      	ldr	r3, [r3, #16]
 8007916:	f003 0301 	and.w	r3, r3, #1
 800791a:	2b01      	cmp	r3, #1
 800791c:	d10e      	bne.n	800793c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	f003 0301 	and.w	r3, r3, #1
 8007928:	2b01      	cmp	r3, #1
 800792a:	d107      	bne.n	800793c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f06f 0201 	mvn.w	r2, #1
 8007934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f001 f9ea 	bl	8008d10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	691b      	ldr	r3, [r3, #16]
 8007942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007946:	2b80      	cmp	r3, #128	; 0x80
 8007948:	d10e      	bne.n	8007968 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	68db      	ldr	r3, [r3, #12]
 8007950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007954:	2b80      	cmp	r3, #128	; 0x80
 8007956:	d107      	bne.n	8007968 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007960:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 f976 	bl	8007c54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	691b      	ldr	r3, [r3, #16]
 800796e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007972:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007976:	d10e      	bne.n	8007996 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	68db      	ldr	r3, [r3, #12]
 800797e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007982:	2b80      	cmp	r3, #128	; 0x80
 8007984:	d107      	bne.n	8007996 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800798e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 f969 	bl	8007c68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	691b      	ldr	r3, [r3, #16]
 800799c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079a0:	2b40      	cmp	r3, #64	; 0x40
 80079a2:	d10e      	bne.n	80079c2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	68db      	ldr	r3, [r3, #12]
 80079aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ae:	2b40      	cmp	r3, #64	; 0x40
 80079b0:	d107      	bne.n	80079c2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80079ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 f838 	bl	8007a32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	691b      	ldr	r3, [r3, #16]
 80079c8:	f003 0320 	and.w	r3, r3, #32
 80079cc:	2b20      	cmp	r3, #32
 80079ce:	d10e      	bne.n	80079ee <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	68db      	ldr	r3, [r3, #12]
 80079d6:	f003 0320 	and.w	r3, r3, #32
 80079da:	2b20      	cmp	r3, #32
 80079dc:	d107      	bne.n	80079ee <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f06f 0220 	mvn.w	r2, #32
 80079e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 f929 	bl	8007c40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80079ee:	bf00      	nop
 80079f0:	3708      	adds	r7, #8
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}

080079f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079f6:	b480      	push	{r7}
 80079f8:	b083      	sub	sp, #12
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80079fe:	bf00      	nop
 8007a00:	370c      	adds	r7, #12
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr

08007a0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a0a:	b480      	push	{r7}
 8007a0c:	b083      	sub	sp, #12
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a12:	bf00      	nop
 8007a14:	370c      	adds	r7, #12
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr

08007a1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a1e:	b480      	push	{r7}
 8007a20:	b083      	sub	sp, #12
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a26:	bf00      	nop
 8007a28:	370c      	adds	r7, #12
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr

08007a32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a32:	b480      	push	{r7}
 8007a34:	b083      	sub	sp, #12
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a3a:	bf00      	nop
 8007a3c:	370c      	adds	r7, #12
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr
	...

08007a48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b085      	sub	sp, #20
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	4a40      	ldr	r2, [pc, #256]	; (8007b5c <TIM_Base_SetConfig+0x114>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d013      	beq.n	8007a88 <TIM_Base_SetConfig+0x40>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a66:	d00f      	beq.n	8007a88 <TIM_Base_SetConfig+0x40>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	4a3d      	ldr	r2, [pc, #244]	; (8007b60 <TIM_Base_SetConfig+0x118>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d00b      	beq.n	8007a88 <TIM_Base_SetConfig+0x40>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	4a3c      	ldr	r2, [pc, #240]	; (8007b64 <TIM_Base_SetConfig+0x11c>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d007      	beq.n	8007a88 <TIM_Base_SetConfig+0x40>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	4a3b      	ldr	r2, [pc, #236]	; (8007b68 <TIM_Base_SetConfig+0x120>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d003      	beq.n	8007a88 <TIM_Base_SetConfig+0x40>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	4a3a      	ldr	r2, [pc, #232]	; (8007b6c <TIM_Base_SetConfig+0x124>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d108      	bne.n	8007a9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	68fa      	ldr	r2, [r7, #12]
 8007a96:	4313      	orrs	r3, r2
 8007a98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	4a2f      	ldr	r2, [pc, #188]	; (8007b5c <TIM_Base_SetConfig+0x114>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d02b      	beq.n	8007afa <TIM_Base_SetConfig+0xb2>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007aa8:	d027      	beq.n	8007afa <TIM_Base_SetConfig+0xb2>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4a2c      	ldr	r2, [pc, #176]	; (8007b60 <TIM_Base_SetConfig+0x118>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d023      	beq.n	8007afa <TIM_Base_SetConfig+0xb2>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	4a2b      	ldr	r2, [pc, #172]	; (8007b64 <TIM_Base_SetConfig+0x11c>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d01f      	beq.n	8007afa <TIM_Base_SetConfig+0xb2>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	4a2a      	ldr	r2, [pc, #168]	; (8007b68 <TIM_Base_SetConfig+0x120>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d01b      	beq.n	8007afa <TIM_Base_SetConfig+0xb2>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	4a29      	ldr	r2, [pc, #164]	; (8007b6c <TIM_Base_SetConfig+0x124>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d017      	beq.n	8007afa <TIM_Base_SetConfig+0xb2>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	4a28      	ldr	r2, [pc, #160]	; (8007b70 <TIM_Base_SetConfig+0x128>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d013      	beq.n	8007afa <TIM_Base_SetConfig+0xb2>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	4a27      	ldr	r2, [pc, #156]	; (8007b74 <TIM_Base_SetConfig+0x12c>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d00f      	beq.n	8007afa <TIM_Base_SetConfig+0xb2>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	4a26      	ldr	r2, [pc, #152]	; (8007b78 <TIM_Base_SetConfig+0x130>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d00b      	beq.n	8007afa <TIM_Base_SetConfig+0xb2>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	4a25      	ldr	r2, [pc, #148]	; (8007b7c <TIM_Base_SetConfig+0x134>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d007      	beq.n	8007afa <TIM_Base_SetConfig+0xb2>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	4a24      	ldr	r2, [pc, #144]	; (8007b80 <TIM_Base_SetConfig+0x138>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d003      	beq.n	8007afa <TIM_Base_SetConfig+0xb2>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	4a23      	ldr	r2, [pc, #140]	; (8007b84 <TIM_Base_SetConfig+0x13c>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d108      	bne.n	8007b0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	68db      	ldr	r3, [r3, #12]
 8007b06:	68fa      	ldr	r2, [r7, #12]
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	695b      	ldr	r3, [r3, #20]
 8007b16:	4313      	orrs	r3, r2
 8007b18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	68fa      	ldr	r2, [r7, #12]
 8007b1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	689a      	ldr	r2, [r3, #8]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	681a      	ldr	r2, [r3, #0]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	4a0a      	ldr	r2, [pc, #40]	; (8007b5c <TIM_Base_SetConfig+0x114>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d003      	beq.n	8007b40 <TIM_Base_SetConfig+0xf8>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	4a0c      	ldr	r2, [pc, #48]	; (8007b6c <TIM_Base_SetConfig+0x124>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d103      	bne.n	8007b48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	691a      	ldr	r2, [r3, #16]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	615a      	str	r2, [r3, #20]
}
 8007b4e:	bf00      	nop
 8007b50:	3714      	adds	r7, #20
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr
 8007b5a:	bf00      	nop
 8007b5c:	40010000 	.word	0x40010000
 8007b60:	40000400 	.word	0x40000400
 8007b64:	40000800 	.word	0x40000800
 8007b68:	40000c00 	.word	0x40000c00
 8007b6c:	40010400 	.word	0x40010400
 8007b70:	40014000 	.word	0x40014000
 8007b74:	40014400 	.word	0x40014400
 8007b78:	40014800 	.word	0x40014800
 8007b7c:	40001800 	.word	0x40001800
 8007b80:	40001c00 	.word	0x40001c00
 8007b84:	40002000 	.word	0x40002000

08007b88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b085      	sub	sp, #20
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d101      	bne.n	8007ba0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b9c:	2302      	movs	r3, #2
 8007b9e:	e045      	b.n	8007c2c <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2202      	movs	r2, #2
 8007bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a1c      	ldr	r2, [pc, #112]	; (8007c38 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d004      	beq.n	8007bd4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a1b      	ldr	r2, [pc, #108]	; (8007c3c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d108      	bne.n	8007be6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007bda:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	68fa      	ldr	r2, [r7, #12]
 8007be2:	4313      	orrs	r3, r2
 8007be4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	68fa      	ldr	r2, [r7, #12]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bfe:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	68ba      	ldr	r2, [r7, #8]
 8007c06:	4313      	orrs	r3, r2
 8007c08:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	68fa      	ldr	r2, [r7, #12]
 8007c10:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	68ba      	ldr	r2, [r7, #8]
 8007c18:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2200      	movs	r2, #0
 8007c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c2a:	2300      	movs	r3, #0
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3714      	adds	r7, #20
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr
 8007c38:	40010000 	.word	0x40010000
 8007c3c:	40010400 	.word	0x40010400

08007c40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b083      	sub	sp, #12
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c48:	bf00      	nop
 8007c4a:	370c      	adds	r7, #12
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr

08007c54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c5c:	bf00      	nop
 8007c5e:	370c      	adds	r7, #12
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007c70:	bf00      	nop
 8007c72:	370c      	adds	r7, #12
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b085      	sub	sp, #20
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8007c86:	2300      	movs	r3, #0
 8007c88:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d027      	beq.n	8007ce6 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007c9c:	68fa      	ldr	r2, [r7, #12]
 8007c9e:	4b2f      	ldr	r3, [pc, #188]	; (8007d5c <FMC_SDRAM_Init+0xe0>)
 8007ca0:	4013      	ands	r3, r2
 8007ca2:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007cac:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8007cb2:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8007cb8:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8007cbe:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8007cc4:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8007cca:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8007cd0:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8007cd6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007cd8:	68fa      	ldr	r2, [r7, #12]
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	68fa      	ldr	r2, [r7, #12]
 8007ce2:	601a      	str	r2, [r3, #0]
 8007ce4:	e032      	b.n	8007d4c <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007cf2:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007cfc:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8007d02:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007d04:	68fa      	ldr	r2, [r7, #12]
 8007d06:	4313      	orrs	r3, r2
 8007d08:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007d10:	68ba      	ldr	r2, [r7, #8]
 8007d12:	4b12      	ldr	r3, [pc, #72]	; (8007d5c <FMC_SDRAM_Init+0xe0>)
 8007d14:	4013      	ands	r3, r2
 8007d16:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007d20:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8007d26:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8007d2c:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8007d32:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8007d38:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007d3a:	68ba      	ldr	r2, [r7, #8]
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	68fa      	ldr	r2, [r7, #12]
 8007d44:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	68ba      	ldr	r2, [r7, #8]
 8007d4a:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8007d4c:	2300      	movs	r3, #0
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3714      	adds	r7, #20
 8007d52:	46bd      	mov	sp, r7
 8007d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d58:	4770      	bx	lr
 8007d5a:	bf00      	nop
 8007d5c:	ffff8000 	.word	0xffff8000

08007d60 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b087      	sub	sp, #28
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	60f8      	str	r0, [r7, #12]
 8007d68:	60b9      	str	r1, [r7, #8]
 8007d6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8007d70:	2300      	movs	r3, #0
 8007d72:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	d02e      	beq.n	8007dd8 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007d86:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	3b01      	subs	r3, #1
 8007d94:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007d96:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	3b01      	subs	r3, #1
 8007d9e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8007da0:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	68db      	ldr	r3, [r3, #12]
 8007da6:	3b01      	subs	r3, #1
 8007da8:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8007daa:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	691b      	ldr	r3, [r3, #16]
 8007db0:	3b01      	subs	r3, #1
 8007db2:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8007db4:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	695b      	ldr	r3, [r3, #20]
 8007dba:	3b01      	subs	r3, #1
 8007dbc:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8007dbe:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	699b      	ldr	r3, [r3, #24]
 8007dc4:	3b01      	subs	r3, #1
 8007dc6:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	697a      	ldr	r2, [r7, #20]
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	697a      	ldr	r2, [r7, #20]
 8007dd4:	609a      	str	r2, [r3, #8]
 8007dd6:	e039      	b.n	8007e4c <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8007dde:	697a      	ldr	r2, [r7, #20]
 8007de0:	4b1e      	ldr	r3, [pc, #120]	; (8007e5c <FMC_SDRAM_Timing_Init+0xfc>)
 8007de2:	4013      	ands	r3, r2
 8007de4:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	68db      	ldr	r3, [r3, #12]
 8007dea:	3b01      	subs	r3, #1
 8007dec:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	695b      	ldr	r3, [r3, #20]
 8007df2:	3b01      	subs	r3, #1
 8007df4:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8007df6:	4313      	orrs	r3, r2
 8007df8:	697a      	ldr	r2, [r7, #20]
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	68db      	ldr	r3, [r3, #12]
 8007e02:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007e0a:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	3b01      	subs	r3, #1
 8007e18:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007e1a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	3b01      	subs	r3, #1
 8007e22:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8007e24:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	691b      	ldr	r3, [r3, #16]
 8007e2a:	3b01      	subs	r3, #1
 8007e2c:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8007e2e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	699b      	ldr	r3, [r3, #24]
 8007e34:	3b01      	subs	r3, #1
 8007e36:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	693a      	ldr	r2, [r7, #16]
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	697a      	ldr	r2, [r7, #20]
 8007e44:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	693a      	ldr	r2, [r7, #16]
 8007e4a:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8007e4c:	2300      	movs	r3, #0
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	371c      	adds	r7, #28
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr
 8007e5a:	bf00      	nop
 8007e5c:	ff0f0fff 	.word	0xff0f0fff

08007e60 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b087      	sub	sp, #28
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007e78:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	689b      	ldr	r3, [r3, #8]
 8007e7e:	3b01      	subs	r3, #1
 8007e80:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8007e82:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	68db      	ldr	r3, [r3, #12]
 8007e88:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 8007e8e:	697a      	ldr	r2, [r7, #20]
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8007e94:	2300      	movs	r3, #0
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	371c      	adds	r7, #28
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea0:	4770      	bx	lr

08007ea2 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8007ea2:	b480      	push	{r7}
 8007ea4:	b083      	sub	sp, #12
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
 8007eaa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	695a      	ldr	r2, [r3, #20]
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	005b      	lsls	r3, r3, #1
 8007eb4:	431a      	orrs	r2, r3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8007eba:	2300      	movs	r3, #0
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	370c      	adds	r7, #12
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <drawGrid>:

#include "game.h"
#include "stm32f769i_discovery_lcd.h"

void drawGrid(void)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
	uint8_t offset;

	// Draw the background
	BSP_LCD_SetTextColor(BOARD_COLOR);
 8007ece:	4823      	ldr	r0, [pc, #140]	; (8007f5c <drawGrid+0x94>)
 8007ed0:	f7f9 fb10 	bl	80014f4 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 0, GRID_SIZE, GRID_SIZE);
 8007ed4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8007ed8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007edc:	2100      	movs	r1, #0
 8007ede:	2000      	movs	r0, #0
 8007ee0:	f7f9 fe78 	bl	8001bd4 <BSP_LCD_FillRect>

	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8007ee4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8007ee8:	f7f9 fb04 	bl	80014f4 <BSP_LCD_SetTextColor>

	for(uint8_t i=0; i<=BOARD_SIZE; i++)
 8007eec:	2300      	movs	r3, #0
 8007eee:	71bb      	strb	r3, [r7, #6]
 8007ef0:	e02c      	b.n	8007f4c <drawGrid+0x84>
	{

		// for i = 0 the offset would be -2 which breaks the lcd, so we need a special case to set it to 0 instead
		if(i == 0)
 8007ef2:	79bb      	ldrb	r3, [r7, #6]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d102      	bne.n	8007efe <drawGrid+0x36>
		{
			offset = 0;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	71fb      	strb	r3, [r7, #7]
 8007efc:	e001      	b.n	8007f02 <drawGrid+0x3a>
		}
		else
		{
			offset = LINE_WIDTH/2;
 8007efe:	2302      	movs	r3, #2
 8007f00:	71fb      	strb	r3, [r7, #7]
		}

		// Horizontal
		BSP_LCD_FillRect(0, (i * SQUARE_SIZE)-offset, GRID_SIZE, LINE_WIDTH);
 8007f02:	79bb      	ldrb	r3, [r7, #6]
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	461a      	mov	r2, r3
 8007f08:	0112      	lsls	r2, r2, #4
 8007f0a:	1ad3      	subs	r3, r2, r3
 8007f0c:	009b      	lsls	r3, r3, #2
 8007f0e:	b29a      	uxth	r2, r3
 8007f10:	79fb      	ldrb	r3, [r7, #7]
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	1ad3      	subs	r3, r2, r3
 8007f16:	b299      	uxth	r1, r3
 8007f18:	2304      	movs	r3, #4
 8007f1a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007f1e:	2000      	movs	r0, #0
 8007f20:	f7f9 fe58 	bl	8001bd4 <BSP_LCD_FillRect>

		// Vertical
		BSP_LCD_FillRect((i * SQUARE_SIZE)-offset, 0, LINE_WIDTH, GRID_SIZE);
 8007f24:	79bb      	ldrb	r3, [r7, #6]
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	461a      	mov	r2, r3
 8007f2a:	0112      	lsls	r2, r2, #4
 8007f2c:	1ad3      	subs	r3, r2, r3
 8007f2e:	009b      	lsls	r3, r3, #2
 8007f30:	b29a      	uxth	r2, r3
 8007f32:	79fb      	ldrb	r3, [r7, #7]
 8007f34:	b29b      	uxth	r3, r3
 8007f36:	1ad3      	subs	r3, r2, r3
 8007f38:	b298      	uxth	r0, r3
 8007f3a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8007f3e:	2204      	movs	r2, #4
 8007f40:	2100      	movs	r1, #0
 8007f42:	f7f9 fe47 	bl	8001bd4 <BSP_LCD_FillRect>
	for(uint8_t i=0; i<=BOARD_SIZE; i++)
 8007f46:	79bb      	ldrb	r3, [r7, #6]
 8007f48:	3301      	adds	r3, #1
 8007f4a:	71bb      	strb	r3, [r7, #6]
 8007f4c:	79bb      	ldrb	r3, [r7, #6]
 8007f4e:	2b08      	cmp	r3, #8
 8007f50:	d9cf      	bls.n	8007ef2 <drawGrid+0x2a>
	}
}
 8007f52:	bf00      	nop
 8007f54:	3708      	adds	r7, #8
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
 8007f5a:	bf00      	nop
 8007f5c:	ff4c9572 	.word	0xff4c9572

08007f60 <gameTitle>:

void gameTitle(void)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	af00      	add	r7, sp, #0

  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8007f64:	f04f 30ff 	mov.w	r0, #4294967295
 8007f68:	f7f9 fb26 	bl	80015b8 <BSP_LCD_Clear>

  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8007f6c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8007f70:	f7f9 fac0 	bl	80014f4 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(480, 0, 320, 50);
 8007f74:	2332      	movs	r3, #50	; 0x32
 8007f76:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007f7a:	2100      	movs	r1, #0
 8007f7c:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8007f80:	f7f9 fe28 	bl	8001bd4 <BSP_LCD_FillRect>
  BSP_LCD_SetFont(&Font24);
 8007f84:	4809      	ldr	r0, [pc, #36]	; (8007fac <gameTitle+0x4c>)
 8007f86:	f7f9 fae7 	bl	8001558 <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8007f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8007f8e:	f7f9 fab1 	bl	80014f4 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8007f92:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8007f96:	f7f9 fac5 	bl	8001524 <BSP_LCD_SetBackColor>
  BSP_LCD_DisplayStringAt(100, 10, (uint8_t *)"REVERSI", RIGHT_MODE); //función quiere uint8_t
 8007f9a:	2302      	movs	r3, #2
 8007f9c:	4a04      	ldr	r2, [pc, #16]	; (8007fb0 <gameTitle+0x50>)
 8007f9e:	210a      	movs	r1, #10
 8007fa0:	2064      	movs	r0, #100	; 0x64
 8007fa2:	f7f9 fb75 	bl	8001690 <BSP_LCD_DisplayStringAt>

}
 8007fa6:	bf00      	nop
 8007fa8:	bd80      	pop	{r7, pc}
 8007faa:	bf00      	nop
 8007fac:	20000038 	.word	0x20000038
 8007fb0:	0800a8f8 	.word	0x0800a8f8

08007fb4 <init_game>:

void init_game(void)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af00      	add	r7, sp, #0
	gameTitle();
 8007fba:	f7ff ffd1 	bl	8007f60 <gameTitle>
	drawGrid();
 8007fbe:	f7ff ff83 	bl	8007ec8 <drawGrid>

    // Clear the board
    for(uint8_t i=0; i<BOARD_SIZE; i++)
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	71fb      	strb	r3, [r7, #7]
 8007fc6:	e013      	b.n	8007ff0 <init_game+0x3c>
    {
        for(uint8_t j=0; j<BOARD_SIZE; j++)
 8007fc8:	2300      	movs	r3, #0
 8007fca:	71bb      	strb	r3, [r7, #6]
 8007fcc:	e00a      	b.n	8007fe4 <init_game+0x30>
        {
             mat[i][j] = 0;
 8007fce:	79fa      	ldrb	r2, [r7, #7]
 8007fd0:	79bb      	ldrb	r3, [r7, #6]
 8007fd2:	4913      	ldr	r1, [pc, #76]	; (8008020 <init_game+0x6c>)
 8007fd4:	00d2      	lsls	r2, r2, #3
 8007fd6:	440a      	add	r2, r1
 8007fd8:	4413      	add	r3, r2
 8007fda:	2200      	movs	r2, #0
 8007fdc:	701a      	strb	r2, [r3, #0]
        for(uint8_t j=0; j<BOARD_SIZE; j++)
 8007fde:	79bb      	ldrb	r3, [r7, #6]
 8007fe0:	3301      	adds	r3, #1
 8007fe2:	71bb      	strb	r3, [r7, #6]
 8007fe4:	79bb      	ldrb	r3, [r7, #6]
 8007fe6:	2b07      	cmp	r3, #7
 8007fe8:	d9f1      	bls.n	8007fce <init_game+0x1a>
    for(uint8_t i=0; i<BOARD_SIZE; i++)
 8007fea:	79fb      	ldrb	r3, [r7, #7]
 8007fec:	3301      	adds	r3, #1
 8007fee:	71fb      	strb	r3, [r7, #7]
 8007ff0:	79fb      	ldrb	r3, [r7, #7]
 8007ff2:	2b07      	cmp	r3, #7
 8007ff4:	d9e8      	bls.n	8007fc8 <init_game+0x14>
        }
    }

    mat[3][3] = 1;
 8007ff6:	4b0a      	ldr	r3, [pc, #40]	; (8008020 <init_game+0x6c>)
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	76da      	strb	r2, [r3, #27]
    mat[4][4] = 1;
 8007ffc:	4b08      	ldr	r3, [pc, #32]	; (8008020 <init_game+0x6c>)
 8007ffe:	2201      	movs	r2, #1
 8008000:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    mat[4][3] = 2;
 8008004:	4b06      	ldr	r3, [pc, #24]	; (8008020 <init_game+0x6c>)
 8008006:	2202      	movs	r2, #2
 8008008:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    mat[3][4] = 2;
 800800c:	4b04      	ldr	r3, [pc, #16]	; (8008020 <init_game+0x6c>)
 800800e:	2202      	movs	r2, #2
 8008010:	771a      	strb	r2, [r3, #28]

    printBoard();
 8008012:	f000 f807 	bl	8008024 <printBoard>
}
 8008016:	bf00      	nop
 8008018:	3708      	adds	r7, #8
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
 800801e:	bf00      	nop
 8008020:	20000450 	.word	0x20000450

08008024 <printBoard>:

//imprime el tablero
void printBoard(void)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b082      	sub	sp, #8
 8008028:	af00      	add	r7, sp, #0
	uint8_t i, j;
	uint8_t value;

    for (i = 0; i < BOARD_SIZE; i++)
 800802a:	2300      	movs	r3, #0
 800802c:	71fb      	strb	r3, [r7, #7]
 800802e:	e04e      	b.n	80080ce <printBoard+0xaa>
    {
        for (j = 0; j < BOARD_SIZE; j++)
 8008030:	2300      	movs	r3, #0
 8008032:	71bb      	strb	r3, [r7, #6]
 8008034:	e045      	b.n	80080c2 <printBoard+0x9e>
        {
            value = mat[i][j]; //para leer que está almacenado en la matriz
 8008036:	79fa      	ldrb	r2, [r7, #7]
 8008038:	79bb      	ldrb	r3, [r7, #6]
 800803a:	4928      	ldr	r1, [pc, #160]	; (80080dc <printBoard+0xb8>)
 800803c:	00d2      	lsls	r2, r2, #3
 800803e:	440a      	add	r2, r1
 8008040:	4413      	add	r3, r2
 8008042:	781b      	ldrb	r3, [r3, #0]
 8008044:	717b      	strb	r3, [r7, #5]

            if (value == 1)
 8008046:	797b      	ldrb	r3, [r7, #5]
 8008048:	2b01      	cmp	r3, #1
 800804a:	d11a      	bne.n	8008082 <printBoard+0x5e>
            {
            	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800804c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8008050:	f7f9 fa50 	bl	80014f4 <BSP_LCD_SetTextColor>
            	BSP_LCD_FillCircle((j*SQUARE_SIZE)+HALF_SQUARE_SIZE, (i*SQUARE_SIZE)+HALF_SQUARE_SIZE, PIECE_RADIUS);
 8008054:	79bb      	ldrb	r3, [r7, #6]
 8008056:	b29b      	uxth	r3, r3
 8008058:	461a      	mov	r2, r3
 800805a:	0112      	lsls	r2, r2, #4
 800805c:	1ad3      	subs	r3, r2, r3
 800805e:	009b      	lsls	r3, r3, #2
 8008060:	b29b      	uxth	r3, r3
 8008062:	331e      	adds	r3, #30
 8008064:	b298      	uxth	r0, r3
 8008066:	79fb      	ldrb	r3, [r7, #7]
 8008068:	b29b      	uxth	r3, r3
 800806a:	461a      	mov	r2, r3
 800806c:	0112      	lsls	r2, r2, #4
 800806e:	1ad3      	subs	r3, r2, r3
 8008070:	009b      	lsls	r3, r3, #2
 8008072:	b29b      	uxth	r3, r3
 8008074:	331e      	adds	r3, #30
 8008076:	b29b      	uxth	r3, r3
 8008078:	2219      	movs	r2, #25
 800807a:	4619      	mov	r1, r3
 800807c:	f7f9 fe04 	bl	8001c88 <BSP_LCD_FillCircle>
 8008080:	e01c      	b.n	80080bc <printBoard+0x98>
            }
            else if (value == 2)
 8008082:	797b      	ldrb	r3, [r7, #5]
 8008084:	2b02      	cmp	r3, #2
 8008086:	d119      	bne.n	80080bc <printBoard+0x98>
            {
        		 BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8008088:	f04f 30ff 	mov.w	r0, #4294967295
 800808c:	f7f9 fa32 	bl	80014f4 <BSP_LCD_SetTextColor>
             	 BSP_LCD_FillCircle((j*SQUARE_SIZE)+HALF_SQUARE_SIZE, (i*SQUARE_SIZE)+HALF_SQUARE_SIZE, PIECE_RADIUS);
 8008090:	79bb      	ldrb	r3, [r7, #6]
 8008092:	b29b      	uxth	r3, r3
 8008094:	461a      	mov	r2, r3
 8008096:	0112      	lsls	r2, r2, #4
 8008098:	1ad3      	subs	r3, r2, r3
 800809a:	009b      	lsls	r3, r3, #2
 800809c:	b29b      	uxth	r3, r3
 800809e:	331e      	adds	r3, #30
 80080a0:	b298      	uxth	r0, r3
 80080a2:	79fb      	ldrb	r3, [r7, #7]
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	461a      	mov	r2, r3
 80080a8:	0112      	lsls	r2, r2, #4
 80080aa:	1ad3      	subs	r3, r2, r3
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	331e      	adds	r3, #30
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	2219      	movs	r2, #25
 80080b6:	4619      	mov	r1, r3
 80080b8:	f7f9 fde6 	bl	8001c88 <BSP_LCD_FillCircle>
        for (j = 0; j < BOARD_SIZE; j++)
 80080bc:	79bb      	ldrb	r3, [r7, #6]
 80080be:	3301      	adds	r3, #1
 80080c0:	71bb      	strb	r3, [r7, #6]
 80080c2:	79bb      	ldrb	r3, [r7, #6]
 80080c4:	2b07      	cmp	r3, #7
 80080c6:	d9b6      	bls.n	8008036 <printBoard+0x12>
    for (i = 0; i < BOARD_SIZE; i++)
 80080c8:	79fb      	ldrb	r3, [r7, #7]
 80080ca:	3301      	adds	r3, #1
 80080cc:	71fb      	strb	r3, [r7, #7]
 80080ce:	79fb      	ldrb	r3, [r7, #7]
 80080d0:	2b07      	cmp	r3, #7
 80080d2:	d9ad      	bls.n	8008030 <printBoard+0xc>
            }
        }
    }
}
 80080d4:	bf00      	nop
 80080d6:	3708      	adds	r7, #8
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}
 80080dc:	20000450 	.word	0x20000450

080080e0 <flip>:


//cambia la pieza del jugador opuesto
//asumese que i e j ya son contados desde 0 hasta 7 en lugar de 1 a 8
void flip(uint8_t player, uint8_t i, uint8_t j)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b089      	sub	sp, #36	; 0x24
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	4603      	mov	r3, r0
 80080e8:	71fb      	strb	r3, [r7, #7]
 80080ea:	460b      	mov	r3, r1
 80080ec:	71bb      	strb	r3, [r7, #6]
 80080ee:	4613      	mov	r3, r2
 80080f0:	717b      	strb	r3, [r7, #5]
    uint8_t oppositePlayer;

    if(player==1)
 80080f2:	79fb      	ldrb	r3, [r7, #7]
 80080f4:	2b01      	cmp	r3, #1
 80080f6:	d102      	bne.n	80080fe <flip+0x1e>
    {
        oppositePlayer=2;
 80080f8:	2302      	movs	r3, #2
 80080fa:	77fb      	strb	r3, [r7, #31]
 80080fc:	e001      	b.n	8008102 <flip+0x22>
    }
    else
    {
        oppositePlayer=1;
 80080fe:	2301      	movs	r3, #1
 8008100:	77fb      	strb	r3, [r7, #31]
     *  L (i,j) R
     * BL   B   BR
     */

    // top left
    if(i > 0 && j > 0) // we cant check outside of the matrix because (-1, -1) doesnt exist
 8008102:	79bb      	ldrb	r3, [r7, #6]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d05b      	beq.n	80081c0 <flip+0xe0>
 8008108:	797b      	ldrb	r3, [r7, #5]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d058      	beq.n	80081c0 <flip+0xe0>
    {
        if(mat[i-1][j-1] == oppositePlayer)
 800810e:	79bb      	ldrb	r3, [r7, #6]
 8008110:	1e5a      	subs	r2, r3, #1
 8008112:	797b      	ldrb	r3, [r7, #5]
 8008114:	3b01      	subs	r3, #1
 8008116:	49b0      	ldr	r1, [pc, #704]	; (80083d8 <flip+0x2f8>)
 8008118:	00d2      	lsls	r2, r2, #3
 800811a:	440a      	add	r2, r1
 800811c:	4413      	add	r3, r2
 800811e:	781b      	ldrb	r3, [r3, #0]
 8008120:	7ffa      	ldrb	r2, [r7, #31]
 8008122:	429a      	cmp	r2, r3
 8008124:	d14c      	bne.n	80081c0 <flip+0xe0>
        {
            // posicao adjacent
        	int8_t startI = i - 1;
 8008126:	79bb      	ldrb	r3, [r7, #6]
 8008128:	3b01      	subs	r3, #1
 800812a:	b2db      	uxtb	r3, r3
 800812c:	77bb      	strb	r3, [r7, #30]
            int8_t startJ = j - 1;
 800812e:	797b      	ldrb	r3, [r7, #5]
 8008130:	3b01      	subs	r3, #1
 8008132:	b2db      	uxtb	r3, r3
 8008134:	777b      	strb	r3, [r7, #29]

            while (startI >= 0 && startJ >= 0)//para no salir fuera de la raiz
 8008136:	e039      	b.n	80081ac <flip+0xcc>
            {
                if(mat [startI][startJ]==player)
 8008138:	f997 201e 	ldrsb.w	r2, [r7, #30]
 800813c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008140:	49a5      	ldr	r1, [pc, #660]	; (80083d8 <flip+0x2f8>)
 8008142:	00d2      	lsls	r2, r2, #3
 8008144:	440a      	add	r2, r1
 8008146:	4413      	add	r3, r2
 8008148:	781b      	ldrb	r3, [r3, #0]
 800814a:	79fa      	ldrb	r2, [r7, #7]
 800814c:	429a      	cmp	r2, r3
 800814e:	d121      	bne.n	8008194 <flip+0xb4>
                {
                    while(startI != i && startJ!=j)
 8008150:	e015      	b.n	800817e <flip+0x9e>
                    {
                        mat[startI][startJ] = player;
 8008152:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8008156:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800815a:	499f      	ldr	r1, [pc, #636]	; (80083d8 <flip+0x2f8>)
 800815c:	00d2      	lsls	r2, r2, #3
 800815e:	440a      	add	r2, r1
 8008160:	4413      	add	r3, r2
 8008162:	79fa      	ldrb	r2, [r7, #7]
 8008164:	701a      	strb	r2, [r3, #0]

                        startI++;
 8008166:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800816a:	b2db      	uxtb	r3, r3
 800816c:	3301      	adds	r3, #1
 800816e:	b2db      	uxtb	r3, r3
 8008170:	77bb      	strb	r3, [r7, #30]
                        startJ++;
 8008172:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008176:	b2db      	uxtb	r3, r3
 8008178:	3301      	adds	r3, #1
 800817a:	b2db      	uxtb	r3, r3
 800817c:	777b      	strb	r3, [r7, #29]
                    while(startI != i && startJ!=j)
 800817e:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8008182:	79bb      	ldrb	r3, [r7, #6]
 8008184:	429a      	cmp	r2, r3
 8008186:	d01a      	beq.n	80081be <flip+0xde>
 8008188:	f997 201d 	ldrsb.w	r2, [r7, #29]
 800818c:	797b      	ldrb	r3, [r7, #5]
 800818e:	429a      	cmp	r2, r3
 8008190:	d1df      	bne.n	8008152 <flip+0x72>
                    }
                    break; // sale del while porque ya sabemos que esta posicion es valida
 8008192:	e014      	b.n	80081be <flip+0xde>
                }

                startI--;
 8008194:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8008198:	b2db      	uxtb	r3, r3
 800819a:	3b01      	subs	r3, #1
 800819c:	b2db      	uxtb	r3, r3
 800819e:	77bb      	strb	r3, [r7, #30]
                startJ--;
 80081a0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80081a4:	b2db      	uxtb	r3, r3
 80081a6:	3b01      	subs	r3, #1
 80081a8:	b2db      	uxtb	r3, r3
 80081aa:	777b      	strb	r3, [r7, #29]
            while (startI >= 0 && startJ >= 0)//para no salir fuera de la raiz
 80081ac:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	db05      	blt.n	80081c0 <flip+0xe0>
 80081b4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	dabd      	bge.n	8008138 <flip+0x58>
 80081bc:	e000      	b.n	80081c0 <flip+0xe0>
                    break; // sale del while porque ya sabemos que esta posicion es valida
 80081be:	bf00      	nop
            }
        }
    }

    // top
    if(i>0)
 80081c0:	79bb      	ldrb	r3, [r7, #6]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d03e      	beq.n	8008244 <flip+0x164>
    {
        if(mat[i-1][j] == oppositePlayer)
 80081c6:	79bb      	ldrb	r3, [r7, #6]
 80081c8:	1e5a      	subs	r2, r3, #1
 80081ca:	797b      	ldrb	r3, [r7, #5]
 80081cc:	4982      	ldr	r1, [pc, #520]	; (80083d8 <flip+0x2f8>)
 80081ce:	00d2      	lsls	r2, r2, #3
 80081d0:	440a      	add	r2, r1
 80081d2:	4413      	add	r3, r2
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	7ffa      	ldrb	r2, [r7, #31]
 80081d8:	429a      	cmp	r2, r3
 80081da:	d133      	bne.n	8008244 <flip+0x164>
        {
        	int8_t startI = i - 1;
 80081dc:	79bb      	ldrb	r3, [r7, #6]
 80081de:	3b01      	subs	r3, #1
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	773b      	strb	r3, [r7, #28]
            int8_t startJ = j;
 80081e4:	797b      	ldrb	r3, [r7, #5]
 80081e6:	74bb      	strb	r3, [r7, #18]

            while (startI >= 0)
 80081e8:	e028      	b.n	800823c <flip+0x15c>
            {
                if(mat [startI][startJ]==player)
 80081ea:	f997 201c 	ldrsb.w	r2, [r7, #28]
 80081ee:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80081f2:	4979      	ldr	r1, [pc, #484]	; (80083d8 <flip+0x2f8>)
 80081f4:	00d2      	lsls	r2, r2, #3
 80081f6:	440a      	add	r2, r1
 80081f8:	4413      	add	r3, r2
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	79fa      	ldrb	r2, [r7, #7]
 80081fe:	429a      	cmp	r2, r3
 8008200:	d116      	bne.n	8008230 <flip+0x150>
                {
                    while(startI != i)
 8008202:	e00f      	b.n	8008224 <flip+0x144>
                    {
                        mat[startI][startJ] = player;
 8008204:	f997 201c 	ldrsb.w	r2, [r7, #28]
 8008208:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800820c:	4972      	ldr	r1, [pc, #456]	; (80083d8 <flip+0x2f8>)
 800820e:	00d2      	lsls	r2, r2, #3
 8008210:	440a      	add	r2, r1
 8008212:	4413      	add	r3, r2
 8008214:	79fa      	ldrb	r2, [r7, #7]
 8008216:	701a      	strb	r2, [r3, #0]

                        startI++;
 8008218:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800821c:	b2db      	uxtb	r3, r3
 800821e:	3301      	adds	r3, #1
 8008220:	b2db      	uxtb	r3, r3
 8008222:	773b      	strb	r3, [r7, #28]
                    while(startI != i)
 8008224:	f997 201c 	ldrsb.w	r2, [r7, #28]
 8008228:	79bb      	ldrb	r3, [r7, #6]
 800822a:	429a      	cmp	r2, r3
 800822c:	d1ea      	bne.n	8008204 <flip+0x124>
                    }
                     break; // sale del while porque ya sabemos que esta posicion es valida
 800822e:	e009      	b.n	8008244 <flip+0x164>
                }
                startI--;
 8008230:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8008234:	b2db      	uxtb	r3, r3
 8008236:	3b01      	subs	r3, #1
 8008238:	b2db      	uxtb	r3, r3
 800823a:	773b      	strb	r3, [r7, #28]
            while (startI >= 0)
 800823c:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8008240:	2b00      	cmp	r3, #0
 8008242:	dad2      	bge.n	80081ea <flip+0x10a>
            }
        }
    }

    // top right
    if(i > 0 && j <7)
 8008244:	79bb      	ldrb	r3, [r7, #6]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d05b      	beq.n	8008302 <flip+0x222>
 800824a:	797b      	ldrb	r3, [r7, #5]
 800824c:	2b06      	cmp	r3, #6
 800824e:	d858      	bhi.n	8008302 <flip+0x222>
    {
        if(mat[i-1][j+1] == oppositePlayer)
 8008250:	79bb      	ldrb	r3, [r7, #6]
 8008252:	1e5a      	subs	r2, r3, #1
 8008254:	797b      	ldrb	r3, [r7, #5]
 8008256:	3301      	adds	r3, #1
 8008258:	495f      	ldr	r1, [pc, #380]	; (80083d8 <flip+0x2f8>)
 800825a:	00d2      	lsls	r2, r2, #3
 800825c:	440a      	add	r2, r1
 800825e:	4413      	add	r3, r2
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	7ffa      	ldrb	r2, [r7, #31]
 8008264:	429a      	cmp	r2, r3
 8008266:	d14c      	bne.n	8008302 <flip+0x222>
        {
        	int8_t startI = i - 1;
 8008268:	79bb      	ldrb	r3, [r7, #6]
 800826a:	3b01      	subs	r3, #1
 800826c:	b2db      	uxtb	r3, r3
 800826e:	76fb      	strb	r3, [r7, #27]
            int8_t startJ = j + 1;
 8008270:	797b      	ldrb	r3, [r7, #5]
 8008272:	3301      	adds	r3, #1
 8008274:	b2db      	uxtb	r3, r3
 8008276:	76bb      	strb	r3, [r7, #26]

            while (startI >= 0 && startJ <= 7)
 8008278:	e039      	b.n	80082ee <flip+0x20e>
            {
                if(mat [startI][startJ]==player)
 800827a:	f997 201b 	ldrsb.w	r2, [r7, #27]
 800827e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008282:	4955      	ldr	r1, [pc, #340]	; (80083d8 <flip+0x2f8>)
 8008284:	00d2      	lsls	r2, r2, #3
 8008286:	440a      	add	r2, r1
 8008288:	4413      	add	r3, r2
 800828a:	781b      	ldrb	r3, [r3, #0]
 800828c:	79fa      	ldrb	r2, [r7, #7]
 800828e:	429a      	cmp	r2, r3
 8008290:	d121      	bne.n	80082d6 <flip+0x1f6>
                {
                    while(startI != i && startJ!=j)
 8008292:	e015      	b.n	80082c0 <flip+0x1e0>
                    {
                        mat[startI][startJ] = player;
 8008294:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8008298:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800829c:	494e      	ldr	r1, [pc, #312]	; (80083d8 <flip+0x2f8>)
 800829e:	00d2      	lsls	r2, r2, #3
 80082a0:	440a      	add	r2, r1
 80082a2:	4413      	add	r3, r2
 80082a4:	79fa      	ldrb	r2, [r7, #7]
 80082a6:	701a      	strb	r2, [r3, #0]

                        startI++;
 80082a8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80082ac:	b2db      	uxtb	r3, r3
 80082ae:	3301      	adds	r3, #1
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	76fb      	strb	r3, [r7, #27]
                        startJ--;
 80082b4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80082b8:	b2db      	uxtb	r3, r3
 80082ba:	3b01      	subs	r3, #1
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	76bb      	strb	r3, [r7, #26]
                    while(startI != i && startJ!=j)
 80082c0:	f997 201b 	ldrsb.w	r2, [r7, #27]
 80082c4:	79bb      	ldrb	r3, [r7, #6]
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d01a      	beq.n	8008300 <flip+0x220>
 80082ca:	f997 201a 	ldrsb.w	r2, [r7, #26]
 80082ce:	797b      	ldrb	r3, [r7, #5]
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d1df      	bne.n	8008294 <flip+0x1b4>
                    }
                     break; // sale del while porque ya sabemos que esta posicion es valida
 80082d4:	e014      	b.n	8008300 <flip+0x220>
                }
                startI--;
 80082d6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	3b01      	subs	r3, #1
 80082de:	b2db      	uxtb	r3, r3
 80082e0:	76fb      	strb	r3, [r7, #27]
                startJ++;
 80082e2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80082e6:	b2db      	uxtb	r3, r3
 80082e8:	3301      	adds	r3, #1
 80082ea:	b2db      	uxtb	r3, r3
 80082ec:	76bb      	strb	r3, [r7, #26]
            while (startI >= 0 && startJ <= 7)
 80082ee:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	db05      	blt.n	8008302 <flip+0x222>
 80082f6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80082fa:	2b07      	cmp	r3, #7
 80082fc:	ddbd      	ble.n	800827a <flip+0x19a>
 80082fe:	e000      	b.n	8008302 <flip+0x222>
                     break; // sale del while porque ya sabemos que esta posicion es valida
 8008300:	bf00      	nop
            }
        }
    }

    // right
    if(j < 7)
 8008302:	797b      	ldrb	r3, [r7, #5]
 8008304:	2b06      	cmp	r3, #6
 8008306:	d83e      	bhi.n	8008386 <flip+0x2a6>
    {
        if(mat[i][j+1] == oppositePlayer)
 8008308:	79ba      	ldrb	r2, [r7, #6]
 800830a:	797b      	ldrb	r3, [r7, #5]
 800830c:	3301      	adds	r3, #1
 800830e:	4932      	ldr	r1, [pc, #200]	; (80083d8 <flip+0x2f8>)
 8008310:	00d2      	lsls	r2, r2, #3
 8008312:	440a      	add	r2, r1
 8008314:	4413      	add	r3, r2
 8008316:	781b      	ldrb	r3, [r3, #0]
 8008318:	7ffa      	ldrb	r2, [r7, #31]
 800831a:	429a      	cmp	r2, r3
 800831c:	d133      	bne.n	8008386 <flip+0x2a6>
        {
        	int8_t startI = i;
 800831e:	79bb      	ldrb	r3, [r7, #6]
 8008320:	747b      	strb	r3, [r7, #17]
            int8_t startJ = j + 1;
 8008322:	797b      	ldrb	r3, [r7, #5]
 8008324:	3301      	adds	r3, #1
 8008326:	b2db      	uxtb	r3, r3
 8008328:	767b      	strb	r3, [r7, #25]

            while (startJ <= 7)
 800832a:	e028      	b.n	800837e <flip+0x29e>
            {
                if(mat [startI][startJ]==player)
 800832c:	f997 2011 	ldrsb.w	r2, [r7, #17]
 8008330:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8008334:	4928      	ldr	r1, [pc, #160]	; (80083d8 <flip+0x2f8>)
 8008336:	00d2      	lsls	r2, r2, #3
 8008338:	440a      	add	r2, r1
 800833a:	4413      	add	r3, r2
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	79fa      	ldrb	r2, [r7, #7]
 8008340:	429a      	cmp	r2, r3
 8008342:	d116      	bne.n	8008372 <flip+0x292>
                {
                    while(startJ!=j)
 8008344:	e00f      	b.n	8008366 <flip+0x286>
                    {
                        mat[startI][startJ] = player;
 8008346:	f997 2011 	ldrsb.w	r2, [r7, #17]
 800834a:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800834e:	4922      	ldr	r1, [pc, #136]	; (80083d8 <flip+0x2f8>)
 8008350:	00d2      	lsls	r2, r2, #3
 8008352:	440a      	add	r2, r1
 8008354:	4413      	add	r3, r2
 8008356:	79fa      	ldrb	r2, [r7, #7]
 8008358:	701a      	strb	r2, [r3, #0]

                        startJ--;
 800835a:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800835e:	b2db      	uxtb	r3, r3
 8008360:	3b01      	subs	r3, #1
 8008362:	b2db      	uxtb	r3, r3
 8008364:	767b      	strb	r3, [r7, #25]
                    while(startJ!=j)
 8008366:	f997 2019 	ldrsb.w	r2, [r7, #25]
 800836a:	797b      	ldrb	r3, [r7, #5]
 800836c:	429a      	cmp	r2, r3
 800836e:	d1ea      	bne.n	8008346 <flip+0x266>
                    }
                     break; // sale del while porque ya sabemos que esta posicion es valida
 8008370:	e009      	b.n	8008386 <flip+0x2a6>
                }
                startJ++;
 8008372:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8008376:	b2db      	uxtb	r3, r3
 8008378:	3301      	adds	r3, #1
 800837a:	b2db      	uxtb	r3, r3
 800837c:	767b      	strb	r3, [r7, #25]
            while (startJ <= 7)
 800837e:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8008382:	2b07      	cmp	r3, #7
 8008384:	ddd2      	ble.n	800832c <flip+0x24c>
            }
        }
    }

    // bottom right
    if (i < 7 && j < 7)
 8008386:	79bb      	ldrb	r3, [r7, #6]
 8008388:	2b06      	cmp	r3, #6
 800838a:	d85e      	bhi.n	800844a <flip+0x36a>
 800838c:	797b      	ldrb	r3, [r7, #5]
 800838e:	2b06      	cmp	r3, #6
 8008390:	d85b      	bhi.n	800844a <flip+0x36a>
    {
        if(mat[i+1][j+1] == oppositePlayer)
 8008392:	79bb      	ldrb	r3, [r7, #6]
 8008394:	1c5a      	adds	r2, r3, #1
 8008396:	797b      	ldrb	r3, [r7, #5]
 8008398:	3301      	adds	r3, #1
 800839a:	490f      	ldr	r1, [pc, #60]	; (80083d8 <flip+0x2f8>)
 800839c:	00d2      	lsls	r2, r2, #3
 800839e:	440a      	add	r2, r1
 80083a0:	4413      	add	r3, r2
 80083a2:	781b      	ldrb	r3, [r3, #0]
 80083a4:	7ffa      	ldrb	r2, [r7, #31]
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d14f      	bne.n	800844a <flip+0x36a>
        {
        	int8_t startI = i + 1;
 80083aa:	79bb      	ldrb	r3, [r7, #6]
 80083ac:	3301      	adds	r3, #1
 80083ae:	b2db      	uxtb	r3, r3
 80083b0:	763b      	strb	r3, [r7, #24]
            int8_t startJ = j + 1;
 80083b2:	797b      	ldrb	r3, [r7, #5]
 80083b4:	3301      	adds	r3, #1
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	75fb      	strb	r3, [r7, #23]

            while (startI <= 7 && startJ <= 7)
 80083ba:	e03c      	b.n	8008436 <flip+0x356>
            {
                if(mat [startI][startJ]==player)
 80083bc:	f997 2018 	ldrsb.w	r2, [r7, #24]
 80083c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80083c4:	4904      	ldr	r1, [pc, #16]	; (80083d8 <flip+0x2f8>)
 80083c6:	00d2      	lsls	r2, r2, #3
 80083c8:	440a      	add	r2, r1
 80083ca:	4413      	add	r3, r2
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	79fa      	ldrb	r2, [r7, #7]
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d124      	bne.n	800841e <flip+0x33e>
                {
                     while(startI != i && startJ!=j)
 80083d4:	e018      	b.n	8008408 <flip+0x328>
 80083d6:	bf00      	nop
 80083d8:	20000450 	.word	0x20000450
                    {
                        mat[startI][startJ] = player;
 80083dc:	f997 2018 	ldrsb.w	r2, [r7, #24]
 80083e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80083e4:	498e      	ldr	r1, [pc, #568]	; (8008620 <flip+0x540>)
 80083e6:	00d2      	lsls	r2, r2, #3
 80083e8:	440a      	add	r2, r1
 80083ea:	4413      	add	r3, r2
 80083ec:	79fa      	ldrb	r2, [r7, #7]
 80083ee:	701a      	strb	r2, [r3, #0]

                        startI--;
 80083f0:	f997 3018 	ldrsb.w	r3, [r7, #24]
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	3b01      	subs	r3, #1
 80083f8:	b2db      	uxtb	r3, r3
 80083fa:	763b      	strb	r3, [r7, #24]
                        startJ--;
 80083fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008400:	b2db      	uxtb	r3, r3
 8008402:	3b01      	subs	r3, #1
 8008404:	b2db      	uxtb	r3, r3
 8008406:	75fb      	strb	r3, [r7, #23]
                     while(startI != i && startJ!=j)
 8008408:	f997 2018 	ldrsb.w	r2, [r7, #24]
 800840c:	79bb      	ldrb	r3, [r7, #6]
 800840e:	429a      	cmp	r2, r3
 8008410:	d01a      	beq.n	8008448 <flip+0x368>
 8008412:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8008416:	797b      	ldrb	r3, [r7, #5]
 8008418:	429a      	cmp	r2, r3
 800841a:	d1df      	bne.n	80083dc <flip+0x2fc>
                    }
                     break; // sale del while porque ya sabemos que esta posicion es valida
 800841c:	e014      	b.n	8008448 <flip+0x368>
                }
                startI++;
 800841e:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8008422:	b2db      	uxtb	r3, r3
 8008424:	3301      	adds	r3, #1
 8008426:	b2db      	uxtb	r3, r3
 8008428:	763b      	strb	r3, [r7, #24]
                startJ++;
 800842a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800842e:	b2db      	uxtb	r3, r3
 8008430:	3301      	adds	r3, #1
 8008432:	b2db      	uxtb	r3, r3
 8008434:	75fb      	strb	r3, [r7, #23]
            while (startI <= 7 && startJ <= 7)
 8008436:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800843a:	2b07      	cmp	r3, #7
 800843c:	dc05      	bgt.n	800844a <flip+0x36a>
 800843e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008442:	2b07      	cmp	r3, #7
 8008444:	ddba      	ble.n	80083bc <flip+0x2dc>
 8008446:	e000      	b.n	800844a <flip+0x36a>
                     break; // sale del while porque ya sabemos que esta posicion es valida
 8008448:	bf00      	nop
            }
        }
    }

    // bottom
    if(i < 7)
 800844a:	79bb      	ldrb	r3, [r7, #6]
 800844c:	2b06      	cmp	r3, #6
 800844e:	d83e      	bhi.n	80084ce <flip+0x3ee>
    {
            if(mat[i+1][j] == oppositePlayer)
 8008450:	79bb      	ldrb	r3, [r7, #6]
 8008452:	1c5a      	adds	r2, r3, #1
 8008454:	797b      	ldrb	r3, [r7, #5]
 8008456:	4972      	ldr	r1, [pc, #456]	; (8008620 <flip+0x540>)
 8008458:	00d2      	lsls	r2, r2, #3
 800845a:	440a      	add	r2, r1
 800845c:	4413      	add	r3, r2
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	7ffa      	ldrb	r2, [r7, #31]
 8008462:	429a      	cmp	r2, r3
 8008464:	d133      	bne.n	80084ce <flip+0x3ee>
            {
            	int8_t startI = i + 1;
 8008466:	79bb      	ldrb	r3, [r7, #6]
 8008468:	3301      	adds	r3, #1
 800846a:	b2db      	uxtb	r3, r3
 800846c:	75bb      	strb	r3, [r7, #22]
                int8_t startJ = j;
 800846e:	797b      	ldrb	r3, [r7, #5]
 8008470:	743b      	strb	r3, [r7, #16]

                while (startI <=7)
 8008472:	e028      	b.n	80084c6 <flip+0x3e6>
                {
                    if(mat [startI][startJ]==player)
 8008474:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8008478:	f997 3010 	ldrsb.w	r3, [r7, #16]
 800847c:	4968      	ldr	r1, [pc, #416]	; (8008620 <flip+0x540>)
 800847e:	00d2      	lsls	r2, r2, #3
 8008480:	440a      	add	r2, r1
 8008482:	4413      	add	r3, r2
 8008484:	781b      	ldrb	r3, [r3, #0]
 8008486:	79fa      	ldrb	r2, [r7, #7]
 8008488:	429a      	cmp	r2, r3
 800848a:	d116      	bne.n	80084ba <flip+0x3da>
                    {
                        while(startI != i)
 800848c:	e00f      	b.n	80084ae <flip+0x3ce>
                        {
                            mat[startI][startJ] = player;
 800848e:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8008492:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8008496:	4962      	ldr	r1, [pc, #392]	; (8008620 <flip+0x540>)
 8008498:	00d2      	lsls	r2, r2, #3
 800849a:	440a      	add	r2, r1
 800849c:	4413      	add	r3, r2
 800849e:	79fa      	ldrb	r2, [r7, #7]
 80084a0:	701a      	strb	r2, [r3, #0]

                            startI--;
 80084a2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80084a6:	b2db      	uxtb	r3, r3
 80084a8:	3b01      	subs	r3, #1
 80084aa:	b2db      	uxtb	r3, r3
 80084ac:	75bb      	strb	r3, [r7, #22]
                        while(startI != i)
 80084ae:	f997 2016 	ldrsb.w	r2, [r7, #22]
 80084b2:	79bb      	ldrb	r3, [r7, #6]
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d1ea      	bne.n	800848e <flip+0x3ae>
                         }
                         break; // sale del while porque ya sabemos que esta posicion es valida
 80084b8:	e009      	b.n	80084ce <flip+0x3ee>
                    }
                    startI++;
 80084ba:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80084be:	b2db      	uxtb	r3, r3
 80084c0:	3301      	adds	r3, #1
 80084c2:	b2db      	uxtb	r3, r3
 80084c4:	75bb      	strb	r3, [r7, #22]
                while (startI <=7)
 80084c6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80084ca:	2b07      	cmp	r3, #7
 80084cc:	ddd2      	ble.n	8008474 <flip+0x394>
                }
            }
    }

    // bottom left
    if(i < 7 && j > 0)
 80084ce:	79bb      	ldrb	r3, [r7, #6]
 80084d0:	2b06      	cmp	r3, #6
 80084d2:	d85b      	bhi.n	800858c <flip+0x4ac>
 80084d4:	797b      	ldrb	r3, [r7, #5]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d058      	beq.n	800858c <flip+0x4ac>
    {
        if(mat[i+1][j-1] == oppositePlayer)
 80084da:	79bb      	ldrb	r3, [r7, #6]
 80084dc:	1c5a      	adds	r2, r3, #1
 80084de:	797b      	ldrb	r3, [r7, #5]
 80084e0:	3b01      	subs	r3, #1
 80084e2:	494f      	ldr	r1, [pc, #316]	; (8008620 <flip+0x540>)
 80084e4:	00d2      	lsls	r2, r2, #3
 80084e6:	440a      	add	r2, r1
 80084e8:	4413      	add	r3, r2
 80084ea:	781b      	ldrb	r3, [r3, #0]
 80084ec:	7ffa      	ldrb	r2, [r7, #31]
 80084ee:	429a      	cmp	r2, r3
 80084f0:	d14c      	bne.n	800858c <flip+0x4ac>
        {
        	int8_t startI = i + 1;
 80084f2:	79bb      	ldrb	r3, [r7, #6]
 80084f4:	3301      	adds	r3, #1
 80084f6:	b2db      	uxtb	r3, r3
 80084f8:	757b      	strb	r3, [r7, #21]
            int8_t startJ = j - 1;
 80084fa:	797b      	ldrb	r3, [r7, #5]
 80084fc:	3b01      	subs	r3, #1
 80084fe:	b2db      	uxtb	r3, r3
 8008500:	753b      	strb	r3, [r7, #20]

            while (startI <=7  && startJ >= 0)
 8008502:	e039      	b.n	8008578 <flip+0x498>
            {
                if(mat [startI][startJ]==player)
 8008504:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8008508:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800850c:	4944      	ldr	r1, [pc, #272]	; (8008620 <flip+0x540>)
 800850e:	00d2      	lsls	r2, r2, #3
 8008510:	440a      	add	r2, r1
 8008512:	4413      	add	r3, r2
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	79fa      	ldrb	r2, [r7, #7]
 8008518:	429a      	cmp	r2, r3
 800851a:	d121      	bne.n	8008560 <flip+0x480>
                {
                     while(startI != i && startJ!=j)
 800851c:	e015      	b.n	800854a <flip+0x46a>
                    {
                        mat[startI][startJ] = player;
 800851e:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8008522:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8008526:	493e      	ldr	r1, [pc, #248]	; (8008620 <flip+0x540>)
 8008528:	00d2      	lsls	r2, r2, #3
 800852a:	440a      	add	r2, r1
 800852c:	4413      	add	r3, r2
 800852e:	79fa      	ldrb	r2, [r7, #7]
 8008530:	701a      	strb	r2, [r3, #0]

                        startI--;
 8008532:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8008536:	b2db      	uxtb	r3, r3
 8008538:	3b01      	subs	r3, #1
 800853a:	b2db      	uxtb	r3, r3
 800853c:	757b      	strb	r3, [r7, #21]
                        startJ++;
 800853e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8008542:	b2db      	uxtb	r3, r3
 8008544:	3301      	adds	r3, #1
 8008546:	b2db      	uxtb	r3, r3
 8008548:	753b      	strb	r3, [r7, #20]
                     while(startI != i && startJ!=j)
 800854a:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800854e:	79bb      	ldrb	r3, [r7, #6]
 8008550:	429a      	cmp	r2, r3
 8008552:	d01a      	beq.n	800858a <flip+0x4aa>
 8008554:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8008558:	797b      	ldrb	r3, [r7, #5]
 800855a:	429a      	cmp	r2, r3
 800855c:	d1df      	bne.n	800851e <flip+0x43e>
                    }
                     break; // sale del while porque ya sabemos que esta posicion es valida
 800855e:	e014      	b.n	800858a <flip+0x4aa>
                }
                startI++;
 8008560:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8008564:	b2db      	uxtb	r3, r3
 8008566:	3301      	adds	r3, #1
 8008568:	b2db      	uxtb	r3, r3
 800856a:	757b      	strb	r3, [r7, #21]
                startJ--;
 800856c:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8008570:	b2db      	uxtb	r3, r3
 8008572:	3b01      	subs	r3, #1
 8008574:	b2db      	uxtb	r3, r3
 8008576:	753b      	strb	r3, [r7, #20]
            while (startI <=7  && startJ >= 0)
 8008578:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800857c:	2b07      	cmp	r3, #7
 800857e:	dc05      	bgt.n	800858c <flip+0x4ac>
 8008580:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8008584:	2b00      	cmp	r3, #0
 8008586:	dabd      	bge.n	8008504 <flip+0x424>
 8008588:	e000      	b.n	800858c <flip+0x4ac>
                     break; // sale del while porque ya sabemos que esta posicion es valida
 800858a:	bf00      	nop
            }
        }
    }

    // left
    if(j > 0)
 800858c:	797b      	ldrb	r3, [r7, #5]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d03f      	beq.n	8008612 <flip+0x532>
    {
        if(mat[i][j-1] == oppositePlayer)
 8008592:	79ba      	ldrb	r2, [r7, #6]
 8008594:	797b      	ldrb	r3, [r7, #5]
 8008596:	3b01      	subs	r3, #1
 8008598:	4921      	ldr	r1, [pc, #132]	; (8008620 <flip+0x540>)
 800859a:	00d2      	lsls	r2, r2, #3
 800859c:	440a      	add	r2, r1
 800859e:	4413      	add	r3, r2
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	7ffa      	ldrb	r2, [r7, #31]
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d134      	bne.n	8008612 <flip+0x532>
        {
        	int8_t startI = i;
 80085a8:	79bb      	ldrb	r3, [r7, #6]
 80085aa:	73fb      	strb	r3, [r7, #15]
        	int8_t startJ = j - 1;
 80085ac:	797b      	ldrb	r3, [r7, #5]
 80085ae:	3b01      	subs	r3, #1
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	74fb      	strb	r3, [r7, #19]

            while ( startJ >= 0)
 80085b4:	e028      	b.n	8008608 <flip+0x528>
            {
                if(mat [startI][startJ]==player)
 80085b6:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80085ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80085be:	4918      	ldr	r1, [pc, #96]	; (8008620 <flip+0x540>)
 80085c0:	00d2      	lsls	r2, r2, #3
 80085c2:	440a      	add	r2, r1
 80085c4:	4413      	add	r3, r2
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	79fa      	ldrb	r2, [r7, #7]
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d116      	bne.n	80085fc <flip+0x51c>
                {
                     while(startJ!=j)
 80085ce:	e00f      	b.n	80085f0 <flip+0x510>
                    {
                        mat[startI][startJ] = player;
 80085d0:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80085d4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80085d8:	4911      	ldr	r1, [pc, #68]	; (8008620 <flip+0x540>)
 80085da:	00d2      	lsls	r2, r2, #3
 80085dc:	440a      	add	r2, r1
 80085de:	4413      	add	r3, r2
 80085e0:	79fa      	ldrb	r2, [r7, #7]
 80085e2:	701a      	strb	r2, [r3, #0]

                        startJ++;
 80085e4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80085e8:	b2db      	uxtb	r3, r3
 80085ea:	3301      	adds	r3, #1
 80085ec:	b2db      	uxtb	r3, r3
 80085ee:	74fb      	strb	r3, [r7, #19]
                     while(startJ!=j)
 80085f0:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80085f4:	797b      	ldrb	r3, [r7, #5]
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d1ea      	bne.n	80085d0 <flip+0x4f0>
                    }
                     break; // sale del while porque ya sabemos que esta posicion es valida
 80085fa:	e00a      	b.n	8008612 <flip+0x532>
                }
                startJ--;
 80085fc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008600:	b2db      	uxtb	r3, r3
 8008602:	3b01      	subs	r3, #1
 8008604:	b2db      	uxtb	r3, r3
 8008606:	74fb      	strb	r3, [r7, #19]
            while ( startJ >= 0)
 8008608:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800860c:	2b00      	cmp	r3, #0
 800860e:	dad2      	bge.n	80085b6 <flip+0x4d6>
            }
        }
    }
}
 8008610:	e7ff      	b.n	8008612 <flip+0x532>
 8008612:	bf00      	nop
 8008614:	3724      	adds	r7, #36	; 0x24
 8008616:	46bd      	mov	sp, r7
 8008618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861c:	4770      	bx	lr
 800861e:	bf00      	nop
 8008620:	20000450 	.word	0x20000450

08008624 <getAvailableMoves>:

// Busca en el tablero entero los movimientos validos
void getAvailableMoves(uint8_t player, uint8_t availablePosition[], uint8_t *numAvailablePosition)
{
 8008624:	b480      	push	{r7}
 8008626:	b08d      	sub	sp, #52	; 0x34
 8008628:	af00      	add	r7, sp, #0
 800862a:	4603      	mov	r3, r0
 800862c:	60b9      	str	r1, [r7, #8]
 800862e:	607a      	str	r2, [r7, #4]
 8008630:	73fb      	strb	r3, [r7, #15]
	uint8_t oppositePlayer;

    if(player==1)
 8008632:	7bfb      	ldrb	r3, [r7, #15]
 8008634:	2b01      	cmp	r3, #1
 8008636:	d103      	bne.n	8008640 <getAvailableMoves+0x1c>
    {
        oppositePlayer=2;
 8008638:	2302      	movs	r3, #2
 800863a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800863e:	e002      	b.n	8008646 <getAvailableMoves+0x22>
    }
    else
    {
        oppositePlayer=1;
 8008640:	2301      	movs	r3, #1
 8008642:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }


    *numAvailablePosition = 0;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2200      	movs	r2, #0
 800864a:	701a      	strb	r2, [r3, #0]

    for(int i=0; i<8; i++)
 800864c:	2300      	movs	r3, #0
 800864e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008650:	e20c      	b.n	8008a6c <getAvailableMoves+0x448>
    {
        for(int j=0; j<8; j++)
 8008652:	2300      	movs	r3, #0
 8008654:	627b      	str	r3, [r7, #36]	; 0x24
 8008656:	e202      	b.n	8008a5e <getAvailableMoves+0x43a>
        {
            // We need to check if the position i,j is empty (equal to 0). If it isnt, then we continue to the next column
            if(mat[i][j] != 0)
 8008658:	4ab0      	ldr	r2, [pc, #704]	; (800891c <getAvailableMoves+0x2f8>)
 800865a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800865c:	00db      	lsls	r3, r3, #3
 800865e:	441a      	add	r2, r3
 8008660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008662:	4413      	add	r3, r2
 8008664:	781b      	ldrb	r3, [r3, #0]
 8008666:	2b00      	cmp	r3, #0
 8008668:	f040 81f5 	bne.w	8008a56 <getAvailableMoves+0x432>
            /* TL   T   TR
             *  L (i,j) R
             * BL   B   BR
             */

            uint8_t positionValid = 0;//al inicio declaramos que la posición en invalida
 800866c:	2300      	movs	r3, #0
 800866e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

            // top left
            if(i > 0 && j > 0) // Esta condición sirve para no acceder a posiciones fuera de la tabla
 8008672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008674:	2b00      	cmp	r3, #0
 8008676:	dd42      	ble.n	80086fe <getAvailableMoves+0xda>
 8008678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867a:	2b00      	cmp	r3, #0
 800867c:	dd3f      	ble.n	80086fe <getAvailableMoves+0xda>
            {
                if(mat[i-1][j-1] == oppositePlayer)
 800867e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008680:	1e5a      	subs	r2, r3, #1
 8008682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008684:	3b01      	subs	r3, #1
 8008686:	49a5      	ldr	r1, [pc, #660]	; (800891c <getAvailableMoves+0x2f8>)
 8008688:	00d2      	lsls	r2, r2, #3
 800868a:	440a      	add	r2, r1
 800868c:	4413      	add	r3, r2
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008694:	429a      	cmp	r2, r3
 8008696:	d132      	bne.n	80086fe <getAvailableMoves+0xda>
                {
                    // posicao adjacent
                	int8_t startI = i - 1;//comienza en el mismo sitio de la ficha opuesta
 8008698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800869a:	b2db      	uxtb	r3, r3
 800869c:	3b01      	subs	r3, #1
 800869e:	b2db      	uxtb	r3, r3
 80086a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
                	int8_t startJ = j - 1;
 80086a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a6:	b2db      	uxtb	r3, r3
 80086a8:	3b01      	subs	r3, #1
 80086aa:	b2db      	uxtb	r3, r3
 80086ac:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

                    while (startI >= 0 && startJ >= 0)//hasta los limites de la tabla
 80086b0:	e01d      	b.n	80086ee <getAvailableMoves+0xca>
                    {
                        if(mat [startI][startJ]==player)
 80086b2:	f997 2022 	ldrsb.w	r2, [r7, #34]	; 0x22
 80086b6:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 80086ba:	4998      	ldr	r1, [pc, #608]	; (800891c <getAvailableMoves+0x2f8>)
 80086bc:	00d2      	lsls	r2, r2, #3
 80086be:	440a      	add	r2, r1
 80086c0:	4413      	add	r3, r2
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	7bfa      	ldrb	r2, [r7, #15]
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d103      	bne.n	80086d2 <getAvailableMoves+0xae>
                        {
                             positionValid = 1;
 80086ca:	2301      	movs	r3, #1
 80086cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                             break; // sale del while porque ya sabemos que esta posicion es valida
 80086d0:	e015      	b.n	80086fe <getAvailableMoves+0xda>
                        }
                        startI--;
 80086d2:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 80086d6:	b2db      	uxtb	r3, r3
 80086d8:	3b01      	subs	r3, #1
 80086da:	b2db      	uxtb	r3, r3
 80086dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
                        startJ--;
 80086e0:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	3b01      	subs	r3, #1
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
                    while (startI >= 0 && startJ >= 0)//hasta los limites de la tabla
 80086ee:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	db03      	blt.n	80086fe <getAvailableMoves+0xda>
 80086f6:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	dad9      	bge.n	80086b2 <getAvailableMoves+0x8e>
                    }
                }
            }

            // top
            if(i>0)
 80086fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008700:	2b00      	cmp	r3, #0
 8008702:	dd2f      	ble.n	8008764 <getAvailableMoves+0x140>
            {
                if(mat[i-1][j] == oppositePlayer)
 8008704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008706:	3b01      	subs	r3, #1
 8008708:	4a84      	ldr	r2, [pc, #528]	; (800891c <getAvailableMoves+0x2f8>)
 800870a:	00db      	lsls	r3, r3, #3
 800870c:	441a      	add	r2, r3
 800870e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008710:	4413      	add	r3, r2
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008718:	429a      	cmp	r2, r3
 800871a:	d123      	bne.n	8008764 <getAvailableMoves+0x140>
                {
                    int8_t startI = i - 1;
 800871c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800871e:	b2db      	uxtb	r3, r3
 8008720:	3b01      	subs	r3, #1
 8008722:	b2db      	uxtb	r3, r3
 8008724:	f887 3020 	strb.w	r3, [r7, #32]
                    int8_t startJ = j;
 8008728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872a:	75bb      	strb	r3, [r7, #22]

                    while (startI >= 0)
 800872c:	e016      	b.n	800875c <getAvailableMoves+0x138>
                    {
                        if(mat [startI][startJ]==player)
 800872e:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8008732:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8008736:	4979      	ldr	r1, [pc, #484]	; (800891c <getAvailableMoves+0x2f8>)
 8008738:	00d2      	lsls	r2, r2, #3
 800873a:	440a      	add	r2, r1
 800873c:	4413      	add	r3, r2
 800873e:	781b      	ldrb	r3, [r3, #0]
 8008740:	7bfa      	ldrb	r2, [r7, #15]
 8008742:	429a      	cmp	r2, r3
 8008744:	d103      	bne.n	800874e <getAvailableMoves+0x12a>
                        {
                             positionValid = 1;
 8008746:	2301      	movs	r3, #1
 8008748:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                             break; // sale del while porque ya sabemos que esta posicion es valida
 800874c:	e00a      	b.n	8008764 <getAvailableMoves+0x140>
                        }
                        startI--;
 800874e:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8008752:	b2db      	uxtb	r3, r3
 8008754:	3b01      	subs	r3, #1
 8008756:	b2db      	uxtb	r3, r3
 8008758:	f887 3020 	strb.w	r3, [r7, #32]
                    while (startI >= 0)
 800875c:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8008760:	2b00      	cmp	r3, #0
 8008762:	dae4      	bge.n	800872e <getAvailableMoves+0x10a>
                    }
                }
            }

            // top right
            if(i > 0 && j <7)
 8008764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008766:	2b00      	cmp	r3, #0
 8008768:	dd3e      	ble.n	80087e8 <getAvailableMoves+0x1c4>
 800876a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876c:	2b06      	cmp	r3, #6
 800876e:	dc3b      	bgt.n	80087e8 <getAvailableMoves+0x1c4>
            {
                if(mat[i-1][j+1] == oppositePlayer)
 8008770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008772:	1e5a      	subs	r2, r3, #1
 8008774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008776:	3301      	adds	r3, #1
 8008778:	4968      	ldr	r1, [pc, #416]	; (800891c <getAvailableMoves+0x2f8>)
 800877a:	00d2      	lsls	r2, r2, #3
 800877c:	440a      	add	r2, r1
 800877e:	4413      	add	r3, r2
 8008780:	781b      	ldrb	r3, [r3, #0]
 8008782:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008786:	429a      	cmp	r2, r3
 8008788:	d12e      	bne.n	80087e8 <getAvailableMoves+0x1c4>
                {
                	int8_t startI = i - 1;
 800878a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800878c:	b2db      	uxtb	r3, r3
 800878e:	3b01      	subs	r3, #1
 8008790:	b2db      	uxtb	r3, r3
 8008792:	77fb      	strb	r3, [r7, #31]
                	int8_t startJ = j + 1;
 8008794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008796:	b2db      	uxtb	r3, r3
 8008798:	3301      	adds	r3, #1
 800879a:	b2db      	uxtb	r3, r3
 800879c:	77bb      	strb	r3, [r7, #30]

                    while (startI >= 0 && startJ <= 7)
 800879e:	e01b      	b.n	80087d8 <getAvailableMoves+0x1b4>
                    {
                        if(mat [startI][startJ]==player)
 80087a0:	f997 201f 	ldrsb.w	r2, [r7, #31]
 80087a4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80087a8:	495c      	ldr	r1, [pc, #368]	; (800891c <getAvailableMoves+0x2f8>)
 80087aa:	00d2      	lsls	r2, r2, #3
 80087ac:	440a      	add	r2, r1
 80087ae:	4413      	add	r3, r2
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	7bfa      	ldrb	r2, [r7, #15]
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d103      	bne.n	80087c0 <getAvailableMoves+0x19c>
                        {
                             positionValid = 1;
 80087b8:	2301      	movs	r3, #1
 80087ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                             break; // sale del while porque ya sabemos que esta posicion es valida
 80087be:	e013      	b.n	80087e8 <getAvailableMoves+0x1c4>
                        }
                        startI--;
 80087c0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80087c4:	b2db      	uxtb	r3, r3
 80087c6:	3b01      	subs	r3, #1
 80087c8:	b2db      	uxtb	r3, r3
 80087ca:	77fb      	strb	r3, [r7, #31]
                        startJ++;
 80087cc:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80087d0:	b2db      	uxtb	r3, r3
 80087d2:	3301      	adds	r3, #1
 80087d4:	b2db      	uxtb	r3, r3
 80087d6:	77bb      	strb	r3, [r7, #30]
                    while (startI >= 0 && startJ <= 7)
 80087d8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	db03      	blt.n	80087e8 <getAvailableMoves+0x1c4>
 80087e0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80087e4:	2b07      	cmp	r3, #7
 80087e6:	dddb      	ble.n	80087a0 <getAvailableMoves+0x17c>
                    }
                }
            }

            // right
            if(j < 7)
 80087e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ea:	2b06      	cmp	r3, #6
 80087ec:	dc2d      	bgt.n	800884a <getAvailableMoves+0x226>
            {
                if(mat[i][j+1] == oppositePlayer)
 80087ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f0:	3301      	adds	r3, #1
 80087f2:	494a      	ldr	r1, [pc, #296]	; (800891c <getAvailableMoves+0x2f8>)
 80087f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087f6:	00d2      	lsls	r2, r2, #3
 80087f8:	440a      	add	r2, r1
 80087fa:	4413      	add	r3, r2
 80087fc:	781b      	ldrb	r3, [r3, #0]
 80087fe:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008802:	429a      	cmp	r2, r3
 8008804:	d121      	bne.n	800884a <getAvailableMoves+0x226>
                {
                	int8_t startI = i;
 8008806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008808:	757b      	strb	r3, [r7, #21]
                	int8_t startJ = j + 1;
 800880a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880c:	b2db      	uxtb	r3, r3
 800880e:	3301      	adds	r3, #1
 8008810:	b2db      	uxtb	r3, r3
 8008812:	777b      	strb	r3, [r7, #29]

                    while (startJ <= 7)
 8008814:	e015      	b.n	8008842 <getAvailableMoves+0x21e>
                    {
                        if(mat [startI][startJ]==player)
 8008816:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800881a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800881e:	493f      	ldr	r1, [pc, #252]	; (800891c <getAvailableMoves+0x2f8>)
 8008820:	00d2      	lsls	r2, r2, #3
 8008822:	440a      	add	r2, r1
 8008824:	4413      	add	r3, r2
 8008826:	781b      	ldrb	r3, [r3, #0]
 8008828:	7bfa      	ldrb	r2, [r7, #15]
 800882a:	429a      	cmp	r2, r3
 800882c:	d103      	bne.n	8008836 <getAvailableMoves+0x212>
                        {
                             positionValid = 1;
 800882e:	2301      	movs	r3, #1
 8008830:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                             break; // sale del while porque ya sabemos que esta posicion es valida
 8008834:	e009      	b.n	800884a <getAvailableMoves+0x226>
                        }
                        startJ++;
 8008836:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800883a:	b2db      	uxtb	r3, r3
 800883c:	3301      	adds	r3, #1
 800883e:	b2db      	uxtb	r3, r3
 8008840:	777b      	strb	r3, [r7, #29]
                    while (startJ <= 7)
 8008842:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008846:	2b07      	cmp	r3, #7
 8008848:	dde5      	ble.n	8008816 <getAvailableMoves+0x1f2>
                    }
                }
            }

            // bottom right
            if (i < 7 && j < 7)
 800884a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800884c:	2b06      	cmp	r3, #6
 800884e:	dc3e      	bgt.n	80088ce <getAvailableMoves+0x2aa>
 8008850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008852:	2b06      	cmp	r3, #6
 8008854:	dc3b      	bgt.n	80088ce <getAvailableMoves+0x2aa>
            {
                if(mat[i+1][j+1] == oppositePlayer)
 8008856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008858:	1c5a      	adds	r2, r3, #1
 800885a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885c:	3301      	adds	r3, #1
 800885e:	492f      	ldr	r1, [pc, #188]	; (800891c <getAvailableMoves+0x2f8>)
 8008860:	00d2      	lsls	r2, r2, #3
 8008862:	440a      	add	r2, r1
 8008864:	4413      	add	r3, r2
 8008866:	781b      	ldrb	r3, [r3, #0]
 8008868:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800886c:	429a      	cmp	r2, r3
 800886e:	d12e      	bne.n	80088ce <getAvailableMoves+0x2aa>
                {
                	int8_t startI = i + 1;
 8008870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008872:	b2db      	uxtb	r3, r3
 8008874:	3301      	adds	r3, #1
 8008876:	b2db      	uxtb	r3, r3
 8008878:	773b      	strb	r3, [r7, #28]
                	int8_t startJ = j + 1;
 800887a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800887c:	b2db      	uxtb	r3, r3
 800887e:	3301      	adds	r3, #1
 8008880:	b2db      	uxtb	r3, r3
 8008882:	76fb      	strb	r3, [r7, #27]

                    while (startI <= 7 && startJ <= 7)
 8008884:	e01b      	b.n	80088be <getAvailableMoves+0x29a>
                    {
                        if(mat [startI][startJ]==player)
 8008886:	f997 201c 	ldrsb.w	r2, [r7, #28]
 800888a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800888e:	4923      	ldr	r1, [pc, #140]	; (800891c <getAvailableMoves+0x2f8>)
 8008890:	00d2      	lsls	r2, r2, #3
 8008892:	440a      	add	r2, r1
 8008894:	4413      	add	r3, r2
 8008896:	781b      	ldrb	r3, [r3, #0]
 8008898:	7bfa      	ldrb	r2, [r7, #15]
 800889a:	429a      	cmp	r2, r3
 800889c:	d103      	bne.n	80088a6 <getAvailableMoves+0x282>
                        {
                             positionValid = 1;
 800889e:	2301      	movs	r3, #1
 80088a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                             break; // sale del while porque ya sabemos que esta posicion es valida
 80088a4:	e013      	b.n	80088ce <getAvailableMoves+0x2aa>
                        }
                        startI++;
 80088a6:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80088aa:	b2db      	uxtb	r3, r3
 80088ac:	3301      	adds	r3, #1
 80088ae:	b2db      	uxtb	r3, r3
 80088b0:	773b      	strb	r3, [r7, #28]
                        startJ++;
 80088b2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	3301      	adds	r3, #1
 80088ba:	b2db      	uxtb	r3, r3
 80088bc:	76fb      	strb	r3, [r7, #27]
                    while (startI <= 7 && startJ <= 7)
 80088be:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80088c2:	2b07      	cmp	r3, #7
 80088c4:	dc03      	bgt.n	80088ce <getAvailableMoves+0x2aa>
 80088c6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80088ca:	2b07      	cmp	r3, #7
 80088cc:	dddb      	ble.n	8008886 <getAvailableMoves+0x262>
                    }
                }
            }

            // bottom
            if(i < 7)
 80088ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d0:	2b06      	cmp	r3, #6
 80088d2:	dc2f      	bgt.n	8008934 <getAvailableMoves+0x310>
            {
                if(mat[i+1][j] == oppositePlayer)
 80088d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d6:	3301      	adds	r3, #1
 80088d8:	4a10      	ldr	r2, [pc, #64]	; (800891c <getAvailableMoves+0x2f8>)
 80088da:	00db      	lsls	r3, r3, #3
 80088dc:	441a      	add	r2, r3
 80088de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e0:	4413      	add	r3, r2
 80088e2:	781b      	ldrb	r3, [r3, #0]
 80088e4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d123      	bne.n	8008934 <getAvailableMoves+0x310>
                {
                	int8_t startI = i + 1;
 80088ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	3301      	adds	r3, #1
 80088f2:	b2db      	uxtb	r3, r3
 80088f4:	76bb      	strb	r3, [r7, #26]
                	int8_t startJ = j;
 80088f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f8:	753b      	strb	r3, [r7, #20]

                    while (startI <=7)
 80088fa:	e017      	b.n	800892c <getAvailableMoves+0x308>
                    {
                        if(mat [startI][startJ]==player)
 80088fc:	f997 201a 	ldrsb.w	r2, [r7, #26]
 8008900:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8008904:	4905      	ldr	r1, [pc, #20]	; (800891c <getAvailableMoves+0x2f8>)
 8008906:	00d2      	lsls	r2, r2, #3
 8008908:	440a      	add	r2, r1
 800890a:	4413      	add	r3, r2
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	7bfa      	ldrb	r2, [r7, #15]
 8008910:	429a      	cmp	r2, r3
 8008912:	d105      	bne.n	8008920 <getAvailableMoves+0x2fc>
                        {
                             positionValid = 1;
 8008914:	2301      	movs	r3, #1
 8008916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                             break; // sale del while porque ya sabemos que esta posicion es valida
 800891a:	e00b      	b.n	8008934 <getAvailableMoves+0x310>
 800891c:	20000450 	.word	0x20000450
                        }
                        startI++;
 8008920:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008924:	b2db      	uxtb	r3, r3
 8008926:	3301      	adds	r3, #1
 8008928:	b2db      	uxtb	r3, r3
 800892a:	76bb      	strb	r3, [r7, #26]
                    while (startI <=7)
 800892c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008930:	2b07      	cmp	r3, #7
 8008932:	dde3      	ble.n	80088fc <getAvailableMoves+0x2d8>
                    }
                }
            }

            // bottom left
            if(i < 7 && j > 0)
 8008934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008936:	2b06      	cmp	r3, #6
 8008938:	dc3e      	bgt.n	80089b8 <getAvailableMoves+0x394>
 800893a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893c:	2b00      	cmp	r3, #0
 800893e:	dd3b      	ble.n	80089b8 <getAvailableMoves+0x394>
            {
                if(mat[i+1][j-1] == oppositePlayer)
 8008940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008942:	1c5a      	adds	r2, r3, #1
 8008944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008946:	3b01      	subs	r3, #1
 8008948:	494d      	ldr	r1, [pc, #308]	; (8008a80 <getAvailableMoves+0x45c>)
 800894a:	00d2      	lsls	r2, r2, #3
 800894c:	440a      	add	r2, r1
 800894e:	4413      	add	r3, r2
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008956:	429a      	cmp	r2, r3
 8008958:	d12e      	bne.n	80089b8 <getAvailableMoves+0x394>
                {
                	int8_t startI = i + 1;
 800895a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800895c:	b2db      	uxtb	r3, r3
 800895e:	3301      	adds	r3, #1
 8008960:	b2db      	uxtb	r3, r3
 8008962:	767b      	strb	r3, [r7, #25]
                	int8_t startJ = j - 1;
 8008964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008966:	b2db      	uxtb	r3, r3
 8008968:	3b01      	subs	r3, #1
 800896a:	b2db      	uxtb	r3, r3
 800896c:	763b      	strb	r3, [r7, #24]

                    while (startI <=7  && startJ >= 0)
 800896e:	e01b      	b.n	80089a8 <getAvailableMoves+0x384>
                    {
                        if(mat [startI][startJ]==player)
 8008970:	f997 2019 	ldrsb.w	r2, [r7, #25]
 8008974:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8008978:	4941      	ldr	r1, [pc, #260]	; (8008a80 <getAvailableMoves+0x45c>)
 800897a:	00d2      	lsls	r2, r2, #3
 800897c:	440a      	add	r2, r1
 800897e:	4413      	add	r3, r2
 8008980:	781b      	ldrb	r3, [r3, #0]
 8008982:	7bfa      	ldrb	r2, [r7, #15]
 8008984:	429a      	cmp	r2, r3
 8008986:	d103      	bne.n	8008990 <getAvailableMoves+0x36c>
                        {
                             positionValid = 1;
 8008988:	2301      	movs	r3, #1
 800898a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                             break; // sale del while porque ya sabemos que esta posicion es valida
 800898e:	e013      	b.n	80089b8 <getAvailableMoves+0x394>
                        }
                        startI++;
 8008990:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8008994:	b2db      	uxtb	r3, r3
 8008996:	3301      	adds	r3, #1
 8008998:	b2db      	uxtb	r3, r3
 800899a:	767b      	strb	r3, [r7, #25]
                        startJ--;
 800899c:	f997 3018 	ldrsb.w	r3, [r7, #24]
 80089a0:	b2db      	uxtb	r3, r3
 80089a2:	3b01      	subs	r3, #1
 80089a4:	b2db      	uxtb	r3, r3
 80089a6:	763b      	strb	r3, [r7, #24]
                    while (startI <=7  && startJ >= 0)
 80089a8:	f997 3019 	ldrsb.w	r3, [r7, #25]
 80089ac:	2b07      	cmp	r3, #7
 80089ae:	dc03      	bgt.n	80089b8 <getAvailableMoves+0x394>
 80089b0:	f997 3018 	ldrsb.w	r3, [r7, #24]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	dadb      	bge.n	8008970 <getAvailableMoves+0x34c>
                    }
                }
            }

            // left
            if(j > 0)
 80089b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	dd2d      	ble.n	8008a1a <getAvailableMoves+0x3f6>
            {
                if(mat[i][j-1] == oppositePlayer)
 80089be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c0:	3b01      	subs	r3, #1
 80089c2:	492f      	ldr	r1, [pc, #188]	; (8008a80 <getAvailableMoves+0x45c>)
 80089c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089c6:	00d2      	lsls	r2, r2, #3
 80089c8:	440a      	add	r2, r1
 80089ca:	4413      	add	r3, r2
 80089cc:	781b      	ldrb	r3, [r3, #0]
 80089ce:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80089d2:	429a      	cmp	r2, r3
 80089d4:	d121      	bne.n	8008a1a <getAvailableMoves+0x3f6>
                {
                	int8_t startI = i;
 80089d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d8:	74fb      	strb	r3, [r7, #19]
                	int8_t startJ = j - 1;
 80089da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	3b01      	subs	r3, #1
 80089e0:	b2db      	uxtb	r3, r3
 80089e2:	75fb      	strb	r3, [r7, #23]

                    while ( startJ >= 0)
 80089e4:	e015      	b.n	8008a12 <getAvailableMoves+0x3ee>
                    {
                        if(mat [startI][startJ]==player)
 80089e6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80089ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80089ee:	4924      	ldr	r1, [pc, #144]	; (8008a80 <getAvailableMoves+0x45c>)
 80089f0:	00d2      	lsls	r2, r2, #3
 80089f2:	440a      	add	r2, r1
 80089f4:	4413      	add	r3, r2
 80089f6:	781b      	ldrb	r3, [r3, #0]
 80089f8:	7bfa      	ldrb	r2, [r7, #15]
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d103      	bne.n	8008a06 <getAvailableMoves+0x3e2>
                        {
                             positionValid = 1;
 80089fe:	2301      	movs	r3, #1
 8008a00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                             break; // sale del while porque ya sabemos que esta posicion es valida
 8008a04:	e009      	b.n	8008a1a <getAvailableMoves+0x3f6>
                        }
                        startJ--;
 8008a06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008a0a:	b2db      	uxtb	r3, r3
 8008a0c:	3b01      	subs	r3, #1
 8008a0e:	b2db      	uxtb	r3, r3
 8008a10:	75fb      	strb	r3, [r7, #23]
                    while ( startJ >= 0)
 8008a12:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	dae5      	bge.n	80089e6 <getAvailableMoves+0x3c2>
                    }
                }
            }

            if (positionValid == 1)
 8008a1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a1e:	2b01      	cmp	r3, #1
 8008a20:	d11a      	bne.n	8008a58 <getAvailableMoves+0x434>
            {
                *availablePosition=(i+1)*10+j+1;//almacenar esta posicion que esta disponible, podria utilizar otro puntero para j
 8008a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a24:	3301      	adds	r3, #1
 8008a26:	b2db      	uxtb	r3, r3
 8008a28:	461a      	mov	r2, r3
 8008a2a:	0092      	lsls	r2, r2, #2
 8008a2c:	4413      	add	r3, r2
 8008a2e:	005b      	lsls	r3, r3, #1
 8008a30:	b2da      	uxtb	r2, r3
 8008a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a34:	b2db      	uxtb	r3, r3
 8008a36:	4413      	add	r3, r2
 8008a38:	b2db      	uxtb	r3, r3
 8008a3a:	3301      	adds	r3, #1
 8008a3c:	b2da      	uxtb	r2, r3
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	701a      	strb	r2, [r3, #0]
                availablePosition++;//para que la proxima vez que encontraras una posición disponible la almacenaras en el enderezo de memoria
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	3301      	adds	r3, #1
 8008a46:	60bb      	str	r3, [r7, #8]

                (*numAvailablePosition)++;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	3301      	adds	r3, #1
 8008a4e:	b2da      	uxtb	r2, r3
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	701a      	strb	r2, [r3, #0]
 8008a54:	e000      	b.n	8008a58 <getAvailableMoves+0x434>
                continue;
 8008a56:	bf00      	nop
        for(int j=0; j<8; j++)
 8008a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8008a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a60:	2b07      	cmp	r3, #7
 8008a62:	f77f adf9 	ble.w	8008658 <getAvailableMoves+0x34>
    for(int i=0; i<8; i++)
 8008a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a68:	3301      	adds	r3, #1
 8008a6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a6e:	2b07      	cmp	r3, #7
 8008a70:	f77f adef 	ble.w	8008652 <getAvailableMoves+0x2e>
            }
        }
    }
}
 8008a74:	bf00      	nop
 8008a76:	3734      	adds	r7, #52	; 0x34
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr
 8008a80:	20000450 	.word	0x20000450

08008a84 <insertMove>:


//inserta una posición en el tablero para el jugador, pasada por parámetro(player) si la posición fuera valida
//retorna 0 cuando la posición es invalida, retorna 1 cuando es valida
int insertMove(uint8_t i, uint8_t j, uint8_t player, uint8_t availablePosition[], uint8_t numAvailablePosition)//como necesito de saber las jugadas en el tablero, paso la matrix por parametros
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b084      	sub	sp, #16
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	603b      	str	r3, [r7, #0]
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	71fb      	strb	r3, [r7, #7]
 8008a90:	460b      	mov	r3, r1
 8008a92:	71bb      	strb	r3, [r7, #6]
 8008a94:	4613      	mov	r3, r2
 8008a96:	717b      	strb	r3, [r7, #5]
	uint8_t n = (i+1)*10+(j+1);
 8008a98:	79fb      	ldrb	r3, [r7, #7]
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	b2db      	uxtb	r3, r3
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	0092      	lsls	r2, r2, #2
 8008aa2:	4413      	add	r3, r2
 8008aa4:	005b      	lsls	r3, r3, #1
 8008aa6:	b2da      	uxtb	r2, r3
 8008aa8:	79bb      	ldrb	r3, [r7, #6]
 8008aaa:	4413      	add	r3, r2
 8008aac:	b2db      	uxtb	r3, r3
 8008aae:	3301      	adds	r3, #1
 8008ab0:	73bb      	strb	r3, [r7, #14]

    for(uint8_t k=0; k<numAvailablePosition; k++)
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	73fb      	strb	r3, [r7, #15]
 8008ab6:	e019      	b.n	8008aec <insertMove+0x68>
    {
        if(availablePosition[k]==n)//quiero saber si el valor que la persona escribio esta en las posiciones disponibles
 8008ab8:	7bfb      	ldrb	r3, [r7, #15]
 8008aba:	683a      	ldr	r2, [r7, #0]
 8008abc:	4413      	add	r3, r2
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	7bba      	ldrb	r2, [r7, #14]
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	d10f      	bne.n	8008ae6 <insertMove+0x62>
        {
            mat[i][j] = player;
 8008ac6:	79fa      	ldrb	r2, [r7, #7]
 8008ac8:	79bb      	ldrb	r3, [r7, #6]
 8008aca:	490d      	ldr	r1, [pc, #52]	; (8008b00 <insertMove+0x7c>)
 8008acc:	00d2      	lsls	r2, r2, #3
 8008ace:	440a      	add	r2, r1
 8008ad0:	4413      	add	r3, r2
 8008ad2:	797a      	ldrb	r2, [r7, #5]
 8008ad4:	701a      	strb	r2, [r3, #0]
            flip(player, i, j);
 8008ad6:	79ba      	ldrb	r2, [r7, #6]
 8008ad8:	79f9      	ldrb	r1, [r7, #7]
 8008ada:	797b      	ldrb	r3, [r7, #5]
 8008adc:	4618      	mov	r0, r3
 8008ade:	f7ff faff 	bl	80080e0 <flip>
            return 1;
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	e007      	b.n	8008af6 <insertMove+0x72>
    for(uint8_t k=0; k<numAvailablePosition; k++)
 8008ae6:	7bfb      	ldrb	r3, [r7, #15]
 8008ae8:	3301      	adds	r3, #1
 8008aea:	73fb      	strb	r3, [r7, #15]
 8008aec:	7bfa      	ldrb	r2, [r7, #15]
 8008aee:	7e3b      	ldrb	r3, [r7, #24]
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d3e1      	bcc.n	8008ab8 <insertMove+0x34>
        }
    }

    return 0;
 8008af4:	2300      	movs	r3, #0
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3710      	adds	r7, #16
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}
 8008afe:	bf00      	nop
 8008b00:	20000450 	.word	0x20000450

08008b04 <SCB_EnableICache>:
{
 8008b04:	b480      	push	{r7}
 8008b06:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8008b08:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008b0c:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8008b10:	4b0b      	ldr	r3, [pc, #44]	; (8008b40 <SCB_EnableICache+0x3c>)
 8008b12:	2200      	movs	r2, #0
 8008b14:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8008b18:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008b1c:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8008b20:	4b07      	ldr	r3, [pc, #28]	; (8008b40 <SCB_EnableICache+0x3c>)
 8008b22:	695b      	ldr	r3, [r3, #20]
 8008b24:	4a06      	ldr	r2, [pc, #24]	; (8008b40 <SCB_EnableICache+0x3c>)
 8008b26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b2a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8008b2c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008b30:	f3bf 8f6f 	isb	sy
}
 8008b34:	bf00      	nop
 8008b36:	46bd      	mov	sp, r7
 8008b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3c:	4770      	bx	lr
 8008b3e:	bf00      	nop
 8008b40:	e000ed00 	.word	0xe000ed00

08008b44 <SCB_EnableDCache>:
{
 8008b44:	b480      	push	{r7}
 8008b46:	b085      	sub	sp, #20
 8008b48:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8008b4a:	4b1d      	ldr	r3, [pc, #116]	; (8008bc0 <SCB_EnableDCache+0x7c>)
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8008b52:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8008b56:	4b1a      	ldr	r3, [pc, #104]	; (8008bc0 <SCB_EnableDCache+0x7c>)
 8008b58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b5c:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	0b5b      	lsrs	r3, r3, #13
 8008b62:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008b66:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	08db      	lsrs	r3, r3, #3
 8008b6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b70:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	015a      	lsls	r2, r3, #5
 8008b76:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8008b7a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8008b7c:	68ba      	ldr	r2, [r7, #8]
 8008b7e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8008b80:	490f      	ldr	r1, [pc, #60]	; (8008bc0 <SCB_EnableDCache+0x7c>)
 8008b82:	4313      	orrs	r3, r2
 8008b84:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	1e5a      	subs	r2, r3, #1
 8008b8c:	60ba      	str	r2, [r7, #8]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d1ef      	bne.n	8008b72 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	1e5a      	subs	r2, r3, #1
 8008b96:	60fa      	str	r2, [r7, #12]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d1e5      	bne.n	8008b68 <SCB_EnableDCache+0x24>
 8008b9c:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8008ba0:	4b07      	ldr	r3, [pc, #28]	; (8008bc0 <SCB_EnableDCache+0x7c>)
 8008ba2:	695b      	ldr	r3, [r3, #20]
 8008ba4:	4a06      	ldr	r2, [pc, #24]	; (8008bc0 <SCB_EnableDCache+0x7c>)
 8008ba6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008baa:	6153      	str	r3, [r2, #20]
 8008bac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008bb0:	f3bf 8f6f 	isb	sy
}
 8008bb4:	bf00      	nop
 8008bb6:	3714      	adds	r7, #20
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr
 8008bc0:	e000ed00 	.word	0xe000ed00

08008bc4 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b082      	sub	sp, #8
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
	ADC1value = HAL_ADC_GetValue(hadc);//Leer el valor ADC
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f7fa f954 	bl	8002e7a <HAL_ADC_GetValue>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	4b03      	ldr	r3, [pc, #12]	; (8008be4 <HAL_ADC_ConvCpltCallback+0x20>)
 8008bd8:	601a      	str	r2, [r3, #0]
}
 8008bda:	bf00      	nop
 8008bdc:	3708      	adds	r7, #8
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	200005e8 	.word	0x200005e8

08008be8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b082      	sub	sp, #8
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	4603      	mov	r3, r0
 8008bf0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0)
 8008bf2:	88fb      	ldrh	r3, [r7, #6]
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	d105      	bne.n	8008c04 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		resetPressed = 1;
 8008bf8:	4b21      	ldr	r3, [pc, #132]	; (8008c80 <HAL_GPIO_EXTI_Callback+0x98>)
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	701a      	strb	r2, [r3, #0]
		programPhase = 1;
 8008bfe:	4b21      	ldr	r3, [pc, #132]	; (8008c84 <HAL_GPIO_EXTI_Callback+0x9c>)
 8008c00:	2201      	movs	r2, #1
 8008c02:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_13)
 8008c04:	88fb      	ldrh	r3, [r7, #6]
 8008c06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c0a:	d135      	bne.n	8008c78 <HAL_GPIO_EXTI_Callback+0x90>
	{
		  BSP_TS_GetState(&TS_State);
 8008c0c:	481e      	ldr	r0, [pc, #120]	; (8008c88 <HAL_GPIO_EXTI_Callback+0xa0>)
 8008c0e:	f7f9 fd1b 	bl	8002648 <BSP_TS_GetState>

		  if(TS_State.touchDetected >= 1 && alreadyTouched==0)
 8008c12:	4b1d      	ldr	r3, [pc, #116]	; (8008c88 <HAL_GPIO_EXTI_Callback+0xa0>)
 8008c14:	781b      	ldrb	r3, [r3, #0]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d027      	beq.n	8008c6a <HAL_GPIO_EXTI_Callback+0x82>
 8008c1a:	4b1c      	ldr	r3, [pc, #112]	; (8008c8c <HAL_GPIO_EXTI_Callback+0xa4>)
 8008c1c:	781b      	ldrb	r3, [r3, #0]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d123      	bne.n	8008c6a <HAL_GPIO_EXTI_Callback+0x82>
		  {
			  alreadyTouched=1;
 8008c22:	4b1a      	ldr	r3, [pc, #104]	; (8008c8c <HAL_GPIO_EXTI_Callback+0xa4>)
 8008c24:	2201      	movs	r2, #1
 8008c26:	701a      	strb	r2, [r3, #0]

			  // Lineas=Y; Columnas=X
			  if(touchedX <= 7)
 8008c28:	4b19      	ldr	r3, [pc, #100]	; (8008c90 <HAL_GPIO_EXTI_Callback+0xa8>)
 8008c2a:	781b      	ldrb	r3, [r3, #0]
 8008c2c:	2b07      	cmp	r3, #7
 8008c2e:	d813      	bhi.n	8008c58 <HAL_GPIO_EXTI_Callback+0x70>
			  {
				  touchedX = TS_State.touchY[0]/60;
 8008c30:	4b15      	ldr	r3, [pc, #84]	; (8008c88 <HAL_GPIO_EXTI_Callback+0xa0>)
 8008c32:	88db      	ldrh	r3, [r3, #6]
 8008c34:	4a17      	ldr	r2, [pc, #92]	; (8008c94 <HAL_GPIO_EXTI_Callback+0xac>)
 8008c36:	fba2 2303 	umull	r2, r3, r2, r3
 8008c3a:	095b      	lsrs	r3, r3, #5
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	b2da      	uxtb	r2, r3
 8008c40:	4b13      	ldr	r3, [pc, #76]	; (8008c90 <HAL_GPIO_EXTI_Callback+0xa8>)
 8008c42:	701a      	strb	r2, [r3, #0]
				  touchedY = TS_State.touchX[0]/60;
 8008c44:	4b10      	ldr	r3, [pc, #64]	; (8008c88 <HAL_GPIO_EXTI_Callback+0xa0>)
 8008c46:	885b      	ldrh	r3, [r3, #2]
 8008c48:	4a12      	ldr	r2, [pc, #72]	; (8008c94 <HAL_GPIO_EXTI_Callback+0xac>)
 8008c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8008c4e:	095b      	lsrs	r3, r3, #5
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	b2da      	uxtb	r2, r3
 8008c54:	4b10      	ldr	r3, [pc, #64]	; (8008c98 <HAL_GPIO_EXTI_Callback+0xb0>)
 8008c56:	701a      	strb	r2, [r3, #0]
			  }

			  touchedPosX = TS_State.touchX[0];
 8008c58:	4b0b      	ldr	r3, [pc, #44]	; (8008c88 <HAL_GPIO_EXTI_Callback+0xa0>)
 8008c5a:	885a      	ldrh	r2, [r3, #2]
 8008c5c:	4b0f      	ldr	r3, [pc, #60]	; (8008c9c <HAL_GPIO_EXTI_Callback+0xb4>)
 8008c5e:	801a      	strh	r2, [r3, #0]
			  touchedPosY = TS_State.touchY[0];
 8008c60:	4b09      	ldr	r3, [pc, #36]	; (8008c88 <HAL_GPIO_EXTI_Callback+0xa0>)
 8008c62:	88da      	ldrh	r2, [r3, #6]
 8008c64:	4b0e      	ldr	r3, [pc, #56]	; (8008ca0 <HAL_GPIO_EXTI_Callback+0xb8>)
 8008c66:	801a      	strh	r2, [r3, #0]
		  {
			  alreadyTouched=0;
		  }
	}

}
 8008c68:	e006      	b.n	8008c78 <HAL_GPIO_EXTI_Callback+0x90>
		  else if(TS_State.touchDetected == 0)
 8008c6a:	4b07      	ldr	r3, [pc, #28]	; (8008c88 <HAL_GPIO_EXTI_Callback+0xa0>)
 8008c6c:	781b      	ldrb	r3, [r3, #0]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d102      	bne.n	8008c78 <HAL_GPIO_EXTI_Callback+0x90>
			  alreadyTouched=0;
 8008c72:	4b06      	ldr	r3, [pc, #24]	; (8008c8c <HAL_GPIO_EXTI_Callback+0xa4>)
 8008c74:	2200      	movs	r2, #0
 8008c76:	701a      	strb	r2, [r3, #0]
}
 8008c78:	bf00      	nop
 8008c7a:	3708      	adds	r7, #8
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}
 8008c80:	200002eb 	.word	0x200002eb
 8008c84:	20000052 	.word	0x20000052
 8008c88:	20000644 	.word	0x20000644
 8008c8c:	200002e8 	.word	0x200002e8
 8008c90:	200005a4 	.word	0x200005a4
 8008c94:	88888889 	.word	0x88888889
 8008c98:	20000490 	.word	0x20000490
 8008c9c:	20000492 	.word	0x20000492
 8008ca0:	20000494 	.word	0x20000494

08008ca4 <insideRectangle>:

uint8_t insideRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height)
{
 8008ca4:	b490      	push	{r4, r7}
 8008ca6:	b082      	sub	sp, #8
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	4604      	mov	r4, r0
 8008cac:	4608      	mov	r0, r1
 8008cae:	4611      	mov	r1, r2
 8008cb0:	461a      	mov	r2, r3
 8008cb2:	4623      	mov	r3, r4
 8008cb4:	80fb      	strh	r3, [r7, #6]
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	80bb      	strh	r3, [r7, #4]
 8008cba:	460b      	mov	r3, r1
 8008cbc:	807b      	strh	r3, [r7, #2]
 8008cbe:	4613      	mov	r3, r2
 8008cc0:	803b      	strh	r3, [r7, #0]
	if(touchedPosX >= x && touchedPosX <= x+width)
 8008cc2:	4b11      	ldr	r3, [pc, #68]	; (8008d08 <insideRectangle+0x64>)
 8008cc4:	881b      	ldrh	r3, [r3, #0]
 8008cc6:	88fa      	ldrh	r2, [r7, #6]
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d816      	bhi.n	8008cfa <insideRectangle+0x56>
 8008ccc:	4b0e      	ldr	r3, [pc, #56]	; (8008d08 <insideRectangle+0x64>)
 8008cce:	881b      	ldrh	r3, [r3, #0]
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	88fa      	ldrh	r2, [r7, #6]
 8008cd4:	887b      	ldrh	r3, [r7, #2]
 8008cd6:	4413      	add	r3, r2
 8008cd8:	4299      	cmp	r1, r3
 8008cda:	dc0e      	bgt.n	8008cfa <insideRectangle+0x56>
	{
		if(touchedPosY >= y && touchedPosY <= y+height)
 8008cdc:	4b0b      	ldr	r3, [pc, #44]	; (8008d0c <insideRectangle+0x68>)
 8008cde:	881b      	ldrh	r3, [r3, #0]
 8008ce0:	88ba      	ldrh	r2, [r7, #4]
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	d809      	bhi.n	8008cfa <insideRectangle+0x56>
 8008ce6:	4b09      	ldr	r3, [pc, #36]	; (8008d0c <insideRectangle+0x68>)
 8008ce8:	881b      	ldrh	r3, [r3, #0]
 8008cea:	4619      	mov	r1, r3
 8008cec:	88ba      	ldrh	r2, [r7, #4]
 8008cee:	883b      	ldrh	r3, [r7, #0]
 8008cf0:	4413      	add	r3, r2
 8008cf2:	4299      	cmp	r1, r3
 8008cf4:	dc01      	bgt.n	8008cfa <insideRectangle+0x56>
		{
			return 1;
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	e000      	b.n	8008cfc <insideRectangle+0x58>
		}
	}

	return 0;
 8008cfa:	2300      	movs	r3, #0

}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3708      	adds	r7, #8
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bc90      	pop	{r4, r7}
 8008d04:	4770      	bx	lr
 8008d06:	bf00      	nop
 8008d08:	20000492 	.word	0x20000492
 8008d0c:	20000494 	.word	0x20000494

08008d10 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b083      	sub	sp, #12
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a0a      	ldr	r2, [pc, #40]	; (8008d48 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d103      	bne.n	8008d2a <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		twoSecondsPass = 1;
 8008d22:	4b0a      	ldr	r3, [pc, #40]	; (8008d4c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8008d24:	2201      	movs	r2, #1
 8008d26:	701a      	strb	r2, [r3, #0]
	}
	else if(htim->Instance == TIM7)
	{
		touchRefresh = 1;
	}
}
 8008d28:	e007      	b.n	8008d3a <HAL_TIM_PeriodElapsedCallback+0x2a>
	else if(htim->Instance == TIM7)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4a08      	ldr	r2, [pc, #32]	; (8008d50 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d102      	bne.n	8008d3a <HAL_TIM_PeriodElapsedCallback+0x2a>
		touchRefresh = 1;
 8008d34:	4b07      	ldr	r3, [pc, #28]	; (8008d54 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8008d36:	2201      	movs	r2, #1
 8008d38:	701a      	strb	r2, [r3, #0]
}
 8008d3a:	bf00      	nop
 8008d3c:	370c      	adds	r7, #12
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d44:	4770      	bx	lr
 8008d46:	bf00      	nop
 8008d48:	40001000 	.word	0x40001000
 8008d4c:	200002e9 	.word	0x200002e9
 8008d50:	40001400 	.word	0x40001400
 8008d54:	200002ea 	.word	0x200002ea

08008d58 <mainMenu>:

void mainMenu(void)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b084      	sub	sp, #16
 8008d5c:	af00      	add	r7, sp, #0
	char tempStr1[10];

	if(insideRectangle(xPlayerGame, yPlayerGame, widthPlayerGame, heightPlayerGame)==1)
 8008d5e:	2346      	movs	r3, #70	; 0x46
 8008d60:	f240 1227 	movw	r2, #295	; 0x127
 8008d64:	21b4      	movs	r1, #180	; 0xb4
 8008d66:	20fa      	movs	r0, #250	; 0xfa
 8008d68:	f7ff ff9c 	bl	8008ca4 <insideRectangle>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	2b01      	cmp	r3, #1
 8008d70:	d109      	bne.n	8008d86 <mainMenu+0x2e>
	{
    	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8008d72:	f04f 30ff 	mov.w	r0, #4294967295
 8008d76:	f7f8 fc1f 	bl	80015b8 <BSP_LCD_Clear>

		init_game();
 8008d7a:	f7ff f91b 	bl	8007fb4 <init_game>
		programPhase=2;
 8008d7e:	4b32      	ldr	r3, [pc, #200]	; (8008e48 <mainMenu+0xf0>)
 8008d80:	2202      	movs	r2, #2
 8008d82:	701a      	strb	r2, [r3, #0]

		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
		sprintf(tempStr1, "2 PLAYERS");
		BSP_LCD_DisplayStringAt(80, 350, (uint8_t*) tempStr1, RIGHT_MODE);
	}
}
 8008d84:	e05b      	b.n	8008e3e <mainMenu+0xe6>
	else if (insideRectangle(x1Player, y1Player, width1Player, height1Player)==1)
 8008d86:	2341      	movs	r3, #65	; 0x41
 8008d88:	22b9      	movs	r2, #185	; 0xb9
 8008d8a:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8008d8e:	2037      	movs	r0, #55	; 0x37
 8008d90:	f7ff ff88 	bl	8008ca4 <insideRectangle>
 8008d94:	4603      	mov	r3, r0
 8008d96:	2b01      	cmp	r3, #1
 8008d98:	d123      	bne.n	8008de2 <mainMenu+0x8a>
		numberPlayers=1;
 8008d9a:	4b2c      	ldr	r3, [pc, #176]	; (8008e4c <mainMenu+0xf4>)
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	701a      	strb	r2, [r3, #0]
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8008da0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8008da4:	f7f8 fba6 	bl	80014f4 <BSP_LCD_SetTextColor>
		sprintf(tempStr1, "1 PLAYER");
 8008da8:	1d3b      	adds	r3, r7, #4
 8008daa:	4a29      	ldr	r2, [pc, #164]	; (8008e50 <mainMenu+0xf8>)
 8008dac:	ca07      	ldmia	r2, {r0, r1, r2}
 8008dae:	c303      	stmia	r3!, {r0, r1}
 8008db0:	701a      	strb	r2, [r3, #0]
		BSP_LCD_DisplayStringAt(80, 350, (uint8_t*) tempStr1, LEFT_MODE);
 8008db2:	1d3a      	adds	r2, r7, #4
 8008db4:	2303      	movs	r3, #3
 8008db6:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8008dba:	2050      	movs	r0, #80	; 0x50
 8008dbc:	f7f8 fc68 	bl	8001690 <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8008dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8008dc4:	f7f8 fb96 	bl	80014f4 <BSP_LCD_SetTextColor>
		sprintf(tempStr1, "2 PLAYERS");
 8008dc8:	4a22      	ldr	r2, [pc, #136]	; (8008e54 <mainMenu+0xfc>)
 8008dca:	1d3b      	adds	r3, r7, #4
 8008dcc:	ca07      	ldmia	r2, {r0, r1, r2}
 8008dce:	c303      	stmia	r3!, {r0, r1}
 8008dd0:	801a      	strh	r2, [r3, #0]
		BSP_LCD_DisplayStringAt(80, 350, (uint8_t*) tempStr1, RIGHT_MODE);
 8008dd2:	1d3a      	adds	r2, r7, #4
 8008dd4:	2302      	movs	r3, #2
 8008dd6:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8008dda:	2050      	movs	r0, #80	; 0x50
 8008ddc:	f7f8 fc58 	bl	8001690 <BSP_LCD_DisplayStringAt>
}
 8008de0:	e02d      	b.n	8008e3e <mainMenu+0xe6>
	else if (insideRectangle(x2Players, y2Players, width2Players, height2Players)==1)
 8008de2:	2341      	movs	r3, #65	; 0x41
 8008de4:	22b9      	movs	r2, #185	; 0xb9
 8008de6:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8008dea:	f240 2026 	movw	r0, #550	; 0x226
 8008dee:	f7ff ff59 	bl	8008ca4 <insideRectangle>
 8008df2:	4603      	mov	r3, r0
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d122      	bne.n	8008e3e <mainMenu+0xe6>
		numberPlayers=2;
 8008df8:	4b14      	ldr	r3, [pc, #80]	; (8008e4c <mainMenu+0xf4>)
 8008dfa:	2202      	movs	r2, #2
 8008dfc:	701a      	strb	r2, [r3, #0]
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8008dfe:	f04f 30ff 	mov.w	r0, #4294967295
 8008e02:	f7f8 fb77 	bl	80014f4 <BSP_LCD_SetTextColor>
		sprintf(tempStr1, "1 PLAYER");
 8008e06:	1d3b      	adds	r3, r7, #4
 8008e08:	4a11      	ldr	r2, [pc, #68]	; (8008e50 <mainMenu+0xf8>)
 8008e0a:	ca07      	ldmia	r2, {r0, r1, r2}
 8008e0c:	c303      	stmia	r3!, {r0, r1}
 8008e0e:	701a      	strb	r2, [r3, #0]
		BSP_LCD_DisplayStringAt(80, 350, (uint8_t*) tempStr1, LEFT_MODE);
 8008e10:	1d3a      	adds	r2, r7, #4
 8008e12:	2303      	movs	r3, #3
 8008e14:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8008e18:	2050      	movs	r0, #80	; 0x50
 8008e1a:	f7f8 fc39 	bl	8001690 <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8008e1e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8008e22:	f7f8 fb67 	bl	80014f4 <BSP_LCD_SetTextColor>
		sprintf(tempStr1, "2 PLAYERS");
 8008e26:	4a0b      	ldr	r2, [pc, #44]	; (8008e54 <mainMenu+0xfc>)
 8008e28:	1d3b      	adds	r3, r7, #4
 8008e2a:	ca07      	ldmia	r2, {r0, r1, r2}
 8008e2c:	c303      	stmia	r3!, {r0, r1}
 8008e2e:	801a      	strh	r2, [r3, #0]
		BSP_LCD_DisplayStringAt(80, 350, (uint8_t*) tempStr1, RIGHT_MODE);
 8008e30:	1d3a      	adds	r2, r7, #4
 8008e32:	2302      	movs	r3, #2
 8008e34:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8008e38:	2050      	movs	r0, #80	; 0x50
 8008e3a:	f7f8 fc29 	bl	8001690 <BSP_LCD_DisplayStringAt>
}
 8008e3e:	bf00      	nop
 8008e40:	3710      	adds	r7, #16
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}
 8008e46:	bf00      	nop
 8008e48:	20000052 	.word	0x20000052
 8008e4c:	20000051 	.word	0x20000051
 8008e50:	0800a900 	.word	0x0800a900
 8008e54:	0800a90c 	.word	0x0800a90c

08008e58 <printMainMenu>:

void printMainMenu(void)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b084      	sub	sp, #16
 8008e5c:	af00      	add	r7, sp, #0
	char tempStr1[10];
	BSP_LCD_SetBackColor(backColor);
 8008e5e:	481c      	ldr	r0, [pc, #112]	; (8008ed0 <printMainMenu+0x78>)
 8008e60:	f7f8 fb60 	bl	8001524 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8008e64:	f04f 30ff 	mov.w	r0, #4294967295
 8008e68:	f7f8 fb44 	bl	80014f4 <BSP_LCD_SetTextColor>

    BSP_LCD_DrawBitmap(0, 0, image);
 8008e6c:	4a19      	ldr	r2, [pc, #100]	; (8008ed4 <printMainMenu+0x7c>)
 8008e6e:	2100      	movs	r1, #0
 8008e70:	2000      	movs	r0, #0
 8008e72:	f7f8 fdff 	bl	8001a74 <BSP_LCD_DrawBitmap>

	BSP_LCD_DisplayStringAt(0, 10, (uint8_t *)"REVERSI", CENTER_MODE);//funcion quiere uint8_t
 8008e76:	2301      	movs	r3, #1
 8008e78:	4a17      	ldr	r2, [pc, #92]	; (8008ed8 <printMainMenu+0x80>)
 8008e7a:	210a      	movs	r1, #10
 8008e7c:	2000      	movs	r0, #0
 8008e7e:	f7f8 fc07 	bl	8001690 <BSP_LCD_DisplayStringAt>

	////////////////////////////////////
	//JUGAR JUEGO

	sprintf(tempStr1, "PLAY GAME");
 8008e82:	4a16      	ldr	r2, [pc, #88]	; (8008edc <printMainMenu+0x84>)
 8008e84:	1d3b      	adds	r3, r7, #4
 8008e86:	ca07      	ldmia	r2, {r0, r1, r2}
 8008e88:	c303      	stmia	r3!, {r0, r1}
 8008e8a:	801a      	strh	r2, [r3, #0]
	BSP_LCD_DisplayStringAt(0, 200, (uint8_t*) tempStr1, CENTER_MODE);
 8008e8c:	1d3a      	adds	r2, r7, #4
 8008e8e:	2301      	movs	r3, #1
 8008e90:	21c8      	movs	r1, #200	; 0xc8
 8008e92:	2000      	movs	r0, #0
 8008e94:	f7f8 fbfc 	bl	8001690 <BSP_LCD_DisplayStringAt>

	////////////////////////////////////
	//1 JUGADOR

	sprintf(tempStr1, "1 PLAYER");
 8008e98:	1d3b      	adds	r3, r7, #4
 8008e9a:	4a11      	ldr	r2, [pc, #68]	; (8008ee0 <printMainMenu+0x88>)
 8008e9c:	ca07      	ldmia	r2, {r0, r1, r2}
 8008e9e:	c303      	stmia	r3!, {r0, r1}
 8008ea0:	701a      	strb	r2, [r3, #0]
	BSP_LCD_DisplayStringAt(80, 350, (uint8_t*) tempStr1, LEFT_MODE);
 8008ea2:	1d3a      	adds	r2, r7, #4
 8008ea4:	2303      	movs	r3, #3
 8008ea6:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8008eaa:	2050      	movs	r0, #80	; 0x50
 8008eac:	f7f8 fbf0 	bl	8001690 <BSP_LCD_DisplayStringAt>

	////////////////////////////////////
	//2 JUGADORES

	sprintf(tempStr1, "2 PLAYERS");
 8008eb0:	4a0c      	ldr	r2, [pc, #48]	; (8008ee4 <printMainMenu+0x8c>)
 8008eb2:	1d3b      	adds	r3, r7, #4
 8008eb4:	ca07      	ldmia	r2, {r0, r1, r2}
 8008eb6:	c303      	stmia	r3!, {r0, r1}
 8008eb8:	801a      	strh	r2, [r3, #0]
	BSP_LCD_DisplayStringAt(80, 350, (uint8_t*) tempStr1, RIGHT_MODE);
 8008eba:	1d3a      	adds	r2, r7, #4
 8008ebc:	2302      	movs	r3, #2
 8008ebe:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8008ec2:	2050      	movs	r0, #80	; 0x50
 8008ec4:	f7f8 fbe4 	bl	8001690 <BSP_LCD_DisplayStringAt>
}
 8008ec8:	bf00      	nop
 8008eca:	3710      	adds	r7, #16
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}
 8008ed0:	ffac7644 	.word	0xffac7644
 8008ed4:	0800c630 	.word	0x0800c630
 8008ed8:	0800a918 	.word	0x0800a918
 8008edc:	0800a920 	.word	0x0800a920
 8008ee0:	0800a900 	.word	0x0800a900
 8008ee4:	0800a90c 	.word	0x0800a90c

08008ee8 <mainCycle>:


//función importante del programa donde pasa todo el juego
uint8_t mainCycle(void)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b0a2      	sub	sp, #136	; 0x88
 8008eec:	af02      	add	r7, sp, #8
    uint8_t availablePosition[8*8], numAvailablePosition;

	////////////////////////////
	// Player 1

	uint8_t validPosition = 0;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
	getAvailableMoves(1, availablePosition, &numAvailablePosition);
 8008ef4:	1dfa      	adds	r2, r7, #7
 8008ef6:	f107 0308 	add.w	r3, r7, #8
 8008efa:	4619      	mov	r1, r3
 8008efc:	2001      	movs	r0, #1
 8008efe:	f7ff fb91 	bl	8008624 <getAvailableMoves>

	if(numAvailablePosition == 0)
 8008f02:	79fb      	ldrb	r3, [r7, #7]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d101      	bne.n	8008f0c <mainCycle+0x24>
	{
		return 0;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	e0a9      	b.n	8009060 <mainCycle+0x178>
	}


	sprintf(tempStr, "P1 Turn");
 8008f0c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008f10:	4a55      	ldr	r2, [pc, #340]	; (8009068 <mainCycle+0x180>)
 8008f12:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008f16:	e883 0003 	stmia.w	r3, {r0, r1}
	BSP_LCD_DisplayStringAt(20, LINE(6), (uint8_t*) tempStr, RIGHT_MODE);
 8008f1a:	f7f8 fb37 	bl	800158c <BSP_LCD_GetFont>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	88db      	ldrh	r3, [r3, #6]
 8008f22:	461a      	mov	r2, r3
 8008f24:	0052      	lsls	r2, r2, #1
 8008f26:	4413      	add	r3, r2
 8008f28:	005b      	lsls	r3, r3, #1
 8008f2a:	b299      	uxth	r1, r3
 8008f2c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008f30:	2302      	movs	r3, #2
 8008f32:	2014      	movs	r0, #20
 8008f34:	f7f8 fbac 	bl	8001690 <BSP_LCD_DisplayStringAt>

	while (validPosition == 0)
 8008f38:	e01c      	b.n	8008f74 <mainCycle+0x8c>
	{
		if(resetPressed == 1)
 8008f3a:	4b4c      	ldr	r3, [pc, #304]	; (800906c <mainCycle+0x184>)
 8008f3c:	781b      	ldrb	r3, [r3, #0]
 8008f3e:	2b01      	cmp	r3, #1
 8008f40:	d101      	bne.n	8008f46 <mainCycle+0x5e>
		{
			return 1;
 8008f42:	2301      	movs	r3, #1
 8008f44:	e08c      	b.n	8009060 <mainCycle+0x178>
		}

		// VER POSICAO NO TOUCHSCREEN
		playeri = touchedX;
 8008f46:	4b4a      	ldr	r3, [pc, #296]	; (8009070 <mainCycle+0x188>)
 8008f48:	781b      	ldrb	r3, [r3, #0]
 8008f4a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		playerj = touchedY;
 8008f4e:	4b49      	ldr	r3, [pc, #292]	; (8009074 <mainCycle+0x18c>)
 8008f50:	781b      	ldrb	r3, [r3, #0]
 8008f52:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e

		validPosition = insertMove(playeri, playerj, 1, availablePosition, numAvailablePosition);
 8008f56:	79fb      	ldrb	r3, [r7, #7]
 8008f58:	f107 0208 	add.w	r2, r7, #8
 8008f5c:	f897 107e 	ldrb.w	r1, [r7, #126]	; 0x7e
 8008f60:	f897 007f 	ldrb.w	r0, [r7, #127]	; 0x7f
 8008f64:	9300      	str	r3, [sp, #0]
 8008f66:	4613      	mov	r3, r2
 8008f68:	2201      	movs	r2, #1
 8008f6a:	f7ff fd8b 	bl	8008a84 <insertMove>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
	while (validPosition == 0)
 8008f74:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d0de      	beq.n	8008f3a <mainCycle+0x52>
	}

	printBoard();//vuelve a imprimir el tablero
 8008f7c:	f7ff f852 	bl	8008024 <printBoard>


	////////////////////////////
	// Player 2

	validPosition = 0;
 8008f80:	2300      	movs	r3, #0
 8008f82:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
	getAvailableMoves(2, availablePosition, &numAvailablePosition);
 8008f86:	1dfa      	adds	r2, r7, #7
 8008f88:	f107 0308 	add.w	r3, r7, #8
 8008f8c:	4619      	mov	r1, r3
 8008f8e:	2002      	movs	r0, #2
 8008f90:	f7ff fb48 	bl	8008624 <getAvailableMoves>

	if(numAvailablePosition == 0)
 8008f94:	79fb      	ldrb	r3, [r7, #7]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d101      	bne.n	8008f9e <mainCycle+0xb6>
	{
		return 0;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	e060      	b.n	8009060 <mainCycle+0x178>
	}

	sprintf(tempStr, "P2 Turn");
 8008f9e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008fa2:	4a35      	ldr	r2, [pc, #212]	; (8009078 <mainCycle+0x190>)
 8008fa4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008fa8:	e883 0003 	stmia.w	r3, {r0, r1}
	BSP_LCD_DisplayStringAt(20, LINE(6), (uint8_t*) tempStr, RIGHT_MODE);
 8008fac:	f7f8 faee 	bl	800158c <BSP_LCD_GetFont>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	88db      	ldrh	r3, [r3, #6]
 8008fb4:	461a      	mov	r2, r3
 8008fb6:	0052      	lsls	r2, r2, #1
 8008fb8:	4413      	add	r3, r2
 8008fba:	005b      	lsls	r3, r3, #1
 8008fbc:	b299      	uxth	r1, r3
 8008fbe:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008fc2:	2302      	movs	r3, #2
 8008fc4:	2014      	movs	r0, #20
 8008fc6:	f7f8 fb63 	bl	8001690 <BSP_LCD_DisplayStringAt>

	while (validPosition == 0)
 8008fca:	e042      	b.n	8009052 <mainCycle+0x16a>
	{
		if(resetPressed == 1)
 8008fcc:	4b27      	ldr	r3, [pc, #156]	; (800906c <mainCycle+0x184>)
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d101      	bne.n	8008fd8 <mainCycle+0xf0>
		{
			return 1;
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	e043      	b.n	8009060 <mainCycle+0x178>
		}

		if(numberPlayers == 2)
 8008fd8:	4b28      	ldr	r3, [pc, #160]	; (800907c <mainCycle+0x194>)
 8008fda:	781b      	ldrb	r3, [r3, #0]
 8008fdc:	2b02      	cmp	r3, #2
 8008fde:	d108      	bne.n	8008ff2 <mainCycle+0x10a>
		{
			playeri = touchedX;
 8008fe0:	4b23      	ldr	r3, [pc, #140]	; (8009070 <mainCycle+0x188>)
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			playerj = touchedY;
 8008fe8:	4b22      	ldr	r3, [pc, #136]	; (8009074 <mainCycle+0x18c>)
 8008fea:	781b      	ldrb	r3, [r3, #0]
 8008fec:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8008ff0:	e020      	b.n	8009034 <mainCycle+0x14c>
		}
		else // AI player
		{
			//HAL_Delay(1000);
			while(twoSecondsPass == 0);
 8008ff2:	bf00      	nop
 8008ff4:	4b22      	ldr	r3, [pc, #136]	; (8009080 <mainCycle+0x198>)
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d0fb      	beq.n	8008ff4 <mainCycle+0x10c>
			uint8_t selectedPosition = availablePosition[0];
 8008ffc:	7a3b      	ldrb	r3, [r7, #8]
 8008ffe:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c

			playeri = (selectedPosition / 10) - 1;//la función insertMove requiere los parametros separados
 8009002:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8009006:	4a1f      	ldr	r2, [pc, #124]	; (8009084 <mainCycle+0x19c>)
 8009008:	fba2 2303 	umull	r2, r3, r2, r3
 800900c:	08db      	lsrs	r3, r3, #3
 800900e:	b2db      	uxtb	r3, r3
 8009010:	3b01      	subs	r3, #1
 8009012:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			playerj = (selectedPosition % 10) - 1;
 8009016:	f897 207c 	ldrb.w	r2, [r7, #124]	; 0x7c
 800901a:	4b1a      	ldr	r3, [pc, #104]	; (8009084 <mainCycle+0x19c>)
 800901c:	fba3 1302 	umull	r1, r3, r3, r2
 8009020:	08d9      	lsrs	r1, r3, #3
 8009022:	460b      	mov	r3, r1
 8009024:	009b      	lsls	r3, r3, #2
 8009026:	440b      	add	r3, r1
 8009028:	005b      	lsls	r3, r3, #1
 800902a:	1ad3      	subs	r3, r2, r3
 800902c:	b2db      	uxtb	r3, r3
 800902e:	3b01      	subs	r3, #1
 8009030:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e

		}

		validPosition = insertMove(playeri, playerj, 2, availablePosition, numAvailablePosition);
 8009034:	79fb      	ldrb	r3, [r7, #7]
 8009036:	f107 0208 	add.w	r2, r7, #8
 800903a:	f897 107e 	ldrb.w	r1, [r7, #126]	; 0x7e
 800903e:	f897 007f 	ldrb.w	r0, [r7, #127]	; 0x7f
 8009042:	9300      	str	r3, [sp, #0]
 8009044:	4613      	mov	r3, r2
 8009046:	2202      	movs	r2, #2
 8009048:	f7ff fd1c 	bl	8008a84 <insertMove>
 800904c:	4603      	mov	r3, r0
 800904e:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
	while (validPosition == 0)
 8009052:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8009056:	2b00      	cmp	r3, #0
 8009058:	d0b8      	beq.n	8008fcc <mainCycle+0xe4>
	}

	printBoard();//vuelve a imprimir el tablero
 800905a:	f7fe ffe3 	bl	8008024 <printBoard>

	return numAvailablePosition;
 800905e:	79fb      	ldrb	r3, [r7, #7]
}
 8009060:	4618      	mov	r0, r3
 8009062:	3780      	adds	r7, #128	; 0x80
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}
 8009068:	0800a92c 	.word	0x0800a92c
 800906c:	200002eb 	.word	0x200002eb
 8009070:	200005a4 	.word	0x200005a4
 8009074:	20000490 	.word	0x20000490
 8009078:	0800a934 	.word	0x0800a934
 800907c:	20000051 	.word	0x20000051
 8009080:	200002e9 	.word	0x200002e9
 8009084:	cccccccd 	.word	0xcccccccd

08009088 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009088:	b590      	push	{r4, r7, lr}
 800908a:	b08f      	sub	sp, #60	; 0x3c
 800908c:	af00      	add	r7, sp, #0
  int temperature;
  /* USER CODE END 1 */
  

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800908e:	f7ff fd39 	bl	8008b04 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8009092:	f7ff fd57 	bl	8008b44 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009096:	f7f9 fc21 	bl	80028dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800909a:	f000 f8d1 	bl	8009240 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800909e:	f000 fc57 	bl	8009950 <MX_GPIO_Init>
  MX_DMA2D_Init();
 80090a2:	f000 f9bb 	bl	800941c <MX_DMA2D_Init>
  MX_FMC_Init();
 80090a6:	f000 fc05 	bl	80098b4 <MX_FMC_Init>
  MX_LTDC_Init();
 80090aa:	f000 fae3 	bl	8009674 <MX_LTDC_Init>
  MX_ADC1_Init();
 80090ae:	f000 f961 	bl	8009374 <MX_ADC1_Init>
  MX_DSIHOST_DSI_Init();
 80090b2:	f000 f9eb 	bl	800948c <MX_DSIHOST_DSI_Init>
  MX_TIM6_Init();
 80090b6:	f000 fb8f 	bl	80097d8 <MX_TIM6_Init>
  MX_TIM7_Init();
 80090ba:	f000 fbc5 	bl	8009848 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  BSP_LED_Init(LED2);
 80090be:	2001      	movs	r0, #1
 80090c0:	f7f7 fe1c 	bl	8000cfc <BSP_LED_Init>
  BSP_LCD_Init();
 80090c4:	f7f8 f819 	bl	80010fa <BSP_LCD_Init>
  LCD_Config();
 80090c8:	f000 fcee 	bl	8009aa8 <LCD_Config>
  HAL_ADC_Start_IT(&hadc1);
 80090cc:	4850      	ldr	r0, [pc, #320]	; (8009210 <main+0x188>)
 80090ce:	f7f9 fcc9 	bl	8002a64 <HAL_ADC_Start_IT>
  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 80090d2:	f7f8 f997 	bl	8001404 <BSP_LCD_GetXSize>
 80090d6:	4603      	mov	r3, r0
 80090d8:	b29c      	uxth	r4, r3
 80090da:	f7f8 f99f 	bl	800141c <BSP_LCD_GetYSize>
 80090de:	4603      	mov	r3, r0
 80090e0:	b29b      	uxth	r3, r3
 80090e2:	4619      	mov	r1, r3
 80090e4:	4620      	mov	r0, r4
 80090e6:	f7f9 fa1d 	bl	8002524 <BSP_TS_Init>
  BSP_TS_ITConfig();
 80090ea:	f7f9 fa7b 	bl	80025e4 <BSP_TS_ITConfig>
  HAL_TIM_Base_Start_IT(&htim6);
 80090ee:	4849      	ldr	r0, [pc, #292]	; (8009214 <main+0x18c>)
 80090f0:	f7fe fb38 	bl	8007764 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 80090f4:	4848      	ldr	r0, [pc, #288]	; (8009218 <main+0x190>)
 80090f6:	f7fe fb35 	bl	8007764 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(programPhase == 1)
 80090fa:	4b48      	ldr	r3, [pc, #288]	; (800921c <main+0x194>)
 80090fc:	781b      	ldrb	r3, [r3, #0]
 80090fe:	2b01      	cmp	r3, #1
 8009100:	d10b      	bne.n	800911a <main+0x92>
	  {
		  if(resetPressed == 1)
 8009102:	4b47      	ldr	r3, [pc, #284]	; (8009220 <main+0x198>)
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	2b01      	cmp	r3, #1
 8009108:	d104      	bne.n	8009114 <main+0x8c>
		  {
			  resetPressed = 0;
 800910a:	4b45      	ldr	r3, [pc, #276]	; (8009220 <main+0x198>)
 800910c:	2200      	movs	r2, #0
 800910e:	701a      	strb	r2, [r3, #0]
			  printMainMenu();
 8009110:	f7ff fea2 	bl	8008e58 <printMainMenu>
		  }

		  mainMenu();
 8009114:	f7ff fe20 	bl	8008d58 <mainMenu>
 8009118:	e7ef      	b.n	80090fa <main+0x72>
	  }
	  else if(programPhase == 2)
 800911a:	4b40      	ldr	r3, [pc, #256]	; (800921c <main+0x194>)
 800911c:	781b      	ldrb	r3, [r3, #0]
 800911e:	2b02      	cmp	r3, #2
 8009120:	d1eb      	bne.n	80090fa <main+0x72>
	  {
		  ////////////////////////////////////
		  // TEMPERATURE
		  if(twoSecondsPass == 1)
 8009122:	4b40      	ldr	r3, [pc, #256]	; (8009224 <main+0x19c>)
 8009124:	781b      	ldrb	r3, [r3, #0]
 8009126:	2b01      	cmp	r3, #1
 8009128:	d14f      	bne.n	80091ca <main+0x142>
		  {
			  temperature = ((((ADC1value * VREF)/MAX_CONVERTED_VALUE) - VSENS_AT_AMBIENT_TEMP) * 10 / AVG_SLOPE) + AMBIENT_TEMP;
 800912a:	4b3f      	ldr	r3, [pc, #252]	; (8009228 <main+0x1a0>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f640 42e4 	movw	r2, #3300	; 0xce4
 8009132:	fb02 f303 	mul.w	r3, r2, r3
 8009136:	4a3d      	ldr	r2, [pc, #244]	; (800922c <main+0x1a4>)
 8009138:	fb82 1203 	smull	r1, r2, r2, r3
 800913c:	441a      	add	r2, r3
 800913e:	12d2      	asrs	r2, r2, #11
 8009140:	17db      	asrs	r3, r3, #31
 8009142:	1ad3      	subs	r3, r2, r3
 8009144:	f5a3 723e 	sub.w	r2, r3, #760	; 0x2f8
 8009148:	4613      	mov	r3, r2
 800914a:	009b      	lsls	r3, r3, #2
 800914c:	4413      	add	r3, r2
 800914e:	005b      	lsls	r3, r3, #1
 8009150:	4a37      	ldr	r2, [pc, #220]	; (8009230 <main+0x1a8>)
 8009152:	fb82 1203 	smull	r1, r2, r2, r3
 8009156:	10d2      	asrs	r2, r2, #3
 8009158:	17db      	asrs	r3, r3, #31
 800915a:	1ad3      	subs	r3, r2, r3
 800915c:	3319      	adds	r3, #25
 800915e:	637b      	str	r3, [r7, #52]	; 0x34

			  // Display temperature on the lcd
			  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8009160:	f04f 30ff 	mov.w	r0, #4294967295
 8009164:	f7f8 f9c6 	bl	80014f4 <BSP_LCD_SetTextColor>
			  BSP_LCD_FillRect(485, 50, BSP_LCD_GetXSize()-485, BSP_LCD_GetYSize()-50);
 8009168:	f7f8 f94c 	bl	8001404 <BSP_LCD_GetXSize>
 800916c:	4603      	mov	r3, r0
 800916e:	b29b      	uxth	r3, r3
 8009170:	f2a3 13e5 	subw	r3, r3, #485	; 0x1e5
 8009174:	b29c      	uxth	r4, r3
 8009176:	f7f8 f951 	bl	800141c <BSP_LCD_GetYSize>
 800917a:	4603      	mov	r3, r0
 800917c:	b29b      	uxth	r3, r3
 800917e:	3b32      	subs	r3, #50	; 0x32
 8009180:	b29b      	uxth	r3, r3
 8009182:	4622      	mov	r2, r4
 8009184:	2132      	movs	r1, #50	; 0x32
 8009186:	f240 10e5 	movw	r0, #485	; 0x1e5
 800918a:	f7f8 fd23 	bl	8001bd4 <BSP_LCD_FillRect>

			  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800918e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8009192:	f7f8 f9af 	bl	80014f4 <BSP_LCD_SetTextColor>
			  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8009196:	f04f 30ff 	mov.w	r0, #4294967295
 800919a:	f7f8 f9c3 	bl	8001524 <BSP_LCD_SetBackColor>

			  sprintf(tempStr, "Temperature %d C", temperature);
 800919e:	463b      	mov	r3, r7
 80091a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091a2:	4924      	ldr	r1, [pc, #144]	; (8009234 <main+0x1ac>)
 80091a4:	4618      	mov	r0, r3
 80091a6:	f000 ff95 	bl	800a0d4 <siprintf>

			  BSP_LCD_DisplayStringAt(20, LINE(3), (uint8_t*) tempStr, RIGHT_MODE);
 80091aa:	f7f8 f9ef 	bl	800158c <BSP_LCD_GetFont>
 80091ae:	4603      	mov	r3, r0
 80091b0:	88db      	ldrh	r3, [r3, #6]
 80091b2:	461a      	mov	r2, r3
 80091b4:	0052      	lsls	r2, r2, #1
 80091b6:	4413      	add	r3, r2
 80091b8:	b299      	uxth	r1, r3
 80091ba:	463a      	mov	r2, r7
 80091bc:	2302      	movs	r3, #2
 80091be:	2014      	movs	r0, #20
 80091c0:	f7f8 fa66 	bl	8001690 <BSP_LCD_DisplayStringAt>

			  twoSecondsPass = 0;
 80091c4:	4b17      	ldr	r3, [pc, #92]	; (8009224 <main+0x19c>)
 80091c6:	2200      	movs	r2, #0
 80091c8:	701a      	strb	r2, [r3, #0]
		  }

		  ////////////////////////////////////
		  // TOUCH SCREEN

		  if(touchRefresh==1)
 80091ca:	4b1b      	ldr	r3, [pc, #108]	; (8009238 <main+0x1b0>)
 80091cc:	781b      	ldrb	r3, [r3, #0]
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	d193      	bne.n	80090fa <main+0x72>
		  {
			  touchRefresh = 0;
 80091d2:	4b19      	ldr	r3, [pc, #100]	; (8009238 <main+0x1b0>)
 80091d4:	2200      	movs	r2, #0
 80091d6:	701a      	strb	r2, [r3, #0]

			  // No more moves
			  if(mainCycle() == 0)
 80091d8:	f7ff fe86 	bl	8008ee8 <mainCycle>
 80091dc:	4603      	mov	r3, r0
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d18b      	bne.n	80090fa <main+0x72>
			  {
					sprintf(tempStr, "GAME OVER!");
 80091e2:	463b      	mov	r3, r7
 80091e4:	4a15      	ldr	r2, [pc, #84]	; (800923c <main+0x1b4>)
 80091e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80091e8:	c303      	stmia	r3!, {r0, r1}
 80091ea:	801a      	strh	r2, [r3, #0]
 80091ec:	3302      	adds	r3, #2
 80091ee:	0c12      	lsrs	r2, r2, #16
 80091f0:	701a      	strb	r2, [r3, #0]
					BSP_LCD_DisplayStringAt(20, LINE(6), (uint8_t*) tempStr, RIGHT_MODE);
 80091f2:	f7f8 f9cb 	bl	800158c <BSP_LCD_GetFont>
 80091f6:	4603      	mov	r3, r0
 80091f8:	88db      	ldrh	r3, [r3, #6]
 80091fa:	461a      	mov	r2, r3
 80091fc:	0052      	lsls	r2, r2, #1
 80091fe:	4413      	add	r3, r2
 8009200:	005b      	lsls	r3, r3, #1
 8009202:	b299      	uxth	r1, r3
 8009204:	463a      	mov	r2, r7
 8009206:	2302      	movs	r3, #2
 8009208:	2014      	movs	r0, #20
 800920a:	f7f8 fa41 	bl	8001690 <BSP_LCD_DisplayStringAt>
	  if(programPhase == 1)
 800920e:	e774      	b.n	80090fa <main+0x72>
 8009210:	2000055c 	.word	0x2000055c
 8009214:	200005a8 	.word	0x200005a8
 8009218:	20000684 	.word	0x20000684
 800921c:	20000052 	.word	0x20000052
 8009220:	200002eb 	.word	0x200002eb
 8009224:	200002e9 	.word	0x200002e9
 8009228:	200005e8 	.word	0x200005e8
 800922c:	80080081 	.word	0x80080081
 8009230:	51eb851f 	.word	0x51eb851f
 8009234:	0800a93c 	.word	0x0800a93c
 8009238:	200002ea 	.word	0x200002ea
 800923c:	0800a950 	.word	0x0800a950

08009240 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b0b8      	sub	sp, #224	; 0xe0
 8009244:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009246:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800924a:	2234      	movs	r2, #52	; 0x34
 800924c:	2100      	movs	r1, #0
 800924e:	4618      	mov	r0, r3
 8009250:	f000 ff38 	bl	800a0c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009254:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8009258:	2200      	movs	r2, #0
 800925a:	601a      	str	r2, [r3, #0]
 800925c:	605a      	str	r2, [r3, #4]
 800925e:	609a      	str	r2, [r3, #8]
 8009260:	60da      	str	r2, [r3, #12]
 8009262:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009264:	f107 0308 	add.w	r3, r7, #8
 8009268:	2290      	movs	r2, #144	; 0x90
 800926a:	2100      	movs	r1, #0
 800926c:	4618      	mov	r0, r3
 800926e:	f000 ff29 	bl	800a0c4 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8009272:	4b3e      	ldr	r3, [pc, #248]	; (800936c <SystemClock_Config+0x12c>)
 8009274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009276:	4a3d      	ldr	r2, [pc, #244]	; (800936c <SystemClock_Config+0x12c>)
 8009278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800927c:	6413      	str	r3, [r2, #64]	; 0x40
 800927e:	4b3b      	ldr	r3, [pc, #236]	; (800936c <SystemClock_Config+0x12c>)
 8009280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009286:	607b      	str	r3, [r7, #4]
 8009288:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800928a:	4b39      	ldr	r3, [pc, #228]	; (8009370 <SystemClock_Config+0x130>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4a38      	ldr	r2, [pc, #224]	; (8009370 <SystemClock_Config+0x130>)
 8009290:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009294:	6013      	str	r3, [r2, #0]
 8009296:	4b36      	ldr	r3, [pc, #216]	; (8009370 <SystemClock_Config+0x130>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800929e:	603b      	str	r3, [r7, #0]
 80092a0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80092a2:	2301      	movs	r3, #1
 80092a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80092a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80092ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80092b0:	2302      	movs	r3, #2
 80092b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80092b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80092ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 80092be:	2319      	movs	r3, #25
 80092c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 400;
 80092c4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80092c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80092cc:	2302      	movs	r3, #2
 80092ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80092d2:	2302      	movs	r3, #2
 80092d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80092d8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80092dc:	4618      	mov	r0, r3
 80092de:	f7fd f965 	bl	80065ac <HAL_RCC_OscConfig>
 80092e2:	4603      	mov	r3, r0
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d001      	beq.n	80092ec <SystemClock_Config+0xac>
  {
    Error_Handler();
 80092e8:	f000 fbf7 	bl	8009ada <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80092ec:	f7fd f90e 	bl	800650c <HAL_PWREx_EnableOverDrive>
 80092f0:	4603      	mov	r3, r0
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d001      	beq.n	80092fa <SystemClock_Config+0xba>
  {
    Error_Handler();
 80092f6:	f000 fbf0 	bl	8009ada <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80092fa:	230f      	movs	r3, #15
 80092fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009300:	2302      	movs	r3, #2
 8009302:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009306:	2300      	movs	r3, #0
 8009308:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800930c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8009310:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009314:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009318:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800931c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8009320:	2106      	movs	r1, #6
 8009322:	4618      	mov	r0, r3
 8009324:	f7fd fbb4 	bl	8006a90 <HAL_RCC_ClockConfig>
 8009328:	4603      	mov	r3, r0
 800932a:	2b00      	cmp	r3, #0
 800932c:	d001      	beq.n	8009332 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800932e:	f000 fbd4 	bl	8009ada <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8009332:	2308      	movs	r3, #8
 8009334:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8009336:	23c0      	movs	r3, #192	; 0xc0
 8009338:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800933a:	2302      	movs	r3, #2
 800933c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800933e:	2302      	movs	r3, #2
 8009340:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8009342:	2300      	movs	r3, #0
 8009344:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8009346:	2301      	movs	r3, #1
 8009348:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800934a:	2300      	movs	r3, #0
 800934c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800934e:	f107 0308 	add.w	r3, r7, #8
 8009352:	4618      	mov	r0, r3
 8009354:	f7fd fd36 	bl	8006dc4 <HAL_RCCEx_PeriphCLKConfig>
 8009358:	4603      	mov	r3, r0
 800935a:	2b00      	cmp	r3, #0
 800935c:	d001      	beq.n	8009362 <SystemClock_Config+0x122>
  {
    Error_Handler();
 800935e:	f000 fbbc 	bl	8009ada <Error_Handler>
  }
}
 8009362:	bf00      	nop
 8009364:	37e0      	adds	r7, #224	; 0xe0
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}
 800936a:	bf00      	nop
 800936c:	40023800 	.word	0x40023800
 8009370:	40007000 	.word	0x40007000

08009374 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b084      	sub	sp, #16
 8009378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800937a:	463b      	mov	r3, r7
 800937c:	2200      	movs	r2, #0
 800937e:	601a      	str	r2, [r3, #0]
 8009380:	605a      	str	r2, [r3, #4]
 8009382:	609a      	str	r2, [r3, #8]
 8009384:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8009386:	4b21      	ldr	r3, [pc, #132]	; (800940c <MX_ADC1_Init+0x98>)
 8009388:	4a21      	ldr	r2, [pc, #132]	; (8009410 <MX_ADC1_Init+0x9c>)
 800938a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800938c:	4b1f      	ldr	r3, [pc, #124]	; (800940c <MX_ADC1_Init+0x98>)
 800938e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8009392:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8009394:	4b1d      	ldr	r3, [pc, #116]	; (800940c <MX_ADC1_Init+0x98>)
 8009396:	2200      	movs	r2, #0
 8009398:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800939a:	4b1c      	ldr	r3, [pc, #112]	; (800940c <MX_ADC1_Init+0x98>)
 800939c:	2200      	movs	r2, #0
 800939e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80093a0:	4b1a      	ldr	r3, [pc, #104]	; (800940c <MX_ADC1_Init+0x98>)
 80093a2:	2201      	movs	r2, #1
 80093a4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80093a6:	4b19      	ldr	r3, [pc, #100]	; (800940c <MX_ADC1_Init+0x98>)
 80093a8:	2200      	movs	r2, #0
 80093aa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80093ae:	4b17      	ldr	r3, [pc, #92]	; (800940c <MX_ADC1_Init+0x98>)
 80093b0:	2200      	movs	r2, #0
 80093b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80093b4:	4b15      	ldr	r3, [pc, #84]	; (800940c <MX_ADC1_Init+0x98>)
 80093b6:	4a17      	ldr	r2, [pc, #92]	; (8009414 <MX_ADC1_Init+0xa0>)
 80093b8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80093ba:	4b14      	ldr	r3, [pc, #80]	; (800940c <MX_ADC1_Init+0x98>)
 80093bc:	2200      	movs	r2, #0
 80093be:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80093c0:	4b12      	ldr	r3, [pc, #72]	; (800940c <MX_ADC1_Init+0x98>)
 80093c2:	2201      	movs	r2, #1
 80093c4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80093c6:	4b11      	ldr	r3, [pc, #68]	; (800940c <MX_ADC1_Init+0x98>)
 80093c8:	2200      	movs	r2, #0
 80093ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80093ce:	4b0f      	ldr	r3, [pc, #60]	; (800940c <MX_ADC1_Init+0x98>)
 80093d0:	2201      	movs	r2, #1
 80093d2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80093d4:	480d      	ldr	r0, [pc, #52]	; (800940c <MX_ADC1_Init+0x98>)
 80093d6:	f7f9 fb01 	bl	80029dc <HAL_ADC_Init>
 80093da:	4603      	mov	r3, r0
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d001      	beq.n	80093e4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80093e0:	f000 fb7b 	bl	8009ada <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80093e4:	4b0c      	ldr	r3, [pc, #48]	; (8009418 <MX_ADC1_Init+0xa4>)
 80093e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80093e8:	2301      	movs	r3, #1
 80093ea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80093ec:	2303      	movs	r3, #3
 80093ee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80093f0:	463b      	mov	r3, r7
 80093f2:	4619      	mov	r1, r3
 80093f4:	4805      	ldr	r0, [pc, #20]	; (800940c <MX_ADC1_Init+0x98>)
 80093f6:	f7f9 fd61 	bl	8002ebc <HAL_ADC_ConfigChannel>
 80093fa:	4603      	mov	r3, r0
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d001      	beq.n	8009404 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8009400:	f000 fb6b 	bl	8009ada <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8009404:	bf00      	nop
 8009406:	3710      	adds	r7, #16
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}
 800940c:	2000055c 	.word	0x2000055c
 8009410:	40012000 	.word	0x40012000
 8009414:	0f000001 	.word	0x0f000001
 8009418:	10000012 	.word	0x10000012

0800941c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8009420:	4b18      	ldr	r3, [pc, #96]	; (8009484 <MX_DMA2D_Init+0x68>)
 8009422:	4a19      	ldr	r2, [pc, #100]	; (8009488 <MX_DMA2D_Init+0x6c>)
 8009424:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8009426:	4b17      	ldr	r3, [pc, #92]	; (8009484 <MX_DMA2D_Init+0x68>)
 8009428:	2200      	movs	r2, #0
 800942a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800942c:	4b15      	ldr	r3, [pc, #84]	; (8009484 <MX_DMA2D_Init+0x68>)
 800942e:	2200      	movs	r2, #0
 8009430:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8009432:	4b14      	ldr	r3, [pc, #80]	; (8009484 <MX_DMA2D_Init+0x68>)
 8009434:	2200      	movs	r2, #0
 8009436:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8009438:	4b12      	ldr	r3, [pc, #72]	; (8009484 <MX_DMA2D_Init+0x68>)
 800943a:	2200      	movs	r2, #0
 800943c:	639a      	str	r2, [r3, #56]	; 0x38
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800943e:	4b11      	ldr	r3, [pc, #68]	; (8009484 <MX_DMA2D_Init+0x68>)
 8009440:	2200      	movs	r2, #0
 8009442:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8009444:	4b0f      	ldr	r3, [pc, #60]	; (8009484 <MX_DMA2D_Init+0x68>)
 8009446:	2200      	movs	r2, #0
 8009448:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800944a:	4b0e      	ldr	r3, [pc, #56]	; (8009484 <MX_DMA2D_Init+0x68>)
 800944c:	2200      	movs	r2, #0
 800944e:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8009450:	4b0c      	ldr	r3, [pc, #48]	; (8009484 <MX_DMA2D_Init+0x68>)
 8009452:	2200      	movs	r2, #0
 8009454:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8009456:	4b0b      	ldr	r3, [pc, #44]	; (8009484 <MX_DMA2D_Init+0x68>)
 8009458:	2200      	movs	r2, #0
 800945a:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800945c:	4809      	ldr	r0, [pc, #36]	; (8009484 <MX_DMA2D_Init+0x68>)
 800945e:	f7fa fa33 	bl	80038c8 <HAL_DMA2D_Init>
 8009462:	4603      	mov	r3, r0
 8009464:	2b00      	cmp	r3, #0
 8009466:	d001      	beq.n	800946c <MX_DMA2D_Init+0x50>
  {
    Error_Handler();
 8009468:	f000 fb37 	bl	8009ada <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800946c:	2101      	movs	r1, #1
 800946e:	4805      	ldr	r0, [pc, #20]	; (8009484 <MX_DMA2D_Init+0x68>)
 8009470:	f7fa fb98 	bl	8003ba4 <HAL_DMA2D_ConfigLayer>
 8009474:	4603      	mov	r3, r0
 8009476:	2b00      	cmp	r3, #0
 8009478:	d001      	beq.n	800947e <MX_DMA2D_Init+0x62>
  {
    Error_Handler();
 800947a:	f000 fb2e 	bl	8009ada <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800947e:	bf00      	nop
 8009480:	bd80      	pop	{r7, pc}
 8009482:	bf00      	nop
 8009484:	200005ec 	.word	0x200005ec
 8009488:	4002b000 	.word	0x4002b000

0800948c <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b0aa      	sub	sp, #168	; 0xa8
 8009490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8009492:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009496:	2200      	movs	r2, #0
 8009498:	601a      	str	r2, [r3, #0]
 800949a:	605a      	str	r2, [r3, #4]
 800949c:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 800949e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80094a2:	2224      	movs	r2, #36	; 0x24
 80094a4:	2100      	movs	r1, #0
 80094a6:	4618      	mov	r0, r3
 80094a8:	f000 fe0c 	bl	800a0c4 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 80094ac:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80094b0:	2200      	movs	r2, #0
 80094b2:	601a      	str	r2, [r3, #0]
 80094b4:	605a      	str	r2, [r3, #4]
 80094b6:	609a      	str	r2, [r3, #8]
 80094b8:	60da      	str	r2, [r3, #12]
 80094ba:	611a      	str	r2, [r3, #16]
 80094bc:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 80094be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80094c2:	2234      	movs	r2, #52	; 0x34
 80094c4:	2100      	movs	r1, #0
 80094c6:	4618      	mov	r0, r3
 80094c8:	f000 fdfc 	bl	800a0c4 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 80094cc:	463b      	mov	r3, r7
 80094ce:	222c      	movs	r2, #44	; 0x2c
 80094d0:	2100      	movs	r1, #0
 80094d2:	4618      	mov	r0, r3
 80094d4:	f000 fdf6 	bl	800a0c4 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 80094d8:	4b64      	ldr	r3, [pc, #400]	; (800966c <MX_DSIHOST_DSI_Init+0x1e0>)
 80094da:	4a65      	ldr	r2, [pc, #404]	; (8009670 <MX_DSIHOST_DSI_Init+0x1e4>)
 80094dc:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 80094de:	4b63      	ldr	r3, [pc, #396]	; (800966c <MX_DSIHOST_DSI_Init+0x1e0>)
 80094e0:	2200      	movs	r2, #0
 80094e2:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 80094e4:	4b61      	ldr	r3, [pc, #388]	; (800966c <MX_DSIHOST_DSI_Init+0x1e0>)
 80094e6:	2204      	movs	r2, #4
 80094e8:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 80094ea:	4b60      	ldr	r3, [pc, #384]	; (800966c <MX_DSIHOST_DSI_Init+0x1e0>)
 80094ec:	2200      	movs	r2, #0
 80094ee:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 20;
 80094f0:	2314      	movs	r3, #20
 80094f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 80094f6:	2301      	movs	r3, #1
 80094f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 80094fc:	2300      	movs	r3, #0
 80094fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8009502:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009506:	4619      	mov	r1, r3
 8009508:	4858      	ldr	r0, [pc, #352]	; (800966c <MX_DSIHOST_DSI_Init+0x1e0>)
 800950a:	f7fa fccd 	bl	8003ea8 <HAL_DSI_Init>
 800950e:	4603      	mov	r3, r0
 8009510:	2b00      	cmp	r3, #0
 8009512:	d001      	beq.n	8009518 <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 8009514:	f000 fae1 	bl	8009ada <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8009518:	2301      	movs	r3, #1
 800951a:	67bb      	str	r3, [r7, #120]	; 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 800951c:	2300      	movs	r3, #0
 800951e:	67fb      	str	r3, [r7, #124]	; 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8009520:	2300      	movs	r3, #0
 8009522:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 8009526:	2300      	movs	r3, #0
 8009528:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 800952c:	2300      	movs	r3, #0
 800952e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8009532:	2300      	movs	r3, #0
 8009534:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8009538:	2300      	movs	r3, #0
 800953a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 800953e:	2300      	movs	r3, #0
 8009540:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.BTATimeout = 0;
 8009544:	2300      	movs	r3, #0
 8009546:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 800954a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800954e:	4619      	mov	r1, r3
 8009550:	4846      	ldr	r0, [pc, #280]	; (800966c <MX_DSIHOST_DSI_Init+0x1e0>)
 8009552:	f7fb fae5 	bl	8004b20 <HAL_DSI_ConfigHostTimeouts>
 8009556:	4603      	mov	r3, r0
 8009558:	2b00      	cmp	r3, #0
 800955a:	d001      	beq.n	8009560 <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 800955c:	f000 fabd 	bl	8009ada <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 8009560:	231c      	movs	r3, #28
 8009562:	663b      	str	r3, [r7, #96]	; 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 8009564:	2321      	movs	r3, #33	; 0x21
 8009566:	667b      	str	r3, [r7, #100]	; 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 8009568:	230f      	movs	r3, #15
 800956a:	66bb      	str	r3, [r7, #104]	; 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 800956c:	2319      	movs	r3, #25
 800956e:	66fb      	str	r3, [r7, #108]	; 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 8009570:	2300      	movs	r3, #0
 8009572:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.StopWaitTime = 0;
 8009574:	2300      	movs	r3, #0
 8009576:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8009578:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800957c:	4619      	mov	r1, r3
 800957e:	483b      	ldr	r0, [pc, #236]	; (800966c <MX_DSIHOST_DSI_Init+0x1e0>)
 8009580:	f7fb fa64 	bl	8004a4c <HAL_DSI_ConfigPhyTimer>
 8009584:	4603      	mov	r3, r0
 8009586:	2b00      	cmp	r3, #0
 8009588:	d001      	beq.n	800958e <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 800958a:	f000 faa6 	bl	8009ada <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 800958e:	2104      	movs	r1, #4
 8009590:	4836      	ldr	r0, [pc, #216]	; (800966c <MX_DSIHOST_DSI_Init+0x1e0>)
 8009592:	f7fb fa33 	bl	80049fc <HAL_DSI_ConfigFlowControl>
 8009596:	4603      	mov	r3, r0
 8009598:	2b00      	cmp	r3, #0
 800959a:	d001      	beq.n	80095a0 <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 800959c:	f000 fa9d 	bl	8009ada <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 80095a0:	f242 7110 	movw	r1, #10000	; 0x2710
 80095a4:	4831      	ldr	r0, [pc, #196]	; (800966c <MX_DSIHOST_DSI_Init+0x1e0>)
 80095a6:	f7fb fc79 	bl	8004e9c <HAL_DSI_SetLowPowerRXFilter>
 80095aa:	4603      	mov	r3, r0
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d001      	beq.n	80095b4 <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 80095b0:	f000 fa93 	bl	8009ada <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 80095b4:	2100      	movs	r1, #0
 80095b6:	482d      	ldr	r0, [pc, #180]	; (800966c <MX_DSIHOST_DSI_Init+0x1e0>)
 80095b8:	f7fa fe04 	bl	80041c4 <HAL_DSI_ConfigErrorMonitor>
 80095bc:	4603      	mov	r3, r0
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d001      	beq.n	80095c6 <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 80095c2:	f000 fa8a 	bl	8009ada <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_DISABLE;
 80095c6:	2300      	movs	r3, #0
 80095c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 80095ca:	2300      	movs	r3, #0
 80095cc:	633b      	str	r3, [r7, #48]	; 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_DISABLE;
 80095ce:	2300      	movs	r3, #0
 80095d0:	637b      	str	r3, [r7, #52]	; 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 80095d2:	2300      	movs	r3, #0
 80095d4:	63bb      	str	r3, [r7, #56]	; 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_DISABLE;
 80095d6:	2300      	movs	r3, #0
 80095d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 80095da:	2300      	movs	r3, #0
 80095dc:	643b      	str	r3, [r7, #64]	; 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_DISABLE;
 80095de:	2300      	movs	r3, #0
 80095e0:	647b      	str	r3, [r7, #68]	; 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 80095e2:	2300      	movs	r3, #0
 80095e4:	64bb      	str	r3, [r7, #72]	; 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_DISABLE;
 80095e6:	2300      	movs	r3, #0
 80095e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 80095ea:	2300      	movs	r3, #0
 80095ec:	653b      	str	r3, [r7, #80]	; 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 80095ee:	2300      	movs	r3, #0
 80095f0:	657b      	str	r3, [r7, #84]	; 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_DISABLE;
 80095f2:	2300      	movs	r3, #0
 80095f4:	65bb      	str	r3, [r7, #88]	; 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 80095f6:	2300      	movs	r3, #0
 80095f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 80095fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80095fe:	4619      	mov	r1, r3
 8009600:	481a      	ldr	r0, [pc, #104]	; (800966c <MX_DSIHOST_DSI_Init+0x1e0>)
 8009602:	f7fb f99d 	bl	8004940 <HAL_DSI_ConfigCommand>
 8009606:	4603      	mov	r3, r0
 8009608:	2b00      	cmp	r3, #0
 800960a:	d001      	beq.n	8009610 <MX_DSIHOST_DSI_Init+0x184>
  {
    Error_Handler();
 800960c:	f000 fa65 	bl	8009ada <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 8009610:	2300      	movs	r3, #0
 8009612:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 8009614:	2305      	movs	r3, #5
 8009616:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 640;
 8009618:	f44f 7320 	mov.w	r3, #640	; 0x280
 800961c:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 800961e:	2310      	movs	r3, #16
 8009620:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8009622:	2300      	movs	r3, #0
 8009624:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 8009626:	2304      	movs	r3, #4
 8009628:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 800962a:	2302      	movs	r3, #2
 800962c:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 800962e:	2300      	movs	r3, #0
 8009630:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 8009632:	2300      	movs	r3, #0
 8009634:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 8009636:	2340      	movs	r3, #64	; 0x40
 8009638:	627b      	str	r3, [r7, #36]	; 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_DISABLE;
 800963a:	2300      	movs	r3, #0
 800963c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 800963e:	463b      	mov	r3, r7
 8009640:	4619      	mov	r1, r3
 8009642:	480a      	ldr	r0, [pc, #40]	; (800966c <MX_DSIHOST_DSI_Init+0x1e0>)
 8009644:	f7fb f8a2 	bl	800478c <HAL_DSI_ConfigAdaptedCommandMode>
 8009648:	4603      	mov	r3, r0
 800964a:	2b00      	cmp	r3, #0
 800964c:	d001      	beq.n	8009652 <MX_DSIHOST_DSI_Init+0x1c6>
  {
    Error_Handler();
 800964e:	f000 fa44 	bl	8009ada <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8009652:	2100      	movs	r1, #0
 8009654:	4805      	ldr	r0, [pc, #20]	; (800966c <MX_DSIHOST_DSI_Init+0x1e0>)
 8009656:	f7fa fe71 	bl	800433c <HAL_DSI_SetGenericVCID>
 800965a:	4603      	mov	r3, r0
 800965c:	2b00      	cmp	r3, #0
 800965e:	d001      	beq.n	8009664 <MX_DSIHOST_DSI_Init+0x1d8>
  {
    Error_Handler();
 8009660:	f000 fa3b 	bl	8009ada <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8009664:	bf00      	nop
 8009666:	37a8      	adds	r7, #168	; 0xa8
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}
 800966c:	20000498 	.word	0x20000498
 8009670:	40016c00 	.word	0x40016c00

08009674 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b09a      	sub	sp, #104	; 0x68
 8009678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800967a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800967e:	2234      	movs	r2, #52	; 0x34
 8009680:	2100      	movs	r1, #0
 8009682:	4618      	mov	r0, r3
 8009684:	f000 fd1e 	bl	800a0c4 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8009688:	463b      	mov	r3, r7
 800968a:	2234      	movs	r2, #52	; 0x34
 800968c:	2100      	movs	r1, #0
 800968e:	4618      	mov	r0, r3
 8009690:	f000 fd18 	bl	800a0c4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8009694:	4b4e      	ldr	r3, [pc, #312]	; (80097d0 <MX_LTDC_Init+0x15c>)
 8009696:	4a4f      	ldr	r2, [pc, #316]	; (80097d4 <MX_LTDC_Init+0x160>)
 8009698:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800969a:	4b4d      	ldr	r3, [pc, #308]	; (80097d0 <MX_LTDC_Init+0x15c>)
 800969c:	2200      	movs	r2, #0
 800969e:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80096a0:	4b4b      	ldr	r3, [pc, #300]	; (80097d0 <MX_LTDC_Init+0x15c>)
 80096a2:	2200      	movs	r2, #0
 80096a4:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80096a6:	4b4a      	ldr	r3, [pc, #296]	; (80097d0 <MX_LTDC_Init+0x15c>)
 80096a8:	2200      	movs	r2, #0
 80096aa:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80096ac:	4b48      	ldr	r3, [pc, #288]	; (80097d0 <MX_LTDC_Init+0x15c>)
 80096ae:	2200      	movs	r2, #0
 80096b0:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80096b2:	4b47      	ldr	r3, [pc, #284]	; (80097d0 <MX_LTDC_Init+0x15c>)
 80096b4:	2207      	movs	r2, #7
 80096b6:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80096b8:	4b45      	ldr	r3, [pc, #276]	; (80097d0 <MX_LTDC_Init+0x15c>)
 80096ba:	2203      	movs	r2, #3
 80096bc:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80096be:	4b44      	ldr	r3, [pc, #272]	; (80097d0 <MX_LTDC_Init+0x15c>)
 80096c0:	220e      	movs	r2, #14
 80096c2:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80096c4:	4b42      	ldr	r3, [pc, #264]	; (80097d0 <MX_LTDC_Init+0x15c>)
 80096c6:	2205      	movs	r2, #5
 80096c8:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80096ca:	4b41      	ldr	r3, [pc, #260]	; (80097d0 <MX_LTDC_Init+0x15c>)
 80096cc:	f240 228e 	movw	r2, #654	; 0x28e
 80096d0:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80096d2:	4b3f      	ldr	r3, [pc, #252]	; (80097d0 <MX_LTDC_Init+0x15c>)
 80096d4:	f240 12e5 	movw	r2, #485	; 0x1e5
 80096d8:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 80096da:	4b3d      	ldr	r3, [pc, #244]	; (80097d0 <MX_LTDC_Init+0x15c>)
 80096dc:	f44f 7225 	mov.w	r2, #660	; 0x294
 80096e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 80096e2:	4b3b      	ldr	r3, [pc, #236]	; (80097d0 <MX_LTDC_Init+0x15c>)
 80096e4:	f240 12e7 	movw	r2, #487	; 0x1e7
 80096e8:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80096ea:	4b39      	ldr	r3, [pc, #228]	; (80097d0 <MX_LTDC_Init+0x15c>)
 80096ec:	2200      	movs	r2, #0
 80096ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80096f2:	4b37      	ldr	r3, [pc, #220]	; (80097d0 <MX_LTDC_Init+0x15c>)
 80096f4:	2200      	movs	r2, #0
 80096f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80096fa:	4b35      	ldr	r3, [pc, #212]	; (80097d0 <MX_LTDC_Init+0x15c>)
 80096fc:	2200      	movs	r2, #0
 80096fe:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8009702:	4833      	ldr	r0, [pc, #204]	; (80097d0 <MX_LTDC_Init+0x15c>)
 8009704:	f7fc fc0a 	bl	8005f1c <HAL_LTDC_Init>
 8009708:	4603      	mov	r3, r0
 800970a:	2b00      	cmp	r3, #0
 800970c:	d001      	beq.n	8009712 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800970e:	f000 f9e4 	bl	8009ada <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8009712:	2300      	movs	r3, #0
 8009714:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8009716:	2300      	movs	r3, #0
 8009718:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 800971a:	2300      	movs	r3, #0
 800971c:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 800971e:	2300      	movs	r3, #0
 8009720:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8009722:	2300      	movs	r3, #0
 8009724:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8009726:	2300      	movs	r3, #0
 8009728:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 800972a:	2300      	movs	r3, #0
 800972c:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800972e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009732:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8009734:	2305      	movs	r3, #5
 8009736:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8009738:	2300      	movs	r3, #0
 800973a:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 800973c:	2300      	movs	r3, #0
 800973e:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8009740:	2300      	movs	r3, #0
 8009742:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8009744:	2300      	movs	r3, #0
 8009746:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 800974a:	2300      	movs	r3, #0
 800974c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8009750:	2300      	movs	r3, #0
 8009752:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8009756:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800975a:	2200      	movs	r2, #0
 800975c:	4619      	mov	r1, r3
 800975e:	481c      	ldr	r0, [pc, #112]	; (80097d0 <MX_LTDC_Init+0x15c>)
 8009760:	f7fc fcac 	bl	80060bc <HAL_LTDC_ConfigLayer>
 8009764:	4603      	mov	r3, r0
 8009766:	2b00      	cmp	r3, #0
 8009768:	d001      	beq.n	800976e <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 800976a:	f000 f9b6 	bl	8009ada <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 800976e:	2300      	movs	r3, #0
 8009770:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8009772:	2300      	movs	r3, #0
 8009774:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8009776:	2300      	movs	r3, #0
 8009778:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 800977a:	2300      	movs	r3, #0
 800977c:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800977e:	2300      	movs	r3, #0
 8009780:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8009782:	2300      	movs	r3, #0
 8009784:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8009786:	2300      	movs	r3, #0
 8009788:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800978a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800978e:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8009790:	2305      	movs	r3, #5
 8009792:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8009794:	2300      	movs	r3, #0
 8009796:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8009798:	2300      	movs	r3, #0
 800979a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 800979c:	2300      	movs	r3, #0
 800979e:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80097a0:	2300      	movs	r3, #0
 80097a2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80097a6:	2300      	movs	r3, #0
 80097a8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80097ac:	2300      	movs	r3, #0
 80097ae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80097b2:	463b      	mov	r3, r7
 80097b4:	2201      	movs	r2, #1
 80097b6:	4619      	mov	r1, r3
 80097b8:	4805      	ldr	r0, [pc, #20]	; (80097d0 <MX_LTDC_Init+0x15c>)
 80097ba:	f7fc fc7f 	bl	80060bc <HAL_LTDC_ConfigLayer>
 80097be:	4603      	mov	r3, r0
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d001      	beq.n	80097c8 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80097c4:	f000 f989 	bl	8009ada <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80097c8:	bf00      	nop
 80097ca:	3768      	adds	r7, #104	; 0x68
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}
 80097d0:	200004b4 	.word	0x200004b4
 80097d4:	40016800 	.word	0x40016800

080097d8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b084      	sub	sp, #16
 80097dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80097de:	1d3b      	adds	r3, r7, #4
 80097e0:	2200      	movs	r2, #0
 80097e2:	601a      	str	r2, [r3, #0]
 80097e4:	605a      	str	r2, [r3, #4]
 80097e6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80097e8:	4b15      	ldr	r3, [pc, #84]	; (8009840 <MX_TIM6_Init+0x68>)
 80097ea:	4a16      	ldr	r2, [pc, #88]	; (8009844 <MX_TIM6_Init+0x6c>)
 80097ec:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 19999;
 80097ee:	4b14      	ldr	r3, [pc, #80]	; (8009840 <MX_TIM6_Init+0x68>)
 80097f0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80097f4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80097f6:	4b12      	ldr	r3, [pc, #72]	; (8009840 <MX_TIM6_Init+0x68>)
 80097f8:	2200      	movs	r2, #0
 80097fa:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 80097fc:	4b10      	ldr	r3, [pc, #64]	; (8009840 <MX_TIM6_Init+0x68>)
 80097fe:	f242 720f 	movw	r2, #9999	; 0x270f
 8009802:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009804:	4b0e      	ldr	r3, [pc, #56]	; (8009840 <MX_TIM6_Init+0x68>)
 8009806:	2200      	movs	r2, #0
 8009808:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800980a:	480d      	ldr	r0, [pc, #52]	; (8009840 <MX_TIM6_Init+0x68>)
 800980c:	f7fd ff7f 	bl	800770e <HAL_TIM_Base_Init>
 8009810:	4603      	mov	r3, r0
 8009812:	2b00      	cmp	r3, #0
 8009814:	d001      	beq.n	800981a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8009816:	f000 f960 	bl	8009ada <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800981a:	2300      	movs	r3, #0
 800981c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800981e:	2300      	movs	r3, #0
 8009820:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8009822:	1d3b      	adds	r3, r7, #4
 8009824:	4619      	mov	r1, r3
 8009826:	4806      	ldr	r0, [pc, #24]	; (8009840 <MX_TIM6_Init+0x68>)
 8009828:	f7fe f9ae 	bl	8007b88 <HAL_TIMEx_MasterConfigSynchronization>
 800982c:	4603      	mov	r3, r0
 800982e:	2b00      	cmp	r3, #0
 8009830:	d001      	beq.n	8009836 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8009832:	f000 f952 	bl	8009ada <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8009836:	bf00      	nop
 8009838:	3710      	adds	r7, #16
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}
 800983e:	bf00      	nop
 8009840:	200005a8 	.word	0x200005a8
 8009844:	40001000 	.word	0x40001000

08009848 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b084      	sub	sp, #16
 800984c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800984e:	1d3b      	adds	r3, r7, #4
 8009850:	2200      	movs	r2, #0
 8009852:	601a      	str	r2, [r3, #0]
 8009854:	605a      	str	r2, [r3, #4]
 8009856:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8009858:	4b14      	ldr	r3, [pc, #80]	; (80098ac <MX_TIM7_Init+0x64>)
 800985a:	4a15      	ldr	r2, [pc, #84]	; (80098b0 <MX_TIM7_Init+0x68>)
 800985c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9999;
 800985e:	4b13      	ldr	r3, [pc, #76]	; (80098ac <MX_TIM7_Init+0x64>)
 8009860:	f242 720f 	movw	r2, #9999	; 0x270f
 8009864:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009866:	4b11      	ldr	r3, [pc, #68]	; (80098ac <MX_TIM7_Init+0x64>)
 8009868:	2200      	movs	r2, #0
 800986a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 800986c:	4b0f      	ldr	r3, [pc, #60]	; (80098ac <MX_TIM7_Init+0x64>)
 800986e:	2263      	movs	r2, #99	; 0x63
 8009870:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009872:	4b0e      	ldr	r3, [pc, #56]	; (80098ac <MX_TIM7_Init+0x64>)
 8009874:	2200      	movs	r2, #0
 8009876:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8009878:	480c      	ldr	r0, [pc, #48]	; (80098ac <MX_TIM7_Init+0x64>)
 800987a:	f7fd ff48 	bl	800770e <HAL_TIM_Base_Init>
 800987e:	4603      	mov	r3, r0
 8009880:	2b00      	cmp	r3, #0
 8009882:	d001      	beq.n	8009888 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8009884:	f000 f929 	bl	8009ada <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009888:	2300      	movs	r3, #0
 800988a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800988c:	2300      	movs	r3, #0
 800988e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8009890:	1d3b      	adds	r3, r7, #4
 8009892:	4619      	mov	r1, r3
 8009894:	4805      	ldr	r0, [pc, #20]	; (80098ac <MX_TIM7_Init+0x64>)
 8009896:	f7fe f977 	bl	8007b88 <HAL_TIMEx_MasterConfigSynchronization>
 800989a:	4603      	mov	r3, r0
 800989c:	2b00      	cmp	r3, #0
 800989e:	d001      	beq.n	80098a4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80098a0:	f000 f91b 	bl	8009ada <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80098a4:	bf00      	nop
 80098a6:	3710      	adds	r7, #16
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}
 80098ac:	20000684 	.word	0x20000684
 80098b0:	40001400 	.word	0x40001400

080098b4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b088      	sub	sp, #32
 80098b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80098ba:	1d3b      	adds	r3, r7, #4
 80098bc:	2200      	movs	r2, #0
 80098be:	601a      	str	r2, [r3, #0]
 80098c0:	605a      	str	r2, [r3, #4]
 80098c2:	609a      	str	r2, [r3, #8]
 80098c4:	60da      	str	r2, [r3, #12]
 80098c6:	611a      	str	r2, [r3, #16]
 80098c8:	615a      	str	r2, [r3, #20]
 80098ca:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80098cc:	4b1e      	ldr	r3, [pc, #120]	; (8009948 <MX_FMC_Init+0x94>)
 80098ce:	4a1f      	ldr	r2, [pc, #124]	; (800994c <MX_FMC_Init+0x98>)
 80098d0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80098d2:	4b1d      	ldr	r3, [pc, #116]	; (8009948 <MX_FMC_Init+0x94>)
 80098d4:	2201      	movs	r2, #1
 80098d6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80098d8:	4b1b      	ldr	r3, [pc, #108]	; (8009948 <MX_FMC_Init+0x94>)
 80098da:	2200      	movs	r2, #0
 80098dc:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 80098de:	4b1a      	ldr	r3, [pc, #104]	; (8009948 <MX_FMC_Init+0x94>)
 80098e0:	2208      	movs	r2, #8
 80098e2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 80098e4:	4b18      	ldr	r3, [pc, #96]	; (8009948 <MX_FMC_Init+0x94>)
 80098e6:	2220      	movs	r2, #32
 80098e8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80098ea:	4b17      	ldr	r3, [pc, #92]	; (8009948 <MX_FMC_Init+0x94>)
 80098ec:	2240      	movs	r2, #64	; 0x40
 80098ee:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 80098f0:	4b15      	ldr	r3, [pc, #84]	; (8009948 <MX_FMC_Init+0x94>)
 80098f2:	2280      	movs	r2, #128	; 0x80
 80098f4:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80098f6:	4b14      	ldr	r3, [pc, #80]	; (8009948 <MX_FMC_Init+0x94>)
 80098f8:	2200      	movs	r2, #0
 80098fa:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 80098fc:	4b12      	ldr	r3, [pc, #72]	; (8009948 <MX_FMC_Init+0x94>)
 80098fe:	2200      	movs	r2, #0
 8009900:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8009902:	4b11      	ldr	r3, [pc, #68]	; (8009948 <MX_FMC_Init+0x94>)
 8009904:	2200      	movs	r2, #0
 8009906:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8009908:	4b0f      	ldr	r3, [pc, #60]	; (8009948 <MX_FMC_Init+0x94>)
 800990a:	2200      	movs	r2, #0
 800990c:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 800990e:	2310      	movs	r3, #16
 8009910:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8009912:	2310      	movs	r3, #16
 8009914:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8009916:	2310      	movs	r3, #16
 8009918:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 800991a:	2310      	movs	r3, #16
 800991c:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 800991e:	2310      	movs	r3, #16
 8009920:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8009922:	2310      	movs	r3, #16
 8009924:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8009926:	2310      	movs	r3, #16
 8009928:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800992a:	1d3b      	adds	r3, r7, #4
 800992c:	4619      	mov	r1, r3
 800992e:	4806      	ldr	r0, [pc, #24]	; (8009948 <MX_FMC_Init+0x94>)
 8009930:	f7fd fe6e 	bl	8007610 <HAL_SDRAM_Init>
 8009934:	4603      	mov	r3, r0
 8009936:	2b00      	cmp	r3, #0
 8009938:	d001      	beq.n	800993e <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 800993a:	f000 f8ce 	bl	8009ada <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800993e:	bf00      	nop
 8009940:	3720      	adds	r7, #32
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}
 8009946:	bf00      	nop
 8009948:	20000650 	.word	0x20000650
 800994c:	a0000140 	.word	0xa0000140

08009950 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b08e      	sub	sp, #56	; 0x38
 8009954:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009956:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800995a:	2200      	movs	r2, #0
 800995c:	601a      	str	r2, [r3, #0]
 800995e:	605a      	str	r2, [r3, #4]
 8009960:	609a      	str	r2, [r3, #8]
 8009962:	60da      	str	r2, [r3, #12]
 8009964:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009966:	4b4c      	ldr	r3, [pc, #304]	; (8009a98 <MX_GPIO_Init+0x148>)
 8009968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800996a:	4a4b      	ldr	r2, [pc, #300]	; (8009a98 <MX_GPIO_Init+0x148>)
 800996c:	f043 0302 	orr.w	r3, r3, #2
 8009970:	6313      	str	r3, [r2, #48]	; 0x30
 8009972:	4b49      	ldr	r3, [pc, #292]	; (8009a98 <MX_GPIO_Init+0x148>)
 8009974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009976:	f003 0302 	and.w	r3, r3, #2
 800997a:	623b      	str	r3, [r7, #32]
 800997c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800997e:	4b46      	ldr	r3, [pc, #280]	; (8009a98 <MX_GPIO_Init+0x148>)
 8009980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009982:	4a45      	ldr	r2, [pc, #276]	; (8009a98 <MX_GPIO_Init+0x148>)
 8009984:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009988:	6313      	str	r3, [r2, #48]	; 0x30
 800998a:	4b43      	ldr	r3, [pc, #268]	; (8009a98 <MX_GPIO_Init+0x148>)
 800998c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800998e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009992:	61fb      	str	r3, [r7, #28]
 8009994:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009996:	4b40      	ldr	r3, [pc, #256]	; (8009a98 <MX_GPIO_Init+0x148>)
 8009998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800999a:	4a3f      	ldr	r2, [pc, #252]	; (8009a98 <MX_GPIO_Init+0x148>)
 800999c:	f043 0308 	orr.w	r3, r3, #8
 80099a0:	6313      	str	r3, [r2, #48]	; 0x30
 80099a2:	4b3d      	ldr	r3, [pc, #244]	; (8009a98 <MX_GPIO_Init+0x148>)
 80099a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099a6:	f003 0308 	and.w	r3, r3, #8
 80099aa:	61bb      	str	r3, [r7, #24]
 80099ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80099ae:	4b3a      	ldr	r3, [pc, #232]	; (8009a98 <MX_GPIO_Init+0x148>)
 80099b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099b2:	4a39      	ldr	r2, [pc, #228]	; (8009a98 <MX_GPIO_Init+0x148>)
 80099b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80099b8:	6313      	str	r3, [r2, #48]	; 0x30
 80099ba:	4b37      	ldr	r3, [pc, #220]	; (8009a98 <MX_GPIO_Init+0x148>)
 80099bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099c2:	617b      	str	r3, [r7, #20]
 80099c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80099c6:	4b34      	ldr	r3, [pc, #208]	; (8009a98 <MX_GPIO_Init+0x148>)
 80099c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099ca:	4a33      	ldr	r2, [pc, #204]	; (8009a98 <MX_GPIO_Init+0x148>)
 80099cc:	f043 0320 	orr.w	r3, r3, #32
 80099d0:	6313      	str	r3, [r2, #48]	; 0x30
 80099d2:	4b31      	ldr	r3, [pc, #196]	; (8009a98 <MX_GPIO_Init+0x148>)
 80099d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099d6:	f003 0320 	and.w	r3, r3, #32
 80099da:	613b      	str	r3, [r7, #16]
 80099dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80099de:	4b2e      	ldr	r3, [pc, #184]	; (8009a98 <MX_GPIO_Init+0x148>)
 80099e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099e2:	4a2d      	ldr	r2, [pc, #180]	; (8009a98 <MX_GPIO_Init+0x148>)
 80099e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099e8:	6313      	str	r3, [r2, #48]	; 0x30
 80099ea:	4b2b      	ldr	r3, [pc, #172]	; (8009a98 <MX_GPIO_Init+0x148>)
 80099ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099f2:	60fb      	str	r3, [r7, #12]
 80099f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80099f6:	4b28      	ldr	r3, [pc, #160]	; (8009a98 <MX_GPIO_Init+0x148>)
 80099f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099fa:	4a27      	ldr	r2, [pc, #156]	; (8009a98 <MX_GPIO_Init+0x148>)
 80099fc:	f043 0301 	orr.w	r3, r3, #1
 8009a00:	6313      	str	r3, [r2, #48]	; 0x30
 8009a02:	4b25      	ldr	r3, [pc, #148]	; (8009a98 <MX_GPIO_Init+0x148>)
 8009a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a06:	f003 0301 	and.w	r3, r3, #1
 8009a0a:	60bb      	str	r3, [r7, #8]
 8009a0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8009a0e:	4b22      	ldr	r3, [pc, #136]	; (8009a98 <MX_GPIO_Init+0x148>)
 8009a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a12:	4a21      	ldr	r2, [pc, #132]	; (8009a98 <MX_GPIO_Init+0x148>)
 8009a14:	f043 0310 	orr.w	r3, r3, #16
 8009a18:	6313      	str	r3, [r2, #48]	; 0x30
 8009a1a:	4b1f      	ldr	r3, [pc, #124]	; (8009a98 <MX_GPIO_Init+0x148>)
 8009a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a1e:	f003 0310 	and.w	r3, r3, #16
 8009a22:	607b      	str	r3, [r7, #4]
 8009a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8009a26:	4b1c      	ldr	r3, [pc, #112]	; (8009a98 <MX_GPIO_Init+0x148>)
 8009a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a2a:	4a1b      	ldr	r2, [pc, #108]	; (8009a98 <MX_GPIO_Init+0x148>)
 8009a2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009a30:	6313      	str	r3, [r2, #48]	; 0x30
 8009a32:	4b19      	ldr	r3, [pc, #100]	; (8009a98 <MX_GPIO_Init+0x148>)
 8009a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009a3a:	603b      	str	r3, [r7, #0]
 8009a3c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PI13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8009a3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009a42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8009a44:	4b15      	ldr	r3, [pc, #84]	; (8009a9c <MX_GPIO_Init+0x14c>)
 8009a46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8009a4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a50:	4619      	mov	r1, r3
 8009a52:	4813      	ldr	r0, [pc, #76]	; (8009aa0 <MX_GPIO_Init+0x150>)
 8009a54:	f7fb fa50 	bl	8004ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8009a58:	2301      	movs	r3, #1
 8009a5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8009a5c:	4b0f      	ldr	r3, [pc, #60]	; (8009a9c <MX_GPIO_Init+0x14c>)
 8009a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a60:	2300      	movs	r3, #0
 8009a62:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009a64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a68:	4619      	mov	r1, r3
 8009a6a:	480e      	ldr	r0, [pc, #56]	; (8009aa4 <MX_GPIO_Init+0x154>)
 8009a6c:	f7fb fa44 	bl	8004ef8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8009a70:	2200      	movs	r2, #0
 8009a72:	2100      	movs	r1, #0
 8009a74:	2006      	movs	r0, #6
 8009a76:	f7f9 fd34 	bl	80034e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8009a7a:	2006      	movs	r0, #6
 8009a7c:	f7f9 fd4d 	bl	800351a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8009a80:	2200      	movs	r2, #0
 8009a82:	2100      	movs	r1, #0
 8009a84:	2028      	movs	r0, #40	; 0x28
 8009a86:	f7f9 fd2c 	bl	80034e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8009a8a:	2028      	movs	r0, #40	; 0x28
 8009a8c:	f7f9 fd45 	bl	800351a <HAL_NVIC_EnableIRQ>

}
 8009a90:	bf00      	nop
 8009a92:	3738      	adds	r7, #56	; 0x38
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}
 8009a98:	40023800 	.word	0x40023800
 8009a9c:	10110000 	.word	0x10110000
 8009aa0:	40022000 	.word	0x40022000
 8009aa4:	40020000 	.word	0x40020000

08009aa8 <LCD_Config>:

/* USER CODE BEGIN 4 */
static void LCD_Config(void)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b082      	sub	sp, #8
 8009aac:	af00      	add	r7, sp, #0
  uint32_t  lcd_status;

  /* Initialize the LCD */
  lcd_status = BSP_LCD_Init();
 8009aae:	f7f7 fb24 	bl	80010fa <BSP_LCD_Init>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	607b      	str	r3, [r7, #4]
  while(lcd_status != LCD_OK);//si LCD_init no fuera ok estaría en ciclo infinito
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d1fc      	bne.n	8009ab6 <LCD_Config+0xe>

  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8009abc:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8009ac0:	2000      	movs	r0, #0
 8009ac2:	f7f7 fcb7 	bl	8001434 <BSP_LCD_LayerDefaultInit>

  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8009ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8009aca:	f7f7 fd75 	bl	80015b8 <BSP_LCD_Clear>

  printMainMenu();
 8009ace:	f7ff f9c3 	bl	8008e58 <printMainMenu>
}
 8009ad2:	bf00      	nop
 8009ad4:	3708      	adds	r7, #8
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}

08009ada <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009ada:	b480      	push	{r7}
 8009adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8009ade:	bf00      	nop
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	4770      	bx	lr

08009ae8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b083      	sub	sp, #12
 8009aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8009aee:	4b0f      	ldr	r3, [pc, #60]	; (8009b2c <HAL_MspInit+0x44>)
 8009af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009af2:	4a0e      	ldr	r2, [pc, #56]	; (8009b2c <HAL_MspInit+0x44>)
 8009af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009af8:	6413      	str	r3, [r2, #64]	; 0x40
 8009afa:	4b0c      	ldr	r3, [pc, #48]	; (8009b2c <HAL_MspInit+0x44>)
 8009afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b02:	607b      	str	r3, [r7, #4]
 8009b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009b06:	4b09      	ldr	r3, [pc, #36]	; (8009b2c <HAL_MspInit+0x44>)
 8009b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b0a:	4a08      	ldr	r2, [pc, #32]	; (8009b2c <HAL_MspInit+0x44>)
 8009b0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009b10:	6453      	str	r3, [r2, #68]	; 0x44
 8009b12:	4b06      	ldr	r3, [pc, #24]	; (8009b2c <HAL_MspInit+0x44>)
 8009b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b1a:	603b      	str	r3, [r7, #0]
 8009b1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009b1e:	bf00      	nop
 8009b20:	370c      	adds	r7, #12
 8009b22:	46bd      	mov	sp, r7
 8009b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b28:	4770      	bx	lr
 8009b2a:	bf00      	nop
 8009b2c:	40023800 	.word	0x40023800

08009b30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b084      	sub	sp, #16
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	4a0d      	ldr	r2, [pc, #52]	; (8009b74 <HAL_ADC_MspInit+0x44>)
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	d113      	bne.n	8009b6a <HAL_ADC_MspInit+0x3a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8009b42:	4b0d      	ldr	r3, [pc, #52]	; (8009b78 <HAL_ADC_MspInit+0x48>)
 8009b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b46:	4a0c      	ldr	r2, [pc, #48]	; (8009b78 <HAL_ADC_MspInit+0x48>)
 8009b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8009b4e:	4b0a      	ldr	r3, [pc, #40]	; (8009b78 <HAL_ADC_MspInit+0x48>)
 8009b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b56:	60fb      	str	r3, [r7, #12]
 8009b58:	68fb      	ldr	r3, [r7, #12]
    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	2100      	movs	r1, #0
 8009b5e:	2012      	movs	r0, #18
 8009b60:	f7f9 fcbf 	bl	80034e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8009b64:	2012      	movs	r0, #18
 8009b66:	f7f9 fcd8 	bl	800351a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8009b6a:	bf00      	nop
 8009b6c:	3710      	adds	r7, #16
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}
 8009b72:	bf00      	nop
 8009b74:	40012000 	.word	0x40012000
 8009b78:	40023800 	.word	0x40023800

08009b7c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b085      	sub	sp, #20
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4a0a      	ldr	r2, [pc, #40]	; (8009bb4 <HAL_DMA2D_MspInit+0x38>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d10b      	bne.n	8009ba6 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8009b8e:	4b0a      	ldr	r3, [pc, #40]	; (8009bb8 <HAL_DMA2D_MspInit+0x3c>)
 8009b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b92:	4a09      	ldr	r2, [pc, #36]	; (8009bb8 <HAL_DMA2D_MspInit+0x3c>)
 8009b94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009b98:	6313      	str	r3, [r2, #48]	; 0x30
 8009b9a:	4b07      	ldr	r3, [pc, #28]	; (8009bb8 <HAL_DMA2D_MspInit+0x3c>)
 8009b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009ba2:	60fb      	str	r3, [r7, #12]
 8009ba4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8009ba6:	bf00      	nop
 8009ba8:	3714      	adds	r7, #20
 8009baa:	46bd      	mov	sp, r7
 8009bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb0:	4770      	bx	lr
 8009bb2:	bf00      	nop
 8009bb4:	4002b000 	.word	0x4002b000
 8009bb8:	40023800 	.word	0x40023800

08009bbc <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b08a      	sub	sp, #40	; 0x28
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009bc4:	f107 0314 	add.w	r3, r7, #20
 8009bc8:	2200      	movs	r2, #0
 8009bca:	601a      	str	r2, [r3, #0]
 8009bcc:	605a      	str	r2, [r3, #4]
 8009bce:	609a      	str	r2, [r3, #8]
 8009bd0:	60da      	str	r2, [r3, #12]
 8009bd2:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	4a17      	ldr	r2, [pc, #92]	; (8009c38 <HAL_DSI_MspInit+0x7c>)
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	d127      	bne.n	8009c2e <HAL_DSI_MspInit+0x72>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8009bde:	4b17      	ldr	r3, [pc, #92]	; (8009c3c <HAL_DSI_MspInit+0x80>)
 8009be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009be2:	4a16      	ldr	r2, [pc, #88]	; (8009c3c <HAL_DSI_MspInit+0x80>)
 8009be4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009be8:	6453      	str	r3, [r2, #68]	; 0x44
 8009bea:	4b14      	ldr	r3, [pc, #80]	; (8009c3c <HAL_DSI_MspInit+0x80>)
 8009bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009bf2:	613b      	str	r3, [r7, #16]
 8009bf4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8009bf6:	4b11      	ldr	r3, [pc, #68]	; (8009c3c <HAL_DSI_MspInit+0x80>)
 8009bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bfa:	4a10      	ldr	r2, [pc, #64]	; (8009c3c <HAL_DSI_MspInit+0x80>)
 8009bfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009c00:	6313      	str	r3, [r2, #48]	; 0x30
 8009c02:	4b0e      	ldr	r3, [pc, #56]	; (8009c3c <HAL_DSI_MspInit+0x80>)
 8009c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009c0a:	60fb      	str	r3, [r7, #12]
 8009c0c:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration    
    PJ2     ------> DSIHOST_TE 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8009c0e:	2304      	movs	r3, #4
 8009c10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c12:	2302      	movs	r3, #2
 8009c14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c16:	2300      	movs	r3, #0
 8009c18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8009c1e:	230d      	movs	r3, #13
 8009c20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8009c22:	f107 0314 	add.w	r3, r7, #20
 8009c26:	4619      	mov	r1, r3
 8009c28:	4805      	ldr	r0, [pc, #20]	; (8009c40 <HAL_DSI_MspInit+0x84>)
 8009c2a:	f7fb f965 	bl	8004ef8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8009c2e:	bf00      	nop
 8009c30:	3728      	adds	r7, #40	; 0x28
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}
 8009c36:	bf00      	nop
 8009c38:	40016c00 	.word	0x40016c00
 8009c3c:	40023800 	.word	0x40023800
 8009c40:	40022400 	.word	0x40022400

08009c44 <HAL_DSI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspDeInit(DSI_HandleTypeDef* hdsi)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b082      	sub	sp, #8
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
  if(hdsi->Instance==DSI)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	4a08      	ldr	r2, [pc, #32]	; (8009c74 <HAL_DSI_MspDeInit+0x30>)
 8009c52:	4293      	cmp	r3, r2
 8009c54:	d109      	bne.n	8009c6a <HAL_DSI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN DSI_MspDeInit 0 */

  /* USER CODE END DSI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DSI_CLK_DISABLE();
 8009c56:	4b08      	ldr	r3, [pc, #32]	; (8009c78 <HAL_DSI_MspDeInit+0x34>)
 8009c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c5a:	4a07      	ldr	r2, [pc, #28]	; (8009c78 <HAL_DSI_MspDeInit+0x34>)
 8009c5c:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8009c60:	6453      	str	r3, [r2, #68]	; 0x44
  
    /**DSIHOST GPIO Configuration    
    PJ2     ------> DSIHOST_TE 
    */
    HAL_GPIO_DeInit(GPIOJ, GPIO_PIN_2);
 8009c62:	2104      	movs	r1, #4
 8009c64:	4805      	ldr	r0, [pc, #20]	; (8009c7c <HAL_DSI_MspDeInit+0x38>)
 8009c66:	f7fb faf1 	bl	800524c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN DSI_MspDeInit 1 */

  /* USER CODE END DSI_MspDeInit 1 */
  }

}
 8009c6a:	bf00      	nop
 8009c6c:	3708      	adds	r7, #8
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}
 8009c72:	bf00      	nop
 8009c74:	40016c00 	.word	0x40016c00
 8009c78:	40023800 	.word	0x40023800
 8009c7c:	40022400 	.word	0x40022400

08009c80 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8009c80:	b480      	push	{r7}
 8009c82:	b085      	sub	sp, #20
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	4a0a      	ldr	r2, [pc, #40]	; (8009cb8 <HAL_LTDC_MspInit+0x38>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d10b      	bne.n	8009caa <HAL_LTDC_MspInit+0x2a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8009c92:	4b0a      	ldr	r3, [pc, #40]	; (8009cbc <HAL_LTDC_MspInit+0x3c>)
 8009c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c96:	4a09      	ldr	r2, [pc, #36]	; (8009cbc <HAL_LTDC_MspInit+0x3c>)
 8009c98:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8009c9e:	4b07      	ldr	r3, [pc, #28]	; (8009cbc <HAL_LTDC_MspInit+0x3c>)
 8009ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ca2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009ca6:	60fb      	str	r3, [r7, #12]
 8009ca8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8009caa:	bf00      	nop
 8009cac:	3714      	adds	r7, #20
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb4:	4770      	bx	lr
 8009cb6:	bf00      	nop
 8009cb8:	40016800 	.word	0x40016800
 8009cbc:	40023800 	.word	0x40023800

08009cc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b084      	sub	sp, #16
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	4a1a      	ldr	r2, [pc, #104]	; (8009d38 <HAL_TIM_Base_MspInit+0x78>)
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d114      	bne.n	8009cfc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8009cd2:	4b1a      	ldr	r3, [pc, #104]	; (8009d3c <HAL_TIM_Base_MspInit+0x7c>)
 8009cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cd6:	4a19      	ldr	r2, [pc, #100]	; (8009d3c <HAL_TIM_Base_MspInit+0x7c>)
 8009cd8:	f043 0310 	orr.w	r3, r3, #16
 8009cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8009cde:	4b17      	ldr	r3, [pc, #92]	; (8009d3c <HAL_TIM_Base_MspInit+0x7c>)
 8009ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ce2:	f003 0310 	and.w	r3, r3, #16
 8009ce6:	60fb      	str	r3, [r7, #12]
 8009ce8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8009cea:	2200      	movs	r2, #0
 8009cec:	2100      	movs	r1, #0
 8009cee:	2036      	movs	r0, #54	; 0x36
 8009cf0:	f7f9 fbf7 	bl	80034e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8009cf4:	2036      	movs	r0, #54	; 0x36
 8009cf6:	f7f9 fc10 	bl	800351a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8009cfa:	e018      	b.n	8009d2e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4a0f      	ldr	r2, [pc, #60]	; (8009d40 <HAL_TIM_Base_MspInit+0x80>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d113      	bne.n	8009d2e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8009d06:	4b0d      	ldr	r3, [pc, #52]	; (8009d3c <HAL_TIM_Base_MspInit+0x7c>)
 8009d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d0a:	4a0c      	ldr	r2, [pc, #48]	; (8009d3c <HAL_TIM_Base_MspInit+0x7c>)
 8009d0c:	f043 0320 	orr.w	r3, r3, #32
 8009d10:	6413      	str	r3, [r2, #64]	; 0x40
 8009d12:	4b0a      	ldr	r3, [pc, #40]	; (8009d3c <HAL_TIM_Base_MspInit+0x7c>)
 8009d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d16:	f003 0320 	and.w	r3, r3, #32
 8009d1a:	60bb      	str	r3, [r7, #8]
 8009d1c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8009d1e:	2200      	movs	r2, #0
 8009d20:	2100      	movs	r1, #0
 8009d22:	2037      	movs	r0, #55	; 0x37
 8009d24:	f7f9 fbdd 	bl	80034e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8009d28:	2037      	movs	r0, #55	; 0x37
 8009d2a:	f7f9 fbf6 	bl	800351a <HAL_NVIC_EnableIRQ>
}
 8009d2e:	bf00      	nop
 8009d30:	3710      	adds	r7, #16
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}
 8009d36:	bf00      	nop
 8009d38:	40001000 	.word	0x40001000
 8009d3c:	40023800 	.word	0x40023800
 8009d40:	40001400 	.word	0x40001400

08009d44 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b086      	sub	sp, #24
 8009d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8009d4a:	1d3b      	adds	r3, r7, #4
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	601a      	str	r2, [r3, #0]
 8009d50:	605a      	str	r2, [r3, #4]
 8009d52:	609a      	str	r2, [r3, #8]
 8009d54:	60da      	str	r2, [r3, #12]
 8009d56:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8009d58:	4b43      	ldr	r3, [pc, #268]	; (8009e68 <HAL_FMC_MspInit+0x124>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d17e      	bne.n	8009e5e <HAL_FMC_MspInit+0x11a>
    return;
  }
  FMC_Initialized = 1;
 8009d60:	4b41      	ldr	r3, [pc, #260]	; (8009e68 <HAL_FMC_MspInit+0x124>)
 8009d62:	2201      	movs	r2, #1
 8009d64:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8009d66:	4b41      	ldr	r3, [pc, #260]	; (8009e6c <HAL_FMC_MspInit+0x128>)
 8009d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d6a:	4a40      	ldr	r2, [pc, #256]	; (8009e6c <HAL_FMC_MspInit+0x128>)
 8009d6c:	f043 0301 	orr.w	r3, r3, #1
 8009d70:	6393      	str	r3, [r2, #56]	; 0x38
 8009d72:	4b3e      	ldr	r3, [pc, #248]	; (8009e6c <HAL_FMC_MspInit+0x128>)
 8009d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d76:	f003 0301 	and.w	r3, r3, #1
 8009d7a:	603b      	str	r3, [r7, #0]
 8009d7c:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8009d7e:	2360      	movs	r3, #96	; 0x60
 8009d80:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d82:	2302      	movs	r3, #2
 8009d84:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d86:	2300      	movs	r3, #0
 8009d88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009d8a:	2303      	movs	r3, #3
 8009d8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009d8e:	230c      	movs	r3, #12
 8009d90:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009d92:	1d3b      	adds	r3, r7, #4
 8009d94:	4619      	mov	r1, r3
 8009d96:	4836      	ldr	r0, [pc, #216]	; (8009e70 <HAL_FMC_MspInit+0x12c>)
 8009d98:	f7fb f8ae 	bl	8004ef8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_2 
 8009d9c:	f248 1337 	movw	r3, #33079	; 0x8137
 8009da0:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009da2:	2302      	movs	r3, #2
 8009da4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009da6:	2300      	movs	r3, #0
 8009da8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009daa:	2303      	movs	r3, #3
 8009dac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009dae:	230c      	movs	r3, #12
 8009db0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009db2:	1d3b      	adds	r3, r7, #4
 8009db4:	4619      	mov	r1, r3
 8009db6:	482f      	ldr	r0, [pc, #188]	; (8009e74 <HAL_FMC_MspInit+0x130>)
 8009db8:	f7fb f89e 	bl	8004ef8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10 
 8009dbc:	f24c 7303 	movw	r3, #50947	; 0xc703
 8009dc0:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009dc2:	2302      	movs	r3, #2
 8009dc4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009dca:	2303      	movs	r3, #3
 8009dcc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009dce:	230c      	movs	r3, #12
 8009dd0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009dd2:	1d3b      	adds	r3, r7, #4
 8009dd4:	4619      	mov	r1, r3
 8009dd6:	4828      	ldr	r0, [pc, #160]	; (8009e78 <HAL_FMC_MspInit+0x134>)
 8009dd8:	f7fb f88e 	bl	8004ef8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_7|GPIO_PIN_10 
 8009ddc:	f240 63cf 	movw	r3, #1743	; 0x6cf
 8009de0:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_6|GPIO_PIN_1|GPIO_PIN_9|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009de2:	2302      	movs	r3, #2
 8009de4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009de6:	2300      	movs	r3, #0
 8009de8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009dea:	2303      	movs	r3, #3
 8009dec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009dee:	230c      	movs	r3, #12
 8009df0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8009df2:	1d3b      	adds	r3, r7, #4
 8009df4:	4619      	mov	r1, r3
 8009df6:	4821      	ldr	r0, [pc, #132]	; (8009e7c <HAL_FMC_MspInit+0x138>)
 8009df8:	f7fb f87e 	bl	8004ef8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8009dfc:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8009e00:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e02:	2302      	movs	r3, #2
 8009e04:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e06:	2300      	movs	r3, #0
 8009e08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009e0a:	2303      	movs	r3, #3
 8009e0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009e0e:	230c      	movs	r3, #12
 8009e10:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8009e12:	1d3b      	adds	r3, r7, #4
 8009e14:	4619      	mov	r1, r3
 8009e16:	481a      	ldr	r0, [pc, #104]	; (8009e80 <HAL_FMC_MspInit+0x13c>)
 8009e18:	f7fb f86e 	bl	8004ef8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_5 
 8009e1c:	f64f 7320 	movw	r3, #65312	; 0xff20
 8009e20:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_8 
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e22:	2302      	movs	r3, #2
 8009e24:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e26:	2300      	movs	r3, #0
 8009e28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009e2a:	2303      	movs	r3, #3
 8009e2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009e2e:	230c      	movs	r3, #12
 8009e30:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8009e32:	1d3b      	adds	r3, r7, #4
 8009e34:	4619      	mov	r1, r3
 8009e36:	4813      	ldr	r0, [pc, #76]	; (8009e84 <HAL_FMC_MspInit+0x140>)
 8009e38:	f7fb f85e 	bl	8004ef8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14 
 8009e3c:	f64f 7380 	movw	r3, #65408	; 0xff80
 8009e40:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15 
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e42:	2302      	movs	r3, #2
 8009e44:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e46:	2300      	movs	r3, #0
 8009e48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009e4a:	2303      	movs	r3, #3
 8009e4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009e4e:	230c      	movs	r3, #12
 8009e50:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009e52:	1d3b      	adds	r3, r7, #4
 8009e54:	4619      	mov	r1, r3
 8009e56:	480c      	ldr	r0, [pc, #48]	; (8009e88 <HAL_FMC_MspInit+0x144>)
 8009e58:	f7fb f84e 	bl	8004ef8 <HAL_GPIO_Init>
 8009e5c:	e000      	b.n	8009e60 <HAL_FMC_MspInit+0x11c>
    return;
 8009e5e:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8009e60:	3718      	adds	r7, #24
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}
 8009e66:	bf00      	nop
 8009e68:	200002ec 	.word	0x200002ec
 8009e6c:	40023800 	.word	0x40023800
 8009e70:	40020400 	.word	0x40020400
 8009e74:	40021800 	.word	0x40021800
 8009e78:	40020c00 	.word	0x40020c00
 8009e7c:	40022000 	.word	0x40022000
 8009e80:	40021400 	.word	0x40021400
 8009e84:	40021c00 	.word	0x40021c00
 8009e88:	40021000 	.word	0x40021000

08009e8c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b082      	sub	sp, #8
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8009e94:	f7ff ff56 	bl	8009d44 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8009e98:	bf00      	nop
 8009e9a:	3708      	adds	r7, #8
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}

08009ea0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8009ea4:	bf00      	nop
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eac:	4770      	bx	lr

08009eae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009eae:	b480      	push	{r7}
 8009eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009eb2:	e7fe      	b.n	8009eb2 <HardFault_Handler+0x4>

08009eb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009eb8:	e7fe      	b.n	8009eb8 <MemManage_Handler+0x4>

08009eba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009eba:	b480      	push	{r7}
 8009ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009ebe:	e7fe      	b.n	8009ebe <BusFault_Handler+0x4>

08009ec0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009ec4:	e7fe      	b.n	8009ec4 <UsageFault_Handler+0x4>

08009ec6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009ec6:	b480      	push	{r7}
 8009ec8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009eca:	bf00      	nop
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed2:	4770      	bx	lr

08009ed4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009ed8:	bf00      	nop
 8009eda:	46bd      	mov	sp, r7
 8009edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee0:	4770      	bx	lr

08009ee2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009ee2:	b480      	push	{r7}
 8009ee4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009ee6:	bf00      	nop
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eee:	4770      	bx	lr

08009ef0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009ef4:	f7f8 fd30 	bl	8002958 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009ef8:	bf00      	nop
 8009efa:	bd80      	pop	{r7, pc}

08009efc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8009f00:	2001      	movs	r0, #1
 8009f02:	f7fb fac7 	bl	8005494 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8009f06:	bf00      	nop
 8009f08:	bd80      	pop	{r7, pc}
	...

08009f0c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8009f10:	4802      	ldr	r0, [pc, #8]	; (8009f1c <ADC_IRQHandler+0x10>)
 8009f12:	f7f8 fe71 	bl	8002bf8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8009f16:	bf00      	nop
 8009f18:	bd80      	pop	{r7, pc}
 8009f1a:	bf00      	nop
 8009f1c:	2000055c 	.word	0x2000055c

08009f20 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8009f24:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8009f28:	f7fb fab4 	bl	8005494 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8009f2c:	bf00      	nop
 8009f2e:	bd80      	pop	{r7, pc}

08009f30 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8009f34:	4802      	ldr	r0, [pc, #8]	; (8009f40 <TIM6_DAC_IRQHandler+0x10>)
 8009f36:	f7fd fc3f 	bl	80077b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8009f3a:	bf00      	nop
 8009f3c:	bd80      	pop	{r7, pc}
 8009f3e:	bf00      	nop
 8009f40:	200005a8 	.word	0x200005a8

08009f44 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8009f48:	4802      	ldr	r0, [pc, #8]	; (8009f54 <TIM7_IRQHandler+0x10>)
 8009f4a:	f7fd fc35 	bl	80077b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8009f4e:	bf00      	nop
 8009f50:	bd80      	pop	{r7, pc}
 8009f52:	bf00      	nop
 8009f54:	20000684 	.word	0x20000684

08009f58 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b084      	sub	sp, #16
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8009f60:	4b11      	ldr	r3, [pc, #68]	; (8009fa8 <_sbrk+0x50>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d102      	bne.n	8009f6e <_sbrk+0x16>
		heap_end = &end;
 8009f68:	4b0f      	ldr	r3, [pc, #60]	; (8009fa8 <_sbrk+0x50>)
 8009f6a:	4a10      	ldr	r2, [pc, #64]	; (8009fac <_sbrk+0x54>)
 8009f6c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8009f6e:	4b0e      	ldr	r3, [pc, #56]	; (8009fa8 <_sbrk+0x50>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8009f74:	4b0c      	ldr	r3, [pc, #48]	; (8009fa8 <_sbrk+0x50>)
 8009f76:	681a      	ldr	r2, [r3, #0]
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	4413      	add	r3, r2
 8009f7c:	466a      	mov	r2, sp
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	d907      	bls.n	8009f92 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8009f82:	f000 f875 	bl	800a070 <__errno>
 8009f86:	4602      	mov	r2, r0
 8009f88:	230c      	movs	r3, #12
 8009f8a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8009f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8009f90:	e006      	b.n	8009fa0 <_sbrk+0x48>
	}

	heap_end += incr;
 8009f92:	4b05      	ldr	r3, [pc, #20]	; (8009fa8 <_sbrk+0x50>)
 8009f94:	681a      	ldr	r2, [r3, #0]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	4413      	add	r3, r2
 8009f9a:	4a03      	ldr	r2, [pc, #12]	; (8009fa8 <_sbrk+0x50>)
 8009f9c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3710      	adds	r7, #16
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}
 8009fa8:	200002f0 	.word	0x200002f0
 8009fac:	200006c8 	.word	0x200006c8

08009fb0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009fb4:	4b15      	ldr	r3, [pc, #84]	; (800a00c <SystemInit+0x5c>)
 8009fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fba:	4a14      	ldr	r2, [pc, #80]	; (800a00c <SystemInit+0x5c>)
 8009fbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009fc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8009fc4:	4b12      	ldr	r3, [pc, #72]	; (800a010 <SystemInit+0x60>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	4a11      	ldr	r2, [pc, #68]	; (800a010 <SystemInit+0x60>)
 8009fca:	f043 0301 	orr.w	r3, r3, #1
 8009fce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8009fd0:	4b0f      	ldr	r3, [pc, #60]	; (800a010 <SystemInit+0x60>)
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8009fd6:	4b0e      	ldr	r3, [pc, #56]	; (800a010 <SystemInit+0x60>)
 8009fd8:	681a      	ldr	r2, [r3, #0]
 8009fda:	490d      	ldr	r1, [pc, #52]	; (800a010 <SystemInit+0x60>)
 8009fdc:	4b0d      	ldr	r3, [pc, #52]	; (800a014 <SystemInit+0x64>)
 8009fde:	4013      	ands	r3, r2
 8009fe0:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8009fe2:	4b0b      	ldr	r3, [pc, #44]	; (800a010 <SystemInit+0x60>)
 8009fe4:	4a0c      	ldr	r2, [pc, #48]	; (800a018 <SystemInit+0x68>)
 8009fe6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8009fe8:	4b09      	ldr	r3, [pc, #36]	; (800a010 <SystemInit+0x60>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	4a08      	ldr	r2, [pc, #32]	; (800a010 <SystemInit+0x60>)
 8009fee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009ff2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8009ff4:	4b06      	ldr	r3, [pc, #24]	; (800a010 <SystemInit+0x60>)
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009ffa:	4b04      	ldr	r3, [pc, #16]	; (800a00c <SystemInit+0x5c>)
 8009ffc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a000:	609a      	str	r2, [r3, #8]
#endif
}
 800a002:	bf00      	nop
 800a004:	46bd      	mov	sp, r7
 800a006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00a:	4770      	bx	lr
 800a00c:	e000ed00 	.word	0xe000ed00
 800a010:	40023800 	.word	0x40023800
 800a014:	fef6ffff 	.word	0xfef6ffff
 800a018:	24003010 	.word	0x24003010

0800a01c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800a01c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a054 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800a020:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800a022:	e003      	b.n	800a02c <LoopCopyDataInit>

0800a024 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800a024:	4b0c      	ldr	r3, [pc, #48]	; (800a058 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800a026:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800a028:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800a02a:	3104      	adds	r1, #4

0800a02c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800a02c:	480b      	ldr	r0, [pc, #44]	; (800a05c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800a02e:	4b0c      	ldr	r3, [pc, #48]	; (800a060 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800a030:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800a032:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800a034:	d3f6      	bcc.n	800a024 <CopyDataInit>
  ldr  r2, =_sbss
 800a036:	4a0b      	ldr	r2, [pc, #44]	; (800a064 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800a038:	e002      	b.n	800a040 <LoopFillZerobss>

0800a03a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800a03a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800a03c:	f842 3b04 	str.w	r3, [r2], #4

0800a040 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800a040:	4b09      	ldr	r3, [pc, #36]	; (800a068 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800a042:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800a044:	d3f9      	bcc.n	800a03a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800a046:	f7ff ffb3 	bl	8009fb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a04a:	f000 f817 	bl	800a07c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a04e:	f7ff f81b 	bl	8009088 <main>
  bx  lr    
 800a052:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800a054:	2007ffff 	.word	0x2007ffff
  ldr  r3, =_sidata
 800a058:	08125abc 	.word	0x08125abc
  ldr  r0, =_sdata
 800a05c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800a060:	200000bc 	.word	0x200000bc
  ldr  r2, =_sbss
 800a064:	200000bc 	.word	0x200000bc
  ldr  r3, = _ebss
 800a068:	200006c8 	.word	0x200006c8

0800a06c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a06c:	e7fe      	b.n	800a06c <CAN1_RX0_IRQHandler>
	...

0800a070 <__errno>:
 800a070:	4b01      	ldr	r3, [pc, #4]	; (800a078 <__errno+0x8>)
 800a072:	6818      	ldr	r0, [r3, #0]
 800a074:	4770      	bx	lr
 800a076:	bf00      	nop
 800a078:	20000058 	.word	0x20000058

0800a07c <__libc_init_array>:
 800a07c:	b570      	push	{r4, r5, r6, lr}
 800a07e:	4e0d      	ldr	r6, [pc, #52]	; (800a0b4 <__libc_init_array+0x38>)
 800a080:	4c0d      	ldr	r4, [pc, #52]	; (800a0b8 <__libc_init_array+0x3c>)
 800a082:	1ba4      	subs	r4, r4, r6
 800a084:	10a4      	asrs	r4, r4, #2
 800a086:	2500      	movs	r5, #0
 800a088:	42a5      	cmp	r5, r4
 800a08a:	d109      	bne.n	800a0a0 <__libc_init_array+0x24>
 800a08c:	4e0b      	ldr	r6, [pc, #44]	; (800a0bc <__libc_init_array+0x40>)
 800a08e:	4c0c      	ldr	r4, [pc, #48]	; (800a0c0 <__libc_init_array+0x44>)
 800a090:	f000 fc26 	bl	800a8e0 <_init>
 800a094:	1ba4      	subs	r4, r4, r6
 800a096:	10a4      	asrs	r4, r4, #2
 800a098:	2500      	movs	r5, #0
 800a09a:	42a5      	cmp	r5, r4
 800a09c:	d105      	bne.n	800a0aa <__libc_init_array+0x2e>
 800a09e:	bd70      	pop	{r4, r5, r6, pc}
 800a0a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a0a4:	4798      	blx	r3
 800a0a6:	3501      	adds	r5, #1
 800a0a8:	e7ee      	b.n	800a088 <__libc_init_array+0xc>
 800a0aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a0ae:	4798      	blx	r3
 800a0b0:	3501      	adds	r5, #1
 800a0b2:	e7f2      	b.n	800a09a <__libc_init_array+0x1e>
 800a0b4:	08125ab4 	.word	0x08125ab4
 800a0b8:	08125ab4 	.word	0x08125ab4
 800a0bc:	08125ab4 	.word	0x08125ab4
 800a0c0:	08125ab8 	.word	0x08125ab8

0800a0c4 <memset>:
 800a0c4:	4402      	add	r2, r0
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d100      	bne.n	800a0ce <memset+0xa>
 800a0cc:	4770      	bx	lr
 800a0ce:	f803 1b01 	strb.w	r1, [r3], #1
 800a0d2:	e7f9      	b.n	800a0c8 <memset+0x4>

0800a0d4 <siprintf>:
 800a0d4:	b40e      	push	{r1, r2, r3}
 800a0d6:	b500      	push	{lr}
 800a0d8:	b09c      	sub	sp, #112	; 0x70
 800a0da:	ab1d      	add	r3, sp, #116	; 0x74
 800a0dc:	9002      	str	r0, [sp, #8]
 800a0de:	9006      	str	r0, [sp, #24]
 800a0e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a0e4:	4809      	ldr	r0, [pc, #36]	; (800a10c <siprintf+0x38>)
 800a0e6:	9107      	str	r1, [sp, #28]
 800a0e8:	9104      	str	r1, [sp, #16]
 800a0ea:	4909      	ldr	r1, [pc, #36]	; (800a110 <siprintf+0x3c>)
 800a0ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0f0:	9105      	str	r1, [sp, #20]
 800a0f2:	6800      	ldr	r0, [r0, #0]
 800a0f4:	9301      	str	r3, [sp, #4]
 800a0f6:	a902      	add	r1, sp, #8
 800a0f8:	f000 f866 	bl	800a1c8 <_svfiprintf_r>
 800a0fc:	9b02      	ldr	r3, [sp, #8]
 800a0fe:	2200      	movs	r2, #0
 800a100:	701a      	strb	r2, [r3, #0]
 800a102:	b01c      	add	sp, #112	; 0x70
 800a104:	f85d eb04 	ldr.w	lr, [sp], #4
 800a108:	b003      	add	sp, #12
 800a10a:	4770      	bx	lr
 800a10c:	20000058 	.word	0x20000058
 800a110:	ffff0208 	.word	0xffff0208

0800a114 <__ssputs_r>:
 800a114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a118:	688e      	ldr	r6, [r1, #8]
 800a11a:	429e      	cmp	r6, r3
 800a11c:	4682      	mov	sl, r0
 800a11e:	460c      	mov	r4, r1
 800a120:	4690      	mov	r8, r2
 800a122:	4699      	mov	r9, r3
 800a124:	d837      	bhi.n	800a196 <__ssputs_r+0x82>
 800a126:	898a      	ldrh	r2, [r1, #12]
 800a128:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a12c:	d031      	beq.n	800a192 <__ssputs_r+0x7e>
 800a12e:	6825      	ldr	r5, [r4, #0]
 800a130:	6909      	ldr	r1, [r1, #16]
 800a132:	1a6f      	subs	r7, r5, r1
 800a134:	6965      	ldr	r5, [r4, #20]
 800a136:	2302      	movs	r3, #2
 800a138:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a13c:	fb95 f5f3 	sdiv	r5, r5, r3
 800a140:	f109 0301 	add.w	r3, r9, #1
 800a144:	443b      	add	r3, r7
 800a146:	429d      	cmp	r5, r3
 800a148:	bf38      	it	cc
 800a14a:	461d      	movcc	r5, r3
 800a14c:	0553      	lsls	r3, r2, #21
 800a14e:	d530      	bpl.n	800a1b2 <__ssputs_r+0x9e>
 800a150:	4629      	mov	r1, r5
 800a152:	f000 fb2b 	bl	800a7ac <_malloc_r>
 800a156:	4606      	mov	r6, r0
 800a158:	b950      	cbnz	r0, 800a170 <__ssputs_r+0x5c>
 800a15a:	230c      	movs	r3, #12
 800a15c:	f8ca 3000 	str.w	r3, [sl]
 800a160:	89a3      	ldrh	r3, [r4, #12]
 800a162:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a166:	81a3      	strh	r3, [r4, #12]
 800a168:	f04f 30ff 	mov.w	r0, #4294967295
 800a16c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a170:	463a      	mov	r2, r7
 800a172:	6921      	ldr	r1, [r4, #16]
 800a174:	f000 faa8 	bl	800a6c8 <memcpy>
 800a178:	89a3      	ldrh	r3, [r4, #12]
 800a17a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a17e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a182:	81a3      	strh	r3, [r4, #12]
 800a184:	6126      	str	r6, [r4, #16]
 800a186:	6165      	str	r5, [r4, #20]
 800a188:	443e      	add	r6, r7
 800a18a:	1bed      	subs	r5, r5, r7
 800a18c:	6026      	str	r6, [r4, #0]
 800a18e:	60a5      	str	r5, [r4, #8]
 800a190:	464e      	mov	r6, r9
 800a192:	454e      	cmp	r6, r9
 800a194:	d900      	bls.n	800a198 <__ssputs_r+0x84>
 800a196:	464e      	mov	r6, r9
 800a198:	4632      	mov	r2, r6
 800a19a:	4641      	mov	r1, r8
 800a19c:	6820      	ldr	r0, [r4, #0]
 800a19e:	f000 fa9e 	bl	800a6de <memmove>
 800a1a2:	68a3      	ldr	r3, [r4, #8]
 800a1a4:	1b9b      	subs	r3, r3, r6
 800a1a6:	60a3      	str	r3, [r4, #8]
 800a1a8:	6823      	ldr	r3, [r4, #0]
 800a1aa:	441e      	add	r6, r3
 800a1ac:	6026      	str	r6, [r4, #0]
 800a1ae:	2000      	movs	r0, #0
 800a1b0:	e7dc      	b.n	800a16c <__ssputs_r+0x58>
 800a1b2:	462a      	mov	r2, r5
 800a1b4:	f000 fb54 	bl	800a860 <_realloc_r>
 800a1b8:	4606      	mov	r6, r0
 800a1ba:	2800      	cmp	r0, #0
 800a1bc:	d1e2      	bne.n	800a184 <__ssputs_r+0x70>
 800a1be:	6921      	ldr	r1, [r4, #16]
 800a1c0:	4650      	mov	r0, sl
 800a1c2:	f000 faa5 	bl	800a710 <_free_r>
 800a1c6:	e7c8      	b.n	800a15a <__ssputs_r+0x46>

0800a1c8 <_svfiprintf_r>:
 800a1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1cc:	461d      	mov	r5, r3
 800a1ce:	898b      	ldrh	r3, [r1, #12]
 800a1d0:	061f      	lsls	r7, r3, #24
 800a1d2:	b09d      	sub	sp, #116	; 0x74
 800a1d4:	4680      	mov	r8, r0
 800a1d6:	460c      	mov	r4, r1
 800a1d8:	4616      	mov	r6, r2
 800a1da:	d50f      	bpl.n	800a1fc <_svfiprintf_r+0x34>
 800a1dc:	690b      	ldr	r3, [r1, #16]
 800a1de:	b96b      	cbnz	r3, 800a1fc <_svfiprintf_r+0x34>
 800a1e0:	2140      	movs	r1, #64	; 0x40
 800a1e2:	f000 fae3 	bl	800a7ac <_malloc_r>
 800a1e6:	6020      	str	r0, [r4, #0]
 800a1e8:	6120      	str	r0, [r4, #16]
 800a1ea:	b928      	cbnz	r0, 800a1f8 <_svfiprintf_r+0x30>
 800a1ec:	230c      	movs	r3, #12
 800a1ee:	f8c8 3000 	str.w	r3, [r8]
 800a1f2:	f04f 30ff 	mov.w	r0, #4294967295
 800a1f6:	e0c8      	b.n	800a38a <_svfiprintf_r+0x1c2>
 800a1f8:	2340      	movs	r3, #64	; 0x40
 800a1fa:	6163      	str	r3, [r4, #20]
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	9309      	str	r3, [sp, #36]	; 0x24
 800a200:	2320      	movs	r3, #32
 800a202:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a206:	2330      	movs	r3, #48	; 0x30
 800a208:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a20c:	9503      	str	r5, [sp, #12]
 800a20e:	f04f 0b01 	mov.w	fp, #1
 800a212:	4637      	mov	r7, r6
 800a214:	463d      	mov	r5, r7
 800a216:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a21a:	b10b      	cbz	r3, 800a220 <_svfiprintf_r+0x58>
 800a21c:	2b25      	cmp	r3, #37	; 0x25
 800a21e:	d13e      	bne.n	800a29e <_svfiprintf_r+0xd6>
 800a220:	ebb7 0a06 	subs.w	sl, r7, r6
 800a224:	d00b      	beq.n	800a23e <_svfiprintf_r+0x76>
 800a226:	4653      	mov	r3, sl
 800a228:	4632      	mov	r2, r6
 800a22a:	4621      	mov	r1, r4
 800a22c:	4640      	mov	r0, r8
 800a22e:	f7ff ff71 	bl	800a114 <__ssputs_r>
 800a232:	3001      	adds	r0, #1
 800a234:	f000 80a4 	beq.w	800a380 <_svfiprintf_r+0x1b8>
 800a238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a23a:	4453      	add	r3, sl
 800a23c:	9309      	str	r3, [sp, #36]	; 0x24
 800a23e:	783b      	ldrb	r3, [r7, #0]
 800a240:	2b00      	cmp	r3, #0
 800a242:	f000 809d 	beq.w	800a380 <_svfiprintf_r+0x1b8>
 800a246:	2300      	movs	r3, #0
 800a248:	f04f 32ff 	mov.w	r2, #4294967295
 800a24c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a250:	9304      	str	r3, [sp, #16]
 800a252:	9307      	str	r3, [sp, #28]
 800a254:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a258:	931a      	str	r3, [sp, #104]	; 0x68
 800a25a:	462f      	mov	r7, r5
 800a25c:	2205      	movs	r2, #5
 800a25e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a262:	4850      	ldr	r0, [pc, #320]	; (800a3a4 <_svfiprintf_r+0x1dc>)
 800a264:	f7f5 ffec 	bl	8000240 <memchr>
 800a268:	9b04      	ldr	r3, [sp, #16]
 800a26a:	b9d0      	cbnz	r0, 800a2a2 <_svfiprintf_r+0xda>
 800a26c:	06d9      	lsls	r1, r3, #27
 800a26e:	bf44      	itt	mi
 800a270:	2220      	movmi	r2, #32
 800a272:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a276:	071a      	lsls	r2, r3, #28
 800a278:	bf44      	itt	mi
 800a27a:	222b      	movmi	r2, #43	; 0x2b
 800a27c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a280:	782a      	ldrb	r2, [r5, #0]
 800a282:	2a2a      	cmp	r2, #42	; 0x2a
 800a284:	d015      	beq.n	800a2b2 <_svfiprintf_r+0xea>
 800a286:	9a07      	ldr	r2, [sp, #28]
 800a288:	462f      	mov	r7, r5
 800a28a:	2000      	movs	r0, #0
 800a28c:	250a      	movs	r5, #10
 800a28e:	4639      	mov	r1, r7
 800a290:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a294:	3b30      	subs	r3, #48	; 0x30
 800a296:	2b09      	cmp	r3, #9
 800a298:	d94d      	bls.n	800a336 <_svfiprintf_r+0x16e>
 800a29a:	b1b8      	cbz	r0, 800a2cc <_svfiprintf_r+0x104>
 800a29c:	e00f      	b.n	800a2be <_svfiprintf_r+0xf6>
 800a29e:	462f      	mov	r7, r5
 800a2a0:	e7b8      	b.n	800a214 <_svfiprintf_r+0x4c>
 800a2a2:	4a40      	ldr	r2, [pc, #256]	; (800a3a4 <_svfiprintf_r+0x1dc>)
 800a2a4:	1a80      	subs	r0, r0, r2
 800a2a6:	fa0b f000 	lsl.w	r0, fp, r0
 800a2aa:	4318      	orrs	r0, r3
 800a2ac:	9004      	str	r0, [sp, #16]
 800a2ae:	463d      	mov	r5, r7
 800a2b0:	e7d3      	b.n	800a25a <_svfiprintf_r+0x92>
 800a2b2:	9a03      	ldr	r2, [sp, #12]
 800a2b4:	1d11      	adds	r1, r2, #4
 800a2b6:	6812      	ldr	r2, [r2, #0]
 800a2b8:	9103      	str	r1, [sp, #12]
 800a2ba:	2a00      	cmp	r2, #0
 800a2bc:	db01      	blt.n	800a2c2 <_svfiprintf_r+0xfa>
 800a2be:	9207      	str	r2, [sp, #28]
 800a2c0:	e004      	b.n	800a2cc <_svfiprintf_r+0x104>
 800a2c2:	4252      	negs	r2, r2
 800a2c4:	f043 0302 	orr.w	r3, r3, #2
 800a2c8:	9207      	str	r2, [sp, #28]
 800a2ca:	9304      	str	r3, [sp, #16]
 800a2cc:	783b      	ldrb	r3, [r7, #0]
 800a2ce:	2b2e      	cmp	r3, #46	; 0x2e
 800a2d0:	d10c      	bne.n	800a2ec <_svfiprintf_r+0x124>
 800a2d2:	787b      	ldrb	r3, [r7, #1]
 800a2d4:	2b2a      	cmp	r3, #42	; 0x2a
 800a2d6:	d133      	bne.n	800a340 <_svfiprintf_r+0x178>
 800a2d8:	9b03      	ldr	r3, [sp, #12]
 800a2da:	1d1a      	adds	r2, r3, #4
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	9203      	str	r2, [sp, #12]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	bfb8      	it	lt
 800a2e4:	f04f 33ff 	movlt.w	r3, #4294967295
 800a2e8:	3702      	adds	r7, #2
 800a2ea:	9305      	str	r3, [sp, #20]
 800a2ec:	4d2e      	ldr	r5, [pc, #184]	; (800a3a8 <_svfiprintf_r+0x1e0>)
 800a2ee:	7839      	ldrb	r1, [r7, #0]
 800a2f0:	2203      	movs	r2, #3
 800a2f2:	4628      	mov	r0, r5
 800a2f4:	f7f5 ffa4 	bl	8000240 <memchr>
 800a2f8:	b138      	cbz	r0, 800a30a <_svfiprintf_r+0x142>
 800a2fa:	2340      	movs	r3, #64	; 0x40
 800a2fc:	1b40      	subs	r0, r0, r5
 800a2fe:	fa03 f000 	lsl.w	r0, r3, r0
 800a302:	9b04      	ldr	r3, [sp, #16]
 800a304:	4303      	orrs	r3, r0
 800a306:	3701      	adds	r7, #1
 800a308:	9304      	str	r3, [sp, #16]
 800a30a:	7839      	ldrb	r1, [r7, #0]
 800a30c:	4827      	ldr	r0, [pc, #156]	; (800a3ac <_svfiprintf_r+0x1e4>)
 800a30e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a312:	2206      	movs	r2, #6
 800a314:	1c7e      	adds	r6, r7, #1
 800a316:	f7f5 ff93 	bl	8000240 <memchr>
 800a31a:	2800      	cmp	r0, #0
 800a31c:	d038      	beq.n	800a390 <_svfiprintf_r+0x1c8>
 800a31e:	4b24      	ldr	r3, [pc, #144]	; (800a3b0 <_svfiprintf_r+0x1e8>)
 800a320:	bb13      	cbnz	r3, 800a368 <_svfiprintf_r+0x1a0>
 800a322:	9b03      	ldr	r3, [sp, #12]
 800a324:	3307      	adds	r3, #7
 800a326:	f023 0307 	bic.w	r3, r3, #7
 800a32a:	3308      	adds	r3, #8
 800a32c:	9303      	str	r3, [sp, #12]
 800a32e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a330:	444b      	add	r3, r9
 800a332:	9309      	str	r3, [sp, #36]	; 0x24
 800a334:	e76d      	b.n	800a212 <_svfiprintf_r+0x4a>
 800a336:	fb05 3202 	mla	r2, r5, r2, r3
 800a33a:	2001      	movs	r0, #1
 800a33c:	460f      	mov	r7, r1
 800a33e:	e7a6      	b.n	800a28e <_svfiprintf_r+0xc6>
 800a340:	2300      	movs	r3, #0
 800a342:	3701      	adds	r7, #1
 800a344:	9305      	str	r3, [sp, #20]
 800a346:	4619      	mov	r1, r3
 800a348:	250a      	movs	r5, #10
 800a34a:	4638      	mov	r0, r7
 800a34c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a350:	3a30      	subs	r2, #48	; 0x30
 800a352:	2a09      	cmp	r2, #9
 800a354:	d903      	bls.n	800a35e <_svfiprintf_r+0x196>
 800a356:	2b00      	cmp	r3, #0
 800a358:	d0c8      	beq.n	800a2ec <_svfiprintf_r+0x124>
 800a35a:	9105      	str	r1, [sp, #20]
 800a35c:	e7c6      	b.n	800a2ec <_svfiprintf_r+0x124>
 800a35e:	fb05 2101 	mla	r1, r5, r1, r2
 800a362:	2301      	movs	r3, #1
 800a364:	4607      	mov	r7, r0
 800a366:	e7f0      	b.n	800a34a <_svfiprintf_r+0x182>
 800a368:	ab03      	add	r3, sp, #12
 800a36a:	9300      	str	r3, [sp, #0]
 800a36c:	4622      	mov	r2, r4
 800a36e:	4b11      	ldr	r3, [pc, #68]	; (800a3b4 <_svfiprintf_r+0x1ec>)
 800a370:	a904      	add	r1, sp, #16
 800a372:	4640      	mov	r0, r8
 800a374:	f3af 8000 	nop.w
 800a378:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a37c:	4681      	mov	r9, r0
 800a37e:	d1d6      	bne.n	800a32e <_svfiprintf_r+0x166>
 800a380:	89a3      	ldrh	r3, [r4, #12]
 800a382:	065b      	lsls	r3, r3, #25
 800a384:	f53f af35 	bmi.w	800a1f2 <_svfiprintf_r+0x2a>
 800a388:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a38a:	b01d      	add	sp, #116	; 0x74
 800a38c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a390:	ab03      	add	r3, sp, #12
 800a392:	9300      	str	r3, [sp, #0]
 800a394:	4622      	mov	r2, r4
 800a396:	4b07      	ldr	r3, [pc, #28]	; (800a3b4 <_svfiprintf_r+0x1ec>)
 800a398:	a904      	add	r1, sp, #16
 800a39a:	4640      	mov	r0, r8
 800a39c:	f000 f882 	bl	800a4a4 <_printf_i>
 800a3a0:	e7ea      	b.n	800a378 <_svfiprintf_r+0x1b0>
 800a3a2:	bf00      	nop
 800a3a4:	08125a78 	.word	0x08125a78
 800a3a8:	08125a7e 	.word	0x08125a7e
 800a3ac:	08125a82 	.word	0x08125a82
 800a3b0:	00000000 	.word	0x00000000
 800a3b4:	0800a115 	.word	0x0800a115

0800a3b8 <_printf_common>:
 800a3b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3bc:	4691      	mov	r9, r2
 800a3be:	461f      	mov	r7, r3
 800a3c0:	688a      	ldr	r2, [r1, #8]
 800a3c2:	690b      	ldr	r3, [r1, #16]
 800a3c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	bfb8      	it	lt
 800a3cc:	4613      	movlt	r3, r2
 800a3ce:	f8c9 3000 	str.w	r3, [r9]
 800a3d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a3d6:	4606      	mov	r6, r0
 800a3d8:	460c      	mov	r4, r1
 800a3da:	b112      	cbz	r2, 800a3e2 <_printf_common+0x2a>
 800a3dc:	3301      	adds	r3, #1
 800a3de:	f8c9 3000 	str.w	r3, [r9]
 800a3e2:	6823      	ldr	r3, [r4, #0]
 800a3e4:	0699      	lsls	r1, r3, #26
 800a3e6:	bf42      	ittt	mi
 800a3e8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a3ec:	3302      	addmi	r3, #2
 800a3ee:	f8c9 3000 	strmi.w	r3, [r9]
 800a3f2:	6825      	ldr	r5, [r4, #0]
 800a3f4:	f015 0506 	ands.w	r5, r5, #6
 800a3f8:	d107      	bne.n	800a40a <_printf_common+0x52>
 800a3fa:	f104 0a19 	add.w	sl, r4, #25
 800a3fe:	68e3      	ldr	r3, [r4, #12]
 800a400:	f8d9 2000 	ldr.w	r2, [r9]
 800a404:	1a9b      	subs	r3, r3, r2
 800a406:	42ab      	cmp	r3, r5
 800a408:	dc28      	bgt.n	800a45c <_printf_common+0xa4>
 800a40a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a40e:	6822      	ldr	r2, [r4, #0]
 800a410:	3300      	adds	r3, #0
 800a412:	bf18      	it	ne
 800a414:	2301      	movne	r3, #1
 800a416:	0692      	lsls	r2, r2, #26
 800a418:	d42d      	bmi.n	800a476 <_printf_common+0xbe>
 800a41a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a41e:	4639      	mov	r1, r7
 800a420:	4630      	mov	r0, r6
 800a422:	47c0      	blx	r8
 800a424:	3001      	adds	r0, #1
 800a426:	d020      	beq.n	800a46a <_printf_common+0xb2>
 800a428:	6823      	ldr	r3, [r4, #0]
 800a42a:	68e5      	ldr	r5, [r4, #12]
 800a42c:	f8d9 2000 	ldr.w	r2, [r9]
 800a430:	f003 0306 	and.w	r3, r3, #6
 800a434:	2b04      	cmp	r3, #4
 800a436:	bf08      	it	eq
 800a438:	1aad      	subeq	r5, r5, r2
 800a43a:	68a3      	ldr	r3, [r4, #8]
 800a43c:	6922      	ldr	r2, [r4, #16]
 800a43e:	bf0c      	ite	eq
 800a440:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a444:	2500      	movne	r5, #0
 800a446:	4293      	cmp	r3, r2
 800a448:	bfc4      	itt	gt
 800a44a:	1a9b      	subgt	r3, r3, r2
 800a44c:	18ed      	addgt	r5, r5, r3
 800a44e:	f04f 0900 	mov.w	r9, #0
 800a452:	341a      	adds	r4, #26
 800a454:	454d      	cmp	r5, r9
 800a456:	d11a      	bne.n	800a48e <_printf_common+0xd6>
 800a458:	2000      	movs	r0, #0
 800a45a:	e008      	b.n	800a46e <_printf_common+0xb6>
 800a45c:	2301      	movs	r3, #1
 800a45e:	4652      	mov	r2, sl
 800a460:	4639      	mov	r1, r7
 800a462:	4630      	mov	r0, r6
 800a464:	47c0      	blx	r8
 800a466:	3001      	adds	r0, #1
 800a468:	d103      	bne.n	800a472 <_printf_common+0xba>
 800a46a:	f04f 30ff 	mov.w	r0, #4294967295
 800a46e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a472:	3501      	adds	r5, #1
 800a474:	e7c3      	b.n	800a3fe <_printf_common+0x46>
 800a476:	18e1      	adds	r1, r4, r3
 800a478:	1c5a      	adds	r2, r3, #1
 800a47a:	2030      	movs	r0, #48	; 0x30
 800a47c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a480:	4422      	add	r2, r4
 800a482:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a486:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a48a:	3302      	adds	r3, #2
 800a48c:	e7c5      	b.n	800a41a <_printf_common+0x62>
 800a48e:	2301      	movs	r3, #1
 800a490:	4622      	mov	r2, r4
 800a492:	4639      	mov	r1, r7
 800a494:	4630      	mov	r0, r6
 800a496:	47c0      	blx	r8
 800a498:	3001      	adds	r0, #1
 800a49a:	d0e6      	beq.n	800a46a <_printf_common+0xb2>
 800a49c:	f109 0901 	add.w	r9, r9, #1
 800a4a0:	e7d8      	b.n	800a454 <_printf_common+0x9c>
	...

0800a4a4 <_printf_i>:
 800a4a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a4a8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a4ac:	460c      	mov	r4, r1
 800a4ae:	7e09      	ldrb	r1, [r1, #24]
 800a4b0:	b085      	sub	sp, #20
 800a4b2:	296e      	cmp	r1, #110	; 0x6e
 800a4b4:	4617      	mov	r7, r2
 800a4b6:	4606      	mov	r6, r0
 800a4b8:	4698      	mov	r8, r3
 800a4ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a4bc:	f000 80b3 	beq.w	800a626 <_printf_i+0x182>
 800a4c0:	d822      	bhi.n	800a508 <_printf_i+0x64>
 800a4c2:	2963      	cmp	r1, #99	; 0x63
 800a4c4:	d036      	beq.n	800a534 <_printf_i+0x90>
 800a4c6:	d80a      	bhi.n	800a4de <_printf_i+0x3a>
 800a4c8:	2900      	cmp	r1, #0
 800a4ca:	f000 80b9 	beq.w	800a640 <_printf_i+0x19c>
 800a4ce:	2958      	cmp	r1, #88	; 0x58
 800a4d0:	f000 8083 	beq.w	800a5da <_printf_i+0x136>
 800a4d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a4d8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a4dc:	e032      	b.n	800a544 <_printf_i+0xa0>
 800a4de:	2964      	cmp	r1, #100	; 0x64
 800a4e0:	d001      	beq.n	800a4e6 <_printf_i+0x42>
 800a4e2:	2969      	cmp	r1, #105	; 0x69
 800a4e4:	d1f6      	bne.n	800a4d4 <_printf_i+0x30>
 800a4e6:	6820      	ldr	r0, [r4, #0]
 800a4e8:	6813      	ldr	r3, [r2, #0]
 800a4ea:	0605      	lsls	r5, r0, #24
 800a4ec:	f103 0104 	add.w	r1, r3, #4
 800a4f0:	d52a      	bpl.n	800a548 <_printf_i+0xa4>
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	6011      	str	r1, [r2, #0]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	da03      	bge.n	800a502 <_printf_i+0x5e>
 800a4fa:	222d      	movs	r2, #45	; 0x2d
 800a4fc:	425b      	negs	r3, r3
 800a4fe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a502:	486f      	ldr	r0, [pc, #444]	; (800a6c0 <_printf_i+0x21c>)
 800a504:	220a      	movs	r2, #10
 800a506:	e039      	b.n	800a57c <_printf_i+0xd8>
 800a508:	2973      	cmp	r1, #115	; 0x73
 800a50a:	f000 809d 	beq.w	800a648 <_printf_i+0x1a4>
 800a50e:	d808      	bhi.n	800a522 <_printf_i+0x7e>
 800a510:	296f      	cmp	r1, #111	; 0x6f
 800a512:	d020      	beq.n	800a556 <_printf_i+0xb2>
 800a514:	2970      	cmp	r1, #112	; 0x70
 800a516:	d1dd      	bne.n	800a4d4 <_printf_i+0x30>
 800a518:	6823      	ldr	r3, [r4, #0]
 800a51a:	f043 0320 	orr.w	r3, r3, #32
 800a51e:	6023      	str	r3, [r4, #0]
 800a520:	e003      	b.n	800a52a <_printf_i+0x86>
 800a522:	2975      	cmp	r1, #117	; 0x75
 800a524:	d017      	beq.n	800a556 <_printf_i+0xb2>
 800a526:	2978      	cmp	r1, #120	; 0x78
 800a528:	d1d4      	bne.n	800a4d4 <_printf_i+0x30>
 800a52a:	2378      	movs	r3, #120	; 0x78
 800a52c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a530:	4864      	ldr	r0, [pc, #400]	; (800a6c4 <_printf_i+0x220>)
 800a532:	e055      	b.n	800a5e0 <_printf_i+0x13c>
 800a534:	6813      	ldr	r3, [r2, #0]
 800a536:	1d19      	adds	r1, r3, #4
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	6011      	str	r1, [r2, #0]
 800a53c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a540:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a544:	2301      	movs	r3, #1
 800a546:	e08c      	b.n	800a662 <_printf_i+0x1be>
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	6011      	str	r1, [r2, #0]
 800a54c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a550:	bf18      	it	ne
 800a552:	b21b      	sxthne	r3, r3
 800a554:	e7cf      	b.n	800a4f6 <_printf_i+0x52>
 800a556:	6813      	ldr	r3, [r2, #0]
 800a558:	6825      	ldr	r5, [r4, #0]
 800a55a:	1d18      	adds	r0, r3, #4
 800a55c:	6010      	str	r0, [r2, #0]
 800a55e:	0628      	lsls	r0, r5, #24
 800a560:	d501      	bpl.n	800a566 <_printf_i+0xc2>
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	e002      	b.n	800a56c <_printf_i+0xc8>
 800a566:	0668      	lsls	r0, r5, #25
 800a568:	d5fb      	bpl.n	800a562 <_printf_i+0xbe>
 800a56a:	881b      	ldrh	r3, [r3, #0]
 800a56c:	4854      	ldr	r0, [pc, #336]	; (800a6c0 <_printf_i+0x21c>)
 800a56e:	296f      	cmp	r1, #111	; 0x6f
 800a570:	bf14      	ite	ne
 800a572:	220a      	movne	r2, #10
 800a574:	2208      	moveq	r2, #8
 800a576:	2100      	movs	r1, #0
 800a578:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a57c:	6865      	ldr	r5, [r4, #4]
 800a57e:	60a5      	str	r5, [r4, #8]
 800a580:	2d00      	cmp	r5, #0
 800a582:	f2c0 8095 	blt.w	800a6b0 <_printf_i+0x20c>
 800a586:	6821      	ldr	r1, [r4, #0]
 800a588:	f021 0104 	bic.w	r1, r1, #4
 800a58c:	6021      	str	r1, [r4, #0]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d13d      	bne.n	800a60e <_printf_i+0x16a>
 800a592:	2d00      	cmp	r5, #0
 800a594:	f040 808e 	bne.w	800a6b4 <_printf_i+0x210>
 800a598:	4665      	mov	r5, ip
 800a59a:	2a08      	cmp	r2, #8
 800a59c:	d10b      	bne.n	800a5b6 <_printf_i+0x112>
 800a59e:	6823      	ldr	r3, [r4, #0]
 800a5a0:	07db      	lsls	r3, r3, #31
 800a5a2:	d508      	bpl.n	800a5b6 <_printf_i+0x112>
 800a5a4:	6923      	ldr	r3, [r4, #16]
 800a5a6:	6862      	ldr	r2, [r4, #4]
 800a5a8:	429a      	cmp	r2, r3
 800a5aa:	bfde      	ittt	le
 800a5ac:	2330      	movle	r3, #48	; 0x30
 800a5ae:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a5b2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a5b6:	ebac 0305 	sub.w	r3, ip, r5
 800a5ba:	6123      	str	r3, [r4, #16]
 800a5bc:	f8cd 8000 	str.w	r8, [sp]
 800a5c0:	463b      	mov	r3, r7
 800a5c2:	aa03      	add	r2, sp, #12
 800a5c4:	4621      	mov	r1, r4
 800a5c6:	4630      	mov	r0, r6
 800a5c8:	f7ff fef6 	bl	800a3b8 <_printf_common>
 800a5cc:	3001      	adds	r0, #1
 800a5ce:	d14d      	bne.n	800a66c <_printf_i+0x1c8>
 800a5d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a5d4:	b005      	add	sp, #20
 800a5d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a5da:	4839      	ldr	r0, [pc, #228]	; (800a6c0 <_printf_i+0x21c>)
 800a5dc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a5e0:	6813      	ldr	r3, [r2, #0]
 800a5e2:	6821      	ldr	r1, [r4, #0]
 800a5e4:	1d1d      	adds	r5, r3, #4
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	6015      	str	r5, [r2, #0]
 800a5ea:	060a      	lsls	r2, r1, #24
 800a5ec:	d50b      	bpl.n	800a606 <_printf_i+0x162>
 800a5ee:	07ca      	lsls	r2, r1, #31
 800a5f0:	bf44      	itt	mi
 800a5f2:	f041 0120 	orrmi.w	r1, r1, #32
 800a5f6:	6021      	strmi	r1, [r4, #0]
 800a5f8:	b91b      	cbnz	r3, 800a602 <_printf_i+0x15e>
 800a5fa:	6822      	ldr	r2, [r4, #0]
 800a5fc:	f022 0220 	bic.w	r2, r2, #32
 800a600:	6022      	str	r2, [r4, #0]
 800a602:	2210      	movs	r2, #16
 800a604:	e7b7      	b.n	800a576 <_printf_i+0xd2>
 800a606:	064d      	lsls	r5, r1, #25
 800a608:	bf48      	it	mi
 800a60a:	b29b      	uxthmi	r3, r3
 800a60c:	e7ef      	b.n	800a5ee <_printf_i+0x14a>
 800a60e:	4665      	mov	r5, ip
 800a610:	fbb3 f1f2 	udiv	r1, r3, r2
 800a614:	fb02 3311 	mls	r3, r2, r1, r3
 800a618:	5cc3      	ldrb	r3, [r0, r3]
 800a61a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a61e:	460b      	mov	r3, r1
 800a620:	2900      	cmp	r1, #0
 800a622:	d1f5      	bne.n	800a610 <_printf_i+0x16c>
 800a624:	e7b9      	b.n	800a59a <_printf_i+0xf6>
 800a626:	6813      	ldr	r3, [r2, #0]
 800a628:	6825      	ldr	r5, [r4, #0]
 800a62a:	6961      	ldr	r1, [r4, #20]
 800a62c:	1d18      	adds	r0, r3, #4
 800a62e:	6010      	str	r0, [r2, #0]
 800a630:	0628      	lsls	r0, r5, #24
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	d501      	bpl.n	800a63a <_printf_i+0x196>
 800a636:	6019      	str	r1, [r3, #0]
 800a638:	e002      	b.n	800a640 <_printf_i+0x19c>
 800a63a:	066a      	lsls	r2, r5, #25
 800a63c:	d5fb      	bpl.n	800a636 <_printf_i+0x192>
 800a63e:	8019      	strh	r1, [r3, #0]
 800a640:	2300      	movs	r3, #0
 800a642:	6123      	str	r3, [r4, #16]
 800a644:	4665      	mov	r5, ip
 800a646:	e7b9      	b.n	800a5bc <_printf_i+0x118>
 800a648:	6813      	ldr	r3, [r2, #0]
 800a64a:	1d19      	adds	r1, r3, #4
 800a64c:	6011      	str	r1, [r2, #0]
 800a64e:	681d      	ldr	r5, [r3, #0]
 800a650:	6862      	ldr	r2, [r4, #4]
 800a652:	2100      	movs	r1, #0
 800a654:	4628      	mov	r0, r5
 800a656:	f7f5 fdf3 	bl	8000240 <memchr>
 800a65a:	b108      	cbz	r0, 800a660 <_printf_i+0x1bc>
 800a65c:	1b40      	subs	r0, r0, r5
 800a65e:	6060      	str	r0, [r4, #4]
 800a660:	6863      	ldr	r3, [r4, #4]
 800a662:	6123      	str	r3, [r4, #16]
 800a664:	2300      	movs	r3, #0
 800a666:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a66a:	e7a7      	b.n	800a5bc <_printf_i+0x118>
 800a66c:	6923      	ldr	r3, [r4, #16]
 800a66e:	462a      	mov	r2, r5
 800a670:	4639      	mov	r1, r7
 800a672:	4630      	mov	r0, r6
 800a674:	47c0      	blx	r8
 800a676:	3001      	adds	r0, #1
 800a678:	d0aa      	beq.n	800a5d0 <_printf_i+0x12c>
 800a67a:	6823      	ldr	r3, [r4, #0]
 800a67c:	079b      	lsls	r3, r3, #30
 800a67e:	d413      	bmi.n	800a6a8 <_printf_i+0x204>
 800a680:	68e0      	ldr	r0, [r4, #12]
 800a682:	9b03      	ldr	r3, [sp, #12]
 800a684:	4298      	cmp	r0, r3
 800a686:	bfb8      	it	lt
 800a688:	4618      	movlt	r0, r3
 800a68a:	e7a3      	b.n	800a5d4 <_printf_i+0x130>
 800a68c:	2301      	movs	r3, #1
 800a68e:	464a      	mov	r2, r9
 800a690:	4639      	mov	r1, r7
 800a692:	4630      	mov	r0, r6
 800a694:	47c0      	blx	r8
 800a696:	3001      	adds	r0, #1
 800a698:	d09a      	beq.n	800a5d0 <_printf_i+0x12c>
 800a69a:	3501      	adds	r5, #1
 800a69c:	68e3      	ldr	r3, [r4, #12]
 800a69e:	9a03      	ldr	r2, [sp, #12]
 800a6a0:	1a9b      	subs	r3, r3, r2
 800a6a2:	42ab      	cmp	r3, r5
 800a6a4:	dcf2      	bgt.n	800a68c <_printf_i+0x1e8>
 800a6a6:	e7eb      	b.n	800a680 <_printf_i+0x1dc>
 800a6a8:	2500      	movs	r5, #0
 800a6aa:	f104 0919 	add.w	r9, r4, #25
 800a6ae:	e7f5      	b.n	800a69c <_printf_i+0x1f8>
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d1ac      	bne.n	800a60e <_printf_i+0x16a>
 800a6b4:	7803      	ldrb	r3, [r0, #0]
 800a6b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a6ba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a6be:	e76c      	b.n	800a59a <_printf_i+0xf6>
 800a6c0:	08125a89 	.word	0x08125a89
 800a6c4:	08125a9a 	.word	0x08125a9a

0800a6c8 <memcpy>:
 800a6c8:	b510      	push	{r4, lr}
 800a6ca:	1e43      	subs	r3, r0, #1
 800a6cc:	440a      	add	r2, r1
 800a6ce:	4291      	cmp	r1, r2
 800a6d0:	d100      	bne.n	800a6d4 <memcpy+0xc>
 800a6d2:	bd10      	pop	{r4, pc}
 800a6d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a6dc:	e7f7      	b.n	800a6ce <memcpy+0x6>

0800a6de <memmove>:
 800a6de:	4288      	cmp	r0, r1
 800a6e0:	b510      	push	{r4, lr}
 800a6e2:	eb01 0302 	add.w	r3, r1, r2
 800a6e6:	d807      	bhi.n	800a6f8 <memmove+0x1a>
 800a6e8:	1e42      	subs	r2, r0, #1
 800a6ea:	4299      	cmp	r1, r3
 800a6ec:	d00a      	beq.n	800a704 <memmove+0x26>
 800a6ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6f2:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a6f6:	e7f8      	b.n	800a6ea <memmove+0xc>
 800a6f8:	4283      	cmp	r3, r0
 800a6fa:	d9f5      	bls.n	800a6e8 <memmove+0xa>
 800a6fc:	1881      	adds	r1, r0, r2
 800a6fe:	1ad2      	subs	r2, r2, r3
 800a700:	42d3      	cmn	r3, r2
 800a702:	d100      	bne.n	800a706 <memmove+0x28>
 800a704:	bd10      	pop	{r4, pc}
 800a706:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a70a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a70e:	e7f7      	b.n	800a700 <memmove+0x22>

0800a710 <_free_r>:
 800a710:	b538      	push	{r3, r4, r5, lr}
 800a712:	4605      	mov	r5, r0
 800a714:	2900      	cmp	r1, #0
 800a716:	d045      	beq.n	800a7a4 <_free_r+0x94>
 800a718:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a71c:	1f0c      	subs	r4, r1, #4
 800a71e:	2b00      	cmp	r3, #0
 800a720:	bfb8      	it	lt
 800a722:	18e4      	addlt	r4, r4, r3
 800a724:	f000 f8d2 	bl	800a8cc <__malloc_lock>
 800a728:	4a1f      	ldr	r2, [pc, #124]	; (800a7a8 <_free_r+0x98>)
 800a72a:	6813      	ldr	r3, [r2, #0]
 800a72c:	4610      	mov	r0, r2
 800a72e:	b933      	cbnz	r3, 800a73e <_free_r+0x2e>
 800a730:	6063      	str	r3, [r4, #4]
 800a732:	6014      	str	r4, [r2, #0]
 800a734:	4628      	mov	r0, r5
 800a736:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a73a:	f000 b8c8 	b.w	800a8ce <__malloc_unlock>
 800a73e:	42a3      	cmp	r3, r4
 800a740:	d90c      	bls.n	800a75c <_free_r+0x4c>
 800a742:	6821      	ldr	r1, [r4, #0]
 800a744:	1862      	adds	r2, r4, r1
 800a746:	4293      	cmp	r3, r2
 800a748:	bf04      	itt	eq
 800a74a:	681a      	ldreq	r2, [r3, #0]
 800a74c:	685b      	ldreq	r3, [r3, #4]
 800a74e:	6063      	str	r3, [r4, #4]
 800a750:	bf04      	itt	eq
 800a752:	1852      	addeq	r2, r2, r1
 800a754:	6022      	streq	r2, [r4, #0]
 800a756:	6004      	str	r4, [r0, #0]
 800a758:	e7ec      	b.n	800a734 <_free_r+0x24>
 800a75a:	4613      	mov	r3, r2
 800a75c:	685a      	ldr	r2, [r3, #4]
 800a75e:	b10a      	cbz	r2, 800a764 <_free_r+0x54>
 800a760:	42a2      	cmp	r2, r4
 800a762:	d9fa      	bls.n	800a75a <_free_r+0x4a>
 800a764:	6819      	ldr	r1, [r3, #0]
 800a766:	1858      	adds	r0, r3, r1
 800a768:	42a0      	cmp	r0, r4
 800a76a:	d10b      	bne.n	800a784 <_free_r+0x74>
 800a76c:	6820      	ldr	r0, [r4, #0]
 800a76e:	4401      	add	r1, r0
 800a770:	1858      	adds	r0, r3, r1
 800a772:	4282      	cmp	r2, r0
 800a774:	6019      	str	r1, [r3, #0]
 800a776:	d1dd      	bne.n	800a734 <_free_r+0x24>
 800a778:	6810      	ldr	r0, [r2, #0]
 800a77a:	6852      	ldr	r2, [r2, #4]
 800a77c:	605a      	str	r2, [r3, #4]
 800a77e:	4401      	add	r1, r0
 800a780:	6019      	str	r1, [r3, #0]
 800a782:	e7d7      	b.n	800a734 <_free_r+0x24>
 800a784:	d902      	bls.n	800a78c <_free_r+0x7c>
 800a786:	230c      	movs	r3, #12
 800a788:	602b      	str	r3, [r5, #0]
 800a78a:	e7d3      	b.n	800a734 <_free_r+0x24>
 800a78c:	6820      	ldr	r0, [r4, #0]
 800a78e:	1821      	adds	r1, r4, r0
 800a790:	428a      	cmp	r2, r1
 800a792:	bf04      	itt	eq
 800a794:	6811      	ldreq	r1, [r2, #0]
 800a796:	6852      	ldreq	r2, [r2, #4]
 800a798:	6062      	str	r2, [r4, #4]
 800a79a:	bf04      	itt	eq
 800a79c:	1809      	addeq	r1, r1, r0
 800a79e:	6021      	streq	r1, [r4, #0]
 800a7a0:	605c      	str	r4, [r3, #4]
 800a7a2:	e7c7      	b.n	800a734 <_free_r+0x24>
 800a7a4:	bd38      	pop	{r3, r4, r5, pc}
 800a7a6:	bf00      	nop
 800a7a8:	200002f4 	.word	0x200002f4

0800a7ac <_malloc_r>:
 800a7ac:	b570      	push	{r4, r5, r6, lr}
 800a7ae:	1ccd      	adds	r5, r1, #3
 800a7b0:	f025 0503 	bic.w	r5, r5, #3
 800a7b4:	3508      	adds	r5, #8
 800a7b6:	2d0c      	cmp	r5, #12
 800a7b8:	bf38      	it	cc
 800a7ba:	250c      	movcc	r5, #12
 800a7bc:	2d00      	cmp	r5, #0
 800a7be:	4606      	mov	r6, r0
 800a7c0:	db01      	blt.n	800a7c6 <_malloc_r+0x1a>
 800a7c2:	42a9      	cmp	r1, r5
 800a7c4:	d903      	bls.n	800a7ce <_malloc_r+0x22>
 800a7c6:	230c      	movs	r3, #12
 800a7c8:	6033      	str	r3, [r6, #0]
 800a7ca:	2000      	movs	r0, #0
 800a7cc:	bd70      	pop	{r4, r5, r6, pc}
 800a7ce:	f000 f87d 	bl	800a8cc <__malloc_lock>
 800a7d2:	4a21      	ldr	r2, [pc, #132]	; (800a858 <_malloc_r+0xac>)
 800a7d4:	6814      	ldr	r4, [r2, #0]
 800a7d6:	4621      	mov	r1, r4
 800a7d8:	b991      	cbnz	r1, 800a800 <_malloc_r+0x54>
 800a7da:	4c20      	ldr	r4, [pc, #128]	; (800a85c <_malloc_r+0xb0>)
 800a7dc:	6823      	ldr	r3, [r4, #0]
 800a7de:	b91b      	cbnz	r3, 800a7e8 <_malloc_r+0x3c>
 800a7e0:	4630      	mov	r0, r6
 800a7e2:	f000 f863 	bl	800a8ac <_sbrk_r>
 800a7e6:	6020      	str	r0, [r4, #0]
 800a7e8:	4629      	mov	r1, r5
 800a7ea:	4630      	mov	r0, r6
 800a7ec:	f000 f85e 	bl	800a8ac <_sbrk_r>
 800a7f0:	1c43      	adds	r3, r0, #1
 800a7f2:	d124      	bne.n	800a83e <_malloc_r+0x92>
 800a7f4:	230c      	movs	r3, #12
 800a7f6:	6033      	str	r3, [r6, #0]
 800a7f8:	4630      	mov	r0, r6
 800a7fa:	f000 f868 	bl	800a8ce <__malloc_unlock>
 800a7fe:	e7e4      	b.n	800a7ca <_malloc_r+0x1e>
 800a800:	680b      	ldr	r3, [r1, #0]
 800a802:	1b5b      	subs	r3, r3, r5
 800a804:	d418      	bmi.n	800a838 <_malloc_r+0x8c>
 800a806:	2b0b      	cmp	r3, #11
 800a808:	d90f      	bls.n	800a82a <_malloc_r+0x7e>
 800a80a:	600b      	str	r3, [r1, #0]
 800a80c:	50cd      	str	r5, [r1, r3]
 800a80e:	18cc      	adds	r4, r1, r3
 800a810:	4630      	mov	r0, r6
 800a812:	f000 f85c 	bl	800a8ce <__malloc_unlock>
 800a816:	f104 000b 	add.w	r0, r4, #11
 800a81a:	1d23      	adds	r3, r4, #4
 800a81c:	f020 0007 	bic.w	r0, r0, #7
 800a820:	1ac3      	subs	r3, r0, r3
 800a822:	d0d3      	beq.n	800a7cc <_malloc_r+0x20>
 800a824:	425a      	negs	r2, r3
 800a826:	50e2      	str	r2, [r4, r3]
 800a828:	e7d0      	b.n	800a7cc <_malloc_r+0x20>
 800a82a:	428c      	cmp	r4, r1
 800a82c:	684b      	ldr	r3, [r1, #4]
 800a82e:	bf16      	itet	ne
 800a830:	6063      	strne	r3, [r4, #4]
 800a832:	6013      	streq	r3, [r2, #0]
 800a834:	460c      	movne	r4, r1
 800a836:	e7eb      	b.n	800a810 <_malloc_r+0x64>
 800a838:	460c      	mov	r4, r1
 800a83a:	6849      	ldr	r1, [r1, #4]
 800a83c:	e7cc      	b.n	800a7d8 <_malloc_r+0x2c>
 800a83e:	1cc4      	adds	r4, r0, #3
 800a840:	f024 0403 	bic.w	r4, r4, #3
 800a844:	42a0      	cmp	r0, r4
 800a846:	d005      	beq.n	800a854 <_malloc_r+0xa8>
 800a848:	1a21      	subs	r1, r4, r0
 800a84a:	4630      	mov	r0, r6
 800a84c:	f000 f82e 	bl	800a8ac <_sbrk_r>
 800a850:	3001      	adds	r0, #1
 800a852:	d0cf      	beq.n	800a7f4 <_malloc_r+0x48>
 800a854:	6025      	str	r5, [r4, #0]
 800a856:	e7db      	b.n	800a810 <_malloc_r+0x64>
 800a858:	200002f4 	.word	0x200002f4
 800a85c:	200002f8 	.word	0x200002f8

0800a860 <_realloc_r>:
 800a860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a862:	4607      	mov	r7, r0
 800a864:	4614      	mov	r4, r2
 800a866:	460e      	mov	r6, r1
 800a868:	b921      	cbnz	r1, 800a874 <_realloc_r+0x14>
 800a86a:	4611      	mov	r1, r2
 800a86c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a870:	f7ff bf9c 	b.w	800a7ac <_malloc_r>
 800a874:	b922      	cbnz	r2, 800a880 <_realloc_r+0x20>
 800a876:	f7ff ff4b 	bl	800a710 <_free_r>
 800a87a:	4625      	mov	r5, r4
 800a87c:	4628      	mov	r0, r5
 800a87e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a880:	f000 f826 	bl	800a8d0 <_malloc_usable_size_r>
 800a884:	42a0      	cmp	r0, r4
 800a886:	d20f      	bcs.n	800a8a8 <_realloc_r+0x48>
 800a888:	4621      	mov	r1, r4
 800a88a:	4638      	mov	r0, r7
 800a88c:	f7ff ff8e 	bl	800a7ac <_malloc_r>
 800a890:	4605      	mov	r5, r0
 800a892:	2800      	cmp	r0, #0
 800a894:	d0f2      	beq.n	800a87c <_realloc_r+0x1c>
 800a896:	4631      	mov	r1, r6
 800a898:	4622      	mov	r2, r4
 800a89a:	f7ff ff15 	bl	800a6c8 <memcpy>
 800a89e:	4631      	mov	r1, r6
 800a8a0:	4638      	mov	r0, r7
 800a8a2:	f7ff ff35 	bl	800a710 <_free_r>
 800a8a6:	e7e9      	b.n	800a87c <_realloc_r+0x1c>
 800a8a8:	4635      	mov	r5, r6
 800a8aa:	e7e7      	b.n	800a87c <_realloc_r+0x1c>

0800a8ac <_sbrk_r>:
 800a8ac:	b538      	push	{r3, r4, r5, lr}
 800a8ae:	4c06      	ldr	r4, [pc, #24]	; (800a8c8 <_sbrk_r+0x1c>)
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	4605      	mov	r5, r0
 800a8b4:	4608      	mov	r0, r1
 800a8b6:	6023      	str	r3, [r4, #0]
 800a8b8:	f7ff fb4e 	bl	8009f58 <_sbrk>
 800a8bc:	1c43      	adds	r3, r0, #1
 800a8be:	d102      	bne.n	800a8c6 <_sbrk_r+0x1a>
 800a8c0:	6823      	ldr	r3, [r4, #0]
 800a8c2:	b103      	cbz	r3, 800a8c6 <_sbrk_r+0x1a>
 800a8c4:	602b      	str	r3, [r5, #0]
 800a8c6:	bd38      	pop	{r3, r4, r5, pc}
 800a8c8:	200006c4 	.word	0x200006c4

0800a8cc <__malloc_lock>:
 800a8cc:	4770      	bx	lr

0800a8ce <__malloc_unlock>:
 800a8ce:	4770      	bx	lr

0800a8d0 <_malloc_usable_size_r>:
 800a8d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8d4:	1f18      	subs	r0, r3, #4
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	bfbc      	itt	lt
 800a8da:	580b      	ldrlt	r3, [r1, r0]
 800a8dc:	18c0      	addlt	r0, r0, r3
 800a8de:	4770      	bx	lr

0800a8e0 <_init>:
 800a8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8e2:	bf00      	nop
 800a8e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8e6:	bc08      	pop	{r3}
 800a8e8:	469e      	mov	lr, r3
 800a8ea:	4770      	bx	lr

0800a8ec <_fini>:
 800a8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ee:	bf00      	nop
 800a8f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8f2:	bc08      	pop	{r3}
 800a8f4:	469e      	mov	lr, r3
 800a8f6:	4770      	bx	lr
