
Reversi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087f4  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d20  080089ec  080089ec  000189ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a70c  0800a70c  00020058  2**0
                  CONTENTS
  4 .ARM          00000008  0800a70c  0800a70c  0001a70c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a714  0800a714  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a714  0800a714  0001a714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a718  0800a718  0001a718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  0800a71c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005ec  20000058  0800a774  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000644  0800a774  00020644  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f872  00000000  00000000  00020086  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003992  00000000  00000000  0003f8f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001958  00000000  00000000  00043290  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001790  00000000  00000000  00044be8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002f583  00000000  00000000  00046378  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014cb5  00000000  00000000  000758fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001230ec  00000000  00000000  0008a5b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001ad69c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b88  00000000  00000000  001ad718  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000058 	.word	0x20000058
 8000214:	00000000 	.word	0x00000000
 8000218:	080089d4 	.word	0x080089d4

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	2000005c 	.word	0x2000005c
 8000234:	080089d4 	.word	0x080089d4

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <ft6x06_Init>:
  *         from MCU to FT6206 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Init(uint16_t DeviceAddr)
{  
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af00      	add	r7, sp, #0
 800053e:	4603      	mov	r3, r0
 8000540:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = ft6x06_GetInstance(DeviceAddr);
 8000542:	88fb      	ldrh	r3, [r7, #6]
 8000544:	4618      	mov	r0, r3
 8000546:	f000 f90d 	bl	8000764 <ft6x06_GetInstance>
 800054a:	4603      	mov	r3, r0
 800054c:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 800054e:	7bfb      	ldrb	r3, [r7, #15]
 8000550:	2bff      	cmp	r3, #255	; 0xff
 8000552:	d10e      	bne.n	8000572 <ft6x06_Init+0x3a>
  {
    /* Look for empty instance */
    empty = ft6x06_GetInstance(0);
 8000554:	2000      	movs	r0, #0
 8000556:	f000 f905 	bl	8000764 <ft6x06_GetInstance>
 800055a:	4603      	mov	r3, r0
 800055c:	73bb      	strb	r3, [r7, #14]
    
    if(empty < FT6x06_MAX_INSTANCE)
 800055e:	7bbb      	ldrb	r3, [r7, #14]
 8000560:	2b01      	cmp	r3, #1
 8000562:	d806      	bhi.n	8000572 <ft6x06_Init+0x3a>
    {
      /* Register the current device instance */
      ft6x06[empty] = DeviceAddr;
 8000564:	7bbb      	ldrb	r3, [r7, #14]
 8000566:	88fa      	ldrh	r2, [r7, #6]
 8000568:	b2d1      	uxtb	r1, r2
 800056a:	4a04      	ldr	r2, [pc, #16]	; (800057c <ft6x06_Init+0x44>)
 800056c:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      TS_IO_Init(); 
 800056e:	f000 fd39 	bl	8000fe4 <TS_IO_Init>
    }
  }
}
 8000572:	bf00      	nop
 8000574:	3710      	adds	r7, #16
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	20000074 	.word	0x20000074

08000580 <ft6x06_Reset>:
  *         @note : Not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 800058a:	bf00      	nop
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr

08000596 <ft6x06_ReadID>:
  *         able to read the FT6206 device ID, and verify this is a FT6206.
  * @param  DeviceAddr: I2C FT6x06 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft6x06_ReadID(uint16_t DeviceAddr)
{
 8000596:	b580      	push	{r7, lr}
 8000598:	b082      	sub	sp, #8
 800059a:	af00      	add	r7, sp, #0
 800059c:	4603      	mov	r3, r0
 800059e:	80fb      	strh	r3, [r7, #6]
  /* Initialize I2C link if needed */
  TS_IO_Init();
 80005a0:	f000 fd20 	bl	8000fe4 <TS_IO_Init>
  
  /* Return the device ID value */
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 80005a4:	88fb      	ldrh	r3, [r7, #6]
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	21a8      	movs	r1, #168	; 0xa8
 80005aa:	4618      	mov	r0, r3
 80005ac:	f000 fd3e 	bl	800102c <TS_IO_Read>
 80005b0:	4603      	mov	r3, r0
 80005b2:	b29b      	uxth	r3, r3
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <ft6x06_TS_Start>:
  *         the touch screen).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft6x06_TS_Start(uint16_t DeviceAddr)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	80fb      	strh	r3, [r7, #6]
  /* Hw Calibration sequence start : should be done once after each power up */
  /* This is called internal calibration of the touch screen                 */
  ft6x06_TS_Calibration(DeviceAddr);
#endif
  /* Minimum static configuration of FT6206 */
  ft6x06_TS_Configure(DeviceAddr);
 80005c6:	88fb      	ldrh	r3, [r7, #6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	f000 f8bc 	bl	8000746 <ft6x06_TS_Configure>

  /* By default set FT6206 IC in Polling mode : no INT generation on FT6206 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft6x06_TS_DisableIT(DeviceAddr);
 80005ce:	88fb      	ldrh	r3, [r7, #6]
 80005d0:	4618      	mov	r0, r3
 80005d2:	f000 f88d 	bl	80006f0 <ft6x06_TS_DisableIT>
}
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
	...

080005e0 <ft6x06_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft6x06_TS_DetectTouch(uint16_t DeviceAddr)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	73fb      	strb	r3, [r7, #15]

  /* Read register FT6206_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 80005ee:	88fb      	ldrh	r3, [r7, #6]
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	2102      	movs	r1, #2
 80005f4:	4618      	mov	r0, r3
 80005f6:	f000 fd19 	bl	800102c <TS_IO_Read>
 80005fa:	4603      	mov	r3, r0
 80005fc:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT6206_TD_STAT_MASK;
 80005fe:	7bfb      	ldrb	r3, [r7, #15]
 8000600:	b2db      	uxtb	r3, r3
 8000602:	f003 030f 	and.w	r3, r3, #15
 8000606:	b2db      	uxtb	r3, r3
 8000608:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 800060a:	7bfb      	ldrb	r3, [r7, #15]
 800060c:	b2db      	uxtb	r3, r3
 800060e:	2b02      	cmp	r3, #2
 8000610:	d901      	bls.n	8000616 <ft6x06_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8000612:	2300      	movs	r3, #0
 8000614:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft6x06 driver internal global : current number of active touches */
  ft6x06_handle.currActiveTouchNb = nbTouch;
 8000616:	7bfb      	ldrb	r3, [r7, #15]
 8000618:	b2da      	uxtb	r2, r3
 800061a:	4b05      	ldr	r3, [pc, #20]	; (8000630 <ft6x06_TS_DetectTouch+0x50>)
 800061c:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft6x06_handle.currActiveTouchIdx = 0;
 800061e:	4b04      	ldr	r3, [pc, #16]	; (8000630 <ft6x06_TS_DetectTouch+0x50>)
 8000620:	2200      	movs	r2, #0
 8000622:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	b2db      	uxtb	r3, r3
}
 8000628:	4618      	mov	r0, r3
 800062a:	3710      	adds	r7, #16
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20000078 	.word	0x20000078

08000634 <ft6x06_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft6x06_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b086      	sub	sp, #24
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	60b9      	str	r1, [r7, #8]
 800063e:	607a      	str	r2, [r7, #4]
 8000640:	81fb      	strh	r3, [r7, #14]
  uint8_t regAddress = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	75fb      	strb	r3, [r7, #23]
  uint8_t  dataxy[4];
  
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 8000646:	4b1f      	ldr	r3, [pc, #124]	; (80006c4 <ft6x06_TS_GetXY+0x90>)
 8000648:	789a      	ldrb	r2, [r3, #2]
 800064a:	4b1e      	ldr	r3, [pc, #120]	; (80006c4 <ft6x06_TS_GetXY+0x90>)
 800064c:	785b      	ldrb	r3, [r3, #1]
 800064e:	429a      	cmp	r2, r3
 8000650:	d234      	bcs.n	80006bc <ft6x06_TS_GetXY+0x88>
  {
    switch(ft6x06_handle.currActiveTouchIdx)
 8000652:	4b1c      	ldr	r3, [pc, #112]	; (80006c4 <ft6x06_TS_GetXY+0x90>)
 8000654:	789b      	ldrb	r3, [r3, #2]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d002      	beq.n	8000660 <ft6x06_TS_GetXY+0x2c>
 800065a:	2b01      	cmp	r3, #1
 800065c:	d003      	beq.n	8000666 <ft6x06_TS_GetXY+0x32>
    case 1 :
      regAddress = FT6206_P2_XH_REG; 
      break;

    default :
      break;
 800065e:	e005      	b.n	800066c <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P1_XH_REG; 
 8000660:	2303      	movs	r3, #3
 8000662:	75fb      	strb	r3, [r7, #23]
      break;
 8000664:	e002      	b.n	800066c <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P2_XH_REG; 
 8000666:	2309      	movs	r3, #9
 8000668:	75fb      	strb	r3, [r7, #23]
      break;
 800066a:	bf00      	nop
    }
    
    /* Read X and Y positions */
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 800066c:	89fb      	ldrh	r3, [r7, #14]
 800066e:	b2d8      	uxtb	r0, r3
 8000670:	f107 0210 	add.w	r2, r7, #16
 8000674:	7df9      	ldrb	r1, [r7, #23]
 8000676:	2304      	movs	r3, #4
 8000678:	f000 fcf6 	bl	8001068 <TS_IO_ReadMultiple>

    /* Send back ready X position to caller */
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 800067c:	7c3b      	ldrb	r3, [r7, #16]
 800067e:	021b      	lsls	r3, r3, #8
 8000680:	b21b      	sxth	r3, r3
 8000682:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000686:	b21a      	sxth	r2, r3
 8000688:	7c7b      	ldrb	r3, [r7, #17]
 800068a:	b21b      	sxth	r3, r3
 800068c:	4313      	orrs	r3, r2
 800068e:	b21b      	sxth	r3, r3
 8000690:	b29a      	uxth	r2, r3
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	801a      	strh	r2, [r3, #0]
    
    /* Send back ready Y position to caller */
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 8000696:	7cbb      	ldrb	r3, [r7, #18]
 8000698:	021b      	lsls	r3, r3, #8
 800069a:	b21b      	sxth	r3, r3
 800069c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80006a0:	b21a      	sxth	r2, r3
 80006a2:	7cfb      	ldrb	r3, [r7, #19]
 80006a4:	b21b      	sxth	r3, r3
 80006a6:	4313      	orrs	r3, r2
 80006a8:	b21b      	sxth	r3, r3
 80006aa:	b29a      	uxth	r2, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	801a      	strh	r2, [r3, #0]
    
    ft6x06_handle.currActiveTouchIdx++;
 80006b0:	4b04      	ldr	r3, [pc, #16]	; (80006c4 <ft6x06_TS_GetXY+0x90>)
 80006b2:	789b      	ldrb	r3, [r3, #2]
 80006b4:	3301      	adds	r3, #1
 80006b6:	b2da      	uxtb	r2, r3
 80006b8:	4b02      	ldr	r3, [pc, #8]	; (80006c4 <ft6x06_TS_GetXY+0x90>)
 80006ba:	709a      	strb	r2, [r3, #2]
  }
}
 80006bc:	bf00      	nop
 80006be:	3718      	adds	r7, #24
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000078 	.word	0x20000078

080006c8 <ft6x06_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_EnableIT(uint16_t DeviceAddr)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_TRIGGER & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 80006d6:	2301      	movs	r3, #1
 80006d8:	73fb      	strb	r3, [r7, #15]
  
  /* Set interrupt trigger mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 80006da:	88fb      	ldrh	r3, [r7, #6]
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	7bfa      	ldrb	r2, [r7, #15]
 80006e0:	21a4      	movs	r1, #164	; 0xa4
 80006e2:	4618      	mov	r0, r3
 80006e4:	f000 fc88 	bl	8000ff8 <TS_IO_Write>
}
 80006e8:	bf00      	nop
 80006ea:	3710      	adds	r7, #16
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <ft6x06_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_DisableIT(uint16_t DeviceAddr)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_POLLING & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 80006fe:	2300      	movs	r3, #0
 8000700:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8000702:	88fb      	ldrh	r3, [r7, #6]
 8000704:	b2db      	uxtb	r3, r3
 8000706:	7bfa      	ldrb	r2, [r7, #15]
 8000708:	21a4      	movs	r1, #164	; 0xa4
 800070a:	4618      	mov	r0, r3
 800070c:	f000 fc74 	bl	8000ff8 <TS_IO_Write>
}
 8000710:	bf00      	nop
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <ft6x06_TS_ITStatus>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
 8000722:	2300      	movs	r3, #0
}
 8000724:	4618      	mov	r0, r3
 8000726:	370c      	adds	r7, #12
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr

08000730 <ft6x06_TS_ClearIT>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_TS_ClearIT(uint16_t DeviceAddr)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT6206 */
}
 800073a:	bf00      	nop
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr

08000746 <ft6x06_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT6206 Device address for communication on I2C Bus.
  * @retval Status FT6206_STATUS_OK or FT6206_STATUS_NOT_OK.
  */
static uint32_t ft6x06_TS_Configure(uint16_t DeviceAddr)
{
 8000746:	b480      	push	{r7}
 8000748:	b085      	sub	sp, #20
 800074a:	af00      	add	r7, sp, #0
 800074c:	4603      	mov	r3, r0
 800074e:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT6206_STATUS_OK;
 8000750:	2300      	movs	r3, #0
 8000752:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT6206 */

  return(status);
 8000754:	68fb      	ldr	r3, [r7, #12]
}
 8000756:	4618      	mov	r0, r3
 8000758:	3714      	adds	r7, #20
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
	...

08000764 <ft6x06_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t ft6x06_GetInstance(uint16_t DeviceAddr)
{
 8000764:	b480      	push	{r7}
 8000766:	b085      	sub	sp, #20
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 8000772:	2300      	movs	r3, #0
 8000774:	73fb      	strb	r3, [r7, #15]
 8000776:	e00b      	b.n	8000790 <ft6x06_GetInstance+0x2c>
  {
    if(ft6x06[idx] == DeviceAddr)
 8000778:	7bfb      	ldrb	r3, [r7, #15]
 800077a:	4a0a      	ldr	r2, [pc, #40]	; (80007a4 <ft6x06_GetInstance+0x40>)
 800077c:	5cd3      	ldrb	r3, [r2, r3]
 800077e:	b29b      	uxth	r3, r3
 8000780:	88fa      	ldrh	r2, [r7, #6]
 8000782:	429a      	cmp	r2, r3
 8000784:	d101      	bne.n	800078a <ft6x06_GetInstance+0x26>
    {
      return idx; 
 8000786:	7bfb      	ldrb	r3, [r7, #15]
 8000788:	e006      	b.n	8000798 <ft6x06_GetInstance+0x34>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 800078a:	7bfb      	ldrb	r3, [r7, #15]
 800078c:	3301      	adds	r3, #1
 800078e:	73fb      	strb	r3, [r7, #15]
 8000790:	7bfb      	ldrb	r3, [r7, #15]
 8000792:	2b01      	cmp	r3, #1
 8000794:	d9f0      	bls.n	8000778 <ft6x06_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8000796:	23ff      	movs	r3, #255	; 0xff
}
 8000798:	4618      	mov	r0, r3
 800079a:	3714      	adds	r7, #20
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr
 80007a4:	20000074 	.word	0x20000074

080007a8 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80007b2:	49be      	ldr	r1, [pc, #760]	; (8000aac <OTM8009A_Init+0x304>)
 80007b4:	2000      	movs	r0, #0
 80007b6:	f001 f853 	bl	8001860 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 80007ba:	49bd      	ldr	r1, [pc, #756]	; (8000ab0 <OTM8009A_Init+0x308>)
 80007bc:	2003      	movs	r0, #3
 80007be:	f001 f84f 	bl	8001860 <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 80007c2:	49bc      	ldr	r1, [pc, #752]	; (8000ab4 <OTM8009A_Init+0x30c>)
 80007c4:	2000      	movs	r0, #0
 80007c6:	f001 f84b 	bl	8001860 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 80007ca:	49bb      	ldr	r1, [pc, #748]	; (8000ab8 <OTM8009A_Init+0x310>)
 80007cc:	2002      	movs	r0, #2
 80007ce:	f001 f847 	bl	8001860 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80007d2:	49b8      	ldr	r1, [pc, #736]	; (8000ab4 <OTM8009A_Init+0x30c>)
 80007d4:	2000      	movs	r0, #0
 80007d6:	f001 f843 	bl	8001860 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 80007da:	49b8      	ldr	r1, [pc, #736]	; (8000abc <OTM8009A_Init+0x314>)
 80007dc:	2000      	movs	r0, #0
 80007de:	f001 f83f 	bl	8001860 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 80007e2:	200a      	movs	r0, #10
 80007e4:	f000 fc5e 	bl	80010a4 <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 80007e8:	49b5      	ldr	r1, [pc, #724]	; (8000ac0 <OTM8009A_Init+0x318>)
 80007ea:	2000      	movs	r0, #0
 80007ec:	f001 f838 	bl	8001860 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 80007f0:	49b4      	ldr	r1, [pc, #720]	; (8000ac4 <OTM8009A_Init+0x31c>)
 80007f2:	2000      	movs	r0, #0
 80007f4:	f001 f834 	bl	8001860 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 80007f8:	200a      	movs	r0, #10
 80007fa:	f000 fc53 	bl	80010a4 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 80007fe:	49b2      	ldr	r1, [pc, #712]	; (8000ac8 <OTM8009A_Init+0x320>)
 8000800:	2000      	movs	r0, #0
 8000802:	f001 f82d 	bl	8001860 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 8000806:	49b1      	ldr	r1, [pc, #708]	; (8000acc <OTM8009A_Init+0x324>)
 8000808:	2000      	movs	r0, #0
 800080a:	f001 f829 	bl	8001860 <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 800080e:	49b0      	ldr	r1, [pc, #704]	; (8000ad0 <OTM8009A_Init+0x328>)
 8000810:	2000      	movs	r0, #0
 8000812:	f001 f825 	bl	8001860 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8000816:	49af      	ldr	r1, [pc, #700]	; (8000ad4 <OTM8009A_Init+0x32c>)
 8000818:	2000      	movs	r0, #0
 800081a:	f001 f821 	bl	8001860 <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 800081e:	49ae      	ldr	r1, [pc, #696]	; (8000ad8 <OTM8009A_Init+0x330>)
 8000820:	2000      	movs	r0, #0
 8000822:	f001 f81d 	bl	8001860 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 8000826:	49ad      	ldr	r1, [pc, #692]	; (8000adc <OTM8009A_Init+0x334>)
 8000828:	2000      	movs	r0, #0
 800082a:	f001 f819 	bl	8001860 <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800082e:	499f      	ldr	r1, [pc, #636]	; (8000aac <OTM8009A_Init+0x304>)
 8000830:	2000      	movs	r0, #0
 8000832:	f001 f815 	bl	8001860 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 8000836:	49aa      	ldr	r1, [pc, #680]	; (8000ae0 <OTM8009A_Init+0x338>)
 8000838:	2000      	movs	r0, #0
 800083a:	f001 f811 	bl	8001860 <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 800083e:	49a9      	ldr	r1, [pc, #676]	; (8000ae4 <OTM8009A_Init+0x33c>)
 8000840:	2000      	movs	r0, #0
 8000842:	f001 f80d 	bl	8001860 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 8000846:	49a8      	ldr	r1, [pc, #672]	; (8000ae8 <OTM8009A_Init+0x340>)
 8000848:	2000      	movs	r0, #0
 800084a:	f001 f809 	bl	8001860 <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 800084e:	49a7      	ldr	r1, [pc, #668]	; (8000aec <OTM8009A_Init+0x344>)
 8000850:	2000      	movs	r0, #0
 8000852:	f001 f805 	bl	8001860 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 8000856:	49a6      	ldr	r1, [pc, #664]	; (8000af0 <OTM8009A_Init+0x348>)
 8000858:	2000      	movs	r0, #0
 800085a:	f001 f801 	bl	8001860 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 800085e:	49a5      	ldr	r1, [pc, #660]	; (8000af4 <OTM8009A_Init+0x34c>)
 8000860:	2000      	movs	r0, #0
 8000862:	f000 fffd 	bl	8001860 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 8000866:	49a4      	ldr	r1, [pc, #656]	; (8000af8 <OTM8009A_Init+0x350>)
 8000868:	2000      	movs	r0, #0
 800086a:	f000 fff9 	bl	8001860 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 800086e:	49a3      	ldr	r1, [pc, #652]	; (8000afc <OTM8009A_Init+0x354>)
 8000870:	2000      	movs	r0, #0
 8000872:	f000 fff5 	bl	8001860 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8000876:	4997      	ldr	r1, [pc, #604]	; (8000ad4 <OTM8009A_Init+0x32c>)
 8000878:	2000      	movs	r0, #0
 800087a:	f000 fff1 	bl	8001860 <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800087e:	498b      	ldr	r1, [pc, #556]	; (8000aac <OTM8009A_Init+0x304>)
 8000880:	2000      	movs	r0, #0
 8000882:	f000 ffed 	bl	8001860 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 8000886:	499e      	ldr	r1, [pc, #632]	; (8000b00 <OTM8009A_Init+0x358>)
 8000888:	2002      	movs	r0, #2
 800088a:	f000 ffe9 	bl	8001860 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 800088e:	499d      	ldr	r1, [pc, #628]	; (8000b04 <OTM8009A_Init+0x35c>)
 8000890:	2000      	movs	r0, #0
 8000892:	f000 ffe5 	bl	8001860 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 8000896:	499c      	ldr	r1, [pc, #624]	; (8000b08 <OTM8009A_Init+0x360>)
 8000898:	2000      	movs	r0, #0
 800089a:	f000 ffe1 	bl	8001860 <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 800089e:	499b      	ldr	r1, [pc, #620]	; (8000b0c <OTM8009A_Init+0x364>)
 80008a0:	2000      	movs	r0, #0
 80008a2:	f000 ffdd 	bl	8001860 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 80008a6:	499a      	ldr	r1, [pc, #616]	; (8000b10 <OTM8009A_Init+0x368>)
 80008a8:	2000      	movs	r0, #0
 80008aa:	f000 ffd9 	bl	8001860 <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 80008ae:	4999      	ldr	r1, [pc, #612]	; (8000b14 <OTM8009A_Init+0x36c>)
 80008b0:	2000      	movs	r0, #0
 80008b2:	f000 ffd5 	bl	8001860 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 80008b6:	4998      	ldr	r1, [pc, #608]	; (8000b18 <OTM8009A_Init+0x370>)
 80008b8:	2000      	movs	r0, #0
 80008ba:	f000 ffd1 	bl	8001860 <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80008be:	4989      	ldr	r1, [pc, #548]	; (8000ae4 <OTM8009A_Init+0x33c>)
 80008c0:	2000      	movs	r0, #0
 80008c2:	f000 ffcd 	bl	8001860 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 80008c6:	4995      	ldr	r1, [pc, #596]	; (8000b1c <OTM8009A_Init+0x374>)
 80008c8:	2000      	movs	r0, #0
 80008ca:	f000 ffc9 	bl	8001860 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 80008ce:	4987      	ldr	r1, [pc, #540]	; (8000aec <OTM8009A_Init+0x344>)
 80008d0:	2000      	movs	r0, #0
 80008d2:	f000 ffc5 	bl	8001860 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 80008d6:	4992      	ldr	r1, [pc, #584]	; (8000b20 <OTM8009A_Init+0x378>)
 80008d8:	2000      	movs	r0, #0
 80008da:	f000 ffc1 	bl	8001860 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 80008de:	4991      	ldr	r1, [pc, #580]	; (8000b24 <OTM8009A_Init+0x37c>)
 80008e0:	2000      	movs	r0, #0
 80008e2:	f000 ffbd 	bl	8001860 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 80008e6:	4990      	ldr	r1, [pc, #576]	; (8000b28 <OTM8009A_Init+0x380>)
 80008e8:	2002      	movs	r0, #2
 80008ea:	f000 ffb9 	bl	8001860 <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80008ee:	4971      	ldr	r1, [pc, #452]	; (8000ab4 <OTM8009A_Init+0x30c>)
 80008f0:	2000      	movs	r0, #0
 80008f2:	f000 ffb5 	bl	8001860 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 80008f6:	498d      	ldr	r1, [pc, #564]	; (8000b2c <OTM8009A_Init+0x384>)
 80008f8:	2006      	movs	r0, #6
 80008fa:	f000 ffb1 	bl	8001860 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80008fe:	498c      	ldr	r1, [pc, #560]	; (8000b30 <OTM8009A_Init+0x388>)
 8000900:	2000      	movs	r0, #0
 8000902:	f000 ffad 	bl	8001860 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 8000906:	498b      	ldr	r1, [pc, #556]	; (8000b34 <OTM8009A_Init+0x38c>)
 8000908:	200e      	movs	r0, #14
 800090a:	f000 ffa9 	bl	8001860 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 800090e:	498a      	ldr	r1, [pc, #552]	; (8000b38 <OTM8009A_Init+0x390>)
 8000910:	2000      	movs	r0, #0
 8000912:	f000 ffa5 	bl	8001860 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 8000916:	4989      	ldr	r1, [pc, #548]	; (8000b3c <OTM8009A_Init+0x394>)
 8000918:	200e      	movs	r0, #14
 800091a:	f000 ffa1 	bl	8001860 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 800091e:	4988      	ldr	r1, [pc, #544]	; (8000b40 <OTM8009A_Init+0x398>)
 8000920:	2000      	movs	r0, #0
 8000922:	f000 ff9d 	bl	8001860 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 8000926:	4987      	ldr	r1, [pc, #540]	; (8000b44 <OTM8009A_Init+0x39c>)
 8000928:	200a      	movs	r0, #10
 800092a:	f000 ff99 	bl	8001860 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 800092e:	4986      	ldr	r1, [pc, #536]	; (8000b48 <OTM8009A_Init+0x3a0>)
 8000930:	2000      	movs	r0, #0
 8000932:	f000 ff95 	bl	8001860 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 8000936:	4985      	ldr	r1, [pc, #532]	; (8000b4c <OTM8009A_Init+0x3a4>)
 8000938:	2000      	movs	r0, #0
 800093a:	f000 ff91 	bl	8001860 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800093e:	495d      	ldr	r1, [pc, #372]	; (8000ab4 <OTM8009A_Init+0x30c>)
 8000940:	2000      	movs	r0, #0
 8000942:	f000 ff8d 	bl	8001860 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 8000946:	4982      	ldr	r1, [pc, #520]	; (8000b50 <OTM8009A_Init+0x3a8>)
 8000948:	200a      	movs	r0, #10
 800094a:	f000 ff89 	bl	8001860 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 800094e:	4981      	ldr	r1, [pc, #516]	; (8000b54 <OTM8009A_Init+0x3ac>)
 8000950:	2000      	movs	r0, #0
 8000952:	f000 ff85 	bl	8001860 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 8000956:	4980      	ldr	r1, [pc, #512]	; (8000b58 <OTM8009A_Init+0x3b0>)
 8000958:	200f      	movs	r0, #15
 800095a:	f000 ff81 	bl	8001860 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 800095e:	4974      	ldr	r1, [pc, #464]	; (8000b30 <OTM8009A_Init+0x388>)
 8000960:	2000      	movs	r0, #0
 8000962:	f000 ff7d 	bl	8001860 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 8000966:	497d      	ldr	r1, [pc, #500]	; (8000b5c <OTM8009A_Init+0x3b4>)
 8000968:	200f      	movs	r0, #15
 800096a:	f000 ff79 	bl	8001860 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 800096e:	4972      	ldr	r1, [pc, #456]	; (8000b38 <OTM8009A_Init+0x390>)
 8000970:	2000      	movs	r0, #0
 8000972:	f000 ff75 	bl	8001860 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 8000976:	497a      	ldr	r1, [pc, #488]	; (8000b60 <OTM8009A_Init+0x3b8>)
 8000978:	200a      	movs	r0, #10
 800097a:	f000 ff71 	bl	8001860 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 800097e:	4970      	ldr	r1, [pc, #448]	; (8000b40 <OTM8009A_Init+0x398>)
 8000980:	2000      	movs	r0, #0
 8000982:	f000 ff6d 	bl	8001860 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 8000986:	4977      	ldr	r1, [pc, #476]	; (8000b64 <OTM8009A_Init+0x3bc>)
 8000988:	200f      	movs	r0, #15
 800098a:	f000 ff69 	bl	8001860 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 800098e:	496e      	ldr	r1, [pc, #440]	; (8000b48 <OTM8009A_Init+0x3a0>)
 8000990:	2000      	movs	r0, #0
 8000992:	f000 ff65 	bl	8001860 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 8000996:	4974      	ldr	r1, [pc, #464]	; (8000b68 <OTM8009A_Init+0x3c0>)
 8000998:	200f      	movs	r0, #15
 800099a:	f000 ff61 	bl	8001860 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 800099e:	4973      	ldr	r1, [pc, #460]	; (8000b6c <OTM8009A_Init+0x3c4>)
 80009a0:	2000      	movs	r0, #0
 80009a2:	f000 ff5d 	bl	8001860 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 80009a6:	4972      	ldr	r1, [pc, #456]	; (8000b70 <OTM8009A_Init+0x3c8>)
 80009a8:	200a      	movs	r0, #10
 80009aa:	f000 ff59 	bl	8001860 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 80009ae:	4971      	ldr	r1, [pc, #452]	; (8000b74 <OTM8009A_Init+0x3cc>)
 80009b0:	2000      	movs	r0, #0
 80009b2:	f000 ff55 	bl	8001860 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 80009b6:	4970      	ldr	r1, [pc, #448]	; (8000b78 <OTM8009A_Init+0x3d0>)
 80009b8:	200a      	movs	r0, #10
 80009ba:	f000 ff51 	bl	8001860 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80009be:	493d      	ldr	r1, [pc, #244]	; (8000ab4 <OTM8009A_Init+0x30c>)
 80009c0:	2000      	movs	r0, #0
 80009c2:	f000 ff4d 	bl	8001860 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 80009c6:	496d      	ldr	r1, [pc, #436]	; (8000b7c <OTM8009A_Init+0x3d4>)
 80009c8:	200a      	movs	r0, #10
 80009ca:	f000 ff49 	bl	8001860 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 80009ce:	4961      	ldr	r1, [pc, #388]	; (8000b54 <OTM8009A_Init+0x3ac>)
 80009d0:	2000      	movs	r0, #0
 80009d2:	f000 ff45 	bl	8001860 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 80009d6:	496a      	ldr	r1, [pc, #424]	; (8000b80 <OTM8009A_Init+0x3d8>)
 80009d8:	200f      	movs	r0, #15
 80009da:	f000 ff41 	bl	8001860 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80009de:	4954      	ldr	r1, [pc, #336]	; (8000b30 <OTM8009A_Init+0x388>)
 80009e0:	2000      	movs	r0, #0
 80009e2:	f000 ff3d 	bl	8001860 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 80009e6:	4967      	ldr	r1, [pc, #412]	; (8000b84 <OTM8009A_Init+0x3dc>)
 80009e8:	200f      	movs	r0, #15
 80009ea:	f000 ff39 	bl	8001860 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80009ee:	4952      	ldr	r1, [pc, #328]	; (8000b38 <OTM8009A_Init+0x390>)
 80009f0:	2000      	movs	r0, #0
 80009f2:	f000 ff35 	bl	8001860 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 80009f6:	4964      	ldr	r1, [pc, #400]	; (8000b88 <OTM8009A_Init+0x3e0>)
 80009f8:	200a      	movs	r0, #10
 80009fa:	f000 ff31 	bl	8001860 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80009fe:	4950      	ldr	r1, [pc, #320]	; (8000b40 <OTM8009A_Init+0x398>)
 8000a00:	2000      	movs	r0, #0
 8000a02:	f000 ff2d 	bl	8001860 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 8000a06:	4961      	ldr	r1, [pc, #388]	; (8000b8c <OTM8009A_Init+0x3e4>)
 8000a08:	200f      	movs	r0, #15
 8000a0a:	f000 ff29 	bl	8001860 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8000a0e:	494e      	ldr	r1, [pc, #312]	; (8000b48 <OTM8009A_Init+0x3a0>)
 8000a10:	2000      	movs	r0, #0
 8000a12:	f000 ff25 	bl	8001860 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 8000a16:	495e      	ldr	r1, [pc, #376]	; (8000b90 <OTM8009A_Init+0x3e8>)
 8000a18:	200f      	movs	r0, #15
 8000a1a:	f000 ff21 	bl	8001860 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8000a1e:	4931      	ldr	r1, [pc, #196]	; (8000ae4 <OTM8009A_Init+0x33c>)
 8000a20:	2000      	movs	r0, #0
 8000a22:	f000 ff1d 	bl	8001860 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 8000a26:	495b      	ldr	r1, [pc, #364]	; (8000b94 <OTM8009A_Init+0x3ec>)
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f000 ff19 	bl	8001860 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 8000a2e:	495a      	ldr	r1, [pc, #360]	; (8000b98 <OTM8009A_Init+0x3f0>)
 8000a30:	2000      	movs	r0, #0
 8000a32:	f000 ff15 	bl	8001860 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 8000a36:	4959      	ldr	r1, [pc, #356]	; (8000b9c <OTM8009A_Init+0x3f4>)
 8000a38:	2000      	movs	r0, #0
 8000a3a:	f000 ff11 	bl	8001860 <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 8000a3e:	4958      	ldr	r1, [pc, #352]	; (8000ba0 <OTM8009A_Init+0x3f8>)
 8000a40:	2000      	movs	r0, #0
 8000a42:	f000 ff0d 	bl	8001860 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 8000a46:	4957      	ldr	r1, [pc, #348]	; (8000ba4 <OTM8009A_Init+0x3fc>)
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f000 ff09 	bl	8001860 <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000a4e:	4917      	ldr	r1, [pc, #92]	; (8000aac <OTM8009A_Init+0x304>)
 8000a50:	2000      	movs	r0, #0
 8000a52:	f000 ff05 	bl	8001860 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 8000a56:	4954      	ldr	r1, [pc, #336]	; (8000ba8 <OTM8009A_Init+0x400>)
 8000a58:	2003      	movs	r0, #3
 8000a5a:	f000 ff01 	bl	8001860 <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000a5e:	4913      	ldr	r1, [pc, #76]	; (8000aac <OTM8009A_Init+0x304>)
 8000a60:	2000      	movs	r0, #0
 8000a62:	f000 fefd 	bl	8001860 <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000a66:	4911      	ldr	r1, [pc, #68]	; (8000aac <OTM8009A_Init+0x304>)
 8000a68:	2000      	movs	r0, #0
 8000a6a:	f000 fef9 	bl	8001860 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 8000a6e:	494f      	ldr	r1, [pc, #316]	; (8000bac <OTM8009A_Init+0x404>)
 8000a70:	2010      	movs	r0, #16
 8000a72:	f000 fef5 	bl	8001860 <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000a76:	490d      	ldr	r1, [pc, #52]	; (8000aac <OTM8009A_Init+0x304>)
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f000 fef1 	bl	8001860 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 8000a7e:	494c      	ldr	r1, [pc, #304]	; (8000bb0 <OTM8009A_Init+0x408>)
 8000a80:	2010      	movs	r0, #16
 8000a82:	f000 feed 	bl	8001860 <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 8000a86:	494b      	ldr	r1, [pc, #300]	; (8000bb4 <OTM8009A_Init+0x40c>)
 8000a88:	2000      	movs	r0, #0
 8000a8a:	f000 fee9 	bl	8001860 <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 8000a8e:	2078      	movs	r0, #120	; 0x78
 8000a90:	f000 fb08 	bl	80010a4 <OTM8009A_IO_Delay>

  switch(ColorCoding)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	f000 8090 	beq.w	8000bbc <OTM8009A_Init+0x414>
 8000a9c:	2b02      	cmp	r3, #2
 8000a9e:	d000      	beq.n	8000aa2 <OTM8009A_Init+0x2fa>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
    break;
  default :
    break;
 8000aa0:	e091      	b.n	8000bc6 <OTM8009A_Init+0x41e>
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 8000aa2:	4945      	ldr	r1, [pc, #276]	; (8000bb8 <OTM8009A_Init+0x410>)
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	f000 fedb 	bl	8001860 <DSI_IO_WriteCmd>
    break;
 8000aaa:	e08c      	b.n	8000bc6 <OTM8009A_Init+0x41e>
 8000aac:	08008b70 	.word	0x08008b70
 8000ab0:	08008a28 	.word	0x08008a28
 8000ab4:	08008b74 	.word	0x08008b74
 8000ab8:	08008a2c 	.word	0x08008a2c
 8000abc:	08008b78 	.word	0x08008b78
 8000ac0:	08008b7c 	.word	0x08008b7c
 8000ac4:	08008b80 	.word	0x08008b80
 8000ac8:	08008b84 	.word	0x08008b84
 8000acc:	08008b88 	.word	0x08008b88
 8000ad0:	08008b8c 	.word	0x08008b8c
 8000ad4:	08008b90 	.word	0x08008b90
 8000ad8:	08008b94 	.word	0x08008b94
 8000adc:	08008b98 	.word	0x08008b98
 8000ae0:	08008b9c 	.word	0x08008b9c
 8000ae4:	08008ba0 	.word	0x08008ba0
 8000ae8:	08008ba4 	.word	0x08008ba4
 8000aec:	08008ba8 	.word	0x08008ba8
 8000af0:	08008bac 	.word	0x08008bac
 8000af4:	08008bb0 	.word	0x08008bb0
 8000af8:	08008bb4 	.word	0x08008bb4
 8000afc:	08008bb8 	.word	0x08008bb8
 8000b00:	08008a58 	.word	0x08008a58
 8000b04:	08008bbc 	.word	0x08008bbc
 8000b08:	08008bc0 	.word	0x08008bc0
 8000b0c:	08008bc4 	.word	0x08008bc4
 8000b10:	08008bc8 	.word	0x08008bc8
 8000b14:	08008bcc 	.word	0x08008bcc
 8000b18:	08008bd0 	.word	0x08008bd0
 8000b1c:	08008bd4 	.word	0x08008bd4
 8000b20:	08008bd8 	.word	0x08008bd8
 8000b24:	08008bdc 	.word	0x08008bdc
 8000b28:	08008a5c 	.word	0x08008a5c
 8000b2c:	08008a60 	.word	0x08008a60
 8000b30:	08008be0 	.word	0x08008be0
 8000b34:	08008a68 	.word	0x08008a68
 8000b38:	08008be4 	.word	0x08008be4
 8000b3c:	08008a78 	.word	0x08008a78
 8000b40:	08008be8 	.word	0x08008be8
 8000b44:	08008a88 	.word	0x08008a88
 8000b48:	08008bec 	.word	0x08008bec
 8000b4c:	08008c24 	.word	0x08008c24
 8000b50:	08008a94 	.word	0x08008a94
 8000b54:	08008bf0 	.word	0x08008bf0
 8000b58:	08008aa0 	.word	0x08008aa0
 8000b5c:	08008ab0 	.word	0x08008ab0
 8000b60:	08008ac0 	.word	0x08008ac0
 8000b64:	08008acc 	.word	0x08008acc
 8000b68:	08008adc 	.word	0x08008adc
 8000b6c:	08008bf4 	.word	0x08008bf4
 8000b70:	08008aec 	.word	0x08008aec
 8000b74:	08008bf8 	.word	0x08008bf8
 8000b78:	08008af8 	.word	0x08008af8
 8000b7c:	08008b04 	.word	0x08008b04
 8000b80:	08008b10 	.word	0x08008b10
 8000b84:	08008b20 	.word	0x08008b20
 8000b88:	08008b30 	.word	0x08008b30
 8000b8c:	08008b3c 	.word	0x08008b3c
 8000b90:	08008b4c 	.word	0x08008b4c
 8000b94:	08008c28 	.word	0x08008c28
 8000b98:	08008c2c 	.word	0x08008c2c
 8000b9c:	08008c30 	.word	0x08008c30
 8000ba0:	08008c34 	.word	0x08008c34
 8000ba4:	08008c38 	.word	0x08008c38
 8000ba8:	08008b5c 	.word	0x08008b5c
 8000bac:	08008a30 	.word	0x08008a30
 8000bb0:	08008a44 	.word	0x08008a44
 8000bb4:	08008bfc 	.word	0x08008bfc
 8000bb8:	08008c00 	.word	0x08008c00
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8000bbc:	491a      	ldr	r1, [pc, #104]	; (8000c28 <OTM8009A_Init+0x480>)
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	f000 fe4e 	bl	8001860 <DSI_IO_WriteCmd>
    break;
 8000bc4:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d10b      	bne.n	8000be4 <OTM8009A_Init+0x43c>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8000bcc:	4917      	ldr	r1, [pc, #92]	; (8000c2c <OTM8009A_Init+0x484>)
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f000 fe46 	bl	8001860 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 8000bd4:	4916      	ldr	r1, [pc, #88]	; (8000c30 <OTM8009A_Init+0x488>)
 8000bd6:	2004      	movs	r0, #4
 8000bd8:	f000 fe42 	bl	8001860 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8000bdc:	4915      	ldr	r1, [pc, #84]	; (8000c34 <OTM8009A_Init+0x48c>)
 8000bde:	2004      	movs	r0, #4
 8000be0:	f000 fe3e 	bl	8001860 <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 8000be4:	4914      	ldr	r1, [pc, #80]	; (8000c38 <OTM8009A_Init+0x490>)
 8000be6:	2000      	movs	r0, #0
 8000be8:	f000 fe3a 	bl	8001860 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8000bec:	4913      	ldr	r1, [pc, #76]	; (8000c3c <OTM8009A_Init+0x494>)
 8000bee:	2000      	movs	r0, #0
 8000bf0:	f000 fe36 	bl	8001860 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 8000bf4:	4912      	ldr	r1, [pc, #72]	; (8000c40 <OTM8009A_Init+0x498>)
 8000bf6:	2000      	movs	r0, #0
 8000bf8:	f000 fe32 	bl	8001860 <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8000bfc:	4911      	ldr	r1, [pc, #68]	; (8000c44 <OTM8009A_Init+0x49c>)
 8000bfe:	2000      	movs	r0, #0
 8000c00:	f000 fe2e 	bl	8001860 <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 8000c04:	4910      	ldr	r1, [pc, #64]	; (8000c48 <OTM8009A_Init+0x4a0>)
 8000c06:	2000      	movs	r0, #0
 8000c08:	f000 fe2a 	bl	8001860 <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000c0c:	490f      	ldr	r1, [pc, #60]	; (8000c4c <OTM8009A_Init+0x4a4>)
 8000c0e:	2000      	movs	r0, #0
 8000c10:	f000 fe26 	bl	8001860 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 8000c14:	490e      	ldr	r1, [pc, #56]	; (8000c50 <OTM8009A_Init+0x4a8>)
 8000c16:	2000      	movs	r0, #0
 8000c18:	f000 fe22 	bl	8001860 <DSI_IO_WriteCmd>

  return 0;
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	08008c04 	.word	0x08008c04
 8000c2c:	08008c08 	.word	0x08008c08
 8000c30:	08008b60 	.word	0x08008b60
 8000c34:	08008b68 	.word	0x08008b68
 8000c38:	08008c0c 	.word	0x08008c0c
 8000c3c:	08008c10 	.word	0x08008c10
 8000c40:	08008c14 	.word	0x08008c14
 8000c44:	08008c18 	.word	0x08008c18
 8000c48:	08008c1c 	.word	0x08008c1c
 8000c4c:	08008b70 	.word	0x08008b70
 8000c50:	08008c20 	.word	0x08008c20

08000c54 <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b088      	sub	sp, #32
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE();
 8000c5e:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <BSP_LED_Init+0x54>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a11      	ldr	r2, [pc, #68]	; (8000ca8 <BSP_LED_Init+0x54>)
 8000c64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <BSP_LED_Init+0x54>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c72:	60bb      	str	r3, [r7, #8]
 8000c74:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	4a0c      	ldr	r2, [pc, #48]	; (8000cac <BSP_LED_Init+0x58>)
 8000c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c7e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000c80:	2301      	movs	r3, #1
 8000c82:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 8000c84:	2301      	movs	r3, #1
 8000c86:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8000c88:	2303      	movs	r3, #3
 8000c8a:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	4a08      	ldr	r2, [pc, #32]	; (8000cb0 <BSP_LED_Init+0x5c>)
 8000c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c94:	f107 020c 	add.w	r2, r7, #12
 8000c98:	4611      	mov	r1, r2
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f003 fe34 	bl	8004908 <HAL_GPIO_Init>

}
 8000ca0:	bf00      	nop
 8000ca2:	3720      	adds	r7, #32
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	20000028 	.word	0x20000028
 8000cb0:	20000030 	.word	0x20000030

08000cb4 <BSP_LED_On>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	4a07      	ldr	r2, [pc, #28]	; (8000ce0 <BSP_LED_On+0x2c>)
 8000cc2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	4a06      	ldr	r2, [pc, #24]	; (8000ce4 <BSP_LED_On+0x30>)
 8000cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	f004 f8cc 	bl	8004e70 <HAL_GPIO_WritePin>
}
 8000cd8:	bf00      	nop
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20000030 	.word	0x20000030
 8000ce4:	20000028 	.word	0x20000028

08000ce8 <BSP_LED_Toggle>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	4a07      	ldr	r2, [pc, #28]	; (8000d14 <BSP_LED_Toggle+0x2c>)
 8000cf6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	4a06      	ldr	r2, [pc, #24]	; (8000d18 <BSP_LED_Toggle+0x30>)
 8000cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	4619      	mov	r1, r3
 8000d06:	f004 f8cc 	bl	8004ea2 <HAL_GPIO_TogglePin>
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000030 	.word	0x20000030
 8000d18:	20000028 	.word	0x20000028

08000d1c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08c      	sub	sp, #48	; 0x30
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4a58      	ldr	r2, [pc, #352]	; (8000e88 <I2Cx_MspInit+0x16c>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d15b      	bne.n	8000de4 <I2Cx_MspInit+0xc8>
  {
  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_AUDIO_I2Cx_SCL_GPIO_CLK_ENABLE();
 8000d2c:	4b57      	ldr	r3, [pc, #348]	; (8000e8c <I2Cx_MspInit+0x170>)
 8000d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d30:	4a56      	ldr	r2, [pc, #344]	; (8000e8c <I2Cx_MspInit+0x170>)
 8000d32:	f043 0308 	orr.w	r3, r3, #8
 8000d36:	6313      	str	r3, [r2, #48]	; 0x30
 8000d38:	4b54      	ldr	r3, [pc, #336]	; (8000e8c <I2Cx_MspInit+0x170>)
 8000d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3c:	f003 0308 	and.w	r3, r3, #8
 8000d40:	61bb      	str	r3, [r7, #24]
 8000d42:	69bb      	ldr	r3, [r7, #24]
  DISCOVERY_AUDIO_I2Cx_SDA_GPIO_CLK_ENABLE();
 8000d44:	4b51      	ldr	r3, [pc, #324]	; (8000e8c <I2Cx_MspInit+0x170>)
 8000d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d48:	4a50      	ldr	r2, [pc, #320]	; (8000e8c <I2Cx_MspInit+0x170>)
 8000d4a:	f043 0302 	orr.w	r3, r3, #2
 8000d4e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d50:	4b4e      	ldr	r3, [pc, #312]	; (8000e8c <I2Cx_MspInit+0x170>)
 8000d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d54:	f003 0302 	and.w	r3, r3, #2
 8000d58:	617b      	str	r3, [r7, #20]
 8000d5a:	697b      	ldr	r3, [r7, #20]
  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8000d5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d60:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000d62:	2312      	movs	r3, #18
 8000d64:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_AF;
 8000d6e:	2304      	movs	r3, #4
 8000d70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_GPIO_PORT, &gpio_init_structure);
 8000d72:	f107 031c 	add.w	r3, r7, #28
 8000d76:	4619      	mov	r1, r3
 8000d78:	4845      	ldr	r0, [pc, #276]	; (8000e90 <I2Cx_MspInit+0x174>)
 8000d7a:	f003 fdc5 	bl	8004908 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8000d7e:	2380      	movs	r3, #128	; 0x80
 8000d80:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SDA_AF;
 8000d82:	230b      	movs	r3, #11
 8000d84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SDA_GPIO_PORT, &gpio_init_structure);
 8000d86:	f107 031c 	add.w	r3, r7, #28
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4841      	ldr	r0, [pc, #260]	; (8000e94 <I2Cx_MspInit+0x178>)
 8000d8e:	f003 fdbb 	bl	8004908 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8000d92:	4b3e      	ldr	r3, [pc, #248]	; (8000e8c <I2Cx_MspInit+0x170>)
 8000d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d96:	4a3d      	ldr	r2, [pc, #244]	; (8000e8c <I2Cx_MspInit+0x170>)
 8000d98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d9e:	4b3b      	ldr	r3, [pc, #236]	; (8000e8c <I2Cx_MspInit+0x170>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000da6:	613b      	str	r3, [r7, #16]
 8000da8:	693b      	ldr	r3, [r7, #16]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8000daa:	4b38      	ldr	r3, [pc, #224]	; (8000e8c <I2Cx_MspInit+0x170>)
 8000dac:	6a1b      	ldr	r3, [r3, #32]
 8000dae:	4a37      	ldr	r2, [pc, #220]	; (8000e8c <I2Cx_MspInit+0x170>)
 8000db0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000db4:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8000db6:	4b35      	ldr	r3, [pc, #212]	; (8000e8c <I2Cx_MspInit+0x170>)
 8000db8:	6a1b      	ldr	r3, [r3, #32]
 8000dba:	4a34      	ldr	r2, [pc, #208]	; (8000e8c <I2Cx_MspInit+0x170>)
 8000dbc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000dc0:	6213      	str	r3, [r2, #32]

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	210f      	movs	r1, #15
 8000dc6:	205f      	movs	r0, #95	; 0x5f
 8000dc8:	f002 f893 	bl	8002ef2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8000dcc:	205f      	movs	r0, #95	; 0x5f
 8000dce:	f002 f8ac 	bl	8002f2a <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	210f      	movs	r1, #15
 8000dd6:	2060      	movs	r0, #96	; 0x60
 8000dd8:	f002 f88b 	bl	8002ef2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);    
 8000ddc:	2060      	movs	r0, #96	; 0x60
 8000dde:	f002 f8a4 	bl	8002f2a <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8000de2:	e04d      	b.n	8000e80 <I2Cx_MspInit+0x164>
  DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000de4:	4b29      	ldr	r3, [pc, #164]	; (8000e8c <I2Cx_MspInit+0x170>)
 8000de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de8:	4a28      	ldr	r2, [pc, #160]	; (8000e8c <I2Cx_MspInit+0x170>)
 8000dea:	f043 0302 	orr.w	r3, r3, #2
 8000dee:	6313      	str	r3, [r2, #48]	; 0x30
 8000df0:	4b26      	ldr	r3, [pc, #152]	; (8000e8c <I2Cx_MspInit+0x170>)
 8000df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df4:	f003 0302 	and.w	r3, r3, #2
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8000dfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e00:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000e02:	2312      	movs	r3, #18
 8000e04:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8000e0e:	2304      	movs	r3, #4
 8000e10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000e12:	f107 031c 	add.w	r3, r7, #28
 8000e16:	4619      	mov	r1, r3
 8000e18:	481e      	ldr	r0, [pc, #120]	; (8000e94 <I2Cx_MspInit+0x178>)
 8000e1a:	f003 fd75 	bl	8004908 <HAL_GPIO_Init>
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8000e1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000e24:	f107 031c 	add.w	r3, r7, #28
 8000e28:	4619      	mov	r1, r3
 8000e2a:	481a      	ldr	r0, [pc, #104]	; (8000e94 <I2Cx_MspInit+0x178>)
 8000e2c:	f003 fd6c 	bl	8004908 <HAL_GPIO_Init>
  DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8000e30:	4b16      	ldr	r3, [pc, #88]	; (8000e8c <I2Cx_MspInit+0x170>)
 8000e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e34:	4a15      	ldr	r2, [pc, #84]	; (8000e8c <I2Cx_MspInit+0x170>)
 8000e36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e3c:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <I2Cx_MspInit+0x170>)
 8000e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e44:	60bb      	str	r3, [r7, #8]
 8000e46:	68bb      	ldr	r3, [r7, #8]
  DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8000e48:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <I2Cx_MspInit+0x170>)
 8000e4a:	6a1b      	ldr	r3, [r3, #32]
 8000e4c:	4a0f      	ldr	r2, [pc, #60]	; (8000e8c <I2Cx_MspInit+0x170>)
 8000e4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e52:	6213      	str	r3, [r2, #32]
  DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8000e54:	4b0d      	ldr	r3, [pc, #52]	; (8000e8c <I2Cx_MspInit+0x170>)
 8000e56:	6a1b      	ldr	r3, [r3, #32]
 8000e58:	4a0c      	ldr	r2, [pc, #48]	; (8000e8c <I2Cx_MspInit+0x170>)
 8000e5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000e5e:	6213      	str	r3, [r2, #32]
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8000e60:	2200      	movs	r2, #0
 8000e62:	210f      	movs	r1, #15
 8000e64:	201f      	movs	r0, #31
 8000e66:	f002 f844 	bl	8002ef2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8000e6a:	201f      	movs	r0, #31
 8000e6c:	f002 f85d 	bl	8002f2a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8000e70:	2200      	movs	r2, #0
 8000e72:	210f      	movs	r1, #15
 8000e74:	2020      	movs	r0, #32
 8000e76:	f002 f83c 	bl	8002ef2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8000e7a:	2020      	movs	r0, #32
 8000e7c:	f002 f855 	bl	8002f2a <HAL_NVIC_EnableIRQ>
}
 8000e80:	bf00      	nop
 8000e82:	3730      	adds	r7, #48	; 0x30
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	2000007c 	.word	0x2000007c
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	40020c00 	.word	0x40020c00
 8000e94:	40020400 	.word	0x40020400

08000e98 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f004 fb33 	bl	800550c <HAL_I2C_GetState>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d125      	bne.n	8000ef8 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4a14      	ldr	r2, [pc, #80]	; (8000f00 <I2Cx_Init+0x68>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d103      	bne.n	8000ebc <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4a13      	ldr	r2, [pc, #76]	; (8000f04 <I2Cx_Init+0x6c>)
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	e002      	b.n	8000ec2 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4a12      	ldr	r2, [pc, #72]	; (8000f08 <I2Cx_Init+0x70>)
 8000ec0:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a11      	ldr	r2, [pc, #68]	; (8000f0c <I2Cx_Init+0x74>)
 8000ec6:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2200      	movs	r2, #0
 8000ede:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f7ff ff15 	bl	8000d1c <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f004 f808 	bl	8004f08 <HAL_I2C_Init>
  }
}
 8000ef8:	bf00      	nop
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	2000007c 	.word	0x2000007c
 8000f04:	40006000 	.word	0x40006000
 8000f08:	40005400 	.word	0x40005400
 8000f0c:	40912732 	.word	0x40912732

08000f10 <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08a      	sub	sp, #40	; 0x28
 8000f14:	af04      	add	r7, sp, #16
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	4608      	mov	r0, r1
 8000f1a:	4611      	mov	r1, r2
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	4603      	mov	r3, r0
 8000f20:	72fb      	strb	r3, [r7, #11]
 8000f22:	460b      	mov	r3, r1
 8000f24:	813b      	strh	r3, [r7, #8]
 8000f26:	4613      	mov	r3, r2
 8000f28:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000f2e:	7afb      	ldrb	r3, [r7, #11]
 8000f30:	b299      	uxth	r1, r3
 8000f32:	88f8      	ldrh	r0, [r7, #6]
 8000f34:	893a      	ldrh	r2, [r7, #8]
 8000f36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f3a:	9302      	str	r3, [sp, #8]
 8000f3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f3e:	9301      	str	r3, [sp, #4]
 8000f40:	6a3b      	ldr	r3, [r7, #32]
 8000f42:	9300      	str	r3, [sp, #0]
 8000f44:	4603      	mov	r3, r0
 8000f46:	68f8      	ldr	r0, [r7, #12]
 8000f48:	f004 f9c6 	bl	80052d8 <HAL_I2C_Mem_Read>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8000f50:	7dfb      	ldrb	r3, [r7, #23]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d004      	beq.n	8000f60 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8000f56:	7afb      	ldrb	r3, [r7, #11]
 8000f58:	4619      	mov	r1, r3
 8000f5a:	68f8      	ldr	r0, [r7, #12]
 8000f5c:	f000 f832 	bl	8000fc4 <I2Cx_Error>
  }
  return status;
 8000f60:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3718      	adds	r7, #24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b08a      	sub	sp, #40	; 0x28
 8000f6e:	af04      	add	r7, sp, #16
 8000f70:	60f8      	str	r0, [r7, #12]
 8000f72:	4608      	mov	r0, r1
 8000f74:	4611      	mov	r1, r2
 8000f76:	461a      	mov	r2, r3
 8000f78:	4603      	mov	r3, r0
 8000f7a:	72fb      	strb	r3, [r7, #11]
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	813b      	strh	r3, [r7, #8]
 8000f80:	4613      	mov	r3, r2
 8000f82:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000f84:	2300      	movs	r3, #0
 8000f86:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000f88:	7afb      	ldrb	r3, [r7, #11]
 8000f8a:	b299      	uxth	r1, r3
 8000f8c:	88f8      	ldrh	r0, [r7, #6]
 8000f8e:	893a      	ldrh	r2, [r7, #8]
 8000f90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f94:	9302      	str	r3, [sp, #8]
 8000f96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f98:	9301      	str	r3, [sp, #4]
 8000f9a:	6a3b      	ldr	r3, [r7, #32]
 8000f9c:	9300      	str	r3, [sp, #0]
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	68f8      	ldr	r0, [r7, #12]
 8000fa2:	f004 f885 	bl	80050b0 <HAL_I2C_Mem_Write>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8000faa:	7dfb      	ldrb	r3, [r7, #23]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d004      	beq.n	8000fba <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8000fb0:	7afb      	ldrb	r3, [r7, #11]
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	68f8      	ldr	r0, [r7, #12]
 8000fb6:	f000 f805 	bl	8000fc4 <I2Cx_Error>
  }
  return status;
 8000fba:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3718      	adds	r7, #24
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	460b      	mov	r3, r1
 8000fce:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f004 f829 	bl	8005028 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f7ff ff5e 	bl	8000e98 <I2Cx_Init>
}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8000fe8:	4802      	ldr	r0, [pc, #8]	; (8000ff4 <TS_IO_Init+0x10>)
 8000fea:	f7ff ff55 	bl	8000e98 <I2Cx_Init>
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	2000007c 	.word	0x2000007c

08000ff8 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af02      	add	r7, sp, #8
 8000ffe:	4603      	mov	r3, r0
 8001000:	71fb      	strb	r3, [r7, #7]
 8001002:	460b      	mov	r3, r1
 8001004:	71bb      	strb	r3, [r7, #6]
 8001006:	4613      	mov	r3, r2
 8001008:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800100a:	79bb      	ldrb	r3, [r7, #6]
 800100c:	b29a      	uxth	r2, r3
 800100e:	79f9      	ldrb	r1, [r7, #7]
 8001010:	2301      	movs	r3, #1
 8001012:	9301      	str	r3, [sp, #4]
 8001014:	1d7b      	adds	r3, r7, #5
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	2301      	movs	r3, #1
 800101a:	4803      	ldr	r0, [pc, #12]	; (8001028 <TS_IO_Write+0x30>)
 800101c:	f7ff ffa5 	bl	8000f6a <I2Cx_WriteMultiple>
}
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	2000007c 	.word	0x2000007c

0800102c <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af02      	add	r7, sp, #8
 8001032:	4603      	mov	r3, r0
 8001034:	460a      	mov	r2, r1
 8001036:	71fb      	strb	r3, [r7, #7]
 8001038:	4613      	mov	r3, r2
 800103a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001040:	79bb      	ldrb	r3, [r7, #6]
 8001042:	b29a      	uxth	r2, r3
 8001044:	79f9      	ldrb	r1, [r7, #7]
 8001046:	2301      	movs	r3, #1
 8001048:	9301      	str	r3, [sp, #4]
 800104a:	f107 030f 	add.w	r3, r7, #15
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	2301      	movs	r3, #1
 8001052:	4804      	ldr	r0, [pc, #16]	; (8001064 <TS_IO_Read+0x38>)
 8001054:	f7ff ff5c 	bl	8000f10 <I2Cx_ReadMultiple>

  return read_value;
 8001058:	7bfb      	ldrb	r3, [r7, #15]
}
 800105a:	4618      	mov	r0, r3
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	2000007c 	.word	0x2000007c

08001068 <TS_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af02      	add	r7, sp, #8
 800106e:	603a      	str	r2, [r7, #0]
 8001070:	461a      	mov	r2, r3
 8001072:	4603      	mov	r3, r0
 8001074:	71fb      	strb	r3, [r7, #7]
 8001076:	460b      	mov	r3, r1
 8001078:	71bb      	strb	r3, [r7, #6]
 800107a:	4613      	mov	r3, r2
 800107c:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800107e:	79bb      	ldrb	r3, [r7, #6]
 8001080:	b29a      	uxth	r2, r3
 8001082:	79f9      	ldrb	r1, [r7, #7]
 8001084:	88bb      	ldrh	r3, [r7, #4]
 8001086:	9301      	str	r3, [sp, #4]
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	2301      	movs	r3, #1
 800108e:	4804      	ldr	r0, [pc, #16]	; (80010a0 <TS_IO_ReadMultiple+0x38>)
 8001090:	f7ff ff3e 	bl	8000f10 <I2Cx_ReadMultiple>
 8001094:	4603      	mov	r3, r0
 8001096:	b29b      	uxth	r3, r3
}
 8001098:	4618      	mov	r0, r3
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	2000007c 	.word	0x2000007c

080010a4 <OTM8009A_IO_Delay>:
/**
  * @brief  OTM8009A delay
  * @param  Delay: Delay in ms
  */
void OTM8009A_IO_Delay(uint32_t Delay)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f001 f97b 	bl	80023a8 <HAL_Delay>
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <BSP_LCD_Init>:
/**
  * @brief  Initializes the DSI LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 80010be:	2001      	movs	r0, #1
 80010c0:	f000 f804 	bl	80010cc <BSP_LCD_InitEx>
 80010c4:	4603      	mov	r3, r0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <BSP_LCD_InitEx>:
  *     - OTM8009A LCD Display IC Driver ititialization
  * @param  orientation: LCD orientation, can be LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(LCD_OrientationTypeDef orientation)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b090      	sub	sp, #64	; 0x40
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	71fb      	strb	r3, [r7, #7]
  DSI_PLLInitTypeDef dsiPllInit;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  uint32_t LcdClock  = 27429; /*!< LcdClk = 27429 kHz */
 80010d6:	f646 3325 	movw	r3, #27429	; 0x6b25
 80010da:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t read_id = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	877b      	strh	r3, [r7, #58]	; 0x3a

  uint32_t laneByteClk_kHz = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t                   HFP; /*!< Horizontal Front Porch time in units of lcdClk */
  uint32_t                   HACT; /*!< Horizontal Active time in units of lcdClk = imageSize X in pixels to display */

  /* Toggle Hardware Reset of the DSI LCD using
  * its XRES signal (active low) */
  BSP_LCD_Reset();
 80010e4:	f000 f936 	bl	8001354 <BSP_LCD_Reset>

  /* Check the connected monitor */
  read_id = LCD_IO_GetID();
 80010e8:	f000 fbe4 	bl	80018b4 <LCD_IO_GetID>
 80010ec:	4603      	mov	r3, r0
 80010ee:	877b      	strh	r3, [r7, #58]	; 0x3a
  else if(read_id != LCD_DSI_ID)
  {
    return LCD_ERROR;  
  }
#else
  if(read_id != LCD_DSI_ID)
 80010f0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80010f2:	2b11      	cmp	r3, #17
 80010f4:	d001      	beq.n	80010fa <BSP_LCD_InitEx+0x2e>
  {
    return LCD_ERROR;  
 80010f6:	2301      	movs	r3, #1
 80010f8:	e113      	b.n	8001322 <BSP_LCD_InitEx+0x256>
  * This will set IP blocks LTDC, DSI and DMA2D
  * - out of reset
  * - clocked
  * - NVIC IRQ related to IP blocks enabled
  */
  BSP_LCD_MspInit();
 80010fa:	f000 fbe3 	bl	80018c4 <BSP_LCD_MspInit>

/*************************DSI Initialization***********************************/  

  /* Base address of DSI Host/Wrapper registers to be set before calling De-Init */
  hdsi_discovery.Instance = DSI;
 80010fe:	4b8b      	ldr	r3, [pc, #556]	; (800132c <BSP_LCD_InitEx+0x260>)
 8001100:	4a8b      	ldr	r2, [pc, #556]	; (8001330 <BSP_LCD_InitEx+0x264>)
 8001102:	601a      	str	r2, [r3, #0]

  HAL_DSI_DeInit(&(hdsi_discovery));
 8001104:	4889      	ldr	r0, [pc, #548]	; (800132c <BSP_LCD_InitEx+0x260>)
 8001106:	f002 fcf1 	bl	8003aec <HAL_DSI_DeInit>

  dsiPllInit.PLLNDIV  = 100;
 800110a:	2364      	movs	r3, #100	; 0x64
 800110c:	60bb      	str	r3, [r7, #8]
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
 800110e:	2305      	movs	r3, #5
 8001110:	60fb      	str	r3, [r7, #12]
  dsiPllInit.PLLODF  = DSI_PLL_OUT_DIV1;
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
  laneByteClk_kHz = 62500; /* 500 MHz / 8 = 62.5 MHz = 62500 kHz */
 8001116:	f24f 4324 	movw	r3, #62500	; 0xf424
 800111a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set number of Lanes */
  hdsi_discovery.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 800111c:	4b83      	ldr	r3, [pc, #524]	; (800132c <BSP_LCD_InitEx+0x260>)
 800111e:	2201      	movs	r2, #1
 8001120:	60da      	str	r2, [r3, #12]

  /* TXEscapeCkdiv = f(LaneByteClk)/15.62 = 4 */
  hdsi_discovery.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 8001122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001124:	089b      	lsrs	r3, r3, #2
 8001126:	4a83      	ldr	r2, [pc, #524]	; (8001334 <BSP_LCD_InitEx+0x268>)
 8001128:	fba2 2303 	umull	r2, r3, r2, r3
 800112c:	0a9b      	lsrs	r3, r3, #10
 800112e:	4a7f      	ldr	r2, [pc, #508]	; (800132c <BSP_LCD_InitEx+0x260>)
 8001130:	6093      	str	r3, [r2, #8]

  HAL_DSI_Init(&(hdsi_discovery), &(dsiPllInit));
 8001132:	f107 0308 	add.w	r3, r7, #8
 8001136:	4619      	mov	r1, r3
 8001138:	487c      	ldr	r0, [pc, #496]	; (800132c <BSP_LCD_InitEx+0x260>)
 800113a:	f002 fbbd 	bl	80038b8 <HAL_DSI_Init>

  /* Timing parameters for all Video modes
  * Set Timing parameters of LTDC depending on its chosen orientation
  */
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d108      	bne.n	8001156 <BSP_LCD_InitEx+0x8a>
  {
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 8001144:	4b7c      	ldr	r3, [pc, #496]	; (8001338 <BSP_LCD_InitEx+0x26c>)
 8001146:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800114a:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 800114c:	4b7b      	ldr	r3, [pc, #492]	; (800133c <BSP_LCD_InitEx+0x270>)
 800114e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	e007      	b.n	8001166 <BSP_LCD_InitEx+0x9a>
  }
  else
  {
    /* lcd_orientation == LCD_ORIENTATION_LANDSCAPE */
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 8001156:	4b78      	ldr	r3, [pc, #480]	; (8001338 <BSP_LCD_InitEx+0x26c>)
 8001158:	f44f 7248 	mov.w	r2, #800	; 0x320
 800115c:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 800115e:	4b77      	ldr	r3, [pc, #476]	; (800133c <BSP_LCD_InitEx+0x270>)
 8001160:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001164:	601a      	str	r2, [r3, #0]
  }

  HACT = lcd_x_size;
 8001166:	4b74      	ldr	r3, [pc, #464]	; (8001338 <BSP_LCD_InitEx+0x26c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	633b      	str	r3, [r7, #48]	; 0x30
  VACT = lcd_y_size;
 800116c:	4b73      	ldr	r3, [pc, #460]	; (800133c <BSP_LCD_InitEx+0x270>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* The following values are same for portrait and landscape orientations */
  VSA  = OTM8009A_480X800_VSYNC;        /* 12  */
 8001172:	2301      	movs	r3, #1
 8001174:	62bb      	str	r3, [r7, #40]	; 0x28
  VBP  = OTM8009A_480X800_VBP;          /* 12  */
 8001176:	230f      	movs	r3, #15
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
  VFP  = OTM8009A_480X800_VFP;          /* 12  */
 800117a:	2310      	movs	r3, #16
 800117c:	623b      	str	r3, [r7, #32]
  HSA  = OTM8009A_480X800_HSYNC;        /* 63  */
 800117e:	2302      	movs	r3, #2
 8001180:	61fb      	str	r3, [r7, #28]
  HBP  = OTM8009A_480X800_HBP;          /* 120 */
 8001182:	2322      	movs	r3, #34	; 0x22
 8001184:	61bb      	str	r3, [r7, #24]
  HFP  = OTM8009A_480X800_HFP;          /* 120 */   
 8001186:	2322      	movs	r3, #34	; 0x22
 8001188:	617b      	str	r3, [r7, #20]

  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 800118a:	4b6d      	ldr	r3, [pc, #436]	; (8001340 <BSP_LCD_InitEx+0x274>)
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 8001190:	4b6b      	ldr	r3, [pc, #428]	; (8001340 <BSP_LCD_InitEx+0x274>)
 8001192:	2205      	movs	r2, #5
 8001194:	605a      	str	r2, [r3, #4]
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8001196:	4b6a      	ldr	r3, [pc, #424]	; (8001340 <BSP_LCD_InitEx+0x274>)
 8001198:	2200      	movs	r2, #0
 800119a:	621a      	str	r2, [r3, #32]
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 800119c:	4b68      	ldr	r3, [pc, #416]	; (8001340 <BSP_LCD_InitEx+0x274>)
 800119e:	2200      	movs	r2, #0
 80011a0:	61da      	str	r2, [r3, #28]
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 80011a2:	4b67      	ldr	r3, [pc, #412]	; (8001340 <BSP_LCD_InitEx+0x274>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	625a      	str	r2, [r3, #36]	; 0x24
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 80011a8:	4b65      	ldr	r3, [pc, #404]	; (8001340 <BSP_LCD_InitEx+0x274>)
 80011aa:	2202      	movs	r2, #2
 80011ac:	60da      	str	r2, [r3, #12]
  hdsivideo_handle.NullPacketSize = 0xFFF;
 80011ae:	4b64      	ldr	r3, [pc, #400]	; (8001340 <BSP_LCD_InitEx+0x274>)
 80011b0:	f640 72ff 	movw	r2, #4095	; 0xfff
 80011b4:	619a      	str	r2, [r3, #24]
  hdsivideo_handle.NumberOfChunks = 0;
 80011b6:	4b62      	ldr	r3, [pc, #392]	; (8001340 <BSP_LCD_InitEx+0x274>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	615a      	str	r2, [r3, #20]
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 80011bc:	4a60      	ldr	r2, [pc, #384]	; (8001340 <BSP_LCD_InitEx+0x274>)
 80011be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011c0:	6113      	str	r3, [r2, #16]
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz)/LcdClock;
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80011c6:	fb02 f203 	mul.w	r2, r2, r3
 80011ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d0:	4a5b      	ldr	r2, [pc, #364]	; (8001340 <BSP_LCD_InitEx+0x274>)
 80011d2:	6293      	str	r3, [r2, #40]	; 0x28
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz)/LcdClock;
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80011d8:	fb02 f203 	mul.w	r2, r2, r3
 80011dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011de:	fbb2 f3f3 	udiv	r3, r2, r3
 80011e2:	4a57      	ldr	r2, [pc, #348]	; (8001340 <BSP_LCD_InitEx+0x274>)
 80011e4:	62d3      	str	r3, [r2, #44]	; 0x2c
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz)/LcdClock; /* Value depending on display orientation choice portrait/landscape */
 80011e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	441a      	add	r2, r3
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	441a      	add	r2, r3
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	4413      	add	r3, r2
 80011f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80011f6:	fb02 f203 	mul.w	r2, r2, r3
 80011fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001200:	4a4f      	ldr	r2, [pc, #316]	; (8001340 <BSP_LCD_InitEx+0x274>)
 8001202:	6313      	str	r3, [r2, #48]	; 0x30
  hdsivideo_handle.VerticalSyncActive        = VSA;
 8001204:	4a4e      	ldr	r2, [pc, #312]	; (8001340 <BSP_LCD_InitEx+0x274>)
 8001206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001208:	6353      	str	r3, [r2, #52]	; 0x34
  hdsivideo_handle.VerticalBackPorch         = VBP;
 800120a:	4a4d      	ldr	r2, [pc, #308]	; (8001340 <BSP_LCD_InitEx+0x274>)
 800120c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120e:	6393      	str	r3, [r2, #56]	; 0x38
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 8001210:	4a4b      	ldr	r2, [pc, #300]	; (8001340 <BSP_LCD_InitEx+0x274>)
 8001212:	6a3b      	ldr	r3, [r7, #32]
 8001214:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 8001216:	4a4a      	ldr	r2, [pc, #296]	; (8001340 <BSP_LCD_InitEx+0x274>)
 8001218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800121a:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable or disable sending LP command while streaming is active in video mode */
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 800121c:	4b48      	ldr	r3, [pc, #288]	; (8001340 <BSP_LCD_InitEx+0x274>)
 800121e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001222:	645a      	str	r2, [r3, #68]	; 0x44

  /* Largest packet size possible to transmit in LP mode in VSA, VBP, VFP regions */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPLargestPacketSize = 16;
 8001224:	4b46      	ldr	r3, [pc, #280]	; (8001340 <BSP_LCD_InitEx+0x274>)
 8001226:	2210      	movs	r2, #16
 8001228:	649a      	str	r2, [r3, #72]	; 0x48

  /* Largest packet size possible to transmit in LP mode in HFP region during VACT period */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 800122a:	4b45      	ldr	r3, [pc, #276]	; (8001340 <BSP_LCD_InitEx+0x274>)
 800122c:	2200      	movs	r2, #0
 800122e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Specify for each region of the video frame, if the transmission of command in LP mode is allowed in this region */
  /* while streaming is active in video mode                                                                         */
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 8001230:	4b43      	ldr	r3, [pc, #268]	; (8001340 <BSP_LCD_InitEx+0x274>)
 8001232:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001236:	651a      	str	r2, [r3, #80]	; 0x50
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 8001238:	4b41      	ldr	r3, [pc, #260]	; (8001340 <BSP_LCD_InitEx+0x274>)
 800123a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800123e:	655a      	str	r2, [r3, #84]	; 0x54
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 8001240:	4b3f      	ldr	r3, [pc, #252]	; (8001340 <BSP_LCD_InitEx+0x274>)
 8001242:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001246:	659a      	str	r2, [r3, #88]	; 0x58
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 8001248:	4b3d      	ldr	r3, [pc, #244]	; (8001340 <BSP_LCD_InitEx+0x274>)
 800124a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800124e:	65da      	str	r2, [r3, #92]	; 0x5c
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 8001250:	4b3b      	ldr	r3, [pc, #236]	; (8001340 <BSP_LCD_InitEx+0x274>)
 8001252:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001256:	661a      	str	r2, [r3, #96]	; 0x60
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 8001258:	4b39      	ldr	r3, [pc, #228]	; (8001340 <BSP_LCD_InitEx+0x274>)
 800125a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800125e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure DSI Video mode timings with settings set above */
  HAL_DSI_ConfigVideoMode(&(hdsi_discovery), &(hdsivideo_handle));
 8001260:	4937      	ldr	r1, [pc, #220]	; (8001340 <BSP_LCD_InitEx+0x274>)
 8001262:	4832      	ldr	r0, [pc, #200]	; (800132c <BSP_LCD_InitEx+0x260>)
 8001264:	f002 fd9a 	bl	8003d9c <HAL_DSI_ConfigVideoMode>
  
  
/************************LTDC Initialization***********************************/  

  /* Timing Configuration */    
  hltdc_discovery.Init.HorizontalSync = (HSA - 1);
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	3b01      	subs	r3, #1
 800126c:	4a35      	ldr	r2, [pc, #212]	; (8001344 <BSP_LCD_InitEx+0x278>)
 800126e:	6153      	str	r3, [r2, #20]
  hltdc_discovery.Init.AccumulatedHBP = (HSA + HBP - 1);
 8001270:	69fa      	ldr	r2, [r7, #28]
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	4413      	add	r3, r2
 8001276:	3b01      	subs	r3, #1
 8001278:	4a32      	ldr	r2, [pc, #200]	; (8001344 <BSP_LCD_InitEx+0x278>)
 800127a:	61d3      	str	r3, [r2, #28]
  hltdc_discovery.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 800127c:	4b2e      	ldr	r3, [pc, #184]	; (8001338 <BSP_LCD_InitEx+0x26c>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	441a      	add	r2, r3
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	4413      	add	r3, r2
 8001288:	3b01      	subs	r3, #1
 800128a:	4a2e      	ldr	r2, [pc, #184]	; (8001344 <BSP_LCD_InitEx+0x278>)
 800128c:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc_discovery.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 800128e:	4b2a      	ldr	r3, [pc, #168]	; (8001338 <BSP_LCD_InitEx+0x26c>)
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	441a      	add	r2, r3
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	441a      	add	r2, r3
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	4413      	add	r3, r2
 800129e:	3b01      	subs	r3, #1
 80012a0:	4a28      	ldr	r2, [pc, #160]	; (8001344 <BSP_LCD_InitEx+0x278>)
 80012a2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Initialize the LCD pixel width and pixel height */
  hltdc_discovery.LayerCfg->ImageWidth  = lcd_x_size;
 80012a4:	4b24      	ldr	r3, [pc, #144]	; (8001338 <BSP_LCD_InitEx+0x26c>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a26      	ldr	r2, [pc, #152]	; (8001344 <BSP_LCD_InitEx+0x278>)
 80012aa:	6613      	str	r3, [r2, #96]	; 0x60
  hltdc_discovery.LayerCfg->ImageHeight = lcd_y_size;   
 80012ac:	4b23      	ldr	r3, [pc, #140]	; (800133c <BSP_LCD_InitEx+0x270>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a24      	ldr	r2, [pc, #144]	; (8001344 <BSP_LCD_InitEx+0x278>)
 80012b2:	6653      	str	r3, [r2, #100]	; 0x64
    * PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz 
    * PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 384 Mhz 
    * PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 384 MHz / 7 = 54.85 MHz 
    * LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_2 = 54.85 MHz / 2 = 27.429 MHz 
    */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80012b4:	4b24      	ldr	r3, [pc, #144]	; (8001348 <BSP_LCD_InitEx+0x27c>)
 80012b6:	2208      	movs	r2, #8
 80012b8:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80012ba:	4b23      	ldr	r3, [pc, #140]	; (8001348 <BSP_LCD_InitEx+0x27c>)
 80012bc:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80012c0:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 80012c2:	4b21      	ldr	r3, [pc, #132]	; (8001348 <BSP_LCD_InitEx+0x27c>)
 80012c4:	2207      	movs	r2, #7
 80012c6:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80012c8:	4b1f      	ldr	r3, [pc, #124]	; (8001348 <BSP_LCD_InitEx+0x27c>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80012ce:	481e      	ldr	r0, [pc, #120]	; (8001348 <BSP_LCD_InitEx+0x27c>)
 80012d0:	f005 fa9a 	bl	8006808 <HAL_RCCEx_PeriphCLKConfig>

  /* Background value */
  hltdc_discovery.Init.Backcolor.Blue = 0;
 80012d4:	4b1b      	ldr	r3, [pc, #108]	; (8001344 <BSP_LCD_InitEx+0x278>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc_discovery.Init.Backcolor.Green = 0;
 80012dc:	4b19      	ldr	r3, [pc, #100]	; (8001344 <BSP_LCD_InitEx+0x278>)
 80012de:	2200      	movs	r2, #0
 80012e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc_discovery.Init.Backcolor.Red = 0;
 80012e4:	4b17      	ldr	r3, [pc, #92]	; (8001344 <BSP_LCD_InitEx+0x278>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  hltdc_discovery.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80012ec:	4b15      	ldr	r3, [pc, #84]	; (8001344 <BSP_LCD_InitEx+0x278>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	611a      	str	r2, [r3, #16]
  hltdc_discovery.Instance = LTDC;
 80012f2:	4b14      	ldr	r3, [pc, #80]	; (8001344 <BSP_LCD_InitEx+0x278>)
 80012f4:	4a15      	ldr	r2, [pc, #84]	; (800134c <BSP_LCD_InitEx+0x280>)
 80012f6:	601a      	str	r2, [r3, #0]

  /* Get LTDC Configuration from DSI Configuration */
  HAL_LTDC_StructInitFromVideoConfig(&(hltdc_discovery), &(hdsivideo_handle));
 80012f8:	4911      	ldr	r1, [pc, #68]	; (8001340 <BSP_LCD_InitEx+0x274>)
 80012fa:	4812      	ldr	r0, [pc, #72]	; (8001344 <BSP_LCD_InitEx+0x278>)
 80012fc:	f004 fdd8 	bl	8005eb0 <HAL_LTDCEx_StructInitFromVideoConfig>

  /* Initialize the LTDC */  
  HAL_LTDC_Init(&hltdc_discovery);
 8001300:	4810      	ldr	r0, [pc, #64]	; (8001344 <BSP_LCD_InitEx+0x278>)
 8001302:	f004 fb2d 	bl	8005960 <HAL_LTDC_Init>

  /* Enable the DSI host and wrapper after the LTDC initialization
     To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
  HAL_DSI_Start(&hdsi_discovery);
 8001306:	4809      	ldr	r0, [pc, #36]	; (800132c <BSP_LCD_InitEx+0x260>)
 8001308:	f003 f9da 	bl	80046c0 <HAL_DSI_Start>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 800130c:	f000 fc5a 	bl	8001bc4 <BSP_SDRAM_Init>
#endif /* DATA_IN_ExtSDRAM */

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001310:	480f      	ldr	r0, [pc, #60]	; (8001350 <BSP_LCD_InitEx+0x284>)
 8001312:	f000 f901 	bl	8001518 <BSP_LCD_SetFont>
/***********************OTM8009A Initialization********************************/ 

  /* Initialize the OTM8009A LCD Display IC Driver (KoD LCD IC Driver)
  *  depending on configuration set in 'hdsivideo_handle'.
  */
  OTM8009A_Init(OTM8009A_FORMAT_RGB888, orientation);
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	4619      	mov	r1, r3
 800131a:	2000      	movs	r0, #0
 800131c:	f7ff fa44 	bl	80007a8 <OTM8009A_Init>

/***********************End OTM8009A Initialization****************************/ 

  return LCD_OK; 
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3740      	adds	r7, #64	; 0x40
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	2000038c 	.word	0x2000038c
 8001330:	40016c00 	.word	0x40016c00
 8001334:	43215e57 	.word	0x43215e57
 8001338:	20000040 	.word	0x20000040
 800133c:	20000044 	.word	0x20000044
 8001340:	200000c8 	.word	0x200000c8
 8001344:	200002e4 	.word	0x200002e4
 8001348:	20000150 	.word	0x20000150
 800134c:	40016800 	.word	0x40016800
 8001350:	20000038 	.word	0x20000038

08001354 <BSP_LCD_Reset>:
  * @brief  BSP LCD Reset
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and desactivating it later.
  */
void BSP_LCD_Reset(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800135a:	4b18      	ldr	r3, [pc, #96]	; (80013bc <BSP_LCD_Reset+0x68>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	4a17      	ldr	r2, [pc, #92]	; (80013bc <BSP_LCD_Reset+0x68>)
 8001360:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001364:	6313      	str	r3, [r2, #48]	; 0x30
 8001366:	4b15      	ldr	r3, [pc, #84]	; (80013bc <BSP_LCD_Reset+0x68>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800136e:	603b      	str	r3, [r7, #0]
 8001370:	683b      	ldr	r3, [r7, #0]

    /* Configure the GPIO on PJ15 */
    gpio_init_structure.Pin   = GPIO_PIN_15;
 8001372:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001376:	607b      	str	r3, [r7, #4]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001378:	2301      	movs	r3, #1
 800137a:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 800137c:	2301      	movs	r3, #1
 800137e:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001380:	2303      	movs	r3, #3
 8001382:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8001384:	1d3b      	adds	r3, r7, #4
 8001386:	4619      	mov	r1, r3
 8001388:	480d      	ldr	r0, [pc, #52]	; (80013c0 <BSP_LCD_Reset+0x6c>)
 800138a:	f003 fabd 	bl	8004908 <HAL_GPIO_Init>

    /* Activate XRES active low */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_RESET);
 800138e:	2200      	movs	r2, #0
 8001390:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001394:	480a      	ldr	r0, [pc, #40]	; (80013c0 <BSP_LCD_Reset+0x6c>)
 8001396:	f003 fd6b 	bl	8004e70 <HAL_GPIO_WritePin>

    HAL_Delay(20); /* wait 20 ms */
 800139a:	2014      	movs	r0, #20
 800139c:	f001 f804 	bl	80023a8 <HAL_Delay>

    /* Desactivate XRES */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_SET);
 80013a0:	2201      	movs	r2, #1
 80013a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013a6:	4806      	ldr	r0, [pc, #24]	; (80013c0 <BSP_LCD_Reset+0x6c>)
 80013a8:	f003 fd62 	bl	8004e70 <HAL_GPIO_WritePin>
    
    /* Wait for 10ms after releasing XRES before sending commands */
    HAL_Delay(10);
 80013ac:	200a      	movs	r0, #10
 80013ae:	f000 fffb 	bl	80023a8 <HAL_Delay>
}
 80013b2:	bf00      	nop
 80013b4:	3718      	adds	r7, #24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40023800 	.word	0x40023800
 80013c0:	40022400 	.word	0x40022400

080013c4 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  return (lcd_x_size);
 80013c8:	4b03      	ldr	r3, [pc, #12]	; (80013d8 <BSP_LCD_GetXSize+0x14>)
 80013ca:	681b      	ldr	r3, [r3, #0]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	20000040 	.word	0x20000040

080013dc <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  return (lcd_y_size);
 80013e0:	4b03      	ldr	r3, [pc, #12]	; (80013f0 <BSP_LCD_GetYSize+0x14>)
 80013e2:	681b      	ldr	r3, [r3, #0]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	20000044 	.word	0x20000044

080013f4 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b090      	sub	sp, #64	; 0x40
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	6039      	str	r1, [r7, #0]
 80013fe:	80fb      	strh	r3, [r7, #6]
    LCD_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 8001400:	2300      	movs	r3, #0
 8001402:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8001404:	f7ff ffde 	bl	80013c4 <BSP_LCD_GetXSize>
 8001408:	4603      	mov	r3, r0
 800140a:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8001410:	f7ff ffe4 	bl	80013dc <BSP_LCD_GetYSize>
 8001414:	4603      	mov	r3, r0
 8001416:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001418:	2300      	movs	r3, #0
 800141a:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8001420:	23ff      	movs	r3, #255	; 0xff
 8001422:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8001428:	2300      	movs	r3, #0
 800142a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8001434:	2300      	movs	r3, #0
 8001436:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800143a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800143e:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001440:	2307      	movs	r3, #7
 8001442:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8001444:	f7ff ffbe 	bl	80013c4 <BSP_LCD_GetXSize>
 8001448:	4603      	mov	r3, r0
 800144a:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 800144c:	f7ff ffc6 	bl	80013dc <BSP_LCD_GetYSize>
 8001450:	4603      	mov	r3, r0
 8001452:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hltdc_discovery, &Layercfg, LayerIndex); 
 8001454:	88fa      	ldrh	r2, [r7, #6]
 8001456:	f107 030c 	add.w	r3, r7, #12
 800145a:	4619      	mov	r1, r3
 800145c:	4812      	ldr	r0, [pc, #72]	; (80014a8 <BSP_LCD_LayerDefaultInit+0xb4>)
 800145e:	f004 fb4f 	bl	8005b00 <HAL_LTDC_ConfigLayer>
  
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8001462:	88fa      	ldrh	r2, [r7, #6]
 8001464:	4911      	ldr	r1, [pc, #68]	; (80014ac <BSP_LCD_LayerDefaultInit+0xb8>)
 8001466:	4613      	mov	r3, r2
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	4413      	add	r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	440b      	add	r3, r1
 8001470:	3304      	adds	r3, #4
 8001472:	f04f 32ff 	mov.w	r2, #4294967295
 8001476:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8001478:	88fa      	ldrh	r2, [r7, #6]
 800147a:	490c      	ldr	r1, [pc, #48]	; (80014ac <BSP_LCD_LayerDefaultInit+0xb8>)
 800147c:	4613      	mov	r3, r2
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	4413      	add	r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	440b      	add	r3, r1
 8001486:	3308      	adds	r3, #8
 8001488:	4a09      	ldr	r2, [pc, #36]	; (80014b0 <BSP_LCD_LayerDefaultInit+0xbc>)
 800148a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 800148c:	88fa      	ldrh	r2, [r7, #6]
 800148e:	4907      	ldr	r1, [pc, #28]	; (80014ac <BSP_LCD_LayerDefaultInit+0xb8>)
 8001490:	4613      	mov	r3, r2
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	4413      	add	r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	440b      	add	r3, r1
 800149a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800149e:	601a      	str	r2, [r3, #0]
}
 80014a0:	bf00      	nop
 80014a2:	3740      	adds	r7, #64	; 0x40
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	200002e4 	.word	0x200002e4
 80014ac:	20000138 	.word	0x20000138
 80014b0:	20000038 	.word	0x20000038

080014b4 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80014bc:	4b07      	ldr	r3, [pc, #28]	; (80014dc <BSP_LCD_SetTextColor+0x28>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	4907      	ldr	r1, [pc, #28]	; (80014e0 <BSP_LCD_SetTextColor+0x2c>)
 80014c2:	4613      	mov	r3, r2
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	4413      	add	r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	440b      	add	r3, r1
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	601a      	str	r2, [r3, #0]
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	20000134 	.word	0x20000134
 80014e0:	20000138 	.word	0x20000138

080014e4 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80014ec:	4b08      	ldr	r3, [pc, #32]	; (8001510 <BSP_LCD_SetBackColor+0x2c>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4908      	ldr	r1, [pc, #32]	; (8001514 <BSP_LCD_SetBackColor+0x30>)
 80014f2:	4613      	mov	r3, r2
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	4413      	add	r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	440b      	add	r3, r1
 80014fc:	3304      	adds	r3, #4
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	601a      	str	r2, [r3, #0]
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	20000134 	.word	0x20000134
 8001514:	20000138 	.word	0x20000138

08001518 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8001520:	4b08      	ldr	r3, [pc, #32]	; (8001544 <BSP_LCD_SetFont+0x2c>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	4908      	ldr	r1, [pc, #32]	; (8001548 <BSP_LCD_SetFont+0x30>)
 8001526:	4613      	mov	r3, r2
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	4413      	add	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	440b      	add	r3, r1
 8001530:	3308      	adds	r3, #8
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	601a      	str	r2, [r3, #0]
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	20000134 	.word	0x20000134
 8001548:	20000138 	.word	0x20000138

0800154c <BSP_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 800154c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800154e:	b085      	sub	sp, #20
 8001550:	af02      	add	r7, sp, #8
 8001552:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001554:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <BSP_LCD_Clear+0x48>)
 8001556:	681c      	ldr	r4, [r3, #0]
 8001558:	4b0e      	ldr	r3, [pc, #56]	; (8001594 <BSP_LCD_Clear+0x48>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a0e      	ldr	r2, [pc, #56]	; (8001598 <BSP_LCD_Clear+0x4c>)
 800155e:	2134      	movs	r1, #52	; 0x34
 8001560:	fb01 f303 	mul.w	r3, r1, r3
 8001564:	4413      	add	r3, r2
 8001566:	335c      	adds	r3, #92	; 0x5c
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	461d      	mov	r5, r3
 800156c:	f7ff ff2a 	bl	80013c4 <BSP_LCD_GetXSize>
 8001570:	4606      	mov	r6, r0
 8001572:	f7ff ff33 	bl	80013dc <BSP_LCD_GetYSize>
 8001576:	4602      	mov	r2, r0
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	9301      	str	r3, [sp, #4]
 800157c:	2300      	movs	r3, #0
 800157e:	9300      	str	r3, [sp, #0]
 8001580:	4613      	mov	r3, r2
 8001582:	4632      	mov	r2, r6
 8001584:	4629      	mov	r1, r5
 8001586:	4620      	mov	r0, r4
 8001588:	f000 fae4 	bl	8001b54 <LL_FillBuffer>
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001594:	20000134 	.word	0x20000134
 8001598:	200002e4 	.word	0x200002e4

0800159c <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800159c:	b590      	push	{r4, r7, lr}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	80fb      	strh	r3, [r7, #6]
 80015a6:	460b      	mov	r3, r1
 80015a8:	80bb      	strh	r3, [r7, #4]
 80015aa:	4613      	mov	r3, r2
 80015ac:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80015ae:	4b1b      	ldr	r3, [pc, #108]	; (800161c <BSP_LCD_DisplayChar+0x80>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	491b      	ldr	r1, [pc, #108]	; (8001620 <BSP_LCD_DisplayChar+0x84>)
 80015b4:	4613      	mov	r3, r2
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	4413      	add	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	440b      	add	r3, r1
 80015be:	3308      	adds	r3, #8
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	6819      	ldr	r1, [r3, #0]
 80015c4:	78fb      	ldrb	r3, [r7, #3]
 80015c6:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80015ca:	4b14      	ldr	r3, [pc, #80]	; (800161c <BSP_LCD_DisplayChar+0x80>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	4c14      	ldr	r4, [pc, #80]	; (8001620 <BSP_LCD_DisplayChar+0x84>)
 80015d0:	4613      	mov	r3, r2
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	4413      	add	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	4423      	add	r3, r4
 80015da:	3308      	adds	r3, #8
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80015e0:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80015e4:	4b0d      	ldr	r3, [pc, #52]	; (800161c <BSP_LCD_DisplayChar+0x80>)
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	4c0d      	ldr	r4, [pc, #52]	; (8001620 <BSP_LCD_DisplayChar+0x84>)
 80015ea:	4613      	mov	r3, r2
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	4413      	add	r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	4423      	add	r3, r4
 80015f4:	3308      	adds	r3, #8
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	889b      	ldrh	r3, [r3, #4]
 80015fa:	3307      	adds	r3, #7
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	da00      	bge.n	8001602 <BSP_LCD_DisplayChar+0x66>
 8001600:	3307      	adds	r3, #7
 8001602:	10db      	asrs	r3, r3, #3
 8001604:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001608:	18ca      	adds	r2, r1, r3
 800160a:	88b9      	ldrh	r1, [r7, #4]
 800160c:	88fb      	ldrh	r3, [r7, #6]
 800160e:	4618      	mov	r0, r3
 8001610:	f000 f9e8 	bl	80019e4 <DrawChar>
}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	bd90      	pop	{r4, r7, pc}
 800161c:	20000134 	.word	0x20000134
 8001620:	20000138 	.word	0x20000138

08001624 <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8001624:	b5b0      	push	{r4, r5, r7, lr}
 8001626:	b088      	sub	sp, #32
 8001628:	af00      	add	r7, sp, #0
 800162a:	60ba      	str	r2, [r7, #8]
 800162c:	461a      	mov	r2, r3
 800162e:	4603      	mov	r3, r0
 8001630:	81fb      	strh	r3, [r7, #14]
 8001632:	460b      	mov	r3, r1
 8001634:	81bb      	strh	r3, [r7, #12]
 8001636:	4613      	mov	r3, r2
 8001638:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 800163a:	2301      	movs	r3, #1
 800163c:	83fb      	strh	r3, [r7, #30]
 800163e:	2300      	movs	r3, #0
 8001640:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 8001642:	2300      	movs	r3, #0
 8001644:	61bb      	str	r3, [r7, #24]
 8001646:	2300      	movs	r3, #0
 8001648:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) size ++ ;
 800164e:	e002      	b.n	8001656 <BSP_LCD_DisplayStringAt+0x32>
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	3301      	adds	r3, #1
 8001654:	61bb      	str	r3, [r7, #24]
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	1c5a      	adds	r2, r3, #1
 800165a:	617a      	str	r2, [r7, #20]
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1f6      	bne.n	8001650 <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001662:	f7ff feaf 	bl	80013c4 <BSP_LCD_GetXSize>
 8001666:	4b4f      	ldr	r3, [pc, #316]	; (80017a4 <BSP_LCD_DisplayStringAt+0x180>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	494f      	ldr	r1, [pc, #316]	; (80017a8 <BSP_LCD_DisplayStringAt+0x184>)
 800166c:	4613      	mov	r3, r2
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	4413      	add	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	440b      	add	r3, r1
 8001676:	3308      	adds	r3, #8
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	889b      	ldrh	r3, [r3, #4]
 800167c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001680:	613b      	str	r3, [r7, #16]

  switch (Mode)
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	2b02      	cmp	r3, #2
 8001686:	d01c      	beq.n	80016c2 <BSP_LCD_DisplayStringAt+0x9e>
 8001688:	2b03      	cmp	r3, #3
 800168a:	d017      	beq.n	80016bc <BSP_LCD_DisplayStringAt+0x98>
 800168c:	2b01      	cmp	r3, #1
 800168e:	d12e      	bne.n	80016ee <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	1ad1      	subs	r1, r2, r3
 8001696:	4b43      	ldr	r3, [pc, #268]	; (80017a4 <BSP_LCD_DisplayStringAt+0x180>)
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	4843      	ldr	r0, [pc, #268]	; (80017a8 <BSP_LCD_DisplayStringAt+0x184>)
 800169c:	4613      	mov	r3, r2
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	4413      	add	r3, r2
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	4403      	add	r3, r0
 80016a6:	3308      	adds	r3, #8
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	889b      	ldrh	r3, [r3, #4]
 80016ac:	fb03 f301 	mul.w	r3, r3, r1
 80016b0:	085b      	lsrs	r3, r3, #1
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	89fb      	ldrh	r3, [r7, #14]
 80016b6:	4413      	add	r3, r2
 80016b8:	83fb      	strh	r3, [r7, #30]
      break;
 80016ba:	e01b      	b.n	80016f4 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 80016bc:	89fb      	ldrh	r3, [r7, #14]
 80016be:	83fb      	strh	r3, [r7, #30]
      break;
 80016c0:	e018      	b.n	80016f4 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	b299      	uxth	r1, r3
 80016ca:	4b36      	ldr	r3, [pc, #216]	; (80017a4 <BSP_LCD_DisplayStringAt+0x180>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	4836      	ldr	r0, [pc, #216]	; (80017a8 <BSP_LCD_DisplayStringAt+0x184>)
 80016d0:	4613      	mov	r3, r2
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	4413      	add	r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4403      	add	r3, r0
 80016da:	3308      	adds	r3, #8
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	889b      	ldrh	r3, [r3, #4]
 80016e0:	fb11 f303 	smulbb	r3, r1, r3
 80016e4:	b29a      	uxth	r2, r3
 80016e6:	89fb      	ldrh	r3, [r7, #14]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	83fb      	strh	r3, [r7, #30]
      break;
 80016ec:	e002      	b.n	80016f4 <BSP_LCD_DisplayStringAt+0xd0>
    }
  default:
    {
      refcolumn = Xpos;
 80016ee:	89fb      	ldrh	r3, [r7, #14]
 80016f0:	83fb      	strh	r3, [r7, #30]
      break;
 80016f2:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 80016f4:	8bfb      	ldrh	r3, [r7, #30]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d003      	beq.n	8001702 <BSP_LCD_DisplayStringAt+0xde>
 80016fa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	da1d      	bge.n	800173e <BSP_LCD_DisplayStringAt+0x11a>
  {
    refcolumn = 1;
 8001702:	2301      	movs	r3, #1
 8001704:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001706:	e01a      	b.n	800173e <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	781a      	ldrb	r2, [r3, #0]
 800170c:	89b9      	ldrh	r1, [r7, #12]
 800170e:	8bfb      	ldrh	r3, [r7, #30]
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff ff43 	bl	800159c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8001716:	4b23      	ldr	r3, [pc, #140]	; (80017a4 <BSP_LCD_DisplayStringAt+0x180>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	4923      	ldr	r1, [pc, #140]	; (80017a8 <BSP_LCD_DisplayStringAt+0x184>)
 800171c:	4613      	mov	r3, r2
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	4413      	add	r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	440b      	add	r3, r1
 8001726:	3308      	adds	r3, #8
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	889a      	ldrh	r2, [r3, #4]
 800172c:	8bfb      	ldrh	r3, [r7, #30]
 800172e:	4413      	add	r3, r2
 8001730:	83fb      	strh	r3, [r7, #30]

    /* Point on the next character */
    Text++;
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	3301      	adds	r3, #1
 8001736:	60bb      	str	r3, [r7, #8]
    i++;
 8001738:	8bbb      	ldrh	r3, [r7, #28]
 800173a:	3301      	adds	r3, #1
 800173c:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	bf14      	ite	ne
 8001746:	2301      	movne	r3, #1
 8001748:	2300      	moveq	r3, #0
 800174a:	b2dc      	uxtb	r4, r3
 800174c:	f7ff fe3a 	bl	80013c4 <BSP_LCD_GetXSize>
 8001750:	4605      	mov	r5, r0
 8001752:	8bb9      	ldrh	r1, [r7, #28]
 8001754:	4b13      	ldr	r3, [pc, #76]	; (80017a4 <BSP_LCD_DisplayStringAt+0x180>)
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	4813      	ldr	r0, [pc, #76]	; (80017a8 <BSP_LCD_DisplayStringAt+0x184>)
 800175a:	4613      	mov	r3, r2
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	4413      	add	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4403      	add	r3, r0
 8001764:	3308      	adds	r3, #8
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	889b      	ldrh	r3, [r3, #4]
 800176a:	fb03 f301 	mul.w	r3, r3, r1
 800176e:	1aeb      	subs	r3, r5, r3
 8001770:	b299      	uxth	r1, r3
 8001772:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <BSP_LCD_DisplayStringAt+0x180>)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	480c      	ldr	r0, [pc, #48]	; (80017a8 <BSP_LCD_DisplayStringAt+0x184>)
 8001778:	4613      	mov	r3, r2
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	4413      	add	r3, r2
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	4403      	add	r3, r0
 8001782:	3308      	adds	r3, #8
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	889b      	ldrh	r3, [r3, #4]
 8001788:	4299      	cmp	r1, r3
 800178a:	bf2c      	ite	cs
 800178c:	2301      	movcs	r3, #1
 800178e:	2300      	movcc	r3, #0
 8001790:	b2db      	uxtb	r3, r3
 8001792:	4023      	ands	r3, r4
 8001794:	b2db      	uxtb	r3, r3
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1b6      	bne.n	8001708 <BSP_LCD_DisplayStringAt+0xe4>
  }

}
 800179a:	bf00      	nop
 800179c:	3720      	adds	r7, #32
 800179e:	46bd      	mov	sp, r7
 80017a0:	bdb0      	pop	{r4, r5, r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000134 	.word	0x20000134
 80017a8:	20000138 	.word	0x20000138

080017ac <BSP_LCD_FillRect>:
  * @param  Ypos: Y position
  * @param  Width: Rectangle width
  * @param  Height: Rectangle height
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80017ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017b0:	b086      	sub	sp, #24
 80017b2:	af02      	add	r7, sp, #8
 80017b4:	4604      	mov	r4, r0
 80017b6:	4608      	mov	r0, r1
 80017b8:	4611      	mov	r1, r2
 80017ba:	461a      	mov	r2, r3
 80017bc:	4623      	mov	r3, r4
 80017be:	80fb      	strh	r3, [r7, #6]
 80017c0:	4603      	mov	r3, r0
 80017c2:	80bb      	strh	r3, [r7, #4]
 80017c4:	460b      	mov	r3, r1
 80017c6:	807b      	strh	r3, [r7, #2]
 80017c8:	4613      	mov	r3, r2
 80017ca:	803b      	strh	r3, [r7, #0]
  uint32_t  Xaddress = 0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80017d0:	4b20      	ldr	r3, [pc, #128]	; (8001854 <BSP_LCD_FillRect+0xa8>)
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	4920      	ldr	r1, [pc, #128]	; (8001858 <BSP_LCD_FillRect+0xac>)
 80017d6:	4613      	mov	r3, r2
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	4413      	add	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	440b      	add	r3, r1
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff fe66 	bl	80014b4 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80017e8:	4b1a      	ldr	r3, [pc, #104]	; (8001854 <BSP_LCD_FillRect+0xa8>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a1b      	ldr	r2, [pc, #108]	; (800185c <BSP_LCD_FillRect+0xb0>)
 80017ee:	2134      	movs	r1, #52	; 0x34
 80017f0:	fb01 f303 	mul.w	r3, r1, r3
 80017f4:	4413      	add	r3, r2
 80017f6:	335c      	adds	r3, #92	; 0x5c
 80017f8:	681c      	ldr	r4, [r3, #0]
 80017fa:	f7ff fde3 	bl	80013c4 <BSP_LCD_GetXSize>
 80017fe:	4602      	mov	r2, r0
 8001800:	88bb      	ldrh	r3, [r7, #4]
 8001802:	fb03 f202 	mul.w	r2, r3, r2
 8001806:	88fb      	ldrh	r3, [r7, #6]
 8001808:	4413      	add	r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	4423      	add	r3, r4
 800180e:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001810:	4b10      	ldr	r3, [pc, #64]	; (8001854 <BSP_LCD_FillRect+0xa8>)
 8001812:	681c      	ldr	r4, [r3, #0]
 8001814:	68fd      	ldr	r5, [r7, #12]
 8001816:	887e      	ldrh	r6, [r7, #2]
 8001818:	f8b7 8000 	ldrh.w	r8, [r7]
 800181c:	f7ff fdd2 	bl	80013c4 <BSP_LCD_GetXSize>
 8001820:	4602      	mov	r2, r0
 8001822:	887b      	ldrh	r3, [r7, #2]
 8001824:	1ad1      	subs	r1, r2, r3
 8001826:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <BSP_LCD_FillRect+0xa8>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	480b      	ldr	r0, [pc, #44]	; (8001858 <BSP_LCD_FillRect+0xac>)
 800182c:	4613      	mov	r3, r2
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	4413      	add	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4403      	add	r3, r0
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	9301      	str	r3, [sp, #4]
 800183a:	9100      	str	r1, [sp, #0]
 800183c:	4643      	mov	r3, r8
 800183e:	4632      	mov	r2, r6
 8001840:	4629      	mov	r1, r5
 8001842:	4620      	mov	r0, r4
 8001844:	f000 f986 	bl	8001b54 <LL_FillBuffer>
}
 8001848:	bf00      	nop
 800184a:	3710      	adds	r7, #16
 800184c:	46bd      	mov	sp, r7
 800184e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001852:	bf00      	nop
 8001854:	20000134 	.word	0x20000134
 8001858:	20000138 	.word	0x20000138
 800185c:	200002e4 	.word	0x200002e4

08001860 <DSI_IO_WriteCmd>:
  *                 If inferior to 2, a long write command is performed else short.
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af02      	add	r7, sp, #8
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d80d      	bhi.n	800188c <DSI_IO_WriteCmd+0x2c>
  {
   HAL_DSI_ShortWrite(&hdsi_discovery, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	461a      	mov	r2, r3
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	3301      	adds	r3, #1
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	9300      	str	r3, [sp, #0]
 800187e:	4613      	mov	r3, r2
 8001880:	2215      	movs	r2, #21
 8001882:	2100      	movs	r1, #0
 8001884:	480a      	ldr	r0, [pc, #40]	; (80018b0 <DSI_IO_WriteCmd+0x50>)
 8001886:	f002 ff57 	bl	8004738 <HAL_DSI_ShortWrite>
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  } 
}
 800188a:	e00d      	b.n	80018a8 <DSI_IO_WriteCmd+0x48>
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4413      	add	r3, r2
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	461a      	mov	r2, r3
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	9301      	str	r3, [sp, #4]
 800189a:	9200      	str	r2, [sp, #0]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2239      	movs	r2, #57	; 0x39
 80018a0:	2100      	movs	r1, #0
 80018a2:	4803      	ldr	r0, [pc, #12]	; (80018b0 <DSI_IO_WriteCmd+0x50>)
 80018a4:	f002 ff6a 	bl	800477c <HAL_DSI_LongWrite>
}
 80018a8:	bf00      	nop
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	2000038c 	.word	0x2000038c

080018b4 <LCD_IO_GetID>:
  * @brief  Returns the ID of connected screen by checking the HDMI
  *        (adv7533 component) ID or LCD DSI (via TS ID) ID.
  * @retval LCD ID
  */
static uint16_t LCD_IO_GetID(void)
{ 
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  else
  {
    return 0;
  }
#else 
  return LCD_DSI_ID; 
 80018b8:	2311      	movs	r3, #17
#endif /* USE_LCD_HDMI */
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <BSP_LCD_MspInit>:
/**
  * @brief  Initialize the BSP LCD Msp.
  * Application can surcharge if needed this function implementation
  */
__weak void BSP_LCD_MspInit(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80018ca:	4b32      	ldr	r3, [pc, #200]	; (8001994 <BSP_LCD_MspInit+0xd0>)
 80018cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ce:	4a31      	ldr	r2, [pc, #196]	; (8001994 <BSP_LCD_MspInit+0xd0>)
 80018d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80018d4:	6453      	str	r3, [r2, #68]	; 0x44
 80018d6:	4b2f      	ldr	r3, [pc, #188]	; (8001994 <BSP_LCD_MspInit+0xd0>)
 80018d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]

  /** @brief Toggle Sw reset of LTDC IP */
  __HAL_RCC_LTDC_FORCE_RESET();
 80018e2:	4b2c      	ldr	r3, [pc, #176]	; (8001994 <BSP_LCD_MspInit+0xd0>)
 80018e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e6:	4a2b      	ldr	r2, [pc, #172]	; (8001994 <BSP_LCD_MspInit+0xd0>)
 80018e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80018ec:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 80018ee:	4b29      	ldr	r3, [pc, #164]	; (8001994 <BSP_LCD_MspInit+0xd0>)
 80018f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f2:	4a28      	ldr	r2, [pc, #160]	; (8001994 <BSP_LCD_MspInit+0xd0>)
 80018f4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80018f8:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief Enable the DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80018fa:	4b26      	ldr	r3, [pc, #152]	; (8001994 <BSP_LCD_MspInit+0xd0>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	4a25      	ldr	r2, [pc, #148]	; (8001994 <BSP_LCD_MspInit+0xd0>)
 8001900:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001904:	6313      	str	r3, [r2, #48]	; 0x30
 8001906:	4b23      	ldr	r3, [pc, #140]	; (8001994 <BSP_LCD_MspInit+0xd0>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800190e:	60bb      	str	r3, [r7, #8]
 8001910:	68bb      	ldr	r3, [r7, #8]

  /** @brief Toggle Sw reset of DMA2D IP */
  __HAL_RCC_DMA2D_FORCE_RESET();
 8001912:	4b20      	ldr	r3, [pc, #128]	; (8001994 <BSP_LCD_MspInit+0xd0>)
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	4a1f      	ldr	r2, [pc, #124]	; (8001994 <BSP_LCD_MspInit+0xd0>)
 8001918:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800191c:	6113      	str	r3, [r2, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 800191e:	4b1d      	ldr	r3, [pc, #116]	; (8001994 <BSP_LCD_MspInit+0xd0>)
 8001920:	691b      	ldr	r3, [r3, #16]
 8001922:	4a1c      	ldr	r2, [pc, #112]	; (8001994 <BSP_LCD_MspInit+0xd0>)
 8001924:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001928:	6113      	str	r3, [r2, #16]

  /** @brief Enable DSI Host and wrapper clocks */
  __HAL_RCC_DSI_CLK_ENABLE();
 800192a:	4b1a      	ldr	r3, [pc, #104]	; (8001994 <BSP_LCD_MspInit+0xd0>)
 800192c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192e:	4a19      	ldr	r2, [pc, #100]	; (8001994 <BSP_LCD_MspInit+0xd0>)
 8001930:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001934:	6453      	str	r3, [r2, #68]	; 0x44
 8001936:	4b17      	ldr	r3, [pc, #92]	; (8001994 <BSP_LCD_MspInit+0xd0>)
 8001938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800193e:	607b      	str	r3, [r7, #4]
 8001940:	687b      	ldr	r3, [r7, #4]

  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
 8001942:	4b14      	ldr	r3, [pc, #80]	; (8001994 <BSP_LCD_MspInit+0xd0>)
 8001944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001946:	4a13      	ldr	r2, [pc, #76]	; (8001994 <BSP_LCD_MspInit+0xd0>)
 8001948:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800194c:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 800194e:	4b11      	ldr	r3, [pc, #68]	; (8001994 <BSP_LCD_MspInit+0xd0>)
 8001950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001952:	4a10      	ldr	r2, [pc, #64]	; (8001994 <BSP_LCD_MspInit+0xd0>)
 8001954:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8001958:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 800195a:	2200      	movs	r2, #0
 800195c:	2103      	movs	r1, #3
 800195e:	2058      	movs	r0, #88	; 0x58
 8001960:	f001 fac7 	bl	8002ef2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001964:	2058      	movs	r0, #88	; 0x58
 8001966:	f001 fae0 	bl	8002f2a <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 800196a:	2200      	movs	r2, #0
 800196c:	2103      	movs	r1, #3
 800196e:	205a      	movs	r0, #90	; 0x5a
 8001970:	f001 fabf 	bl	8002ef2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001974:	205a      	movs	r0, #90	; 0x5a
 8001976:	f001 fad8 	bl	8002f2a <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 800197a:	2200      	movs	r2, #0
 800197c:	2103      	movs	r1, #3
 800197e:	2062      	movs	r0, #98	; 0x62
 8001980:	f001 fab7 	bl	8002ef2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001984:	2062      	movs	r0, #98	; 0x62
 8001986:	f001 fad0 	bl	8002f2a <HAL_NVIC_EnableIRQ>
}
 800198a:	bf00      	nop
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40023800 	.word	0x40023800

08001998 <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8001998:	b5b0      	push	{r4, r5, r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	603a      	str	r2, [r7, #0]
 80019a2:	80fb      	strh	r3, [r7, #6]
 80019a4:	460b      	mov	r3, r1
 80019a6:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80019a8:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <BSP_LCD_DrawPixel+0x44>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a0c      	ldr	r2, [pc, #48]	; (80019e0 <BSP_LCD_DrawPixel+0x48>)
 80019ae:	2134      	movs	r1, #52	; 0x34
 80019b0:	fb01 f303 	mul.w	r3, r1, r3
 80019b4:	4413      	add	r3, r2
 80019b6:	335c      	adds	r3, #92	; 0x5c
 80019b8:	681c      	ldr	r4, [r3, #0]
 80019ba:	88bd      	ldrh	r5, [r7, #4]
 80019bc:	f7ff fd02 	bl	80013c4 <BSP_LCD_GetXSize>
 80019c0:	4603      	mov	r3, r0
 80019c2:	fb03 f205 	mul.w	r2, r3, r5
 80019c6:	88fb      	ldrh	r3, [r7, #6]
 80019c8:	4413      	add	r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4423      	add	r3, r4
 80019ce:	461a      	mov	r2, r3
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	6013      	str	r3, [r2, #0]
}
 80019d4:	bf00      	nop
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bdb0      	pop	{r4, r5, r7, pc}
 80019dc:	20000134 	.word	0x20000134
 80019e0:	200002e4 	.word	0x200002e4

080019e4 <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b088      	sub	sp, #32
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	603a      	str	r2, [r7, #0]
 80019ee:	80fb      	strh	r3, [r7, #6]
 80019f0:	460b      	mov	r3, r1
 80019f2:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80019f4:	2300      	movs	r3, #0
 80019f6:	61fb      	str	r3, [r7, #28]
 80019f8:	2300      	movs	r3, #0
 80019fa:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[ActiveLayer].pFont->Height;
 80019fc:	4b53      	ldr	r3, [pc, #332]	; (8001b4c <DrawChar+0x168>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	4953      	ldr	r1, [pc, #332]	; (8001b50 <DrawChar+0x16c>)
 8001a02:	4613      	mov	r3, r2
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	4413      	add	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	440b      	add	r3, r1
 8001a0c:	3308      	adds	r3, #8
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	88db      	ldrh	r3, [r3, #6]
 8001a12:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8001a14:	4b4d      	ldr	r3, [pc, #308]	; (8001b4c <DrawChar+0x168>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	494d      	ldr	r1, [pc, #308]	; (8001b50 <DrawChar+0x16c>)
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	4413      	add	r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	440b      	add	r3, r1
 8001a24:	3308      	adds	r3, #8
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	889b      	ldrh	r3, [r3, #4]
 8001a2a:	823b      	strh	r3, [r7, #16]

  offset =  8 *((width + 7)/8) -  width ;
 8001a2c:	8a3b      	ldrh	r3, [r7, #16]
 8001a2e:	3307      	adds	r3, #7
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	da00      	bge.n	8001a36 <DrawChar+0x52>
 8001a34:	3307      	adds	r3, #7
 8001a36:	10db      	asrs	r3, r3, #3
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	8a3b      	ldrh	r3, [r7, #16]
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8001a46:	2300      	movs	r3, #0
 8001a48:	61fb      	str	r3, [r7, #28]
 8001a4a:	e076      	b.n	8001b3a <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8001a4c:	8a3b      	ldrh	r3, [r7, #16]
 8001a4e:	3307      	adds	r3, #7
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	da00      	bge.n	8001a56 <DrawChar+0x72>
 8001a54:	3307      	adds	r3, #7
 8001a56:	10db      	asrs	r3, r3, #3
 8001a58:	461a      	mov	r2, r3
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	fb03 f302 	mul.w	r3, r3, r2
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	4413      	add	r3, r2
 8001a64:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8001a66:	8a3b      	ldrh	r3, [r7, #16]
 8001a68:	3307      	adds	r3, #7
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	da00      	bge.n	8001a70 <DrawChar+0x8c>
 8001a6e:	3307      	adds	r3, #7
 8001a70:	10db      	asrs	r3, r3, #3
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d002      	beq.n	8001a7c <DrawChar+0x98>
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d004      	beq.n	8001a84 <DrawChar+0xa0>
 8001a7a:	e00c      	b.n	8001a96 <DrawChar+0xb2>
    {

    case 1:
      line =  pchar[0];
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	617b      	str	r3, [r7, #20]
      break;
 8001a82:	e016      	b.n	8001ab2 <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	021b      	lsls	r3, r3, #8
 8001a8a:	68ba      	ldr	r2, [r7, #8]
 8001a8c:	3201      	adds	r2, #1
 8001a8e:	7812      	ldrb	r2, [r2, #0]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	617b      	str	r3, [r7, #20]
      break;
 8001a94:	e00d      	b.n	8001ab2 <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	041a      	lsls	r2, r3, #16
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	021b      	lsls	r3, r3, #8
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	68ba      	ldr	r2, [r7, #8]
 8001aa8:	3202      	adds	r2, #2
 8001aaa:	7812      	ldrb	r2, [r2, #0]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	617b      	str	r3, [r7, #20]
      break;
 8001ab0:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61bb      	str	r3, [r7, #24]
 8001ab6:	e036      	b.n	8001b26 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1)))
 8001ab8:	8a3a      	ldrh	r2, [r7, #16]
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	1ad2      	subs	r2, r2, r3
 8001abe:	7bfb      	ldrb	r3, [r7, #15]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	461a      	mov	r2, r3
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d012      	beq.n	8001afa <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	88fb      	ldrh	r3, [r7, #6]
 8001ada:	4413      	add	r3, r2
 8001adc:	b298      	uxth	r0, r3
 8001ade:	4b1b      	ldr	r3, [pc, #108]	; (8001b4c <DrawChar+0x168>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	491b      	ldr	r1, [pc, #108]	; (8001b50 <DrawChar+0x16c>)
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	4413      	add	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	440b      	add	r3, r1
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	88bb      	ldrh	r3, [r7, #4]
 8001af2:	4619      	mov	r1, r3
 8001af4:	f7ff ff50 	bl	8001998 <BSP_LCD_DrawPixel>
 8001af8:	e012      	b.n	8001b20 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	88fb      	ldrh	r3, [r7, #6]
 8001b00:	4413      	add	r3, r2
 8001b02:	b298      	uxth	r0, r3
 8001b04:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <DrawChar+0x168>)
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	4911      	ldr	r1, [pc, #68]	; (8001b50 <DrawChar+0x16c>)
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	4413      	add	r3, r2
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	440b      	add	r3, r1
 8001b14:	3304      	adds	r3, #4
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	88bb      	ldrh	r3, [r7, #4]
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	f7ff ff3c 	bl	8001998 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	3301      	adds	r3, #1
 8001b24:	61bb      	str	r3, [r7, #24]
 8001b26:	8a3b      	ldrh	r3, [r7, #16]
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d3c4      	bcc.n	8001ab8 <DrawChar+0xd4>
      }
    }
    Ypos++;
 8001b2e:	88bb      	ldrh	r3, [r7, #4]
 8001b30:	3301      	adds	r3, #1
 8001b32:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	3301      	adds	r3, #1
 8001b38:	61fb      	str	r3, [r7, #28]
 8001b3a:	8a7b      	ldrh	r3, [r7, #18]
 8001b3c:	69fa      	ldr	r2, [r7, #28]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d384      	bcc.n	8001a4c <DrawChar+0x68>
  }
}
 8001b42:	bf00      	nop
 8001b44:	3720      	adds	r7, #32
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000134 	.word	0x20000134
 8001b50:	20000138 	.word	0x20000138

08001b54 <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af02      	add	r7, sp, #8
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
 8001b60:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_discovery.Init.Mode         = DMA2D_R2M;
 8001b62:	4b16      	ldr	r3, [pc, #88]	; (8001bbc <LL_FillBuffer+0x68>)
 8001b64:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001b68:	605a      	str	r2, [r3, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 8001b6a:	4b14      	ldr	r3, [pc, #80]	; (8001bbc <LL_FillBuffer+0x68>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	609a      	str	r2, [r3, #8]
  hdma2d_discovery.Init.OutputOffset = OffLine;
 8001b70:	4a12      	ldr	r2, [pc, #72]	; (8001bbc <LL_FillBuffer+0x68>)
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	60d3      	str	r3, [r2, #12]

  hdma2d_discovery.Instance = DMA2D;
 8001b76:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <LL_FillBuffer+0x68>)
 8001b78:	4a11      	ldr	r2, [pc, #68]	; (8001bc0 <LL_FillBuffer+0x6c>)
 8001b7a:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 8001b7c:	480f      	ldr	r0, [pc, #60]	; (8001bbc <LL_FillBuffer+0x68>)
 8001b7e:	f001 fbab 	bl	80032d8 <HAL_DMA2D_Init>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d115      	bne.n	8001bb4 <LL_FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, LayerIndex) == HAL_OK)
 8001b88:	68f9      	ldr	r1, [r7, #12]
 8001b8a:	480c      	ldr	r0, [pc, #48]	; (8001bbc <LL_FillBuffer+0x68>)
 8001b8c:	f001 fd12 	bl	80035b4 <HAL_DMA2D_ConfigLayer>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d10e      	bne.n	8001bb4 <LL_FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&hdma2d_discovery, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8001b96:	68ba      	ldr	r2, [r7, #8]
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	9300      	str	r3, [sp, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	69f9      	ldr	r1, [r7, #28]
 8001ba0:	4806      	ldr	r0, [pc, #24]	; (8001bbc <LL_FillBuffer+0x68>)
 8001ba2:	f001 fbf3 	bl	800338c <HAL_DMA2D_Start>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d103      	bne.n	8001bb4 <LL_FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 8001bac:	210a      	movs	r1, #10
 8001bae:	4803      	ldr	r0, [pc, #12]	; (8001bbc <LL_FillBuffer+0x68>)
 8001bb0:	f001 fc17 	bl	80033e2 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8001bb4:	bf00      	nop
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	2000028c 	.word	0x2000028c
 8001bc0:	4002b000 	.word	0x4002b000

08001bc4 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001bc8:	4b29      	ldr	r3, [pc, #164]	; (8001c70 <BSP_SDRAM_Init+0xac>)
 8001bca:	4a2a      	ldr	r2, [pc, #168]	; (8001c74 <BSP_SDRAM_Init+0xb0>)
 8001bcc:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8001bce:	4b2a      	ldr	r3, [pc, #168]	; (8001c78 <BSP_SDRAM_Init+0xb4>)
 8001bd0:	2202      	movs	r2, #2
 8001bd2:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8001bd4:	4b28      	ldr	r3, [pc, #160]	; (8001c78 <BSP_SDRAM_Init+0xb4>)
 8001bd6:	2207      	movs	r2, #7
 8001bd8:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8001bda:	4b27      	ldr	r3, [pc, #156]	; (8001c78 <BSP_SDRAM_Init+0xb4>)
 8001bdc:	2204      	movs	r2, #4
 8001bde:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8001be0:	4b25      	ldr	r3, [pc, #148]	; (8001c78 <BSP_SDRAM_Init+0xb4>)
 8001be2:	2207      	movs	r2, #7
 8001be4:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8001be6:	4b24      	ldr	r3, [pc, #144]	; (8001c78 <BSP_SDRAM_Init+0xb4>)
 8001be8:	2202      	movs	r2, #2
 8001bea:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8001bec:	4b22      	ldr	r3, [pc, #136]	; (8001c78 <BSP_SDRAM_Init+0xb4>)
 8001bee:	2202      	movs	r2, #2
 8001bf0:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8001bf2:	4b21      	ldr	r3, [pc, #132]	; (8001c78 <BSP_SDRAM_Init+0xb4>)
 8001bf4:	2202      	movs	r2, #2
 8001bf6:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8001bf8:	4b1d      	ldr	r3, [pc, #116]	; (8001c70 <BSP_SDRAM_Init+0xac>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001bfe:	4b1c      	ldr	r3, [pc, #112]	; (8001c70 <BSP_SDRAM_Init+0xac>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8001c04:	4b1a      	ldr	r3, [pc, #104]	; (8001c70 <BSP_SDRAM_Init+0xac>)
 8001c06:	2204      	movs	r2, #4
 8001c08:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8001c0a:	4b19      	ldr	r3, [pc, #100]	; (8001c70 <BSP_SDRAM_Init+0xac>)
 8001c0c:	2220      	movs	r2, #32
 8001c0e:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001c10:	4b17      	ldr	r3, [pc, #92]	; (8001c70 <BSP_SDRAM_Init+0xac>)
 8001c12:	2240      	movs	r2, #64	; 0x40
 8001c14:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8001c16:	4b16      	ldr	r3, [pc, #88]	; (8001c70 <BSP_SDRAM_Init+0xac>)
 8001c18:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001c1c:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001c1e:	4b14      	ldr	r3, [pc, #80]	; (8001c70 <BSP_SDRAM_Init+0xac>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8001c24:	4b12      	ldr	r3, [pc, #72]	; (8001c70 <BSP_SDRAM_Init+0xac>)
 8001c26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c2a:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8001c2c:	4b10      	ldr	r3, [pc, #64]	; (8001c70 <BSP_SDRAM_Init+0xac>)
 8001c2e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c32:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8001c34:	4b0e      	ldr	r3, [pc, #56]	; (8001c70 <BSP_SDRAM_Init+0xac>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	480c      	ldr	r0, [pc, #48]	; (8001c70 <BSP_SDRAM_Init+0xac>)
 8001c3e:	f000 f87f 	bl	8001d40 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8001c42:	490d      	ldr	r1, [pc, #52]	; (8001c78 <BSP_SDRAM_Init+0xb4>)
 8001c44:	480a      	ldr	r0, [pc, #40]	; (8001c70 <BSP_SDRAM_Init+0xac>)
 8001c46:	f005 fa05 	bl	8007054 <HAL_SDRAM_Init>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d003      	beq.n	8001c58 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8001c50:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <BSP_SDRAM_Init+0xb8>)
 8001c52:	2201      	movs	r2, #1
 8001c54:	701a      	strb	r2, [r3, #0]
 8001c56:	e002      	b.n	8001c5e <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8001c58:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <BSP_SDRAM_Init+0xb8>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8001c5e:	f240 6003 	movw	r0, #1539	; 0x603
 8001c62:	f000 f80d 	bl	8001c80 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8001c66:	4b05      	ldr	r3, [pc, #20]	; (8001c7c <BSP_SDRAM_Init+0xb8>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	200003a8 	.word	0x200003a8
 8001c74:	a0000140 	.word	0xa0000140
 8001c78:	200001e0 	.word	0x200001e0
 8001c7c:	20000048 	.word	0x20000048

08001c80 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8001c8c:	4b2a      	ldr	r3, [pc, #168]	; (8001d38 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001c8e:	2201      	movs	r2, #1
 8001c90:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001c92:	4b29      	ldr	r3, [pc, #164]	; (8001d38 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001c94:	2210      	movs	r2, #16
 8001c96:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001c98:	4b27      	ldr	r3, [pc, #156]	; (8001d38 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001c9e:	4b26      	ldr	r3, [pc, #152]	; (8001d38 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001ca4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ca8:	4923      	ldr	r1, [pc, #140]	; (8001d38 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001caa:	4824      	ldr	r0, [pc, #144]	; (8001d3c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001cac:	f005 fa06 	bl	80070bc <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8001cb0:	2001      	movs	r0, #1
 8001cb2:	f000 fb79 	bl	80023a8 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8001cb6:	4b20      	ldr	r3, [pc, #128]	; (8001d38 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001cb8:	2202      	movs	r2, #2
 8001cba:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001cbc:	4b1e      	ldr	r3, [pc, #120]	; (8001d38 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001cbe:	2210      	movs	r2, #16
 8001cc0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001cc2:	4b1d      	ldr	r3, [pc, #116]	; (8001d38 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001cc8:	4b1b      	ldr	r3, [pc, #108]	; (8001d38 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8001cce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cd2:	4919      	ldr	r1, [pc, #100]	; (8001d38 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001cd4:	4819      	ldr	r0, [pc, #100]	; (8001d3c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001cd6:	f005 f9f1 	bl	80070bc <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001cda:	4b17      	ldr	r3, [pc, #92]	; (8001d38 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001cdc:	2203      	movs	r2, #3
 8001cde:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001ce0:	4b15      	ldr	r3, [pc, #84]	; (8001d38 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001ce2:	2210      	movs	r2, #16
 8001ce4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8001ce6:	4b14      	ldr	r3, [pc, #80]	; (8001d38 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001ce8:	2208      	movs	r2, #8
 8001cea:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001cec:	4b12      	ldr	r3, [pc, #72]	; (8001d38 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001cf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cf6:	4910      	ldr	r1, [pc, #64]	; (8001d38 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001cf8:	4810      	ldr	r0, [pc, #64]	; (8001d3c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001cfa:	f005 f9df 	bl	80070bc <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8001cfe:	f44f 730c 	mov.w	r3, #560	; 0x230
 8001d02:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8001d04:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001d06:	2204      	movs	r2, #4
 8001d08:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001d0a:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001d0c:	2210      	movs	r2, #16
 8001d0e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001d10:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001d12:	2201      	movs	r2, #1
 8001d14:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	4a07      	ldr	r2, [pc, #28]	; (8001d38 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001d1a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001d1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d20:	4905      	ldr	r1, [pc, #20]	; (8001d38 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001d22:	4806      	ldr	r0, [pc, #24]	; (8001d3c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001d24:	f005 f9ca 	bl	80070bc <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8001d28:	6879      	ldr	r1, [r7, #4]
 8001d2a:	4804      	ldr	r0, [pc, #16]	; (8001d3c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001d2c:	f005 f9f1 	bl	8007112 <HAL_SDRAM_ProgramRefreshRate>
}
 8001d30:	bf00      	nop
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	200001fc 	.word	0x200001fc
 8001d3c:	200003a8 	.word	0x200003a8

08001d40 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params  
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b090      	sub	sp, #64	; 0x40
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001d4a:	4b71      	ldr	r3, [pc, #452]	; (8001f10 <BSP_SDRAM_MspInit+0x1d0>)
 8001d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d4e:	4a70      	ldr	r2, [pc, #448]	; (8001f10 <BSP_SDRAM_MspInit+0x1d0>)
 8001d50:	f043 0301 	orr.w	r3, r3, #1
 8001d54:	6393      	str	r3, [r2, #56]	; 0x38
 8001d56:	4b6e      	ldr	r3, [pc, #440]	; (8001f10 <BSP_SDRAM_MspInit+0x1d0>)
 8001d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8001d62:	4b6b      	ldr	r3, [pc, #428]	; (8001f10 <BSP_SDRAM_MspInit+0x1d0>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	4a6a      	ldr	r2, [pc, #424]	; (8001f10 <BSP_SDRAM_MspInit+0x1d0>)
 8001d68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6e:	4b68      	ldr	r3, [pc, #416]	; (8001f10 <BSP_SDRAM_MspInit+0x1d0>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d76:	627b      	str	r3, [r7, #36]	; 0x24
 8001d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d7a:	4b65      	ldr	r3, [pc, #404]	; (8001f10 <BSP_SDRAM_MspInit+0x1d0>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	4a64      	ldr	r2, [pc, #400]	; (8001f10 <BSP_SDRAM_MspInit+0x1d0>)
 8001d80:	f043 0308 	orr.w	r3, r3, #8
 8001d84:	6313      	str	r3, [r2, #48]	; 0x30
 8001d86:	4b62      	ldr	r3, [pc, #392]	; (8001f10 <BSP_SDRAM_MspInit+0x1d0>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	f003 0308 	and.w	r3, r3, #8
 8001d8e:	623b      	str	r3, [r7, #32]
 8001d90:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d92:	4b5f      	ldr	r3, [pc, #380]	; (8001f10 <BSP_SDRAM_MspInit+0x1d0>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	4a5e      	ldr	r2, [pc, #376]	; (8001f10 <BSP_SDRAM_MspInit+0x1d0>)
 8001d98:	f043 0310 	orr.w	r3, r3, #16
 8001d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9e:	4b5c      	ldr	r3, [pc, #368]	; (8001f10 <BSP_SDRAM_MspInit+0x1d0>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	f003 0310 	and.w	r3, r3, #16
 8001da6:	61fb      	str	r3, [r7, #28]
 8001da8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001daa:	4b59      	ldr	r3, [pc, #356]	; (8001f10 <BSP_SDRAM_MspInit+0x1d0>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	4a58      	ldr	r2, [pc, #352]	; (8001f10 <BSP_SDRAM_MspInit+0x1d0>)
 8001db0:	f043 0320 	orr.w	r3, r3, #32
 8001db4:	6313      	str	r3, [r2, #48]	; 0x30
 8001db6:	4b56      	ldr	r3, [pc, #344]	; (8001f10 <BSP_SDRAM_MspInit+0x1d0>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	f003 0320 	and.w	r3, r3, #32
 8001dbe:	61bb      	str	r3, [r7, #24]
 8001dc0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001dc2:	4b53      	ldr	r3, [pc, #332]	; (8001f10 <BSP_SDRAM_MspInit+0x1d0>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	4a52      	ldr	r2, [pc, #328]	; (8001f10 <BSP_SDRAM_MspInit+0x1d0>)
 8001dc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dce:	4b50      	ldr	r3, [pc, #320]	; (8001f10 <BSP_SDRAM_MspInit+0x1d0>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dd6:	617b      	str	r3, [r7, #20]
 8001dd8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dda:	4b4d      	ldr	r3, [pc, #308]	; (8001f10 <BSP_SDRAM_MspInit+0x1d0>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	4a4c      	ldr	r2, [pc, #304]	; (8001f10 <BSP_SDRAM_MspInit+0x1d0>)
 8001de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001de4:	6313      	str	r3, [r2, #48]	; 0x30
 8001de6:	4b4a      	ldr	r3, [pc, #296]	; (8001f10 <BSP_SDRAM_MspInit+0x1d0>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dee:	613b      	str	r3, [r7, #16]
 8001df0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001df2:	4b47      	ldr	r3, [pc, #284]	; (8001f10 <BSP_SDRAM_MspInit+0x1d0>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	4a46      	ldr	r2, [pc, #280]	; (8001f10 <BSP_SDRAM_MspInit+0x1d0>)
 8001df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dfe:	4b44      	ldr	r3, [pc, #272]	; (8001f10 <BSP_SDRAM_MspInit+0x1d0>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8001e12:	2303      	movs	r3, #3
 8001e14:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8001e16:	230c      	movs	r3, #12
 8001e18:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8001e1a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_14 | GPIO_PIN_15;
 
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8001e20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e24:	4619      	mov	r1, r3
 8001e26:	483b      	ldr	r0, [pc, #236]	; (8001f14 <BSP_SDRAM_MspInit+0x1d4>)
 8001e28:	f002 fd6e 	bl	8004908 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8001e2c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001e30:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
      
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001e32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e36:	4619      	mov	r1, r3
 8001e38:	4837      	ldr	r0, [pc, #220]	; (8001f18 <BSP_SDRAM_MspInit+0x1d8>)
 8001e3a:	f002 fd65 	bl	8004908 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8001e3e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001e42:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
    
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8001e44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4834      	ldr	r0, [pc, #208]	; (8001f1c <BSP_SDRAM_MspInit+0x1dc>)
 8001e4c:	f002 fd5c 	bl	8004908 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4|\
 8001e50:	f248 1337 	movw	r3, #33079	; 0x8137
 8001e54:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001e56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4830      	ldr	r0, [pc, #192]	; (8001f20 <BSP_SDRAM_MspInit+0x1e0>)
 8001e5e:	f002 fd53 	bl	8004908 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8001e62:	f64f 732c 	movw	r3, #65324	; 0xff2c
 8001e66:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8001e68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	482d      	ldr	r0, [pc, #180]	; (8001f24 <BSP_SDRAM_MspInit+0x1e4>)
 8001e70:	f002 fd4a 	bl	8004908 <HAL_GPIO_Init>
  
  /* GPIOI configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8001e74:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8001e78:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
 8001e7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4829      	ldr	r0, [pc, #164]	; (8001f28 <BSP_SDRAM_MspInit+0x1e8>)
 8001e82:	f002 fd41 	bl	8004908 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8001e86:	4b29      	ldr	r3, [pc, #164]	; (8001f2c <BSP_SDRAM_MspInit+0x1ec>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8001e8c:	4b27      	ldr	r3, [pc, #156]	; (8001f2c <BSP_SDRAM_MspInit+0x1ec>)
 8001e8e:	2280      	movs	r2, #128	; 0x80
 8001e90:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8001e92:	4b26      	ldr	r3, [pc, #152]	; (8001f2c <BSP_SDRAM_MspInit+0x1ec>)
 8001e94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e98:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8001e9a:	4b24      	ldr	r3, [pc, #144]	; (8001f2c <BSP_SDRAM_MspInit+0x1ec>)
 8001e9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ea0:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ea2:	4b22      	ldr	r3, [pc, #136]	; (8001f2c <BSP_SDRAM_MspInit+0x1ec>)
 8001ea4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ea8:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001eaa:	4b20      	ldr	r3, [pc, #128]	; (8001f2c <BSP_SDRAM_MspInit+0x1ec>)
 8001eac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001eb0:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8001eb2:	4b1e      	ldr	r3, [pc, #120]	; (8001f2c <BSP_SDRAM_MspInit+0x1ec>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8001eb8:	4b1c      	ldr	r3, [pc, #112]	; (8001f2c <BSP_SDRAM_MspInit+0x1ec>)
 8001eba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ebe:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8001ec0:	4b1a      	ldr	r3, [pc, #104]	; (8001f2c <BSP_SDRAM_MspInit+0x1ec>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001ec6:	4b19      	ldr	r3, [pc, #100]	; (8001f2c <BSP_SDRAM_MspInit+0x1ec>)
 8001ec8:	2203      	movs	r2, #3
 8001eca:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001ecc:	4b17      	ldr	r3, [pc, #92]	; (8001f2c <BSP_SDRAM_MspInit+0x1ec>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8001ed2:	4b16      	ldr	r3, [pc, #88]	; (8001f2c <BSP_SDRAM_MspInit+0x1ec>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8001ed8:	4b14      	ldr	r3, [pc, #80]	; (8001f2c <BSP_SDRAM_MspInit+0x1ec>)
 8001eda:	4a15      	ldr	r2, [pc, #84]	; (8001f30 <BSP_SDRAM_MspInit+0x1f0>)
 8001edc:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a12      	ldr	r2, [pc, #72]	; (8001f2c <BSP_SDRAM_MspInit+0x1ec>)
 8001ee2:	631a      	str	r2, [r3, #48]	; 0x30
 8001ee4:	4a11      	ldr	r2, [pc, #68]	; (8001f2c <BSP_SDRAM_MspInit+0x1ec>)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8001eea:	4810      	ldr	r0, [pc, #64]	; (8001f2c <BSP_SDRAM_MspInit+0x1ec>)
 8001eec:	f001 f8e6 	bl	80030bc <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8001ef0:	480e      	ldr	r0, [pc, #56]	; (8001f2c <BSP_SDRAM_MspInit+0x1ec>)
 8001ef2:	f001 f835 	bl	8002f60 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	210f      	movs	r1, #15
 8001efa:	2038      	movs	r0, #56	; 0x38
 8001efc:	f000 fff9 	bl	8002ef2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8001f00:	2038      	movs	r0, #56	; 0x38
 8001f02:	f001 f812 	bl	8002f2a <HAL_NVIC_EnableIRQ>
}
 8001f06:	bf00      	nop
 8001f08:	3740      	adds	r7, #64	; 0x40
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40023800 	.word	0x40023800
 8001f14:	40020c00 	.word	0x40020c00
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	40021400 	.word	0x40021400
 8001f20:	40021800 	.word	0x40021800
 8001f24:	40021c00 	.word	0x40021c00
 8001f28:	40022000 	.word	0x40022000
 8001f2c:	2000020c 	.word	0x2000020c
 8001f30:	40026410 	.word	0x40026410

08001f34 <BSP_TS_Init>:
  * @param  ts_SizeX : Maximum X size of the TS area on LCD
  * @param  ts_SizeY : Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	460a      	mov	r2, r1
 8001f3e:	80fb      	strh	r3, [r7, #6]
 8001f40:	4613      	mov	r3, r2
 8001f42:	80bb      	strh	r3, [r7, #4]
  uint8_t ts_status = TS_OK;
 8001f44:	2300      	movs	r3, #0
 8001f46:	73fb      	strb	r3, [r7, #15]
  uint8_t ts_id1, ts_id2 = 0;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	73bb      	strb	r3, [r7, #14]
  /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
  /* but the prototype of Init() is like that in template and should be respected       */

  /* Initialize the communication channel to sensor (I2C) if necessary */
  /* that is initialization is done only once after a power up         */
  ft6x06_ts_drv.Init(I2C_Address);
 8001f4c:	4b25      	ldr	r3, [pc, #148]	; (8001fe4 <BSP_TS_Init+0xb0>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a25      	ldr	r2, [pc, #148]	; (8001fe8 <BSP_TS_Init+0xb4>)
 8001f52:	7812      	ldrb	r2, [r2, #0]
 8001f54:	b292      	uxth	r2, r2
 8001f56:	4610      	mov	r0, r2
 8001f58:	4798      	blx	r3

  ts_id1 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 8001f5a:	4b22      	ldr	r3, [pc, #136]	; (8001fe4 <BSP_TS_Init+0xb0>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	2054      	movs	r0, #84	; 0x54
 8001f60:	4798      	blx	r3
 8001f62:	4603      	mov	r3, r0
 8001f64:	737b      	strb	r3, [r7, #13]
  if(ts_id1 != FT6206_ID_VALUE)
 8001f66:	7b7b      	ldrb	r3, [r7, #13]
 8001f68:	2b11      	cmp	r3, #17
 8001f6a:	d009      	beq.n	8001f80 <BSP_TS_Init+0x4c>
  {
    ts_id2 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS_A02);
 8001f6c:	4b1d      	ldr	r3, [pc, #116]	; (8001fe4 <BSP_TS_Init+0xb0>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	2070      	movs	r0, #112	; 0x70
 8001f72:	4798      	blx	r3
 8001f74:	4603      	mov	r3, r0
 8001f76:	73bb      	strb	r3, [r7, #14]
    I2C_Address    = TS_I2C_ADDRESS_A02;    
 8001f78:	4b1b      	ldr	r3, [pc, #108]	; (8001fe8 <BSP_TS_Init+0xb4>)
 8001f7a:	2270      	movs	r2, #112	; 0x70
 8001f7c:	701a      	strb	r2, [r3, #0]
 8001f7e:	e002      	b.n	8001f86 <BSP_TS_Init+0x52>
  }
  else
  {
    I2C_Address    = TS_I2C_ADDRESS;    
 8001f80:	4b19      	ldr	r3, [pc, #100]	; (8001fe8 <BSP_TS_Init+0xb4>)
 8001f82:	2254      	movs	r2, #84	; 0x54
 8001f84:	701a      	strb	r2, [r3, #0]
  }
  
  /* Scan FT6xx6 TouchScreen IC controller ID register by I2C Read       */
  /* Verify this is a FT6206 or FT6336G, otherwise this is an error case */
  if((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 8001f86:	7b7b      	ldrb	r3, [r7, #13]
 8001f88:	2b11      	cmp	r3, #17
 8001f8a:	d002      	beq.n	8001f92 <BSP_TS_Init+0x5e>
 8001f8c:	7bbb      	ldrb	r3, [r7, #14]
 8001f8e:	2b11      	cmp	r3, #17
 8001f90:	d121      	bne.n	8001fd6 <BSP_TS_Init+0xa2>
  {
    /* Found FT6206 : Initialize the TS driver structure */
    ts_driver = &ft6x06_ts_drv;
 8001f92:	4b16      	ldr	r3, [pc, #88]	; (8001fec <BSP_TS_Init+0xb8>)
 8001f94:	4a13      	ldr	r2, [pc, #76]	; (8001fe4 <BSP_TS_Init+0xb0>)
 8001f96:	601a      	str	r2, [r3, #0]

    /* Get LCD chosen orientation */
    if(ts_SizeX < ts_SizeY)
 8001f98:	88fa      	ldrh	r2, [r7, #6]
 8001f9a:	88bb      	ldrh	r3, [r7, #4]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d203      	bcs.n	8001fa8 <BSP_TS_Init+0x74>
    {
      ts_orientation = TS_SWAP_NONE;                
 8001fa0:	4b13      	ldr	r3, [pc, #76]	; (8001ff0 <BSP_TS_Init+0xbc>)
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	701a      	strb	r2, [r3, #0]
 8001fa6:	e002      	b.n	8001fae <BSP_TS_Init+0x7a>
    }
    else
    {
      ts_orientation = TS_SWAP_XY | TS_SWAP_Y;                 
 8001fa8:	4b11      	ldr	r3, [pc, #68]	; (8001ff0 <BSP_TS_Init+0xbc>)
 8001faa:	220c      	movs	r2, #12
 8001fac:	701a      	strb	r2, [r3, #0]
    }

    if(ts_status == TS_OK)
 8001fae:	7bfb      	ldrb	r3, [r7, #15]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d112      	bne.n	8001fda <BSP_TS_Init+0xa6>
    {
      /* Software reset the TouchScreen */
      ts_driver->Reset(I2C_Address);
 8001fb4:	4b0d      	ldr	r3, [pc, #52]	; (8001fec <BSP_TS_Init+0xb8>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	4a0b      	ldr	r2, [pc, #44]	; (8001fe8 <BSP_TS_Init+0xb4>)
 8001fbc:	7812      	ldrb	r2, [r2, #0]
 8001fbe:	b292      	uxth	r2, r2
 8001fc0:	4610      	mov	r0, r2
 8001fc2:	4798      	blx	r3

      /* Calibrate, Configure and Start the TouchScreen driver */
      ts_driver->Start(I2C_Address);
 8001fc4:	4b09      	ldr	r3, [pc, #36]	; (8001fec <BSP_TS_Init+0xb8>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	4a07      	ldr	r2, [pc, #28]	; (8001fe8 <BSP_TS_Init+0xb4>)
 8001fcc:	7812      	ldrb	r2, [r2, #0]
 8001fce:	b292      	uxth	r2, r2
 8001fd0:	4610      	mov	r0, r2
 8001fd2:	4798      	blx	r3
    if(ts_status == TS_OK)
 8001fd4:	e001      	b.n	8001fda <BSP_TS_Init+0xa6>

    } /* of if(ts_status == TS_OK) */
  }
  else
  {
    ts_status = TS_DEVICE_NOT_FOUND;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	73fb      	strb	r3, [r7, #15]
  }

  return (ts_status);
 8001fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	20000000 	.word	0x20000000
 8001fe8:	20000271 	.word	0x20000271
 8001fec:	2000026c 	.word	0x2000026c
 8001ff0:	20000270 	.word	0x20000270

08001ff4 <BSP_TS_ITConfig>:
/**
  * @brief  Configures and enables the touch screen interrupts.
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_ITConfig(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
  uint8_t ts_status = TS_OK;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef gpio_init_structure;

  /* Msp Init of GPIO used for TS_INT pin coming from TouchScreen driver IC FT6x06 */
  /* When touchscreen is operated in interrupt mode */
  BSP_TS_INT_MspInit();
 8001ffe:	f000 f94f 	bl	80022a0 <BSP_TS_INT_MspInit>

  /* Configure Interrupt mode for TS_INT pin falling edge : when a new touch is available */
  /* TS_INT pin is active on low level on new touch available */
  gpio_init_structure.Pin = TS_INT_PIN;
 8002002:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002006:	603b      	str	r3, [r7, #0]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002008:	2301      	movs	r3, #1
 800200a:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800200c:	2302      	movs	r3, #2
 800200e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 8002010:	4b0d      	ldr	r3, [pc, #52]	; (8002048 <BSP_TS_ITConfig+0x54>)
 8002012:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 8002014:	463b      	mov	r3, r7
 8002016:	4619      	mov	r1, r3
 8002018:	480c      	ldr	r0, [pc, #48]	; (800204c <BSP_TS_ITConfig+0x58>)
 800201a:	f002 fc75 	bl	8004908 <HAL_GPIO_Init>

  /* Enable and set the TS_INT EXTI Interrupt to an intermediate priority */
  HAL_NVIC_SetPriority((IRQn_Type)(TS_INT_EXTI_IRQn), 0x0F, 0x00);
 800201e:	2200      	movs	r2, #0
 8002020:	210f      	movs	r1, #15
 8002022:	2028      	movs	r0, #40	; 0x28
 8002024:	f000 ff65 	bl	8002ef2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(TS_INT_EXTI_IRQn));
 8002028:	2028      	movs	r0, #40	; 0x28
 800202a:	f000 ff7e 	bl	8002f2a <HAL_NVIC_EnableIRQ>

  /* Enable the TS in interrupt mode */
  /* In that case the INT output of FT6206 when new touch is available */
  /* is active on low level and directed on EXTI */
  ts_driver->EnableIT(I2C_Address);
 800202e:	4b08      	ldr	r3, [pc, #32]	; (8002050 <BSP_TS_ITConfig+0x5c>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	4a07      	ldr	r2, [pc, #28]	; (8002054 <BSP_TS_ITConfig+0x60>)
 8002036:	7812      	ldrb	r2, [r2, #0]
 8002038:	b292      	uxth	r2, r2
 800203a:	4610      	mov	r0, r2
 800203c:	4798      	blx	r3

  return (ts_status);
 800203e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002040:	4618      	mov	r0, r3
 8002042:	3718      	adds	r7, #24
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	10210000 	.word	0x10210000
 800204c:	40022000 	.word	0x40022000
 8002050:	2000026c 	.word	0x2000026c
 8002054:	20000271 	.word	0x20000271

08002058 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8002058:	b590      	push	{r4, r7, lr}
 800205a:	b089      	sub	sp, #36	; 0x24
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8002060:	2300      	movs	r3, #0
 8002062:	76fb      	strb	r3, [r7, #27]
  uint32_t area = 0;
  uint32_t event = 0;
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = ts_driver->DetectTouch(I2C_Address);
 8002064:	4b89      	ldr	r3, [pc, #548]	; (800228c <BSP_TS_GetState+0x234>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	4a89      	ldr	r2, [pc, #548]	; (8002290 <BSP_TS_GetState+0x238>)
 800206c:	7812      	ldrb	r2, [r2, #0]
 800206e:	b292      	uxth	r2, r2
 8002070:	4610      	mov	r0, r2
 8002072:	4798      	blx	r3
 8002074:	4603      	mov	r3, r0
 8002076:	461a      	mov	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	701a      	strb	r2, [r3, #0]
  if(TS_State->touchDetected)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	f000 80fe 	beq.w	8002282 <BSP_TS_GetState+0x22a>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8002086:	2300      	movs	r3, #0
 8002088:	61fb      	str	r3, [r7, #28]
 800208a:	e0f3      	b.n	8002274 <BSP_TS_GetState+0x21c>
    {
      /* Get each touch coordinates */
      ts_driver->GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 800208c:	4b7f      	ldr	r3, [pc, #508]	; (800228c <BSP_TS_GetState+0x234>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	4a7f      	ldr	r2, [pc, #508]	; (8002290 <BSP_TS_GetState+0x238>)
 8002094:	7812      	ldrb	r2, [r2, #0]
 8002096:	b290      	uxth	r0, r2
 8002098:	f107 0110 	add.w	r1, r7, #16
 800209c:	69fa      	ldr	r2, [r7, #28]
 800209e:	0052      	lsls	r2, r2, #1
 80020a0:	188c      	adds	r4, r1, r2
 80020a2:	f107 010c 	add.w	r1, r7, #12
 80020a6:	69fa      	ldr	r2, [r7, #28]
 80020a8:	0052      	lsls	r2, r2, #1
 80020aa:	440a      	add	r2, r1
 80020ac:	4621      	mov	r1, r4
 80020ae:	4798      	blx	r3

      if(ts_orientation & TS_SWAP_XY)
 80020b0:	4b78      	ldr	r3, [pc, #480]	; (8002294 <BSP_TS_GetState+0x23c>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	f003 0308 	and.w	r3, r3, #8
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d01d      	beq.n	80020f8 <BSP_TS_GetState+0xa0>
      {
        tmp = Raw_x[index];
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	f107 0220 	add.w	r2, r7, #32
 80020c4:	4413      	add	r3, r2
 80020c6:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80020ca:	833b      	strh	r3, [r7, #24]
        Raw_x[index] = Raw_y[index]; 
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	f107 0220 	add.w	r2, r7, #32
 80020d4:	4413      	add	r3, r2
 80020d6:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	f107 0120 	add.w	r1, r7, #32
 80020e2:	440b      	add	r3, r1
 80020e4:	f823 2c10 	strh.w	r2, [r3, #-16]
        Raw_y[index] = tmp;
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	f107 0220 	add.w	r2, r7, #32
 80020f0:	4413      	add	r3, r2
 80020f2:	8b3a      	ldrh	r2, [r7, #24]
 80020f4:	f823 2c14 	strh.w	r2, [r3, #-20]
      }
      
      if(ts_orientation & TS_SWAP_X)
 80020f8:	4b66      	ldr	r3, [pc, #408]	; (8002294 <BSP_TS_GetState+0x23c>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d011      	beq.n	8002128 <BSP_TS_GetState+0xd0>
      {
        Raw_x[index] = FT_6206_MAX_WIDTH - 1 - Raw_x[index];
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	f107 0220 	add.w	r2, r7, #32
 800210c:	4413      	add	r3, r2
 800210e:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 8002112:	f240 331f 	movw	r3, #799	; 0x31f
 8002116:	1a9b      	subs	r3, r3, r2
 8002118:	b29a      	uxth	r2, r3
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	f107 0120 	add.w	r1, r7, #32
 8002122:	440b      	add	r3, r1
 8002124:	f823 2c10 	strh.w	r2, [r3, #-16]
      }

      if(ts_orientation & TS_SWAP_Y)
 8002128:	4b5a      	ldr	r3, [pc, #360]	; (8002294 <BSP_TS_GetState+0x23c>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	f003 0304 	and.w	r3, r3, #4
 8002130:	2b00      	cmp	r3, #0
 8002132:	d011      	beq.n	8002158 <BSP_TS_GetState+0x100>
      {
        Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	f107 0220 	add.w	r2, r7, #32
 800213c:	4413      	add	r3, r2
 800213e:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8002142:	f240 13df 	movw	r3, #479	; 0x1df
 8002146:	1a9b      	subs	r3, r3, r2
 8002148:	b29a      	uxth	r2, r3
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	f107 0120 	add.w	r1, r7, #32
 8002152:	440b      	add	r3, r1
 8002154:	f823 2c14 	strh.w	r2, [r3, #-20]
      }
            
      xDiff = Raw_x[index] > _x[index]? (Raw_x[index] - _x[index]): (_x[index] - Raw_x[index]);
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	f107 0220 	add.w	r2, r7, #32
 8002160:	4413      	add	r3, r2
 8002162:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8002166:	4619      	mov	r1, r3
 8002168:	4a4b      	ldr	r2, [pc, #300]	; (8002298 <BSP_TS_GetState+0x240>)
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002170:	4299      	cmp	r1, r3
 8002172:	d90e      	bls.n	8002192 <BSP_TS_GetState+0x13a>
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	f107 0220 	add.w	r2, r7, #32
 800217c:	4413      	add	r3, r2
 800217e:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 8002182:	4945      	ldr	r1, [pc, #276]	; (8002298 <BSP_TS_GetState+0x240>)
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800218a:	b29b      	uxth	r3, r3
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	b29b      	uxth	r3, r3
 8002190:	e00d      	b.n	80021ae <BSP_TS_GetState+0x156>
 8002192:	4a41      	ldr	r2, [pc, #260]	; (8002298 <BSP_TS_GetState+0x240>)
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800219a:	b29a      	uxth	r2, r3
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	f107 0120 	add.w	r1, r7, #32
 80021a4:	440b      	add	r3, r1
 80021a6:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	82fb      	strh	r3, [r7, #22]
      yDiff = Raw_y[index] > _y[index]? (Raw_y[index] - _y[index]): (_y[index] - Raw_y[index]);
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	f107 0220 	add.w	r2, r7, #32
 80021b8:	4413      	add	r3, r2
 80021ba:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80021be:	4619      	mov	r1, r3
 80021c0:	4a36      	ldr	r2, [pc, #216]	; (800229c <BSP_TS_GetState+0x244>)
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021c8:	4299      	cmp	r1, r3
 80021ca:	d90e      	bls.n	80021ea <BSP_TS_GetState+0x192>
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	f107 0220 	add.w	r2, r7, #32
 80021d4:	4413      	add	r3, r2
 80021d6:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 80021da:	4930      	ldr	r1, [pc, #192]	; (800229c <BSP_TS_GetState+0x244>)
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	e00d      	b.n	8002206 <BSP_TS_GetState+0x1ae>
 80021ea:	4a2c      	ldr	r2, [pc, #176]	; (800229c <BSP_TS_GetState+0x244>)
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	f107 0120 	add.w	r1, r7, #32
 80021fc:	440b      	add	r3, r1
 80021fe:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	b29b      	uxth	r3, r3
 8002206:	82bb      	strh	r3, [r7, #20]

      if ((xDiff + yDiff) > 5)
 8002208:	8afa      	ldrh	r2, [r7, #22]
 800220a:	8abb      	ldrh	r3, [r7, #20]
 800220c:	4413      	add	r3, r2
 800220e:	2b05      	cmp	r3, #5
 8002210:	dd17      	ble.n	8002242 <BSP_TS_GetState+0x1ea>
      {
        _x[index] = Raw_x[index];
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	f107 0220 	add.w	r2, r7, #32
 800221a:	4413      	add	r3, r2
 800221c:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8002220:	4619      	mov	r1, r3
 8002222:	4a1d      	ldr	r2, [pc, #116]	; (8002298 <BSP_TS_GetState+0x240>)
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = Raw_y[index];
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	f107 0220 	add.w	r2, r7, #32
 8002232:	4413      	add	r3, r2
 8002234:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002238:	4619      	mov	r1, r3
 800223a:	4a18      	ldr	r2, [pc, #96]	; (800229c <BSP_TS_GetState+0x244>)
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }


      TS_State->touchX[index] = _x[index];
 8002242:	4a15      	ldr	r2, [pc, #84]	; (8002298 <BSP_TS_GetState+0x240>)
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800224a:	b299      	uxth	r1, r3
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	4413      	add	r3, r2
 8002254:	460a      	mov	r2, r1
 8002256:	805a      	strh	r2, [r3, #2]
      TS_State->touchY[index] = _y[index];
 8002258:	4a10      	ldr	r2, [pc, #64]	; (800229c <BSP_TS_GetState+0x244>)
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002260:	b299      	uxth	r1, r3
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	4413      	add	r3, r2
 800226a:	460a      	mov	r2, r1
 800226c:	80da      	strh	r2, [r3, #6]
    for(index=0; index < TS_State->touchDetected; index++)
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	3301      	adds	r3, #1
 8002272:	61fb      	str	r3, [r7, #28]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	461a      	mov	r2, r3
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	4293      	cmp	r3, r2
 800227e:	f4ff af05 	bcc.w	800208c <BSP_TS_GetState+0x34>
    ts_status = BSP_TS_Get_GestureId(TS_State);
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8002282:	7efb      	ldrb	r3, [r7, #27]
}
 8002284:	4618      	mov	r0, r3
 8002286:	3724      	adds	r7, #36	; 0x24
 8002288:	46bd      	mov	sp, r7
 800228a:	bd90      	pop	{r4, r7, pc}
 800228c:	2000026c 	.word	0x2000026c
 8002290:	20000271 	.word	0x20000271
 8002294:	20000270 	.word	0x20000270
 8002298:	20000274 	.word	0x20000274
 800229c:	2000027c 	.word	0x2000027c

080022a0 <BSP_TS_INT_MspInit>:
/**
  * @brief  Initializes the TS_INT pin MSP.
  * @retval None
  */
__weak void BSP_TS_INT_MspInit(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  TS_INT_GPIO_CLK_ENABLE();
 80022a6:	4b0f      	ldr	r3, [pc, #60]	; (80022e4 <BSP_TS_INT_MspInit+0x44>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	4a0e      	ldr	r2, [pc, #56]	; (80022e4 <BSP_TS_INT_MspInit+0x44>)
 80022ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022b0:	6313      	str	r3, [r2, #48]	; 0x30
 80022b2:	4b0c      	ldr	r3, [pc, #48]	; (80022e4 <BSP_TS_INT_MspInit+0x44>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ba:	603b      	str	r3, [r7, #0]
 80022bc:	683b      	ldr	r3, [r7, #0]

  /* GPIO configuration in input for TouchScreen interrupt signal on TS_INT pin */
  gpio_init_structure.Pin       = TS_INT_PIN;
 80022be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022c2:	607b      	str	r3, [r7, #4]

  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 80022c4:	2300      	movs	r3, #0
 80022c6:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80022c8:	2301      	movs	r3, #1
 80022ca:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80022cc:	2303      	movs	r3, #3
 80022ce:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 80022d0:	1d3b      	adds	r3, r7, #4
 80022d2:	4619      	mov	r1, r3
 80022d4:	4804      	ldr	r0, [pc, #16]	; (80022e8 <BSP_TS_INT_MspInit+0x48>)
 80022d6:	f002 fb17 	bl	8004908 <HAL_GPIO_Init>
}
 80022da:	bf00      	nop
 80022dc:	3718      	adds	r7, #24
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40023800 	.word	0x40023800
 80022e8:	40022000 	.word	0x40022000

080022ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022f0:	2003      	movs	r0, #3
 80022f2:	f000 fdf3 	bl	8002edc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022f6:	2000      	movs	r0, #0
 80022f8:	f000 f806 	bl	8002308 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80022fc:	f006 f8a6 	bl	800844c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	bd80      	pop	{r7, pc}
	...

08002308 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002310:	4b12      	ldr	r3, [pc, #72]	; (800235c <HAL_InitTick+0x54>)
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	4b12      	ldr	r3, [pc, #72]	; (8002360 <HAL_InitTick+0x58>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	4619      	mov	r1, r3
 800231a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800231e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002322:	fbb2 f3f3 	udiv	r3, r2, r3
 8002326:	4618      	mov	r0, r3
 8002328:	f000 fe0d 	bl	8002f46 <HAL_SYSTICK_Config>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e00e      	b.n	8002354 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2b0f      	cmp	r3, #15
 800233a:	d80a      	bhi.n	8002352 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800233c:	2200      	movs	r2, #0
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	f04f 30ff 	mov.w	r0, #4294967295
 8002344:	f000 fdd5 	bl	8002ef2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002348:	4a06      	ldr	r2, [pc, #24]	; (8002364 <HAL_InitTick+0x5c>)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800234e:	2300      	movs	r3, #0
 8002350:	e000      	b.n	8002354 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
}
 8002354:	4618      	mov	r0, r3
 8002356:	3708      	adds	r7, #8
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	20000054 	.word	0x20000054
 8002360:	20000050 	.word	0x20000050
 8002364:	2000004c 	.word	0x2000004c

08002368 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800236c:	4b06      	ldr	r3, [pc, #24]	; (8002388 <HAL_IncTick+0x20>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	461a      	mov	r2, r3
 8002372:	4b06      	ldr	r3, [pc, #24]	; (800238c <HAL_IncTick+0x24>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4413      	add	r3, r2
 8002378:	4a04      	ldr	r2, [pc, #16]	; (800238c <HAL_IncTick+0x24>)
 800237a:	6013      	str	r3, [r2, #0]
}
 800237c:	bf00      	nop
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	20000050 	.word	0x20000050
 800238c:	200003dc 	.word	0x200003dc

08002390 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  return uwTick;
 8002394:	4b03      	ldr	r3, [pc, #12]	; (80023a4 <HAL_GetTick+0x14>)
 8002396:	681b      	ldr	r3, [r3, #0]
}
 8002398:	4618      	mov	r0, r3
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	200003dc 	.word	0x200003dc

080023a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023b0:	f7ff ffee 	bl	8002390 <HAL_GetTick>
 80023b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c0:	d005      	beq.n	80023ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023c2:	4b09      	ldr	r3, [pc, #36]	; (80023e8 <HAL_Delay+0x40>)
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	461a      	mov	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	4413      	add	r3, r2
 80023cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023ce:	bf00      	nop
 80023d0:	f7ff ffde 	bl	8002390 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d8f7      	bhi.n	80023d0 <HAL_Delay+0x28>
  {
  }
}
 80023e0:	bf00      	nop
 80023e2:	3710      	adds	r7, #16
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	20000050 	.word	0x20000050

080023ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023f4:	2300      	movs	r3, #0
 80023f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e031      	b.n	8002466 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002406:	2b00      	cmp	r3, #0
 8002408:	d109      	bne.n	800241e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f006 f842 	bl	8008494 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	f003 0310 	and.w	r3, r3, #16
 8002426:	2b00      	cmp	r3, #0
 8002428:	d116      	bne.n	8002458 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800242e:	4b10      	ldr	r3, [pc, #64]	; (8002470 <HAL_ADC_Init+0x84>)
 8002430:	4013      	ands	r3, r2
 8002432:	f043 0202 	orr.w	r2, r3, #2
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 fb7a 	bl	8002b34 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	f023 0303 	bic.w	r3, r3, #3
 800244e:	f043 0201 	orr.w	r2, r3, #1
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	641a      	str	r2, [r3, #64]	; 0x40
 8002456:	e001      	b.n	800245c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002464:	7bfb      	ldrb	r3, [r7, #15]
}
 8002466:	4618      	mov	r0, r3
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	ffffeefd 	.word	0xffffeefd

08002474 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 800247c:	2300      	movs	r3, #0
 800247e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002486:	2b01      	cmp	r3, #1
 8002488:	d101      	bne.n	800248e <HAL_ADC_Start_IT+0x1a>
 800248a:	2302      	movs	r3, #2
 800248c:	e0a8      	b.n	80025e0 <HAL_ADC_Start_IT+0x16c>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d018      	beq.n	80024d6 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689a      	ldr	r2, [r3, #8]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f042 0201 	orr.w	r2, r2, #1
 80024b2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80024b4:	4b4d      	ldr	r3, [pc, #308]	; (80025ec <HAL_ADC_Start_IT+0x178>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a4d      	ldr	r2, [pc, #308]	; (80025f0 <HAL_ADC_Start_IT+0x17c>)
 80024ba:	fba2 2303 	umull	r2, r3, r2, r3
 80024be:	0c9a      	lsrs	r2, r3, #18
 80024c0:	4613      	mov	r3, r2
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	4413      	add	r3, r2
 80024c6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80024c8:	e002      	b.n	80024d0 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	3b01      	subs	r3, #1
 80024ce:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1f9      	bne.n	80024ca <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d17c      	bne.n	80025de <HAL_ADC_Start_IT+0x16a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024e8:	4b42      	ldr	r3, [pc, #264]	; (80025f4 <HAL_ADC_Start_IT+0x180>)
 80024ea:	4013      	ands	r3, r2
 80024ec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d007      	beq.n	8002512 <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800250a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800251a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800251e:	d106      	bne.n	800252e <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002524:	f023 0206 	bic.w	r2, r3, #6
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	645a      	str	r2, [r3, #68]	; 0x44
 800252c:	e002      	b.n	8002534 <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002544:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6859      	ldr	r1, [r3, #4]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	4b29      	ldr	r3, [pc, #164]	; (80025f8 <HAL_ADC_Start_IT+0x184>)
 8002552:	430b      	orrs	r3, r1
 8002554:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002556:	4b29      	ldr	r3, [pc, #164]	; (80025fc <HAL_ADC_Start_IT+0x188>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f003 031f 	and.w	r3, r3, #31
 800255e:	2b00      	cmp	r3, #0
 8002560:	d10f      	bne.n	8002582 <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d136      	bne.n	80025de <HAL_ADC_Start_IT+0x16a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	689a      	ldr	r2, [r3, #8]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800257e:	609a      	str	r2, [r3, #8]
 8002580:	e02d      	b.n	80025de <HAL_ADC_Start_IT+0x16a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a1e      	ldr	r2, [pc, #120]	; (8002600 <HAL_ADC_Start_IT+0x18c>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d10e      	bne.n	80025aa <HAL_ADC_Start_IT+0x136>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d107      	bne.n	80025aa <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	689a      	ldr	r2, [r3, #8]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80025a8:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80025aa:	4b14      	ldr	r3, [pc, #80]	; (80025fc <HAL_ADC_Start_IT+0x188>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f003 0310 	and.w	r3, r3, #16
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d113      	bne.n	80025de <HAL_ADC_Start_IT+0x16a>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a12      	ldr	r2, [pc, #72]	; (8002604 <HAL_ADC_Start_IT+0x190>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d10e      	bne.n	80025de <HAL_ADC_Start_IT+0x16a>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d107      	bne.n	80025de <HAL_ADC_Start_IT+0x16a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	689a      	ldr	r2, [r3, #8]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80025dc:	609a      	str	r2, [r3, #8]
      } 
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3714      	adds	r7, #20
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr
 80025ec:	20000054 	.word	0x20000054
 80025f0:	431bde83 	.word	0x431bde83
 80025f4:	fffff8fe 	.word	0xfffff8fe
 80025f8:	04000020 	.word	0x04000020
 80025fc:	40012300 	.word	0x40012300
 8002600:	40012000 	.word	0x40012000
 8002604:	40012200 	.word	0x40012200

08002608 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8002610:	2300      	movs	r3, #0
 8002612:	60fb      	str	r3, [r7, #12]
 8002614:	2300      	movs	r3, #0
 8002616:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b02      	cmp	r3, #2
 8002624:	bf0c      	ite	eq
 8002626:	2301      	moveq	r3, #1
 8002628:	2300      	movne	r3, #0
 800262a:	b2db      	uxtb	r3, r3
 800262c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f003 0320 	and.w	r3, r3, #32
 8002638:	2b20      	cmp	r3, #32
 800263a:	bf0c      	ite	eq
 800263c:	2301      	moveq	r3, #1
 800263e:	2300      	movne	r3, #0
 8002640:	b2db      	uxtb	r3, r3
 8002642:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d049      	beq.n	80026de <HAL_ADC_IRQHandler+0xd6>
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d046      	beq.n	80026de <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002654:	f003 0310 	and.w	r3, r3, #16
 8002658:	2b00      	cmp	r3, #0
 800265a:	d105      	bne.n	8002668 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002660:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d12b      	bne.n	80026ce <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800267a:	2b00      	cmp	r3, #0
 800267c:	d127      	bne.n	80026ce <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002684:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002688:	2b00      	cmp	r3, #0
 800268a:	d006      	beq.n	800269a <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002696:	2b00      	cmp	r3, #0
 8002698:	d119      	bne.n	80026ce <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 0220 	bic.w	r2, r2, #32
 80026a8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d105      	bne.n	80026ce <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	f043 0201 	orr.w	r2, r3, #1
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f005 f97c 	bl	80079cc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f06f 0212 	mvn.w	r2, #18
 80026dc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0304 	and.w	r3, r3, #4
 80026e8:	2b04      	cmp	r3, #4
 80026ea:	bf0c      	ite	eq
 80026ec:	2301      	moveq	r3, #1
 80026ee:	2300      	movne	r3, #0
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026fe:	2b80      	cmp	r3, #128	; 0x80
 8002700:	bf0c      	ite	eq
 8002702:	2301      	moveq	r3, #1
 8002704:	2300      	movne	r3, #0
 8002706:	b2db      	uxtb	r3, r3
 8002708:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d057      	beq.n	80027c0 <HAL_ADC_IRQHandler+0x1b8>
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d054      	beq.n	80027c0 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	f003 0310 	and.w	r3, r3, #16
 800271e:	2b00      	cmp	r3, #0
 8002720:	d105      	bne.n	800272e <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d139      	bne.n	80027b0 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002742:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002746:	2b00      	cmp	r3, #0
 8002748:	d006      	beq.n	8002758 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002754:	2b00      	cmp	r3, #0
 8002756:	d12b      	bne.n	80027b0 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002762:	2b00      	cmp	r3, #0
 8002764:	d124      	bne.n	80027b0 <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002770:	2b00      	cmp	r3, #0
 8002772:	d11d      	bne.n	80027b0 <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002778:	2b00      	cmp	r3, #0
 800277a:	d119      	bne.n	80027b0 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800278a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002790:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d105      	bne.n	80027b0 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a8:	f043 0201 	orr.w	r2, r3, #1
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f000 fab9 	bl	8002d28 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f06f 020c 	mvn.w	r2, #12
 80027be:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	bf0c      	ite	eq
 80027ce:	2301      	moveq	r3, #1
 80027d0:	2300      	movne	r3, #0
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e0:	2b40      	cmp	r3, #64	; 0x40
 80027e2:	bf0c      	ite	eq
 80027e4:	2301      	moveq	r3, #1
 80027e6:	2300      	movne	r3, #0
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d017      	beq.n	8002822 <HAL_ADC_IRQHandler+0x21a>
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d014      	beq.n	8002822 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b01      	cmp	r3, #1
 8002804:	d10d      	bne.n	8002822 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 f846 	bl	80028a4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f06f 0201 	mvn.w	r2, #1
 8002820:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0320 	and.w	r3, r3, #32
 800282c:	2b20      	cmp	r3, #32
 800282e:	bf0c      	ite	eq
 8002830:	2301      	moveq	r3, #1
 8002832:	2300      	movne	r3, #0
 8002834:	b2db      	uxtb	r3, r3
 8002836:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002842:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002846:	bf0c      	ite	eq
 8002848:	2301      	moveq	r3, #1
 800284a:	2300      	movne	r3, #0
 800284c:	b2db      	uxtb	r3, r3
 800284e:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d015      	beq.n	8002882 <HAL_ADC_IRQHandler+0x27a>
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d012      	beq.n	8002882 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002860:	f043 0202 	orr.w	r2, r3, #2
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f06f 0220 	mvn.w	r2, #32
 8002870:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 f820 	bl	80028b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f06f 0220 	mvn.w	r2, #32
 8002880:	601a      	str	r2, [r3, #0]
  }
}
 8002882:	bf00      	nop
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002898:	4618      	mov	r0, r3
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80028d6:	2300      	movs	r3, #0
 80028d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d101      	bne.n	80028e8 <HAL_ADC_ConfigChannel+0x1c>
 80028e4:	2302      	movs	r3, #2
 80028e6:	e115      	b.n	8002b14 <HAL_ADC_ConfigChannel+0x248>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2b09      	cmp	r3, #9
 80028f6:	d935      	bls.n	8002964 <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68d9      	ldr	r1, [r3, #12]
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	b29b      	uxth	r3, r3
 8002904:	461a      	mov	r2, r3
 8002906:	4613      	mov	r3, r2
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	4413      	add	r3, r2
 800290c:	3b1e      	subs	r3, #30
 800290e:	2207      	movs	r2, #7
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	43da      	mvns	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	400a      	ands	r2, r1
 800291c:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a7f      	ldr	r2, [pc, #508]	; (8002b20 <HAL_ADC_ConfigChannel+0x254>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d10a      	bne.n	800293e <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68d9      	ldr	r1, [r3, #12]
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	061a      	lsls	r2, r3, #24
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	430a      	orrs	r2, r1
 800293a:	60da      	str	r2, [r3, #12]
 800293c:	e035      	b.n	80029aa <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68d9      	ldr	r1, [r3, #12]
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	b29b      	uxth	r3, r3
 800294e:	4618      	mov	r0, r3
 8002950:	4603      	mov	r3, r0
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	4403      	add	r3, r0
 8002956:	3b1e      	subs	r3, #30
 8002958:	409a      	lsls	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	430a      	orrs	r2, r1
 8002960:	60da      	str	r2, [r3, #12]
 8002962:	e022      	b.n	80029aa <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	6919      	ldr	r1, [r3, #16]
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	b29b      	uxth	r3, r3
 8002970:	461a      	mov	r2, r3
 8002972:	4613      	mov	r3, r2
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	4413      	add	r3, r2
 8002978:	2207      	movs	r2, #7
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	43da      	mvns	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	400a      	ands	r2, r1
 8002986:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	6919      	ldr	r1, [r3, #16]
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	689a      	ldr	r2, [r3, #8]
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	b29b      	uxth	r3, r3
 8002998:	4618      	mov	r0, r3
 800299a:	4603      	mov	r3, r0
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	4403      	add	r3, r0
 80029a0:	409a      	lsls	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	430a      	orrs	r2, r1
 80029a8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b06      	cmp	r3, #6
 80029b0:	d824      	bhi.n	80029fc <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	4613      	mov	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	4413      	add	r3, r2
 80029c2:	3b05      	subs	r3, #5
 80029c4:	221f      	movs	r2, #31
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	43da      	mvns	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	400a      	ands	r2, r1
 80029d2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	b29b      	uxth	r3, r3
 80029e0:	4618      	mov	r0, r3
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685a      	ldr	r2, [r3, #4]
 80029e6:	4613      	mov	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	3b05      	subs	r3, #5
 80029ee:	fa00 f203 	lsl.w	r2, r0, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	635a      	str	r2, [r3, #52]	; 0x34
 80029fa:	e04c      	b.n	8002a96 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	2b0c      	cmp	r3, #12
 8002a02:	d824      	bhi.n	8002a4e <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685a      	ldr	r2, [r3, #4]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4413      	add	r3, r2
 8002a14:	3b23      	subs	r3, #35	; 0x23
 8002a16:	221f      	movs	r2, #31
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	43da      	mvns	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	400a      	ands	r2, r1
 8002a24:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	4618      	mov	r0, r3
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685a      	ldr	r2, [r3, #4]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	4413      	add	r3, r2
 8002a3e:	3b23      	subs	r3, #35	; 0x23
 8002a40:	fa00 f203 	lsl.w	r2, r0, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	631a      	str	r2, [r3, #48]	; 0x30
 8002a4c:	e023      	b.n	8002a96 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685a      	ldr	r2, [r3, #4]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4413      	add	r3, r2
 8002a5e:	3b41      	subs	r3, #65	; 0x41
 8002a60:	221f      	movs	r2, #31
 8002a62:	fa02 f303 	lsl.w	r3, r2, r3
 8002a66:	43da      	mvns	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	400a      	ands	r2, r1
 8002a6e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685a      	ldr	r2, [r3, #4]
 8002a82:	4613      	mov	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4413      	add	r3, r2
 8002a88:	3b41      	subs	r3, #65	; 0x41
 8002a8a:	fa00 f203 	lsl.w	r2, r0, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	430a      	orrs	r2, r1
 8002a94:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a22      	ldr	r2, [pc, #136]	; (8002b24 <HAL_ADC_ConfigChannel+0x258>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d109      	bne.n	8002ab4 <HAL_ADC_ConfigChannel+0x1e8>
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2b12      	cmp	r3, #18
 8002aa6:	d105      	bne.n	8002ab4 <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002aa8:	4b1f      	ldr	r3, [pc, #124]	; (8002b28 <HAL_ADC_ConfigChannel+0x25c>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	4a1e      	ldr	r2, [pc, #120]	; (8002b28 <HAL_ADC_ConfigChannel+0x25c>)
 8002aae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ab2:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a1a      	ldr	r2, [pc, #104]	; (8002b24 <HAL_ADC_ConfigChannel+0x258>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d125      	bne.n	8002b0a <HAL_ADC_ConfigChannel+0x23e>
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a17      	ldr	r2, [pc, #92]	; (8002b20 <HAL_ADC_ConfigChannel+0x254>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d003      	beq.n	8002ad0 <HAL_ADC_ConfigChannel+0x204>
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2b11      	cmp	r3, #17
 8002ace:	d11c      	bne.n	8002b0a <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002ad0:	4b15      	ldr	r3, [pc, #84]	; (8002b28 <HAL_ADC_ConfigChannel+0x25c>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	4a14      	ldr	r2, [pc, #80]	; (8002b28 <HAL_ADC_ConfigChannel+0x25c>)
 8002ad6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ada:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a0f      	ldr	r2, [pc, #60]	; (8002b20 <HAL_ADC_ConfigChannel+0x254>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d111      	bne.n	8002b0a <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002ae6:	4b11      	ldr	r3, [pc, #68]	; (8002b2c <HAL_ADC_ConfigChannel+0x260>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a11      	ldr	r2, [pc, #68]	; (8002b30 <HAL_ADC_ConfigChannel+0x264>)
 8002aec:	fba2 2303 	umull	r2, r3, r2, r3
 8002af0:	0c9a      	lsrs	r2, r3, #18
 8002af2:	4613      	mov	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002afc:	e002      	b.n	8002b04 <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	3b01      	subs	r3, #1
 8002b02:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1f9      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3714      	adds	r7, #20
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	10000012 	.word	0x10000012
 8002b24:	40012000 	.word	0x40012000
 8002b28:	40012300 	.word	0x40012300
 8002b2c:	20000054 	.word	0x20000054
 8002b30:	431bde83 	.word	0x431bde83

08002b34 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002b3c:	4b78      	ldr	r3, [pc, #480]	; (8002d20 <ADC_Init+0x1ec>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	4a77      	ldr	r2, [pc, #476]	; (8002d20 <ADC_Init+0x1ec>)
 8002b42:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002b46:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002b48:	4b75      	ldr	r3, [pc, #468]	; (8002d20 <ADC_Init+0x1ec>)
 8002b4a:	685a      	ldr	r2, [r3, #4]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	4973      	ldr	r1, [pc, #460]	; (8002d20 <ADC_Init+0x1ec>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	685a      	ldr	r2, [r3, #4]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6859      	ldr	r1, [r3, #4]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	021a      	lsls	r2, r3, #8
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	430a      	orrs	r2, r1
 8002b78:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002b88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	6859      	ldr	r1, [r3, #4]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689a      	ldr	r2, [r3, #8]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002baa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6899      	ldr	r1, [r3, #8]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	68da      	ldr	r2, [r3, #12]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc2:	4a58      	ldr	r2, [pc, #352]	; (8002d24 <ADC_Init+0x1f0>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d022      	beq.n	8002c0e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	689a      	ldr	r2, [r3, #8]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002bd6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6899      	ldr	r1, [r3, #8]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	430a      	orrs	r2, r1
 8002be8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	689a      	ldr	r2, [r3, #8]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002bf8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	6899      	ldr	r1, [r3, #8]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	609a      	str	r2, [r3, #8]
 8002c0c:	e00f      	b.n	8002c2e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c2c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 0202 	bic.w	r2, r2, #2
 8002c3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	6899      	ldr	r1, [r3, #8]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	005a      	lsls	r2, r3, #1
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d01b      	beq.n	8002c94 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	685a      	ldr	r2, [r3, #4]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c6a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	685a      	ldr	r2, [r3, #4]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002c7a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6859      	ldr	r1, [r3, #4]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c86:	3b01      	subs	r3, #1
 8002c88:	035a      	lsls	r2, r3, #13
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	605a      	str	r2, [r3, #4]
 8002c92:	e007      	b.n	8002ca4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	685a      	ldr	r2, [r3, #4]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ca2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002cb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	051a      	lsls	r2, r3, #20
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	689a      	ldr	r2, [r3, #8]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002cd8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6899      	ldr	r1, [r3, #8]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ce6:	025a      	lsls	r2, r3, #9
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	430a      	orrs	r2, r1
 8002cee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	689a      	ldr	r2, [r3, #8]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cfe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	6899      	ldr	r1, [r3, #8]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	029a      	lsls	r2, r3, #10
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	430a      	orrs	r2, r1
 8002d12:	609a      	str	r2, [r3, #8]
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr
 8002d20:	40012300 	.word	0x40012300
 8002d24:	0f000001 	.word	0x0f000001

08002d28 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d4c:	4b0b      	ldr	r3, [pc, #44]	; (8002d7c <__NVIC_SetPriorityGrouping+0x40>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d52:	68ba      	ldr	r2, [r7, #8]
 8002d54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d58:	4013      	ands	r3, r2
 8002d5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002d64:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <__NVIC_SetPriorityGrouping+0x44>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d6a:	4a04      	ldr	r2, [pc, #16]	; (8002d7c <__NVIC_SetPriorityGrouping+0x40>)
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	60d3      	str	r3, [r2, #12]
}
 8002d70:	bf00      	nop
 8002d72:	3714      	adds	r7, #20
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr
 8002d7c:	e000ed00 	.word	0xe000ed00
 8002d80:	05fa0000 	.word	0x05fa0000

08002d84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d88:	4b04      	ldr	r3, [pc, #16]	; (8002d9c <__NVIC_GetPriorityGrouping+0x18>)
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	0a1b      	lsrs	r3, r3, #8
 8002d8e:	f003 0307 	and.w	r3, r3, #7
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr
 8002d9c:	e000ed00 	.word	0xe000ed00

08002da0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	4603      	mov	r3, r0
 8002da8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	db0b      	blt.n	8002dca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002db2:	79fb      	ldrb	r3, [r7, #7]
 8002db4:	f003 021f 	and.w	r2, r3, #31
 8002db8:	4907      	ldr	r1, [pc, #28]	; (8002dd8 <__NVIC_EnableIRQ+0x38>)
 8002dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dbe:	095b      	lsrs	r3, r3, #5
 8002dc0:	2001      	movs	r0, #1
 8002dc2:	fa00 f202 	lsl.w	r2, r0, r2
 8002dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dca:	bf00      	nop
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	e000e100 	.word	0xe000e100

08002ddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	4603      	mov	r3, r0
 8002de4:	6039      	str	r1, [r7, #0]
 8002de6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	db0a      	blt.n	8002e06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	b2da      	uxtb	r2, r3
 8002df4:	490c      	ldr	r1, [pc, #48]	; (8002e28 <__NVIC_SetPriority+0x4c>)
 8002df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dfa:	0112      	lsls	r2, r2, #4
 8002dfc:	b2d2      	uxtb	r2, r2
 8002dfe:	440b      	add	r3, r1
 8002e00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e04:	e00a      	b.n	8002e1c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	b2da      	uxtb	r2, r3
 8002e0a:	4908      	ldr	r1, [pc, #32]	; (8002e2c <__NVIC_SetPriority+0x50>)
 8002e0c:	79fb      	ldrb	r3, [r7, #7]
 8002e0e:	f003 030f 	and.w	r3, r3, #15
 8002e12:	3b04      	subs	r3, #4
 8002e14:	0112      	lsls	r2, r2, #4
 8002e16:	b2d2      	uxtb	r2, r2
 8002e18:	440b      	add	r3, r1
 8002e1a:	761a      	strb	r2, [r3, #24]
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr
 8002e28:	e000e100 	.word	0xe000e100
 8002e2c:	e000ed00 	.word	0xe000ed00

08002e30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b089      	sub	sp, #36	; 0x24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f003 0307 	and.w	r3, r3, #7
 8002e42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	f1c3 0307 	rsb	r3, r3, #7
 8002e4a:	2b04      	cmp	r3, #4
 8002e4c:	bf28      	it	cs
 8002e4e:	2304      	movcs	r3, #4
 8002e50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	3304      	adds	r3, #4
 8002e56:	2b06      	cmp	r3, #6
 8002e58:	d902      	bls.n	8002e60 <NVIC_EncodePriority+0x30>
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	3b03      	subs	r3, #3
 8002e5e:	e000      	b.n	8002e62 <NVIC_EncodePriority+0x32>
 8002e60:	2300      	movs	r3, #0
 8002e62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e64:	f04f 32ff 	mov.w	r2, #4294967295
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6e:	43da      	mvns	r2, r3
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	401a      	ands	r2, r3
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e78:	f04f 31ff 	mov.w	r1, #4294967295
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e82:	43d9      	mvns	r1, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e88:	4313      	orrs	r3, r2
         );
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3724      	adds	r7, #36	; 0x24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
	...

08002e98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ea8:	d301      	bcc.n	8002eae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e00f      	b.n	8002ece <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002eae:	4a0a      	ldr	r2, [pc, #40]	; (8002ed8 <SysTick_Config+0x40>)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002eb6:	210f      	movs	r1, #15
 8002eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ebc:	f7ff ff8e 	bl	8002ddc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ec0:	4b05      	ldr	r3, [pc, #20]	; (8002ed8 <SysTick_Config+0x40>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ec6:	4b04      	ldr	r3, [pc, #16]	; (8002ed8 <SysTick_Config+0x40>)
 8002ec8:	2207      	movs	r2, #7
 8002eca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	e000e010 	.word	0xe000e010

08002edc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f7ff ff29 	bl	8002d3c <__NVIC_SetPriorityGrouping>
}
 8002eea:	bf00      	nop
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b086      	sub	sp, #24
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	4603      	mov	r3, r0
 8002efa:	60b9      	str	r1, [r7, #8]
 8002efc:	607a      	str	r2, [r7, #4]
 8002efe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002f00:	2300      	movs	r3, #0
 8002f02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f04:	f7ff ff3e 	bl	8002d84 <__NVIC_GetPriorityGrouping>
 8002f08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	68b9      	ldr	r1, [r7, #8]
 8002f0e:	6978      	ldr	r0, [r7, #20]
 8002f10:	f7ff ff8e 	bl	8002e30 <NVIC_EncodePriority>
 8002f14:	4602      	mov	r2, r0
 8002f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f1a:	4611      	mov	r1, r2
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7ff ff5d 	bl	8002ddc <__NVIC_SetPriority>
}
 8002f22:	bf00      	nop
 8002f24:	3718      	adds	r7, #24
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b082      	sub	sp, #8
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	4603      	mov	r3, r0
 8002f32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff ff31 	bl	8002da0 <__NVIC_EnableIRQ>
}
 8002f3e:	bf00      	nop
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b082      	sub	sp, #8
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f7ff ffa2 	bl	8002e98 <SysTick_Config>
 8002f54:	4603      	mov	r3, r0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
	...

08002f60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f6c:	f7ff fa10 	bl	8002390 <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d101      	bne.n	8002f7c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e099      	b.n	80030b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2202      	movs	r2, #2
 8002f88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f022 0201 	bic.w	r2, r2, #1
 8002f9a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f9c:	e00f      	b.n	8002fbe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f9e:	f7ff f9f7 	bl	8002390 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b05      	cmp	r3, #5
 8002faa:	d908      	bls.n	8002fbe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2220      	movs	r2, #32
 8002fb0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2203      	movs	r2, #3
 8002fb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e078      	b.n	80030b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1e8      	bne.n	8002f9e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002fd4:	697a      	ldr	r2, [r7, #20]
 8002fd6:	4b38      	ldr	r3, [pc, #224]	; (80030b8 <HAL_DMA_Init+0x158>)
 8002fd8:	4013      	ands	r3, r2
 8002fda:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685a      	ldr	r2, [r3, #4]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ff6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003002:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	4313      	orrs	r3, r2
 800300e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003014:	2b04      	cmp	r3, #4
 8003016:	d107      	bne.n	8003028 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003020:	4313      	orrs	r3, r2
 8003022:	697a      	ldr	r2, [r7, #20]
 8003024:	4313      	orrs	r3, r2
 8003026:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	697a      	ldr	r2, [r7, #20]
 800302e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	f023 0307 	bic.w	r3, r3, #7
 800303e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	4313      	orrs	r3, r2
 8003048:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304e:	2b04      	cmp	r3, #4
 8003050:	d117      	bne.n	8003082 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	4313      	orrs	r3, r2
 800305a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00e      	beq.n	8003082 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 f8bd 	bl	80031e4 <DMA_CheckFifoParam>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d008      	beq.n	8003082 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2240      	movs	r2, #64	; 0x40
 8003074:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2201      	movs	r2, #1
 800307a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800307e:	2301      	movs	r3, #1
 8003080:	e016      	b.n	80030b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	697a      	ldr	r2, [r7, #20]
 8003088:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 f874 	bl	8003178 <DMA_CalcBaseAndBitshift>
 8003090:	4603      	mov	r3, r0
 8003092:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003098:	223f      	movs	r2, #63	; 0x3f
 800309a:	409a      	lsls	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2201      	movs	r2, #1
 80030aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3718      	adds	r7, #24
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	e010803f 	.word	0xe010803f

080030bc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d101      	bne.n	80030ce <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e050      	b.n	8003170 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d101      	bne.n	80030de <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80030da:	2302      	movs	r3, #2
 80030dc:	e048      	b.n	8003170 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f022 0201 	bic.w	r2, r2, #1
 80030ec:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2200      	movs	r2, #0
 80030f4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2200      	movs	r2, #0
 80030fc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2200      	movs	r2, #0
 8003104:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2200      	movs	r2, #0
 800310c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2200      	movs	r2, #0
 8003114:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2221      	movs	r2, #33	; 0x21
 800311c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 f82a 	bl	8003178 <DMA_CalcBaseAndBitshift>
 8003124:	4603      	mov	r3, r0
 8003126:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800312c:	223f      	movs	r2, #63	; 0x3f
 800312e:	409a      	lsls	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	3710      	adds	r7, #16
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	b2db      	uxtb	r3, r3
 8003186:	3b10      	subs	r3, #16
 8003188:	4a13      	ldr	r2, [pc, #76]	; (80031d8 <DMA_CalcBaseAndBitshift+0x60>)
 800318a:	fba2 2303 	umull	r2, r3, r2, r3
 800318e:	091b      	lsrs	r3, r3, #4
 8003190:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003192:	4a12      	ldr	r2, [pc, #72]	; (80031dc <DMA_CalcBaseAndBitshift+0x64>)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	4413      	add	r3, r2
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	461a      	mov	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2b03      	cmp	r3, #3
 80031a4:	d908      	bls.n	80031b8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	461a      	mov	r2, r3
 80031ac:	4b0c      	ldr	r3, [pc, #48]	; (80031e0 <DMA_CalcBaseAndBitshift+0x68>)
 80031ae:	4013      	ands	r3, r2
 80031b0:	1d1a      	adds	r2, r3, #4
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	659a      	str	r2, [r3, #88]	; 0x58
 80031b6:	e006      	b.n	80031c6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	461a      	mov	r2, r3
 80031be:	4b08      	ldr	r3, [pc, #32]	; (80031e0 <DMA_CalcBaseAndBitshift+0x68>)
 80031c0:	4013      	ands	r3, r2
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3714      	adds	r7, #20
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	aaaaaaab 	.word	0xaaaaaaab
 80031dc:	0800a6f4 	.word	0x0800a6f4
 80031e0:	fffffc00 	.word	0xfffffc00

080031e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031ec:	2300      	movs	r3, #0
 80031ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d11f      	bne.n	800323e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	2b03      	cmp	r3, #3
 8003202:	d855      	bhi.n	80032b0 <DMA_CheckFifoParam+0xcc>
 8003204:	a201      	add	r2, pc, #4	; (adr r2, 800320c <DMA_CheckFifoParam+0x28>)
 8003206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800320a:	bf00      	nop
 800320c:	0800321d 	.word	0x0800321d
 8003210:	0800322f 	.word	0x0800322f
 8003214:	0800321d 	.word	0x0800321d
 8003218:	080032b1 	.word	0x080032b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003220:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d045      	beq.n	80032b4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800322c:	e042      	b.n	80032b4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003232:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003236:	d13f      	bne.n	80032b8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800323c:	e03c      	b.n	80032b8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003246:	d121      	bne.n	800328c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	2b03      	cmp	r3, #3
 800324c:	d836      	bhi.n	80032bc <DMA_CheckFifoParam+0xd8>
 800324e:	a201      	add	r2, pc, #4	; (adr r2, 8003254 <DMA_CheckFifoParam+0x70>)
 8003250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003254:	08003265 	.word	0x08003265
 8003258:	0800326b 	.word	0x0800326b
 800325c:	08003265 	.word	0x08003265
 8003260:	0800327d 	.word	0x0800327d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	73fb      	strb	r3, [r7, #15]
      break;
 8003268:	e02f      	b.n	80032ca <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d024      	beq.n	80032c0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800327a:	e021      	b.n	80032c0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003280:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003284:	d11e      	bne.n	80032c4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800328a:	e01b      	b.n	80032c4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	2b02      	cmp	r3, #2
 8003290:	d902      	bls.n	8003298 <DMA_CheckFifoParam+0xb4>
 8003292:	2b03      	cmp	r3, #3
 8003294:	d003      	beq.n	800329e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003296:	e018      	b.n	80032ca <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	73fb      	strb	r3, [r7, #15]
      break;
 800329c:	e015      	b.n	80032ca <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00e      	beq.n	80032c8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	73fb      	strb	r3, [r7, #15]
      break;
 80032ae:	e00b      	b.n	80032c8 <DMA_CheckFifoParam+0xe4>
      break;
 80032b0:	bf00      	nop
 80032b2:	e00a      	b.n	80032ca <DMA_CheckFifoParam+0xe6>
      break;
 80032b4:	bf00      	nop
 80032b6:	e008      	b.n	80032ca <DMA_CheckFifoParam+0xe6>
      break;
 80032b8:	bf00      	nop
 80032ba:	e006      	b.n	80032ca <DMA_CheckFifoParam+0xe6>
      break;
 80032bc:	bf00      	nop
 80032be:	e004      	b.n	80032ca <DMA_CheckFifoParam+0xe6>
      break;
 80032c0:	bf00      	nop
 80032c2:	e002      	b.n	80032ca <DMA_CheckFifoParam+0xe6>
      break;   
 80032c4:	bf00      	nop
 80032c6:	e000      	b.n	80032ca <DMA_CheckFifoParam+0xe6>
      break;
 80032c8:	bf00      	nop
    }
  } 
  
  return status; 
 80032ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3714      	adds	r7, #20
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e049      	b.n	800337e <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d106      	bne.n	8003304 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f005 f8ee 	bl	80084e0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2202      	movs	r2, #2
 8003308:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685a      	ldr	r2, [r3, #4]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	430a      	orrs	r2, r1
 8003320:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003328:	f023 0107 	bic.w	r1, r3, #7
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	430a      	orrs	r2, r1
 8003336:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800333e:	4b12      	ldr	r3, [pc, #72]	; (8003388 <HAL_DMA2D_Init+0xb0>)
 8003340:	4013      	ands	r3, r2
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	68d1      	ldr	r1, [r2, #12]
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	6812      	ldr	r2, [r2, #0]
 800334a:	430b      	orrs	r3, r1
 800334c:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003354:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	051a      	lsls	r2, r3, #20
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	055b      	lsls	r3, r3, #21
 8003364:	431a      	orrs	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	430a      	orrs	r2, r1
 800336c:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	ffffc000 	.word	0xffffc000

0800338c <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af02      	add	r7, sp, #8
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
 8003398:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d101      	bne.n	80033a8 <HAL_DMA2D_Start+0x1c>
 80033a4:	2302      	movs	r3, #2
 80033a6:	e018      	b.n	80033da <HAL_DMA2D_Start+0x4e>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2202      	movs	r2, #2
 80033b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	9300      	str	r3, [sp, #0]
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	68b9      	ldr	r1, [r7, #8]
 80033c2:	68f8      	ldr	r0, [r7, #12]
 80033c4:	f000 f994 	bl	80036f0 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f042 0201 	orr.w	r2, r2, #1
 80033d6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b086      	sub	sp, #24
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
 80033ea:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80033ec:	2300      	movs	r3, #0
 80033ee:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d056      	beq.n	80034ac <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 80033fe:	f7fe ffc7 	bl	8002390 <HAL_GetTick>
 8003402:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003404:	e04b      	b.n	800349e <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003414:	2b00      	cmp	r3, #0
 8003416:	d023      	beq.n	8003460 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f003 0320 	and.w	r3, r3, #32
 800341e:	2b00      	cmp	r3, #0
 8003420:	d005      	beq.n	800342e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003426:	f043 0202 	orr.w	r2, r3, #2
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	2b00      	cmp	r3, #0
 8003436:	d005      	beq.n	8003444 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800343c:	f043 0201 	orr.w	r2, r3, #1
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2221      	movs	r2, #33	; 0x21
 800344a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2204      	movs	r2, #4
 8003450:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e0a5      	b.n	80035ac <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003466:	d01a      	beq.n	800349e <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8003468:	f7fe ff92 	bl	8002390 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	683a      	ldr	r2, [r7, #0]
 8003474:	429a      	cmp	r2, r3
 8003476:	d302      	bcc.n	800347e <HAL_DMA2D_PollForTransfer+0x9c>
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10f      	bne.n	800349e <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003482:	f043 0220 	orr.w	r2, r3, #32
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2203      	movs	r2, #3
 800348e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e086      	b.n	80035ac <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f003 0302 	and.w	r3, r3, #2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d0ac      	beq.n	8003406 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	69db      	ldr	r3, [r3, #28]
 80034b2:	f003 0320 	and.w	r3, r3, #32
 80034b6:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034be:	f003 0320 	and.w	r3, r3, #32
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d061      	beq.n	8003592 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80034ce:	f7fe ff5f 	bl	8002390 <HAL_GetTick>
 80034d2:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80034d4:	e056      	b.n	8003584 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d02e      	beq.n	8003546 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f003 0308 	and.w	r3, r3, #8
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d005      	beq.n	80034fe <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f6:	f043 0204 	orr.w	r2, r3, #4
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f003 0320 	and.w	r3, r3, #32
 8003504:	2b00      	cmp	r3, #0
 8003506:	d005      	beq.n	8003514 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800350c:	f043 0202 	orr.w	r2, r3, #2
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b00      	cmp	r3, #0
 800351c:	d005      	beq.n	800352a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003522:	f043 0201 	orr.w	r2, r3, #1
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2229      	movs	r2, #41	; 0x29
 8003530:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2204      	movs	r2, #4
 8003536:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e032      	b.n	80035ac <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800354c:	d01a      	beq.n	8003584 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800354e:	f7fe ff1f 	bl	8002390 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	683a      	ldr	r2, [r7, #0]
 800355a:	429a      	cmp	r2, r3
 800355c:	d302      	bcc.n	8003564 <HAL_DMA2D_PollForTransfer+0x182>
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d10f      	bne.n	8003584 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003568:	f043 0220 	orr.w	r2, r3, #32
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2203      	movs	r2, #3
 8003574:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e013      	b.n	80035ac <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f003 0310 	and.w	r3, r3, #16
 800358e:	2b00      	cmp	r3, #0
 8003590:	d0a1      	beq.n	80034d6 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2212      	movs	r2, #18
 8003598:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3718      	adds	r7, #24
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b087      	sub	sp, #28
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d101      	bne.n	80035d4 <HAL_DMA2D_ConfigLayer+0x20>
 80035d0:	2302      	movs	r3, #2
 80035d2:	e084      	b.n	80036de <HAL_DMA2D_ConfigLayer+0x12a>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2202      	movs	r2, #2
 80035e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	4613      	mov	r3, r2
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	4413      	add	r3, r2
 80035ec:	00db      	lsls	r3, r3, #3
 80035ee:	3320      	adds	r3, #32
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	4413      	add	r3, r2
 80035f4:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	685a      	ldr	r2, [r3, #4]
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	041b      	lsls	r3, r3, #16
 8003600:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8003608:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8003610:	4313      	orrs	r3, r2
 8003612:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8003614:	4b35      	ldr	r3, [pc, #212]	; (80036ec <HAL_DMA2D_ConfigLayer+0x138>)
 8003616:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	2b0a      	cmp	r3, #10
 800361e:	d003      	beq.n	8003628 <HAL_DMA2D_ConfigLayer+0x74>
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	2b09      	cmp	r3, #9
 8003626:	d107      	bne.n	8003638 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003630:	697a      	ldr	r2, [r7, #20]
 8003632:	4313      	orrs	r3, r2
 8003634:	617b      	str	r3, [r7, #20]
 8003636:	e005      	b.n	8003644 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	061b      	lsls	r3, r3, #24
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	4313      	orrs	r3, r2
 8003642:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d120      	bne.n	800368c <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	43db      	mvns	r3, r3
 8003654:	ea02 0103 	and.w	r1, r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	697a      	ldr	r2, [r7, #20]
 800365e:	430a      	orrs	r2, r1
 8003660:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	6812      	ldr	r2, [r2, #0]
 800366a:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	2b0a      	cmp	r3, #10
 8003672:	d003      	beq.n	800367c <HAL_DMA2D_ConfigLayer+0xc8>
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	2b09      	cmp	r3, #9
 800367a:	d127      	bne.n	80036cc <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	68da      	ldr	r2, [r3, #12]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003688:	629a      	str	r2, [r3, #40]	; 0x28
 800368a:	e01f      	b.n	80036cc <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	69da      	ldr	r2, [r3, #28]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	43db      	mvns	r3, r3
 8003696:	ea02 0103 	and.w	r1, r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	6812      	ldr	r2, [r2, #0]
 80036ac:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	2b0a      	cmp	r3, #10
 80036b4:	d003      	beq.n	80036be <HAL_DMA2D_ConfigLayer+0x10a>
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	2b09      	cmp	r3, #9
 80036bc:	d106      	bne.n	80036cc <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	68da      	ldr	r2, [r3, #12]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80036ca:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	371c      	adds	r7, #28
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	ff33000f 	.word	0xff33000f

080036f0 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b08b      	sub	sp, #44	; 0x2c
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
 80036fc:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003704:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	041a      	lsls	r2, r3, #16
 800370c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800370e:	431a      	orrs	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	430a      	orrs	r2, r1
 8003716:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003728:	d174      	bne.n	8003814 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003730:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003738:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003740:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	b2db      	uxtb	r3, r3
 8003746:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d108      	bne.n	8003762 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	431a      	orrs	r2, r3
 8003756:	6a3b      	ldr	r3, [r7, #32]
 8003758:	4313      	orrs	r3, r2
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	4313      	orrs	r3, r2
 800375e:	627b      	str	r3, [r7, #36]	; 0x24
 8003760:	e053      	b.n	800380a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d106      	bne.n	8003778 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	4313      	orrs	r3, r2
 8003770:	697a      	ldr	r2, [r7, #20]
 8003772:	4313      	orrs	r3, r2
 8003774:	627b      	str	r3, [r7, #36]	; 0x24
 8003776:	e048      	b.n	800380a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	2b02      	cmp	r3, #2
 800377e:	d111      	bne.n	80037a4 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	0cdb      	lsrs	r3, r3, #19
 8003784:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	0a9b      	lsrs	r3, r3, #10
 800378a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	08db      	lsrs	r3, r3, #3
 8003790:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	015a      	lsls	r2, r3, #5
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	02db      	lsls	r3, r3, #11
 800379a:	4313      	orrs	r3, r2
 800379c:	697a      	ldr	r2, [r7, #20]
 800379e:	4313      	orrs	r3, r2
 80037a0:	627b      	str	r3, [r7, #36]	; 0x24
 80037a2:	e032      	b.n	800380a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	2b03      	cmp	r3, #3
 80037aa:	d117      	bne.n	80037dc <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80037ac:	6a3b      	ldr	r3, [r7, #32]
 80037ae:	0fdb      	lsrs	r3, r3, #31
 80037b0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	0cdb      	lsrs	r3, r3, #19
 80037b6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	0adb      	lsrs	r3, r3, #11
 80037bc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	08db      	lsrs	r3, r3, #3
 80037c2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	015a      	lsls	r2, r3, #5
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	029b      	lsls	r3, r3, #10
 80037cc:	431a      	orrs	r2, r3
 80037ce:	6a3b      	ldr	r3, [r7, #32]
 80037d0:	03db      	lsls	r3, r3, #15
 80037d2:	4313      	orrs	r3, r2
 80037d4:	697a      	ldr	r2, [r7, #20]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	627b      	str	r3, [r7, #36]	; 0x24
 80037da:	e016      	b.n	800380a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80037dc:	6a3b      	ldr	r3, [r7, #32]
 80037de:	0f1b      	lsrs	r3, r3, #28
 80037e0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	0d1b      	lsrs	r3, r3, #20
 80037e6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	0b1b      	lsrs	r3, r3, #12
 80037ec:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	091b      	lsrs	r3, r3, #4
 80037f2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	011a      	lsls	r2, r3, #4
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	021b      	lsls	r3, r3, #8
 80037fc:	431a      	orrs	r2, r3
 80037fe:	6a3b      	ldr	r3, [r7, #32]
 8003800:	031b      	lsls	r3, r3, #12
 8003802:	4313      	orrs	r3, r2
 8003804:	697a      	ldr	r2, [r7, #20]
 8003806:	4313      	orrs	r3, r2
 8003808:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003810:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003812:	e003      	b.n	800381c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68ba      	ldr	r2, [r7, #8]
 800381a:	60da      	str	r2, [r3, #12]
}
 800381c:	bf00      	nop
 800381e:	372c      	adds	r7, #44	; 0x2c
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
 8003834:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	019a      	lsls	r2, r3, #6
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	431a      	orrs	r2, r3
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	021b      	lsls	r3, r3, #8
 8003842:	431a      	orrs	r2, r3
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	041b      	lsls	r3, r3, #16
 8003848:	431a      	orrs	r2, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800384e:	bf00      	nop
 8003850:	3714      	adds	r7, #20
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr

0800385a <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b086      	sub	sp, #24
 800385e:	af00      	add	r7, sp, #0
 8003860:	60f8      	str	r0, [r7, #12]
 8003862:	60b9      	str	r1, [r7, #8]
 8003864:	607a      	str	r2, [r7, #4]
 8003866:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8003868:	f7fe fd92 	bl	8002390 <HAL_GetTick>
 800386c:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800386e:	e009      	b.n	8003884 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 8003870:	f7fe fd8e 	bl	8002390 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800387e:	d901      	bls.n	8003884 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e015      	b.n	80038b0 <DSI_ShortWrite+0x56>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b00      	cmp	r3, #0
 8003890:	d0ee      	beq.n	8003870 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	019a      	lsls	r2, r3, #6
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	431a      	orrs	r2, r3
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	021b      	lsls	r3, r3, #8
 800389e:	ea42 0103 	orr.w	r1, r2, r3
 80038a2:	6a3b      	ldr	r3, [r7, #32]
 80038a4:	041a      	lsls	r2, r3, #16
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 80038ae:	2300      	movs	r3, #0
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3718      	adds	r7, #24
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b088      	sub	sp, #32
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d101      	bne.n	80038cc <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e106      	b.n	8003ada <HAL_DSI_Init+0x222>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	7c5b      	ldrb	r3, [r3, #17]
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d102      	bne.n	80038dc <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f004 fe22 	bl	8008520 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2203      	movs	r2, #3
 80038e0:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 80038e2:	2300      	movs	r3, #0
 80038e4:	613b      	str	r3, [r7, #16]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80038f6:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003902:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003906:	613b      	str	r3, [r7, #16]
 8003908:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800390a:	f7fe fd41 	bl	8002390 <HAL_GetTick>
 800390e:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003910:	e009      	b.n	8003926 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003912:	f7fe fd3d 	bl	8002390 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003920:	d901      	bls.n	8003926 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e0d9      	b.n	8003ada <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800392e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d0ed      	beq.n	8003912 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	4b68      	ldr	r3, [pc, #416]	; (8003ae4 <HAL_DSI_Init+0x22c>)
 8003944:	400b      	ands	r3, r1
 8003946:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	009a      	lsls	r2, r3, #2
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	02db      	lsls	r3, r3, #11
 800395e:	431a      	orrs	r2, r3
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	041b      	lsls	r3, r3, #16
 8003966:	431a      	orrs	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8003972:	2300      	movs	r3, #0
 8003974:	60fb      	str	r3, [r7, #12]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f042 0201 	orr.w	r2, r2, #1
 8003986:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	60fb      	str	r3, [r7, #12]
 8003998:	68fb      	ldr	r3, [r7, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800399a:	f7fe fcf9 	bl	8002390 <HAL_GetTick>
 800399e:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80039a0:	e009      	b.n	80039b6 <HAL_DSI_Init+0xfe>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80039a2:	f7fe fcf5 	bl	8002390 <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039b0:	d901      	bls.n	80039b6 <HAL_DSI_Init+0xfe>
    {
      return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e091      	b.n	8003ada <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80039be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d0ed      	beq.n	80039a2 <HAL_DSI_Init+0xea>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f042 0206 	orr.w	r2, r2, #6
 80039d6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f022 0203 	bic.w	r2, r2, #3
 80039ea:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	431a      	orrs	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f042 0201 	orr.w	r2, r2, #1
 8003a04:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f022 0203 	bic.w	r2, r2, #3
 8003a18:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	68da      	ldr	r2, [r3, #12]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	689a      	ldr	r2, [r3, #8]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a40:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6899      	ldr	r1, [r3, #8]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689a      	ldr	r2, [r3, #8]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	430a      	orrs	r2, r1
 8003a52:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d002      	beq.n	8003a62 <HAL_DSI_Init+0x1aa>
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	e000      	b.n	8003a64 <HAL_DSI_Init+0x1ac>
 8003a62:	2301      	movs	r3, #1
 8003a64:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	4a1f      	ldr	r2, [pc, #124]	; (8003ae8 <HAL_DSI_Init+0x230>)
 8003a6a:	fb02 f203 	mul.w	r2, r2, r3
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f003 0303 	and.w	r3, r3, #3
 8003a76:	409a      	lsls	r2, r3
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8003a80:	fb01 f303 	mul.w	r3, r1, r3
 8003a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a88:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003a9a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	430a      	orrs	r2, r1
 8003aae:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	619a      	str	r2, [r3, #24]

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3720      	adds	r7, #32
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	fffc8603 	.word	0xfffc8603
 8003ae8:	003d0900 	.word	0x003d0900

08003aec <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d101      	bne.n	8003afe <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e066      	b.n	8003bcc <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2203      	movs	r2, #3
 8003b02:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8003b04:	2300      	movs	r3, #0
 8003b06:	617b      	str	r3, [r7, #20]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 0208 	bic.w	r2, r2, #8
 8003b18:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003b24:	f003 0308 	and.w	r3, r3, #8
 8003b28:	617b      	str	r3, [r7, #20]
 8003b2a:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	613b      	str	r3, [r7, #16]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	685a      	ldr	r2, [r3, #4]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f022 0201 	bic.w	r2, r2, #1
 8003b3e:	605a      	str	r2, [r3, #4]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	613b      	str	r3, [r7, #16]
 8003b4c:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f022 0206 	bic.w	r2, r2, #6
 8003b5e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 8003b62:	2300      	movs	r3, #0
 8003b64:	60fb      	str	r3, [r7, #12]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f022 0201 	bic.w	r2, r2, #1
 8003b76:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	60fb      	str	r3, [r7, #12]
 8003b88:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	60bb      	str	r3, [r7, #8]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003b9e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003baa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bae:	60bb      	str	r3, [r7, #8]
 8003bb0:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f004 fcf8 	bl	80085a8 <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3718      	adds	r7, #24
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @ref DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	7c1b      	ldrb	r3, [r3, #16]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d101      	bne.n	8003bea <HAL_DSI_ConfigErrorMonitor+0x16>
 8003be6:	2302      	movs	r3, #2
 8003be8:	e0aa      	b.n	8003d40 <HAL_DSI_ConfigErrorMonitor+0x16c>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2201      	movs	r2, #1
 8003bee:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d00a      	beq.n	8003c2a <HAL_DSI_ConfigErrorMonitor+0x56>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c24:	430b      	orrs	r3, r1
 8003c26:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d009      	beq.n	8003c48 <HAL_DSI_ConfigErrorMonitor+0x74>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8003c44:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	f003 0304 	and.w	r3, r3, #4
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d009      	beq.n	8003c66 <HAL_DSI_ConfigErrorMonitor+0x92>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f042 0201 	orr.w	r2, r2, #1
 8003c62:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	f003 0308 	and.w	r3, r3, #8
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d009      	beq.n	8003c84 <HAL_DSI_ConfigErrorMonitor+0xb0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f042 0202 	orr.w	r2, r2, #2
 8003c80:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	f003 0310 	and.w	r3, r3, #16
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d009      	beq.n	8003ca2 <HAL_DSI_ConfigErrorMonitor+0xce>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f042 020c 	orr.w	r2, r2, #12
 8003c9e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	f003 0320 	and.w	r3, r3, #32
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d009      	beq.n	8003cc0 <HAL_DSI_ConfigErrorMonitor+0xec>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f042 0210 	orr.w	r2, r2, #16
 8003cbc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d009      	beq.n	8003cde <HAL_DSI_ConfigErrorMonitor+0x10a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f042 0220 	orr.w	r2, r2, #32
 8003cda:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d009      	beq.n	8003cfc <HAL_DSI_ConfigErrorMonitor+0x128>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cf8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d009      	beq.n	8003d1a <HAL_DSI_ConfigErrorMonitor+0x146>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d16:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d009      	beq.n	8003d38 <HAL_DSI_ConfigErrorMonitor+0x164>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8003d34:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	7c1b      	ldrb	r3, [r3, #16]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d101      	bne.n	8003d62 <HAL_DSI_SetGenericVCID+0x16>
 8003d5e:	2302      	movs	r3, #2
 8003d60:	e016      	b.n	8003d90 <HAL_DSI_SetGenericVCID+0x44>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2201      	movs	r2, #1
 8003d66:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f022 0203 	bic.w	r2, r2, #3
 8003d76:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	683a      	ldr	r2, [r7, #0]
 8003d84:	430a      	orrs	r2, r1
 8003d86:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	7c1b      	ldrb	r3, [r3, #16]
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d101      	bne.n	8003db2 <HAL_DSI_ConfigVideoMode+0x16>
 8003dae:	2302      	movs	r3, #2
 8003db0:	e1ee      	b.n	8004190 <HAL_DSI_ConfigVideoMode+0x3f4>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f022 0201 	bic.w	r2, r2, #1
 8003dc6:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 0201 	bic.w	r2, r2, #1
 8003dd8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f022 0203 	bic.w	r2, r2, #3
 8003dea:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	68da      	ldr	r2, [r3, #12]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	430a      	orrs	r2, r1
 8003dfc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	4b8b      	ldr	r3, [pc, #556]	; (8004038 <HAL_DSI_ConfigVideoMode+0x29c>)
 8003e0a:	400b      	ands	r3, r1
 8003e0c:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	691a      	ldr	r2, [r3, #16]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	4b84      	ldr	r3, [pc, #528]	; (800403c <HAL_DSI_ConfigVideoMode+0x2a0>)
 8003e2c:	400b      	ands	r3, r1
 8003e2e:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	695a      	ldr	r2, [r3, #20]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	4b7b      	ldr	r3, [pc, #492]	; (800403c <HAL_DSI_ConfigVideoMode+0x2a0>)
 8003e4e:	400b      	ands	r3, r1
 8003e50:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	699a      	ldr	r2, [r3, #24]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	430a      	orrs	r2, r1
 8003e62:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68da      	ldr	r2, [r3, #12]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f022 0203 	bic.w	r2, r2, #3
 8003e72:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68d9      	ldr	r1, [r3, #12]
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	430a      	orrs	r2, r1
 8003e84:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	695a      	ldr	r2, [r3, #20]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 0207 	bic.w	r2, r2, #7
 8003e94:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	6959      	ldr	r1, [r3, #20]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	6a1b      	ldr	r3, [r3, #32]
 8003ea4:	431a      	orrs	r2, r3
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	69db      	ldr	r3, [r3, #28]
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	691a      	ldr	r2, [r3, #16]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f022 020f 	bic.w	r2, r2, #15
 8003ec2:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	6919      	ldr	r1, [r3, #16]
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f022 020e 	bic.w	r2, r2, #14
 8003ee6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	005a      	lsls	r2, r3, #1
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	430a      	orrs	r2, r1
 8003efe:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	2b03      	cmp	r3, #3
 8003f08:	d110      	bne.n	8003f2c <HAL_DSI_ConfigVideoMode+0x190>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	691a      	ldr	r2, [r3, #16]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f18:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	6919      	ldr	r1, [r3, #16]
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	689a      	ldr	r2, [r3, #8]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	4b42      	ldr	r3, [pc, #264]	; (8004040 <HAL_DSI_ConfigVideoMode+0x2a4>)
 8003f38:	400b      	ands	r3, r1
 8003f3a:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	4b39      	ldr	r3, [pc, #228]	; (8004040 <HAL_DSI_ConfigVideoMode+0x2a4>)
 8003f5a:	400b      	ands	r3, r1
 8003f5c:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	4b32      	ldr	r3, [pc, #200]	; (8004044 <HAL_DSI_ConfigVideoMode+0x2a8>)
 8003f7c:	400b      	ands	r3, r1
 8003f7e:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	4b2a      	ldr	r3, [pc, #168]	; (8004048 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8003f9e:	400b      	ands	r3, r1
 8003fa0:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	4b22      	ldr	r3, [pc, #136]	; (8004048 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8003fc0:	400b      	ands	r3, r1
 8003fc2:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	4b19      	ldr	r3, [pc, #100]	; (8004048 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8003fe2:	400b      	ands	r3, r1
 8003fe4:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	4b0d      	ldr	r3, [pc, #52]	; (8004038 <HAL_DSI_ConfigVideoMode+0x29c>)
 8004004:	400b      	ands	r3, r1
 8004006:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	430a      	orrs	r2, r1
 8004018:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004028:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004034:	e00a      	b.n	800404c <HAL_DSI_ConfigVideoMode+0x2b0>
 8004036:	bf00      	nop
 8004038:	ffffc000 	.word	0xffffc000
 800403c:	ffffe000 	.word	0xffffe000
 8004040:	fffff000 	.word	0xfffff000
 8004044:	ffff8000 	.word	0xffff8000
 8004048:	fffffc00 	.word	0xfffffc00
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	430a      	orrs	r2, r1
 8004052:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	699a      	ldr	r2, [r3, #24]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8004062:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	6999      	ldr	r1, [r3, #24]
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800406e:	041a      	lsls	r2, r3, #16
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	430a      	orrs	r2, r1
 8004076:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	699a      	ldr	r2, [r3, #24]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004086:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	6999      	ldr	r1, [r3, #24]
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	430a      	orrs	r2, r1
 8004098:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040a8:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	430a      	orrs	r2, r1
 80040ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80040ca:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	430a      	orrs	r2, r1
 80040dc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040ec:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	430a      	orrs	r2, r1
 80040fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800410e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	430a      	orrs	r2, r1
 8004120:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004130:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	430a      	orrs	r2, r1
 8004142:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004152:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	430a      	orrs	r2, r1
 8004164:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004174:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	430a      	orrs	r2, r1
 8004186:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	7c1b      	ldrb	r3, [r3, #16]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d101      	bne.n	80041b2 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 80041ae:	2302      	movs	r3, #2
 80041b0:	e0c5      	b.n	800433e <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2201      	movs	r2, #1
 80041b6:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f042 0201 	orr.w	r2, r2, #1
 80041c6:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f022 0201 	bic.w	r2, r2, #1
 80041d8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f042 0201 	orr.w	r2, r2, #1
 80041ec:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68da      	ldr	r2, [r3, #12]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f022 0203 	bic.w	r2, r2, #3
 80041fe:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68d9      	ldr	r1, [r3, #12]
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	430a      	orrs	r2, r1
 8004210:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	695a      	ldr	r2, [r3, #20]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f022 0207 	bic.w	r2, r2, #7
 8004220:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	6959      	ldr	r1, [r3, #20]
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	69da      	ldr	r2, [r3, #28]
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	431a      	orrs	r2, r3
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	431a      	orrs	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	430a      	orrs	r2, r1
 800423e:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	691a      	ldr	r2, [r3, #16]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f022 020f 	bic.w	r2, r2, #15
 800424e:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	6919      	ldr	r1, [r3, #16]
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	685a      	ldr	r2, [r3, #4]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	430a      	orrs	r2, r1
 8004260:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 020e 	bic.w	r2, r2, #14
 8004272:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	005a      	lsls	r2, r3, #1
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	430a      	orrs	r2, r1
 800428a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	4b2c      	ldr	r3, [pc, #176]	; (800434c <HAL_DSI_ConfigAdaptedCommandMode+0x1b0>)
 800429a:	400b      	ands	r3, r1
 800429c:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	689a      	ldr	r2, [r3, #8]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	430a      	orrs	r2, r1
 80042ae:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80042c0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	68da      	ldr	r2, [r3, #12]
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	431a      	orrs	r2, r3
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042da:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80042e0:	431a      	orrs	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	430a      	orrs	r2, r1
 80042e8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f022 0201 	bic.w	r2, r2, #1
 80042fa:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	430a      	orrs	r2, r1
 800430c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f042 0201 	orr.w	r2, r2, #1
 800431e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f042 0202 	orr.w	r2, r2, #2
 8004332:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	370c      	adds	r7, #12
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	ffff0000 	.word	0xffff0000

08004350 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	7c1b      	ldrb	r3, [r3, #16]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d101      	bne.n	8004366 <HAL_DSI_ConfigCommand+0x16>
 8004362:	2302      	movs	r3, #2
 8004364:	e049      	b.n	80043fa <HAL_DSI_ConfigCommand+0xaa>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	4b24      	ldr	r3, [pc, #144]	; (8004408 <HAL_DSI_ConfigCommand+0xb8>)
 8004378:	400b      	ands	r3, r1
 800437a:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800438a:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8004390:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 8004396:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 800439c:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 80043a2:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 80043a8:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 80043ae:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 80043b4:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 80043ba:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 80043c0:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 80043c6:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	430a      	orrs	r2, r1
 80043ce:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f022 0202 	bic.w	r2, r2, #2
 80043de:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	430a      	orrs	r2, r1
 80043f0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	370c      	adds	r7, #12
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	fef080ff 	.word	0xfef080ff

0800440c <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @ref DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	7c1b      	ldrb	r3, [r3, #16]
 800441a:	2b01      	cmp	r3, #1
 800441c:	d101      	bne.n	8004422 <HAL_DSI_ConfigFlowControl+0x16>
 800441e:	2302      	movs	r3, #2
 8004420:	e016      	b.n	8004450 <HAL_DSI_ConfigFlowControl+0x44>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2201      	movs	r2, #1
 8004426:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f022 021f 	bic.w	r2, r2, #31
 8004436:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	683a      	ldr	r2, [r7, #0]
 8004444:	430a      	orrs	r2, r1
 8004446:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 800445c:	b480      	push	{r7}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	7c1b      	ldrb	r3, [r3, #16]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d101      	bne.n	8004472 <HAL_DSI_ConfigPhyTimer+0x16>
 800446e:	2302      	movs	r3, #2
 8004470:	e058      	b.n	8004524 <HAL_DSI_ConfigPhyTimer+0xc8>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2201      	movs	r2, #1
 8004476:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	4293      	cmp	r3, r2
 8004482:	bf38      	it	cc
 8004484:	4613      	movcc	r3, r2
 8004486:	60fb      	str	r3, [r7, #12]
     This timings are configured by the HS2LP_TIME and LP2HS_TIME in the DSI Host Clock Lane Timer Configuration Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8004498:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	041a      	lsls	r2, r3, #16
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	431a      	orrs	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	430a      	orrs	r2, r1
 80044b2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80044c6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	691a      	ldr	r2, [r3, #16]
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	041b      	lsls	r3, r3, #16
 80044dc:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80044e4:	431a      	orrs	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	430a      	orrs	r2, r1
 80044ec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004500:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	695b      	ldr	r3, [r3, #20]
 8004510:	021a      	lsls	r2, r3, #8
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	430a      	orrs	r2, r1
 8004518:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	3714      	adds	r7, #20
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	7c1b      	ldrb	r3, [r3, #16]
 800453e:	2b01      	cmp	r3, #1
 8004540:	d101      	bne.n	8004546 <HAL_DSI_ConfigHostTimeouts+0x16>
 8004542:	2302      	movs	r3, #2
 8004544:	e0b4      	b.n	80046b0 <HAL_DSI_ConfigHostTimeouts+0x180>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2201      	movs	r2, #1
 800454a:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	689a      	ldr	r2, [r3, #8]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800455a:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	6899      	ldr	r1, [r3, #8]
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	021a      	lsls	r2, r3, #8
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	430a      	orrs	r2, r1
 800456e:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	b292      	uxth	r2, r2
 800457c:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	041a      	lsls	r2, r3, #16
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	430a      	orrs	r2, r1
 8004590:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	4b47      	ldr	r3, [pc, #284]	; (80046bc <HAL_DSI_ConfigHostTimeouts+0x18c>)
 800459e:	400b      	ands	r3, r1
 80045a0:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	689a      	ldr	r2, [r3, #8]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	430a      	orrs	r2, r1
 80045b2:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	4b3f      	ldr	r3, [pc, #252]	; (80046bc <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80045c0:	400b      	ands	r3, r1
 80045c2:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	68da      	ldr	r2, [r3, #12]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	430a      	orrs	r2, r1
 80045d4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	4b36      	ldr	r3, [pc, #216]	; (80046bc <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80045e4:	400b      	ands	r3, r1
 80045e6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	691a      	ldr	r2, [r3, #16]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	430a      	orrs	r2, r1
 80045fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	4b2b      	ldr	r3, [pc, #172]	; (80046bc <HAL_DSI_ConfigHostTimeouts+0x18c>)
 800460e:	400b      	ands	r3, r1
 8004610:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	695a      	ldr	r2, [r3, #20]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	430a      	orrs	r2, r1
 8004626:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800463a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	699a      	ldr	r2, [r3, #24]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	430a      	orrs	r2, r1
 8004650:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	4b16      	ldr	r3, [pc, #88]	; (80046bc <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004662:	400b      	ands	r3, r1
 8004664:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	69da      	ldr	r2, [r3, #28]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	430a      	orrs	r2, r1
 800467a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	4b0c      	ldr	r3, [pc, #48]	; (80046bc <HAL_DSI_ConfigHostTimeouts+0x18c>)
 800468c:	400b      	ands	r3, r1
 800468e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	6a1a      	ldr	r2, [r3, #32]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	430a      	orrs	r2, r1
 80046a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr
 80046bc:	ffff0000 	.word	0xffff0000

080046c0 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	7c1b      	ldrb	r3, [r3, #16]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d101      	bne.n	80046d4 <HAL_DSI_Start+0x14>
 80046d0:	2302      	movs	r3, #2
 80046d2:	e02b      	b.n	800472c <HAL_DSI_Start+0x6c>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 80046da:	2300      	movs	r3, #0
 80046dc:	60fb      	str	r3, [r7, #12]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	685a      	ldr	r2, [r3, #4]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f042 0201 	orr.w	r2, r2, #1
 80046ec:	605a      	str	r2, [r3, #4]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f003 0301 	and.w	r3, r3, #1
 80046f8:	60fb      	str	r3, [r7, #12]
 80046fa:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80046fc:	2300      	movs	r3, #0
 80046fe:	60bb      	str	r3, [r7, #8]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f042 0208 	orr.w	r2, r2, #8
 8004710:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800471c:	f003 0308 	and.w	r3, r3, #8
 8004720:	60bb      	str	r3, [r7, #8]
 8004722:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	3714      	adds	r7, #20
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b088      	sub	sp, #32
 800473c:	af02      	add	r7, sp, #8
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	607a      	str	r2, [r7, #4]
 8004744:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	7c1b      	ldrb	r3, [r3, #16]
 800474a:	2b01      	cmp	r3, #1
 800474c:	d101      	bne.n	8004752 <HAL_DSI_ShortWrite+0x1a>
 800474e:	2302      	movs	r3, #2
 8004750:	e010      	b.n	8004774 <HAL_DSI_ShortWrite+0x3c>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2201      	movs	r2, #1
 8004756:	741a      	strb	r2, [r3, #16]

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8004758:	6a3b      	ldr	r3, [r7, #32]
 800475a:	9300      	str	r3, [sp, #0]
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	68b9      	ldr	r1, [r7, #8]
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f7ff f879 	bl	800385a <DSI_ShortWrite>
 8004768:	4603      	mov	r3, r0
 800476a:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	741a      	strb	r2, [r3, #16]

  return status;
 8004772:	7dfb      	ldrb	r3, [r7, #23]
}
 8004774:	4618      	mov	r0, r3
 8004776:	3718      	adds	r7, #24
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b08c      	sub	sp, #48	; 0x30
 8004780:	af02      	add	r7, sp, #8
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
 8004788:	603b      	str	r3, [r7, #0]
  uint32_t uicounter, nbBytes, count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 800478a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800478c:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	7c1b      	ldrb	r3, [r3, #16]
 8004792:	2b01      	cmp	r3, #1
 8004794:	d101      	bne.n	800479a <HAL_DSI_LongWrite+0x1e>
 8004796:	2302      	movs	r3, #2
 8004798:	e084      	b.n	80048a4 <HAL_DSI_LongWrite+0x128>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2201      	movs	r2, #1
 800479e:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 80047a0:	f7fd fdf6 	bl	8002390 <HAL_GetTick>
 80047a4:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80047a6:	e00c      	b.n	80047c2 <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80047a8:	f7fd fdf2 	bl	8002390 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047b6:	d904      	bls.n	80047c2 <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e070      	b.n	80048a4 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047c8:	f003 0301 	and.w	r3, r3, #1
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d0eb      	beq.n	80047a8 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 80047d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d2:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	2b03      	cmp	r3, #3
 80047d8:	bf28      	it	cs
 80047da:	2303      	movcs	r3, #3
 80047dc:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 80047de:	2300      	movs	r3, #0
 80047e0:	623b      	str	r3, [r7, #32]
 80047e2:	e00f      	b.n	8004804 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 80047e4:	69ba      	ldr	r2, [r7, #24]
 80047e6:	6a3b      	ldr	r3, [r7, #32]
 80047e8:	4413      	add	r3, r2
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	461a      	mov	r2, r3
 80047ee:	6a3b      	ldr	r3, [r7, #32]
 80047f0:	3301      	adds	r3, #1
 80047f2:	00db      	lsls	r3, r3, #3
 80047f4:	fa02 f303 	lsl.w	r3, r2, r3
 80047f8:	69fa      	ldr	r2, [r7, #28]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 80047fe:	6a3b      	ldr	r3, [r7, #32]
 8004800:	3301      	adds	r3, #1
 8004802:	623b      	str	r3, [r7, #32]
 8004804:	6a3a      	ldr	r2, [r7, #32]
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	429a      	cmp	r2, r3
 800480a:	d3eb      	bcc.n	80047e4 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	69fa      	ldr	r2, [r7, #28]
 8004812:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8004814:	683a      	ldr	r2, [r7, #0]
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 800481c:	69ba      	ldr	r2, [r7, #24]
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	4413      	add	r3, r2
 8004822:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8004824:	e028      	b.n	8004878 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8004826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004828:	2b04      	cmp	r3, #4
 800482a:	bf28      	it	cs
 800482c:	2304      	movcs	r3, #4
 800482e:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8004830:	2300      	movs	r3, #0
 8004832:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8004834:	2300      	movs	r3, #0
 8004836:	623b      	str	r3, [r7, #32]
 8004838:	e00e      	b.n	8004858 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800483a:	69ba      	ldr	r2, [r7, #24]
 800483c:	6a3b      	ldr	r3, [r7, #32]
 800483e:	4413      	add	r3, r2
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	461a      	mov	r2, r3
 8004844:	6a3b      	ldr	r3, [r7, #32]
 8004846:	00db      	lsls	r3, r3, #3
 8004848:	fa02 f303 	lsl.w	r3, r2, r3
 800484c:	69fa      	ldr	r2, [r7, #28]
 800484e:	4313      	orrs	r3, r2
 8004850:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8004852:	6a3b      	ldr	r3, [r7, #32]
 8004854:	3301      	adds	r3, #1
 8004856:	623b      	str	r3, [r7, #32]
 8004858:	6a3a      	ldr	r2, [r7, #32]
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	429a      	cmp	r2, r3
 800485e:	d3ec      	bcc.n	800483a <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	69fa      	ldr	r2, [r7, #28]
 8004866:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8004868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8004870:	69ba      	ldr	r2, [r7, #24]
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	4413      	add	r3, r2
 8004876:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8004878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1d3      	bne.n	8004826 <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004886:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	3301      	adds	r3, #1
 800488c:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 800488e:	b2db      	uxtb	r3, r3
 8004890:	9300      	str	r3, [sp, #0]
 8004892:	4613      	mov	r3, r2
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	68b9      	ldr	r1, [r7, #8]
 8004898:	f7fe ffc6 	bl	8003828 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2200      	movs	r2, #0
 80048a0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3728      	adds	r7, #40	; 0x28
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	7c1b      	ldrb	r3, [r3, #16]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d101      	bne.n	80048c2 <HAL_DSI_SetLowPowerRXFilter+0x16>
 80048be:	2302      	movs	r3, #2
 80048c0:	e01b      	b.n	80048fa <HAL_DSI_SetLowPowerRXFilter+0x4e>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2201      	movs	r2, #1
 80048c6:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 80048d8:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	065a      	lsls	r2, r3, #25
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	430a      	orrs	r2, r1
 80048ee:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
	...

08004908 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004908:	b480      	push	{r7}
 800490a:	b089      	sub	sp, #36	; 0x24
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004912:	2300      	movs	r3, #0
 8004914:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004916:	2300      	movs	r3, #0
 8004918:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800491a:	2300      	movs	r3, #0
 800491c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800491e:	2300      	movs	r3, #0
 8004920:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004922:	2300      	movs	r3, #0
 8004924:	61fb      	str	r3, [r7, #28]
 8004926:	e175      	b.n	8004c14 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004928:	2201      	movs	r2, #1
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	fa02 f303 	lsl.w	r3, r2, r3
 8004930:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	697a      	ldr	r2, [r7, #20]
 8004938:	4013      	ands	r3, r2
 800493a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800493c:	693a      	ldr	r2, [r7, #16]
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	429a      	cmp	r2, r3
 8004942:	f040 8164 	bne.w	8004c0e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	2b02      	cmp	r3, #2
 800494c:	d003      	beq.n	8004956 <HAL_GPIO_Init+0x4e>
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	2b12      	cmp	r3, #18
 8004954:	d123      	bne.n	800499e <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	08da      	lsrs	r2, r3, #3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	3208      	adds	r2, #8
 800495e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004962:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	f003 0307 	and.w	r3, r3, #7
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	220f      	movs	r2, #15
 800496e:	fa02 f303 	lsl.w	r3, r2, r3
 8004972:	43db      	mvns	r3, r3
 8004974:	69ba      	ldr	r2, [r7, #24]
 8004976:	4013      	ands	r3, r2
 8004978:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	691a      	ldr	r2, [r3, #16]
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	f003 0307 	and.w	r3, r3, #7
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	fa02 f303 	lsl.w	r3, r2, r3
 800498a:	69ba      	ldr	r2, [r7, #24]
 800498c:	4313      	orrs	r3, r2
 800498e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	08da      	lsrs	r2, r3, #3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	3208      	adds	r2, #8
 8004998:	69b9      	ldr	r1, [r7, #24]
 800499a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	005b      	lsls	r3, r3, #1
 80049a8:	2203      	movs	r2, #3
 80049aa:	fa02 f303 	lsl.w	r3, r2, r3
 80049ae:	43db      	mvns	r3, r3
 80049b0:	69ba      	ldr	r2, [r7, #24]
 80049b2:	4013      	ands	r3, r2
 80049b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f003 0203 	and.w	r2, r3, #3
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	005b      	lsls	r3, r3, #1
 80049c2:	fa02 f303 	lsl.w	r3, r2, r3
 80049c6:	69ba      	ldr	r2, [r7, #24]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	69ba      	ldr	r2, [r7, #24]
 80049d0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d00b      	beq.n	80049f2 <HAL_GPIO_Init+0xea>
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d007      	beq.n	80049f2 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80049e6:	2b11      	cmp	r3, #17
 80049e8:	d003      	beq.n	80049f2 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	2b12      	cmp	r3, #18
 80049f0:	d130      	bne.n	8004a54 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	005b      	lsls	r3, r3, #1
 80049fc:	2203      	movs	r2, #3
 80049fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004a02:	43db      	mvns	r3, r3
 8004a04:	69ba      	ldr	r2, [r7, #24]
 8004a06:	4013      	ands	r3, r2
 8004a08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	68da      	ldr	r2, [r3, #12]
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	005b      	lsls	r3, r3, #1
 8004a12:	fa02 f303 	lsl.w	r3, r2, r3
 8004a16:	69ba      	ldr	r2, [r7, #24]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	69ba      	ldr	r2, [r7, #24]
 8004a20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a28:	2201      	movs	r2, #1
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a30:	43db      	mvns	r3, r3
 8004a32:	69ba      	ldr	r2, [r7, #24]
 8004a34:	4013      	ands	r3, r2
 8004a36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	091b      	lsrs	r3, r3, #4
 8004a3e:	f003 0201 	and.w	r2, r3, #1
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	fa02 f303 	lsl.w	r3, r2, r3
 8004a48:	69ba      	ldr	r2, [r7, #24]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	69ba      	ldr	r2, [r7, #24]
 8004a52:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	005b      	lsls	r3, r3, #1
 8004a5e:	2203      	movs	r2, #3
 8004a60:	fa02 f303 	lsl.w	r3, r2, r3
 8004a64:	43db      	mvns	r3, r3
 8004a66:	69ba      	ldr	r2, [r7, #24]
 8004a68:	4013      	ands	r3, r2
 8004a6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	689a      	ldr	r2, [r3, #8]
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	005b      	lsls	r3, r3, #1
 8004a74:	fa02 f303 	lsl.w	r3, r2, r3
 8004a78:	69ba      	ldr	r2, [r7, #24]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	69ba      	ldr	r2, [r7, #24]
 8004a82:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f000 80be 	beq.w	8004c0e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a92:	4b65      	ldr	r3, [pc, #404]	; (8004c28 <HAL_GPIO_Init+0x320>)
 8004a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a96:	4a64      	ldr	r2, [pc, #400]	; (8004c28 <HAL_GPIO_Init+0x320>)
 8004a98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a9c:	6453      	str	r3, [r2, #68]	; 0x44
 8004a9e:	4b62      	ldr	r3, [pc, #392]	; (8004c28 <HAL_GPIO_Init+0x320>)
 8004aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aa6:	60fb      	str	r3, [r7, #12]
 8004aa8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004aaa:	4a60      	ldr	r2, [pc, #384]	; (8004c2c <HAL_GPIO_Init+0x324>)
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	089b      	lsrs	r3, r3, #2
 8004ab0:	3302      	adds	r3, #2
 8004ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	f003 0303 	and.w	r3, r3, #3
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	220f      	movs	r2, #15
 8004ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac6:	43db      	mvns	r3, r3
 8004ac8:	69ba      	ldr	r2, [r7, #24]
 8004aca:	4013      	ands	r3, r2
 8004acc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a57      	ldr	r2, [pc, #348]	; (8004c30 <HAL_GPIO_Init+0x328>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d037      	beq.n	8004b46 <HAL_GPIO_Init+0x23e>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a56      	ldr	r2, [pc, #344]	; (8004c34 <HAL_GPIO_Init+0x32c>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d031      	beq.n	8004b42 <HAL_GPIO_Init+0x23a>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a55      	ldr	r2, [pc, #340]	; (8004c38 <HAL_GPIO_Init+0x330>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d02b      	beq.n	8004b3e <HAL_GPIO_Init+0x236>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a54      	ldr	r2, [pc, #336]	; (8004c3c <HAL_GPIO_Init+0x334>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d025      	beq.n	8004b3a <HAL_GPIO_Init+0x232>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a53      	ldr	r2, [pc, #332]	; (8004c40 <HAL_GPIO_Init+0x338>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d01f      	beq.n	8004b36 <HAL_GPIO_Init+0x22e>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a52      	ldr	r2, [pc, #328]	; (8004c44 <HAL_GPIO_Init+0x33c>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d019      	beq.n	8004b32 <HAL_GPIO_Init+0x22a>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a51      	ldr	r2, [pc, #324]	; (8004c48 <HAL_GPIO_Init+0x340>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d013      	beq.n	8004b2e <HAL_GPIO_Init+0x226>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a50      	ldr	r2, [pc, #320]	; (8004c4c <HAL_GPIO_Init+0x344>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d00d      	beq.n	8004b2a <HAL_GPIO_Init+0x222>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a4f      	ldr	r2, [pc, #316]	; (8004c50 <HAL_GPIO_Init+0x348>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d007      	beq.n	8004b26 <HAL_GPIO_Init+0x21e>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a4e      	ldr	r2, [pc, #312]	; (8004c54 <HAL_GPIO_Init+0x34c>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d101      	bne.n	8004b22 <HAL_GPIO_Init+0x21a>
 8004b1e:	2309      	movs	r3, #9
 8004b20:	e012      	b.n	8004b48 <HAL_GPIO_Init+0x240>
 8004b22:	230a      	movs	r3, #10
 8004b24:	e010      	b.n	8004b48 <HAL_GPIO_Init+0x240>
 8004b26:	2308      	movs	r3, #8
 8004b28:	e00e      	b.n	8004b48 <HAL_GPIO_Init+0x240>
 8004b2a:	2307      	movs	r3, #7
 8004b2c:	e00c      	b.n	8004b48 <HAL_GPIO_Init+0x240>
 8004b2e:	2306      	movs	r3, #6
 8004b30:	e00a      	b.n	8004b48 <HAL_GPIO_Init+0x240>
 8004b32:	2305      	movs	r3, #5
 8004b34:	e008      	b.n	8004b48 <HAL_GPIO_Init+0x240>
 8004b36:	2304      	movs	r3, #4
 8004b38:	e006      	b.n	8004b48 <HAL_GPIO_Init+0x240>
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e004      	b.n	8004b48 <HAL_GPIO_Init+0x240>
 8004b3e:	2302      	movs	r3, #2
 8004b40:	e002      	b.n	8004b48 <HAL_GPIO_Init+0x240>
 8004b42:	2301      	movs	r3, #1
 8004b44:	e000      	b.n	8004b48 <HAL_GPIO_Init+0x240>
 8004b46:	2300      	movs	r3, #0
 8004b48:	69fa      	ldr	r2, [r7, #28]
 8004b4a:	f002 0203 	and.w	r2, r2, #3
 8004b4e:	0092      	lsls	r2, r2, #2
 8004b50:	4093      	lsls	r3, r2
 8004b52:	69ba      	ldr	r2, [r7, #24]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004b58:	4934      	ldr	r1, [pc, #208]	; (8004c2c <HAL_GPIO_Init+0x324>)
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	089b      	lsrs	r3, r3, #2
 8004b5e:	3302      	adds	r3, #2
 8004b60:	69ba      	ldr	r2, [r7, #24]
 8004b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004b66:	4b3c      	ldr	r3, [pc, #240]	; (8004c58 <HAL_GPIO_Init+0x350>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	43db      	mvns	r3, r3
 8004b70:	69ba      	ldr	r2, [r7, #24]
 8004b72:	4013      	ands	r3, r2
 8004b74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d003      	beq.n	8004b8a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004b82:	69ba      	ldr	r2, [r7, #24]
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004b8a:	4a33      	ldr	r2, [pc, #204]	; (8004c58 <HAL_GPIO_Init+0x350>)
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004b90:	4b31      	ldr	r3, [pc, #196]	; (8004c58 <HAL_GPIO_Init+0x350>)
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	43db      	mvns	r3, r3
 8004b9a:	69ba      	ldr	r2, [r7, #24]
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d003      	beq.n	8004bb4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004bac:	69ba      	ldr	r2, [r7, #24]
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004bb4:	4a28      	ldr	r2, [pc, #160]	; (8004c58 <HAL_GPIO_Init+0x350>)
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004bba:	4b27      	ldr	r3, [pc, #156]	; (8004c58 <HAL_GPIO_Init+0x350>)
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	43db      	mvns	r3, r3
 8004bc4:	69ba      	ldr	r2, [r7, #24]
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d003      	beq.n	8004bde <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004bd6:	69ba      	ldr	r2, [r7, #24]
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004bde:	4a1e      	ldr	r2, [pc, #120]	; (8004c58 <HAL_GPIO_Init+0x350>)
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004be4:	4b1c      	ldr	r3, [pc, #112]	; (8004c58 <HAL_GPIO_Init+0x350>)
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	43db      	mvns	r3, r3
 8004bee:	69ba      	ldr	r2, [r7, #24]
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d003      	beq.n	8004c08 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004c00:	69ba      	ldr	r2, [r7, #24]
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004c08:	4a13      	ldr	r2, [pc, #76]	; (8004c58 <HAL_GPIO_Init+0x350>)
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	3301      	adds	r3, #1
 8004c12:	61fb      	str	r3, [r7, #28]
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	2b0f      	cmp	r3, #15
 8004c18:	f67f ae86 	bls.w	8004928 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004c1c:	bf00      	nop
 8004c1e:	3724      	adds	r7, #36	; 0x24
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr
 8004c28:	40023800 	.word	0x40023800
 8004c2c:	40013800 	.word	0x40013800
 8004c30:	40020000 	.word	0x40020000
 8004c34:	40020400 	.word	0x40020400
 8004c38:	40020800 	.word	0x40020800
 8004c3c:	40020c00 	.word	0x40020c00
 8004c40:	40021000 	.word	0x40021000
 8004c44:	40021400 	.word	0x40021400
 8004c48:	40021800 	.word	0x40021800
 8004c4c:	40021c00 	.word	0x40021c00
 8004c50:	40022000 	.word	0x40022000
 8004c54:	40022400 	.word	0x40022400
 8004c58:	40013c00 	.word	0x40013c00

08004c5c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b087      	sub	sp, #28
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8004c66:	2300      	movs	r3, #0
 8004c68:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004c72:	2300      	movs	r3, #0
 8004c74:	617b      	str	r3, [r7, #20]
 8004c76:	e0d9      	b.n	8004e2c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004c78:	2201      	movs	r2, #1
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c80:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004c82:	683a      	ldr	r2, [r7, #0]
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	4013      	ands	r3, r2
 8004c88:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004c8a:	68fa      	ldr	r2, [r7, #12]
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	f040 80c9 	bne.w	8004e26 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8004c94:	4a6a      	ldr	r2, [pc, #424]	; (8004e40 <HAL_GPIO_DeInit+0x1e4>)
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	089b      	lsrs	r3, r3, #2
 8004c9a:	3302      	adds	r3, #2
 8004c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ca0:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	f003 0303 	and.w	r3, r3, #3
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	220f      	movs	r2, #15
 8004cac:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb0:	68ba      	ldr	r2, [r7, #8]
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a62      	ldr	r2, [pc, #392]	; (8004e44 <HAL_GPIO_DeInit+0x1e8>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d037      	beq.n	8004d2e <HAL_GPIO_DeInit+0xd2>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a61      	ldr	r2, [pc, #388]	; (8004e48 <HAL_GPIO_DeInit+0x1ec>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d031      	beq.n	8004d2a <HAL_GPIO_DeInit+0xce>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a60      	ldr	r2, [pc, #384]	; (8004e4c <HAL_GPIO_DeInit+0x1f0>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d02b      	beq.n	8004d26 <HAL_GPIO_DeInit+0xca>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a5f      	ldr	r2, [pc, #380]	; (8004e50 <HAL_GPIO_DeInit+0x1f4>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d025      	beq.n	8004d22 <HAL_GPIO_DeInit+0xc6>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a5e      	ldr	r2, [pc, #376]	; (8004e54 <HAL_GPIO_DeInit+0x1f8>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d01f      	beq.n	8004d1e <HAL_GPIO_DeInit+0xc2>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a5d      	ldr	r2, [pc, #372]	; (8004e58 <HAL_GPIO_DeInit+0x1fc>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d019      	beq.n	8004d1a <HAL_GPIO_DeInit+0xbe>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a5c      	ldr	r2, [pc, #368]	; (8004e5c <HAL_GPIO_DeInit+0x200>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d013      	beq.n	8004d16 <HAL_GPIO_DeInit+0xba>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a5b      	ldr	r2, [pc, #364]	; (8004e60 <HAL_GPIO_DeInit+0x204>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d00d      	beq.n	8004d12 <HAL_GPIO_DeInit+0xb6>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a5a      	ldr	r2, [pc, #360]	; (8004e64 <HAL_GPIO_DeInit+0x208>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d007      	beq.n	8004d0e <HAL_GPIO_DeInit+0xb2>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a59      	ldr	r2, [pc, #356]	; (8004e68 <HAL_GPIO_DeInit+0x20c>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d101      	bne.n	8004d0a <HAL_GPIO_DeInit+0xae>
 8004d06:	2309      	movs	r3, #9
 8004d08:	e012      	b.n	8004d30 <HAL_GPIO_DeInit+0xd4>
 8004d0a:	230a      	movs	r3, #10
 8004d0c:	e010      	b.n	8004d30 <HAL_GPIO_DeInit+0xd4>
 8004d0e:	2308      	movs	r3, #8
 8004d10:	e00e      	b.n	8004d30 <HAL_GPIO_DeInit+0xd4>
 8004d12:	2307      	movs	r3, #7
 8004d14:	e00c      	b.n	8004d30 <HAL_GPIO_DeInit+0xd4>
 8004d16:	2306      	movs	r3, #6
 8004d18:	e00a      	b.n	8004d30 <HAL_GPIO_DeInit+0xd4>
 8004d1a:	2305      	movs	r3, #5
 8004d1c:	e008      	b.n	8004d30 <HAL_GPIO_DeInit+0xd4>
 8004d1e:	2304      	movs	r3, #4
 8004d20:	e006      	b.n	8004d30 <HAL_GPIO_DeInit+0xd4>
 8004d22:	2303      	movs	r3, #3
 8004d24:	e004      	b.n	8004d30 <HAL_GPIO_DeInit+0xd4>
 8004d26:	2302      	movs	r3, #2
 8004d28:	e002      	b.n	8004d30 <HAL_GPIO_DeInit+0xd4>
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e000      	b.n	8004d30 <HAL_GPIO_DeInit+0xd4>
 8004d2e:	2300      	movs	r3, #0
 8004d30:	697a      	ldr	r2, [r7, #20]
 8004d32:	f002 0203 	and.w	r2, r2, #3
 8004d36:	0092      	lsls	r2, r2, #2
 8004d38:	4093      	lsls	r3, r2
 8004d3a:	68ba      	ldr	r2, [r7, #8]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d132      	bne.n	8004da6 <HAL_GPIO_DeInit+0x14a>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	f003 0303 	and.w	r3, r3, #3
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	220f      	movs	r2, #15
 8004d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8004d50:	4a3b      	ldr	r2, [pc, #236]	; (8004e40 <HAL_GPIO_DeInit+0x1e4>)
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	089b      	lsrs	r3, r3, #2
 8004d56:	3302      	adds	r3, #2
 8004d58:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	43da      	mvns	r2, r3
 8004d60:	4837      	ldr	r0, [pc, #220]	; (8004e40 <HAL_GPIO_DeInit+0x1e4>)
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	089b      	lsrs	r3, r3, #2
 8004d66:	400a      	ands	r2, r1
 8004d68:	3302      	adds	r3, #2
 8004d6a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004d6e:	4b3f      	ldr	r3, [pc, #252]	; (8004e6c <HAL_GPIO_DeInit+0x210>)
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	43db      	mvns	r3, r3
 8004d76:	493d      	ldr	r1, [pc, #244]	; (8004e6c <HAL_GPIO_DeInit+0x210>)
 8004d78:	4013      	ands	r3, r2
 8004d7a:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004d7c:	4b3b      	ldr	r3, [pc, #236]	; (8004e6c <HAL_GPIO_DeInit+0x210>)
 8004d7e:	685a      	ldr	r2, [r3, #4]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	43db      	mvns	r3, r3
 8004d84:	4939      	ldr	r1, [pc, #228]	; (8004e6c <HAL_GPIO_DeInit+0x210>)
 8004d86:	4013      	ands	r3, r2
 8004d88:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004d8a:	4b38      	ldr	r3, [pc, #224]	; (8004e6c <HAL_GPIO_DeInit+0x210>)
 8004d8c:	689a      	ldr	r2, [r3, #8]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	43db      	mvns	r3, r3
 8004d92:	4936      	ldr	r1, [pc, #216]	; (8004e6c <HAL_GPIO_DeInit+0x210>)
 8004d94:	4013      	ands	r3, r2
 8004d96:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004d98:	4b34      	ldr	r3, [pc, #208]	; (8004e6c <HAL_GPIO_DeInit+0x210>)
 8004d9a:	68da      	ldr	r2, [r3, #12]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	43db      	mvns	r3, r3
 8004da0:	4932      	ldr	r1, [pc, #200]	; (8004e6c <HAL_GPIO_DeInit+0x210>)
 8004da2:	4013      	ands	r3, r2
 8004da4:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	005b      	lsls	r3, r3, #1
 8004dae:	2103      	movs	r1, #3
 8004db0:	fa01 f303 	lsl.w	r3, r1, r3
 8004db4:	43db      	mvns	r3, r3
 8004db6:	401a      	ands	r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	08da      	lsrs	r2, r3, #3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	3208      	adds	r2, #8
 8004dc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	f003 0307 	and.w	r3, r3, #7
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	220f      	movs	r2, #15
 8004dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd6:	43db      	mvns	r3, r3
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	08d2      	lsrs	r2, r2, #3
 8004ddc:	4019      	ands	r1, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	3208      	adds	r2, #8
 8004de2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	689a      	ldr	r2, [r3, #8]
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	005b      	lsls	r3, r3, #1
 8004dee:	2103      	movs	r1, #3
 8004df0:	fa01 f303 	lsl.w	r3, r1, r3
 8004df4:	43db      	mvns	r3, r3
 8004df6:	401a      	ands	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685a      	ldr	r2, [r3, #4]
 8004e00:	2101      	movs	r1, #1
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	fa01 f303 	lsl.w	r3, r1, r3
 8004e08:	43db      	mvns	r3, r3
 8004e0a:	401a      	ands	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	68da      	ldr	r2, [r3, #12]
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	005b      	lsls	r3, r3, #1
 8004e18:	2103      	movs	r1, #3
 8004e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e1e:	43db      	mvns	r3, r3
 8004e20:	401a      	ands	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	60da      	str	r2, [r3, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	3301      	adds	r3, #1
 8004e2a:	617b      	str	r3, [r7, #20]
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	2b0f      	cmp	r3, #15
 8004e30:	f67f af22 	bls.w	8004c78 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004e34:	bf00      	nop
 8004e36:	371c      	adds	r7, #28
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr
 8004e40:	40013800 	.word	0x40013800
 8004e44:	40020000 	.word	0x40020000
 8004e48:	40020400 	.word	0x40020400
 8004e4c:	40020800 	.word	0x40020800
 8004e50:	40020c00 	.word	0x40020c00
 8004e54:	40021000 	.word	0x40021000
 8004e58:	40021400 	.word	0x40021400
 8004e5c:	40021800 	.word	0x40021800
 8004e60:	40021c00 	.word	0x40021c00
 8004e64:	40022000 	.word	0x40022000
 8004e68:	40022400 	.word	0x40022400
 8004e6c:	40013c00 	.word	0x40013c00

08004e70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	460b      	mov	r3, r1
 8004e7a:	807b      	strh	r3, [r7, #2]
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e80:	787b      	ldrb	r3, [r7, #1]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d003      	beq.n	8004e8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e86:	887a      	ldrh	r2, [r7, #2]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004e8c:	e003      	b.n	8004e96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004e8e:	887b      	ldrh	r3, [r7, #2]
 8004e90:	041a      	lsls	r2, r3, #16
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	619a      	str	r2, [r3, #24]
}
 8004e96:	bf00      	nop
 8004e98:	370c      	adds	r7, #12
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr

08004ea2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b083      	sub	sp, #12
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
 8004eaa:	460b      	mov	r3, r1
 8004eac:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	695a      	ldr	r2, [r3, #20]
 8004eb2:	887b      	ldrh	r3, [r7, #2]
 8004eb4:	401a      	ands	r2, r3
 8004eb6:	887b      	ldrh	r3, [r7, #2]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d104      	bne.n	8004ec6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004ebc:	887b      	ldrh	r3, [r7, #2]
 8004ebe:	041a      	lsls	r2, r3, #16
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004ec4:	e002      	b.n	8004ecc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004ec6:	887a      	ldrh	r2, [r7, #2]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	619a      	str	r2, [r3, #24]
}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	4603      	mov	r3, r0
 8004ee0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004ee2:	4b08      	ldr	r3, [pc, #32]	; (8004f04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ee4:	695a      	ldr	r2, [r3, #20]
 8004ee6:	88fb      	ldrh	r3, [r7, #6]
 8004ee8:	4013      	ands	r3, r2
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d006      	beq.n	8004efc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004eee:	4a05      	ldr	r2, [pc, #20]	; (8004f04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ef0:	88fb      	ldrh	r3, [r7, #6]
 8004ef2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ef4:	88fb      	ldrh	r3, [r7, #6]
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f002 fd7a 	bl	80079f0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004efc:	bf00      	nop
 8004efe:	3708      	adds	r7, #8
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	40013c00 	.word	0x40013c00

08004f08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d101      	bne.n	8004f1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e07f      	b.n	800501a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d106      	bne.n	8004f34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 f8a9 	bl	8005086 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2224      	movs	r2, #36	; 0x24
 8004f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f022 0201 	bic.w	r2, r2, #1
 8004f4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685a      	ldr	r2, [r3, #4]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004f58:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	689a      	ldr	r2, [r3, #8]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f68:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d107      	bne.n	8004f82 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	689a      	ldr	r2, [r3, #8]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f7e:	609a      	str	r2, [r3, #8]
 8004f80:	e006      	b.n	8004f90 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	689a      	ldr	r2, [r3, #8]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004f8e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d104      	bne.n	8004fa2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fa0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	6859      	ldr	r1, [r3, #4]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	4b1d      	ldr	r3, [pc, #116]	; (8005024 <HAL_I2C_Init+0x11c>)
 8004fae:	430b      	orrs	r3, r1
 8004fb0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68da      	ldr	r2, [r3, #12]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004fc0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	691a      	ldr	r2, [r3, #16]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	695b      	ldr	r3, [r3, #20]
 8004fca:	ea42 0103 	orr.w	r1, r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	021a      	lsls	r2, r3, #8
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	430a      	orrs	r2, r1
 8004fda:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	69d9      	ldr	r1, [r3, #28]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a1a      	ldr	r2, [r3, #32]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	430a      	orrs	r2, r1
 8004fea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f042 0201 	orr.w	r2, r2, #1
 8004ffa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2220      	movs	r2, #32
 8005006:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	3708      	adds	r7, #8
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	02008000 	.word	0x02008000

08005028 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d101      	bne.n	800503a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e021      	b.n	800507e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2224      	movs	r2, #36	; 0x24
 800503e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f022 0201 	bic.w	r2, r2, #1
 8005050:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 f821 	bl	800509a <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3708      	adds	r7, #8
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005086:	b480      	push	{r7}
 8005088:	b083      	sub	sp, #12
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800508e:	bf00      	nop
 8005090:	370c      	adds	r7, #12
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr

0800509a <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800509a:	b480      	push	{r7}
 800509c:	b083      	sub	sp, #12
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80050a2:	bf00      	nop
 80050a4:	370c      	adds	r7, #12
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr
	...

080050b0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b088      	sub	sp, #32
 80050b4:	af02      	add	r7, sp, #8
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	4608      	mov	r0, r1
 80050ba:	4611      	mov	r1, r2
 80050bc:	461a      	mov	r2, r3
 80050be:	4603      	mov	r3, r0
 80050c0:	817b      	strh	r3, [r7, #10]
 80050c2:	460b      	mov	r3, r1
 80050c4:	813b      	strh	r3, [r7, #8]
 80050c6:	4613      	mov	r3, r2
 80050c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2b20      	cmp	r3, #32
 80050d4:	f040 80f9 	bne.w	80052ca <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80050d8:	6a3b      	ldr	r3, [r7, #32]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d002      	beq.n	80050e4 <HAL_I2C_Mem_Write+0x34>
 80050de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d105      	bne.n	80050f0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050ea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e0ed      	b.n	80052cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d101      	bne.n	80050fe <HAL_I2C_Mem_Write+0x4e>
 80050fa:	2302      	movs	r3, #2
 80050fc:	e0e6      	b.n	80052cc <HAL_I2C_Mem_Write+0x21c>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005106:	f7fd f943 	bl	8002390 <HAL_GetTick>
 800510a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	9300      	str	r3, [sp, #0]
 8005110:	2319      	movs	r3, #25
 8005112:	2201      	movs	r2, #1
 8005114:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005118:	68f8      	ldr	r0, [r7, #12]
 800511a:	f000 fad1 	bl	80056c0 <I2C_WaitOnFlagUntilTimeout>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d001      	beq.n	8005128 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e0d1      	b.n	80052cc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2221      	movs	r2, #33	; 0x21
 800512c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2240      	movs	r2, #64	; 0x40
 8005134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2200      	movs	r2, #0
 800513c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6a3a      	ldr	r2, [r7, #32]
 8005142:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005148:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005150:	88f8      	ldrh	r0, [r7, #6]
 8005152:	893a      	ldrh	r2, [r7, #8]
 8005154:	8979      	ldrh	r1, [r7, #10]
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	9301      	str	r3, [sp, #4]
 800515a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515c:	9300      	str	r3, [sp, #0]
 800515e:	4603      	mov	r3, r0
 8005160:	68f8      	ldr	r0, [r7, #12]
 8005162:	f000 f9e1 	bl	8005528 <I2C_RequestMemoryWrite>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d005      	beq.n	8005178 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2200      	movs	r2, #0
 8005170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e0a9      	b.n	80052cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800517c:	b29b      	uxth	r3, r3
 800517e:	2bff      	cmp	r3, #255	; 0xff
 8005180:	d90e      	bls.n	80051a0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	22ff      	movs	r2, #255	; 0xff
 8005186:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800518c:	b2da      	uxtb	r2, r3
 800518e:	8979      	ldrh	r1, [r7, #10]
 8005190:	2300      	movs	r3, #0
 8005192:	9300      	str	r3, [sp, #0]
 8005194:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005198:	68f8      	ldr	r0, [r7, #12]
 800519a:	f000 fbb3 	bl	8005904 <I2C_TransferConfig>
 800519e:	e00f      	b.n	80051c0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051a4:	b29a      	uxth	r2, r3
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051ae:	b2da      	uxtb	r2, r3
 80051b0:	8979      	ldrh	r1, [r7, #10]
 80051b2:	2300      	movs	r3, #0
 80051b4:	9300      	str	r3, [sp, #0]
 80051b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051ba:	68f8      	ldr	r0, [r7, #12]
 80051bc:	f000 fba2 	bl	8005904 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051c0:	697a      	ldr	r2, [r7, #20]
 80051c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051c4:	68f8      	ldr	r0, [r7, #12]
 80051c6:	f000 fabb 	bl	8005740 <I2C_WaitOnTXISFlagUntilTimeout>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d001      	beq.n	80051d4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e07b      	b.n	80052cc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d8:	781a      	ldrb	r2, [r3, #0]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e4:	1c5a      	adds	r2, r3, #1
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	3b01      	subs	r3, #1
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051fc:	3b01      	subs	r3, #1
 80051fe:	b29a      	uxth	r2, r3
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005208:	b29b      	uxth	r3, r3
 800520a:	2b00      	cmp	r3, #0
 800520c:	d034      	beq.n	8005278 <HAL_I2C_Mem_Write+0x1c8>
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005212:	2b00      	cmp	r3, #0
 8005214:	d130      	bne.n	8005278 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	9300      	str	r3, [sp, #0]
 800521a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800521c:	2200      	movs	r2, #0
 800521e:	2180      	movs	r1, #128	; 0x80
 8005220:	68f8      	ldr	r0, [r7, #12]
 8005222:	f000 fa4d 	bl	80056c0 <I2C_WaitOnFlagUntilTimeout>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d001      	beq.n	8005230 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e04d      	b.n	80052cc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005234:	b29b      	uxth	r3, r3
 8005236:	2bff      	cmp	r3, #255	; 0xff
 8005238:	d90e      	bls.n	8005258 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	22ff      	movs	r2, #255	; 0xff
 800523e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005244:	b2da      	uxtb	r2, r3
 8005246:	8979      	ldrh	r1, [r7, #10]
 8005248:	2300      	movs	r3, #0
 800524a:	9300      	str	r3, [sp, #0]
 800524c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005250:	68f8      	ldr	r0, [r7, #12]
 8005252:	f000 fb57 	bl	8005904 <I2C_TransferConfig>
 8005256:	e00f      	b.n	8005278 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800525c:	b29a      	uxth	r2, r3
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005266:	b2da      	uxtb	r2, r3
 8005268:	8979      	ldrh	r1, [r7, #10]
 800526a:	2300      	movs	r3, #0
 800526c:	9300      	str	r3, [sp, #0]
 800526e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f000 fb46 	bl	8005904 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800527c:	b29b      	uxth	r3, r3
 800527e:	2b00      	cmp	r3, #0
 8005280:	d19e      	bne.n	80051c0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005282:	697a      	ldr	r2, [r7, #20]
 8005284:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005286:	68f8      	ldr	r0, [r7, #12]
 8005288:	f000 fa9a 	bl	80057c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d001      	beq.n	8005296 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e01a      	b.n	80052cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2220      	movs	r2, #32
 800529c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	6859      	ldr	r1, [r3, #4]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	4b0a      	ldr	r3, [pc, #40]	; (80052d4 <HAL_I2C_Mem_Write+0x224>)
 80052aa:	400b      	ands	r3, r1
 80052ac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2220      	movs	r2, #32
 80052b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80052c6:	2300      	movs	r3, #0
 80052c8:	e000      	b.n	80052cc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80052ca:	2302      	movs	r3, #2
  }
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3718      	adds	r7, #24
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	fe00e800 	.word	0xfe00e800

080052d8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b088      	sub	sp, #32
 80052dc:	af02      	add	r7, sp, #8
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	4608      	mov	r0, r1
 80052e2:	4611      	mov	r1, r2
 80052e4:	461a      	mov	r2, r3
 80052e6:	4603      	mov	r3, r0
 80052e8:	817b      	strh	r3, [r7, #10]
 80052ea:	460b      	mov	r3, r1
 80052ec:	813b      	strh	r3, [r7, #8]
 80052ee:	4613      	mov	r3, r2
 80052f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	2b20      	cmp	r3, #32
 80052fc:	f040 80fd 	bne.w	80054fa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005300:	6a3b      	ldr	r3, [r7, #32]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d002      	beq.n	800530c <HAL_I2C_Mem_Read+0x34>
 8005306:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005308:	2b00      	cmp	r3, #0
 800530a:	d105      	bne.n	8005318 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005312:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e0f1      	b.n	80054fc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800531e:	2b01      	cmp	r3, #1
 8005320:	d101      	bne.n	8005326 <HAL_I2C_Mem_Read+0x4e>
 8005322:	2302      	movs	r3, #2
 8005324:	e0ea      	b.n	80054fc <HAL_I2C_Mem_Read+0x224>
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2201      	movs	r2, #1
 800532a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800532e:	f7fd f82f 	bl	8002390 <HAL_GetTick>
 8005332:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	9300      	str	r3, [sp, #0]
 8005338:	2319      	movs	r3, #25
 800533a:	2201      	movs	r2, #1
 800533c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005340:	68f8      	ldr	r0, [r7, #12]
 8005342:	f000 f9bd 	bl	80056c0 <I2C_WaitOnFlagUntilTimeout>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d001      	beq.n	8005350 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e0d5      	b.n	80054fc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2222      	movs	r2, #34	; 0x22
 8005354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2240      	movs	r2, #64	; 0x40
 800535c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2200      	movs	r2, #0
 8005364:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6a3a      	ldr	r2, [r7, #32]
 800536a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005370:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005378:	88f8      	ldrh	r0, [r7, #6]
 800537a:	893a      	ldrh	r2, [r7, #8]
 800537c:	8979      	ldrh	r1, [r7, #10]
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	9301      	str	r3, [sp, #4]
 8005382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005384:	9300      	str	r3, [sp, #0]
 8005386:	4603      	mov	r3, r0
 8005388:	68f8      	ldr	r0, [r7, #12]
 800538a:	f000 f921 	bl	80055d0 <I2C_RequestMemoryRead>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d005      	beq.n	80053a0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e0ad      	b.n	80054fc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	2bff      	cmp	r3, #255	; 0xff
 80053a8:	d90e      	bls.n	80053c8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	22ff      	movs	r2, #255	; 0xff
 80053ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053b4:	b2da      	uxtb	r2, r3
 80053b6:	8979      	ldrh	r1, [r7, #10]
 80053b8:	4b52      	ldr	r3, [pc, #328]	; (8005504 <HAL_I2C_Mem_Read+0x22c>)
 80053ba:	9300      	str	r3, [sp, #0]
 80053bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80053c0:	68f8      	ldr	r0, [r7, #12]
 80053c2:	f000 fa9f 	bl	8005904 <I2C_TransferConfig>
 80053c6:	e00f      	b.n	80053e8 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053cc:	b29a      	uxth	r2, r3
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053d6:	b2da      	uxtb	r2, r3
 80053d8:	8979      	ldrh	r1, [r7, #10]
 80053da:	4b4a      	ldr	r3, [pc, #296]	; (8005504 <HAL_I2C_Mem_Read+0x22c>)
 80053dc:	9300      	str	r3, [sp, #0]
 80053de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80053e2:	68f8      	ldr	r0, [r7, #12]
 80053e4:	f000 fa8e 	bl	8005904 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	9300      	str	r3, [sp, #0]
 80053ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ee:	2200      	movs	r2, #0
 80053f0:	2104      	movs	r1, #4
 80053f2:	68f8      	ldr	r0, [r7, #12]
 80053f4:	f000 f964 	bl	80056c0 <I2C_WaitOnFlagUntilTimeout>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d001      	beq.n	8005402 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e07c      	b.n	80054fc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540c:	b2d2      	uxtb	r2, r2
 800540e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005414:	1c5a      	adds	r2, r3, #1
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800541e:	3b01      	subs	r3, #1
 8005420:	b29a      	uxth	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800542a:	b29b      	uxth	r3, r3
 800542c:	3b01      	subs	r3, #1
 800542e:	b29a      	uxth	r2, r3
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005438:	b29b      	uxth	r3, r3
 800543a:	2b00      	cmp	r3, #0
 800543c:	d034      	beq.n	80054a8 <HAL_I2C_Mem_Read+0x1d0>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005442:	2b00      	cmp	r3, #0
 8005444:	d130      	bne.n	80054a8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	9300      	str	r3, [sp, #0]
 800544a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800544c:	2200      	movs	r2, #0
 800544e:	2180      	movs	r1, #128	; 0x80
 8005450:	68f8      	ldr	r0, [r7, #12]
 8005452:	f000 f935 	bl	80056c0 <I2C_WaitOnFlagUntilTimeout>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d001      	beq.n	8005460 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e04d      	b.n	80054fc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005464:	b29b      	uxth	r3, r3
 8005466:	2bff      	cmp	r3, #255	; 0xff
 8005468:	d90e      	bls.n	8005488 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	22ff      	movs	r2, #255	; 0xff
 800546e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005474:	b2da      	uxtb	r2, r3
 8005476:	8979      	ldrh	r1, [r7, #10]
 8005478:	2300      	movs	r3, #0
 800547a:	9300      	str	r3, [sp, #0]
 800547c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005480:	68f8      	ldr	r0, [r7, #12]
 8005482:	f000 fa3f 	bl	8005904 <I2C_TransferConfig>
 8005486:	e00f      	b.n	80054a8 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800548c:	b29a      	uxth	r2, r3
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005496:	b2da      	uxtb	r2, r3
 8005498:	8979      	ldrh	r1, [r7, #10]
 800549a:	2300      	movs	r3, #0
 800549c:	9300      	str	r3, [sp, #0]
 800549e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	f000 fa2e 	bl	8005904 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d19a      	bne.n	80053e8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054b2:	697a      	ldr	r2, [r7, #20]
 80054b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054b6:	68f8      	ldr	r0, [r7, #12]
 80054b8:	f000 f982 	bl	80057c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d001      	beq.n	80054c6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e01a      	b.n	80054fc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2220      	movs	r2, #32
 80054cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	6859      	ldr	r1, [r3, #4]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	4b0b      	ldr	r3, [pc, #44]	; (8005508 <HAL_I2C_Mem_Read+0x230>)
 80054da:	400b      	ands	r3, r1
 80054dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2220      	movs	r2, #32
 80054e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80054f6:	2300      	movs	r3, #0
 80054f8:	e000      	b.n	80054fc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80054fa:	2302      	movs	r3, #2
  }
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3718      	adds	r7, #24
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}
 8005504:	80002400 	.word	0x80002400
 8005508:	fe00e800 	.word	0xfe00e800

0800550c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800551a:	b2db      	uxtb	r3, r3
}
 800551c:	4618      	mov	r0, r3
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b086      	sub	sp, #24
 800552c:	af02      	add	r7, sp, #8
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	4608      	mov	r0, r1
 8005532:	4611      	mov	r1, r2
 8005534:	461a      	mov	r2, r3
 8005536:	4603      	mov	r3, r0
 8005538:	817b      	strh	r3, [r7, #10]
 800553a:	460b      	mov	r3, r1
 800553c:	813b      	strh	r3, [r7, #8]
 800553e:	4613      	mov	r3, r2
 8005540:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005542:	88fb      	ldrh	r3, [r7, #6]
 8005544:	b2da      	uxtb	r2, r3
 8005546:	8979      	ldrh	r1, [r7, #10]
 8005548:	4b20      	ldr	r3, [pc, #128]	; (80055cc <I2C_RequestMemoryWrite+0xa4>)
 800554a:	9300      	str	r3, [sp, #0]
 800554c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005550:	68f8      	ldr	r0, [r7, #12]
 8005552:	f000 f9d7 	bl	8005904 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005556:	69fa      	ldr	r2, [r7, #28]
 8005558:	69b9      	ldr	r1, [r7, #24]
 800555a:	68f8      	ldr	r0, [r7, #12]
 800555c:	f000 f8f0 	bl	8005740 <I2C_WaitOnTXISFlagUntilTimeout>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d001      	beq.n	800556a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e02c      	b.n	80055c4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800556a:	88fb      	ldrh	r3, [r7, #6]
 800556c:	2b01      	cmp	r3, #1
 800556e:	d105      	bne.n	800557c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005570:	893b      	ldrh	r3, [r7, #8]
 8005572:	b2da      	uxtb	r2, r3
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	629a      	str	r2, [r3, #40]	; 0x28
 800557a:	e015      	b.n	80055a8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800557c:	893b      	ldrh	r3, [r7, #8]
 800557e:	0a1b      	lsrs	r3, r3, #8
 8005580:	b29b      	uxth	r3, r3
 8005582:	b2da      	uxtb	r2, r3
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800558a:	69fa      	ldr	r2, [r7, #28]
 800558c:	69b9      	ldr	r1, [r7, #24]
 800558e:	68f8      	ldr	r0, [r7, #12]
 8005590:	f000 f8d6 	bl	8005740 <I2C_WaitOnTXISFlagUntilTimeout>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d001      	beq.n	800559e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e012      	b.n	80055c4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800559e:	893b      	ldrh	r3, [r7, #8]
 80055a0:	b2da      	uxtb	r2, r3
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	9300      	str	r3, [sp, #0]
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	2200      	movs	r2, #0
 80055b0:	2180      	movs	r1, #128	; 0x80
 80055b2:	68f8      	ldr	r0, [r7, #12]
 80055b4:	f000 f884 	bl	80056c0 <I2C_WaitOnFlagUntilTimeout>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d001      	beq.n	80055c2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e000      	b.n	80055c4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	80002000 	.word	0x80002000

080055d0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b086      	sub	sp, #24
 80055d4:	af02      	add	r7, sp, #8
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	4608      	mov	r0, r1
 80055da:	4611      	mov	r1, r2
 80055dc:	461a      	mov	r2, r3
 80055de:	4603      	mov	r3, r0
 80055e0:	817b      	strh	r3, [r7, #10]
 80055e2:	460b      	mov	r3, r1
 80055e4:	813b      	strh	r3, [r7, #8]
 80055e6:	4613      	mov	r3, r2
 80055e8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80055ea:	88fb      	ldrh	r3, [r7, #6]
 80055ec:	b2da      	uxtb	r2, r3
 80055ee:	8979      	ldrh	r1, [r7, #10]
 80055f0:	4b20      	ldr	r3, [pc, #128]	; (8005674 <I2C_RequestMemoryRead+0xa4>)
 80055f2:	9300      	str	r3, [sp, #0]
 80055f4:	2300      	movs	r3, #0
 80055f6:	68f8      	ldr	r0, [r7, #12]
 80055f8:	f000 f984 	bl	8005904 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055fc:	69fa      	ldr	r2, [r7, #28]
 80055fe:	69b9      	ldr	r1, [r7, #24]
 8005600:	68f8      	ldr	r0, [r7, #12]
 8005602:	f000 f89d 	bl	8005740 <I2C_WaitOnTXISFlagUntilTimeout>
 8005606:	4603      	mov	r3, r0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d001      	beq.n	8005610 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e02c      	b.n	800566a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005610:	88fb      	ldrh	r3, [r7, #6]
 8005612:	2b01      	cmp	r3, #1
 8005614:	d105      	bne.n	8005622 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005616:	893b      	ldrh	r3, [r7, #8]
 8005618:	b2da      	uxtb	r2, r3
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	629a      	str	r2, [r3, #40]	; 0x28
 8005620:	e015      	b.n	800564e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005622:	893b      	ldrh	r3, [r7, #8]
 8005624:	0a1b      	lsrs	r3, r3, #8
 8005626:	b29b      	uxth	r3, r3
 8005628:	b2da      	uxtb	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005630:	69fa      	ldr	r2, [r7, #28]
 8005632:	69b9      	ldr	r1, [r7, #24]
 8005634:	68f8      	ldr	r0, [r7, #12]
 8005636:	f000 f883 	bl	8005740 <I2C_WaitOnTXISFlagUntilTimeout>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d001      	beq.n	8005644 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	e012      	b.n	800566a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005644:	893b      	ldrh	r3, [r7, #8]
 8005646:	b2da      	uxtb	r2, r3
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	9300      	str	r3, [sp, #0]
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	2200      	movs	r2, #0
 8005656:	2140      	movs	r1, #64	; 0x40
 8005658:	68f8      	ldr	r0, [r7, #12]
 800565a:	f000 f831 	bl	80056c0 <I2C_WaitOnFlagUntilTimeout>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d001      	beq.n	8005668 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e000      	b.n	800566a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	3710      	adds	r7, #16
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	80002000 	.word	0x80002000

08005678 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	f003 0302 	and.w	r3, r3, #2
 800568a:	2b02      	cmp	r3, #2
 800568c:	d103      	bne.n	8005696 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2200      	movs	r2, #0
 8005694:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	699b      	ldr	r3, [r3, #24]
 800569c:	f003 0301 	and.w	r3, r3, #1
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d007      	beq.n	80056b4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	699a      	ldr	r2, [r3, #24]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f042 0201 	orr.w	r2, r2, #1
 80056b2:	619a      	str	r2, [r3, #24]
  }
}
 80056b4:	bf00      	nop
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	603b      	str	r3, [r7, #0]
 80056cc:	4613      	mov	r3, r2
 80056ce:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056d0:	e022      	b.n	8005718 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d8:	d01e      	beq.n	8005718 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056da:	f7fc fe59 	bl	8002390 <HAL_GetTick>
 80056de:	4602      	mov	r2, r0
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	683a      	ldr	r2, [r7, #0]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d302      	bcc.n	80056f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d113      	bne.n	8005718 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056f4:	f043 0220 	orr.w	r2, r3, #32
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2220      	movs	r2, #32
 8005700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2200      	movs	r2, #0
 8005710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e00f      	b.n	8005738 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	699a      	ldr	r2, [r3, #24]
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	4013      	ands	r3, r2
 8005722:	68ba      	ldr	r2, [r7, #8]
 8005724:	429a      	cmp	r2, r3
 8005726:	bf0c      	ite	eq
 8005728:	2301      	moveq	r3, #1
 800572a:	2300      	movne	r3, #0
 800572c:	b2db      	uxtb	r3, r3
 800572e:	461a      	mov	r2, r3
 8005730:	79fb      	ldrb	r3, [r7, #7]
 8005732:	429a      	cmp	r2, r3
 8005734:	d0cd      	beq.n	80056d2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3710      	adds	r7, #16
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800574c:	e02c      	b.n	80057a8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	68b9      	ldr	r1, [r7, #8]
 8005752:	68f8      	ldr	r0, [r7, #12]
 8005754:	f000 f870 	bl	8005838 <I2C_IsAcknowledgeFailed>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d001      	beq.n	8005762 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e02a      	b.n	80057b8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005768:	d01e      	beq.n	80057a8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800576a:	f7fc fe11 	bl	8002390 <HAL_GetTick>
 800576e:	4602      	mov	r2, r0
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	68ba      	ldr	r2, [r7, #8]
 8005776:	429a      	cmp	r2, r3
 8005778:	d302      	bcc.n	8005780 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d113      	bne.n	80057a8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005784:	f043 0220 	orr.w	r2, r3, #32
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2220      	movs	r2, #32
 8005790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2200      	movs	r2, #0
 8005798:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2200      	movs	r2, #0
 80057a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e007      	b.n	80057b8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	f003 0302 	and.w	r3, r3, #2
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d1cb      	bne.n	800574e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3710      	adds	r7, #16
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80057cc:	e028      	b.n	8005820 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	68b9      	ldr	r1, [r7, #8]
 80057d2:	68f8      	ldr	r0, [r7, #12]
 80057d4:	f000 f830 	bl	8005838 <I2C_IsAcknowledgeFailed>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d001      	beq.n	80057e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e026      	b.n	8005830 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057e2:	f7fc fdd5 	bl	8002390 <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	68ba      	ldr	r2, [r7, #8]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d302      	bcc.n	80057f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d113      	bne.n	8005820 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057fc:	f043 0220 	orr.w	r2, r3, #32
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2220      	movs	r2, #32
 8005808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e007      	b.n	8005830 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	699b      	ldr	r3, [r3, #24]
 8005826:	f003 0320 	and.w	r3, r3, #32
 800582a:	2b20      	cmp	r3, #32
 800582c:	d1cf      	bne.n	80057ce <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800582e:	2300      	movs	r3, #0
}
 8005830:	4618      	mov	r0, r3
 8005832:	3710      	adds	r7, #16
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	699b      	ldr	r3, [r3, #24]
 800584a:	f003 0310 	and.w	r3, r3, #16
 800584e:	2b10      	cmp	r3, #16
 8005850:	d151      	bne.n	80058f6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005852:	e022      	b.n	800589a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800585a:	d01e      	beq.n	800589a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800585c:	f7fc fd98 	bl	8002390 <HAL_GetTick>
 8005860:	4602      	mov	r2, r0
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	68ba      	ldr	r2, [r7, #8]
 8005868:	429a      	cmp	r2, r3
 800586a:	d302      	bcc.n	8005872 <I2C_IsAcknowledgeFailed+0x3a>
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d113      	bne.n	800589a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005876:	f043 0220 	orr.w	r2, r3, #32
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2220      	movs	r2, #32
 8005882:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2200      	movs	r2, #0
 800588a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e02e      	b.n	80058f8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	699b      	ldr	r3, [r3, #24]
 80058a0:	f003 0320 	and.w	r3, r3, #32
 80058a4:	2b20      	cmp	r3, #32
 80058a6:	d1d5      	bne.n	8005854 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2210      	movs	r2, #16
 80058ae:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2220      	movs	r2, #32
 80058b6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80058b8:	68f8      	ldr	r0, [r7, #12]
 80058ba:	f7ff fedd 	bl	8005678 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	6859      	ldr	r1, [r3, #4]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	4b0d      	ldr	r3, [pc, #52]	; (8005900 <I2C_IsAcknowledgeFailed+0xc8>)
 80058ca:	400b      	ands	r3, r1
 80058cc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058d2:	f043 0204 	orr.w	r2, r3, #4
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2220      	movs	r2, #32
 80058de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e000      	b.n	80058f8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3710      	adds	r7, #16
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	fe00e800 	.word	0xfe00e800

08005904 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8005904:	b480      	push	{r7}
 8005906:	b085      	sub	sp, #20
 8005908:	af00      	add	r7, sp, #0
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	607b      	str	r3, [r7, #4]
 800590e:	460b      	mov	r3, r1
 8005910:	817b      	strh	r3, [r7, #10]
 8005912:	4613      	mov	r3, r2
 8005914:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	685a      	ldr	r2, [r3, #4]
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	0d5b      	lsrs	r3, r3, #21
 8005920:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005924:	4b0d      	ldr	r3, [pc, #52]	; (800595c <I2C_TransferConfig+0x58>)
 8005926:	430b      	orrs	r3, r1
 8005928:	43db      	mvns	r3, r3
 800592a:	ea02 0103 	and.w	r1, r2, r3
 800592e:	897b      	ldrh	r3, [r7, #10]
 8005930:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005934:	7a7b      	ldrb	r3, [r7, #9]
 8005936:	041b      	lsls	r3, r3, #16
 8005938:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800593c:	431a      	orrs	r2, r3
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	431a      	orrs	r2, r3
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	431a      	orrs	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	430a      	orrs	r2, r1
 800594c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800594e:	bf00      	nop
 8005950:	3714      	adds	r7, #20
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr
 800595a:	bf00      	nop
 800595c:	03ff63ff 	.word	0x03ff63ff

08005960 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d101      	bne.n	8005972 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e0bf      	b.n	8005af2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005978:	b2db      	uxtb	r3, r3
 800597a:	2b00      	cmp	r3, #0
 800597c:	d106      	bne.n	800598c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f002 fe2c 	bl	80085e4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2202      	movs	r2, #2
 8005990:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	699a      	ldr	r2, [r3, #24]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80059a2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	6999      	ldr	r1, [r3, #24]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	685a      	ldr	r2, [r3, #4]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80059b8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	430a      	orrs	r2, r1
 80059c6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	6899      	ldr	r1, [r3, #8]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	4b4a      	ldr	r3, [pc, #296]	; (8005afc <HAL_LTDC_Init+0x19c>)
 80059d4:	400b      	ands	r3, r1
 80059d6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	695b      	ldr	r3, [r3, #20]
 80059dc:	041b      	lsls	r3, r3, #16
 80059de:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	6899      	ldr	r1, [r3, #8]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	699a      	ldr	r2, [r3, #24]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	431a      	orrs	r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	430a      	orrs	r2, r1
 80059f4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68d9      	ldr	r1, [r3, #12]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	4b3e      	ldr	r3, [pc, #248]	; (8005afc <HAL_LTDC_Init+0x19c>)
 8005a02:	400b      	ands	r3, r1
 8005a04:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	69db      	ldr	r3, [r3, #28]
 8005a0a:	041b      	lsls	r3, r3, #16
 8005a0c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68d9      	ldr	r1, [r3, #12]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a1a      	ldr	r2, [r3, #32]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	431a      	orrs	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	430a      	orrs	r2, r1
 8005a22:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	6919      	ldr	r1, [r3, #16]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	4b33      	ldr	r3, [pc, #204]	; (8005afc <HAL_LTDC_Init+0x19c>)
 8005a30:	400b      	ands	r3, r1
 8005a32:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a38:	041b      	lsls	r3, r3, #16
 8005a3a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	6919      	ldr	r1, [r3, #16]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	431a      	orrs	r2, r3
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	430a      	orrs	r2, r1
 8005a50:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	6959      	ldr	r1, [r3, #20]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	4b27      	ldr	r3, [pc, #156]	; (8005afc <HAL_LTDC_Init+0x19c>)
 8005a5e:	400b      	ands	r3, r1
 8005a60:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a66:	041b      	lsls	r3, r3, #16
 8005a68:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	6959      	ldr	r1, [r3, #20]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	431a      	orrs	r2, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	430a      	orrs	r2, r1
 8005a7e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a86:	021b      	lsls	r3, r3, #8
 8005a88:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005a90:	041b      	lsls	r3, r3, #16
 8005a92:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005aa2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005aaa:	68ba      	ldr	r2, [r7, #8]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005ab6:	431a      	orrs	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	430a      	orrs	r2, r1
 8005abe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f042 0206 	orr.w	r2, r2, #6
 8005ace:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	699a      	ldr	r2, [r3, #24]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f042 0201 	orr.w	r2, r2, #1
 8005ade:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3710      	adds	r7, #16
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	f000f800 	.word	0xf000f800

08005b00 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005b00:	b5b0      	push	{r4, r5, r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	60b9      	str	r1, [r7, #8]
 8005b0a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d101      	bne.n	8005b1a <HAL_LTDC_ConfigLayer+0x1a>
 8005b16:	2302      	movs	r3, #2
 8005b18:	e02c      	b.n	8005b74 <HAL_LTDC_ConfigLayer+0x74>
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2202      	movs	r2, #2
 8005b26:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2134      	movs	r1, #52	; 0x34
 8005b30:	fb01 f303 	mul.w	r3, r1, r3
 8005b34:	4413      	add	r3, r2
 8005b36:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	4614      	mov	r4, r2
 8005b3e:	461d      	mov	r5, r3
 8005b40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005b42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005b44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005b46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005b48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005b4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005b4c:	682b      	ldr	r3, [r5, #0]
 8005b4e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	68b9      	ldr	r1, [r7, #8]
 8005b54:	68f8      	ldr	r0, [r7, #12]
 8005b56:	f000 f811 	bl	8005b7c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2201      	movs	r2, #1
 8005b66:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3710      	adds	r7, #16
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bdb0      	pop	{r4, r5, r7, pc}

08005b7c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b089      	sub	sp, #36	; 0x24
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	685a      	ldr	r2, [r3, #4]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	0c1b      	lsrs	r3, r3, #16
 8005b94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b98:	4413      	add	r3, r2
 8005b9a:	041b      	lsls	r3, r3, #16
 8005b9c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	01db      	lsls	r3, r3, #7
 8005ba8:	4413      	add	r3, r2
 8005baa:	3384      	adds	r3, #132	; 0x84
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	68fa      	ldr	r2, [r7, #12]
 8005bb0:	6812      	ldr	r2, [r2, #0]
 8005bb2:	4611      	mov	r1, r2
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	01d2      	lsls	r2, r2, #7
 8005bb8:	440a      	add	r2, r1
 8005bba:	3284      	adds	r2, #132	; 0x84
 8005bbc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005bc0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	0c1b      	lsrs	r3, r3, #16
 8005bce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bd2:	4413      	add	r3, r2
 8005bd4:	1c5a      	adds	r2, r3, #1
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4619      	mov	r1, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	01db      	lsls	r3, r3, #7
 8005be0:	440b      	add	r3, r1
 8005be2:	3384      	adds	r3, #132	; 0x84
 8005be4:	4619      	mov	r1, r3
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	4313      	orrs	r3, r2
 8005bea:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	68da      	ldr	r2, [r3, #12]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005bfa:	4413      	add	r3, r2
 8005bfc:	041b      	lsls	r3, r3, #16
 8005bfe:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	461a      	mov	r2, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	01db      	lsls	r3, r3, #7
 8005c0a:	4413      	add	r3, r2
 8005c0c:	3384      	adds	r3, #132	; 0x84
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	6812      	ldr	r2, [r2, #0]
 8005c14:	4611      	mov	r1, r2
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	01d2      	lsls	r2, r2, #7
 8005c1a:	440a      	add	r2, r1
 8005c1c:	3284      	adds	r2, #132	; 0x84
 8005c1e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005c22:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	689a      	ldr	r2, [r3, #8]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c32:	4413      	add	r3, r2
 8005c34:	1c5a      	adds	r2, r3, #1
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	01db      	lsls	r3, r3, #7
 8005c40:	440b      	add	r3, r1
 8005c42:	3384      	adds	r3, #132	; 0x84
 8005c44:	4619      	mov	r1, r3
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	461a      	mov	r2, r3
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	01db      	lsls	r3, r3, #7
 8005c56:	4413      	add	r3, r2
 8005c58:	3384      	adds	r3, #132	; 0x84
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	6812      	ldr	r2, [r2, #0]
 8005c60:	4611      	mov	r1, r2
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	01d2      	lsls	r2, r2, #7
 8005c66:	440a      	add	r2, r1
 8005c68:	3284      	adds	r2, #132	; 0x84
 8005c6a:	f023 0307 	bic.w	r3, r3, #7
 8005c6e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	461a      	mov	r2, r3
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	01db      	lsls	r3, r3, #7
 8005c7a:	4413      	add	r3, r2
 8005c7c:	3384      	adds	r3, #132	; 0x84
 8005c7e:	461a      	mov	r2, r3
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005c8c:	021b      	lsls	r3, r3, #8
 8005c8e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005c96:	041b      	lsls	r3, r3, #16
 8005c98:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	699b      	ldr	r3, [r3, #24]
 8005c9e:	061b      	lsls	r3, r3, #24
 8005ca0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	01db      	lsls	r3, r3, #7
 8005cac:	4413      	add	r3, r2
 8005cae:	3384      	adds	r3, #132	; 0x84
 8005cb0:	699b      	ldr	r3, [r3, #24]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	01db      	lsls	r3, r3, #7
 8005cbc:	4413      	add	r3, r2
 8005cbe:	3384      	adds	r3, #132	; 0x84
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005ccc:	461a      	mov	r2, r3
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	431a      	orrs	r2, r3
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	431a      	orrs	r2, r3
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4619      	mov	r1, r3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	01db      	lsls	r3, r3, #7
 8005ce0:	440b      	add	r3, r1
 8005ce2:	3384      	adds	r3, #132	; 0x84
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	01db      	lsls	r3, r3, #7
 8005cf6:	4413      	add	r3, r2
 8005cf8:	3384      	adds	r3, #132	; 0x84
 8005cfa:	695b      	ldr	r3, [r3, #20]
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	6812      	ldr	r2, [r2, #0]
 8005d00:	4611      	mov	r1, r2
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	01d2      	lsls	r2, r2, #7
 8005d06:	440a      	add	r2, r1
 8005d08:	3284      	adds	r2, #132	; 0x84
 8005d0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005d0e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	461a      	mov	r2, r3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	01db      	lsls	r3, r3, #7
 8005d1a:	4413      	add	r3, r2
 8005d1c:	3384      	adds	r3, #132	; 0x84
 8005d1e:	461a      	mov	r2, r3
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	695b      	ldr	r3, [r3, #20]
 8005d24:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	01db      	lsls	r3, r3, #7
 8005d30:	4413      	add	r3, r2
 8005d32:	3384      	adds	r3, #132	; 0x84
 8005d34:	69da      	ldr	r2, [r3, #28]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	01db      	lsls	r3, r3, #7
 8005d40:	440b      	add	r3, r1
 8005d42:	3384      	adds	r3, #132	; 0x84
 8005d44:	4619      	mov	r1, r3
 8005d46:	4b58      	ldr	r3, [pc, #352]	; (8005ea8 <LTDC_SetConfig+0x32c>)
 8005d48:	4013      	ands	r3, r2
 8005d4a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	69da      	ldr	r2, [r3, #28]
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	6a1b      	ldr	r3, [r3, #32]
 8005d54:	68f9      	ldr	r1, [r7, #12]
 8005d56:	6809      	ldr	r1, [r1, #0]
 8005d58:	4608      	mov	r0, r1
 8005d5a:	6879      	ldr	r1, [r7, #4]
 8005d5c:	01c9      	lsls	r1, r1, #7
 8005d5e:	4401      	add	r1, r0
 8005d60:	3184      	adds	r1, #132	; 0x84
 8005d62:	4313      	orrs	r3, r2
 8005d64:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	01db      	lsls	r3, r3, #7
 8005d70:	4413      	add	r3, r2
 8005d72:	3384      	adds	r3, #132	; 0x84
 8005d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	01db      	lsls	r3, r3, #7
 8005d80:	4413      	add	r3, r2
 8005d82:	3384      	adds	r3, #132	; 0x84
 8005d84:	461a      	mov	r2, r3
 8005d86:	2300      	movs	r3, #0
 8005d88:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	461a      	mov	r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	01db      	lsls	r3, r3, #7
 8005d94:	4413      	add	r3, r2
 8005d96:	3384      	adds	r3, #132	; 0x84
 8005d98:	461a      	mov	r2, r3
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d102      	bne.n	8005dae <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8005da8:	2304      	movs	r3, #4
 8005daa:	61fb      	str	r3, [r7, #28]
 8005dac:	e01b      	b.n	8005de6 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d102      	bne.n	8005dbc <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8005db6:	2303      	movs	r3, #3
 8005db8:	61fb      	str	r3, [r7, #28]
 8005dba:	e014      	b.n	8005de6 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	2b04      	cmp	r3, #4
 8005dc2:	d00b      	beq.n	8005ddc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005dc8:	2b02      	cmp	r3, #2
 8005dca:	d007      	beq.n	8005ddc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005dd0:	2b03      	cmp	r3, #3
 8005dd2:	d003      	beq.n	8005ddc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005dd8:	2b07      	cmp	r3, #7
 8005dda:	d102      	bne.n	8005de2 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8005ddc:	2302      	movs	r3, #2
 8005dde:	61fb      	str	r3, [r7, #28]
 8005de0:	e001      	b.n	8005de6 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8005de2:	2301      	movs	r3, #1
 8005de4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	461a      	mov	r2, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	01db      	lsls	r3, r3, #7
 8005df0:	4413      	add	r3, r2
 8005df2:	3384      	adds	r3, #132	; 0x84
 8005df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	6812      	ldr	r2, [r2, #0]
 8005dfa:	4611      	mov	r1, r2
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	01d2      	lsls	r2, r2, #7
 8005e00:	440a      	add	r2, r1
 8005e02:	3284      	adds	r2, #132	; 0x84
 8005e04:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005e08:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e0e:	69fa      	ldr	r2, [r7, #28]
 8005e10:	fb02 f303 	mul.w	r3, r2, r3
 8005e14:	041a      	lsls	r2, r3, #16
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	6859      	ldr	r1, [r3, #4]
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	1acb      	subs	r3, r1, r3
 8005e20:	69f9      	ldr	r1, [r7, #28]
 8005e22:	fb01 f303 	mul.w	r3, r1, r3
 8005e26:	3303      	adds	r3, #3
 8005e28:	68f9      	ldr	r1, [r7, #12]
 8005e2a:	6809      	ldr	r1, [r1, #0]
 8005e2c:	4608      	mov	r0, r1
 8005e2e:	6879      	ldr	r1, [r7, #4]
 8005e30:	01c9      	lsls	r1, r1, #7
 8005e32:	4401      	add	r1, r0
 8005e34:	3184      	adds	r1, #132	; 0x84
 8005e36:	4313      	orrs	r3, r2
 8005e38:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	461a      	mov	r2, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	01db      	lsls	r3, r3, #7
 8005e44:	4413      	add	r3, r2
 8005e46:	3384      	adds	r3, #132	; 0x84
 8005e48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4619      	mov	r1, r3
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	01db      	lsls	r3, r3, #7
 8005e54:	440b      	add	r3, r1
 8005e56:	3384      	adds	r3, #132	; 0x84
 8005e58:	4619      	mov	r1, r3
 8005e5a:	4b14      	ldr	r3, [pc, #80]	; (8005eac <LTDC_SetConfig+0x330>)
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	461a      	mov	r2, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	01db      	lsls	r3, r3, #7
 8005e6a:	4413      	add	r3, r2
 8005e6c:	3384      	adds	r3, #132	; 0x84
 8005e6e:	461a      	mov	r2, r3
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e74:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	01db      	lsls	r3, r3, #7
 8005e80:	4413      	add	r3, r2
 8005e82:	3384      	adds	r3, #132	; 0x84
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	6812      	ldr	r2, [r2, #0]
 8005e8a:	4611      	mov	r1, r2
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	01d2      	lsls	r2, r2, #7
 8005e90:	440a      	add	r2, r1
 8005e92:	3284      	adds	r2, #132	; 0x84
 8005e94:	f043 0301 	orr.w	r3, r3, #1
 8005e98:	6013      	str	r3, [r2, #0]
}
 8005e9a:	bf00      	nop
 8005e9c:	3724      	adds	r7, #36	; 0x24
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr
 8005ea6:	bf00      	nop
 8005ea8:	fffff8f8 	.word	0xfffff8f8
 8005eac:	fffff800 	.word	0xfffff800

08005eb0 <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d101      	bne.n	8005ec6 <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	e001      	b.n	8005eca <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 8005ec6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	6a1b      	ldr	r3, [r3, #32]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d102      	bne.n	8005edc <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 8005ed6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005eda:	e000      	b.n	8005ede <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 8005edc:	2200      	movs	r2, #0
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	69db      	ldr	r3, [r3, #28]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d102      	bne.n	8005ef0 <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 8005eea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005eee:	e000      	b.n	8005ef2 <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	605a      	str	r2, [r3, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005efa:	1e5a      	subs	r2, r3, #1
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f08:	4413      	add	r3, r2
 8005f0a:	1e5a      	subs	r2, r3, #1
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive - 1U;
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f18:	441a      	add	r2, r3
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1e:	4413      	add	r3, r2
 8005f20:	1e5a      	subs	r2, r3, #1
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f2e:	441a      	add	r2, r3
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f34:	441a      	add	r2, r3
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f3a:	4413      	add	r3, r2
 8005f3c:	1e5a      	subs	r2, r3, #1
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	370c      	adds	r7, #12
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b082      	sub	sp, #8
 8005f54:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005f56:	2300      	movs	r3, #0
 8005f58:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005f5a:	4b23      	ldr	r3, [pc, #140]	; (8005fe8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5e:	4a22      	ldr	r2, [pc, #136]	; (8005fe8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f64:	6413      	str	r3, [r2, #64]	; 0x40
 8005f66:	4b20      	ldr	r3, [pc, #128]	; (8005fe8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f6e:	603b      	str	r3, [r7, #0]
 8005f70:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005f72:	4b1e      	ldr	r3, [pc, #120]	; (8005fec <HAL_PWREx_EnableOverDrive+0x9c>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a1d      	ldr	r2, [pc, #116]	; (8005fec <HAL_PWREx_EnableOverDrive+0x9c>)
 8005f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f7c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005f7e:	f7fc fa07 	bl	8002390 <HAL_GetTick>
 8005f82:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005f84:	e009      	b.n	8005f9a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005f86:	f7fc fa03 	bl	8002390 <HAL_GetTick>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	1ad3      	subs	r3, r2, r3
 8005f90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f94:	d901      	bls.n	8005f9a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005f96:	2303      	movs	r3, #3
 8005f98:	e022      	b.n	8005fe0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005f9a:	4b14      	ldr	r3, [pc, #80]	; (8005fec <HAL_PWREx_EnableOverDrive+0x9c>)
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fa6:	d1ee      	bne.n	8005f86 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005fa8:	4b10      	ldr	r3, [pc, #64]	; (8005fec <HAL_PWREx_EnableOverDrive+0x9c>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a0f      	ldr	r2, [pc, #60]	; (8005fec <HAL_PWREx_EnableOverDrive+0x9c>)
 8005fae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fb2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005fb4:	f7fc f9ec 	bl	8002390 <HAL_GetTick>
 8005fb8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005fba:	e009      	b.n	8005fd0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005fbc:	f7fc f9e8 	bl	8002390 <HAL_GetTick>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	1ad3      	subs	r3, r2, r3
 8005fc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fca:	d901      	bls.n	8005fd0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	e007      	b.n	8005fe0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005fd0:	4b06      	ldr	r3, [pc, #24]	; (8005fec <HAL_PWREx_EnableOverDrive+0x9c>)
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fdc:	d1ee      	bne.n	8005fbc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3708      	adds	r7, #8
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	40023800 	.word	0x40023800
 8005fec:	40007000 	.word	0x40007000

08005ff0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b086      	sub	sp, #24
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d101      	bne.n	8006006 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e25e      	b.n	80064c4 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 0301 	and.w	r3, r3, #1
 800600e:	2b00      	cmp	r3, #0
 8006010:	f000 8087 	beq.w	8006122 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006014:	4b96      	ldr	r3, [pc, #600]	; (8006270 <HAL_RCC_OscConfig+0x280>)
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	f003 030c 	and.w	r3, r3, #12
 800601c:	2b04      	cmp	r3, #4
 800601e:	d00c      	beq.n	800603a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006020:	4b93      	ldr	r3, [pc, #588]	; (8006270 <HAL_RCC_OscConfig+0x280>)
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	f003 030c 	and.w	r3, r3, #12
 8006028:	2b08      	cmp	r3, #8
 800602a:	d112      	bne.n	8006052 <HAL_RCC_OscConfig+0x62>
 800602c:	4b90      	ldr	r3, [pc, #576]	; (8006270 <HAL_RCC_OscConfig+0x280>)
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006034:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006038:	d10b      	bne.n	8006052 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800603a:	4b8d      	ldr	r3, [pc, #564]	; (8006270 <HAL_RCC_OscConfig+0x280>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006042:	2b00      	cmp	r3, #0
 8006044:	d06c      	beq.n	8006120 <HAL_RCC_OscConfig+0x130>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d168      	bne.n	8006120 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e238      	b.n	80064c4 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800605a:	d106      	bne.n	800606a <HAL_RCC_OscConfig+0x7a>
 800605c:	4b84      	ldr	r3, [pc, #528]	; (8006270 <HAL_RCC_OscConfig+0x280>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a83      	ldr	r2, [pc, #524]	; (8006270 <HAL_RCC_OscConfig+0x280>)
 8006062:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006066:	6013      	str	r3, [r2, #0]
 8006068:	e02e      	b.n	80060c8 <HAL_RCC_OscConfig+0xd8>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d10c      	bne.n	800608c <HAL_RCC_OscConfig+0x9c>
 8006072:	4b7f      	ldr	r3, [pc, #508]	; (8006270 <HAL_RCC_OscConfig+0x280>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a7e      	ldr	r2, [pc, #504]	; (8006270 <HAL_RCC_OscConfig+0x280>)
 8006078:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800607c:	6013      	str	r3, [r2, #0]
 800607e:	4b7c      	ldr	r3, [pc, #496]	; (8006270 <HAL_RCC_OscConfig+0x280>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a7b      	ldr	r2, [pc, #492]	; (8006270 <HAL_RCC_OscConfig+0x280>)
 8006084:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006088:	6013      	str	r3, [r2, #0]
 800608a:	e01d      	b.n	80060c8 <HAL_RCC_OscConfig+0xd8>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006094:	d10c      	bne.n	80060b0 <HAL_RCC_OscConfig+0xc0>
 8006096:	4b76      	ldr	r3, [pc, #472]	; (8006270 <HAL_RCC_OscConfig+0x280>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a75      	ldr	r2, [pc, #468]	; (8006270 <HAL_RCC_OscConfig+0x280>)
 800609c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80060a0:	6013      	str	r3, [r2, #0]
 80060a2:	4b73      	ldr	r3, [pc, #460]	; (8006270 <HAL_RCC_OscConfig+0x280>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a72      	ldr	r2, [pc, #456]	; (8006270 <HAL_RCC_OscConfig+0x280>)
 80060a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060ac:	6013      	str	r3, [r2, #0]
 80060ae:	e00b      	b.n	80060c8 <HAL_RCC_OscConfig+0xd8>
 80060b0:	4b6f      	ldr	r3, [pc, #444]	; (8006270 <HAL_RCC_OscConfig+0x280>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a6e      	ldr	r2, [pc, #440]	; (8006270 <HAL_RCC_OscConfig+0x280>)
 80060b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060ba:	6013      	str	r3, [r2, #0]
 80060bc:	4b6c      	ldr	r3, [pc, #432]	; (8006270 <HAL_RCC_OscConfig+0x280>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a6b      	ldr	r2, [pc, #428]	; (8006270 <HAL_RCC_OscConfig+0x280>)
 80060c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d013      	beq.n	80060f8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060d0:	f7fc f95e 	bl	8002390 <HAL_GetTick>
 80060d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060d6:	e008      	b.n	80060ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060d8:	f7fc f95a 	bl	8002390 <HAL_GetTick>
 80060dc:	4602      	mov	r2, r0
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	2b64      	cmp	r3, #100	; 0x64
 80060e4:	d901      	bls.n	80060ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80060e6:	2303      	movs	r3, #3
 80060e8:	e1ec      	b.n	80064c4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060ea:	4b61      	ldr	r3, [pc, #388]	; (8006270 <HAL_RCC_OscConfig+0x280>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d0f0      	beq.n	80060d8 <HAL_RCC_OscConfig+0xe8>
 80060f6:	e014      	b.n	8006122 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060f8:	f7fc f94a 	bl	8002390 <HAL_GetTick>
 80060fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060fe:	e008      	b.n	8006112 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006100:	f7fc f946 	bl	8002390 <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	2b64      	cmp	r3, #100	; 0x64
 800610c:	d901      	bls.n	8006112 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	e1d8      	b.n	80064c4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006112:	4b57      	ldr	r3, [pc, #348]	; (8006270 <HAL_RCC_OscConfig+0x280>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800611a:	2b00      	cmp	r3, #0
 800611c:	d1f0      	bne.n	8006100 <HAL_RCC_OscConfig+0x110>
 800611e:	e000      	b.n	8006122 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006120:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 0302 	and.w	r3, r3, #2
 800612a:	2b00      	cmp	r3, #0
 800612c:	d069      	beq.n	8006202 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800612e:	4b50      	ldr	r3, [pc, #320]	; (8006270 <HAL_RCC_OscConfig+0x280>)
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	f003 030c 	and.w	r3, r3, #12
 8006136:	2b00      	cmp	r3, #0
 8006138:	d00b      	beq.n	8006152 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800613a:	4b4d      	ldr	r3, [pc, #308]	; (8006270 <HAL_RCC_OscConfig+0x280>)
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	f003 030c 	and.w	r3, r3, #12
 8006142:	2b08      	cmp	r3, #8
 8006144:	d11c      	bne.n	8006180 <HAL_RCC_OscConfig+0x190>
 8006146:	4b4a      	ldr	r3, [pc, #296]	; (8006270 <HAL_RCC_OscConfig+0x280>)
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800614e:	2b00      	cmp	r3, #0
 8006150:	d116      	bne.n	8006180 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006152:	4b47      	ldr	r3, [pc, #284]	; (8006270 <HAL_RCC_OscConfig+0x280>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 0302 	and.w	r3, r3, #2
 800615a:	2b00      	cmp	r3, #0
 800615c:	d005      	beq.n	800616a <HAL_RCC_OscConfig+0x17a>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	2b01      	cmp	r3, #1
 8006164:	d001      	beq.n	800616a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e1ac      	b.n	80064c4 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800616a:	4b41      	ldr	r3, [pc, #260]	; (8006270 <HAL_RCC_OscConfig+0x280>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	00db      	lsls	r3, r3, #3
 8006178:	493d      	ldr	r1, [pc, #244]	; (8006270 <HAL_RCC_OscConfig+0x280>)
 800617a:	4313      	orrs	r3, r2
 800617c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800617e:	e040      	b.n	8006202 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d023      	beq.n	80061d0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006188:	4b39      	ldr	r3, [pc, #228]	; (8006270 <HAL_RCC_OscConfig+0x280>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a38      	ldr	r2, [pc, #224]	; (8006270 <HAL_RCC_OscConfig+0x280>)
 800618e:	f043 0301 	orr.w	r3, r3, #1
 8006192:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006194:	f7fc f8fc 	bl	8002390 <HAL_GetTick>
 8006198:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800619a:	e008      	b.n	80061ae <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800619c:	f7fc f8f8 	bl	8002390 <HAL_GetTick>
 80061a0:	4602      	mov	r2, r0
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	1ad3      	subs	r3, r2, r3
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	d901      	bls.n	80061ae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80061aa:	2303      	movs	r3, #3
 80061ac:	e18a      	b.n	80064c4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061ae:	4b30      	ldr	r3, [pc, #192]	; (8006270 <HAL_RCC_OscConfig+0x280>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 0302 	and.w	r3, r3, #2
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d0f0      	beq.n	800619c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061ba:	4b2d      	ldr	r3, [pc, #180]	; (8006270 <HAL_RCC_OscConfig+0x280>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	00db      	lsls	r3, r3, #3
 80061c8:	4929      	ldr	r1, [pc, #164]	; (8006270 <HAL_RCC_OscConfig+0x280>)
 80061ca:	4313      	orrs	r3, r2
 80061cc:	600b      	str	r3, [r1, #0]
 80061ce:	e018      	b.n	8006202 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061d0:	4b27      	ldr	r3, [pc, #156]	; (8006270 <HAL_RCC_OscConfig+0x280>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a26      	ldr	r2, [pc, #152]	; (8006270 <HAL_RCC_OscConfig+0x280>)
 80061d6:	f023 0301 	bic.w	r3, r3, #1
 80061da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061dc:	f7fc f8d8 	bl	8002390 <HAL_GetTick>
 80061e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061e2:	e008      	b.n	80061f6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061e4:	f7fc f8d4 	bl	8002390 <HAL_GetTick>
 80061e8:	4602      	mov	r2, r0
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	1ad3      	subs	r3, r2, r3
 80061ee:	2b02      	cmp	r3, #2
 80061f0:	d901      	bls.n	80061f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80061f2:	2303      	movs	r3, #3
 80061f4:	e166      	b.n	80064c4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061f6:	4b1e      	ldr	r3, [pc, #120]	; (8006270 <HAL_RCC_OscConfig+0x280>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f003 0302 	and.w	r3, r3, #2
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d1f0      	bne.n	80061e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f003 0308 	and.w	r3, r3, #8
 800620a:	2b00      	cmp	r3, #0
 800620c:	d038      	beq.n	8006280 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	695b      	ldr	r3, [r3, #20]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d019      	beq.n	800624a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006216:	4b16      	ldr	r3, [pc, #88]	; (8006270 <HAL_RCC_OscConfig+0x280>)
 8006218:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800621a:	4a15      	ldr	r2, [pc, #84]	; (8006270 <HAL_RCC_OscConfig+0x280>)
 800621c:	f043 0301 	orr.w	r3, r3, #1
 8006220:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006222:	f7fc f8b5 	bl	8002390 <HAL_GetTick>
 8006226:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006228:	e008      	b.n	800623c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800622a:	f7fc f8b1 	bl	8002390 <HAL_GetTick>
 800622e:	4602      	mov	r2, r0
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	1ad3      	subs	r3, r2, r3
 8006234:	2b02      	cmp	r3, #2
 8006236:	d901      	bls.n	800623c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006238:	2303      	movs	r3, #3
 800623a:	e143      	b.n	80064c4 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800623c:	4b0c      	ldr	r3, [pc, #48]	; (8006270 <HAL_RCC_OscConfig+0x280>)
 800623e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006240:	f003 0302 	and.w	r3, r3, #2
 8006244:	2b00      	cmp	r3, #0
 8006246:	d0f0      	beq.n	800622a <HAL_RCC_OscConfig+0x23a>
 8006248:	e01a      	b.n	8006280 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800624a:	4b09      	ldr	r3, [pc, #36]	; (8006270 <HAL_RCC_OscConfig+0x280>)
 800624c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800624e:	4a08      	ldr	r2, [pc, #32]	; (8006270 <HAL_RCC_OscConfig+0x280>)
 8006250:	f023 0301 	bic.w	r3, r3, #1
 8006254:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006256:	f7fc f89b 	bl	8002390 <HAL_GetTick>
 800625a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800625c:	e00a      	b.n	8006274 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800625e:	f7fc f897 	bl	8002390 <HAL_GetTick>
 8006262:	4602      	mov	r2, r0
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	1ad3      	subs	r3, r2, r3
 8006268:	2b02      	cmp	r3, #2
 800626a:	d903      	bls.n	8006274 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800626c:	2303      	movs	r3, #3
 800626e:	e129      	b.n	80064c4 <HAL_RCC_OscConfig+0x4d4>
 8006270:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006274:	4b95      	ldr	r3, [pc, #596]	; (80064cc <HAL_RCC_OscConfig+0x4dc>)
 8006276:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006278:	f003 0302 	and.w	r3, r3, #2
 800627c:	2b00      	cmp	r3, #0
 800627e:	d1ee      	bne.n	800625e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 0304 	and.w	r3, r3, #4
 8006288:	2b00      	cmp	r3, #0
 800628a:	f000 80a4 	beq.w	80063d6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800628e:	4b8f      	ldr	r3, [pc, #572]	; (80064cc <HAL_RCC_OscConfig+0x4dc>)
 8006290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006296:	2b00      	cmp	r3, #0
 8006298:	d10d      	bne.n	80062b6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800629a:	4b8c      	ldr	r3, [pc, #560]	; (80064cc <HAL_RCC_OscConfig+0x4dc>)
 800629c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629e:	4a8b      	ldr	r2, [pc, #556]	; (80064cc <HAL_RCC_OscConfig+0x4dc>)
 80062a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062a4:	6413      	str	r3, [r2, #64]	; 0x40
 80062a6:	4b89      	ldr	r3, [pc, #548]	; (80064cc <HAL_RCC_OscConfig+0x4dc>)
 80062a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062ae:	60fb      	str	r3, [r7, #12]
 80062b0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80062b2:	2301      	movs	r3, #1
 80062b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80062b6:	4b86      	ldr	r3, [pc, #536]	; (80064d0 <HAL_RCC_OscConfig+0x4e0>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d118      	bne.n	80062f4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80062c2:	4b83      	ldr	r3, [pc, #524]	; (80064d0 <HAL_RCC_OscConfig+0x4e0>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a82      	ldr	r2, [pc, #520]	; (80064d0 <HAL_RCC_OscConfig+0x4e0>)
 80062c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062ce:	f7fc f85f 	bl	8002390 <HAL_GetTick>
 80062d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80062d4:	e008      	b.n	80062e8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80062d6:	f7fc f85b 	bl	8002390 <HAL_GetTick>
 80062da:	4602      	mov	r2, r0
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	1ad3      	subs	r3, r2, r3
 80062e0:	2b64      	cmp	r3, #100	; 0x64
 80062e2:	d901      	bls.n	80062e8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80062e4:	2303      	movs	r3, #3
 80062e6:	e0ed      	b.n	80064c4 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80062e8:	4b79      	ldr	r3, [pc, #484]	; (80064d0 <HAL_RCC_OscConfig+0x4e0>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d0f0      	beq.n	80062d6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d106      	bne.n	800630a <HAL_RCC_OscConfig+0x31a>
 80062fc:	4b73      	ldr	r3, [pc, #460]	; (80064cc <HAL_RCC_OscConfig+0x4dc>)
 80062fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006300:	4a72      	ldr	r2, [pc, #456]	; (80064cc <HAL_RCC_OscConfig+0x4dc>)
 8006302:	f043 0301 	orr.w	r3, r3, #1
 8006306:	6713      	str	r3, [r2, #112]	; 0x70
 8006308:	e02d      	b.n	8006366 <HAL_RCC_OscConfig+0x376>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d10c      	bne.n	800632c <HAL_RCC_OscConfig+0x33c>
 8006312:	4b6e      	ldr	r3, [pc, #440]	; (80064cc <HAL_RCC_OscConfig+0x4dc>)
 8006314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006316:	4a6d      	ldr	r2, [pc, #436]	; (80064cc <HAL_RCC_OscConfig+0x4dc>)
 8006318:	f023 0301 	bic.w	r3, r3, #1
 800631c:	6713      	str	r3, [r2, #112]	; 0x70
 800631e:	4b6b      	ldr	r3, [pc, #428]	; (80064cc <HAL_RCC_OscConfig+0x4dc>)
 8006320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006322:	4a6a      	ldr	r2, [pc, #424]	; (80064cc <HAL_RCC_OscConfig+0x4dc>)
 8006324:	f023 0304 	bic.w	r3, r3, #4
 8006328:	6713      	str	r3, [r2, #112]	; 0x70
 800632a:	e01c      	b.n	8006366 <HAL_RCC_OscConfig+0x376>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	2b05      	cmp	r3, #5
 8006332:	d10c      	bne.n	800634e <HAL_RCC_OscConfig+0x35e>
 8006334:	4b65      	ldr	r3, [pc, #404]	; (80064cc <HAL_RCC_OscConfig+0x4dc>)
 8006336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006338:	4a64      	ldr	r2, [pc, #400]	; (80064cc <HAL_RCC_OscConfig+0x4dc>)
 800633a:	f043 0304 	orr.w	r3, r3, #4
 800633e:	6713      	str	r3, [r2, #112]	; 0x70
 8006340:	4b62      	ldr	r3, [pc, #392]	; (80064cc <HAL_RCC_OscConfig+0x4dc>)
 8006342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006344:	4a61      	ldr	r2, [pc, #388]	; (80064cc <HAL_RCC_OscConfig+0x4dc>)
 8006346:	f043 0301 	orr.w	r3, r3, #1
 800634a:	6713      	str	r3, [r2, #112]	; 0x70
 800634c:	e00b      	b.n	8006366 <HAL_RCC_OscConfig+0x376>
 800634e:	4b5f      	ldr	r3, [pc, #380]	; (80064cc <HAL_RCC_OscConfig+0x4dc>)
 8006350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006352:	4a5e      	ldr	r2, [pc, #376]	; (80064cc <HAL_RCC_OscConfig+0x4dc>)
 8006354:	f023 0301 	bic.w	r3, r3, #1
 8006358:	6713      	str	r3, [r2, #112]	; 0x70
 800635a:	4b5c      	ldr	r3, [pc, #368]	; (80064cc <HAL_RCC_OscConfig+0x4dc>)
 800635c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800635e:	4a5b      	ldr	r2, [pc, #364]	; (80064cc <HAL_RCC_OscConfig+0x4dc>)
 8006360:	f023 0304 	bic.w	r3, r3, #4
 8006364:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d015      	beq.n	800639a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800636e:	f7fc f80f 	bl	8002390 <HAL_GetTick>
 8006372:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006374:	e00a      	b.n	800638c <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006376:	f7fc f80b 	bl	8002390 <HAL_GetTick>
 800637a:	4602      	mov	r2, r0
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	1ad3      	subs	r3, r2, r3
 8006380:	f241 3288 	movw	r2, #5000	; 0x1388
 8006384:	4293      	cmp	r3, r2
 8006386:	d901      	bls.n	800638c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006388:	2303      	movs	r3, #3
 800638a:	e09b      	b.n	80064c4 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800638c:	4b4f      	ldr	r3, [pc, #316]	; (80064cc <HAL_RCC_OscConfig+0x4dc>)
 800638e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006390:	f003 0302 	and.w	r3, r3, #2
 8006394:	2b00      	cmp	r3, #0
 8006396:	d0ee      	beq.n	8006376 <HAL_RCC_OscConfig+0x386>
 8006398:	e014      	b.n	80063c4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800639a:	f7fb fff9 	bl	8002390 <HAL_GetTick>
 800639e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063a0:	e00a      	b.n	80063b8 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063a2:	f7fb fff5 	bl	8002390 <HAL_GetTick>
 80063a6:	4602      	mov	r2, r0
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	1ad3      	subs	r3, r2, r3
 80063ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d901      	bls.n	80063b8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80063b4:	2303      	movs	r3, #3
 80063b6:	e085      	b.n	80064c4 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063b8:	4b44      	ldr	r3, [pc, #272]	; (80064cc <HAL_RCC_OscConfig+0x4dc>)
 80063ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063bc:	f003 0302 	and.w	r3, r3, #2
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d1ee      	bne.n	80063a2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80063c4:	7dfb      	ldrb	r3, [r7, #23]
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d105      	bne.n	80063d6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063ca:	4b40      	ldr	r3, [pc, #256]	; (80064cc <HAL_RCC_OscConfig+0x4dc>)
 80063cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ce:	4a3f      	ldr	r2, [pc, #252]	; (80064cc <HAL_RCC_OscConfig+0x4dc>)
 80063d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	699b      	ldr	r3, [r3, #24]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d071      	beq.n	80064c2 <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80063de:	4b3b      	ldr	r3, [pc, #236]	; (80064cc <HAL_RCC_OscConfig+0x4dc>)
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	f003 030c 	and.w	r3, r3, #12
 80063e6:	2b08      	cmp	r3, #8
 80063e8:	d069      	beq.n	80064be <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	699b      	ldr	r3, [r3, #24]
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d14b      	bne.n	800648a <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063f2:	4b36      	ldr	r3, [pc, #216]	; (80064cc <HAL_RCC_OscConfig+0x4dc>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a35      	ldr	r2, [pc, #212]	; (80064cc <HAL_RCC_OscConfig+0x4dc>)
 80063f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063fe:	f7fb ffc7 	bl	8002390 <HAL_GetTick>
 8006402:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006404:	e008      	b.n	8006418 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006406:	f7fb ffc3 	bl	8002390 <HAL_GetTick>
 800640a:	4602      	mov	r2, r0
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	1ad3      	subs	r3, r2, r3
 8006410:	2b02      	cmp	r3, #2
 8006412:	d901      	bls.n	8006418 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006414:	2303      	movs	r3, #3
 8006416:	e055      	b.n	80064c4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006418:	4b2c      	ldr	r3, [pc, #176]	; (80064cc <HAL_RCC_OscConfig+0x4dc>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006420:	2b00      	cmp	r3, #0
 8006422:	d1f0      	bne.n	8006406 <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	69da      	ldr	r2, [r3, #28]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6a1b      	ldr	r3, [r3, #32]
 800642c:	431a      	orrs	r2, r3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006432:	019b      	lsls	r3, r3, #6
 8006434:	431a      	orrs	r2, r3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800643a:	085b      	lsrs	r3, r3, #1
 800643c:	3b01      	subs	r3, #1
 800643e:	041b      	lsls	r3, r3, #16
 8006440:	431a      	orrs	r2, r3
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006446:	061b      	lsls	r3, r3, #24
 8006448:	431a      	orrs	r2, r3
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800644e:	071b      	lsls	r3, r3, #28
 8006450:	491e      	ldr	r1, [pc, #120]	; (80064cc <HAL_RCC_OscConfig+0x4dc>)
 8006452:	4313      	orrs	r3, r2
 8006454:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006456:	4b1d      	ldr	r3, [pc, #116]	; (80064cc <HAL_RCC_OscConfig+0x4dc>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a1c      	ldr	r2, [pc, #112]	; (80064cc <HAL_RCC_OscConfig+0x4dc>)
 800645c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006460:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006462:	f7fb ff95 	bl	8002390 <HAL_GetTick>
 8006466:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006468:	e008      	b.n	800647c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800646a:	f7fb ff91 	bl	8002390 <HAL_GetTick>
 800646e:	4602      	mov	r2, r0
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	1ad3      	subs	r3, r2, r3
 8006474:	2b02      	cmp	r3, #2
 8006476:	d901      	bls.n	800647c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8006478:	2303      	movs	r3, #3
 800647a:	e023      	b.n	80064c4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800647c:	4b13      	ldr	r3, [pc, #76]	; (80064cc <HAL_RCC_OscConfig+0x4dc>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006484:	2b00      	cmp	r3, #0
 8006486:	d0f0      	beq.n	800646a <HAL_RCC_OscConfig+0x47a>
 8006488:	e01b      	b.n	80064c2 <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800648a:	4b10      	ldr	r3, [pc, #64]	; (80064cc <HAL_RCC_OscConfig+0x4dc>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a0f      	ldr	r2, [pc, #60]	; (80064cc <HAL_RCC_OscConfig+0x4dc>)
 8006490:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006494:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006496:	f7fb ff7b 	bl	8002390 <HAL_GetTick>
 800649a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800649c:	e008      	b.n	80064b0 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800649e:	f7fb ff77 	bl	8002390 <HAL_GetTick>
 80064a2:	4602      	mov	r2, r0
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	1ad3      	subs	r3, r2, r3
 80064a8:	2b02      	cmp	r3, #2
 80064aa:	d901      	bls.n	80064b0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80064ac:	2303      	movs	r3, #3
 80064ae:	e009      	b.n	80064c4 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064b0:	4b06      	ldr	r3, [pc, #24]	; (80064cc <HAL_RCC_OscConfig+0x4dc>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d1f0      	bne.n	800649e <HAL_RCC_OscConfig+0x4ae>
 80064bc:	e001      	b.n	80064c2 <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e000      	b.n	80064c4 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 80064c2:	2300      	movs	r3, #0
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3718      	adds	r7, #24
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	40023800 	.word	0x40023800
 80064d0:	40007000 	.word	0x40007000

080064d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80064de:	2300      	movs	r3, #0
 80064e0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d101      	bne.n	80064ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	e0ce      	b.n	800668a <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80064ec:	4b69      	ldr	r3, [pc, #420]	; (8006694 <HAL_RCC_ClockConfig+0x1c0>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 030f 	and.w	r3, r3, #15
 80064f4:	683a      	ldr	r2, [r7, #0]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d910      	bls.n	800651c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064fa:	4b66      	ldr	r3, [pc, #408]	; (8006694 <HAL_RCC_ClockConfig+0x1c0>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f023 020f 	bic.w	r2, r3, #15
 8006502:	4964      	ldr	r1, [pc, #400]	; (8006694 <HAL_RCC_ClockConfig+0x1c0>)
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	4313      	orrs	r3, r2
 8006508:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800650a:	4b62      	ldr	r3, [pc, #392]	; (8006694 <HAL_RCC_ClockConfig+0x1c0>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 030f 	and.w	r3, r3, #15
 8006512:	683a      	ldr	r2, [r7, #0]
 8006514:	429a      	cmp	r2, r3
 8006516:	d001      	beq.n	800651c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	e0b6      	b.n	800668a <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0302 	and.w	r3, r3, #2
 8006524:	2b00      	cmp	r3, #0
 8006526:	d020      	beq.n	800656a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 0304 	and.w	r3, r3, #4
 8006530:	2b00      	cmp	r3, #0
 8006532:	d005      	beq.n	8006540 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006534:	4b58      	ldr	r3, [pc, #352]	; (8006698 <HAL_RCC_ClockConfig+0x1c4>)
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	4a57      	ldr	r2, [pc, #348]	; (8006698 <HAL_RCC_ClockConfig+0x1c4>)
 800653a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800653e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f003 0308 	and.w	r3, r3, #8
 8006548:	2b00      	cmp	r3, #0
 800654a:	d005      	beq.n	8006558 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800654c:	4b52      	ldr	r3, [pc, #328]	; (8006698 <HAL_RCC_ClockConfig+0x1c4>)
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	4a51      	ldr	r2, [pc, #324]	; (8006698 <HAL_RCC_ClockConfig+0x1c4>)
 8006552:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006556:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006558:	4b4f      	ldr	r3, [pc, #316]	; (8006698 <HAL_RCC_ClockConfig+0x1c4>)
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	494c      	ldr	r1, [pc, #304]	; (8006698 <HAL_RCC_ClockConfig+0x1c4>)
 8006566:	4313      	orrs	r3, r2
 8006568:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f003 0301 	and.w	r3, r3, #1
 8006572:	2b00      	cmp	r3, #0
 8006574:	d040      	beq.n	80065f8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	2b01      	cmp	r3, #1
 800657c:	d107      	bne.n	800658e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800657e:	4b46      	ldr	r3, [pc, #280]	; (8006698 <HAL_RCC_ClockConfig+0x1c4>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006586:	2b00      	cmp	r3, #0
 8006588:	d115      	bne.n	80065b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e07d      	b.n	800668a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	2b02      	cmp	r3, #2
 8006594:	d107      	bne.n	80065a6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006596:	4b40      	ldr	r3, [pc, #256]	; (8006698 <HAL_RCC_ClockConfig+0x1c4>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d109      	bne.n	80065b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e071      	b.n	800668a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065a6:	4b3c      	ldr	r3, [pc, #240]	; (8006698 <HAL_RCC_ClockConfig+0x1c4>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 0302 	and.w	r3, r3, #2
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d101      	bne.n	80065b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	e069      	b.n	800668a <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80065b6:	4b38      	ldr	r3, [pc, #224]	; (8006698 <HAL_RCC_ClockConfig+0x1c4>)
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	f023 0203 	bic.w	r2, r3, #3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	4935      	ldr	r1, [pc, #212]	; (8006698 <HAL_RCC_ClockConfig+0x1c4>)
 80065c4:	4313      	orrs	r3, r2
 80065c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065c8:	f7fb fee2 	bl	8002390 <HAL_GetTick>
 80065cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065ce:	e00a      	b.n	80065e6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065d0:	f7fb fede 	bl	8002390 <HAL_GetTick>
 80065d4:	4602      	mov	r2, r0
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	1ad3      	subs	r3, r2, r3
 80065da:	f241 3288 	movw	r2, #5000	; 0x1388
 80065de:	4293      	cmp	r3, r2
 80065e0:	d901      	bls.n	80065e6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80065e2:	2303      	movs	r3, #3
 80065e4:	e051      	b.n	800668a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065e6:	4b2c      	ldr	r3, [pc, #176]	; (8006698 <HAL_RCC_ClockConfig+0x1c4>)
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	f003 020c 	and.w	r2, r3, #12
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d1eb      	bne.n	80065d0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80065f8:	4b26      	ldr	r3, [pc, #152]	; (8006694 <HAL_RCC_ClockConfig+0x1c0>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 030f 	and.w	r3, r3, #15
 8006600:	683a      	ldr	r2, [r7, #0]
 8006602:	429a      	cmp	r2, r3
 8006604:	d210      	bcs.n	8006628 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006606:	4b23      	ldr	r3, [pc, #140]	; (8006694 <HAL_RCC_ClockConfig+0x1c0>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f023 020f 	bic.w	r2, r3, #15
 800660e:	4921      	ldr	r1, [pc, #132]	; (8006694 <HAL_RCC_ClockConfig+0x1c0>)
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	4313      	orrs	r3, r2
 8006614:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006616:	4b1f      	ldr	r3, [pc, #124]	; (8006694 <HAL_RCC_ClockConfig+0x1c0>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 030f 	and.w	r3, r3, #15
 800661e:	683a      	ldr	r2, [r7, #0]
 8006620:	429a      	cmp	r2, r3
 8006622:	d001      	beq.n	8006628 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	e030      	b.n	800668a <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 0304 	and.w	r3, r3, #4
 8006630:	2b00      	cmp	r3, #0
 8006632:	d008      	beq.n	8006646 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006634:	4b18      	ldr	r3, [pc, #96]	; (8006698 <HAL_RCC_ClockConfig+0x1c4>)
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	4915      	ldr	r1, [pc, #84]	; (8006698 <HAL_RCC_ClockConfig+0x1c4>)
 8006642:	4313      	orrs	r3, r2
 8006644:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 0308 	and.w	r3, r3, #8
 800664e:	2b00      	cmp	r3, #0
 8006650:	d009      	beq.n	8006666 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006652:	4b11      	ldr	r3, [pc, #68]	; (8006698 <HAL_RCC_ClockConfig+0x1c4>)
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	00db      	lsls	r3, r3, #3
 8006660:	490d      	ldr	r1, [pc, #52]	; (8006698 <HAL_RCC_ClockConfig+0x1c4>)
 8006662:	4313      	orrs	r3, r2
 8006664:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006666:	f000 f81d 	bl	80066a4 <HAL_RCC_GetSysClockFreq>
 800666a:	4601      	mov	r1, r0
 800666c:	4b0a      	ldr	r3, [pc, #40]	; (8006698 <HAL_RCC_ClockConfig+0x1c4>)
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	091b      	lsrs	r3, r3, #4
 8006672:	f003 030f 	and.w	r3, r3, #15
 8006676:	4a09      	ldr	r2, [pc, #36]	; (800669c <HAL_RCC_ClockConfig+0x1c8>)
 8006678:	5cd3      	ldrb	r3, [r2, r3]
 800667a:	fa21 f303 	lsr.w	r3, r1, r3
 800667e:	4a08      	ldr	r2, [pc, #32]	; (80066a0 <HAL_RCC_ClockConfig+0x1cc>)
 8006680:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006682:	2000      	movs	r0, #0
 8006684:	f7fb fe40 	bl	8002308 <HAL_InitTick>

  return HAL_OK;
 8006688:	2300      	movs	r3, #0
}
 800668a:	4618      	mov	r0, r3
 800668c:	3710      	adds	r7, #16
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
 8006692:	bf00      	nop
 8006694:	40023c00 	.word	0x40023c00
 8006698:	40023800 	.word	0x40023800
 800669c:	0800a6fc 	.word	0x0800a6fc
 80066a0:	20000054 	.word	0x20000054

080066a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066a6:	b085      	sub	sp, #20
 80066a8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80066aa:	2300      	movs	r3, #0
 80066ac:	607b      	str	r3, [r7, #4]
 80066ae:	2300      	movs	r3, #0
 80066b0:	60fb      	str	r3, [r7, #12]
 80066b2:	2300      	movs	r3, #0
 80066b4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80066b6:	2300      	movs	r3, #0
 80066b8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80066ba:	4b50      	ldr	r3, [pc, #320]	; (80067fc <HAL_RCC_GetSysClockFreq+0x158>)
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	f003 030c 	and.w	r3, r3, #12
 80066c2:	2b04      	cmp	r3, #4
 80066c4:	d007      	beq.n	80066d6 <HAL_RCC_GetSysClockFreq+0x32>
 80066c6:	2b08      	cmp	r3, #8
 80066c8:	d008      	beq.n	80066dc <HAL_RCC_GetSysClockFreq+0x38>
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	f040 808d 	bne.w	80067ea <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80066d0:	4b4b      	ldr	r3, [pc, #300]	; (8006800 <HAL_RCC_GetSysClockFreq+0x15c>)
 80066d2:	60bb      	str	r3, [r7, #8]
       break;
 80066d4:	e08c      	b.n	80067f0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80066d6:	4b4b      	ldr	r3, [pc, #300]	; (8006804 <HAL_RCC_GetSysClockFreq+0x160>)
 80066d8:	60bb      	str	r3, [r7, #8]
      break;
 80066da:	e089      	b.n	80067f0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80066dc:	4b47      	ldr	r3, [pc, #284]	; (80067fc <HAL_RCC_GetSysClockFreq+0x158>)
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066e4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80066e6:	4b45      	ldr	r3, [pc, #276]	; (80067fc <HAL_RCC_GetSysClockFreq+0x158>)
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d023      	beq.n	800673a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066f2:	4b42      	ldr	r3, [pc, #264]	; (80067fc <HAL_RCC_GetSysClockFreq+0x158>)
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	099b      	lsrs	r3, r3, #6
 80066f8:	f04f 0400 	mov.w	r4, #0
 80066fc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006700:	f04f 0200 	mov.w	r2, #0
 8006704:	ea03 0501 	and.w	r5, r3, r1
 8006708:	ea04 0602 	and.w	r6, r4, r2
 800670c:	4a3d      	ldr	r2, [pc, #244]	; (8006804 <HAL_RCC_GetSysClockFreq+0x160>)
 800670e:	fb02 f106 	mul.w	r1, r2, r6
 8006712:	2200      	movs	r2, #0
 8006714:	fb02 f205 	mul.w	r2, r2, r5
 8006718:	440a      	add	r2, r1
 800671a:	493a      	ldr	r1, [pc, #232]	; (8006804 <HAL_RCC_GetSysClockFreq+0x160>)
 800671c:	fba5 0101 	umull	r0, r1, r5, r1
 8006720:	1853      	adds	r3, r2, r1
 8006722:	4619      	mov	r1, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f04f 0400 	mov.w	r4, #0
 800672a:	461a      	mov	r2, r3
 800672c:	4623      	mov	r3, r4
 800672e:	f7f9 fd83 	bl	8000238 <__aeabi_uldivmod>
 8006732:	4603      	mov	r3, r0
 8006734:	460c      	mov	r4, r1
 8006736:	60fb      	str	r3, [r7, #12]
 8006738:	e049      	b.n	80067ce <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800673a:	4b30      	ldr	r3, [pc, #192]	; (80067fc <HAL_RCC_GetSysClockFreq+0x158>)
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	099b      	lsrs	r3, r3, #6
 8006740:	f04f 0400 	mov.w	r4, #0
 8006744:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006748:	f04f 0200 	mov.w	r2, #0
 800674c:	ea03 0501 	and.w	r5, r3, r1
 8006750:	ea04 0602 	and.w	r6, r4, r2
 8006754:	4629      	mov	r1, r5
 8006756:	4632      	mov	r2, r6
 8006758:	f04f 0300 	mov.w	r3, #0
 800675c:	f04f 0400 	mov.w	r4, #0
 8006760:	0154      	lsls	r4, r2, #5
 8006762:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006766:	014b      	lsls	r3, r1, #5
 8006768:	4619      	mov	r1, r3
 800676a:	4622      	mov	r2, r4
 800676c:	1b49      	subs	r1, r1, r5
 800676e:	eb62 0206 	sbc.w	r2, r2, r6
 8006772:	f04f 0300 	mov.w	r3, #0
 8006776:	f04f 0400 	mov.w	r4, #0
 800677a:	0194      	lsls	r4, r2, #6
 800677c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006780:	018b      	lsls	r3, r1, #6
 8006782:	1a5b      	subs	r3, r3, r1
 8006784:	eb64 0402 	sbc.w	r4, r4, r2
 8006788:	f04f 0100 	mov.w	r1, #0
 800678c:	f04f 0200 	mov.w	r2, #0
 8006790:	00e2      	lsls	r2, r4, #3
 8006792:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006796:	00d9      	lsls	r1, r3, #3
 8006798:	460b      	mov	r3, r1
 800679a:	4614      	mov	r4, r2
 800679c:	195b      	adds	r3, r3, r5
 800679e:	eb44 0406 	adc.w	r4, r4, r6
 80067a2:	f04f 0100 	mov.w	r1, #0
 80067a6:	f04f 0200 	mov.w	r2, #0
 80067aa:	02a2      	lsls	r2, r4, #10
 80067ac:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80067b0:	0299      	lsls	r1, r3, #10
 80067b2:	460b      	mov	r3, r1
 80067b4:	4614      	mov	r4, r2
 80067b6:	4618      	mov	r0, r3
 80067b8:	4621      	mov	r1, r4
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f04f 0400 	mov.w	r4, #0
 80067c0:	461a      	mov	r2, r3
 80067c2:	4623      	mov	r3, r4
 80067c4:	f7f9 fd38 	bl	8000238 <__aeabi_uldivmod>
 80067c8:	4603      	mov	r3, r0
 80067ca:	460c      	mov	r4, r1
 80067cc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80067ce:	4b0b      	ldr	r3, [pc, #44]	; (80067fc <HAL_RCC_GetSysClockFreq+0x158>)
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	0c1b      	lsrs	r3, r3, #16
 80067d4:	f003 0303 	and.w	r3, r3, #3
 80067d8:	3301      	adds	r3, #1
 80067da:	005b      	lsls	r3, r3, #1
 80067dc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80067de:	68fa      	ldr	r2, [r7, #12]
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80067e6:	60bb      	str	r3, [r7, #8]
      break;
 80067e8:	e002      	b.n	80067f0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80067ea:	4b05      	ldr	r3, [pc, #20]	; (8006800 <HAL_RCC_GetSysClockFreq+0x15c>)
 80067ec:	60bb      	str	r3, [r7, #8]
      break;
 80067ee:	bf00      	nop
    }
  }
  return sysclockfreq;
 80067f0:	68bb      	ldr	r3, [r7, #8]
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3714      	adds	r7, #20
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067fa:	bf00      	nop
 80067fc:	40023800 	.word	0x40023800
 8006800:	00f42400 	.word	0x00f42400
 8006804:	017d7840 	.word	0x017d7840

08006808 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b088      	sub	sp, #32
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006810:	2300      	movs	r3, #0
 8006812:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006814:	2300      	movs	r3, #0
 8006816:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006818:	2300      	movs	r3, #0
 800681a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800681c:	2300      	movs	r3, #0
 800681e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006820:	2300      	movs	r3, #0
 8006822:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 0301 	and.w	r3, r3, #1
 800682c:	2b00      	cmp	r3, #0
 800682e:	d012      	beq.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006830:	4b69      	ldr	r3, [pc, #420]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	4a68      	ldr	r2, [pc, #416]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006836:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800683a:	6093      	str	r3, [r2, #8]
 800683c:	4b66      	ldr	r3, [pc, #408]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800683e:	689a      	ldr	r2, [r3, #8]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006844:	4964      	ldr	r1, [pc, #400]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006846:	4313      	orrs	r3, r2
 8006848:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800684e:	2b00      	cmp	r3, #0
 8006850:	d101      	bne.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006852:	2301      	movs	r3, #1
 8006854:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800685e:	2b00      	cmp	r3, #0
 8006860:	d017      	beq.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006862:	4b5d      	ldr	r3, [pc, #372]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006864:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006868:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006870:	4959      	ldr	r1, [pc, #356]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006872:	4313      	orrs	r3, r2
 8006874:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800687c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006880:	d101      	bne.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006882:	2301      	movs	r3, #1
 8006884:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800688a:	2b00      	cmp	r3, #0
 800688c:	d101      	bne.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800688e:	2301      	movs	r3, #1
 8006890:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800689a:	2b00      	cmp	r3, #0
 800689c:	d017      	beq.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800689e:	4b4e      	ldr	r3, [pc, #312]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ac:	494a      	ldr	r1, [pc, #296]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068ae:	4313      	orrs	r3, r2
 80068b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068bc:	d101      	bne.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80068be:	2301      	movs	r3, #1
 80068c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d101      	bne.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80068ca:	2301      	movs	r3, #1
 80068cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d001      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80068da:	2301      	movs	r3, #1
 80068dc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f003 0320 	and.w	r3, r3, #32
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	f000 808b 	beq.w	8006a02 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80068ec:	4b3a      	ldr	r3, [pc, #232]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f0:	4a39      	ldr	r2, [pc, #228]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068f6:	6413      	str	r3, [r2, #64]	; 0x40
 80068f8:	4b37      	ldr	r3, [pc, #220]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006900:	60bb      	str	r3, [r7, #8]
 8006902:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006904:	4b35      	ldr	r3, [pc, #212]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a34      	ldr	r2, [pc, #208]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800690a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800690e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006910:	f7fb fd3e 	bl	8002390 <HAL_GetTick>
 8006914:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006916:	e008      	b.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006918:	f7fb fd3a 	bl	8002390 <HAL_GetTick>
 800691c:	4602      	mov	r2, r0
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	1ad3      	subs	r3, r2, r3
 8006922:	2b64      	cmp	r3, #100	; 0x64
 8006924:	d901      	bls.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006926:	2303      	movs	r3, #3
 8006928:	e38d      	b.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800692a:	4b2c      	ldr	r3, [pc, #176]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006932:	2b00      	cmp	r3, #0
 8006934:	d0f0      	beq.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006936:	4b28      	ldr	r3, [pc, #160]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800693a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800693e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d035      	beq.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800694a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800694e:	693a      	ldr	r2, [r7, #16]
 8006950:	429a      	cmp	r2, r3
 8006952:	d02e      	beq.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006954:	4b20      	ldr	r3, [pc, #128]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006958:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800695c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800695e:	4b1e      	ldr	r3, [pc, #120]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006962:	4a1d      	ldr	r2, [pc, #116]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006968:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800696a:	4b1b      	ldr	r3, [pc, #108]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800696c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800696e:	4a1a      	ldr	r2, [pc, #104]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006970:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006974:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006976:	4a18      	ldr	r2, [pc, #96]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800697c:	4b16      	ldr	r3, [pc, #88]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800697e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006980:	f003 0301 	and.w	r3, r3, #1
 8006984:	2b01      	cmp	r3, #1
 8006986:	d114      	bne.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006988:	f7fb fd02 	bl	8002390 <HAL_GetTick>
 800698c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800698e:	e00a      	b.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006990:	f7fb fcfe 	bl	8002390 <HAL_GetTick>
 8006994:	4602      	mov	r2, r0
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	1ad3      	subs	r3, r2, r3
 800699a:	f241 3288 	movw	r2, #5000	; 0x1388
 800699e:	4293      	cmp	r3, r2
 80069a0:	d901      	bls.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	e34f      	b.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069a6:	4b0c      	ldr	r3, [pc, #48]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069aa:	f003 0302 	and.w	r3, r3, #2
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d0ee      	beq.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069be:	d111      	bne.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80069c0:	4b05      	ldr	r3, [pc, #20]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80069cc:	4b04      	ldr	r3, [pc, #16]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80069ce:	400b      	ands	r3, r1
 80069d0:	4901      	ldr	r1, [pc, #4]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069d2:	4313      	orrs	r3, r2
 80069d4:	608b      	str	r3, [r1, #8]
 80069d6:	e00b      	b.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80069d8:	40023800 	.word	0x40023800
 80069dc:	40007000 	.word	0x40007000
 80069e0:	0ffffcff 	.word	0x0ffffcff
 80069e4:	4bb3      	ldr	r3, [pc, #716]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	4ab2      	ldr	r2, [pc, #712]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80069ea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80069ee:	6093      	str	r3, [r2, #8]
 80069f0:	4bb0      	ldr	r3, [pc, #704]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80069f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069fc:	49ad      	ldr	r1, [pc, #692]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80069fe:	4313      	orrs	r3, r2
 8006a00:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f003 0310 	and.w	r3, r3, #16
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d010      	beq.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006a0e:	4ba9      	ldr	r3, [pc, #676]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006a10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a14:	4aa7      	ldr	r2, [pc, #668]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006a16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a1a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006a1e:	4ba5      	ldr	r3, [pc, #660]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006a20:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a28:	49a2      	ldr	r1, [pc, #648]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d00a      	beq.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006a3c:	4b9d      	ldr	r3, [pc, #628]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a42:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a4a:	499a      	ldr	r1, [pc, #616]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d00a      	beq.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006a5e:	4b95      	ldr	r3, [pc, #596]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a6c:	4991      	ldr	r1, [pc, #580]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d00a      	beq.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006a80:	4b8c      	ldr	r3, [pc, #560]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a8e:	4989      	ldr	r1, [pc, #548]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006a90:	4313      	orrs	r3, r2
 8006a92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00a      	beq.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006aa2:	4b84      	ldr	r3, [pc, #528]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aa8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ab0:	4980      	ldr	r1, [pc, #512]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d00a      	beq.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006ac4:	4b7b      	ldr	r3, [pc, #492]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aca:	f023 0203 	bic.w	r2, r3, #3
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ad2:	4978      	ldr	r1, [pc, #480]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00a      	beq.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006ae6:	4b73      	ldr	r3, [pc, #460]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aec:	f023 020c 	bic.w	r2, r3, #12
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006af4:	496f      	ldr	r1, [pc, #444]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006af6:	4313      	orrs	r3, r2
 8006af8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00a      	beq.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006b08:	4b6a      	ldr	r3, [pc, #424]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b0e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b16:	4967      	ldr	r1, [pc, #412]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00a      	beq.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006b2a:	4b62      	ldr	r3, [pc, #392]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b30:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b38:	495e      	ldr	r1, [pc, #376]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00a      	beq.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006b4c:	4b59      	ldr	r3, [pc, #356]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b52:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b5a:	4956      	ldr	r1, [pc, #344]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00a      	beq.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006b6e:	4b51      	ldr	r3, [pc, #324]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b74:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b7c:	494d      	ldr	r1, [pc, #308]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d00a      	beq.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006b90:	4b48      	ldr	r3, [pc, #288]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b96:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b9e:	4945      	ldr	r1, [pc, #276]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d00a      	beq.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006bb2:	4b40      	ldr	r3, [pc, #256]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bb8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bc0:	493c      	ldr	r1, [pc, #240]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d00a      	beq.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006bd4:	4b37      	ldr	r3, [pc, #220]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bda:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006be2:	4934      	ldr	r1, [pc, #208]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006be4:	4313      	orrs	r3, r2
 8006be6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d011      	beq.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006bf6:	4b2f      	ldr	r3, [pc, #188]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bfc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c04:	492b      	ldr	r1, [pc, #172]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006c06:	4313      	orrs	r3, r2
 8006c08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c14:	d101      	bne.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006c16:	2301      	movs	r3, #1
 8006c18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 0308 	and.w	r3, r3, #8
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d001      	beq.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006c26:	2301      	movs	r3, #1
 8006c28:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d00a      	beq.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c36:	4b1f      	ldr	r3, [pc, #124]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c3c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c44:	491b      	ldr	r1, [pc, #108]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006c46:	4313      	orrs	r3, r2
 8006c48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d00b      	beq.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006c58:	4b16      	ldr	r3, [pc, #88]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c5e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c68:	4912      	ldr	r1, [pc, #72]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d00b      	beq.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8006c7c:	4b0d      	ldr	r3, [pc, #52]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c82:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c8c:	4909      	ldr	r1, [pc, #36]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d00f      	beq.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006ca0:	4b04      	ldr	r3, [pc, #16]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ca2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ca6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cb0:	e002      	b.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8006cb2:	bf00      	nop
 8006cb4:	40023800 	.word	0x40023800
 8006cb8:	4985      	ldr	r1, [pc, #532]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00b      	beq.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006ccc:	4b80      	ldr	r3, [pc, #512]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006cce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cd2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cdc:	497c      	ldr	r1, [pc, #496]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d005      	beq.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006cf2:	f040 80d6 	bne.w	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006cf6:	4b76      	ldr	r3, [pc, #472]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a75      	ldr	r2, [pc, #468]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006cfc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006d00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d02:	f7fb fb45 	bl	8002390 <HAL_GetTick>
 8006d06:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006d08:	e008      	b.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006d0a:	f7fb fb41 	bl	8002390 <HAL_GetTick>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	1ad3      	subs	r3, r2, r3
 8006d14:	2b64      	cmp	r3, #100	; 0x64
 8006d16:	d901      	bls.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d18:	2303      	movs	r3, #3
 8006d1a:	e194      	b.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006d1c:	4b6c      	ldr	r3, [pc, #432]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d1f0      	bne.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 0301 	and.w	r3, r3, #1
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d021      	beq.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d11d      	bne.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006d3c:	4b64      	ldr	r3, [pc, #400]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006d3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d42:	0c1b      	lsrs	r3, r3, #16
 8006d44:	f003 0303 	and.w	r3, r3, #3
 8006d48:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006d4a:	4b61      	ldr	r3, [pc, #388]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006d4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d50:	0e1b      	lsrs	r3, r3, #24
 8006d52:	f003 030f 	and.w	r3, r3, #15
 8006d56:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	019a      	lsls	r2, r3, #6
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	041b      	lsls	r3, r3, #16
 8006d62:	431a      	orrs	r2, r3
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	061b      	lsls	r3, r3, #24
 8006d68:	431a      	orrs	r2, r3
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	071b      	lsls	r3, r3, #28
 8006d70:	4957      	ldr	r1, [pc, #348]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006d72:	4313      	orrs	r3, r2
 8006d74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d004      	beq.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x586>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d8c:	d00a      	beq.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d02e      	beq.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006da2:	d129      	bne.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006da4:	4b4a      	ldr	r3, [pc, #296]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006da6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006daa:	0c1b      	lsrs	r3, r3, #16
 8006dac:	f003 0303 	and.w	r3, r3, #3
 8006db0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006db2:	4b47      	ldr	r3, [pc, #284]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006db4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006db8:	0f1b      	lsrs	r3, r3, #28
 8006dba:	f003 0307 	and.w	r3, r3, #7
 8006dbe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	019a      	lsls	r2, r3, #6
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	041b      	lsls	r3, r3, #16
 8006dca:	431a      	orrs	r2, r3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	061b      	lsls	r3, r3, #24
 8006dd2:	431a      	orrs	r2, r3
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	071b      	lsls	r3, r3, #28
 8006dd8:	493d      	ldr	r1, [pc, #244]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006de0:	4b3b      	ldr	r3, [pc, #236]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006de2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006de6:	f023 021f 	bic.w	r2, r3, #31
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dee:	3b01      	subs	r3, #1
 8006df0:	4937      	ldr	r1, [pc, #220]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006df2:	4313      	orrs	r3, r2
 8006df4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d01d      	beq.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006e04:	4b32      	ldr	r3, [pc, #200]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006e06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e0a:	0e1b      	lsrs	r3, r3, #24
 8006e0c:	f003 030f 	and.w	r3, r3, #15
 8006e10:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006e12:	4b2f      	ldr	r3, [pc, #188]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006e14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e18:	0f1b      	lsrs	r3, r3, #28
 8006e1a:	f003 0307 	and.w	r3, r3, #7
 8006e1e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	019a      	lsls	r2, r3, #6
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	041b      	lsls	r3, r3, #16
 8006e2c:	431a      	orrs	r2, r3
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	061b      	lsls	r3, r3, #24
 8006e32:	431a      	orrs	r2, r3
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	071b      	lsls	r3, r3, #28
 8006e38:	4925      	ldr	r1, [pc, #148]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d011      	beq.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	019a      	lsls	r2, r3, #6
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	691b      	ldr	r3, [r3, #16]
 8006e56:	041b      	lsls	r3, r3, #16
 8006e58:	431a      	orrs	r2, r3
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	061b      	lsls	r3, r3, #24
 8006e60:	431a      	orrs	r2, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	071b      	lsls	r3, r3, #28
 8006e68:	4919      	ldr	r1, [pc, #100]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006e70:	4b17      	ldr	r3, [pc, #92]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a16      	ldr	r2, [pc, #88]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006e76:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006e7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e7c:	f7fb fa88 	bl	8002390 <HAL_GetTick>
 8006e80:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006e82:	e008      	b.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006e84:	f7fb fa84 	bl	8002390 <HAL_GetTick>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	1ad3      	subs	r3, r2, r3
 8006e8e:	2b64      	cmp	r3, #100	; 0x64
 8006e90:	d901      	bls.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006e92:	2303      	movs	r3, #3
 8006e94:	e0d7      	b.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006e96:	4b0e      	ldr	r3, [pc, #56]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d0f0      	beq.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006ea2:	69bb      	ldr	r3, [r7, #24]
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	f040 80cd 	bne.w	8007044 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006eaa:	4b09      	ldr	r3, [pc, #36]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a08      	ldr	r2, [pc, #32]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006eb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006eb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006eb6:	f7fb fa6b 	bl	8002390 <HAL_GetTick>
 8006eba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006ebc:	e00a      	b.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006ebe:	f7fb fa67 	bl	8002390 <HAL_GetTick>
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	1ad3      	subs	r3, r2, r3
 8006ec8:	2b64      	cmp	r3, #100	; 0x64
 8006eca:	d903      	bls.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ecc:	2303      	movs	r3, #3
 8006ece:	e0ba      	b.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8006ed0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006ed4:	4b5e      	ldr	r3, [pc, #376]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006edc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ee0:	d0ed      	beq.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d003      	beq.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d009      	beq.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d02e      	beq.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d12a      	bne.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006f0a:	4b51      	ldr	r3, [pc, #324]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f10:	0c1b      	lsrs	r3, r3, #16
 8006f12:	f003 0303 	and.w	r3, r3, #3
 8006f16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006f18:	4b4d      	ldr	r3, [pc, #308]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f1e:	0f1b      	lsrs	r3, r3, #28
 8006f20:	f003 0307 	and.w	r3, r3, #7
 8006f24:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	695b      	ldr	r3, [r3, #20]
 8006f2a:	019a      	lsls	r2, r3, #6
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	041b      	lsls	r3, r3, #16
 8006f30:	431a      	orrs	r2, r3
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	699b      	ldr	r3, [r3, #24]
 8006f36:	061b      	lsls	r3, r3, #24
 8006f38:	431a      	orrs	r2, r3
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	071b      	lsls	r3, r3, #28
 8006f3e:	4944      	ldr	r1, [pc, #272]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006f40:	4313      	orrs	r3, r2
 8006f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006f46:	4b42      	ldr	r3, [pc, #264]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006f48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f4c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f54:	3b01      	subs	r3, #1
 8006f56:	021b      	lsls	r3, r3, #8
 8006f58:	493d      	ldr	r1, [pc, #244]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d022      	beq.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f74:	d11d      	bne.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006f76:	4b36      	ldr	r3, [pc, #216]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f7c:	0e1b      	lsrs	r3, r3, #24
 8006f7e:	f003 030f 	and.w	r3, r3, #15
 8006f82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006f84:	4b32      	ldr	r3, [pc, #200]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f8a:	0f1b      	lsrs	r3, r3, #28
 8006f8c:	f003 0307 	and.w	r3, r3, #7
 8006f90:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	695b      	ldr	r3, [r3, #20]
 8006f96:	019a      	lsls	r2, r3, #6
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6a1b      	ldr	r3, [r3, #32]
 8006f9c:	041b      	lsls	r3, r3, #16
 8006f9e:	431a      	orrs	r2, r3
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	061b      	lsls	r3, r3, #24
 8006fa4:	431a      	orrs	r2, r3
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	071b      	lsls	r3, r3, #28
 8006faa:	4929      	ldr	r1, [pc, #164]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006fac:	4313      	orrs	r3, r2
 8006fae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f003 0308 	and.w	r3, r3, #8
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d028      	beq.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006fbe:	4b24      	ldr	r3, [pc, #144]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fc4:	0e1b      	lsrs	r3, r3, #24
 8006fc6:	f003 030f 	and.w	r3, r3, #15
 8006fca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006fcc:	4b20      	ldr	r3, [pc, #128]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fd2:	0c1b      	lsrs	r3, r3, #16
 8006fd4:	f003 0303 	and.w	r3, r3, #3
 8006fd8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	695b      	ldr	r3, [r3, #20]
 8006fde:	019a      	lsls	r2, r3, #6
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	041b      	lsls	r3, r3, #16
 8006fe4:	431a      	orrs	r2, r3
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	061b      	lsls	r3, r3, #24
 8006fea:	431a      	orrs	r2, r3
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	69db      	ldr	r3, [r3, #28]
 8006ff0:	071b      	lsls	r3, r3, #28
 8006ff2:	4917      	ldr	r1, [pc, #92]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006ffa:	4b15      	ldr	r3, [pc, #84]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006ffc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007000:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007008:	4911      	ldr	r1, [pc, #68]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800700a:	4313      	orrs	r3, r2
 800700c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007010:	4b0f      	ldr	r3, [pc, #60]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a0e      	ldr	r2, [pc, #56]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007016:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800701a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800701c:	f7fb f9b8 	bl	8002390 <HAL_GetTick>
 8007020:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007022:	e008      	b.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007024:	f7fb f9b4 	bl	8002390 <HAL_GetTick>
 8007028:	4602      	mov	r2, r0
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	1ad3      	subs	r3, r2, r3
 800702e:	2b64      	cmp	r3, #100	; 0x64
 8007030:	d901      	bls.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007032:	2303      	movs	r3, #3
 8007034:	e007      	b.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007036:	4b06      	ldr	r3, [pc, #24]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800703e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007042:	d1ef      	bne.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8007044:	2300      	movs	r3, #0
}
 8007046:	4618      	mov	r0, r3
 8007048:	3720      	adds	r7, #32
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
 800704e:	bf00      	nop
 8007050:	40023800 	.word	0x40023800

08007054 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8007054:	b580      	push	{r7, lr}
 8007056:	b082      	sub	sp, #8
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d101      	bne.n	8007068 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	e025      	b.n	80070b4 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800706e:	b2db      	uxtb	r3, r3
 8007070:	2b00      	cmp	r3, #0
 8007072:	d106      	bne.n	8007082 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f001 fbb7 	bl	80087f0 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2202      	movs	r2, #2
 8007086:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681a      	ldr	r2, [r3, #0]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	3304      	adds	r3, #4
 8007092:	4619      	mov	r1, r3
 8007094:	4610      	mov	r0, r2
 8007096:	f000 fb13 	bl	80076c0 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6818      	ldr	r0, [r3, #0]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	461a      	mov	r2, r3
 80070a4:	6839      	ldr	r1, [r7, #0]
 80070a6:	f000 fb7d 	bl	80077a4 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2201      	movs	r2, #1
 80070ae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80070b2:	2300      	movs	r3, #0
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3708      	adds	r7, #8
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	60f8      	str	r0, [r7, #12]
 80070c4:	60b9      	str	r1, [r7, #8]
 80070c6:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	2b02      	cmp	r3, #2
 80070d2:	d101      	bne.n	80070d8 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80070d4:	2302      	movs	r3, #2
 80070d6:	e018      	b.n	800710a <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2202      	movs	r2, #2
 80070dc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	68b9      	ldr	r1, [r7, #8]
 80070e8:	4618      	mov	r0, r3
 80070ea:	f000 fbdb 	bl	80078a4 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	2b02      	cmp	r3, #2
 80070f4:	d104      	bne.n	8007100 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2205      	movs	r2, #5
 80070fa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80070fe:	e003      	b.n	8007108 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2201      	movs	r2, #1
 8007104:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8007108:	2300      	movs	r3, #0
}
 800710a:	4618      	mov	r0, r3
 800710c:	3710      	adds	r7, #16
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}

08007112 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8007112:	b580      	push	{r7, lr}
 8007114:	b082      	sub	sp, #8
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
 800711a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007122:	b2db      	uxtb	r3, r3
 8007124:	2b02      	cmp	r3, #2
 8007126:	d101      	bne.n	800712c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8007128:	2302      	movs	r3, #2
 800712a:	e00e      	b.n	800714a <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2202      	movs	r2, #2
 8007130:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	6839      	ldr	r1, [r7, #0]
 800713a:	4618      	mov	r0, r3
 800713c:	f000 fbd3 	bl	80078e6 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2201      	movs	r2, #1
 8007144:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8007148:	2300      	movs	r3, #0
}
 800714a:	4618      	mov	r0, r3
 800714c:	3708      	adds	r7, #8
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}

08007152 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007152:	b580      	push	{r7, lr}
 8007154:	b082      	sub	sp, #8
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d101      	bne.n	8007164 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	e01d      	b.n	80071a0 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800716a:	b2db      	uxtb	r3, r3
 800716c:	2b00      	cmp	r3, #0
 800716e:	d106      	bne.n	800717e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f001 fa53 	bl	8008624 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2202      	movs	r2, #2
 8007182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	3304      	adds	r3, #4
 800718e:	4619      	mov	r1, r3
 8007190:	4610      	mov	r0, r2
 8007192:	f000 f97b 	bl	800748c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2201      	movs	r2, #1
 800719a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800719e:	2300      	movs	r3, #0
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3708      	adds	r7, #8
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b085      	sub	sp, #20
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	68da      	ldr	r2, [r3, #12]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f042 0201 	orr.w	r2, r2, #1
 80071be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	689a      	ldr	r2, [r3, #8]
 80071c6:	4b0c      	ldr	r3, [pc, #48]	; (80071f8 <HAL_TIM_Base_Start_IT+0x50>)
 80071c8:	4013      	ands	r3, r2
 80071ca:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2b06      	cmp	r3, #6
 80071d0:	d00b      	beq.n	80071ea <HAL_TIM_Base_Start_IT+0x42>
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071d8:	d007      	beq.n	80071ea <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f042 0201 	orr.w	r2, r2, #1
 80071e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80071ea:	2300      	movs	r3, #0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3714      	adds	r7, #20
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr
 80071f8:	00010007 	.word	0x00010007

080071fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b082      	sub	sp, #8
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	691b      	ldr	r3, [r3, #16]
 800720a:	f003 0302 	and.w	r3, r3, #2
 800720e:	2b02      	cmp	r3, #2
 8007210:	d122      	bne.n	8007258 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	68db      	ldr	r3, [r3, #12]
 8007218:	f003 0302 	and.w	r3, r3, #2
 800721c:	2b02      	cmp	r3, #2
 800721e:	d11b      	bne.n	8007258 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f06f 0202 	mvn.w	r2, #2
 8007228:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2201      	movs	r2, #1
 800722e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	699b      	ldr	r3, [r3, #24]
 8007236:	f003 0303 	and.w	r3, r3, #3
 800723a:	2b00      	cmp	r3, #0
 800723c:	d003      	beq.n	8007246 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 f905 	bl	800744e <HAL_TIM_IC_CaptureCallback>
 8007244:	e005      	b.n	8007252 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 f8f7 	bl	800743a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 f908 	bl	8007462 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	f003 0304 	and.w	r3, r3, #4
 8007262:	2b04      	cmp	r3, #4
 8007264:	d122      	bne.n	80072ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	68db      	ldr	r3, [r3, #12]
 800726c:	f003 0304 	and.w	r3, r3, #4
 8007270:	2b04      	cmp	r3, #4
 8007272:	d11b      	bne.n	80072ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f06f 0204 	mvn.w	r2, #4
 800727c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2202      	movs	r2, #2
 8007282:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	699b      	ldr	r3, [r3, #24]
 800728a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800728e:	2b00      	cmp	r3, #0
 8007290:	d003      	beq.n	800729a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 f8db 	bl	800744e <HAL_TIM_IC_CaptureCallback>
 8007298:	e005      	b.n	80072a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 f8cd 	bl	800743a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 f8de 	bl	8007462 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2200      	movs	r2, #0
 80072aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	691b      	ldr	r3, [r3, #16]
 80072b2:	f003 0308 	and.w	r3, r3, #8
 80072b6:	2b08      	cmp	r3, #8
 80072b8:	d122      	bne.n	8007300 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	68db      	ldr	r3, [r3, #12]
 80072c0:	f003 0308 	and.w	r3, r3, #8
 80072c4:	2b08      	cmp	r3, #8
 80072c6:	d11b      	bne.n	8007300 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f06f 0208 	mvn.w	r2, #8
 80072d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2204      	movs	r2, #4
 80072d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	69db      	ldr	r3, [r3, #28]
 80072de:	f003 0303 	and.w	r3, r3, #3
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d003      	beq.n	80072ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 f8b1 	bl	800744e <HAL_TIM_IC_CaptureCallback>
 80072ec:	e005      	b.n	80072fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 f8a3 	bl	800743a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 f8b4 	bl	8007462 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	691b      	ldr	r3, [r3, #16]
 8007306:	f003 0310 	and.w	r3, r3, #16
 800730a:	2b10      	cmp	r3, #16
 800730c:	d122      	bne.n	8007354 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	68db      	ldr	r3, [r3, #12]
 8007314:	f003 0310 	and.w	r3, r3, #16
 8007318:	2b10      	cmp	r3, #16
 800731a:	d11b      	bne.n	8007354 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f06f 0210 	mvn.w	r2, #16
 8007324:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2208      	movs	r2, #8
 800732a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	69db      	ldr	r3, [r3, #28]
 8007332:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007336:	2b00      	cmp	r3, #0
 8007338:	d003      	beq.n	8007342 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 f887 	bl	800744e <HAL_TIM_IC_CaptureCallback>
 8007340:	e005      	b.n	800734e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 f879 	bl	800743a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 f88a 	bl	8007462 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2200      	movs	r2, #0
 8007352:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	691b      	ldr	r3, [r3, #16]
 800735a:	f003 0301 	and.w	r3, r3, #1
 800735e:	2b01      	cmp	r3, #1
 8007360:	d10e      	bne.n	8007380 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	f003 0301 	and.w	r3, r3, #1
 800736c:	2b01      	cmp	r3, #1
 800736e:	d107      	bne.n	8007380 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f06f 0201 	mvn.w	r2, #1
 8007378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 fb88 	bl	8007a90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800738a:	2b80      	cmp	r3, #128	; 0x80
 800738c:	d10e      	bne.n	80073ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	68db      	ldr	r3, [r3, #12]
 8007394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007398:	2b80      	cmp	r3, #128	; 0x80
 800739a:	d107      	bne.n	80073ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80073a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 f976 	bl	8007698 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	691b      	ldr	r3, [r3, #16]
 80073b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073ba:	d10e      	bne.n	80073da <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073c6:	2b80      	cmp	r3, #128	; 0x80
 80073c8:	d107      	bne.n	80073da <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80073d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 f969 	bl	80076ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	691b      	ldr	r3, [r3, #16]
 80073e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073e4:	2b40      	cmp	r3, #64	; 0x40
 80073e6:	d10e      	bne.n	8007406 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073f2:	2b40      	cmp	r3, #64	; 0x40
 80073f4:	d107      	bne.n	8007406 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80073fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 f838 	bl	8007476 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	691b      	ldr	r3, [r3, #16]
 800740c:	f003 0320 	and.w	r3, r3, #32
 8007410:	2b20      	cmp	r3, #32
 8007412:	d10e      	bne.n	8007432 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	68db      	ldr	r3, [r3, #12]
 800741a:	f003 0320 	and.w	r3, r3, #32
 800741e:	2b20      	cmp	r3, #32
 8007420:	d107      	bne.n	8007432 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f06f 0220 	mvn.w	r2, #32
 800742a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 f929 	bl	8007684 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007432:	bf00      	nop
 8007434:	3708      	adds	r7, #8
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}

0800743a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800743a:	b480      	push	{r7}
 800743c:	b083      	sub	sp, #12
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007442:	bf00      	nop
 8007444:	370c      	adds	r7, #12
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr

0800744e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800744e:	b480      	push	{r7}
 8007450:	b083      	sub	sp, #12
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007456:	bf00      	nop
 8007458:	370c      	adds	r7, #12
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr

08007462 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007462:	b480      	push	{r7}
 8007464:	b083      	sub	sp, #12
 8007466:	af00      	add	r7, sp, #0
 8007468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800746a:	bf00      	nop
 800746c:	370c      	adds	r7, #12
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr

08007476 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007476:	b480      	push	{r7}
 8007478:	b083      	sub	sp, #12
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800747e:	bf00      	nop
 8007480:	370c      	adds	r7, #12
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr
	...

0800748c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800748c:	b480      	push	{r7}
 800748e:	b085      	sub	sp, #20
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	4a40      	ldr	r2, [pc, #256]	; (80075a0 <TIM_Base_SetConfig+0x114>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d013      	beq.n	80074cc <TIM_Base_SetConfig+0x40>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074aa:	d00f      	beq.n	80074cc <TIM_Base_SetConfig+0x40>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	4a3d      	ldr	r2, [pc, #244]	; (80075a4 <TIM_Base_SetConfig+0x118>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d00b      	beq.n	80074cc <TIM_Base_SetConfig+0x40>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	4a3c      	ldr	r2, [pc, #240]	; (80075a8 <TIM_Base_SetConfig+0x11c>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d007      	beq.n	80074cc <TIM_Base_SetConfig+0x40>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4a3b      	ldr	r2, [pc, #236]	; (80075ac <TIM_Base_SetConfig+0x120>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d003      	beq.n	80074cc <TIM_Base_SetConfig+0x40>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	4a3a      	ldr	r2, [pc, #232]	; (80075b0 <TIM_Base_SetConfig+0x124>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d108      	bne.n	80074de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	68fa      	ldr	r2, [r7, #12]
 80074da:	4313      	orrs	r3, r2
 80074dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4a2f      	ldr	r2, [pc, #188]	; (80075a0 <TIM_Base_SetConfig+0x114>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d02b      	beq.n	800753e <TIM_Base_SetConfig+0xb2>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074ec:	d027      	beq.n	800753e <TIM_Base_SetConfig+0xb2>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4a2c      	ldr	r2, [pc, #176]	; (80075a4 <TIM_Base_SetConfig+0x118>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d023      	beq.n	800753e <TIM_Base_SetConfig+0xb2>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	4a2b      	ldr	r2, [pc, #172]	; (80075a8 <TIM_Base_SetConfig+0x11c>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d01f      	beq.n	800753e <TIM_Base_SetConfig+0xb2>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4a2a      	ldr	r2, [pc, #168]	; (80075ac <TIM_Base_SetConfig+0x120>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d01b      	beq.n	800753e <TIM_Base_SetConfig+0xb2>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	4a29      	ldr	r2, [pc, #164]	; (80075b0 <TIM_Base_SetConfig+0x124>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d017      	beq.n	800753e <TIM_Base_SetConfig+0xb2>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	4a28      	ldr	r2, [pc, #160]	; (80075b4 <TIM_Base_SetConfig+0x128>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d013      	beq.n	800753e <TIM_Base_SetConfig+0xb2>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	4a27      	ldr	r2, [pc, #156]	; (80075b8 <TIM_Base_SetConfig+0x12c>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d00f      	beq.n	800753e <TIM_Base_SetConfig+0xb2>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	4a26      	ldr	r2, [pc, #152]	; (80075bc <TIM_Base_SetConfig+0x130>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d00b      	beq.n	800753e <TIM_Base_SetConfig+0xb2>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	4a25      	ldr	r2, [pc, #148]	; (80075c0 <TIM_Base_SetConfig+0x134>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d007      	beq.n	800753e <TIM_Base_SetConfig+0xb2>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	4a24      	ldr	r2, [pc, #144]	; (80075c4 <TIM_Base_SetConfig+0x138>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d003      	beq.n	800753e <TIM_Base_SetConfig+0xb2>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	4a23      	ldr	r2, [pc, #140]	; (80075c8 <TIM_Base_SetConfig+0x13c>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d108      	bne.n	8007550 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007544:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	68db      	ldr	r3, [r3, #12]
 800754a:	68fa      	ldr	r2, [r7, #12]
 800754c:	4313      	orrs	r3, r2
 800754e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	695b      	ldr	r3, [r3, #20]
 800755a:	4313      	orrs	r3, r2
 800755c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	68fa      	ldr	r2, [r7, #12]
 8007562:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	689a      	ldr	r2, [r3, #8]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	4a0a      	ldr	r2, [pc, #40]	; (80075a0 <TIM_Base_SetConfig+0x114>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d003      	beq.n	8007584 <TIM_Base_SetConfig+0xf8>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	4a0c      	ldr	r2, [pc, #48]	; (80075b0 <TIM_Base_SetConfig+0x124>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d103      	bne.n	800758c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	691a      	ldr	r2, [r3, #16]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2201      	movs	r2, #1
 8007590:	615a      	str	r2, [r3, #20]
}
 8007592:	bf00      	nop
 8007594:	3714      	adds	r7, #20
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr
 800759e:	bf00      	nop
 80075a0:	40010000 	.word	0x40010000
 80075a4:	40000400 	.word	0x40000400
 80075a8:	40000800 	.word	0x40000800
 80075ac:	40000c00 	.word	0x40000c00
 80075b0:	40010400 	.word	0x40010400
 80075b4:	40014000 	.word	0x40014000
 80075b8:	40014400 	.word	0x40014400
 80075bc:	40014800 	.word	0x40014800
 80075c0:	40001800 	.word	0x40001800
 80075c4:	40001c00 	.word	0x40001c00
 80075c8:	40002000 	.word	0x40002000

080075cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b085      	sub	sp, #20
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d101      	bne.n	80075e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80075e0:	2302      	movs	r3, #2
 80075e2:	e045      	b.n	8007670 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2202      	movs	r2, #2
 80075f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a1c      	ldr	r2, [pc, #112]	; (800767c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d004      	beq.n	8007618 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a1b      	ldr	r2, [pc, #108]	; (8007680 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d108      	bne.n	800762a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800761e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	68fa      	ldr	r2, [r7, #12]
 8007626:	4313      	orrs	r3, r2
 8007628:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007630:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	68fa      	ldr	r2, [r7, #12]
 8007638:	4313      	orrs	r3, r2
 800763a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007642:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	68ba      	ldr	r2, [r7, #8]
 800764a:	4313      	orrs	r3, r2
 800764c:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	68fa      	ldr	r2, [r7, #12]
 8007654:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	68ba      	ldr	r2, [r7, #8]
 800765c:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2201      	movs	r2, #1
 8007662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800766e:	2300      	movs	r3, #0
}
 8007670:	4618      	mov	r0, r3
 8007672:	3714      	adds	r7, #20
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr
 800767c:	40010000 	.word	0x40010000
 8007680:	40010400 	.word	0x40010400

08007684 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007684:	b480      	push	{r7}
 8007686:	b083      	sub	sp, #12
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800768c:	bf00      	nop
 800768e:	370c      	adds	r7, #12
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007698:	b480      	push	{r7}
 800769a:	b083      	sub	sp, #12
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80076a0:	bf00      	nop
 80076a2:	370c      	adds	r7, #12
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr

080076ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80076b4:	bf00      	nop
 80076b6:	370c      	adds	r7, #12
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr

080076c0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b085      	sub	sp, #20
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 80076ca:	2300      	movs	r3, #0
 80076cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 80076ce:	2300      	movs	r3, #0
 80076d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d027      	beq.n	800772a <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80076e0:	68fa      	ldr	r2, [r7, #12]
 80076e2:	4b2f      	ldr	r3, [pc, #188]	; (80077a0 <FMC_SDRAM_Init+0xe0>)
 80076e4:	4013      	ands	r3, r2
 80076e6:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80076f0:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 80076f6:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 80076fc:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8007702:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8007708:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800770e:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8007714:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800771a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800771c:	68fa      	ldr	r2, [r7, #12]
 800771e:	4313      	orrs	r3, r2
 8007720:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	68fa      	ldr	r2, [r7, #12]
 8007726:	601a      	str	r2, [r3, #0]
 8007728:	e032      	b.n	8007790 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007736:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007740:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8007746:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007748:	68fa      	ldr	r2, [r7, #12]
 800774a:	4313      	orrs	r3, r2
 800774c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007754:	68ba      	ldr	r2, [r7, #8]
 8007756:	4b12      	ldr	r3, [pc, #72]	; (80077a0 <FMC_SDRAM_Init+0xe0>)
 8007758:	4013      	ands	r3, r2
 800775a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007764:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800776a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8007770:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8007776:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800777c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800777e:	68ba      	ldr	r2, [r7, #8]
 8007780:	4313      	orrs	r3, r2
 8007782:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	68fa      	ldr	r2, [r7, #12]
 8007788:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	68ba      	ldr	r2, [r7, #8]
 800778e:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	3714      	adds	r7, #20
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr
 800779e:	bf00      	nop
 80077a0:	ffff8000 	.word	0xffff8000

080077a4 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b087      	sub	sp, #28
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	60f8      	str	r0, [r7, #12]
 80077ac:	60b9      	str	r1, [r7, #8]
 80077ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 80077b0:	2300      	movs	r3, #0
 80077b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 80077b4:	2300      	movs	r3, #0
 80077b6:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d02e      	beq.n	800781c <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80077ca:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	3b01      	subs	r3, #1
 80077d8:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80077da:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	3b01      	subs	r3, #1
 80077e2:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80077e4:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	3b01      	subs	r3, #1
 80077ec:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80077ee:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	691b      	ldr	r3, [r3, #16]
 80077f4:	3b01      	subs	r3, #1
 80077f6:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80077f8:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	695b      	ldr	r3, [r3, #20]
 80077fe:	3b01      	subs	r3, #1
 8007800:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8007802:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	699b      	ldr	r3, [r3, #24]
 8007808:	3b01      	subs	r3, #1
 800780a:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800780c:	4313      	orrs	r3, r2
 800780e:	697a      	ldr	r2, [r7, #20]
 8007810:	4313      	orrs	r3, r2
 8007812:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	697a      	ldr	r2, [r7, #20]
 8007818:	609a      	str	r2, [r3, #8]
 800781a:	e039      	b.n	8007890 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8007822:	697a      	ldr	r2, [r7, #20]
 8007824:	4b1e      	ldr	r3, [pc, #120]	; (80078a0 <FMC_SDRAM_Timing_Init+0xfc>)
 8007826:	4013      	ands	r3, r2
 8007828:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	68db      	ldr	r3, [r3, #12]
 800782e:	3b01      	subs	r3, #1
 8007830:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	695b      	ldr	r3, [r3, #20]
 8007836:	3b01      	subs	r3, #1
 8007838:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800783a:	4313      	orrs	r3, r2
 800783c:	697a      	ldr	r2, [r7, #20]
 800783e:	4313      	orrs	r3, r2
 8007840:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	68db      	ldr	r3, [r3, #12]
 8007846:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800784e:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	3b01      	subs	r3, #1
 800785c:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800785e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	3b01      	subs	r3, #1
 8007866:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8007868:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	3b01      	subs	r3, #1
 8007870:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8007872:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	699b      	ldr	r3, [r3, #24]
 8007878:	3b01      	subs	r3, #1
 800787a:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800787c:	4313      	orrs	r3, r2
 800787e:	693a      	ldr	r2, [r7, #16]
 8007880:	4313      	orrs	r3, r2
 8007882:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	697a      	ldr	r2, [r7, #20]
 8007888:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	693a      	ldr	r2, [r7, #16]
 800788e:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8007890:	2300      	movs	r3, #0
}
 8007892:	4618      	mov	r0, r3
 8007894:	371c      	adds	r7, #28
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr
 800789e:	bf00      	nop
 80078a0:	ff0f0fff 	.word	0xff0f0fff

080078a4 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b087      	sub	sp, #28
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	60f8      	str	r0, [r7, #12]
 80078ac:	60b9      	str	r1, [r7, #8]
 80078ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 80078b0:	2300      	movs	r3, #0
 80078b2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80078bc:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	3b01      	subs	r3, #1
 80078c4:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 80078c6:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	68db      	ldr	r3, [r3, #12]
 80078cc:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80078ce:	4313      	orrs	r3, r2
 80078d0:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 80078d2:	697a      	ldr	r2, [r7, #20]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 80078d8:	2300      	movs	r3, #0
}
 80078da:	4618      	mov	r0, r3
 80078dc:	371c      	adds	r7, #28
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr

080078e6 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80078e6:	b480      	push	{r7}
 80078e8:	b083      	sub	sp, #12
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]
 80078ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	695a      	ldr	r2, [r3, #20]
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	005b      	lsls	r3, r3, #1
 80078f8:	431a      	orrs	r2, r3
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 80078fe:	2300      	movs	r3, #0
}
 8007900:	4618      	mov	r0, r3
 8007902:	370c      	adds	r7, #12
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr

0800790c <SCB_EnableICache>:
{
 800790c:	b480      	push	{r7}
 800790e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007910:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007914:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8007918:	4b0b      	ldr	r3, [pc, #44]	; (8007948 <SCB_EnableICache+0x3c>)
 800791a:	2200      	movs	r2, #0
 800791c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8007920:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007924:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8007928:	4b07      	ldr	r3, [pc, #28]	; (8007948 <SCB_EnableICache+0x3c>)
 800792a:	695b      	ldr	r3, [r3, #20]
 800792c:	4a06      	ldr	r2, [pc, #24]	; (8007948 <SCB_EnableICache+0x3c>)
 800792e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007932:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8007934:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007938:	f3bf 8f6f 	isb	sy
}
 800793c:	bf00      	nop
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr
 8007946:	bf00      	nop
 8007948:	e000ed00 	.word	0xe000ed00

0800794c <SCB_EnableDCache>:
{
 800794c:	b480      	push	{r7}
 800794e:	b085      	sub	sp, #20
 8007950:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8007952:	4b1d      	ldr	r3, [pc, #116]	; (80079c8 <SCB_EnableDCache+0x7c>)
 8007954:	2200      	movs	r2, #0
 8007956:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800795a:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800795e:	4b1a      	ldr	r3, [pc, #104]	; (80079c8 <SCB_EnableDCache+0x7c>)
 8007960:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007964:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	0b5b      	lsrs	r3, r3, #13
 800796a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800796e:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	08db      	lsrs	r3, r3, #3
 8007974:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007978:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	015a      	lsls	r2, r3, #5
 800797e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8007982:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8007984:	68ba      	ldr	r2, [r7, #8]
 8007986:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8007988:	490f      	ldr	r1, [pc, #60]	; (80079c8 <SCB_EnableDCache+0x7c>)
 800798a:	4313      	orrs	r3, r2
 800798c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	1e5a      	subs	r2, r3, #1
 8007994:	60ba      	str	r2, [r7, #8]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d1ef      	bne.n	800797a <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	1e5a      	subs	r2, r3, #1
 800799e:	60fa      	str	r2, [r7, #12]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d1e5      	bne.n	8007970 <SCB_EnableDCache+0x24>
 80079a4:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80079a8:	4b07      	ldr	r3, [pc, #28]	; (80079c8 <SCB_EnableDCache+0x7c>)
 80079aa:	695b      	ldr	r3, [r3, #20]
 80079ac:	4a06      	ldr	r2, [pc, #24]	; (80079c8 <SCB_EnableDCache+0x7c>)
 80079ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079b2:	6153      	str	r3, [r2, #20]
 80079b4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80079b8:	f3bf 8f6f 	isb	sy
}
 80079bc:	bf00      	nop
 80079be:	3714      	adds	r7, #20
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr
 80079c8:	e000ed00 	.word	0xe000ed00

080079cc <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b082      	sub	sp, #8
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
	ADC1value = HAL_ADC_GetValue(hadc);//Leer el valor ADC
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f7fa ff58 	bl	800288a <HAL_ADC_GetValue>
 80079da:	4603      	mov	r3, r0
 80079dc:	461a      	mov	r2, r3
 80079de:	4b03      	ldr	r3, [pc, #12]	; (80079ec <HAL_ADC_ConvCpltCallback+0x20>)
 80079e0:	601a      	str	r2, [r3, #0]
}
 80079e2:	bf00      	nop
 80079e4:	3708      	adds	r7, #8
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop
 80079ec:	20000568 	.word	0x20000568

080079f0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	4603      	mov	r3, r0
 80079f8:	80fb      	strh	r3, [r7, #6]
	 //BSP_LED_Toggle(LED1);
	 //BSP_LED_On(LED1);

	if(GPIO_Pin == GPIO_PIN_0)
 80079fa:	88fb      	ldrh	r3, [r7, #6]
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d102      	bne.n	8007a06 <HAL_GPIO_EXTI_Callback+0x16>
	{
		 BSP_LED_Toggle(LED2);
 8007a00:	2001      	movs	r0, #1
 8007a02:	f7f9 f971 	bl	8000ce8 <BSP_LED_Toggle>
	}

	if(GPIO_Pin == GPIO_PIN_13)
 8007a06:	88fb      	ldrh	r3, [r7, #6]
 8007a08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a0c:	d131      	bne.n	8007a72 <HAL_GPIO_EXTI_Callback+0x82>
	{
		 BSP_LED_Toggle(LED1);
 8007a0e:	2000      	movs	r0, #0
 8007a10:	f7f9 f96a 	bl	8000ce8 <BSP_LED_Toggle>

		  BSP_TS_GetState(&TS_State);
 8007a14:	4819      	ldr	r0, [pc, #100]	; (8007a7c <HAL_GPIO_EXTI_Callback+0x8c>)
 8007a16:	f7fa fb1f 	bl	8002058 <BSP_TS_GetState>

		  if(TS_State.touchDetected >= 1 && alreadyTouched==0)
 8007a1a:	4b18      	ldr	r3, [pc, #96]	; (8007a7c <HAL_GPIO_EXTI_Callback+0x8c>)
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d01f      	beq.n	8007a62 <HAL_GPIO_EXTI_Callback+0x72>
 8007a22:	4b17      	ldr	r3, [pc, #92]	; (8007a80 <HAL_GPIO_EXTI_Callback+0x90>)
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d11b      	bne.n	8007a62 <HAL_GPIO_EXTI_Callback+0x72>
		  {
			  alreadyTouched=1;
 8007a2a:	4b15      	ldr	r3, [pc, #84]	; (8007a80 <HAL_GPIO_EXTI_Callback+0x90>)
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	701a      	strb	r2, [r3, #0]

			  // Lineas=Y; Columnas=X
			  if(touchedX <= 7)
 8007a30:	4b14      	ldr	r3, [pc, #80]	; (8007a84 <HAL_GPIO_EXTI_Callback+0x94>)
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	2b07      	cmp	r3, #7
 8007a36:	d81c      	bhi.n	8007a72 <HAL_GPIO_EXTI_Callback+0x82>
			  {
				  touchedX = TS_State.touchY[0]/60;
 8007a38:	4b10      	ldr	r3, [pc, #64]	; (8007a7c <HAL_GPIO_EXTI_Callback+0x8c>)
 8007a3a:	88db      	ldrh	r3, [r3, #6]
 8007a3c:	4a12      	ldr	r2, [pc, #72]	; (8007a88 <HAL_GPIO_EXTI_Callback+0x98>)
 8007a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a42:	095b      	lsrs	r3, r3, #5
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	b2da      	uxtb	r2, r3
 8007a48:	4b0e      	ldr	r3, [pc, #56]	; (8007a84 <HAL_GPIO_EXTI_Callback+0x94>)
 8007a4a:	701a      	strb	r2, [r3, #0]
				  touchedY = TS_State.touchX[0]/60;
 8007a4c:	4b0b      	ldr	r3, [pc, #44]	; (8007a7c <HAL_GPIO_EXTI_Callback+0x8c>)
 8007a4e:	885b      	ldrh	r3, [r3, #2]
 8007a50:	4a0d      	ldr	r2, [pc, #52]	; (8007a88 <HAL_GPIO_EXTI_Callback+0x98>)
 8007a52:	fba2 2303 	umull	r2, r3, r2, r3
 8007a56:	095b      	lsrs	r3, r3, #5
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	b2da      	uxtb	r2, r3
 8007a5c:	4b0b      	ldr	r3, [pc, #44]	; (8007a8c <HAL_GPIO_EXTI_Callback+0x9c>)
 8007a5e:	701a      	strb	r2, [r3, #0]
			  if(touchedX <= 7)
 8007a60:	e007      	b.n	8007a72 <HAL_GPIO_EXTI_Callback+0x82>
			  }

		  }
		  else if(TS_State.touchDetected == 0)
 8007a62:	4b06      	ldr	r3, [pc, #24]	; (8007a7c <HAL_GPIO_EXTI_Callback+0x8c>)
 8007a64:	781b      	ldrb	r3, [r3, #0]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d103      	bne.n	8007a72 <HAL_GPIO_EXTI_Callback+0x82>
		  {
			  alreadyTouched=0;
 8007a6a:	4b05      	ldr	r3, [pc, #20]	; (8007a80 <HAL_GPIO_EXTI_Callback+0x90>)
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	701a      	strb	r2, [r3, #0]
		  }
	}

}
 8007a70:	e7ff      	b.n	8007a72 <HAL_GPIO_EXTI_Callback+0x82>
 8007a72:	bf00      	nop
 8007a74:	3708      	adds	r7, #8
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
 8007a7a:	bf00      	nop
 8007a7c:	200005c4 	.word	0x200005c4
 8007a80:	20000284 	.word	0x20000284
 8007a84:	20000524 	.word	0x20000524
 8007a88:	88888889 	.word	0x88888889
 8007a8c:	200003e0 	.word	0x200003e0

08007a90 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b083      	sub	sp, #12
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a0a      	ldr	r2, [pc, #40]	; (8007ac8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d103      	bne.n	8007aaa <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		twoSecondsPass = 1;
 8007aa2:	4b0a      	ldr	r3, [pc, #40]	; (8007acc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	701a      	strb	r2, [r3, #0]
	}
	else if(htim->Instance == TIM7)
	{
		touchRefresh = 1;
	}
}
 8007aa8:	e007      	b.n	8007aba <HAL_TIM_PeriodElapsedCallback+0x2a>
	else if(htim->Instance == TIM7)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a08      	ldr	r2, [pc, #32]	; (8007ad0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d102      	bne.n	8007aba <HAL_TIM_PeriodElapsedCallback+0x2a>
		touchRefresh = 1;
 8007ab4:	4b07      	ldr	r3, [pc, #28]	; (8007ad4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	701a      	strb	r2, [r3, #0]
}
 8007aba:	bf00      	nop
 8007abc:	370c      	adds	r7, #12
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr
 8007ac6:	bf00      	nop
 8007ac8:	40001000 	.word	0x40001000
 8007acc:	20000285 	.word	0x20000285
 8007ad0:	40001400 	.word	0x40001400
 8007ad4:	20000286 	.word	0x20000286

08007ad8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007ad8:	b590      	push	{r4, r7, lr}
 8007ada:	b08f      	sub	sp, #60	; 0x3c
 8007adc:	af00      	add	r7, sp, #0
  int temperature;
  /* USER CODE END 1 */
  

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8007ade:	f7ff ff15 	bl	800790c <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8007ae2:	f7ff ff33 	bl	800794c <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007ae6:	f7fa fc01 	bl	80022ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007aea:	f000 f83b 	bl	8007b64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007aee:	f000 fbc1 	bl	8008274 <MX_GPIO_Init>
  MX_DMA2D_Init();
 8007af2:	f000 f925 	bl	8007d40 <MX_DMA2D_Init>
  MX_FMC_Init();
 8007af6:	f000 fb6f 	bl	80081d8 <MX_FMC_Init>
  MX_LTDC_Init();
 8007afa:	f000 fa4d 	bl	8007f98 <MX_LTDC_Init>
  MX_ADC1_Init();
 8007afe:	f000 f8cb 	bl	8007c98 <MX_ADC1_Init>
  MX_DSIHOST_DSI_Init();
 8007b02:	f000 f955 	bl	8007db0 <MX_DSIHOST_DSI_Init>
  MX_TIM6_Init();
 8007b06:	f000 faf9 	bl	80080fc <MX_TIM6_Init>
  MX_TIM7_Init();
 8007b0a:	f000 fb2f 	bl	800816c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  BSP_LED_Init(LED2);
 8007b0e:	2001      	movs	r0, #1
 8007b10:	f7f9 f8a0 	bl	8000c54 <BSP_LED_Init>
  BSP_LED_Init(LED1);
 8007b14:	2000      	movs	r0, #0
 8007b16:	f7f9 f89d 	bl	8000c54 <BSP_LED_Init>
  BSP_LCD_Init();
 8007b1a:	f7f9 face 	bl	80010ba <BSP_LCD_Init>
  LCD_Config();
 8007b1e:	f000 fc55 	bl	80083cc <LCD_Config>
  HAL_ADC_Start_IT(&hadc1);
 8007b22:	480d      	ldr	r0, [pc, #52]	; (8007b58 <main+0x80>)
 8007b24:	f7fa fca6 	bl	8002474 <HAL_ADC_Start_IT>
  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8007b28:	f7f9 fc4c 	bl	80013c4 <BSP_LCD_GetXSize>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	b29c      	uxth	r4, r3
 8007b30:	f7f9 fc54 	bl	80013dc <BSP_LCD_GetYSize>
 8007b34:	4603      	mov	r3, r0
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	4619      	mov	r1, r3
 8007b3a:	4620      	mov	r0, r4
 8007b3c:	f7fa f9fa 	bl	8001f34 <BSP_TS_Init>
  BSP_TS_ITConfig();
 8007b40:	f7fa fa58 	bl	8001ff4 <BSP_TS_ITConfig>
  HAL_TIM_Base_Start_IT(&htim6);
 8007b44:	4805      	ldr	r0, [pc, #20]	; (8007b5c <main+0x84>)
 8007b46:	f7ff fb2f 	bl	80071a8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8007b4a:	4805      	ldr	r0, [pc, #20]	; (8007b60 <main+0x88>)
 8007b4c:	f7ff fb2c 	bl	80071a8 <HAL_TIM_Base_Start_IT>

  BSP_LED_On(LED1);
 8007b50:	2000      	movs	r0, #0
 8007b52:	f7f9 f8af 	bl	8000cb4 <BSP_LED_On>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8007b56:	e7fe      	b.n	8007b56 <main+0x7e>
 8007b58:	200004dc 	.word	0x200004dc
 8007b5c:	20000528 	.word	0x20000528
 8007b60:	20000604 	.word	0x20000604

08007b64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b0b8      	sub	sp, #224	; 0xe0
 8007b68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007b6a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8007b6e:	2234      	movs	r2, #52	; 0x34
 8007b70:	2100      	movs	r1, #0
 8007b72:	4618      	mov	r0, r3
 8007b74:	f000 ff26 	bl	80089c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007b78:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	601a      	str	r2, [r3, #0]
 8007b80:	605a      	str	r2, [r3, #4]
 8007b82:	609a      	str	r2, [r3, #8]
 8007b84:	60da      	str	r2, [r3, #12]
 8007b86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007b88:	f107 0308 	add.w	r3, r7, #8
 8007b8c:	2290      	movs	r2, #144	; 0x90
 8007b8e:	2100      	movs	r1, #0
 8007b90:	4618      	mov	r0, r3
 8007b92:	f000 ff17 	bl	80089c4 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007b96:	4b3e      	ldr	r3, [pc, #248]	; (8007c90 <SystemClock_Config+0x12c>)
 8007b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b9a:	4a3d      	ldr	r2, [pc, #244]	; (8007c90 <SystemClock_Config+0x12c>)
 8007b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8007ba2:	4b3b      	ldr	r3, [pc, #236]	; (8007c90 <SystemClock_Config+0x12c>)
 8007ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007baa:	607b      	str	r3, [r7, #4]
 8007bac:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007bae:	4b39      	ldr	r3, [pc, #228]	; (8007c94 <SystemClock_Config+0x130>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a38      	ldr	r2, [pc, #224]	; (8007c94 <SystemClock_Config+0x130>)
 8007bb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007bb8:	6013      	str	r3, [r2, #0]
 8007bba:	4b36      	ldr	r3, [pc, #216]	; (8007c94 <SystemClock_Config+0x130>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007bc2:	603b      	str	r3, [r7, #0]
 8007bc4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007bcc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007bd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007bd4:	2302      	movs	r3, #2
 8007bd6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007bda:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007bde:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 8007be2:	2319      	movs	r3, #25
 8007be4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 400;
 8007be8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007bec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007bf0:	2302      	movs	r3, #2
 8007bf2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8007bf6:	2302      	movs	r3, #2
 8007bf8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007bfc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8007c00:	4618      	mov	r0, r3
 8007c02:	f7fe f9f5 	bl	8005ff0 <HAL_RCC_OscConfig>
 8007c06:	4603      	mov	r3, r0
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d001      	beq.n	8007c10 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8007c0c:	f000 fc16 	bl	800843c <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8007c10:	f7fe f99e 	bl	8005f50 <HAL_PWREx_EnableOverDrive>
 8007c14:	4603      	mov	r3, r0
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d001      	beq.n	8007c1e <SystemClock_Config+0xba>
  {
    Error_Handler();
 8007c1a:	f000 fc0f 	bl	800843c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007c1e:	230f      	movs	r3, #15
 8007c20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007c24:	2302      	movs	r3, #2
 8007c26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007c30:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007c34:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007c38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007c3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8007c40:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007c44:	2106      	movs	r1, #6
 8007c46:	4618      	mov	r0, r3
 8007c48:	f7fe fc44 	bl	80064d4 <HAL_RCC_ClockConfig>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d001      	beq.n	8007c56 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8007c52:	f000 fbf3 	bl	800843c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8007c56:	2308      	movs	r3, #8
 8007c58:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8007c5a:	23c0      	movs	r3, #192	; 0xc0
 8007c5c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8007c5e:	2302      	movs	r3, #2
 8007c60:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8007c62:	2302      	movs	r3, #2
 8007c64:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8007c66:	2300      	movs	r3, #0
 8007c68:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007c72:	f107 0308 	add.w	r3, r7, #8
 8007c76:	4618      	mov	r0, r3
 8007c78:	f7fe fdc6 	bl	8006808 <HAL_RCCEx_PeriphCLKConfig>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d001      	beq.n	8007c86 <SystemClock_Config+0x122>
  {
    Error_Handler();
 8007c82:	f000 fbdb 	bl	800843c <Error_Handler>
  }
}
 8007c86:	bf00      	nop
 8007c88:	37e0      	adds	r7, #224	; 0xe0
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
 8007c8e:	bf00      	nop
 8007c90:	40023800 	.word	0x40023800
 8007c94:	40007000 	.word	0x40007000

08007c98 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8007c9e:	463b      	mov	r3, r7
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	601a      	str	r2, [r3, #0]
 8007ca4:	605a      	str	r2, [r3, #4]
 8007ca6:	609a      	str	r2, [r3, #8]
 8007ca8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8007caa:	4b21      	ldr	r3, [pc, #132]	; (8007d30 <MX_ADC1_Init+0x98>)
 8007cac:	4a21      	ldr	r2, [pc, #132]	; (8007d34 <MX_ADC1_Init+0x9c>)
 8007cae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8007cb0:	4b1f      	ldr	r3, [pc, #124]	; (8007d30 <MX_ADC1_Init+0x98>)
 8007cb2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007cb6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007cb8:	4b1d      	ldr	r3, [pc, #116]	; (8007d30 <MX_ADC1_Init+0x98>)
 8007cba:	2200      	movs	r2, #0
 8007cbc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8007cbe:	4b1c      	ldr	r3, [pc, #112]	; (8007d30 <MX_ADC1_Init+0x98>)
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8007cc4:	4b1a      	ldr	r3, [pc, #104]	; (8007d30 <MX_ADC1_Init+0x98>)
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8007cca:	4b19      	ldr	r3, [pc, #100]	; (8007d30 <MX_ADC1_Init+0x98>)
 8007ccc:	2200      	movs	r2, #0
 8007cce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007cd2:	4b17      	ldr	r3, [pc, #92]	; (8007d30 <MX_ADC1_Init+0x98>)
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007cd8:	4b15      	ldr	r3, [pc, #84]	; (8007d30 <MX_ADC1_Init+0x98>)
 8007cda:	4a17      	ldr	r2, [pc, #92]	; (8007d38 <MX_ADC1_Init+0xa0>)
 8007cdc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007cde:	4b14      	ldr	r3, [pc, #80]	; (8007d30 <MX_ADC1_Init+0x98>)
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8007ce4:	4b12      	ldr	r3, [pc, #72]	; (8007d30 <MX_ADC1_Init+0x98>)
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8007cea:	4b11      	ldr	r3, [pc, #68]	; (8007d30 <MX_ADC1_Init+0x98>)
 8007cec:	2200      	movs	r2, #0
 8007cee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007cf2:	4b0f      	ldr	r3, [pc, #60]	; (8007d30 <MX_ADC1_Init+0x98>)
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007cf8:	480d      	ldr	r0, [pc, #52]	; (8007d30 <MX_ADC1_Init+0x98>)
 8007cfa:	f7fa fb77 	bl	80023ec <HAL_ADC_Init>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d001      	beq.n	8007d08 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8007d04:	f000 fb9a 	bl	800843c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8007d08:	4b0c      	ldr	r3, [pc, #48]	; (8007d3c <MX_ADC1_Init+0xa4>)
 8007d0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8007d10:	2303      	movs	r3, #3
 8007d12:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007d14:	463b      	mov	r3, r7
 8007d16:	4619      	mov	r1, r3
 8007d18:	4805      	ldr	r0, [pc, #20]	; (8007d30 <MX_ADC1_Init+0x98>)
 8007d1a:	f7fa fdd7 	bl	80028cc <HAL_ADC_ConfigChannel>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d001      	beq.n	8007d28 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8007d24:	f000 fb8a 	bl	800843c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8007d28:	bf00      	nop
 8007d2a:	3710      	adds	r7, #16
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}
 8007d30:	200004dc 	.word	0x200004dc
 8007d34:	40012000 	.word	0x40012000
 8007d38:	0f000001 	.word	0x0f000001
 8007d3c:	10000012 	.word	0x10000012

08007d40 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8007d44:	4b18      	ldr	r3, [pc, #96]	; (8007da8 <MX_DMA2D_Init+0x68>)
 8007d46:	4a19      	ldr	r2, [pc, #100]	; (8007dac <MX_DMA2D_Init+0x6c>)
 8007d48:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8007d4a:	4b17      	ldr	r3, [pc, #92]	; (8007da8 <MX_DMA2D_Init+0x68>)
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8007d50:	4b15      	ldr	r3, [pc, #84]	; (8007da8 <MX_DMA2D_Init+0x68>)
 8007d52:	2200      	movs	r2, #0
 8007d54:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8007d56:	4b14      	ldr	r3, [pc, #80]	; (8007da8 <MX_DMA2D_Init+0x68>)
 8007d58:	2200      	movs	r2, #0
 8007d5a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8007d5c:	4b12      	ldr	r3, [pc, #72]	; (8007da8 <MX_DMA2D_Init+0x68>)
 8007d5e:	2200      	movs	r2, #0
 8007d60:	639a      	str	r2, [r3, #56]	; 0x38
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8007d62:	4b11      	ldr	r3, [pc, #68]	; (8007da8 <MX_DMA2D_Init+0x68>)
 8007d64:	2200      	movs	r2, #0
 8007d66:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8007d68:	4b0f      	ldr	r3, [pc, #60]	; (8007da8 <MX_DMA2D_Init+0x68>)
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8007d6e:	4b0e      	ldr	r3, [pc, #56]	; (8007da8 <MX_DMA2D_Init+0x68>)
 8007d70:	2200      	movs	r2, #0
 8007d72:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8007d74:	4b0c      	ldr	r3, [pc, #48]	; (8007da8 <MX_DMA2D_Init+0x68>)
 8007d76:	2200      	movs	r2, #0
 8007d78:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8007d7a:	4b0b      	ldr	r3, [pc, #44]	; (8007da8 <MX_DMA2D_Init+0x68>)
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8007d80:	4809      	ldr	r0, [pc, #36]	; (8007da8 <MX_DMA2D_Init+0x68>)
 8007d82:	f7fb faa9 	bl	80032d8 <HAL_DMA2D_Init>
 8007d86:	4603      	mov	r3, r0
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d001      	beq.n	8007d90 <MX_DMA2D_Init+0x50>
  {
    Error_Handler();
 8007d8c:	f000 fb56 	bl	800843c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8007d90:	2101      	movs	r1, #1
 8007d92:	4805      	ldr	r0, [pc, #20]	; (8007da8 <MX_DMA2D_Init+0x68>)
 8007d94:	f7fb fc0e 	bl	80035b4 <HAL_DMA2D_ConfigLayer>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d001      	beq.n	8007da2 <MX_DMA2D_Init+0x62>
  {
    Error_Handler();
 8007d9e:	f000 fb4d 	bl	800843c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8007da2:	bf00      	nop
 8007da4:	bd80      	pop	{r7, pc}
 8007da6:	bf00      	nop
 8007da8:	2000056c 	.word	0x2000056c
 8007dac:	4002b000 	.word	0x4002b000

08007db0 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b0aa      	sub	sp, #168	; 0xa8
 8007db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8007db6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007dba:	2200      	movs	r2, #0
 8007dbc:	601a      	str	r2, [r3, #0]
 8007dbe:	605a      	str	r2, [r3, #4]
 8007dc0:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8007dc2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8007dc6:	2224      	movs	r2, #36	; 0x24
 8007dc8:	2100      	movs	r1, #0
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f000 fdfa 	bl	80089c4 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8007dd0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	601a      	str	r2, [r3, #0]
 8007dd8:	605a      	str	r2, [r3, #4]
 8007dda:	609a      	str	r2, [r3, #8]
 8007ddc:	60da      	str	r2, [r3, #12]
 8007dde:	611a      	str	r2, [r3, #16]
 8007de0:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 8007de2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007de6:	2234      	movs	r2, #52	; 0x34
 8007de8:	2100      	movs	r1, #0
 8007dea:	4618      	mov	r0, r3
 8007dec:	f000 fdea 	bl	80089c4 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8007df0:	463b      	mov	r3, r7
 8007df2:	222c      	movs	r2, #44	; 0x2c
 8007df4:	2100      	movs	r1, #0
 8007df6:	4618      	mov	r0, r3
 8007df8:	f000 fde4 	bl	80089c4 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8007dfc:	4b64      	ldr	r3, [pc, #400]	; (8007f90 <MX_DSIHOST_DSI_Init+0x1e0>)
 8007dfe:	4a65      	ldr	r2, [pc, #404]	; (8007f94 <MX_DSIHOST_DSI_Init+0x1e4>)
 8007e00:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8007e02:	4b63      	ldr	r3, [pc, #396]	; (8007f90 <MX_DSIHOST_DSI_Init+0x1e0>)
 8007e04:	2200      	movs	r2, #0
 8007e06:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8007e08:	4b61      	ldr	r3, [pc, #388]	; (8007f90 <MX_DSIHOST_DSI_Init+0x1e0>)
 8007e0a:	2204      	movs	r2, #4
 8007e0c:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 8007e0e:	4b60      	ldr	r3, [pc, #384]	; (8007f90 <MX_DSIHOST_DSI_Init+0x1e0>)
 8007e10:	2200      	movs	r2, #0
 8007e12:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 20;
 8007e14:	2314      	movs	r3, #20
 8007e16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8007e20:	2300      	movs	r3, #0
 8007e22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8007e26:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007e2a:	4619      	mov	r1, r3
 8007e2c:	4858      	ldr	r0, [pc, #352]	; (8007f90 <MX_DSIHOST_DSI_Init+0x1e0>)
 8007e2e:	f7fb fd43 	bl	80038b8 <HAL_DSI_Init>
 8007e32:	4603      	mov	r3, r0
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d001      	beq.n	8007e3c <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 8007e38:	f000 fb00 	bl	800843c <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	67bb      	str	r3, [r7, #120]	; 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8007e40:	2300      	movs	r3, #0
 8007e42:	67fb      	str	r3, [r7, #124]	; 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8007e44:	2300      	movs	r3, #0
 8007e46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 8007e50:	2300      	movs	r3, #0
 8007e52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8007e56:	2300      	movs	r3, #0
 8007e58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 8007e62:	2300      	movs	r3, #0
 8007e64:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.BTATimeout = 0;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8007e6e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8007e72:	4619      	mov	r1, r3
 8007e74:	4846      	ldr	r0, [pc, #280]	; (8007f90 <MX_DSIHOST_DSI_Init+0x1e0>)
 8007e76:	f7fc fb5b 	bl	8004530 <HAL_DSI_ConfigHostTimeouts>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d001      	beq.n	8007e84 <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 8007e80:	f000 fadc 	bl	800843c <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 8007e84:	231c      	movs	r3, #28
 8007e86:	663b      	str	r3, [r7, #96]	; 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 8007e88:	2321      	movs	r3, #33	; 0x21
 8007e8a:	667b      	str	r3, [r7, #100]	; 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 8007e8c:	230f      	movs	r3, #15
 8007e8e:	66bb      	str	r3, [r7, #104]	; 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 8007e90:	2319      	movs	r3, #25
 8007e92:	66fb      	str	r3, [r7, #108]	; 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 8007e94:	2300      	movs	r3, #0
 8007e96:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.StopWaitTime = 0;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8007e9c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	483b      	ldr	r0, [pc, #236]	; (8007f90 <MX_DSIHOST_DSI_Init+0x1e0>)
 8007ea4:	f7fc fada 	bl	800445c <HAL_DSI_ConfigPhyTimer>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d001      	beq.n	8007eb2 <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 8007eae:	f000 fac5 	bl	800843c <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8007eb2:	2104      	movs	r1, #4
 8007eb4:	4836      	ldr	r0, [pc, #216]	; (8007f90 <MX_DSIHOST_DSI_Init+0x1e0>)
 8007eb6:	f7fc faa9 	bl	800440c <HAL_DSI_ConfigFlowControl>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d001      	beq.n	8007ec4 <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 8007ec0:	f000 fabc 	bl	800843c <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8007ec4:	f242 7110 	movw	r1, #10000	; 0x2710
 8007ec8:	4831      	ldr	r0, [pc, #196]	; (8007f90 <MX_DSIHOST_DSI_Init+0x1e0>)
 8007eca:	f7fc fcef 	bl	80048ac <HAL_DSI_SetLowPowerRXFilter>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d001      	beq.n	8007ed8 <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 8007ed4:	f000 fab2 	bl	800843c <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8007ed8:	2100      	movs	r1, #0
 8007eda:	482d      	ldr	r0, [pc, #180]	; (8007f90 <MX_DSIHOST_DSI_Init+0x1e0>)
 8007edc:	f7fb fe7a 	bl	8003bd4 <HAL_DSI_ConfigErrorMonitor>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d001      	beq.n	8007eea <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 8007ee6:	f000 faa9 	bl	800843c <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_DISABLE;
 8007eea:	2300      	movs	r3, #0
 8007eec:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	633b      	str	r3, [r7, #48]	; 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_DISABLE;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	637b      	str	r3, [r7, #52]	; 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	63bb      	str	r3, [r7, #56]	; 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_DISABLE;
 8007efa:	2300      	movs	r3, #0
 8007efc:	63fb      	str	r3, [r7, #60]	; 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8007efe:	2300      	movs	r3, #0
 8007f00:	643b      	str	r3, [r7, #64]	; 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_DISABLE;
 8007f02:	2300      	movs	r3, #0
 8007f04:	647b      	str	r3, [r7, #68]	; 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8007f06:	2300      	movs	r3, #0
 8007f08:	64bb      	str	r3, [r7, #72]	; 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_DISABLE;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	653b      	str	r3, [r7, #80]	; 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8007f12:	2300      	movs	r3, #0
 8007f14:	657b      	str	r3, [r7, #84]	; 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_DISABLE;
 8007f16:	2300      	movs	r3, #0
 8007f18:	65bb      	str	r3, [r7, #88]	; 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8007f1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007f22:	4619      	mov	r1, r3
 8007f24:	481a      	ldr	r0, [pc, #104]	; (8007f90 <MX_DSIHOST_DSI_Init+0x1e0>)
 8007f26:	f7fc fa13 	bl	8004350 <HAL_DSI_ConfigCommand>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d001      	beq.n	8007f34 <MX_DSIHOST_DSI_Init+0x184>
  {
    Error_Handler();
 8007f30:	f000 fa84 	bl	800843c <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 8007f34:	2300      	movs	r3, #0
 8007f36:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 8007f38:	2305      	movs	r3, #5
 8007f3a:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 640;
 8007f3c:	f44f 7320 	mov.w	r3, #640	; 0x280
 8007f40:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8007f42:	2310      	movs	r3, #16
 8007f44:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8007f46:	2300      	movs	r3, #0
 8007f48:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 8007f4a:	2304      	movs	r3, #4
 8007f4c:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 8007f4e:	2302      	movs	r3, #2
 8007f50:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8007f52:	2300      	movs	r3, #0
 8007f54:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 8007f56:	2300      	movs	r3, #0
 8007f58:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 8007f5a:	2340      	movs	r3, #64	; 0x40
 8007f5c:	627b      	str	r3, [r7, #36]	; 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_DISABLE;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8007f62:	463b      	mov	r3, r7
 8007f64:	4619      	mov	r1, r3
 8007f66:	480a      	ldr	r0, [pc, #40]	; (8007f90 <MX_DSIHOST_DSI_Init+0x1e0>)
 8007f68:	f7fc f918 	bl	800419c <HAL_DSI_ConfigAdaptedCommandMode>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d001      	beq.n	8007f76 <MX_DSIHOST_DSI_Init+0x1c6>
  {
    Error_Handler();
 8007f72:	f000 fa63 	bl	800843c <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8007f76:	2100      	movs	r1, #0
 8007f78:	4805      	ldr	r0, [pc, #20]	; (8007f90 <MX_DSIHOST_DSI_Init+0x1e0>)
 8007f7a:	f7fb fee7 	bl	8003d4c <HAL_DSI_SetGenericVCID>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d001      	beq.n	8007f88 <MX_DSIHOST_DSI_Init+0x1d8>
  {
    Error_Handler();
 8007f84:	f000 fa5a 	bl	800843c <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8007f88:	bf00      	nop
 8007f8a:	37a8      	adds	r7, #168	; 0xa8
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}
 8007f90:	20000418 	.word	0x20000418
 8007f94:	40016c00 	.word	0x40016c00

08007f98 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b09a      	sub	sp, #104	; 0x68
 8007f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8007f9e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007fa2:	2234      	movs	r2, #52	; 0x34
 8007fa4:	2100      	movs	r1, #0
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f000 fd0c 	bl	80089c4 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8007fac:	463b      	mov	r3, r7
 8007fae:	2234      	movs	r2, #52	; 0x34
 8007fb0:	2100      	movs	r1, #0
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f000 fd06 	bl	80089c4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8007fb8:	4b4e      	ldr	r3, [pc, #312]	; (80080f4 <MX_LTDC_Init+0x15c>)
 8007fba:	4a4f      	ldr	r2, [pc, #316]	; (80080f8 <MX_LTDC_Init+0x160>)
 8007fbc:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8007fbe:	4b4d      	ldr	r3, [pc, #308]	; (80080f4 <MX_LTDC_Init+0x15c>)
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8007fc4:	4b4b      	ldr	r3, [pc, #300]	; (80080f4 <MX_LTDC_Init+0x15c>)
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8007fca:	4b4a      	ldr	r3, [pc, #296]	; (80080f4 <MX_LTDC_Init+0x15c>)
 8007fcc:	2200      	movs	r2, #0
 8007fce:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8007fd0:	4b48      	ldr	r3, [pc, #288]	; (80080f4 <MX_LTDC_Init+0x15c>)
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8007fd6:	4b47      	ldr	r3, [pc, #284]	; (80080f4 <MX_LTDC_Init+0x15c>)
 8007fd8:	2207      	movs	r2, #7
 8007fda:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8007fdc:	4b45      	ldr	r3, [pc, #276]	; (80080f4 <MX_LTDC_Init+0x15c>)
 8007fde:	2203      	movs	r2, #3
 8007fe0:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8007fe2:	4b44      	ldr	r3, [pc, #272]	; (80080f4 <MX_LTDC_Init+0x15c>)
 8007fe4:	220e      	movs	r2, #14
 8007fe6:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8007fe8:	4b42      	ldr	r3, [pc, #264]	; (80080f4 <MX_LTDC_Init+0x15c>)
 8007fea:	2205      	movs	r2, #5
 8007fec:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8007fee:	4b41      	ldr	r3, [pc, #260]	; (80080f4 <MX_LTDC_Init+0x15c>)
 8007ff0:	f240 228e 	movw	r2, #654	; 0x28e
 8007ff4:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8007ff6:	4b3f      	ldr	r3, [pc, #252]	; (80080f4 <MX_LTDC_Init+0x15c>)
 8007ff8:	f240 12e5 	movw	r2, #485	; 0x1e5
 8007ffc:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8007ffe:	4b3d      	ldr	r3, [pc, #244]	; (80080f4 <MX_LTDC_Init+0x15c>)
 8008000:	f44f 7225 	mov.w	r2, #660	; 0x294
 8008004:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8008006:	4b3b      	ldr	r3, [pc, #236]	; (80080f4 <MX_LTDC_Init+0x15c>)
 8008008:	f240 12e7 	movw	r2, #487	; 0x1e7
 800800c:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800800e:	4b39      	ldr	r3, [pc, #228]	; (80080f4 <MX_LTDC_Init+0x15c>)
 8008010:	2200      	movs	r2, #0
 8008012:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8008016:	4b37      	ldr	r3, [pc, #220]	; (80080f4 <MX_LTDC_Init+0x15c>)
 8008018:	2200      	movs	r2, #0
 800801a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800801e:	4b35      	ldr	r3, [pc, #212]	; (80080f4 <MX_LTDC_Init+0x15c>)
 8008020:	2200      	movs	r2, #0
 8008022:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8008026:	4833      	ldr	r0, [pc, #204]	; (80080f4 <MX_LTDC_Init+0x15c>)
 8008028:	f7fd fc9a 	bl	8005960 <HAL_LTDC_Init>
 800802c:	4603      	mov	r3, r0
 800802e:	2b00      	cmp	r3, #0
 8008030:	d001      	beq.n	8008036 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8008032:	f000 fa03 	bl	800843c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8008036:	2300      	movs	r3, #0
 8008038:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 800803a:	2300      	movs	r3, #0
 800803c:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 800803e:	2300      	movs	r3, #0
 8008040:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8008042:	2300      	movs	r3, #0
 8008044:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8008046:	2300      	movs	r3, #0
 8008048:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 800804a:	2300      	movs	r3, #0
 800804c:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 800804e:	2300      	movs	r3, #0
 8008050:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8008052:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008056:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8008058:	2305      	movs	r3, #5
 800805a:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 800805c:	2300      	movs	r3, #0
 800805e:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8008060:	2300      	movs	r3, #0
 8008062:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8008064:	2300      	movs	r3, #0
 8008066:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8008068:	2300      	movs	r3, #0
 800806a:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 800806e:	2300      	movs	r3, #0
 8008070:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8008074:	2300      	movs	r3, #0
 8008076:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800807a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800807e:	2200      	movs	r2, #0
 8008080:	4619      	mov	r1, r3
 8008082:	481c      	ldr	r0, [pc, #112]	; (80080f4 <MX_LTDC_Init+0x15c>)
 8008084:	f7fd fd3c 	bl	8005b00 <HAL_LTDC_ConfigLayer>
 8008088:	4603      	mov	r3, r0
 800808a:	2b00      	cmp	r3, #0
 800808c:	d001      	beq.n	8008092 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 800808e:	f000 f9d5 	bl	800843c <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8008092:	2300      	movs	r3, #0
 8008094:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8008096:	2300      	movs	r3, #0
 8008098:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800809a:	2300      	movs	r3, #0
 800809c:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 800809e:	2300      	movs	r3, #0
 80080a0:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80080a2:	2300      	movs	r3, #0
 80080a4:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 80080a6:	2300      	movs	r3, #0
 80080a8:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80080aa:	2300      	movs	r3, #0
 80080ac:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80080ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080b2:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80080b4:	2305      	movs	r3, #5
 80080b6:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80080b8:	2300      	movs	r3, #0
 80080ba:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 80080bc:	2300      	movs	r3, #0
 80080be:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 80080c0:	2300      	movs	r3, #0
 80080c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80080c4:	2300      	movs	r3, #0
 80080c6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80080ca:	2300      	movs	r3, #0
 80080cc:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80080d0:	2300      	movs	r3, #0
 80080d2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80080d6:	463b      	mov	r3, r7
 80080d8:	2201      	movs	r2, #1
 80080da:	4619      	mov	r1, r3
 80080dc:	4805      	ldr	r0, [pc, #20]	; (80080f4 <MX_LTDC_Init+0x15c>)
 80080de:	f7fd fd0f 	bl	8005b00 <HAL_LTDC_ConfigLayer>
 80080e2:	4603      	mov	r3, r0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d001      	beq.n	80080ec <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80080e8:	f000 f9a8 	bl	800843c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80080ec:	bf00      	nop
 80080ee:	3768      	adds	r7, #104	; 0x68
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}
 80080f4:	20000434 	.word	0x20000434
 80080f8:	40016800 	.word	0x40016800

080080fc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b084      	sub	sp, #16
 8008100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008102:	1d3b      	adds	r3, r7, #4
 8008104:	2200      	movs	r2, #0
 8008106:	601a      	str	r2, [r3, #0]
 8008108:	605a      	str	r2, [r3, #4]
 800810a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800810c:	4b15      	ldr	r3, [pc, #84]	; (8008164 <MX_TIM6_Init+0x68>)
 800810e:	4a16      	ldr	r2, [pc, #88]	; (8008168 <MX_TIM6_Init+0x6c>)
 8008110:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 19999;
 8008112:	4b14      	ldr	r3, [pc, #80]	; (8008164 <MX_TIM6_Init+0x68>)
 8008114:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8008118:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800811a:	4b12      	ldr	r3, [pc, #72]	; (8008164 <MX_TIM6_Init+0x68>)
 800811c:	2200      	movs	r2, #0
 800811e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8008120:	4b10      	ldr	r3, [pc, #64]	; (8008164 <MX_TIM6_Init+0x68>)
 8008122:	f242 720f 	movw	r2, #9999	; 0x270f
 8008126:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008128:	4b0e      	ldr	r3, [pc, #56]	; (8008164 <MX_TIM6_Init+0x68>)
 800812a:	2200      	movs	r2, #0
 800812c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800812e:	480d      	ldr	r0, [pc, #52]	; (8008164 <MX_TIM6_Init+0x68>)
 8008130:	f7ff f80f 	bl	8007152 <HAL_TIM_Base_Init>
 8008134:	4603      	mov	r3, r0
 8008136:	2b00      	cmp	r3, #0
 8008138:	d001      	beq.n	800813e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800813a:	f000 f97f 	bl	800843c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800813e:	2300      	movs	r3, #0
 8008140:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008142:	2300      	movs	r3, #0
 8008144:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8008146:	1d3b      	adds	r3, r7, #4
 8008148:	4619      	mov	r1, r3
 800814a:	4806      	ldr	r0, [pc, #24]	; (8008164 <MX_TIM6_Init+0x68>)
 800814c:	f7ff fa3e 	bl	80075cc <HAL_TIMEx_MasterConfigSynchronization>
 8008150:	4603      	mov	r3, r0
 8008152:	2b00      	cmp	r3, #0
 8008154:	d001      	beq.n	800815a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8008156:	f000 f971 	bl	800843c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800815a:	bf00      	nop
 800815c:	3710      	adds	r7, #16
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	20000528 	.word	0x20000528
 8008168:	40001000 	.word	0x40001000

0800816c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b084      	sub	sp, #16
 8008170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008172:	1d3b      	adds	r3, r7, #4
 8008174:	2200      	movs	r2, #0
 8008176:	601a      	str	r2, [r3, #0]
 8008178:	605a      	str	r2, [r3, #4]
 800817a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800817c:	4b14      	ldr	r3, [pc, #80]	; (80081d0 <MX_TIM7_Init+0x64>)
 800817e:	4a15      	ldr	r2, [pc, #84]	; (80081d4 <MX_TIM7_Init+0x68>)
 8008180:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9999;
 8008182:	4b13      	ldr	r3, [pc, #76]	; (80081d0 <MX_TIM7_Init+0x64>)
 8008184:	f242 720f 	movw	r2, #9999	; 0x270f
 8008188:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800818a:	4b11      	ldr	r3, [pc, #68]	; (80081d0 <MX_TIM7_Init+0x64>)
 800818c:	2200      	movs	r2, #0
 800818e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 8008190:	4b0f      	ldr	r3, [pc, #60]	; (80081d0 <MX_TIM7_Init+0x64>)
 8008192:	2263      	movs	r2, #99	; 0x63
 8008194:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008196:	4b0e      	ldr	r3, [pc, #56]	; (80081d0 <MX_TIM7_Init+0x64>)
 8008198:	2200      	movs	r2, #0
 800819a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800819c:	480c      	ldr	r0, [pc, #48]	; (80081d0 <MX_TIM7_Init+0x64>)
 800819e:	f7fe ffd8 	bl	8007152 <HAL_TIM_Base_Init>
 80081a2:	4603      	mov	r3, r0
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d001      	beq.n	80081ac <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80081a8:	f000 f948 	bl	800843c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80081ac:	2300      	movs	r3, #0
 80081ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80081b0:	2300      	movs	r3, #0
 80081b2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80081b4:	1d3b      	adds	r3, r7, #4
 80081b6:	4619      	mov	r1, r3
 80081b8:	4805      	ldr	r0, [pc, #20]	; (80081d0 <MX_TIM7_Init+0x64>)
 80081ba:	f7ff fa07 	bl	80075cc <HAL_TIMEx_MasterConfigSynchronization>
 80081be:	4603      	mov	r3, r0
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d001      	beq.n	80081c8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80081c4:	f000 f93a 	bl	800843c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80081c8:	bf00      	nop
 80081ca:	3710      	adds	r7, #16
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}
 80081d0:	20000604 	.word	0x20000604
 80081d4:	40001400 	.word	0x40001400

080081d8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b088      	sub	sp, #32
 80081dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80081de:	1d3b      	adds	r3, r7, #4
 80081e0:	2200      	movs	r2, #0
 80081e2:	601a      	str	r2, [r3, #0]
 80081e4:	605a      	str	r2, [r3, #4]
 80081e6:	609a      	str	r2, [r3, #8]
 80081e8:	60da      	str	r2, [r3, #12]
 80081ea:	611a      	str	r2, [r3, #16]
 80081ec:	615a      	str	r2, [r3, #20]
 80081ee:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80081f0:	4b1e      	ldr	r3, [pc, #120]	; (800826c <MX_FMC_Init+0x94>)
 80081f2:	4a1f      	ldr	r2, [pc, #124]	; (8008270 <MX_FMC_Init+0x98>)
 80081f4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80081f6:	4b1d      	ldr	r3, [pc, #116]	; (800826c <MX_FMC_Init+0x94>)
 80081f8:	2201      	movs	r2, #1
 80081fa:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80081fc:	4b1b      	ldr	r3, [pc, #108]	; (800826c <MX_FMC_Init+0x94>)
 80081fe:	2200      	movs	r2, #0
 8008200:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8008202:	4b1a      	ldr	r3, [pc, #104]	; (800826c <MX_FMC_Init+0x94>)
 8008204:	2208      	movs	r2, #8
 8008206:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8008208:	4b18      	ldr	r3, [pc, #96]	; (800826c <MX_FMC_Init+0x94>)
 800820a:	2220      	movs	r2, #32
 800820c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800820e:	4b17      	ldr	r3, [pc, #92]	; (800826c <MX_FMC_Init+0x94>)
 8008210:	2240      	movs	r2, #64	; 0x40
 8008212:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8008214:	4b15      	ldr	r3, [pc, #84]	; (800826c <MX_FMC_Init+0x94>)
 8008216:	2280      	movs	r2, #128	; 0x80
 8008218:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800821a:	4b14      	ldr	r3, [pc, #80]	; (800826c <MX_FMC_Init+0x94>)
 800821c:	2200      	movs	r2, #0
 800821e:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8008220:	4b12      	ldr	r3, [pc, #72]	; (800826c <MX_FMC_Init+0x94>)
 8008222:	2200      	movs	r2, #0
 8008224:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8008226:	4b11      	ldr	r3, [pc, #68]	; (800826c <MX_FMC_Init+0x94>)
 8008228:	2200      	movs	r2, #0
 800822a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800822c:	4b0f      	ldr	r3, [pc, #60]	; (800826c <MX_FMC_Init+0x94>)
 800822e:	2200      	movs	r2, #0
 8008230:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8008232:	2310      	movs	r3, #16
 8008234:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8008236:	2310      	movs	r3, #16
 8008238:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 800823a:	2310      	movs	r3, #16
 800823c:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 800823e:	2310      	movs	r3, #16
 8008240:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8008242:	2310      	movs	r3, #16
 8008244:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8008246:	2310      	movs	r3, #16
 8008248:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 800824a:	2310      	movs	r3, #16
 800824c:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800824e:	1d3b      	adds	r3, r7, #4
 8008250:	4619      	mov	r1, r3
 8008252:	4806      	ldr	r0, [pc, #24]	; (800826c <MX_FMC_Init+0x94>)
 8008254:	f7fe fefe 	bl	8007054 <HAL_SDRAM_Init>
 8008258:	4603      	mov	r3, r0
 800825a:	2b00      	cmp	r3, #0
 800825c:	d001      	beq.n	8008262 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 800825e:	f000 f8ed 	bl	800843c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8008262:	bf00      	nop
 8008264:	3720      	adds	r7, #32
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}
 800826a:	bf00      	nop
 800826c:	200005d0 	.word	0x200005d0
 8008270:	a0000140 	.word	0xa0000140

08008274 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b08e      	sub	sp, #56	; 0x38
 8008278:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800827a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800827e:	2200      	movs	r2, #0
 8008280:	601a      	str	r2, [r3, #0]
 8008282:	605a      	str	r2, [r3, #4]
 8008284:	609a      	str	r2, [r3, #8]
 8008286:	60da      	str	r2, [r3, #12]
 8008288:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800828a:	4b4c      	ldr	r3, [pc, #304]	; (80083bc <MX_GPIO_Init+0x148>)
 800828c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800828e:	4a4b      	ldr	r2, [pc, #300]	; (80083bc <MX_GPIO_Init+0x148>)
 8008290:	f043 0302 	orr.w	r3, r3, #2
 8008294:	6313      	str	r3, [r2, #48]	; 0x30
 8008296:	4b49      	ldr	r3, [pc, #292]	; (80083bc <MX_GPIO_Init+0x148>)
 8008298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800829a:	f003 0302 	and.w	r3, r3, #2
 800829e:	623b      	str	r3, [r7, #32]
 80082a0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80082a2:	4b46      	ldr	r3, [pc, #280]	; (80083bc <MX_GPIO_Init+0x148>)
 80082a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082a6:	4a45      	ldr	r2, [pc, #276]	; (80083bc <MX_GPIO_Init+0x148>)
 80082a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082ac:	6313      	str	r3, [r2, #48]	; 0x30
 80082ae:	4b43      	ldr	r3, [pc, #268]	; (80083bc <MX_GPIO_Init+0x148>)
 80082b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082b6:	61fb      	str	r3, [r7, #28]
 80082b8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80082ba:	4b40      	ldr	r3, [pc, #256]	; (80083bc <MX_GPIO_Init+0x148>)
 80082bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082be:	4a3f      	ldr	r2, [pc, #252]	; (80083bc <MX_GPIO_Init+0x148>)
 80082c0:	f043 0308 	orr.w	r3, r3, #8
 80082c4:	6313      	str	r3, [r2, #48]	; 0x30
 80082c6:	4b3d      	ldr	r3, [pc, #244]	; (80083bc <MX_GPIO_Init+0x148>)
 80082c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082ca:	f003 0308 	and.w	r3, r3, #8
 80082ce:	61bb      	str	r3, [r7, #24]
 80082d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80082d2:	4b3a      	ldr	r3, [pc, #232]	; (80083bc <MX_GPIO_Init+0x148>)
 80082d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082d6:	4a39      	ldr	r2, [pc, #228]	; (80083bc <MX_GPIO_Init+0x148>)
 80082d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082dc:	6313      	str	r3, [r2, #48]	; 0x30
 80082de:	4b37      	ldr	r3, [pc, #220]	; (80083bc <MX_GPIO_Init+0x148>)
 80082e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082e6:	617b      	str	r3, [r7, #20]
 80082e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80082ea:	4b34      	ldr	r3, [pc, #208]	; (80083bc <MX_GPIO_Init+0x148>)
 80082ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082ee:	4a33      	ldr	r2, [pc, #204]	; (80083bc <MX_GPIO_Init+0x148>)
 80082f0:	f043 0320 	orr.w	r3, r3, #32
 80082f4:	6313      	str	r3, [r2, #48]	; 0x30
 80082f6:	4b31      	ldr	r3, [pc, #196]	; (80083bc <MX_GPIO_Init+0x148>)
 80082f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082fa:	f003 0320 	and.w	r3, r3, #32
 80082fe:	613b      	str	r3, [r7, #16]
 8008300:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008302:	4b2e      	ldr	r3, [pc, #184]	; (80083bc <MX_GPIO_Init+0x148>)
 8008304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008306:	4a2d      	ldr	r2, [pc, #180]	; (80083bc <MX_GPIO_Init+0x148>)
 8008308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800830c:	6313      	str	r3, [r2, #48]	; 0x30
 800830e:	4b2b      	ldr	r3, [pc, #172]	; (80083bc <MX_GPIO_Init+0x148>)
 8008310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008316:	60fb      	str	r3, [r7, #12]
 8008318:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800831a:	4b28      	ldr	r3, [pc, #160]	; (80083bc <MX_GPIO_Init+0x148>)
 800831c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800831e:	4a27      	ldr	r2, [pc, #156]	; (80083bc <MX_GPIO_Init+0x148>)
 8008320:	f043 0301 	orr.w	r3, r3, #1
 8008324:	6313      	str	r3, [r2, #48]	; 0x30
 8008326:	4b25      	ldr	r3, [pc, #148]	; (80083bc <MX_GPIO_Init+0x148>)
 8008328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800832a:	f003 0301 	and.w	r3, r3, #1
 800832e:	60bb      	str	r3, [r7, #8]
 8008330:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008332:	4b22      	ldr	r3, [pc, #136]	; (80083bc <MX_GPIO_Init+0x148>)
 8008334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008336:	4a21      	ldr	r2, [pc, #132]	; (80083bc <MX_GPIO_Init+0x148>)
 8008338:	f043 0310 	orr.w	r3, r3, #16
 800833c:	6313      	str	r3, [r2, #48]	; 0x30
 800833e:	4b1f      	ldr	r3, [pc, #124]	; (80083bc <MX_GPIO_Init+0x148>)
 8008340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008342:	f003 0310 	and.w	r3, r3, #16
 8008346:	607b      	str	r3, [r7, #4]
 8008348:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800834a:	4b1c      	ldr	r3, [pc, #112]	; (80083bc <MX_GPIO_Init+0x148>)
 800834c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800834e:	4a1b      	ldr	r2, [pc, #108]	; (80083bc <MX_GPIO_Init+0x148>)
 8008350:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008354:	6313      	str	r3, [r2, #48]	; 0x30
 8008356:	4b19      	ldr	r3, [pc, #100]	; (80083bc <MX_GPIO_Init+0x148>)
 8008358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800835a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800835e:	603b      	str	r3, [r7, #0]
 8008360:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PI13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8008362:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008366:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008368:	4b15      	ldr	r3, [pc, #84]	; (80083c0 <MX_GPIO_Init+0x14c>)
 800836a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800836c:	2300      	movs	r3, #0
 800836e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8008370:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008374:	4619      	mov	r1, r3
 8008376:	4813      	ldr	r0, [pc, #76]	; (80083c4 <MX_GPIO_Init+0x150>)
 8008378:	f7fc fac6 	bl	8004908 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800837c:	2301      	movs	r3, #1
 800837e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008380:	4b0f      	ldr	r3, [pc, #60]	; (80083c0 <MX_GPIO_Init+0x14c>)
 8008382:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008384:	2300      	movs	r3, #0
 8008386:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008388:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800838c:	4619      	mov	r1, r3
 800838e:	480e      	ldr	r0, [pc, #56]	; (80083c8 <MX_GPIO_Init+0x154>)
 8008390:	f7fc faba 	bl	8004908 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8008394:	2200      	movs	r2, #0
 8008396:	2100      	movs	r1, #0
 8008398:	2006      	movs	r0, #6
 800839a:	f7fa fdaa 	bl	8002ef2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800839e:	2006      	movs	r0, #6
 80083a0:	f7fa fdc3 	bl	8002f2a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80083a4:	2200      	movs	r2, #0
 80083a6:	2100      	movs	r1, #0
 80083a8:	2028      	movs	r0, #40	; 0x28
 80083aa:	f7fa fda2 	bl	8002ef2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80083ae:	2028      	movs	r0, #40	; 0x28
 80083b0:	f7fa fdbb 	bl	8002f2a <HAL_NVIC_EnableIRQ>

}
 80083b4:	bf00      	nop
 80083b6:	3738      	adds	r7, #56	; 0x38
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}
 80083bc:	40023800 	.word	0x40023800
 80083c0:	10110000 	.word	0x10110000
 80083c4:	40022000 	.word	0x40022000
 80083c8:	40020000 	.word	0x40020000

080083cc <LCD_Config>:

/* USER CODE BEGIN 4 */
static void LCD_Config(void)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b082      	sub	sp, #8
 80083d0:	af00      	add	r7, sp, #0
  uint32_t  lcd_status;

  /* Initialize the LCD */
  lcd_status = BSP_LCD_Init();
 80083d2:	f7f8 fe72 	bl	80010ba <BSP_LCD_Init>
 80083d6:	4603      	mov	r3, r0
 80083d8:	607b      	str	r3, [r7, #4]
  while(lcd_status != LCD_OK);//si LCD_init no fuera ok estaría en ciclo infinito
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d1fc      	bne.n	80083da <LCD_Config+0xe>

  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 80083e0:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80083e4:	2000      	movs	r0, #0
 80083e6:	f7f9 f805 	bl	80013f4 <BSP_LCD_LayerDefaultInit>

  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 80083ea:	f04f 30ff 	mov.w	r0, #4294967295
 80083ee:	f7f9 f8ad 	bl	800154c <BSP_LCD_Clear>

  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80083f2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80083f6:	f7f9 f85d 	bl	80014b4 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(480, 0, 320, 50);
 80083fa:	2332      	movs	r3, #50	; 0x32
 80083fc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8008400:	2100      	movs	r1, #0
 8008402:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8008406:	f7f9 f9d1 	bl	80017ac <BSP_LCD_FillRect>
  BSP_LCD_SetFont(&Font24);
 800840a:	480a      	ldr	r0, [pc, #40]	; (8008434 <LCD_Config+0x68>)
 800840c:	f7f9 f884 	bl	8001518 <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8008410:	f04f 30ff 	mov.w	r0, #4294967295
 8008414:	f7f9 f84e 	bl	80014b4 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8008418:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800841c:	f7f9 f862 	bl	80014e4 <BSP_LCD_SetBackColor>
  BSP_LCD_DisplayStringAt(100, 10, (uint8_t *)"REVERSI", RIGHT_MODE);//funcion quiere uint8_t
 8008420:	2302      	movs	r3, #2
 8008422:	4a05      	ldr	r2, [pc, #20]	; (8008438 <LCD_Config+0x6c>)
 8008424:	210a      	movs	r1, #10
 8008426:	2064      	movs	r0, #100	; 0x64
 8008428:	f7f9 f8fc 	bl	8001624 <BSP_LCD_DisplayStringAt>

  //BSP_LCD_DrawBitmap(0, 0, image);
 // init_game();
//  mainMenu();

}
 800842c:	bf00      	nop
 800842e:	3708      	adds	r7, #8
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}
 8008434:	20000038 	.word	0x20000038
 8008438:	08008a20 	.word	0x08008a20

0800843c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800843c:	b480      	push	{r7}
 800843e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008440:	bf00      	nop
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr
	...

0800844c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800844c:	b480      	push	{r7}
 800844e:	b083      	sub	sp, #12
 8008450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8008452:	4b0f      	ldr	r3, [pc, #60]	; (8008490 <HAL_MspInit+0x44>)
 8008454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008456:	4a0e      	ldr	r2, [pc, #56]	; (8008490 <HAL_MspInit+0x44>)
 8008458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800845c:	6413      	str	r3, [r2, #64]	; 0x40
 800845e:	4b0c      	ldr	r3, [pc, #48]	; (8008490 <HAL_MspInit+0x44>)
 8008460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008466:	607b      	str	r3, [r7, #4]
 8008468:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800846a:	4b09      	ldr	r3, [pc, #36]	; (8008490 <HAL_MspInit+0x44>)
 800846c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800846e:	4a08      	ldr	r2, [pc, #32]	; (8008490 <HAL_MspInit+0x44>)
 8008470:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008474:	6453      	str	r3, [r2, #68]	; 0x44
 8008476:	4b06      	ldr	r3, [pc, #24]	; (8008490 <HAL_MspInit+0x44>)
 8008478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800847a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800847e:	603b      	str	r3, [r7, #0]
 8008480:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008482:	bf00      	nop
 8008484:	370c      	adds	r7, #12
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr
 800848e:	bf00      	nop
 8008490:	40023800 	.word	0x40023800

08008494 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b084      	sub	sp, #16
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a0d      	ldr	r2, [pc, #52]	; (80084d8 <HAL_ADC_MspInit+0x44>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d113      	bne.n	80084ce <HAL_ADC_MspInit+0x3a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80084a6:	4b0d      	ldr	r3, [pc, #52]	; (80084dc <HAL_ADC_MspInit+0x48>)
 80084a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084aa:	4a0c      	ldr	r2, [pc, #48]	; (80084dc <HAL_ADC_MspInit+0x48>)
 80084ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084b0:	6453      	str	r3, [r2, #68]	; 0x44
 80084b2:	4b0a      	ldr	r3, [pc, #40]	; (80084dc <HAL_ADC_MspInit+0x48>)
 80084b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084ba:	60fb      	str	r3, [r7, #12]
 80084bc:	68fb      	ldr	r3, [r7, #12]
    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80084be:	2200      	movs	r2, #0
 80084c0:	2100      	movs	r1, #0
 80084c2:	2012      	movs	r0, #18
 80084c4:	f7fa fd15 	bl	8002ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80084c8:	2012      	movs	r0, #18
 80084ca:	f7fa fd2e 	bl	8002f2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80084ce:	bf00      	nop
 80084d0:	3710      	adds	r7, #16
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop
 80084d8:	40012000 	.word	0x40012000
 80084dc:	40023800 	.word	0x40023800

080084e0 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b085      	sub	sp, #20
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a0a      	ldr	r2, [pc, #40]	; (8008518 <HAL_DMA2D_MspInit+0x38>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d10b      	bne.n	800850a <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80084f2:	4b0a      	ldr	r3, [pc, #40]	; (800851c <HAL_DMA2D_MspInit+0x3c>)
 80084f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084f6:	4a09      	ldr	r2, [pc, #36]	; (800851c <HAL_DMA2D_MspInit+0x3c>)
 80084f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80084fc:	6313      	str	r3, [r2, #48]	; 0x30
 80084fe:	4b07      	ldr	r3, [pc, #28]	; (800851c <HAL_DMA2D_MspInit+0x3c>)
 8008500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008502:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008506:	60fb      	str	r3, [r7, #12]
 8008508:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800850a:	bf00      	nop
 800850c:	3714      	adds	r7, #20
 800850e:	46bd      	mov	sp, r7
 8008510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008514:	4770      	bx	lr
 8008516:	bf00      	nop
 8008518:	4002b000 	.word	0x4002b000
 800851c:	40023800 	.word	0x40023800

08008520 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b08a      	sub	sp, #40	; 0x28
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008528:	f107 0314 	add.w	r3, r7, #20
 800852c:	2200      	movs	r2, #0
 800852e:	601a      	str	r2, [r3, #0]
 8008530:	605a      	str	r2, [r3, #4]
 8008532:	609a      	str	r2, [r3, #8]
 8008534:	60da      	str	r2, [r3, #12]
 8008536:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a17      	ldr	r2, [pc, #92]	; (800859c <HAL_DSI_MspInit+0x7c>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d127      	bne.n	8008592 <HAL_DSI_MspInit+0x72>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8008542:	4b17      	ldr	r3, [pc, #92]	; (80085a0 <HAL_DSI_MspInit+0x80>)
 8008544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008546:	4a16      	ldr	r2, [pc, #88]	; (80085a0 <HAL_DSI_MspInit+0x80>)
 8008548:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800854c:	6453      	str	r3, [r2, #68]	; 0x44
 800854e:	4b14      	ldr	r3, [pc, #80]	; (80085a0 <HAL_DSI_MspInit+0x80>)
 8008550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008552:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008556:	613b      	str	r3, [r7, #16]
 8008558:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800855a:	4b11      	ldr	r3, [pc, #68]	; (80085a0 <HAL_DSI_MspInit+0x80>)
 800855c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800855e:	4a10      	ldr	r2, [pc, #64]	; (80085a0 <HAL_DSI_MspInit+0x80>)
 8008560:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008564:	6313      	str	r3, [r2, #48]	; 0x30
 8008566:	4b0e      	ldr	r3, [pc, #56]	; (80085a0 <HAL_DSI_MspInit+0x80>)
 8008568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800856a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800856e:	60fb      	str	r3, [r7, #12]
 8008570:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration    
    PJ2     ------> DSIHOST_TE 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8008572:	2304      	movs	r3, #4
 8008574:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008576:	2302      	movs	r3, #2
 8008578:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800857a:	2300      	movs	r3, #0
 800857c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800857e:	2300      	movs	r3, #0
 8008580:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8008582:	230d      	movs	r3, #13
 8008584:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8008586:	f107 0314 	add.w	r3, r7, #20
 800858a:	4619      	mov	r1, r3
 800858c:	4805      	ldr	r0, [pc, #20]	; (80085a4 <HAL_DSI_MspInit+0x84>)
 800858e:	f7fc f9bb 	bl	8004908 <HAL_GPIO_Init>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8008592:	bf00      	nop
 8008594:	3728      	adds	r7, #40	; 0x28
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}
 800859a:	bf00      	nop
 800859c:	40016c00 	.word	0x40016c00
 80085a0:	40023800 	.word	0x40023800
 80085a4:	40022400 	.word	0x40022400

080085a8 <HAL_DSI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspDeInit(DSI_HandleTypeDef* hdsi)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b082      	sub	sp, #8
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  if(hdsi->Instance==DSI)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a08      	ldr	r2, [pc, #32]	; (80085d8 <HAL_DSI_MspDeInit+0x30>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d109      	bne.n	80085ce <HAL_DSI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN DSI_MspDeInit 0 */

  /* USER CODE END DSI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DSI_CLK_DISABLE();
 80085ba:	4b08      	ldr	r3, [pc, #32]	; (80085dc <HAL_DSI_MspDeInit+0x34>)
 80085bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085be:	4a07      	ldr	r2, [pc, #28]	; (80085dc <HAL_DSI_MspDeInit+0x34>)
 80085c0:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80085c4:	6453      	str	r3, [r2, #68]	; 0x44
  
    /**DSIHOST GPIO Configuration    
    PJ2     ------> DSIHOST_TE 
    */
    HAL_GPIO_DeInit(GPIOJ, GPIO_PIN_2);
 80085c6:	2104      	movs	r1, #4
 80085c8:	4805      	ldr	r0, [pc, #20]	; (80085e0 <HAL_DSI_MspDeInit+0x38>)
 80085ca:	f7fc fb47 	bl	8004c5c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN DSI_MspDeInit 1 */

  /* USER CODE END DSI_MspDeInit 1 */
  }

}
 80085ce:	bf00      	nop
 80085d0:	3708      	adds	r7, #8
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}
 80085d6:	bf00      	nop
 80085d8:	40016c00 	.word	0x40016c00
 80085dc:	40023800 	.word	0x40023800
 80085e0:	40022400 	.word	0x40022400

080085e4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b085      	sub	sp, #20
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a0a      	ldr	r2, [pc, #40]	; (800861c <HAL_LTDC_MspInit+0x38>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d10b      	bne.n	800860e <HAL_LTDC_MspInit+0x2a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80085f6:	4b0a      	ldr	r3, [pc, #40]	; (8008620 <HAL_LTDC_MspInit+0x3c>)
 80085f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085fa:	4a09      	ldr	r2, [pc, #36]	; (8008620 <HAL_LTDC_MspInit+0x3c>)
 80085fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008600:	6453      	str	r3, [r2, #68]	; 0x44
 8008602:	4b07      	ldr	r3, [pc, #28]	; (8008620 <HAL_LTDC_MspInit+0x3c>)
 8008604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008606:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800860a:	60fb      	str	r3, [r7, #12]
 800860c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800860e:	bf00      	nop
 8008610:	3714      	adds	r7, #20
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr
 800861a:	bf00      	nop
 800861c:	40016800 	.word	0x40016800
 8008620:	40023800 	.word	0x40023800

08008624 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b084      	sub	sp, #16
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a1a      	ldr	r2, [pc, #104]	; (800869c <HAL_TIM_Base_MspInit+0x78>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d114      	bne.n	8008660 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8008636:	4b1a      	ldr	r3, [pc, #104]	; (80086a0 <HAL_TIM_Base_MspInit+0x7c>)
 8008638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800863a:	4a19      	ldr	r2, [pc, #100]	; (80086a0 <HAL_TIM_Base_MspInit+0x7c>)
 800863c:	f043 0310 	orr.w	r3, r3, #16
 8008640:	6413      	str	r3, [r2, #64]	; 0x40
 8008642:	4b17      	ldr	r3, [pc, #92]	; (80086a0 <HAL_TIM_Base_MspInit+0x7c>)
 8008644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008646:	f003 0310 	and.w	r3, r3, #16
 800864a:	60fb      	str	r3, [r7, #12]
 800864c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800864e:	2200      	movs	r2, #0
 8008650:	2100      	movs	r1, #0
 8008652:	2036      	movs	r0, #54	; 0x36
 8008654:	f7fa fc4d 	bl	8002ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8008658:	2036      	movs	r0, #54	; 0x36
 800865a:	f7fa fc66 	bl	8002f2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800865e:	e018      	b.n	8008692 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a0f      	ldr	r2, [pc, #60]	; (80086a4 <HAL_TIM_Base_MspInit+0x80>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d113      	bne.n	8008692 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800866a:	4b0d      	ldr	r3, [pc, #52]	; (80086a0 <HAL_TIM_Base_MspInit+0x7c>)
 800866c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800866e:	4a0c      	ldr	r2, [pc, #48]	; (80086a0 <HAL_TIM_Base_MspInit+0x7c>)
 8008670:	f043 0320 	orr.w	r3, r3, #32
 8008674:	6413      	str	r3, [r2, #64]	; 0x40
 8008676:	4b0a      	ldr	r3, [pc, #40]	; (80086a0 <HAL_TIM_Base_MspInit+0x7c>)
 8008678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800867a:	f003 0320 	and.w	r3, r3, #32
 800867e:	60bb      	str	r3, [r7, #8]
 8008680:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8008682:	2200      	movs	r2, #0
 8008684:	2100      	movs	r1, #0
 8008686:	2037      	movs	r0, #55	; 0x37
 8008688:	f7fa fc33 	bl	8002ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800868c:	2037      	movs	r0, #55	; 0x37
 800868e:	f7fa fc4c 	bl	8002f2a <HAL_NVIC_EnableIRQ>
}
 8008692:	bf00      	nop
 8008694:	3710      	adds	r7, #16
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}
 800869a:	bf00      	nop
 800869c:	40001000 	.word	0x40001000
 80086a0:	40023800 	.word	0x40023800
 80086a4:	40001400 	.word	0x40001400

080086a8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b086      	sub	sp, #24
 80086ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80086ae:	1d3b      	adds	r3, r7, #4
 80086b0:	2200      	movs	r2, #0
 80086b2:	601a      	str	r2, [r3, #0]
 80086b4:	605a      	str	r2, [r3, #4]
 80086b6:	609a      	str	r2, [r3, #8]
 80086b8:	60da      	str	r2, [r3, #12]
 80086ba:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80086bc:	4b43      	ldr	r3, [pc, #268]	; (80087cc <HAL_FMC_MspInit+0x124>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d17e      	bne.n	80087c2 <HAL_FMC_MspInit+0x11a>
    return;
  }
  FMC_Initialized = 1;
 80086c4:	4b41      	ldr	r3, [pc, #260]	; (80087cc <HAL_FMC_MspInit+0x124>)
 80086c6:	2201      	movs	r2, #1
 80086c8:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80086ca:	4b41      	ldr	r3, [pc, #260]	; (80087d0 <HAL_FMC_MspInit+0x128>)
 80086cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ce:	4a40      	ldr	r2, [pc, #256]	; (80087d0 <HAL_FMC_MspInit+0x128>)
 80086d0:	f043 0301 	orr.w	r3, r3, #1
 80086d4:	6393      	str	r3, [r2, #56]	; 0x38
 80086d6:	4b3e      	ldr	r3, [pc, #248]	; (80087d0 <HAL_FMC_MspInit+0x128>)
 80086d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086da:	f003 0301 	and.w	r3, r3, #1
 80086de:	603b      	str	r3, [r7, #0]
 80086e0:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80086e2:	2360      	movs	r3, #96	; 0x60
 80086e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086e6:	2302      	movs	r3, #2
 80086e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086ea:	2300      	movs	r3, #0
 80086ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80086ee:	2303      	movs	r3, #3
 80086f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80086f2:	230c      	movs	r3, #12
 80086f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80086f6:	1d3b      	adds	r3, r7, #4
 80086f8:	4619      	mov	r1, r3
 80086fa:	4836      	ldr	r0, [pc, #216]	; (80087d4 <HAL_FMC_MspInit+0x12c>)
 80086fc:	f7fc f904 	bl	8004908 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_2 
 8008700:	f248 1337 	movw	r3, #33079	; 0x8137
 8008704:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008706:	2302      	movs	r3, #2
 8008708:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800870a:	2300      	movs	r3, #0
 800870c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800870e:	2303      	movs	r3, #3
 8008710:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008712:	230c      	movs	r3, #12
 8008714:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008716:	1d3b      	adds	r3, r7, #4
 8008718:	4619      	mov	r1, r3
 800871a:	482f      	ldr	r0, [pc, #188]	; (80087d8 <HAL_FMC_MspInit+0x130>)
 800871c:	f7fc f8f4 	bl	8004908 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10 
 8008720:	f24c 7303 	movw	r3, #50947	; 0xc703
 8008724:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008726:	2302      	movs	r3, #2
 8008728:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800872a:	2300      	movs	r3, #0
 800872c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800872e:	2303      	movs	r3, #3
 8008730:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008732:	230c      	movs	r3, #12
 8008734:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008736:	1d3b      	adds	r3, r7, #4
 8008738:	4619      	mov	r1, r3
 800873a:	4828      	ldr	r0, [pc, #160]	; (80087dc <HAL_FMC_MspInit+0x134>)
 800873c:	f7fc f8e4 	bl	8004908 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_7|GPIO_PIN_10 
 8008740:	f240 63cf 	movw	r3, #1743	; 0x6cf
 8008744:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_6|GPIO_PIN_1|GPIO_PIN_9|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008746:	2302      	movs	r3, #2
 8008748:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800874a:	2300      	movs	r3, #0
 800874c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800874e:	2303      	movs	r3, #3
 8008750:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008752:	230c      	movs	r3, #12
 8008754:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8008756:	1d3b      	adds	r3, r7, #4
 8008758:	4619      	mov	r1, r3
 800875a:	4821      	ldr	r0, [pc, #132]	; (80087e0 <HAL_FMC_MspInit+0x138>)
 800875c:	f7fc f8d4 	bl	8004908 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8008760:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8008764:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008766:	2302      	movs	r3, #2
 8008768:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800876a:	2300      	movs	r3, #0
 800876c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800876e:	2303      	movs	r3, #3
 8008770:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008772:	230c      	movs	r3, #12
 8008774:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008776:	1d3b      	adds	r3, r7, #4
 8008778:	4619      	mov	r1, r3
 800877a:	481a      	ldr	r0, [pc, #104]	; (80087e4 <HAL_FMC_MspInit+0x13c>)
 800877c:	f7fc f8c4 	bl	8004908 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_5 
 8008780:	f64f 7320 	movw	r3, #65312	; 0xff20
 8008784:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_8 
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008786:	2302      	movs	r3, #2
 8008788:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800878a:	2300      	movs	r3, #0
 800878c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800878e:	2303      	movs	r3, #3
 8008790:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008792:	230c      	movs	r3, #12
 8008794:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8008796:	1d3b      	adds	r3, r7, #4
 8008798:	4619      	mov	r1, r3
 800879a:	4813      	ldr	r0, [pc, #76]	; (80087e8 <HAL_FMC_MspInit+0x140>)
 800879c:	f7fc f8b4 	bl	8004908 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14 
 80087a0:	f64f 7380 	movw	r3, #65408	; 0xff80
 80087a4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15 
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087a6:	2302      	movs	r3, #2
 80087a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087aa:	2300      	movs	r3, #0
 80087ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80087ae:	2303      	movs	r3, #3
 80087b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80087b2:	230c      	movs	r3, #12
 80087b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80087b6:	1d3b      	adds	r3, r7, #4
 80087b8:	4619      	mov	r1, r3
 80087ba:	480c      	ldr	r0, [pc, #48]	; (80087ec <HAL_FMC_MspInit+0x144>)
 80087bc:	f7fc f8a4 	bl	8004908 <HAL_GPIO_Init>
 80087c0:	e000      	b.n	80087c4 <HAL_FMC_MspInit+0x11c>
    return;
 80087c2:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80087c4:	3718      	adds	r7, #24
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	bf00      	nop
 80087cc:	20000288 	.word	0x20000288
 80087d0:	40023800 	.word	0x40023800
 80087d4:	40020400 	.word	0x40020400
 80087d8:	40021800 	.word	0x40021800
 80087dc:	40020c00 	.word	0x40020c00
 80087e0:	40022000 	.word	0x40022000
 80087e4:	40021400 	.word	0x40021400
 80087e8:	40021c00 	.word	0x40021c00
 80087ec:	40021000 	.word	0x40021000

080087f0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b082      	sub	sp, #8
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80087f8:	f7ff ff56 	bl	80086a8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80087fc:	bf00      	nop
 80087fe:	3708      	adds	r7, #8
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008804:	b480      	push	{r7}
 8008806:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008808:	bf00      	nop
 800880a:	46bd      	mov	sp, r7
 800880c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008810:	4770      	bx	lr

08008812 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008812:	b480      	push	{r7}
 8008814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008816:	e7fe      	b.n	8008816 <HardFault_Handler+0x4>

08008818 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008818:	b480      	push	{r7}
 800881a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800881c:	e7fe      	b.n	800881c <MemManage_Handler+0x4>

0800881e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800881e:	b480      	push	{r7}
 8008820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008822:	e7fe      	b.n	8008822 <BusFault_Handler+0x4>

08008824 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008824:	b480      	push	{r7}
 8008826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008828:	e7fe      	b.n	8008828 <UsageFault_Handler+0x4>

0800882a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800882a:	b480      	push	{r7}
 800882c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800882e:	bf00      	nop
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr

08008838 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008838:	b480      	push	{r7}
 800883a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800883c:	bf00      	nop
 800883e:	46bd      	mov	sp, r7
 8008840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008844:	4770      	bx	lr

08008846 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008846:	b480      	push	{r7}
 8008848:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800884a:	bf00      	nop
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr

08008854 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008858:	f7f9 fd86 	bl	8002368 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800885c:	bf00      	nop
 800885e:	bd80      	pop	{r7, pc}

08008860 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8008864:	2001      	movs	r0, #1
 8008866:	f7fc fb37 	bl	8004ed8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800886a:	bf00      	nop
 800886c:	bd80      	pop	{r7, pc}
	...

08008870 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8008874:	4802      	ldr	r0, [pc, #8]	; (8008880 <ADC_IRQHandler+0x10>)
 8008876:	f7f9 fec7 	bl	8002608 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800887a:	bf00      	nop
 800887c:	bd80      	pop	{r7, pc}
 800887e:	bf00      	nop
 8008880:	200004dc 	.word	0x200004dc

08008884 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8008888:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800888c:	f7fc fb24 	bl	8004ed8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8008890:	bf00      	nop
 8008892:	bd80      	pop	{r7, pc}

08008894 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8008898:	4802      	ldr	r0, [pc, #8]	; (80088a4 <TIM6_DAC_IRQHandler+0x10>)
 800889a:	f7fe fcaf 	bl	80071fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800889e:	bf00      	nop
 80088a0:	bd80      	pop	{r7, pc}
 80088a2:	bf00      	nop
 80088a4:	20000528 	.word	0x20000528

080088a8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80088ac:	4802      	ldr	r0, [pc, #8]	; (80088b8 <TIM7_IRQHandler+0x10>)
 80088ae:	f7fe fca5 	bl	80071fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80088b2:	bf00      	nop
 80088b4:	bd80      	pop	{r7, pc}
 80088b6:	bf00      	nop
 80088b8:	20000604 	.word	0x20000604

080088bc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80088bc:	b480      	push	{r7}
 80088be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80088c0:	4b15      	ldr	r3, [pc, #84]	; (8008918 <SystemInit+0x5c>)
 80088c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088c6:	4a14      	ldr	r2, [pc, #80]	; (8008918 <SystemInit+0x5c>)
 80088c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80088cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80088d0:	4b12      	ldr	r3, [pc, #72]	; (800891c <SystemInit+0x60>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a11      	ldr	r2, [pc, #68]	; (800891c <SystemInit+0x60>)
 80088d6:	f043 0301 	orr.w	r3, r3, #1
 80088da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80088dc:	4b0f      	ldr	r3, [pc, #60]	; (800891c <SystemInit+0x60>)
 80088de:	2200      	movs	r2, #0
 80088e0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80088e2:	4b0e      	ldr	r3, [pc, #56]	; (800891c <SystemInit+0x60>)
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	490d      	ldr	r1, [pc, #52]	; (800891c <SystemInit+0x60>)
 80088e8:	4b0d      	ldr	r3, [pc, #52]	; (8008920 <SystemInit+0x64>)
 80088ea:	4013      	ands	r3, r2
 80088ec:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80088ee:	4b0b      	ldr	r3, [pc, #44]	; (800891c <SystemInit+0x60>)
 80088f0:	4a0c      	ldr	r2, [pc, #48]	; (8008924 <SystemInit+0x68>)
 80088f2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80088f4:	4b09      	ldr	r3, [pc, #36]	; (800891c <SystemInit+0x60>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a08      	ldr	r2, [pc, #32]	; (800891c <SystemInit+0x60>)
 80088fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80088fe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8008900:	4b06      	ldr	r3, [pc, #24]	; (800891c <SystemInit+0x60>)
 8008902:	2200      	movs	r2, #0
 8008904:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008906:	4b04      	ldr	r3, [pc, #16]	; (8008918 <SystemInit+0x5c>)
 8008908:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800890c:	609a      	str	r2, [r3, #8]
#endif
}
 800890e:	bf00      	nop
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr
 8008918:	e000ed00 	.word	0xe000ed00
 800891c:	40023800 	.word	0x40023800
 8008920:	fef6ffff 	.word	0xfef6ffff
 8008924:	24003010 	.word	0x24003010

08008928 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8008928:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008960 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800892c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800892e:	e003      	b.n	8008938 <LoopCopyDataInit>

08008930 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008930:	4b0c      	ldr	r3, [pc, #48]	; (8008964 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008932:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008934:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008936:	3104      	adds	r1, #4

08008938 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008938:	480b      	ldr	r0, [pc, #44]	; (8008968 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800893a:	4b0c      	ldr	r3, [pc, #48]	; (800896c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800893c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800893e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008940:	d3f6      	bcc.n	8008930 <CopyDataInit>
  ldr  r2, =_sbss
 8008942:	4a0b      	ldr	r2, [pc, #44]	; (8008970 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008944:	e002      	b.n	800894c <LoopFillZerobss>

08008946 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008946:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008948:	f842 3b04 	str.w	r3, [r2], #4

0800894c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800894c:	4b09      	ldr	r3, [pc, #36]	; (8008974 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800894e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008950:	d3f9      	bcc.n	8008946 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008952:	f7ff ffb3 	bl	80088bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008956:	f000 f811 	bl	800897c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800895a:	f7ff f8bd 	bl	8007ad8 <main>
  bx  lr    
 800895e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008960:	2007ffff 	.word	0x2007ffff
  ldr  r3, =_sidata
 8008964:	0800a71c 	.word	0x0800a71c
  ldr  r0, =_sdata
 8008968:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800896c:	20000058 	.word	0x20000058
  ldr  r2, =_sbss
 8008970:	20000058 	.word	0x20000058
  ldr  r3, = _ebss
 8008974:	20000644 	.word	0x20000644

08008978 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008978:	e7fe      	b.n	8008978 <CAN1_RX0_IRQHandler>
	...

0800897c <__libc_init_array>:
 800897c:	b570      	push	{r4, r5, r6, lr}
 800897e:	4e0d      	ldr	r6, [pc, #52]	; (80089b4 <__libc_init_array+0x38>)
 8008980:	4c0d      	ldr	r4, [pc, #52]	; (80089b8 <__libc_init_array+0x3c>)
 8008982:	1ba4      	subs	r4, r4, r6
 8008984:	10a4      	asrs	r4, r4, #2
 8008986:	2500      	movs	r5, #0
 8008988:	42a5      	cmp	r5, r4
 800898a:	d109      	bne.n	80089a0 <__libc_init_array+0x24>
 800898c:	4e0b      	ldr	r6, [pc, #44]	; (80089bc <__libc_init_array+0x40>)
 800898e:	4c0c      	ldr	r4, [pc, #48]	; (80089c0 <__libc_init_array+0x44>)
 8008990:	f000 f820 	bl	80089d4 <_init>
 8008994:	1ba4      	subs	r4, r4, r6
 8008996:	10a4      	asrs	r4, r4, #2
 8008998:	2500      	movs	r5, #0
 800899a:	42a5      	cmp	r5, r4
 800899c:	d105      	bne.n	80089aa <__libc_init_array+0x2e>
 800899e:	bd70      	pop	{r4, r5, r6, pc}
 80089a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80089a4:	4798      	blx	r3
 80089a6:	3501      	adds	r5, #1
 80089a8:	e7ee      	b.n	8008988 <__libc_init_array+0xc>
 80089aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80089ae:	4798      	blx	r3
 80089b0:	3501      	adds	r5, #1
 80089b2:	e7f2      	b.n	800899a <__libc_init_array+0x1e>
 80089b4:	0800a714 	.word	0x0800a714
 80089b8:	0800a714 	.word	0x0800a714
 80089bc:	0800a714 	.word	0x0800a714
 80089c0:	0800a718 	.word	0x0800a718

080089c4 <memset>:
 80089c4:	4402      	add	r2, r0
 80089c6:	4603      	mov	r3, r0
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d100      	bne.n	80089ce <memset+0xa>
 80089cc:	4770      	bx	lr
 80089ce:	f803 1b01 	strb.w	r1, [r3], #1
 80089d2:	e7f9      	b.n	80089c8 <memset+0x4>

080089d4 <_init>:
 80089d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089d6:	bf00      	nop
 80089d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089da:	bc08      	pop	{r3}
 80089dc:	469e      	mov	lr, r3
 80089de:	4770      	bx	lr

080089e0 <_fini>:
 80089e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089e2:	bf00      	nop
 80089e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089e6:	bc08      	pop	{r3}
 80089e8:	469e      	mov	lr, r3
 80089ea:	4770      	bx	lr
