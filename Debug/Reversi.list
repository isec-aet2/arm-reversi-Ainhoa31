
Reversi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f27c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0011b3c0  0800f47c  0800f47c  0001f47c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0812a83c  0812a83c  001400b0  2**0
                  CONTENTS
  4 .ARM          00000008  0812a83c  0812a83c  0013a83c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0812a844  0812a844  001400b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0812a844  0812a844  0013a844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0812a848  0812a848  0013a848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  0812a84c  00140000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b54  200000b0  0812a8fc  001400b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c04  0812a8fc  00140c04  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  001400b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b683  00000000  00000000  001400de  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005052  00000000  00000000  0016b761  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000020a8  00000000  00000000  001707b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001e30  00000000  00000000  00172860  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00032e6c  00000000  00000000  00174690  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001d787  00000000  00000000  001a74fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0012ab60  00000000  00000000  001c4c83  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002ef7e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008cd4  00000000  00000000  002ef860  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000b0 	.word	0x200000b0
 800021c:	00000000 	.word	0x00000000
 8000220:	0800f464 	.word	0x0800f464

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000b4 	.word	0x200000b4
 800023c:	0800f464 	.word	0x0800f464

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <ft6x06_Init>:
  *         from MCU to FT6206 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Init(uint16_t DeviceAddr)
{  
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = ft6x06_GetInstance(DeviceAddr);
 80005fa:	88fb      	ldrh	r3, [r7, #6]
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 f90d 	bl	800081c <ft6x06_GetInstance>
 8000602:	4603      	mov	r3, r0
 8000604:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8000606:	7bfb      	ldrb	r3, [r7, #15]
 8000608:	2bff      	cmp	r3, #255	; 0xff
 800060a:	d10e      	bne.n	800062a <ft6x06_Init+0x3a>
  {
    /* Look for empty instance */
    empty = ft6x06_GetInstance(0);
 800060c:	2000      	movs	r0, #0
 800060e:	f000 f905 	bl	800081c <ft6x06_GetInstance>
 8000612:	4603      	mov	r3, r0
 8000614:	73bb      	strb	r3, [r7, #14]
    
    if(empty < FT6x06_MAX_INSTANCE)
 8000616:	7bbb      	ldrb	r3, [r7, #14]
 8000618:	2b01      	cmp	r3, #1
 800061a:	d806      	bhi.n	800062a <ft6x06_Init+0x3a>
    {
      /* Register the current device instance */
      ft6x06[empty] = DeviceAddr;
 800061c:	7bbb      	ldrb	r3, [r7, #14]
 800061e:	88fa      	ldrh	r2, [r7, #6]
 8000620:	b2d1      	uxtb	r1, r2
 8000622:	4a04      	ldr	r2, [pc, #16]	; (8000634 <ft6x06_Init+0x44>)
 8000624:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      TS_IO_Init(); 
 8000626:	f000 fcd5 	bl	8000fd4 <TS_IO_Init>
    }
  }
}
 800062a:	bf00      	nop
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	200000cc 	.word	0x200000cc

08000638 <ft6x06_Reset>:
  *         @note : Not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 8000642:	bf00      	nop
 8000644:	370c      	adds	r7, #12
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr

0800064e <ft6x06_ReadID>:
  *         able to read the FT6206 device ID, and verify this is a FT6206.
  * @param  DeviceAddr: I2C FT6x06 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft6x06_ReadID(uint16_t DeviceAddr)
{
 800064e:	b580      	push	{r7, lr}
 8000650:	b082      	sub	sp, #8
 8000652:	af00      	add	r7, sp, #0
 8000654:	4603      	mov	r3, r0
 8000656:	80fb      	strh	r3, [r7, #6]
  /* Initialize I2C link if needed */
  TS_IO_Init();
 8000658:	f000 fcbc 	bl	8000fd4 <TS_IO_Init>
  
  /* Return the device ID value */
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 800065c:	88fb      	ldrh	r3, [r7, #6]
 800065e:	b2db      	uxtb	r3, r3
 8000660:	21a8      	movs	r1, #168	; 0xa8
 8000662:	4618      	mov	r0, r3
 8000664:	f000 fcda 	bl	800101c <TS_IO_Read>
 8000668:	4603      	mov	r3, r0
 800066a:	b29b      	uxth	r3, r3
}
 800066c:	4618      	mov	r0, r3
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}

08000674 <ft6x06_TS_Start>:
  *         the touch screen).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft6x06_TS_Start(uint16_t DeviceAddr)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	80fb      	strh	r3, [r7, #6]
  /* Hw Calibration sequence start : should be done once after each power up */
  /* This is called internal calibration of the touch screen                 */
  ft6x06_TS_Calibration(DeviceAddr);
#endif
  /* Minimum static configuration of FT6206 */
  ft6x06_TS_Configure(DeviceAddr);
 800067e:	88fb      	ldrh	r3, [r7, #6]
 8000680:	4618      	mov	r0, r3
 8000682:	f000 f8bc 	bl	80007fe <ft6x06_TS_Configure>

  /* By default set FT6206 IC in Polling mode : no INT generation on FT6206 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft6x06_TS_DisableIT(DeviceAddr);
 8000686:	88fb      	ldrh	r3, [r7, #6]
 8000688:	4618      	mov	r0, r3
 800068a:	f000 f88d 	bl	80007a8 <ft6x06_TS_DisableIT>
}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
	...

08000698 <ft6x06_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft6x06_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	73fb      	strb	r3, [r7, #15]

  /* Read register FT6206_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 80006a6:	88fb      	ldrh	r3, [r7, #6]
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	2102      	movs	r1, #2
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 fcb5 	bl	800101c <TS_IO_Read>
 80006b2:	4603      	mov	r3, r0
 80006b4:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT6206_TD_STAT_MASK;
 80006b6:	7bfb      	ldrb	r3, [r7, #15]
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	f003 030f 	and.w	r3, r3, #15
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	2b02      	cmp	r3, #2
 80006c8:	d901      	bls.n	80006ce <ft6x06_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft6x06 driver internal global : current number of active touches */
  ft6x06_handle.currActiveTouchNb = nbTouch;
 80006ce:	7bfb      	ldrb	r3, [r7, #15]
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <ft6x06_TS_DetectTouch+0x50>)
 80006d4:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft6x06_handle.currActiveTouchIdx = 0;
 80006d6:	4b04      	ldr	r3, [pc, #16]	; (80006e8 <ft6x06_TS_DetectTouch+0x50>)
 80006d8:	2200      	movs	r2, #0
 80006da:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	b2db      	uxtb	r3, r3
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3710      	adds	r7, #16
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	200000d0 	.word	0x200000d0

080006ec <ft6x06_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft6x06_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
 80006f8:	81fb      	strh	r3, [r7, #14]
  uint8_t regAddress = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	75fb      	strb	r3, [r7, #23]
  uint8_t  dataxy[4];
  
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 80006fe:	4b1f      	ldr	r3, [pc, #124]	; (800077c <ft6x06_TS_GetXY+0x90>)
 8000700:	789a      	ldrb	r2, [r3, #2]
 8000702:	4b1e      	ldr	r3, [pc, #120]	; (800077c <ft6x06_TS_GetXY+0x90>)
 8000704:	785b      	ldrb	r3, [r3, #1]
 8000706:	429a      	cmp	r2, r3
 8000708:	d234      	bcs.n	8000774 <ft6x06_TS_GetXY+0x88>
  {
    switch(ft6x06_handle.currActiveTouchIdx)
 800070a:	4b1c      	ldr	r3, [pc, #112]	; (800077c <ft6x06_TS_GetXY+0x90>)
 800070c:	789b      	ldrb	r3, [r3, #2]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d002      	beq.n	8000718 <ft6x06_TS_GetXY+0x2c>
 8000712:	2b01      	cmp	r3, #1
 8000714:	d003      	beq.n	800071e <ft6x06_TS_GetXY+0x32>
    case 1 :
      regAddress = FT6206_P2_XH_REG; 
      break;

    default :
      break;
 8000716:	e005      	b.n	8000724 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P1_XH_REG; 
 8000718:	2303      	movs	r3, #3
 800071a:	75fb      	strb	r3, [r7, #23]
      break;
 800071c:	e002      	b.n	8000724 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P2_XH_REG; 
 800071e:	2309      	movs	r3, #9
 8000720:	75fb      	strb	r3, [r7, #23]
      break;
 8000722:	bf00      	nop
    }
    
    /* Read X and Y positions */
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 8000724:	89fb      	ldrh	r3, [r7, #14]
 8000726:	b2d8      	uxtb	r0, r3
 8000728:	f107 0210 	add.w	r2, r7, #16
 800072c:	7df9      	ldrb	r1, [r7, #23]
 800072e:	2304      	movs	r3, #4
 8000730:	f000 fc92 	bl	8001058 <TS_IO_ReadMultiple>

    /* Send back ready X position to caller */
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 8000734:	7c3b      	ldrb	r3, [r7, #16]
 8000736:	021b      	lsls	r3, r3, #8
 8000738:	b21b      	sxth	r3, r3
 800073a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800073e:	b21a      	sxth	r2, r3
 8000740:	7c7b      	ldrb	r3, [r7, #17]
 8000742:	b21b      	sxth	r3, r3
 8000744:	4313      	orrs	r3, r2
 8000746:	b21b      	sxth	r3, r3
 8000748:	b29a      	uxth	r2, r3
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	801a      	strh	r2, [r3, #0]
    
    /* Send back ready Y position to caller */
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 800074e:	7cbb      	ldrb	r3, [r7, #18]
 8000750:	021b      	lsls	r3, r3, #8
 8000752:	b21b      	sxth	r3, r3
 8000754:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000758:	b21a      	sxth	r2, r3
 800075a:	7cfb      	ldrb	r3, [r7, #19]
 800075c:	b21b      	sxth	r3, r3
 800075e:	4313      	orrs	r3, r2
 8000760:	b21b      	sxth	r3, r3
 8000762:	b29a      	uxth	r2, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	801a      	strh	r2, [r3, #0]
    
    ft6x06_handle.currActiveTouchIdx++;
 8000768:	4b04      	ldr	r3, [pc, #16]	; (800077c <ft6x06_TS_GetXY+0x90>)
 800076a:	789b      	ldrb	r3, [r3, #2]
 800076c:	3301      	adds	r3, #1
 800076e:	b2da      	uxtb	r2, r3
 8000770:	4b02      	ldr	r3, [pc, #8]	; (800077c <ft6x06_TS_GetXY+0x90>)
 8000772:	709a      	strb	r2, [r3, #2]
  }
}
 8000774:	bf00      	nop
 8000776:	3718      	adds	r7, #24
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	200000d0 	.word	0x200000d0

08000780 <ft6x06_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_EnableIT(uint16_t DeviceAddr)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 800078a:	2300      	movs	r3, #0
 800078c:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_TRIGGER & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 800078e:	2301      	movs	r3, #1
 8000790:	73fb      	strb	r3, [r7, #15]
  
  /* Set interrupt trigger mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8000792:	88fb      	ldrh	r3, [r7, #6]
 8000794:	b2db      	uxtb	r3, r3
 8000796:	7bfa      	ldrb	r2, [r7, #15]
 8000798:	21a4      	movs	r1, #164	; 0xa4
 800079a:	4618      	mov	r0, r3
 800079c:	f000 fc24 	bl	8000fe8 <TS_IO_Write>
}
 80007a0:	bf00      	nop
 80007a2:	3710      	adds	r7, #16
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <ft6x06_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_DisableIT(uint16_t DeviceAddr)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_POLLING & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 80007b6:	2300      	movs	r3, #0
 80007b8:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 80007ba:	88fb      	ldrh	r3, [r7, #6]
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	7bfa      	ldrb	r2, [r7, #15]
 80007c0:	21a4      	movs	r1, #164	; 0xa4
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 fc10 	bl	8000fe8 <TS_IO_Write>
}
 80007c8:	bf00      	nop
 80007ca:	3710      	adds	r7, #16
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <ft6x06_TS_ITStatus>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
 80007da:	2300      	movs	r3, #0
}
 80007dc:	4618      	mov	r0, r3
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <ft6x06_TS_ClearIT>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_TS_ClearIT(uint16_t DeviceAddr)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT6206 */
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr

080007fe <ft6x06_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT6206 Device address for communication on I2C Bus.
  * @retval Status FT6206_STATUS_OK or FT6206_STATUS_NOT_OK.
  */
static uint32_t ft6x06_TS_Configure(uint16_t DeviceAddr)
{
 80007fe:	b480      	push	{r7}
 8000800:	b085      	sub	sp, #20
 8000802:	af00      	add	r7, sp, #0
 8000804:	4603      	mov	r3, r0
 8000806:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT6206_STATUS_OK;
 8000808:	2300      	movs	r3, #0
 800080a:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT6206 */

  return(status);
 800080c:	68fb      	ldr	r3, [r7, #12]
}
 800080e:	4618      	mov	r0, r3
 8000810:	3714      	adds	r7, #20
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
	...

0800081c <ft6x06_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t ft6x06_GetInstance(uint16_t DeviceAddr)
{
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8000826:	2300      	movs	r3, #0
 8000828:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 800082a:	2300      	movs	r3, #0
 800082c:	73fb      	strb	r3, [r7, #15]
 800082e:	e00b      	b.n	8000848 <ft6x06_GetInstance+0x2c>
  {
    if(ft6x06[idx] == DeviceAddr)
 8000830:	7bfb      	ldrb	r3, [r7, #15]
 8000832:	4a0a      	ldr	r2, [pc, #40]	; (800085c <ft6x06_GetInstance+0x40>)
 8000834:	5cd3      	ldrb	r3, [r2, r3]
 8000836:	b29b      	uxth	r3, r3
 8000838:	88fa      	ldrh	r2, [r7, #6]
 800083a:	429a      	cmp	r2, r3
 800083c:	d101      	bne.n	8000842 <ft6x06_GetInstance+0x26>
    {
      return idx; 
 800083e:	7bfb      	ldrb	r3, [r7, #15]
 8000840:	e006      	b.n	8000850 <ft6x06_GetInstance+0x34>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 8000842:	7bfb      	ldrb	r3, [r7, #15]
 8000844:	3301      	adds	r3, #1
 8000846:	73fb      	strb	r3, [r7, #15]
 8000848:	7bfb      	ldrb	r3, [r7, #15]
 800084a:	2b01      	cmp	r3, #1
 800084c:	d9f0      	bls.n	8000830 <ft6x06_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 800084e:	23ff      	movs	r3, #255	; 0xff
}
 8000850:	4618      	mov	r0, r3
 8000852:	3714      	adds	r7, #20
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr
 800085c:	200000cc 	.word	0x200000cc

08000860 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800086a:	49be      	ldr	r1, [pc, #760]	; (8000b64 <OTM8009A_Init+0x304>)
 800086c:	2000      	movs	r0, #0
 800086e:	f001 fa83 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 8000872:	49bd      	ldr	r1, [pc, #756]	; (8000b68 <OTM8009A_Init+0x308>)
 8000874:	2003      	movs	r0, #3
 8000876:	f001 fa7f 	bl	8001d78 <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 800087a:	49bc      	ldr	r1, [pc, #752]	; (8000b6c <OTM8009A_Init+0x30c>)
 800087c:	2000      	movs	r0, #0
 800087e:	f001 fa7b 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8000882:	49bb      	ldr	r1, [pc, #748]	; (8000b70 <OTM8009A_Init+0x310>)
 8000884:	2002      	movs	r0, #2
 8000886:	f001 fa77 	bl	8001d78 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800088a:	49b8      	ldr	r1, [pc, #736]	; (8000b6c <OTM8009A_Init+0x30c>)
 800088c:	2000      	movs	r0, #0
 800088e:	f001 fa73 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 8000892:	49b8      	ldr	r1, [pc, #736]	; (8000b74 <OTM8009A_Init+0x314>)
 8000894:	2000      	movs	r0, #0
 8000896:	f001 fa6f 	bl	8001d78 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 800089a:	200a      	movs	r0, #10
 800089c:	f000 fbfa 	bl	8001094 <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 80008a0:	49b5      	ldr	r1, [pc, #724]	; (8000b78 <OTM8009A_Init+0x318>)
 80008a2:	2000      	movs	r0, #0
 80008a4:	f001 fa68 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 80008a8:	49b4      	ldr	r1, [pc, #720]	; (8000b7c <OTM8009A_Init+0x31c>)
 80008aa:	2000      	movs	r0, #0
 80008ac:	f001 fa64 	bl	8001d78 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 80008b0:	200a      	movs	r0, #10
 80008b2:	f000 fbef 	bl	8001094 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 80008b6:	49b2      	ldr	r1, [pc, #712]	; (8000b80 <OTM8009A_Init+0x320>)
 80008b8:	2000      	movs	r0, #0
 80008ba:	f001 fa5d 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 80008be:	49b1      	ldr	r1, [pc, #708]	; (8000b84 <OTM8009A_Init+0x324>)
 80008c0:	2000      	movs	r0, #0
 80008c2:	f001 fa59 	bl	8001d78 <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 80008c6:	49b0      	ldr	r1, [pc, #704]	; (8000b88 <OTM8009A_Init+0x328>)
 80008c8:	2000      	movs	r0, #0
 80008ca:	f001 fa55 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 80008ce:	49af      	ldr	r1, [pc, #700]	; (8000b8c <OTM8009A_Init+0x32c>)
 80008d0:	2000      	movs	r0, #0
 80008d2:	f001 fa51 	bl	8001d78 <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 80008d6:	49ae      	ldr	r1, [pc, #696]	; (8000b90 <OTM8009A_Init+0x330>)
 80008d8:	2000      	movs	r0, #0
 80008da:	f001 fa4d 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 80008de:	49ad      	ldr	r1, [pc, #692]	; (8000b94 <OTM8009A_Init+0x334>)
 80008e0:	2000      	movs	r0, #0
 80008e2:	f001 fa49 	bl	8001d78 <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80008e6:	499f      	ldr	r1, [pc, #636]	; (8000b64 <OTM8009A_Init+0x304>)
 80008e8:	2000      	movs	r0, #0
 80008ea:	f001 fa45 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 80008ee:	49aa      	ldr	r1, [pc, #680]	; (8000b98 <OTM8009A_Init+0x338>)
 80008f0:	2000      	movs	r0, #0
 80008f2:	f001 fa41 	bl	8001d78 <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80008f6:	49a9      	ldr	r1, [pc, #676]	; (8000b9c <OTM8009A_Init+0x33c>)
 80008f8:	2000      	movs	r0, #0
 80008fa:	f001 fa3d 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 80008fe:	49a8      	ldr	r1, [pc, #672]	; (8000ba0 <OTM8009A_Init+0x340>)
 8000900:	2000      	movs	r0, #0
 8000902:	f001 fa39 	bl	8001d78 <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8000906:	49a7      	ldr	r1, [pc, #668]	; (8000ba4 <OTM8009A_Init+0x344>)
 8000908:	2000      	movs	r0, #0
 800090a:	f001 fa35 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 800090e:	49a6      	ldr	r1, [pc, #664]	; (8000ba8 <OTM8009A_Init+0x348>)
 8000910:	2000      	movs	r0, #0
 8000912:	f001 fa31 	bl	8001d78 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 8000916:	49a5      	ldr	r1, [pc, #660]	; (8000bac <OTM8009A_Init+0x34c>)
 8000918:	2000      	movs	r0, #0
 800091a:	f001 fa2d 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 800091e:	49a4      	ldr	r1, [pc, #656]	; (8000bb0 <OTM8009A_Init+0x350>)
 8000920:	2000      	movs	r0, #0
 8000922:	f001 fa29 	bl	8001d78 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 8000926:	49a3      	ldr	r1, [pc, #652]	; (8000bb4 <OTM8009A_Init+0x354>)
 8000928:	2000      	movs	r0, #0
 800092a:	f001 fa25 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 800092e:	4997      	ldr	r1, [pc, #604]	; (8000b8c <OTM8009A_Init+0x32c>)
 8000930:	2000      	movs	r0, #0
 8000932:	f001 fa21 	bl	8001d78 <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000936:	498b      	ldr	r1, [pc, #556]	; (8000b64 <OTM8009A_Init+0x304>)
 8000938:	2000      	movs	r0, #0
 800093a:	f001 fa1d 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 800093e:	499e      	ldr	r1, [pc, #632]	; (8000bb8 <OTM8009A_Init+0x358>)
 8000940:	2002      	movs	r0, #2
 8000942:	f001 fa19 	bl	8001d78 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 8000946:	499d      	ldr	r1, [pc, #628]	; (8000bbc <OTM8009A_Init+0x35c>)
 8000948:	2000      	movs	r0, #0
 800094a:	f001 fa15 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 800094e:	499c      	ldr	r1, [pc, #624]	; (8000bc0 <OTM8009A_Init+0x360>)
 8000950:	2000      	movs	r0, #0
 8000952:	f001 fa11 	bl	8001d78 <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 8000956:	499b      	ldr	r1, [pc, #620]	; (8000bc4 <OTM8009A_Init+0x364>)
 8000958:	2000      	movs	r0, #0
 800095a:	f001 fa0d 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 800095e:	499a      	ldr	r1, [pc, #616]	; (8000bc8 <OTM8009A_Init+0x368>)
 8000960:	2000      	movs	r0, #0
 8000962:	f001 fa09 	bl	8001d78 <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 8000966:	4999      	ldr	r1, [pc, #612]	; (8000bcc <OTM8009A_Init+0x36c>)
 8000968:	2000      	movs	r0, #0
 800096a:	f001 fa05 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 800096e:	4998      	ldr	r1, [pc, #608]	; (8000bd0 <OTM8009A_Init+0x370>)
 8000970:	2000      	movs	r0, #0
 8000972:	f001 fa01 	bl	8001d78 <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8000976:	4989      	ldr	r1, [pc, #548]	; (8000b9c <OTM8009A_Init+0x33c>)
 8000978:	2000      	movs	r0, #0
 800097a:	f001 f9fd 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 800097e:	4995      	ldr	r1, [pc, #596]	; (8000bd4 <OTM8009A_Init+0x374>)
 8000980:	2000      	movs	r0, #0
 8000982:	f001 f9f9 	bl	8001d78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8000986:	4987      	ldr	r1, [pc, #540]	; (8000ba4 <OTM8009A_Init+0x344>)
 8000988:	2000      	movs	r0, #0
 800098a:	f001 f9f5 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 800098e:	4992      	ldr	r1, [pc, #584]	; (8000bd8 <OTM8009A_Init+0x378>)
 8000990:	2000      	movs	r0, #0
 8000992:	f001 f9f1 	bl	8001d78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 8000996:	4991      	ldr	r1, [pc, #580]	; (8000bdc <OTM8009A_Init+0x37c>)
 8000998:	2000      	movs	r0, #0
 800099a:	f001 f9ed 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 800099e:	4990      	ldr	r1, [pc, #576]	; (8000be0 <OTM8009A_Init+0x380>)
 80009a0:	2002      	movs	r0, #2
 80009a2:	f001 f9e9 	bl	8001d78 <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80009a6:	4971      	ldr	r1, [pc, #452]	; (8000b6c <OTM8009A_Init+0x30c>)
 80009a8:	2000      	movs	r0, #0
 80009aa:	f001 f9e5 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 80009ae:	498d      	ldr	r1, [pc, #564]	; (8000be4 <OTM8009A_Init+0x384>)
 80009b0:	2006      	movs	r0, #6
 80009b2:	f001 f9e1 	bl	8001d78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80009b6:	498c      	ldr	r1, [pc, #560]	; (8000be8 <OTM8009A_Init+0x388>)
 80009b8:	2000      	movs	r0, #0
 80009ba:	f001 f9dd 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 80009be:	498b      	ldr	r1, [pc, #556]	; (8000bec <OTM8009A_Init+0x38c>)
 80009c0:	200e      	movs	r0, #14
 80009c2:	f001 f9d9 	bl	8001d78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80009c6:	498a      	ldr	r1, [pc, #552]	; (8000bf0 <OTM8009A_Init+0x390>)
 80009c8:	2000      	movs	r0, #0
 80009ca:	f001 f9d5 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 80009ce:	4989      	ldr	r1, [pc, #548]	; (8000bf4 <OTM8009A_Init+0x394>)
 80009d0:	200e      	movs	r0, #14
 80009d2:	f001 f9d1 	bl	8001d78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80009d6:	4988      	ldr	r1, [pc, #544]	; (8000bf8 <OTM8009A_Init+0x398>)
 80009d8:	2000      	movs	r0, #0
 80009da:	f001 f9cd 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 80009de:	4987      	ldr	r1, [pc, #540]	; (8000bfc <OTM8009A_Init+0x39c>)
 80009e0:	200a      	movs	r0, #10
 80009e2:	f001 f9c9 	bl	8001d78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80009e6:	4986      	ldr	r1, [pc, #536]	; (8000c00 <OTM8009A_Init+0x3a0>)
 80009e8:	2000      	movs	r0, #0
 80009ea:	f001 f9c5 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 80009ee:	4985      	ldr	r1, [pc, #532]	; (8000c04 <OTM8009A_Init+0x3a4>)
 80009f0:	2000      	movs	r0, #0
 80009f2:	f001 f9c1 	bl	8001d78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80009f6:	495d      	ldr	r1, [pc, #372]	; (8000b6c <OTM8009A_Init+0x30c>)
 80009f8:	2000      	movs	r0, #0
 80009fa:	f001 f9bd 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 80009fe:	4982      	ldr	r1, [pc, #520]	; (8000c08 <OTM8009A_Init+0x3a8>)
 8000a00:	200a      	movs	r0, #10
 8000a02:	f001 f9b9 	bl	8001d78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8000a06:	4981      	ldr	r1, [pc, #516]	; (8000c0c <OTM8009A_Init+0x3ac>)
 8000a08:	2000      	movs	r0, #0
 8000a0a:	f001 f9b5 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 8000a0e:	4980      	ldr	r1, [pc, #512]	; (8000c10 <OTM8009A_Init+0x3b0>)
 8000a10:	200f      	movs	r0, #15
 8000a12:	f001 f9b1 	bl	8001d78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8000a16:	4974      	ldr	r1, [pc, #464]	; (8000be8 <OTM8009A_Init+0x388>)
 8000a18:	2000      	movs	r0, #0
 8000a1a:	f001 f9ad 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 8000a1e:	497d      	ldr	r1, [pc, #500]	; (8000c14 <OTM8009A_Init+0x3b4>)
 8000a20:	200f      	movs	r0, #15
 8000a22:	f001 f9a9 	bl	8001d78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8000a26:	4972      	ldr	r1, [pc, #456]	; (8000bf0 <OTM8009A_Init+0x390>)
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f001 f9a5 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 8000a2e:	497a      	ldr	r1, [pc, #488]	; (8000c18 <OTM8009A_Init+0x3b8>)
 8000a30:	200a      	movs	r0, #10
 8000a32:	f001 f9a1 	bl	8001d78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8000a36:	4970      	ldr	r1, [pc, #448]	; (8000bf8 <OTM8009A_Init+0x398>)
 8000a38:	2000      	movs	r0, #0
 8000a3a:	f001 f99d 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 8000a3e:	4977      	ldr	r1, [pc, #476]	; (8000c1c <OTM8009A_Init+0x3bc>)
 8000a40:	200f      	movs	r0, #15
 8000a42:	f001 f999 	bl	8001d78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8000a46:	496e      	ldr	r1, [pc, #440]	; (8000c00 <OTM8009A_Init+0x3a0>)
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f001 f995 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 8000a4e:	4974      	ldr	r1, [pc, #464]	; (8000c20 <OTM8009A_Init+0x3c0>)
 8000a50:	200f      	movs	r0, #15
 8000a52:	f001 f991 	bl	8001d78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 8000a56:	4973      	ldr	r1, [pc, #460]	; (8000c24 <OTM8009A_Init+0x3c4>)
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f001 f98d 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 8000a5e:	4972      	ldr	r1, [pc, #456]	; (8000c28 <OTM8009A_Init+0x3c8>)
 8000a60:	200a      	movs	r0, #10
 8000a62:	f001 f989 	bl	8001d78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 8000a66:	4971      	ldr	r1, [pc, #452]	; (8000c2c <OTM8009A_Init+0x3cc>)
 8000a68:	2000      	movs	r0, #0
 8000a6a:	f001 f985 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 8000a6e:	4970      	ldr	r1, [pc, #448]	; (8000c30 <OTM8009A_Init+0x3d0>)
 8000a70:	200a      	movs	r0, #10
 8000a72:	f001 f981 	bl	8001d78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8000a76:	493d      	ldr	r1, [pc, #244]	; (8000b6c <OTM8009A_Init+0x30c>)
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f001 f97d 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 8000a7e:	496d      	ldr	r1, [pc, #436]	; (8000c34 <OTM8009A_Init+0x3d4>)
 8000a80:	200a      	movs	r0, #10
 8000a82:	f001 f979 	bl	8001d78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8000a86:	4961      	ldr	r1, [pc, #388]	; (8000c0c <OTM8009A_Init+0x3ac>)
 8000a88:	2000      	movs	r0, #0
 8000a8a:	f001 f975 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 8000a8e:	496a      	ldr	r1, [pc, #424]	; (8000c38 <OTM8009A_Init+0x3d8>)
 8000a90:	200f      	movs	r0, #15
 8000a92:	f001 f971 	bl	8001d78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8000a96:	4954      	ldr	r1, [pc, #336]	; (8000be8 <OTM8009A_Init+0x388>)
 8000a98:	2000      	movs	r0, #0
 8000a9a:	f001 f96d 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 8000a9e:	4967      	ldr	r1, [pc, #412]	; (8000c3c <OTM8009A_Init+0x3dc>)
 8000aa0:	200f      	movs	r0, #15
 8000aa2:	f001 f969 	bl	8001d78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8000aa6:	4952      	ldr	r1, [pc, #328]	; (8000bf0 <OTM8009A_Init+0x390>)
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	f001 f965 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 8000aae:	4964      	ldr	r1, [pc, #400]	; (8000c40 <OTM8009A_Init+0x3e0>)
 8000ab0:	200a      	movs	r0, #10
 8000ab2:	f001 f961 	bl	8001d78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8000ab6:	4950      	ldr	r1, [pc, #320]	; (8000bf8 <OTM8009A_Init+0x398>)
 8000ab8:	2000      	movs	r0, #0
 8000aba:	f001 f95d 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 8000abe:	4961      	ldr	r1, [pc, #388]	; (8000c44 <OTM8009A_Init+0x3e4>)
 8000ac0:	200f      	movs	r0, #15
 8000ac2:	f001 f959 	bl	8001d78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8000ac6:	494e      	ldr	r1, [pc, #312]	; (8000c00 <OTM8009A_Init+0x3a0>)
 8000ac8:	2000      	movs	r0, #0
 8000aca:	f001 f955 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 8000ace:	495e      	ldr	r1, [pc, #376]	; (8000c48 <OTM8009A_Init+0x3e8>)
 8000ad0:	200f      	movs	r0, #15
 8000ad2:	f001 f951 	bl	8001d78 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8000ad6:	4931      	ldr	r1, [pc, #196]	; (8000b9c <OTM8009A_Init+0x33c>)
 8000ad8:	2000      	movs	r0, #0
 8000ada:	f001 f94d 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 8000ade:	495b      	ldr	r1, [pc, #364]	; (8000c4c <OTM8009A_Init+0x3ec>)
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f001 f949 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 8000ae6:	495a      	ldr	r1, [pc, #360]	; (8000c50 <OTM8009A_Init+0x3f0>)
 8000ae8:	2000      	movs	r0, #0
 8000aea:	f001 f945 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 8000aee:	4959      	ldr	r1, [pc, #356]	; (8000c54 <OTM8009A_Init+0x3f4>)
 8000af0:	2000      	movs	r0, #0
 8000af2:	f001 f941 	bl	8001d78 <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 8000af6:	4958      	ldr	r1, [pc, #352]	; (8000c58 <OTM8009A_Init+0x3f8>)
 8000af8:	2000      	movs	r0, #0
 8000afa:	f001 f93d 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 8000afe:	4957      	ldr	r1, [pc, #348]	; (8000c5c <OTM8009A_Init+0x3fc>)
 8000b00:	2000      	movs	r0, #0
 8000b02:	f001 f939 	bl	8001d78 <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000b06:	4917      	ldr	r1, [pc, #92]	; (8000b64 <OTM8009A_Init+0x304>)
 8000b08:	2000      	movs	r0, #0
 8000b0a:	f001 f935 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 8000b0e:	4954      	ldr	r1, [pc, #336]	; (8000c60 <OTM8009A_Init+0x400>)
 8000b10:	2003      	movs	r0, #3
 8000b12:	f001 f931 	bl	8001d78 <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000b16:	4913      	ldr	r1, [pc, #76]	; (8000b64 <OTM8009A_Init+0x304>)
 8000b18:	2000      	movs	r0, #0
 8000b1a:	f001 f92d 	bl	8001d78 <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000b1e:	4911      	ldr	r1, [pc, #68]	; (8000b64 <OTM8009A_Init+0x304>)
 8000b20:	2000      	movs	r0, #0
 8000b22:	f001 f929 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 8000b26:	494f      	ldr	r1, [pc, #316]	; (8000c64 <OTM8009A_Init+0x404>)
 8000b28:	2010      	movs	r0, #16
 8000b2a:	f001 f925 	bl	8001d78 <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000b2e:	490d      	ldr	r1, [pc, #52]	; (8000b64 <OTM8009A_Init+0x304>)
 8000b30:	2000      	movs	r0, #0
 8000b32:	f001 f921 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 8000b36:	494c      	ldr	r1, [pc, #304]	; (8000c68 <OTM8009A_Init+0x408>)
 8000b38:	2010      	movs	r0, #16
 8000b3a:	f001 f91d 	bl	8001d78 <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 8000b3e:	494b      	ldr	r1, [pc, #300]	; (8000c6c <OTM8009A_Init+0x40c>)
 8000b40:	2000      	movs	r0, #0
 8000b42:	f001 f919 	bl	8001d78 <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 8000b46:	2078      	movs	r0, #120	; 0x78
 8000b48:	f000 faa4 	bl	8001094 <OTM8009A_IO_Delay>

  switch(ColorCoding)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	f000 8090 	beq.w	8000c74 <OTM8009A_Init+0x414>
 8000b54:	2b02      	cmp	r3, #2
 8000b56:	d000      	beq.n	8000b5a <OTM8009A_Init+0x2fa>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
    break;
  default :
    break;
 8000b58:	e091      	b.n	8000c7e <OTM8009A_Init+0x41e>
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 8000b5a:	4945      	ldr	r1, [pc, #276]	; (8000c70 <OTM8009A_Init+0x410>)
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	f001 f90b 	bl	8001d78 <DSI_IO_WriteCmd>
    break;
 8000b62:	e08c      	b.n	8000c7e <OTM8009A_Init+0x41e>
 8000b64:	0800f7a0 	.word	0x0800f7a0
 8000b68:	0800f658 	.word	0x0800f658
 8000b6c:	0800f7a4 	.word	0x0800f7a4
 8000b70:	0800f65c 	.word	0x0800f65c
 8000b74:	0800f7a8 	.word	0x0800f7a8
 8000b78:	0800f7ac 	.word	0x0800f7ac
 8000b7c:	0800f7b0 	.word	0x0800f7b0
 8000b80:	0800f7b4 	.word	0x0800f7b4
 8000b84:	0800f7b8 	.word	0x0800f7b8
 8000b88:	0800f7bc 	.word	0x0800f7bc
 8000b8c:	0800f7c0 	.word	0x0800f7c0
 8000b90:	0800f7c4 	.word	0x0800f7c4
 8000b94:	0800f7c8 	.word	0x0800f7c8
 8000b98:	0800f7cc 	.word	0x0800f7cc
 8000b9c:	0800f7d0 	.word	0x0800f7d0
 8000ba0:	0800f7d4 	.word	0x0800f7d4
 8000ba4:	0800f7d8 	.word	0x0800f7d8
 8000ba8:	0800f7dc 	.word	0x0800f7dc
 8000bac:	0800f7e0 	.word	0x0800f7e0
 8000bb0:	0800f7e4 	.word	0x0800f7e4
 8000bb4:	0800f7e8 	.word	0x0800f7e8
 8000bb8:	0800f688 	.word	0x0800f688
 8000bbc:	0800f7ec 	.word	0x0800f7ec
 8000bc0:	0800f7f0 	.word	0x0800f7f0
 8000bc4:	0800f7f4 	.word	0x0800f7f4
 8000bc8:	0800f7f8 	.word	0x0800f7f8
 8000bcc:	0800f7fc 	.word	0x0800f7fc
 8000bd0:	0800f800 	.word	0x0800f800
 8000bd4:	0800f804 	.word	0x0800f804
 8000bd8:	0800f808 	.word	0x0800f808
 8000bdc:	0800f80c 	.word	0x0800f80c
 8000be0:	0800f68c 	.word	0x0800f68c
 8000be4:	0800f690 	.word	0x0800f690
 8000be8:	0800f810 	.word	0x0800f810
 8000bec:	0800f698 	.word	0x0800f698
 8000bf0:	0800f814 	.word	0x0800f814
 8000bf4:	0800f6a8 	.word	0x0800f6a8
 8000bf8:	0800f818 	.word	0x0800f818
 8000bfc:	0800f6b8 	.word	0x0800f6b8
 8000c00:	0800f81c 	.word	0x0800f81c
 8000c04:	0800f854 	.word	0x0800f854
 8000c08:	0800f6c4 	.word	0x0800f6c4
 8000c0c:	0800f820 	.word	0x0800f820
 8000c10:	0800f6d0 	.word	0x0800f6d0
 8000c14:	0800f6e0 	.word	0x0800f6e0
 8000c18:	0800f6f0 	.word	0x0800f6f0
 8000c1c:	0800f6fc 	.word	0x0800f6fc
 8000c20:	0800f70c 	.word	0x0800f70c
 8000c24:	0800f824 	.word	0x0800f824
 8000c28:	0800f71c 	.word	0x0800f71c
 8000c2c:	0800f828 	.word	0x0800f828
 8000c30:	0800f728 	.word	0x0800f728
 8000c34:	0800f734 	.word	0x0800f734
 8000c38:	0800f740 	.word	0x0800f740
 8000c3c:	0800f750 	.word	0x0800f750
 8000c40:	0800f760 	.word	0x0800f760
 8000c44:	0800f76c 	.word	0x0800f76c
 8000c48:	0800f77c 	.word	0x0800f77c
 8000c4c:	0800f858 	.word	0x0800f858
 8000c50:	0800f85c 	.word	0x0800f85c
 8000c54:	0800f860 	.word	0x0800f860
 8000c58:	0800f864 	.word	0x0800f864
 8000c5c:	0800f868 	.word	0x0800f868
 8000c60:	0800f78c 	.word	0x0800f78c
 8000c64:	0800f660 	.word	0x0800f660
 8000c68:	0800f674 	.word	0x0800f674
 8000c6c:	0800f82c 	.word	0x0800f82c
 8000c70:	0800f830 	.word	0x0800f830
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8000c74:	491a      	ldr	r1, [pc, #104]	; (8000ce0 <OTM8009A_Init+0x480>)
 8000c76:	2000      	movs	r0, #0
 8000c78:	f001 f87e 	bl	8001d78 <DSI_IO_WriteCmd>
    break;
 8000c7c:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d10b      	bne.n	8000c9c <OTM8009A_Init+0x43c>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8000c84:	4917      	ldr	r1, [pc, #92]	; (8000ce4 <OTM8009A_Init+0x484>)
 8000c86:	2000      	movs	r0, #0
 8000c88:	f001 f876 	bl	8001d78 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 8000c8c:	4916      	ldr	r1, [pc, #88]	; (8000ce8 <OTM8009A_Init+0x488>)
 8000c8e:	2004      	movs	r0, #4
 8000c90:	f001 f872 	bl	8001d78 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8000c94:	4915      	ldr	r1, [pc, #84]	; (8000cec <OTM8009A_Init+0x48c>)
 8000c96:	2004      	movs	r0, #4
 8000c98:	f001 f86e 	bl	8001d78 <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 8000c9c:	4914      	ldr	r1, [pc, #80]	; (8000cf0 <OTM8009A_Init+0x490>)
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f001 f86a 	bl	8001d78 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8000ca4:	4913      	ldr	r1, [pc, #76]	; (8000cf4 <OTM8009A_Init+0x494>)
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f001 f866 	bl	8001d78 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 8000cac:	4912      	ldr	r1, [pc, #72]	; (8000cf8 <OTM8009A_Init+0x498>)
 8000cae:	2000      	movs	r0, #0
 8000cb0:	f001 f862 	bl	8001d78 <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8000cb4:	4911      	ldr	r1, [pc, #68]	; (8000cfc <OTM8009A_Init+0x49c>)
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	f001 f85e 	bl	8001d78 <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 8000cbc:	4910      	ldr	r1, [pc, #64]	; (8000d00 <OTM8009A_Init+0x4a0>)
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	f001 f85a 	bl	8001d78 <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000cc4:	490f      	ldr	r1, [pc, #60]	; (8000d04 <OTM8009A_Init+0x4a4>)
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f001 f856 	bl	8001d78 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 8000ccc:	490e      	ldr	r1, [pc, #56]	; (8000d08 <OTM8009A_Init+0x4a8>)
 8000cce:	2000      	movs	r0, #0
 8000cd0:	f001 f852 	bl	8001d78 <DSI_IO_WriteCmd>

  return 0;
 8000cd4:	2300      	movs	r3, #0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	0800f834 	.word	0x0800f834
 8000ce4:	0800f838 	.word	0x0800f838
 8000ce8:	0800f790 	.word	0x0800f790
 8000cec:	0800f798 	.word	0x0800f798
 8000cf0:	0800f83c 	.word	0x0800f83c
 8000cf4:	0800f840 	.word	0x0800f840
 8000cf8:	0800f844 	.word	0x0800f844
 8000cfc:	0800f848 	.word	0x0800f848
 8000d00:	0800f84c 	.word	0x0800f84c
 8000d04:	0800f7a0 	.word	0x0800f7a0
 8000d08:	0800f850 	.word	0x0800f850

08000d0c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08c      	sub	sp, #48	; 0x30
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4a58      	ldr	r2, [pc, #352]	; (8000e78 <I2Cx_MspInit+0x16c>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d15b      	bne.n	8000dd4 <I2Cx_MspInit+0xc8>
  {
  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_AUDIO_I2Cx_SCL_GPIO_CLK_ENABLE();
 8000d1c:	4b57      	ldr	r3, [pc, #348]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d20:	4a56      	ldr	r2, [pc, #344]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000d22:	f043 0308 	orr.w	r3, r3, #8
 8000d26:	6313      	str	r3, [r2, #48]	; 0x30
 8000d28:	4b54      	ldr	r3, [pc, #336]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2c:	f003 0308 	and.w	r3, r3, #8
 8000d30:	61bb      	str	r3, [r7, #24]
 8000d32:	69bb      	ldr	r3, [r7, #24]
  DISCOVERY_AUDIO_I2Cx_SDA_GPIO_CLK_ENABLE();
 8000d34:	4b51      	ldr	r3, [pc, #324]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d38:	4a50      	ldr	r2, [pc, #320]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000d3a:	f043 0302 	orr.w	r3, r3, #2
 8000d3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d40:	4b4e      	ldr	r3, [pc, #312]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d44:	f003 0302 	and.w	r3, r3, #2
 8000d48:	617b      	str	r3, [r7, #20]
 8000d4a:	697b      	ldr	r3, [r7, #20]
  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8000d4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d50:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000d52:	2312      	movs	r3, #18
 8000d54:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_AF;
 8000d5e:	2304      	movs	r3, #4
 8000d60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_GPIO_PORT, &gpio_init_structure);
 8000d62:	f107 031c 	add.w	r3, r7, #28
 8000d66:	4619      	mov	r1, r3
 8000d68:	4845      	ldr	r0, [pc, #276]	; (8000e80 <I2Cx_MspInit+0x174>)
 8000d6a:	f004 f89d 	bl	8004ea8 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8000d6e:	2380      	movs	r3, #128	; 0x80
 8000d70:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SDA_AF;
 8000d72:	230b      	movs	r3, #11
 8000d74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SDA_GPIO_PORT, &gpio_init_structure);
 8000d76:	f107 031c 	add.w	r3, r7, #28
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4841      	ldr	r0, [pc, #260]	; (8000e84 <I2Cx_MspInit+0x178>)
 8000d7e:	f004 f893 	bl	8004ea8 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8000d82:	4b3e      	ldr	r3, [pc, #248]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d86:	4a3d      	ldr	r2, [pc, #244]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000d88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d8e:	4b3b      	ldr	r3, [pc, #236]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000d96:	613b      	str	r3, [r7, #16]
 8000d98:	693b      	ldr	r3, [r7, #16]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8000d9a:	4b38      	ldr	r3, [pc, #224]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000d9c:	6a1b      	ldr	r3, [r3, #32]
 8000d9e:	4a37      	ldr	r2, [pc, #220]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000da0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000da4:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8000da6:	4b35      	ldr	r3, [pc, #212]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000da8:	6a1b      	ldr	r3, [r3, #32]
 8000daa:	4a34      	ldr	r2, [pc, #208]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000dac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000db0:	6213      	str	r3, [r2, #32]

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000db2:	2200      	movs	r2, #0
 8000db4:	210f      	movs	r1, #15
 8000db6:	205f      	movs	r0, #95	; 0x5f
 8000db8:	f002 fb6b 	bl	8003492 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8000dbc:	205f      	movs	r0, #95	; 0x5f
 8000dbe:	f002 fb84 	bl	80034ca <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	210f      	movs	r1, #15
 8000dc6:	2060      	movs	r0, #96	; 0x60
 8000dc8:	f002 fb63 	bl	8003492 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);    
 8000dcc:	2060      	movs	r0, #96	; 0x60
 8000dce:	f002 fb7c 	bl	80034ca <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8000dd2:	e04d      	b.n	8000e70 <I2Cx_MspInit+0x164>
  DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000dd4:	4b29      	ldr	r3, [pc, #164]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd8:	4a28      	ldr	r2, [pc, #160]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000dda:	f043 0302 	orr.w	r3, r3, #2
 8000dde:	6313      	str	r3, [r2, #48]	; 0x30
 8000de0:	4b26      	ldr	r3, [pc, #152]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de4:	f003 0302 	and.w	r3, r3, #2
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	68fb      	ldr	r3, [r7, #12]
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8000dec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000df0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000df2:	2312      	movs	r3, #18
 8000df4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8000dfe:	2304      	movs	r3, #4
 8000e00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000e02:	f107 031c 	add.w	r3, r7, #28
 8000e06:	4619      	mov	r1, r3
 8000e08:	481e      	ldr	r0, [pc, #120]	; (8000e84 <I2Cx_MspInit+0x178>)
 8000e0a:	f004 f84d 	bl	8004ea8 <HAL_GPIO_Init>
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8000e0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000e14:	f107 031c 	add.w	r3, r7, #28
 8000e18:	4619      	mov	r1, r3
 8000e1a:	481a      	ldr	r0, [pc, #104]	; (8000e84 <I2Cx_MspInit+0x178>)
 8000e1c:	f004 f844 	bl	8004ea8 <HAL_GPIO_Init>
  DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8000e20:	4b16      	ldr	r3, [pc, #88]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e24:	4a15      	ldr	r2, [pc, #84]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000e26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2c:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e34:	60bb      	str	r3, [r7, #8]
 8000e36:	68bb      	ldr	r3, [r7, #8]
  DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8000e38:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000e3a:	6a1b      	ldr	r3, [r3, #32]
 8000e3c:	4a0f      	ldr	r2, [pc, #60]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000e3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e42:	6213      	str	r3, [r2, #32]
  DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8000e44:	4b0d      	ldr	r3, [pc, #52]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000e46:	6a1b      	ldr	r3, [r3, #32]
 8000e48:	4a0c      	ldr	r2, [pc, #48]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000e4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000e4e:	6213      	str	r3, [r2, #32]
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8000e50:	2200      	movs	r2, #0
 8000e52:	210f      	movs	r1, #15
 8000e54:	201f      	movs	r0, #31
 8000e56:	f002 fb1c 	bl	8003492 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8000e5a:	201f      	movs	r0, #31
 8000e5c:	f002 fb35 	bl	80034ca <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8000e60:	2200      	movs	r2, #0
 8000e62:	210f      	movs	r1, #15
 8000e64:	2020      	movs	r0, #32
 8000e66:	f002 fb14 	bl	8003492 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8000e6a:	2020      	movs	r0, #32
 8000e6c:	f002 fb2d 	bl	80034ca <HAL_NVIC_EnableIRQ>
}
 8000e70:	bf00      	nop
 8000e72:	3730      	adds	r7, #48	; 0x30
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	200000d4 	.word	0x200000d4
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	40020c00 	.word	0x40020c00
 8000e84:	40020400 	.word	0x40020400

08000e88 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f004 fe09 	bl	8005aa8 <HAL_I2C_GetState>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d125      	bne.n	8000ee8 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4a14      	ldr	r2, [pc, #80]	; (8000ef0 <I2Cx_Init+0x68>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d103      	bne.n	8000eac <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4a13      	ldr	r2, [pc, #76]	; (8000ef4 <I2Cx_Init+0x6c>)
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	e002      	b.n	8000eb2 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4a12      	ldr	r2, [pc, #72]	; (8000ef8 <I2Cx_Init+0x70>)
 8000eb0:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a11      	ldr	r2, [pc, #68]	; (8000efc <I2Cx_Init+0x74>)
 8000eb6:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f7ff ff15 	bl	8000d0c <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f004 fade 	bl	80054a4 <HAL_I2C_Init>
  }
}
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	200000d4 	.word	0x200000d4
 8000ef4:	40006000 	.word	0x40006000
 8000ef8:	40005400 	.word	0x40005400
 8000efc:	40912732 	.word	0x40912732

08000f00 <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08a      	sub	sp, #40	; 0x28
 8000f04:	af04      	add	r7, sp, #16
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	4608      	mov	r0, r1
 8000f0a:	4611      	mov	r1, r2
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4603      	mov	r3, r0
 8000f10:	72fb      	strb	r3, [r7, #11]
 8000f12:	460b      	mov	r3, r1
 8000f14:	813b      	strh	r3, [r7, #8]
 8000f16:	4613      	mov	r3, r2
 8000f18:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000f1e:	7afb      	ldrb	r3, [r7, #11]
 8000f20:	b299      	uxth	r1, r3
 8000f22:	88f8      	ldrh	r0, [r7, #6]
 8000f24:	893a      	ldrh	r2, [r7, #8]
 8000f26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f2a:	9302      	str	r3, [sp, #8]
 8000f2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f2e:	9301      	str	r3, [sp, #4]
 8000f30:	6a3b      	ldr	r3, [r7, #32]
 8000f32:	9300      	str	r3, [sp, #0]
 8000f34:	4603      	mov	r3, r0
 8000f36:	68f8      	ldr	r0, [r7, #12]
 8000f38:	f004 fc9c 	bl	8005874 <HAL_I2C_Mem_Read>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8000f40:	7dfb      	ldrb	r3, [r7, #23]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d004      	beq.n	8000f50 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8000f46:	7afb      	ldrb	r3, [r7, #11]
 8000f48:	4619      	mov	r1, r3
 8000f4a:	68f8      	ldr	r0, [r7, #12]
 8000f4c:	f000 f832 	bl	8000fb4 <I2Cx_Error>
  }
  return status;
 8000f50:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3718      	adds	r7, #24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b08a      	sub	sp, #40	; 0x28
 8000f5e:	af04      	add	r7, sp, #16
 8000f60:	60f8      	str	r0, [r7, #12]
 8000f62:	4608      	mov	r0, r1
 8000f64:	4611      	mov	r1, r2
 8000f66:	461a      	mov	r2, r3
 8000f68:	4603      	mov	r3, r0
 8000f6a:	72fb      	strb	r3, [r7, #11]
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	813b      	strh	r3, [r7, #8]
 8000f70:	4613      	mov	r3, r2
 8000f72:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000f74:	2300      	movs	r3, #0
 8000f76:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000f78:	7afb      	ldrb	r3, [r7, #11]
 8000f7a:	b299      	uxth	r1, r3
 8000f7c:	88f8      	ldrh	r0, [r7, #6]
 8000f7e:	893a      	ldrh	r2, [r7, #8]
 8000f80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f84:	9302      	str	r3, [sp, #8]
 8000f86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f88:	9301      	str	r3, [sp, #4]
 8000f8a:	6a3b      	ldr	r3, [r7, #32]
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	4603      	mov	r3, r0
 8000f90:	68f8      	ldr	r0, [r7, #12]
 8000f92:	f004 fb5b 	bl	800564c <HAL_I2C_Mem_Write>
 8000f96:	4603      	mov	r3, r0
 8000f98:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8000f9a:	7dfb      	ldrb	r3, [r7, #23]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d004      	beq.n	8000faa <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8000fa0:	7afb      	ldrb	r3, [r7, #11]
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	68f8      	ldr	r0, [r7, #12]
 8000fa6:	f000 f805 	bl	8000fb4 <I2Cx_Error>
  }
  return status;
 8000faa:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3718      	adds	r7, #24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f004 faff 	bl	80055c4 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f7ff ff5e 	bl	8000e88 <I2Cx_Init>
}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8000fd8:	4802      	ldr	r0, [pc, #8]	; (8000fe4 <TS_IO_Init+0x10>)
 8000fda:	f7ff ff55 	bl	8000e88 <I2Cx_Init>
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	200000d4 	.word	0x200000d4

08000fe8 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	71bb      	strb	r3, [r7, #6]
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8000ffa:	79bb      	ldrb	r3, [r7, #6]
 8000ffc:	b29a      	uxth	r2, r3
 8000ffe:	79f9      	ldrb	r1, [r7, #7]
 8001000:	2301      	movs	r3, #1
 8001002:	9301      	str	r3, [sp, #4]
 8001004:	1d7b      	adds	r3, r7, #5
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	2301      	movs	r3, #1
 800100a:	4803      	ldr	r0, [pc, #12]	; (8001018 <TS_IO_Write+0x30>)
 800100c:	f7ff ffa5 	bl	8000f5a <I2Cx_WriteMultiple>
}
 8001010:	bf00      	nop
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	200000d4 	.word	0x200000d4

0800101c <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af02      	add	r7, sp, #8
 8001022:	4603      	mov	r3, r0
 8001024:	460a      	mov	r2, r1
 8001026:	71fb      	strb	r3, [r7, #7]
 8001028:	4613      	mov	r3, r2
 800102a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001030:	79bb      	ldrb	r3, [r7, #6]
 8001032:	b29a      	uxth	r2, r3
 8001034:	79f9      	ldrb	r1, [r7, #7]
 8001036:	2301      	movs	r3, #1
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	f107 030f 	add.w	r3, r7, #15
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	2301      	movs	r3, #1
 8001042:	4804      	ldr	r0, [pc, #16]	; (8001054 <TS_IO_Read+0x38>)
 8001044:	f7ff ff5c 	bl	8000f00 <I2Cx_ReadMultiple>

  return read_value;
 8001048:	7bfb      	ldrb	r3, [r7, #15]
}
 800104a:	4618      	mov	r0, r3
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	200000d4 	.word	0x200000d4

08001058 <TS_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af02      	add	r7, sp, #8
 800105e:	603a      	str	r2, [r7, #0]
 8001060:	461a      	mov	r2, r3
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
 8001066:	460b      	mov	r3, r1
 8001068:	71bb      	strb	r3, [r7, #6]
 800106a:	4613      	mov	r3, r2
 800106c:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800106e:	79bb      	ldrb	r3, [r7, #6]
 8001070:	b29a      	uxth	r2, r3
 8001072:	79f9      	ldrb	r1, [r7, #7]
 8001074:	88bb      	ldrh	r3, [r7, #4]
 8001076:	9301      	str	r3, [sp, #4]
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	2301      	movs	r3, #1
 800107e:	4804      	ldr	r0, [pc, #16]	; (8001090 <TS_IO_ReadMultiple+0x38>)
 8001080:	f7ff ff3e 	bl	8000f00 <I2Cx_ReadMultiple>
 8001084:	4603      	mov	r3, r0
 8001086:	b29b      	uxth	r3, r3
}
 8001088:	4618      	mov	r0, r3
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	200000d4 	.word	0x200000d4

08001094 <OTM8009A_IO_Delay>:
/**
  * @brief  OTM8009A delay
  * @param  Delay: Delay in ms
  */
void OTM8009A_IO_Delay(uint32_t Delay)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f001 fc53 	bl	8002948 <HAL_Delay>
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <BSP_LCD_Init>:
/**
  * @brief  Initializes the DSI LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 80010ae:	2001      	movs	r0, #1
 80010b0:	f000 f804 	bl	80010bc <BSP_LCD_InitEx>
 80010b4:	4603      	mov	r3, r0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	bd80      	pop	{r7, pc}
	...

080010bc <BSP_LCD_InitEx>:
  *     - OTM8009A LCD Display IC Driver ititialization
  * @param  orientation: LCD orientation, can be LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(LCD_OrientationTypeDef orientation)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b090      	sub	sp, #64	; 0x40
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]
  DSI_PLLInitTypeDef dsiPllInit;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  uint32_t LcdClock  = 27429; /*!< LcdClk = 27429 kHz */
 80010c6:	f646 3325 	movw	r3, #27429	; 0x6b25
 80010ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t read_id = 0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	877b      	strh	r3, [r7, #58]	; 0x3a

  uint32_t laneByteClk_kHz = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t                   HFP; /*!< Horizontal Front Porch time in units of lcdClk */
  uint32_t                   HACT; /*!< Horizontal Active time in units of lcdClk = imageSize X in pixels to display */

  /* Toggle Hardware Reset of the DSI LCD using
  * its XRES signal (active low) */
  BSP_LCD_Reset();
 80010d4:	f000 f936 	bl	8001344 <BSP_LCD_Reset>

  /* Check the connected monitor */
  read_id = LCD_IO_GetID();
 80010d8:	f000 fe78 	bl	8001dcc <LCD_IO_GetID>
 80010dc:	4603      	mov	r3, r0
 80010de:	877b      	strh	r3, [r7, #58]	; 0x3a
  else if(read_id != LCD_DSI_ID)
  {
    return LCD_ERROR;  
  }
#else
  if(read_id != LCD_DSI_ID)
 80010e0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80010e2:	2b11      	cmp	r3, #17
 80010e4:	d001      	beq.n	80010ea <BSP_LCD_InitEx+0x2e>
  {
    return LCD_ERROR;  
 80010e6:	2301      	movs	r3, #1
 80010e8:	e113      	b.n	8001312 <BSP_LCD_InitEx+0x256>
  * This will set IP blocks LTDC, DSI and DMA2D
  * - out of reset
  * - clocked
  * - NVIC IRQ related to IP blocks enabled
  */
  BSP_LCD_MspInit();
 80010ea:	f000 fe77 	bl	8001ddc <BSP_LCD_MspInit>

/*************************DSI Initialization***********************************/  

  /* Base address of DSI Host/Wrapper registers to be set before calling De-Init */
  hdsi_discovery.Instance = DSI;
 80010ee:	4b8b      	ldr	r3, [pc, #556]	; (800131c <BSP_LCD_InitEx+0x260>)
 80010f0:	4a8b      	ldr	r2, [pc, #556]	; (8001320 <BSP_LCD_InitEx+0x264>)
 80010f2:	601a      	str	r2, [r3, #0]

  HAL_DSI_DeInit(&(hdsi_discovery));
 80010f4:	4889      	ldr	r0, [pc, #548]	; (800131c <BSP_LCD_InitEx+0x260>)
 80010f6:	f002 ffc9 	bl	800408c <HAL_DSI_DeInit>

  dsiPllInit.PLLNDIV  = 100;
 80010fa:	2364      	movs	r3, #100	; 0x64
 80010fc:	60bb      	str	r3, [r7, #8]
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
 80010fe:	2305      	movs	r3, #5
 8001100:	60fb      	str	r3, [r7, #12]
  dsiPllInit.PLLODF  = DSI_PLL_OUT_DIV1;
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]
  laneByteClk_kHz = 62500; /* 500 MHz / 8 = 62.5 MHz = 62500 kHz */
 8001106:	f24f 4324 	movw	r3, #62500	; 0xf424
 800110a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set number of Lanes */
  hdsi_discovery.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 800110c:	4b83      	ldr	r3, [pc, #524]	; (800131c <BSP_LCD_InitEx+0x260>)
 800110e:	2201      	movs	r2, #1
 8001110:	60da      	str	r2, [r3, #12]

  /* TXEscapeCkdiv = f(LaneByteClk)/15.62 = 4 */
  hdsi_discovery.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 8001112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001114:	089b      	lsrs	r3, r3, #2
 8001116:	4a83      	ldr	r2, [pc, #524]	; (8001324 <BSP_LCD_InitEx+0x268>)
 8001118:	fba2 2303 	umull	r2, r3, r2, r3
 800111c:	0a9b      	lsrs	r3, r3, #10
 800111e:	4a7f      	ldr	r2, [pc, #508]	; (800131c <BSP_LCD_InitEx+0x260>)
 8001120:	6093      	str	r3, [r2, #8]

  HAL_DSI_Init(&(hdsi_discovery), &(dsiPllInit));
 8001122:	f107 0308 	add.w	r3, r7, #8
 8001126:	4619      	mov	r1, r3
 8001128:	487c      	ldr	r0, [pc, #496]	; (800131c <BSP_LCD_InitEx+0x260>)
 800112a:	f002 fe95 	bl	8003e58 <HAL_DSI_Init>

  /* Timing parameters for all Video modes
  * Set Timing parameters of LTDC depending on its chosen orientation
  */
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d108      	bne.n	8001146 <BSP_LCD_InitEx+0x8a>
  {
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 8001134:	4b7c      	ldr	r3, [pc, #496]	; (8001328 <BSP_LCD_InitEx+0x26c>)
 8001136:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800113a:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 800113c:	4b7b      	ldr	r3, [pc, #492]	; (800132c <BSP_LCD_InitEx+0x270>)
 800113e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	e007      	b.n	8001156 <BSP_LCD_InitEx+0x9a>
  }
  else
  {
    /* lcd_orientation == LCD_ORIENTATION_LANDSCAPE */
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 8001146:	4b78      	ldr	r3, [pc, #480]	; (8001328 <BSP_LCD_InitEx+0x26c>)
 8001148:	f44f 7248 	mov.w	r2, #800	; 0x320
 800114c:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 800114e:	4b77      	ldr	r3, [pc, #476]	; (800132c <BSP_LCD_InitEx+0x270>)
 8001150:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001154:	601a      	str	r2, [r3, #0]
  }

  HACT = lcd_x_size;
 8001156:	4b74      	ldr	r3, [pc, #464]	; (8001328 <BSP_LCD_InitEx+0x26c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	633b      	str	r3, [r7, #48]	; 0x30
  VACT = lcd_y_size;
 800115c:	4b73      	ldr	r3, [pc, #460]	; (800132c <BSP_LCD_InitEx+0x270>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* The following values are same for portrait and landscape orientations */
  VSA  = OTM8009A_480X800_VSYNC;        /* 12  */
 8001162:	2301      	movs	r3, #1
 8001164:	62bb      	str	r3, [r7, #40]	; 0x28
  VBP  = OTM8009A_480X800_VBP;          /* 12  */
 8001166:	230f      	movs	r3, #15
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
  VFP  = OTM8009A_480X800_VFP;          /* 12  */
 800116a:	2310      	movs	r3, #16
 800116c:	623b      	str	r3, [r7, #32]
  HSA  = OTM8009A_480X800_HSYNC;        /* 63  */
 800116e:	2302      	movs	r3, #2
 8001170:	61fb      	str	r3, [r7, #28]
  HBP  = OTM8009A_480X800_HBP;          /* 120 */
 8001172:	2322      	movs	r3, #34	; 0x22
 8001174:	61bb      	str	r3, [r7, #24]
  HFP  = OTM8009A_480X800_HFP;          /* 120 */   
 8001176:	2322      	movs	r3, #34	; 0x22
 8001178:	617b      	str	r3, [r7, #20]

  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 800117a:	4b6d      	ldr	r3, [pc, #436]	; (8001330 <BSP_LCD_InitEx+0x274>)
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 8001180:	4b6b      	ldr	r3, [pc, #428]	; (8001330 <BSP_LCD_InitEx+0x274>)
 8001182:	2205      	movs	r2, #5
 8001184:	605a      	str	r2, [r3, #4]
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8001186:	4b6a      	ldr	r3, [pc, #424]	; (8001330 <BSP_LCD_InitEx+0x274>)
 8001188:	2200      	movs	r2, #0
 800118a:	621a      	str	r2, [r3, #32]
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 800118c:	4b68      	ldr	r3, [pc, #416]	; (8001330 <BSP_LCD_InitEx+0x274>)
 800118e:	2200      	movs	r2, #0
 8001190:	61da      	str	r2, [r3, #28]
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 8001192:	4b67      	ldr	r3, [pc, #412]	; (8001330 <BSP_LCD_InitEx+0x274>)
 8001194:	2200      	movs	r2, #0
 8001196:	625a      	str	r2, [r3, #36]	; 0x24
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 8001198:	4b65      	ldr	r3, [pc, #404]	; (8001330 <BSP_LCD_InitEx+0x274>)
 800119a:	2202      	movs	r2, #2
 800119c:	60da      	str	r2, [r3, #12]
  hdsivideo_handle.NullPacketSize = 0xFFF;
 800119e:	4b64      	ldr	r3, [pc, #400]	; (8001330 <BSP_LCD_InitEx+0x274>)
 80011a0:	f640 72ff 	movw	r2, #4095	; 0xfff
 80011a4:	619a      	str	r2, [r3, #24]
  hdsivideo_handle.NumberOfChunks = 0;
 80011a6:	4b62      	ldr	r3, [pc, #392]	; (8001330 <BSP_LCD_InitEx+0x274>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	615a      	str	r2, [r3, #20]
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 80011ac:	4a60      	ldr	r2, [pc, #384]	; (8001330 <BSP_LCD_InitEx+0x274>)
 80011ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011b0:	6113      	str	r3, [r2, #16]
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz)/LcdClock;
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80011b6:	fb02 f203 	mul.w	r2, r2, r3
 80011ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c0:	4a5b      	ldr	r2, [pc, #364]	; (8001330 <BSP_LCD_InitEx+0x274>)
 80011c2:	6293      	str	r3, [r2, #40]	; 0x28
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz)/LcdClock;
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80011c8:	fb02 f203 	mul.w	r2, r2, r3
 80011cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d2:	4a57      	ldr	r2, [pc, #348]	; (8001330 <BSP_LCD_InitEx+0x274>)
 80011d4:	62d3      	str	r3, [r2, #44]	; 0x2c
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz)/LcdClock; /* Value depending on display orientation choice portrait/landscape */
 80011d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	441a      	add	r2, r3
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	441a      	add	r2, r3
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	4413      	add	r3, r2
 80011e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80011e6:	fb02 f203 	mul.w	r2, r2, r3
 80011ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f0:	4a4f      	ldr	r2, [pc, #316]	; (8001330 <BSP_LCD_InitEx+0x274>)
 80011f2:	6313      	str	r3, [r2, #48]	; 0x30
  hdsivideo_handle.VerticalSyncActive        = VSA;
 80011f4:	4a4e      	ldr	r2, [pc, #312]	; (8001330 <BSP_LCD_InitEx+0x274>)
 80011f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011f8:	6353      	str	r3, [r2, #52]	; 0x34
  hdsivideo_handle.VerticalBackPorch         = VBP;
 80011fa:	4a4d      	ldr	r2, [pc, #308]	; (8001330 <BSP_LCD_InitEx+0x274>)
 80011fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fe:	6393      	str	r3, [r2, #56]	; 0x38
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 8001200:	4a4b      	ldr	r2, [pc, #300]	; (8001330 <BSP_LCD_InitEx+0x274>)
 8001202:	6a3b      	ldr	r3, [r7, #32]
 8001204:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 8001206:	4a4a      	ldr	r2, [pc, #296]	; (8001330 <BSP_LCD_InitEx+0x274>)
 8001208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800120a:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable or disable sending LP command while streaming is active in video mode */
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 800120c:	4b48      	ldr	r3, [pc, #288]	; (8001330 <BSP_LCD_InitEx+0x274>)
 800120e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001212:	645a      	str	r2, [r3, #68]	; 0x44

  /* Largest packet size possible to transmit in LP mode in VSA, VBP, VFP regions */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPLargestPacketSize = 16;
 8001214:	4b46      	ldr	r3, [pc, #280]	; (8001330 <BSP_LCD_InitEx+0x274>)
 8001216:	2210      	movs	r2, #16
 8001218:	649a      	str	r2, [r3, #72]	; 0x48

  /* Largest packet size possible to transmit in LP mode in HFP region during VACT period */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 800121a:	4b45      	ldr	r3, [pc, #276]	; (8001330 <BSP_LCD_InitEx+0x274>)
 800121c:	2200      	movs	r2, #0
 800121e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Specify for each region of the video frame, if the transmission of command in LP mode is allowed in this region */
  /* while streaming is active in video mode                                                                         */
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 8001220:	4b43      	ldr	r3, [pc, #268]	; (8001330 <BSP_LCD_InitEx+0x274>)
 8001222:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001226:	651a      	str	r2, [r3, #80]	; 0x50
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 8001228:	4b41      	ldr	r3, [pc, #260]	; (8001330 <BSP_LCD_InitEx+0x274>)
 800122a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800122e:	655a      	str	r2, [r3, #84]	; 0x54
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 8001230:	4b3f      	ldr	r3, [pc, #252]	; (8001330 <BSP_LCD_InitEx+0x274>)
 8001232:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001236:	659a      	str	r2, [r3, #88]	; 0x58
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 8001238:	4b3d      	ldr	r3, [pc, #244]	; (8001330 <BSP_LCD_InitEx+0x274>)
 800123a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800123e:	65da      	str	r2, [r3, #92]	; 0x5c
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 8001240:	4b3b      	ldr	r3, [pc, #236]	; (8001330 <BSP_LCD_InitEx+0x274>)
 8001242:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001246:	661a      	str	r2, [r3, #96]	; 0x60
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 8001248:	4b39      	ldr	r3, [pc, #228]	; (8001330 <BSP_LCD_InitEx+0x274>)
 800124a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800124e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure DSI Video mode timings with settings set above */
  HAL_DSI_ConfigVideoMode(&(hdsi_discovery), &(hdsivideo_handle));
 8001250:	4937      	ldr	r1, [pc, #220]	; (8001330 <BSP_LCD_InitEx+0x274>)
 8001252:	4832      	ldr	r0, [pc, #200]	; (800131c <BSP_LCD_InitEx+0x260>)
 8001254:	f003 f872 	bl	800433c <HAL_DSI_ConfigVideoMode>
  
  
/************************LTDC Initialization***********************************/  

  /* Timing Configuration */    
  hltdc_discovery.Init.HorizontalSync = (HSA - 1);
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	3b01      	subs	r3, #1
 800125c:	4a35      	ldr	r2, [pc, #212]	; (8001334 <BSP_LCD_InitEx+0x278>)
 800125e:	6153      	str	r3, [r2, #20]
  hltdc_discovery.Init.AccumulatedHBP = (HSA + HBP - 1);
 8001260:	69fa      	ldr	r2, [r7, #28]
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	4413      	add	r3, r2
 8001266:	3b01      	subs	r3, #1
 8001268:	4a32      	ldr	r2, [pc, #200]	; (8001334 <BSP_LCD_InitEx+0x278>)
 800126a:	61d3      	str	r3, [r2, #28]
  hltdc_discovery.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 800126c:	4b2e      	ldr	r3, [pc, #184]	; (8001328 <BSP_LCD_InitEx+0x26c>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	441a      	add	r2, r3
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	4413      	add	r3, r2
 8001278:	3b01      	subs	r3, #1
 800127a:	4a2e      	ldr	r2, [pc, #184]	; (8001334 <BSP_LCD_InitEx+0x278>)
 800127c:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc_discovery.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 800127e:	4b2a      	ldr	r3, [pc, #168]	; (8001328 <BSP_LCD_InitEx+0x26c>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	441a      	add	r2, r3
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	441a      	add	r2, r3
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	4413      	add	r3, r2
 800128e:	3b01      	subs	r3, #1
 8001290:	4a28      	ldr	r2, [pc, #160]	; (8001334 <BSP_LCD_InitEx+0x278>)
 8001292:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Initialize the LCD pixel width and pixel height */
  hltdc_discovery.LayerCfg->ImageWidth  = lcd_x_size;
 8001294:	4b24      	ldr	r3, [pc, #144]	; (8001328 <BSP_LCD_InitEx+0x26c>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a26      	ldr	r2, [pc, #152]	; (8001334 <BSP_LCD_InitEx+0x278>)
 800129a:	6613      	str	r3, [r2, #96]	; 0x60
  hltdc_discovery.LayerCfg->ImageHeight = lcd_y_size;   
 800129c:	4b23      	ldr	r3, [pc, #140]	; (800132c <BSP_LCD_InitEx+0x270>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a24      	ldr	r2, [pc, #144]	; (8001334 <BSP_LCD_InitEx+0x278>)
 80012a2:	6653      	str	r3, [r2, #100]	; 0x64
    * PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz 
    * PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 384 Mhz 
    * PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 384 MHz / 7 = 54.85 MHz 
    * LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_2 = 54.85 MHz / 2 = 27.429 MHz 
    */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80012a4:	4b24      	ldr	r3, [pc, #144]	; (8001338 <BSP_LCD_InitEx+0x27c>)
 80012a6:	2208      	movs	r2, #8
 80012a8:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80012aa:	4b23      	ldr	r3, [pc, #140]	; (8001338 <BSP_LCD_InitEx+0x27c>)
 80012ac:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80012b0:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 80012b2:	4b21      	ldr	r3, [pc, #132]	; (8001338 <BSP_LCD_InitEx+0x27c>)
 80012b4:	2207      	movs	r2, #7
 80012b6:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80012b8:	4b1f      	ldr	r3, [pc, #124]	; (8001338 <BSP_LCD_InitEx+0x27c>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80012be:	481e      	ldr	r0, [pc, #120]	; (8001338 <BSP_LCD_InitEx+0x27c>)
 80012c0:	f005 fd70 	bl	8006da4 <HAL_RCCEx_PeriphCLKConfig>

  /* Background value */
  hltdc_discovery.Init.Backcolor.Blue = 0;
 80012c4:	4b1b      	ldr	r3, [pc, #108]	; (8001334 <BSP_LCD_InitEx+0x278>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc_discovery.Init.Backcolor.Green = 0;
 80012cc:	4b19      	ldr	r3, [pc, #100]	; (8001334 <BSP_LCD_InitEx+0x278>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc_discovery.Init.Backcolor.Red = 0;
 80012d4:	4b17      	ldr	r3, [pc, #92]	; (8001334 <BSP_LCD_InitEx+0x278>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  hltdc_discovery.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80012dc:	4b15      	ldr	r3, [pc, #84]	; (8001334 <BSP_LCD_InitEx+0x278>)
 80012de:	2200      	movs	r2, #0
 80012e0:	611a      	str	r2, [r3, #16]
  hltdc_discovery.Instance = LTDC;
 80012e2:	4b14      	ldr	r3, [pc, #80]	; (8001334 <BSP_LCD_InitEx+0x278>)
 80012e4:	4a15      	ldr	r2, [pc, #84]	; (800133c <BSP_LCD_InitEx+0x280>)
 80012e6:	601a      	str	r2, [r3, #0]

  /* Get LTDC Configuration from DSI Configuration */
  HAL_LTDC_StructInitFromVideoConfig(&(hltdc_discovery), &(hdsivideo_handle));
 80012e8:	4911      	ldr	r1, [pc, #68]	; (8001330 <BSP_LCD_InitEx+0x274>)
 80012ea:	4812      	ldr	r0, [pc, #72]	; (8001334 <BSP_LCD_InitEx+0x278>)
 80012ec:	f005 f8ae 	bl	800644c <HAL_LTDCEx_StructInitFromVideoConfig>

  /* Initialize the LTDC */  
  HAL_LTDC_Init(&hltdc_discovery);
 80012f0:	4810      	ldr	r0, [pc, #64]	; (8001334 <BSP_LCD_InitEx+0x278>)
 80012f2:	f004 fe03 	bl	8005efc <HAL_LTDC_Init>

  /* Enable the DSI host and wrapper after the LTDC initialization
     To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
  HAL_DSI_Start(&hdsi_discovery);
 80012f6:	4809      	ldr	r0, [pc, #36]	; (800131c <BSP_LCD_InitEx+0x260>)
 80012f8:	f003 fcb2 	bl	8004c60 <HAL_DSI_Start>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80012fc:	f000 ff32 	bl	8002164 <BSP_SDRAM_Init>
#endif /* DATA_IN_ExtSDRAM */

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001300:	480f      	ldr	r0, [pc, #60]	; (8001340 <BSP_LCD_InitEx+0x284>)
 8001302:	f000 f901 	bl	8001508 <BSP_LCD_SetFont>
/***********************OTM8009A Initialization********************************/ 

  /* Initialize the OTM8009A LCD Display IC Driver (KoD LCD IC Driver)
  *  depending on configuration set in 'hdsivideo_handle'.
  */
  OTM8009A_Init(OTM8009A_FORMAT_RGB888, orientation);
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	4619      	mov	r1, r3
 800130a:	2000      	movs	r0, #0
 800130c:	f7ff faa8 	bl	8000860 <OTM8009A_Init>

/***********************End OTM8009A Initialization****************************/ 

  return LCD_OK; 
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3740      	adds	r7, #64	; 0x40
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	2000042c 	.word	0x2000042c
 8001320:	40016c00 	.word	0x40016c00
 8001324:	43215e57 	.word	0x43215e57
 8001328:	20000030 	.word	0x20000030
 800132c:	20000034 	.word	0x20000034
 8001330:	20000120 	.word	0x20000120
 8001334:	20000384 	.word	0x20000384
 8001338:	200001a8 	.word	0x200001a8
 800133c:	40016800 	.word	0x40016800
 8001340:	20000028 	.word	0x20000028

08001344 <BSP_LCD_Reset>:
  * @brief  BSP LCD Reset
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and desactivating it later.
  */
void BSP_LCD_Reset(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800134a:	4b18      	ldr	r3, [pc, #96]	; (80013ac <BSP_LCD_Reset+0x68>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a17      	ldr	r2, [pc, #92]	; (80013ac <BSP_LCD_Reset+0x68>)
 8001350:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b15      	ldr	r3, [pc, #84]	; (80013ac <BSP_LCD_Reset+0x68>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800135e:	603b      	str	r3, [r7, #0]
 8001360:	683b      	ldr	r3, [r7, #0]

    /* Configure the GPIO on PJ15 */
    gpio_init_structure.Pin   = GPIO_PIN_15;
 8001362:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001366:	607b      	str	r3, [r7, #4]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001368:	2301      	movs	r3, #1
 800136a:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 800136c:	2301      	movs	r3, #1
 800136e:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001370:	2303      	movs	r3, #3
 8001372:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	4619      	mov	r1, r3
 8001378:	480d      	ldr	r0, [pc, #52]	; (80013b0 <BSP_LCD_Reset+0x6c>)
 800137a:	f003 fd95 	bl	8004ea8 <HAL_GPIO_Init>

    /* Activate XRES active low */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_RESET);
 800137e:	2200      	movs	r2, #0
 8001380:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001384:	480a      	ldr	r0, [pc, #40]	; (80013b0 <BSP_LCD_Reset+0x6c>)
 8001386:	f004 f85b 	bl	8005440 <HAL_GPIO_WritePin>

    HAL_Delay(20); /* wait 20 ms */
 800138a:	2014      	movs	r0, #20
 800138c:	f001 fadc 	bl	8002948 <HAL_Delay>

    /* Desactivate XRES */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_SET);
 8001390:	2201      	movs	r2, #1
 8001392:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001396:	4806      	ldr	r0, [pc, #24]	; (80013b0 <BSP_LCD_Reset+0x6c>)
 8001398:	f004 f852 	bl	8005440 <HAL_GPIO_WritePin>
    
    /* Wait for 10ms after releasing XRES before sending commands */
    HAL_Delay(10);
 800139c:	200a      	movs	r0, #10
 800139e:	f001 fad3 	bl	8002948 <HAL_Delay>
}
 80013a2:	bf00      	nop
 80013a4:	3718      	adds	r7, #24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40022400 	.word	0x40022400

080013b4 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  return (lcd_x_size);
 80013b8:	4b03      	ldr	r3, [pc, #12]	; (80013c8 <BSP_LCD_GetXSize+0x14>)
 80013ba:	681b      	ldr	r3, [r3, #0]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	20000030 	.word	0x20000030

080013cc <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  return (lcd_y_size);
 80013d0:	4b03      	ldr	r3, [pc, #12]	; (80013e0 <BSP_LCD_GetYSize+0x14>)
 80013d2:	681b      	ldr	r3, [r3, #0]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	20000034 	.word	0x20000034

080013e4 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b090      	sub	sp, #64	; 0x40
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	6039      	str	r1, [r7, #0]
 80013ee:	80fb      	strh	r3, [r7, #6]
    LCD_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80013f4:	f7ff ffde 	bl	80013b4 <BSP_LCD_GetXSize>
 80013f8:	4603      	mov	r3, r0
 80013fa:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8001400:	f7ff ffe4 	bl	80013cc <BSP_LCD_GetYSize>
 8001404:	4603      	mov	r3, r0
 8001406:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001408:	2300      	movs	r3, #0
 800140a:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8001410:	23ff      	movs	r3, #255	; 0xff
 8001412:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8001418:	2300      	movs	r3, #0
 800141a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 800141e:	2300      	movs	r3, #0
 8001420:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800142a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800142e:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001430:	2307      	movs	r3, #7
 8001432:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8001434:	f7ff ffbe 	bl	80013b4 <BSP_LCD_GetXSize>
 8001438:	4603      	mov	r3, r0
 800143a:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 800143c:	f7ff ffc6 	bl	80013cc <BSP_LCD_GetYSize>
 8001440:	4603      	mov	r3, r0
 8001442:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hltdc_discovery, &Layercfg, LayerIndex); 
 8001444:	88fa      	ldrh	r2, [r7, #6]
 8001446:	f107 030c 	add.w	r3, r7, #12
 800144a:	4619      	mov	r1, r3
 800144c:	4812      	ldr	r0, [pc, #72]	; (8001498 <BSP_LCD_LayerDefaultInit+0xb4>)
 800144e:	f004 fe25 	bl	800609c <HAL_LTDC_ConfigLayer>
  
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8001452:	88fa      	ldrh	r2, [r7, #6]
 8001454:	4911      	ldr	r1, [pc, #68]	; (800149c <BSP_LCD_LayerDefaultInit+0xb8>)
 8001456:	4613      	mov	r3, r2
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	4413      	add	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	440b      	add	r3, r1
 8001460:	3304      	adds	r3, #4
 8001462:	f04f 32ff 	mov.w	r2, #4294967295
 8001466:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8001468:	88fa      	ldrh	r2, [r7, #6]
 800146a:	490c      	ldr	r1, [pc, #48]	; (800149c <BSP_LCD_LayerDefaultInit+0xb8>)
 800146c:	4613      	mov	r3, r2
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	4413      	add	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	440b      	add	r3, r1
 8001476:	3308      	adds	r3, #8
 8001478:	4a09      	ldr	r2, [pc, #36]	; (80014a0 <BSP_LCD_LayerDefaultInit+0xbc>)
 800147a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 800147c:	88fa      	ldrh	r2, [r7, #6]
 800147e:	4907      	ldr	r1, [pc, #28]	; (800149c <BSP_LCD_LayerDefaultInit+0xb8>)
 8001480:	4613      	mov	r3, r2
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	4413      	add	r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	440b      	add	r3, r1
 800148a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800148e:	601a      	str	r2, [r3, #0]
}
 8001490:	bf00      	nop
 8001492:	3740      	adds	r7, #64	; 0x40
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20000384 	.word	0x20000384
 800149c:	20000190 	.word	0x20000190
 80014a0:	20000028 	.word	0x20000028

080014a4 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80014ac:	4b07      	ldr	r3, [pc, #28]	; (80014cc <BSP_LCD_SetTextColor+0x28>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	4907      	ldr	r1, [pc, #28]	; (80014d0 <BSP_LCD_SetTextColor+0x2c>)
 80014b2:	4613      	mov	r3, r2
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	4413      	add	r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	440b      	add	r3, r1
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	601a      	str	r2, [r3, #0]
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	2000018c 	.word	0x2000018c
 80014d0:	20000190 	.word	0x20000190

080014d4 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80014dc:	4b08      	ldr	r3, [pc, #32]	; (8001500 <BSP_LCD_SetBackColor+0x2c>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	4908      	ldr	r1, [pc, #32]	; (8001504 <BSP_LCD_SetBackColor+0x30>)
 80014e2:	4613      	mov	r3, r2
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	4413      	add	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	440b      	add	r3, r1
 80014ec:	3304      	adds	r3, #4
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	601a      	str	r2, [r3, #0]
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	2000018c 	.word	0x2000018c
 8001504:	20000190 	.word	0x20000190

08001508 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8001510:	4b08      	ldr	r3, [pc, #32]	; (8001534 <BSP_LCD_SetFont+0x2c>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	4908      	ldr	r1, [pc, #32]	; (8001538 <BSP_LCD_SetFont+0x30>)
 8001516:	4613      	mov	r3, r2
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	4413      	add	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	440b      	add	r3, r1
 8001520:	3308      	adds	r3, #8
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	601a      	str	r2, [r3, #0]
}
 8001526:	bf00      	nop
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	2000018c 	.word	0x2000018c
 8001538:	20000190 	.word	0x20000190

0800153c <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8001540:	4b07      	ldr	r3, [pc, #28]	; (8001560 <BSP_LCD_GetFont+0x24>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	4907      	ldr	r1, [pc, #28]	; (8001564 <BSP_LCD_GetFont+0x28>)
 8001546:	4613      	mov	r3, r2
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	4413      	add	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	440b      	add	r3, r1
 8001550:	3308      	adds	r3, #8
 8001552:	681b      	ldr	r3, [r3, #0]
}
 8001554:	4618      	mov	r0, r3
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	2000018c 	.word	0x2000018c
 8001564:	20000190 	.word	0x20000190

08001568 <BSP_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 8001568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800156a:	b085      	sub	sp, #20
 800156c:	af02      	add	r7, sp, #8
 800156e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001570:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <BSP_LCD_Clear+0x48>)
 8001572:	681c      	ldr	r4, [r3, #0]
 8001574:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <BSP_LCD_Clear+0x48>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a0e      	ldr	r2, [pc, #56]	; (80015b4 <BSP_LCD_Clear+0x4c>)
 800157a:	2134      	movs	r1, #52	; 0x34
 800157c:	fb01 f303 	mul.w	r3, r1, r3
 8001580:	4413      	add	r3, r2
 8001582:	335c      	adds	r3, #92	; 0x5c
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	461d      	mov	r5, r3
 8001588:	f7ff ff14 	bl	80013b4 <BSP_LCD_GetXSize>
 800158c:	4606      	mov	r6, r0
 800158e:	f7ff ff1d 	bl	80013cc <BSP_LCD_GetYSize>
 8001592:	4602      	mov	r2, r0
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	9301      	str	r3, [sp, #4]
 8001598:	2300      	movs	r3, #0
 800159a:	9300      	str	r3, [sp, #0]
 800159c:	4613      	mov	r3, r2
 800159e:	4632      	mov	r2, r6
 80015a0:	4629      	mov	r1, r5
 80015a2:	4620      	mov	r0, r4
 80015a4:	f000 fd62 	bl	800206c <LL_FillBuffer>
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015b0:	2000018c 	.word	0x2000018c
 80015b4:	20000384 	.word	0x20000384

080015b8 <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80015b8:	b590      	push	{r4, r7, lr}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	80fb      	strh	r3, [r7, #6]
 80015c2:	460b      	mov	r3, r1
 80015c4:	80bb      	strh	r3, [r7, #4]
 80015c6:	4613      	mov	r3, r2
 80015c8:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80015ca:	4b1b      	ldr	r3, [pc, #108]	; (8001638 <BSP_LCD_DisplayChar+0x80>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	491b      	ldr	r1, [pc, #108]	; (800163c <BSP_LCD_DisplayChar+0x84>)
 80015d0:	4613      	mov	r3, r2
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	4413      	add	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	440b      	add	r3, r1
 80015da:	3308      	adds	r3, #8
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	6819      	ldr	r1, [r3, #0]
 80015e0:	78fb      	ldrb	r3, [r7, #3]
 80015e2:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80015e6:	4b14      	ldr	r3, [pc, #80]	; (8001638 <BSP_LCD_DisplayChar+0x80>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	4c14      	ldr	r4, [pc, #80]	; (800163c <BSP_LCD_DisplayChar+0x84>)
 80015ec:	4613      	mov	r3, r2
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	4413      	add	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	4423      	add	r3, r4
 80015f6:	3308      	adds	r3, #8
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80015fc:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001600:	4b0d      	ldr	r3, [pc, #52]	; (8001638 <BSP_LCD_DisplayChar+0x80>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	4c0d      	ldr	r4, [pc, #52]	; (800163c <BSP_LCD_DisplayChar+0x84>)
 8001606:	4613      	mov	r3, r2
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	4413      	add	r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	4423      	add	r3, r4
 8001610:	3308      	adds	r3, #8
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	889b      	ldrh	r3, [r3, #4]
 8001616:	3307      	adds	r3, #7
 8001618:	2b00      	cmp	r3, #0
 800161a:	da00      	bge.n	800161e <BSP_LCD_DisplayChar+0x66>
 800161c:	3307      	adds	r3, #7
 800161e:	10db      	asrs	r3, r3, #3
 8001620:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001624:	18ca      	adds	r2, r1, r3
 8001626:	88b9      	ldrh	r1, [r7, #4]
 8001628:	88fb      	ldrh	r3, [r7, #6]
 800162a:	4618      	mov	r0, r3
 800162c:	f000 fc66 	bl	8001efc <DrawChar>
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	bd90      	pop	{r4, r7, pc}
 8001638:	2000018c 	.word	0x2000018c
 800163c:	20000190 	.word	0x20000190

08001640 <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8001640:	b5b0      	push	{r4, r5, r7, lr}
 8001642:	b088      	sub	sp, #32
 8001644:	af00      	add	r7, sp, #0
 8001646:	60ba      	str	r2, [r7, #8]
 8001648:	461a      	mov	r2, r3
 800164a:	4603      	mov	r3, r0
 800164c:	81fb      	strh	r3, [r7, #14]
 800164e:	460b      	mov	r3, r1
 8001650:	81bb      	strh	r3, [r7, #12]
 8001652:	4613      	mov	r3, r2
 8001654:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8001656:	2301      	movs	r3, #1
 8001658:	83fb      	strh	r3, [r7, #30]
 800165a:	2300      	movs	r3, #0
 800165c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 800165e:	2300      	movs	r3, #0
 8001660:	61bb      	str	r3, [r7, #24]
 8001662:	2300      	movs	r3, #0
 8001664:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) size ++ ;
 800166a:	e002      	b.n	8001672 <BSP_LCD_DisplayStringAt+0x32>
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	3301      	adds	r3, #1
 8001670:	61bb      	str	r3, [r7, #24]
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	1c5a      	adds	r2, r3, #1
 8001676:	617a      	str	r2, [r7, #20]
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1f6      	bne.n	800166c <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800167e:	f7ff fe99 	bl	80013b4 <BSP_LCD_GetXSize>
 8001682:	4b4f      	ldr	r3, [pc, #316]	; (80017c0 <BSP_LCD_DisplayStringAt+0x180>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	494f      	ldr	r1, [pc, #316]	; (80017c4 <BSP_LCD_DisplayStringAt+0x184>)
 8001688:	4613      	mov	r3, r2
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	4413      	add	r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	440b      	add	r3, r1
 8001692:	3308      	adds	r3, #8
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	889b      	ldrh	r3, [r3, #4]
 8001698:	fbb0 f3f3 	udiv	r3, r0, r3
 800169c:	613b      	str	r3, [r7, #16]

  switch (Mode)
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d01c      	beq.n	80016de <BSP_LCD_DisplayStringAt+0x9e>
 80016a4:	2b03      	cmp	r3, #3
 80016a6:	d017      	beq.n	80016d8 <BSP_LCD_DisplayStringAt+0x98>
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d12e      	bne.n	800170a <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	1ad1      	subs	r1, r2, r3
 80016b2:	4b43      	ldr	r3, [pc, #268]	; (80017c0 <BSP_LCD_DisplayStringAt+0x180>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	4843      	ldr	r0, [pc, #268]	; (80017c4 <BSP_LCD_DisplayStringAt+0x184>)
 80016b8:	4613      	mov	r3, r2
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	4413      	add	r3, r2
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	4403      	add	r3, r0
 80016c2:	3308      	adds	r3, #8
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	889b      	ldrh	r3, [r3, #4]
 80016c8:	fb03 f301 	mul.w	r3, r3, r1
 80016cc:	085b      	lsrs	r3, r3, #1
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	89fb      	ldrh	r3, [r7, #14]
 80016d2:	4413      	add	r3, r2
 80016d4:	83fb      	strh	r3, [r7, #30]
      break;
 80016d6:	e01b      	b.n	8001710 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 80016d8:	89fb      	ldrh	r3, [r7, #14]
 80016da:	83fb      	strh	r3, [r7, #30]
      break;
 80016dc:	e018      	b.n	8001710 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	b299      	uxth	r1, r3
 80016e6:	4b36      	ldr	r3, [pc, #216]	; (80017c0 <BSP_LCD_DisplayStringAt+0x180>)
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	4836      	ldr	r0, [pc, #216]	; (80017c4 <BSP_LCD_DisplayStringAt+0x184>)
 80016ec:	4613      	mov	r3, r2
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	4413      	add	r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4403      	add	r3, r0
 80016f6:	3308      	adds	r3, #8
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	889b      	ldrh	r3, [r3, #4]
 80016fc:	fb11 f303 	smulbb	r3, r1, r3
 8001700:	b29a      	uxth	r2, r3
 8001702:	89fb      	ldrh	r3, [r7, #14]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	83fb      	strh	r3, [r7, #30]
      break;
 8001708:	e002      	b.n	8001710 <BSP_LCD_DisplayStringAt+0xd0>
    }
  default:
    {
      refcolumn = Xpos;
 800170a:	89fb      	ldrh	r3, [r7, #14]
 800170c:	83fb      	strh	r3, [r7, #30]
      break;
 800170e:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8001710:	8bfb      	ldrh	r3, [r7, #30]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d003      	beq.n	800171e <BSP_LCD_DisplayStringAt+0xde>
 8001716:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800171a:	2b00      	cmp	r3, #0
 800171c:	da1d      	bge.n	800175a <BSP_LCD_DisplayStringAt+0x11a>
  {
    refcolumn = 1;
 800171e:	2301      	movs	r3, #1
 8001720:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001722:	e01a      	b.n	800175a <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	781a      	ldrb	r2, [r3, #0]
 8001728:	89b9      	ldrh	r1, [r7, #12]
 800172a:	8bfb      	ldrh	r3, [r7, #30]
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff ff43 	bl	80015b8 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8001732:	4b23      	ldr	r3, [pc, #140]	; (80017c0 <BSP_LCD_DisplayStringAt+0x180>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	4923      	ldr	r1, [pc, #140]	; (80017c4 <BSP_LCD_DisplayStringAt+0x184>)
 8001738:	4613      	mov	r3, r2
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	4413      	add	r3, r2
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	440b      	add	r3, r1
 8001742:	3308      	adds	r3, #8
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	889a      	ldrh	r2, [r3, #4]
 8001748:	8bfb      	ldrh	r3, [r7, #30]
 800174a:	4413      	add	r3, r2
 800174c:	83fb      	strh	r3, [r7, #30]

    /* Point on the next character */
    Text++;
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	3301      	adds	r3, #1
 8001752:	60bb      	str	r3, [r7, #8]
    i++;
 8001754:	8bbb      	ldrh	r3, [r7, #28]
 8001756:	3301      	adds	r3, #1
 8001758:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2b00      	cmp	r3, #0
 8001760:	bf14      	ite	ne
 8001762:	2301      	movne	r3, #1
 8001764:	2300      	moveq	r3, #0
 8001766:	b2dc      	uxtb	r4, r3
 8001768:	f7ff fe24 	bl	80013b4 <BSP_LCD_GetXSize>
 800176c:	4605      	mov	r5, r0
 800176e:	8bb9      	ldrh	r1, [r7, #28]
 8001770:	4b13      	ldr	r3, [pc, #76]	; (80017c0 <BSP_LCD_DisplayStringAt+0x180>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	4813      	ldr	r0, [pc, #76]	; (80017c4 <BSP_LCD_DisplayStringAt+0x184>)
 8001776:	4613      	mov	r3, r2
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	4413      	add	r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	4403      	add	r3, r0
 8001780:	3308      	adds	r3, #8
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	889b      	ldrh	r3, [r3, #4]
 8001786:	fb03 f301 	mul.w	r3, r3, r1
 800178a:	1aeb      	subs	r3, r5, r3
 800178c:	b299      	uxth	r1, r3
 800178e:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <BSP_LCD_DisplayStringAt+0x180>)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	480c      	ldr	r0, [pc, #48]	; (80017c4 <BSP_LCD_DisplayStringAt+0x184>)
 8001794:	4613      	mov	r3, r2
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	4413      	add	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4403      	add	r3, r0
 800179e:	3308      	adds	r3, #8
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	889b      	ldrh	r3, [r3, #4]
 80017a4:	4299      	cmp	r1, r3
 80017a6:	bf2c      	ite	cs
 80017a8:	2301      	movcs	r3, #1
 80017aa:	2300      	movcc	r3, #0
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	4023      	ands	r3, r4
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1b6      	bne.n	8001724 <BSP_LCD_DisplayStringAt+0xe4>
  }

}
 80017b6:	bf00      	nop
 80017b8:	3720      	adds	r7, #32
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bdb0      	pop	{r4, r5, r7, pc}
 80017be:	bf00      	nop
 80017c0:	2000018c 	.word	0x2000018c
 80017c4:	20000190 	.word	0x20000190

080017c8 <BSP_LCD_DrawHLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80017c8:	b5b0      	push	{r4, r5, r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af02      	add	r7, sp, #8
 80017ce:	4603      	mov	r3, r0
 80017d0:	80fb      	strh	r3, [r7, #6]
 80017d2:	460b      	mov	r3, r1
 80017d4:	80bb      	strh	r3, [r7, #4]
 80017d6:	4613      	mov	r3, r2
 80017d8:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80017de:	4b16      	ldr	r3, [pc, #88]	; (8001838 <BSP_LCD_DrawHLine+0x70>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a16      	ldr	r2, [pc, #88]	; (800183c <BSP_LCD_DrawHLine+0x74>)
 80017e4:	2134      	movs	r1, #52	; 0x34
 80017e6:	fb01 f303 	mul.w	r3, r1, r3
 80017ea:	4413      	add	r3, r2
 80017ec:	335c      	adds	r3, #92	; 0x5c
 80017ee:	681c      	ldr	r4, [r3, #0]
 80017f0:	f7ff fde0 	bl	80013b4 <BSP_LCD_GetXSize>
 80017f4:	4602      	mov	r2, r0
 80017f6:	88bb      	ldrh	r3, [r7, #4]
 80017f8:	fb03 f202 	mul.w	r2, r3, r2
 80017fc:	88fb      	ldrh	r3, [r7, #6]
 80017fe:	4413      	add	r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	4423      	add	r3, r4
 8001804:	60fb      	str	r3, [r7, #12]

  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8001806:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <BSP_LCD_DrawHLine+0x70>)
 8001808:	6818      	ldr	r0, [r3, #0]
 800180a:	68fc      	ldr	r4, [r7, #12]
 800180c:	887d      	ldrh	r5, [r7, #2]
 800180e:	4b0a      	ldr	r3, [pc, #40]	; (8001838 <BSP_LCD_DrawHLine+0x70>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	490b      	ldr	r1, [pc, #44]	; (8001840 <BSP_LCD_DrawHLine+0x78>)
 8001814:	4613      	mov	r3, r2
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	4413      	add	r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	440b      	add	r3, r1
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	9301      	str	r3, [sp, #4]
 8001822:	2300      	movs	r3, #0
 8001824:	9300      	str	r3, [sp, #0]
 8001826:	2301      	movs	r3, #1
 8001828:	462a      	mov	r2, r5
 800182a:	4621      	mov	r1, r4
 800182c:	f000 fc1e 	bl	800206c <LL_FillBuffer>
}
 8001830:	bf00      	nop
 8001832:	3710      	adds	r7, #16
 8001834:	46bd      	mov	sp, r7
 8001836:	bdb0      	pop	{r4, r5, r7, pc}
 8001838:	2000018c 	.word	0x2000018c
 800183c:	20000384 	.word	0x20000384
 8001840:	20000190 	.word	0x20000190

08001844 <BSP_LCD_DrawCircle>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8001844:	b590      	push	{r4, r7, lr}
 8001846:	b087      	sub	sp, #28
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	80fb      	strh	r3, [r7, #6]
 800184e:	460b      	mov	r3, r1
 8001850:	80bb      	strh	r3, [r7, #4]
 8001852:	4613      	mov	r3, r2
 8001854:	807b      	strh	r3, [r7, #2]
  int32_t   D;    /* Decision Variable */
  uint32_t  CurX; /* Current X Value */
  uint32_t  CurY; /* Current Y Value */

  D = 3 - (Radius << 1);
 8001856:	887b      	ldrh	r3, [r7, #2]
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	f1c3 0303 	rsb	r3, r3, #3
 800185e:	617b      	str	r3, [r7, #20]
  CurX = 0;
 8001860:	2300      	movs	r3, #0
 8001862:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 8001864:	887b      	ldrh	r3, [r7, #2]
 8001866:	60fb      	str	r3, [r7, #12]

  while (CurX <= CurY)
 8001868:	e0cf      	b.n	8001a0a <BSP_LCD_DrawCircle+0x1c6>
  {
    BSP_LCD_DrawPixel((Xpos + CurX), (Ypos - CurY), DrawProp[ActiveLayer].TextColor);
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	b29a      	uxth	r2, r3
 800186e:	88fb      	ldrh	r3, [r7, #6]
 8001870:	4413      	add	r3, r2
 8001872:	b298      	uxth	r0, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	b29b      	uxth	r3, r3
 8001878:	88ba      	ldrh	r2, [r7, #4]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	b29c      	uxth	r4, r3
 800187e:	4b67      	ldr	r3, [pc, #412]	; (8001a1c <BSP_LCD_DrawCircle+0x1d8>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	4967      	ldr	r1, [pc, #412]	; (8001a20 <BSP_LCD_DrawCircle+0x1dc>)
 8001884:	4613      	mov	r3, r2
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	4413      	add	r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	440b      	add	r3, r1
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	461a      	mov	r2, r3
 8001892:	4621      	mov	r1, r4
 8001894:	f000 fb0c 	bl	8001eb0 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurX), (Ypos - CurY), DrawProp[ActiveLayer].TextColor);
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	b29b      	uxth	r3, r3
 800189c:	88fa      	ldrh	r2, [r7, #6]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	b298      	uxth	r0, r3
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	88ba      	ldrh	r2, [r7, #4]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	b29c      	uxth	r4, r3
 80018ac:	4b5b      	ldr	r3, [pc, #364]	; (8001a1c <BSP_LCD_DrawCircle+0x1d8>)
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	495b      	ldr	r1, [pc, #364]	; (8001a20 <BSP_LCD_DrawCircle+0x1dc>)
 80018b2:	4613      	mov	r3, r2
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	4413      	add	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	440b      	add	r3, r1
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	461a      	mov	r2, r3
 80018c0:	4621      	mov	r1, r4
 80018c2:	f000 faf5 	bl	8001eb0 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + CurY), (Ypos - CurX), DrawProp[ActiveLayer].TextColor);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	88fb      	ldrh	r3, [r7, #6]
 80018cc:	4413      	add	r3, r2
 80018ce:	b298      	uxth	r0, r3
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	88ba      	ldrh	r2, [r7, #4]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	b29c      	uxth	r4, r3
 80018da:	4b50      	ldr	r3, [pc, #320]	; (8001a1c <BSP_LCD_DrawCircle+0x1d8>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	4950      	ldr	r1, [pc, #320]	; (8001a20 <BSP_LCD_DrawCircle+0x1dc>)
 80018e0:	4613      	mov	r3, r2
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	4413      	add	r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	440b      	add	r3, r1
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	461a      	mov	r2, r3
 80018ee:	4621      	mov	r1, r4
 80018f0:	f000 fade 	bl	8001eb0 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurY), (Ypos - CurX), DrawProp[ActiveLayer].TextColor);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	88fa      	ldrh	r2, [r7, #6]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	b298      	uxth	r0, r3
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	b29b      	uxth	r3, r3
 8001902:	88ba      	ldrh	r2, [r7, #4]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	b29c      	uxth	r4, r3
 8001908:	4b44      	ldr	r3, [pc, #272]	; (8001a1c <BSP_LCD_DrawCircle+0x1d8>)
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	4944      	ldr	r1, [pc, #272]	; (8001a20 <BSP_LCD_DrawCircle+0x1dc>)
 800190e:	4613      	mov	r3, r2
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	4413      	add	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	440b      	add	r3, r1
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	461a      	mov	r2, r3
 800191c:	4621      	mov	r1, r4
 800191e:	f000 fac7 	bl	8001eb0 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + CurX), (Ypos + CurY), DrawProp[ActiveLayer].TextColor);
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	b29a      	uxth	r2, r3
 8001926:	88fb      	ldrh	r3, [r7, #6]
 8001928:	4413      	add	r3, r2
 800192a:	b298      	uxth	r0, r3
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	b29a      	uxth	r2, r3
 8001930:	88bb      	ldrh	r3, [r7, #4]
 8001932:	4413      	add	r3, r2
 8001934:	b29c      	uxth	r4, r3
 8001936:	4b39      	ldr	r3, [pc, #228]	; (8001a1c <BSP_LCD_DrawCircle+0x1d8>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	4939      	ldr	r1, [pc, #228]	; (8001a20 <BSP_LCD_DrawCircle+0x1dc>)
 800193c:	4613      	mov	r3, r2
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	4413      	add	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	440b      	add	r3, r1
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	461a      	mov	r2, r3
 800194a:	4621      	mov	r1, r4
 800194c:	f000 fab0 	bl	8001eb0 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurX), (Ypos + CurY), DrawProp[ActiveLayer].TextColor);
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	b29b      	uxth	r3, r3
 8001954:	88fa      	ldrh	r2, [r7, #6]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	b298      	uxth	r0, r3
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	b29a      	uxth	r2, r3
 800195e:	88bb      	ldrh	r3, [r7, #4]
 8001960:	4413      	add	r3, r2
 8001962:	b29c      	uxth	r4, r3
 8001964:	4b2d      	ldr	r3, [pc, #180]	; (8001a1c <BSP_LCD_DrawCircle+0x1d8>)
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	492d      	ldr	r1, [pc, #180]	; (8001a20 <BSP_LCD_DrawCircle+0x1dc>)
 800196a:	4613      	mov	r3, r2
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	4413      	add	r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	440b      	add	r3, r1
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	461a      	mov	r2, r3
 8001978:	4621      	mov	r1, r4
 800197a:	f000 fa99 	bl	8001eb0 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + CurY), (Ypos + CurX), DrawProp[ActiveLayer].TextColor);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	b29a      	uxth	r2, r3
 8001982:	88fb      	ldrh	r3, [r7, #6]
 8001984:	4413      	add	r3, r2
 8001986:	b298      	uxth	r0, r3
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	b29a      	uxth	r2, r3
 800198c:	88bb      	ldrh	r3, [r7, #4]
 800198e:	4413      	add	r3, r2
 8001990:	b29c      	uxth	r4, r3
 8001992:	4b22      	ldr	r3, [pc, #136]	; (8001a1c <BSP_LCD_DrawCircle+0x1d8>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	4922      	ldr	r1, [pc, #136]	; (8001a20 <BSP_LCD_DrawCircle+0x1dc>)
 8001998:	4613      	mov	r3, r2
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	4413      	add	r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	440b      	add	r3, r1
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	461a      	mov	r2, r3
 80019a6:	4621      	mov	r1, r4
 80019a8:	f000 fa82 	bl	8001eb0 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurY), (Ypos + CurX), DrawProp[ActiveLayer].TextColor);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	88fa      	ldrh	r2, [r7, #6]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	b298      	uxth	r0, r3
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	88bb      	ldrh	r3, [r7, #4]
 80019bc:	4413      	add	r3, r2
 80019be:	b29c      	uxth	r4, r3
 80019c0:	4b16      	ldr	r3, [pc, #88]	; (8001a1c <BSP_LCD_DrawCircle+0x1d8>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	4916      	ldr	r1, [pc, #88]	; (8001a20 <BSP_LCD_DrawCircle+0x1dc>)
 80019c6:	4613      	mov	r3, r2
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	4413      	add	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	440b      	add	r3, r1
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	461a      	mov	r2, r3
 80019d4:	4621      	mov	r1, r4
 80019d6:	f000 fa6b 	bl	8001eb0 <BSP_LCD_DrawPixel>

    if (D < 0)
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	da06      	bge.n	80019ee <BSP_LCD_DrawCircle+0x1aa>
    {
      D += (CurX << 2) + 6;
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	009a      	lsls	r2, r3, #2
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	4413      	add	r3, r2
 80019e8:	3306      	adds	r3, #6
 80019ea:	617b      	str	r3, [r7, #20]
 80019ec:	e00a      	b.n	8001a04 <BSP_LCD_DrawCircle+0x1c0>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	009a      	lsls	r2, r3, #2
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	4413      	add	r3, r2
 80019fa:	330a      	adds	r3, #10
 80019fc:	617b      	str	r3, [r7, #20]
      CurY--;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	3b01      	subs	r3, #1
 8001a02:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	3301      	adds	r3, #1
 8001a08:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	f67f af2b 	bls.w	800186a <BSP_LCD_DrawCircle+0x26>
  }
}
 8001a14:	bf00      	nop
 8001a16:	371c      	adds	r7, #28
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd90      	pop	{r4, r7, pc}
 8001a1c:	2000018c 	.word	0x2000018c
 8001a20:	20000190 	.word	0x20000190

08001a24 <BSP_LCD_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 8001a24:	b590      	push	{r4, r7, lr}
 8001a26:	b08b      	sub	sp, #44	; 0x2c
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 8001a30:	2300      	movs	r3, #0
 8001a32:	627b      	str	r3, [r7, #36]	; 0x24
 8001a34:	2300      	movs	r3, #0
 8001a36:	61bb      	str	r3, [r7, #24]
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	613b      	str	r3, [r7, #16]
  uint32_t Address;
  uint32_t InputColorMode = 0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	61fb      	str	r3, [r7, #28]

  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	330a      	adds	r3, #10
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	330b      	adds	r3, #11
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	021b      	lsls	r3, r3, #8
 8001a54:	441a      	add	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	330c      	adds	r3, #12
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	041b      	lsls	r3, r3, #16
 8001a5e:	441a      	add	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	330d      	adds	r3, #13
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	061b      	lsls	r3, r3, #24
 8001a68:	4413      	add	r3, r2
 8001a6a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3312      	adds	r3, #18
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	461a      	mov	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3313      	adds	r3, #19
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	021b      	lsls	r3, r3, #8
 8001a7c:	441a      	add	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	3314      	adds	r3, #20
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	041b      	lsls	r3, r3, #16
 8001a86:	441a      	add	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3315      	adds	r3, #21
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	061b      	lsls	r3, r3, #24
 8001a90:	4413      	add	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	3316      	adds	r3, #22
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3317      	adds	r3, #23
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	021b      	lsls	r3, r3, #8
 8001aa4:	441a      	add	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	3318      	adds	r3, #24
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	041b      	lsls	r3, r3, #16
 8001aae:	441a      	add	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3319      	adds	r3, #25
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	061b      	lsls	r3, r3, #24
 8001ab8:	4413      	add	r3, r2
 8001aba:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	331c      	adds	r3, #28
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	331d      	adds	r3, #29
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	021b      	lsls	r3, r3, #8
 8001acc:	4413      	add	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8001ad0:	4b2a      	ldr	r3, [pc, #168]	; (8001b7c <BSP_LCD_DrawBitmap+0x158>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a2a      	ldr	r2, [pc, #168]	; (8001b80 <BSP_LCD_DrawBitmap+0x15c>)
 8001ad6:	2134      	movs	r1, #52	; 0x34
 8001ad8:	fb01 f303 	mul.w	r3, r1, r3
 8001adc:	4413      	add	r3, r2
 8001ade:	335c      	adds	r3, #92	; 0x5c
 8001ae0:	681c      	ldr	r4, [r3, #0]
 8001ae2:	f7ff fc67 	bl	80013b4 <BSP_LCD_GetXSize>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	fb03 f202 	mul.w	r2, r3, r2
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	4413      	add	r3, r2
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	4423      	add	r3, r4
 8001af6:	623b      	str	r3, [r7, #32]

  /* Get the layer pixel format */
  if ((bit_pixel/8) == 4)
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	3b20      	subs	r3, #32
 8001afc:	2b07      	cmp	r3, #7
 8001afe:	d802      	bhi.n	8001b06 <BSP_LCD_DrawBitmap+0xe2>
  {
    InputColorMode = DMA2D_INPUT_ARGB8888;
 8001b00:	2300      	movs	r3, #0
 8001b02:	61fb      	str	r3, [r7, #28]
 8001b04:	e008      	b.n	8001b18 <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	3b10      	subs	r3, #16
 8001b0a:	2b07      	cmp	r3, #7
 8001b0c:	d802      	bhi.n	8001b14 <BSP_LCD_DrawBitmap+0xf0>
  {
    InputColorMode = DMA2D_INPUT_RGB565;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	61fb      	str	r3, [r7, #28]
 8001b12:	e001      	b.n	8001b18 <BSP_LCD_DrawBitmap+0xf4>
  }
  else
  {
    InputColorMode = DMA2D_INPUT_RGB888;
 8001b14:	2301      	movs	r3, #1
 8001b16:	61fb      	str	r3, [r7, #28]
  }

  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	fb02 f303 	mul.w	r3, r2, r3
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	08d2      	lsrs	r2, r2, #3
 8001b26:	fb02 f203 	mul.w	r2, r2, r3
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2c:	4413      	add	r3, r2
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	4413      	add	r3, r2
 8001b32:	607b      	str	r3, [r7, #4]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8001b34:	2300      	movs	r3, #0
 8001b36:	627b      	str	r3, [r7, #36]	; 0x24
 8001b38:	e018      	b.n	8001b6c <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)Address, width, InputColorMode);
 8001b3a:	6a39      	ldr	r1, [r7, #32]
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 facb 	bl	80020dc <LL_ConvertLineToARGB8888>

    /* Increment the source and destination buffers */
    Address+=  (BSP_LCD_GetXSize()*4);
 8001b46:	f7ff fc35 	bl	80013b4 <BSP_LCD_GetXSize>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	6a3a      	ldr	r2, [r7, #32]
 8001b50:	4413      	add	r3, r2
 8001b52:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	08db      	lsrs	r3, r3, #3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	fb02 f303 	mul.w	r3, r2, r3
 8001b5e:	425b      	negs	r3, r3
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	4413      	add	r3, r2
 8001b64:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	3301      	adds	r3, #1
 8001b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d3e2      	bcc.n	8001b3a <BSP_LCD_DrawBitmap+0x116>
  }
}
 8001b74:	bf00      	nop
 8001b76:	372c      	adds	r7, #44	; 0x2c
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd90      	pop	{r4, r7, pc}
 8001b7c:	2000018c 	.word	0x2000018c
 8001b80:	20000384 	.word	0x20000384

08001b84 <BSP_LCD_FillRect>:
  * @param  Ypos: Y position
  * @param  Width: Rectangle width
  * @param  Height: Rectangle height
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b88:	b086      	sub	sp, #24
 8001b8a:	af02      	add	r7, sp, #8
 8001b8c:	4604      	mov	r4, r0
 8001b8e:	4608      	mov	r0, r1
 8001b90:	4611      	mov	r1, r2
 8001b92:	461a      	mov	r2, r3
 8001b94:	4623      	mov	r3, r4
 8001b96:	80fb      	strh	r3, [r7, #6]
 8001b98:	4603      	mov	r3, r0
 8001b9a:	80bb      	strh	r3, [r7, #4]
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	807b      	strh	r3, [r7, #2]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	803b      	strh	r3, [r7, #0]
  uint32_t  Xaddress = 0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001ba8:	4b20      	ldr	r3, [pc, #128]	; (8001c2c <BSP_LCD_FillRect+0xa8>)
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	4920      	ldr	r1, [pc, #128]	; (8001c30 <BSP_LCD_FillRect+0xac>)
 8001bae:	4613      	mov	r3, r2
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	4413      	add	r3, r2
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	440b      	add	r3, r1
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff fc72 	bl	80014a4 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001bc0:	4b1a      	ldr	r3, [pc, #104]	; (8001c2c <BSP_LCD_FillRect+0xa8>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a1b      	ldr	r2, [pc, #108]	; (8001c34 <BSP_LCD_FillRect+0xb0>)
 8001bc6:	2134      	movs	r1, #52	; 0x34
 8001bc8:	fb01 f303 	mul.w	r3, r1, r3
 8001bcc:	4413      	add	r3, r2
 8001bce:	335c      	adds	r3, #92	; 0x5c
 8001bd0:	681c      	ldr	r4, [r3, #0]
 8001bd2:	f7ff fbef 	bl	80013b4 <BSP_LCD_GetXSize>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	88bb      	ldrh	r3, [r7, #4]
 8001bda:	fb03 f202 	mul.w	r2, r3, r2
 8001bde:	88fb      	ldrh	r3, [r7, #6]
 8001be0:	4413      	add	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	4423      	add	r3, r4
 8001be6:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001be8:	4b10      	ldr	r3, [pc, #64]	; (8001c2c <BSP_LCD_FillRect+0xa8>)
 8001bea:	681c      	ldr	r4, [r3, #0]
 8001bec:	68fd      	ldr	r5, [r7, #12]
 8001bee:	887e      	ldrh	r6, [r7, #2]
 8001bf0:	f8b7 8000 	ldrh.w	r8, [r7]
 8001bf4:	f7ff fbde 	bl	80013b4 <BSP_LCD_GetXSize>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	887b      	ldrh	r3, [r7, #2]
 8001bfc:	1ad1      	subs	r1, r2, r3
 8001bfe:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <BSP_LCD_FillRect+0xa8>)
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	480b      	ldr	r0, [pc, #44]	; (8001c30 <BSP_LCD_FillRect+0xac>)
 8001c04:	4613      	mov	r3, r2
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	4413      	add	r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	4403      	add	r3, r0
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	9301      	str	r3, [sp, #4]
 8001c12:	9100      	str	r1, [sp, #0]
 8001c14:	4643      	mov	r3, r8
 8001c16:	4632      	mov	r2, r6
 8001c18:	4629      	mov	r1, r5
 8001c1a:	4620      	mov	r0, r4
 8001c1c:	f000 fa26 	bl	800206c <LL_FillBuffer>
}
 8001c20:	bf00      	nop
 8001c22:	3710      	adds	r7, #16
 8001c24:	46bd      	mov	sp, r7
 8001c26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c2a:	bf00      	nop
 8001c2c:	2000018c 	.word	0x2000018c
 8001c30:	20000190 	.word	0x20000190
 8001c34:	20000384 	.word	0x20000384

08001c38 <BSP_LCD_FillCircle>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	80fb      	strh	r3, [r7, #6]
 8001c42:	460b      	mov	r3, r1
 8001c44:	80bb      	strh	r3, [r7, #4]
 8001c46:	4613      	mov	r3, r2
 8001c48:	807b      	strh	r3, [r7, #2]
  int32_t  D;     /* Decision Variable */
  uint32_t  CurX; /* Current X Value */
  uint32_t  CurY; /* Current Y Value */

  D = 3 - (Radius << 1);
 8001c4a:	887b      	ldrh	r3, [r7, #2]
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	f1c3 0303 	rsb	r3, r3, #3
 8001c52:	617b      	str	r3, [r7, #20]

  CurX = 0;
 8001c54:	2300      	movs	r3, #0
 8001c56:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 8001c58:	887b      	ldrh	r3, [r7, #2]
 8001c5a:	60fb      	str	r3, [r7, #12]

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001c5c:	4b44      	ldr	r3, [pc, #272]	; (8001d70 <BSP_LCD_FillCircle+0x138>)
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	4944      	ldr	r1, [pc, #272]	; (8001d74 <BSP_LCD_FillCircle+0x13c>)
 8001c62:	4613      	mov	r3, r2
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	4413      	add	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	440b      	add	r3, r1
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff fc18 	bl	80014a4 <BSP_LCD_SetTextColor>

  while (CurX <= CurY)
 8001c74:	e061      	b.n	8001d3a <BSP_LCD_FillCircle+0x102>
  {
    if(CurY > 0)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d021      	beq.n	8001cc0 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - CurY, Ypos + CurX, 2*CurY);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	88fa      	ldrh	r2, [r7, #6]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	b298      	uxth	r0, r3
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	88bb      	ldrh	r3, [r7, #4]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	b299      	uxth	r1, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	461a      	mov	r2, r3
 8001c9a:	f7ff fd95 	bl	80017c8 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - CurY, Ypos - CurX, 2*CurY);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	88fa      	ldrh	r2, [r7, #6]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	b298      	uxth	r0, r3
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	88ba      	ldrh	r2, [r7, #4]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	b299      	uxth	r1, r3
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	461a      	mov	r2, r3
 8001cbc:	f7ff fd84 	bl	80017c8 <BSP_LCD_DrawHLine>
    }

    if(CurX > 0)
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d021      	beq.n	8001d0a <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - CurX, Ypos - CurY, 2*CurX);
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	88fa      	ldrh	r2, [r7, #6]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	b298      	uxth	r0, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	88ba      	ldrh	r2, [r7, #4]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	b299      	uxth	r1, r3
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	f7ff fd70 	bl	80017c8 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - CurX, Ypos + CurY, 2*CurX);
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	88fa      	ldrh	r2, [r7, #6]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	b298      	uxth	r0, r3
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	88bb      	ldrh	r3, [r7, #4]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	b299      	uxth	r1, r3
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	461a      	mov	r2, r3
 8001d06:	f7ff fd5f 	bl	80017c8 <BSP_LCD_DrawHLine>
    }
    if (D < 0)
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	da06      	bge.n	8001d1e <BSP_LCD_FillCircle+0xe6>
    {
      D += (CurX << 2) + 6;
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	009a      	lsls	r2, r3, #2
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	4413      	add	r3, r2
 8001d18:	3306      	adds	r3, #6
 8001d1a:	617b      	str	r3, [r7, #20]
 8001d1c:	e00a      	b.n	8001d34 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	009a      	lsls	r2, r3, #2
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	4413      	add	r3, r2
 8001d2a:	330a      	adds	r3, #10
 8001d2c:	617b      	str	r3, [r7, #20]
      CurY--;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	3b01      	subs	r3, #1
 8001d32:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	3301      	adds	r3, #1
 8001d38:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d999      	bls.n	8001c76 <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001d42:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <BSP_LCD_FillCircle+0x138>)
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	490b      	ldr	r1, [pc, #44]	; (8001d74 <BSP_LCD_FillCircle+0x13c>)
 8001d48:	4613      	mov	r3, r2
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	4413      	add	r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	440b      	add	r3, r1
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff fba5 	bl	80014a4 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8001d5a:	887a      	ldrh	r2, [r7, #2]
 8001d5c:	88b9      	ldrh	r1, [r7, #4]
 8001d5e:	88fb      	ldrh	r3, [r7, #6]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff fd6f 	bl	8001844 <BSP_LCD_DrawCircle>
}
 8001d66:	bf00      	nop
 8001d68:	3718      	adds	r7, #24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	2000018c 	.word	0x2000018c
 8001d74:	20000190 	.word	0x20000190

08001d78 <DSI_IO_WriteCmd>:
  *                 If inferior to 2, a long write command is performed else short.
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af02      	add	r7, sp, #8
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d80d      	bhi.n	8001da4 <DSI_IO_WriteCmd+0x2c>
  {
   HAL_DSI_ShortWrite(&hdsi_discovery, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	3301      	adds	r3, #1
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	9300      	str	r3, [sp, #0]
 8001d96:	4613      	mov	r3, r2
 8001d98:	2215      	movs	r2, #21
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	480a      	ldr	r0, [pc, #40]	; (8001dc8 <DSI_IO_WriteCmd+0x50>)
 8001d9e:	f002 ff9b 	bl	8004cd8 <HAL_DSI_ShortWrite>
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  } 
}
 8001da2:	e00d      	b.n	8001dc0 <DSI_IO_WriteCmd+0x48>
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4413      	add	r3, r2
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	461a      	mov	r2, r3
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	9301      	str	r3, [sp, #4]
 8001db2:	9200      	str	r2, [sp, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2239      	movs	r2, #57	; 0x39
 8001db8:	2100      	movs	r1, #0
 8001dba:	4803      	ldr	r0, [pc, #12]	; (8001dc8 <DSI_IO_WriteCmd+0x50>)
 8001dbc:	f002 ffae 	bl	8004d1c <HAL_DSI_LongWrite>
}
 8001dc0:	bf00      	nop
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	2000042c 	.word	0x2000042c

08001dcc <LCD_IO_GetID>:
  * @brief  Returns the ID of connected screen by checking the HDMI
  *        (adv7533 component) ID or LCD DSI (via TS ID) ID.
  * @retval LCD ID
  */
static uint16_t LCD_IO_GetID(void)
{ 
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  else
  {
    return 0;
  }
#else 
  return LCD_DSI_ID; 
 8001dd0:	2311      	movs	r3, #17
#endif /* USE_LCD_HDMI */
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <BSP_LCD_MspInit>:
/**
  * @brief  Initialize the BSP LCD Msp.
  * Application can surcharge if needed this function implementation
  */
__weak void BSP_LCD_MspInit(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001de2:	4b32      	ldr	r3, [pc, #200]	; (8001eac <BSP_LCD_MspInit+0xd0>)
 8001de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de6:	4a31      	ldr	r2, [pc, #196]	; (8001eac <BSP_LCD_MspInit+0xd0>)
 8001de8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001dec:	6453      	str	r3, [r2, #68]	; 0x44
 8001dee:	4b2f      	ldr	r3, [pc, #188]	; (8001eac <BSP_LCD_MspInit+0xd0>)
 8001df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	68fb      	ldr	r3, [r7, #12]

  /** @brief Toggle Sw reset of LTDC IP */
  __HAL_RCC_LTDC_FORCE_RESET();
 8001dfa:	4b2c      	ldr	r3, [pc, #176]	; (8001eac <BSP_LCD_MspInit+0xd0>)
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfe:	4a2b      	ldr	r2, [pc, #172]	; (8001eac <BSP_LCD_MspInit+0xd0>)
 8001e00:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001e04:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 8001e06:	4b29      	ldr	r3, [pc, #164]	; (8001eac <BSP_LCD_MspInit+0xd0>)
 8001e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0a:	4a28      	ldr	r2, [pc, #160]	; (8001eac <BSP_LCD_MspInit+0xd0>)
 8001e0c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001e10:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief Enable the DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8001e12:	4b26      	ldr	r3, [pc, #152]	; (8001eac <BSP_LCD_MspInit+0xd0>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	4a25      	ldr	r2, [pc, #148]	; (8001eac <BSP_LCD_MspInit+0xd0>)
 8001e18:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1e:	4b23      	ldr	r3, [pc, #140]	; (8001eac <BSP_LCD_MspInit+0xd0>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e26:	60bb      	str	r3, [r7, #8]
 8001e28:	68bb      	ldr	r3, [r7, #8]

  /** @brief Toggle Sw reset of DMA2D IP */
  __HAL_RCC_DMA2D_FORCE_RESET();
 8001e2a:	4b20      	ldr	r3, [pc, #128]	; (8001eac <BSP_LCD_MspInit+0xd0>)
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	4a1f      	ldr	r2, [pc, #124]	; (8001eac <BSP_LCD_MspInit+0xd0>)
 8001e30:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e34:	6113      	str	r3, [r2, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 8001e36:	4b1d      	ldr	r3, [pc, #116]	; (8001eac <BSP_LCD_MspInit+0xd0>)
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	4a1c      	ldr	r2, [pc, #112]	; (8001eac <BSP_LCD_MspInit+0xd0>)
 8001e3c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001e40:	6113      	str	r3, [r2, #16]

  /** @brief Enable DSI Host and wrapper clocks */
  __HAL_RCC_DSI_CLK_ENABLE();
 8001e42:	4b1a      	ldr	r3, [pc, #104]	; (8001eac <BSP_LCD_MspInit+0xd0>)
 8001e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e46:	4a19      	ldr	r2, [pc, #100]	; (8001eac <BSP_LCD_MspInit+0xd0>)
 8001e48:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e4e:	4b17      	ldr	r3, [pc, #92]	; (8001eac <BSP_LCD_MspInit+0xd0>)
 8001e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e56:	607b      	str	r3, [r7, #4]
 8001e58:	687b      	ldr	r3, [r7, #4]

  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
 8001e5a:	4b14      	ldr	r3, [pc, #80]	; (8001eac <BSP_LCD_MspInit+0xd0>)
 8001e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5e:	4a13      	ldr	r2, [pc, #76]	; (8001eac <BSP_LCD_MspInit+0xd0>)
 8001e60:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001e64:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 8001e66:	4b11      	ldr	r3, [pc, #68]	; (8001eac <BSP_LCD_MspInit+0xd0>)
 8001e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6a:	4a10      	ldr	r2, [pc, #64]	; (8001eac <BSP_LCD_MspInit+0xd0>)
 8001e6c:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8001e70:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8001e72:	2200      	movs	r2, #0
 8001e74:	2103      	movs	r1, #3
 8001e76:	2058      	movs	r0, #88	; 0x58
 8001e78:	f001 fb0b 	bl	8003492 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001e7c:	2058      	movs	r0, #88	; 0x58
 8001e7e:	f001 fb24 	bl	80034ca <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 8001e82:	2200      	movs	r2, #0
 8001e84:	2103      	movs	r1, #3
 8001e86:	205a      	movs	r0, #90	; 0x5a
 8001e88:	f001 fb03 	bl	8003492 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001e8c:	205a      	movs	r0, #90	; 0x5a
 8001e8e:	f001 fb1c 	bl	80034ca <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 8001e92:	2200      	movs	r2, #0
 8001e94:	2103      	movs	r1, #3
 8001e96:	2062      	movs	r0, #98	; 0x62
 8001e98:	f001 fafb 	bl	8003492 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001e9c:	2062      	movs	r0, #98	; 0x62
 8001e9e:	f001 fb14 	bl	80034ca <HAL_NVIC_EnableIRQ>
}
 8001ea2:	bf00      	nop
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	40023800 	.word	0x40023800

08001eb0 <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8001eb0:	b5b0      	push	{r4, r5, r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	603a      	str	r2, [r7, #0]
 8001eba:	80fb      	strh	r3, [r7, #6]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001ec0:	4b0c      	ldr	r3, [pc, #48]	; (8001ef4 <BSP_LCD_DrawPixel+0x44>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a0c      	ldr	r2, [pc, #48]	; (8001ef8 <BSP_LCD_DrawPixel+0x48>)
 8001ec6:	2134      	movs	r1, #52	; 0x34
 8001ec8:	fb01 f303 	mul.w	r3, r1, r3
 8001ecc:	4413      	add	r3, r2
 8001ece:	335c      	adds	r3, #92	; 0x5c
 8001ed0:	681c      	ldr	r4, [r3, #0]
 8001ed2:	88bd      	ldrh	r5, [r7, #4]
 8001ed4:	f7ff fa6e 	bl	80013b4 <BSP_LCD_GetXSize>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	fb03 f205 	mul.w	r2, r3, r5
 8001ede:	88fb      	ldrh	r3, [r7, #6]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	4423      	add	r3, r4
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	6013      	str	r3, [r2, #0]
}
 8001eec:	bf00      	nop
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ef4:	2000018c 	.word	0x2000018c
 8001ef8:	20000384 	.word	0x20000384

08001efc <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b088      	sub	sp, #32
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4603      	mov	r3, r0
 8001f04:	603a      	str	r2, [r7, #0]
 8001f06:	80fb      	strh	r3, [r7, #6]
 8001f08:	460b      	mov	r3, r1
 8001f0a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	61fb      	str	r3, [r7, #28]
 8001f10:	2300      	movs	r3, #0
 8001f12:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[ActiveLayer].pFont->Height;
 8001f14:	4b53      	ldr	r3, [pc, #332]	; (8002064 <DrawChar+0x168>)
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	4953      	ldr	r1, [pc, #332]	; (8002068 <DrawChar+0x16c>)
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	4413      	add	r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	440b      	add	r3, r1
 8001f24:	3308      	adds	r3, #8
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	88db      	ldrh	r3, [r3, #6]
 8001f2a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8001f2c:	4b4d      	ldr	r3, [pc, #308]	; (8002064 <DrawChar+0x168>)
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	494d      	ldr	r1, [pc, #308]	; (8002068 <DrawChar+0x16c>)
 8001f32:	4613      	mov	r3, r2
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	4413      	add	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	440b      	add	r3, r1
 8001f3c:	3308      	adds	r3, #8
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	889b      	ldrh	r3, [r3, #4]
 8001f42:	823b      	strh	r3, [r7, #16]

  offset =  8 *((width + 7)/8) -  width ;
 8001f44:	8a3b      	ldrh	r3, [r7, #16]
 8001f46:	3307      	adds	r3, #7
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	da00      	bge.n	8001f4e <DrawChar+0x52>
 8001f4c:	3307      	adds	r3, #7
 8001f4e:	10db      	asrs	r3, r3, #3
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	8a3b      	ldrh	r3, [r7, #16]
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8001f5e:	2300      	movs	r3, #0
 8001f60:	61fb      	str	r3, [r7, #28]
 8001f62:	e076      	b.n	8002052 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8001f64:	8a3b      	ldrh	r3, [r7, #16]
 8001f66:	3307      	adds	r3, #7
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	da00      	bge.n	8001f6e <DrawChar+0x72>
 8001f6c:	3307      	adds	r3, #7
 8001f6e:	10db      	asrs	r3, r3, #3
 8001f70:	461a      	mov	r2, r3
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	fb03 f302 	mul.w	r3, r3, r2
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8001f7e:	8a3b      	ldrh	r3, [r7, #16]
 8001f80:	3307      	adds	r3, #7
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	da00      	bge.n	8001f88 <DrawChar+0x8c>
 8001f86:	3307      	adds	r3, #7
 8001f88:	10db      	asrs	r3, r3, #3
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d002      	beq.n	8001f94 <DrawChar+0x98>
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d004      	beq.n	8001f9c <DrawChar+0xa0>
 8001f92:	e00c      	b.n	8001fae <DrawChar+0xb2>
    {

    case 1:
      line =  pchar[0];
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	617b      	str	r3, [r7, #20]
      break;
 8001f9a:	e016      	b.n	8001fca <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	021b      	lsls	r3, r3, #8
 8001fa2:	68ba      	ldr	r2, [r7, #8]
 8001fa4:	3201      	adds	r2, #1
 8001fa6:	7812      	ldrb	r2, [r2, #0]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	617b      	str	r3, [r7, #20]
      break;
 8001fac:	e00d      	b.n	8001fca <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	041a      	lsls	r2, r3, #16
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	021b      	lsls	r3, r3, #8
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	68ba      	ldr	r2, [r7, #8]
 8001fc0:	3202      	adds	r2, #2
 8001fc2:	7812      	ldrb	r2, [r2, #0]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	617b      	str	r3, [r7, #20]
      break;
 8001fc8:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61bb      	str	r3, [r7, #24]
 8001fce:	e036      	b.n	800203e <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1)))
 8001fd0:	8a3a      	ldrh	r2, [r7, #16]
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	1ad2      	subs	r2, r2, r3
 8001fd6:	7bfb      	ldrb	r3, [r7, #15]
 8001fd8:	4413      	add	r3, r2
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	2201      	movs	r2, #1
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d012      	beq.n	8002012 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	88fb      	ldrh	r3, [r7, #6]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	b298      	uxth	r0, r3
 8001ff6:	4b1b      	ldr	r3, [pc, #108]	; (8002064 <DrawChar+0x168>)
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	491b      	ldr	r1, [pc, #108]	; (8002068 <DrawChar+0x16c>)
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	4413      	add	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	440b      	add	r3, r1
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	88bb      	ldrh	r3, [r7, #4]
 800200a:	4619      	mov	r1, r3
 800200c:	f7ff ff50 	bl	8001eb0 <BSP_LCD_DrawPixel>
 8002010:	e012      	b.n	8002038 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	b29a      	uxth	r2, r3
 8002016:	88fb      	ldrh	r3, [r7, #6]
 8002018:	4413      	add	r3, r2
 800201a:	b298      	uxth	r0, r3
 800201c:	4b11      	ldr	r3, [pc, #68]	; (8002064 <DrawChar+0x168>)
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	4911      	ldr	r1, [pc, #68]	; (8002068 <DrawChar+0x16c>)
 8002022:	4613      	mov	r3, r2
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	4413      	add	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	440b      	add	r3, r1
 800202c:	3304      	adds	r3, #4
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	88bb      	ldrh	r3, [r7, #4]
 8002032:	4619      	mov	r1, r3
 8002034:	f7ff ff3c 	bl	8001eb0 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	3301      	adds	r3, #1
 800203c:	61bb      	str	r3, [r7, #24]
 800203e:	8a3b      	ldrh	r3, [r7, #16]
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	429a      	cmp	r2, r3
 8002044:	d3c4      	bcc.n	8001fd0 <DrawChar+0xd4>
      }
    }
    Ypos++;
 8002046:	88bb      	ldrh	r3, [r7, #4]
 8002048:	3301      	adds	r3, #1
 800204a:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	3301      	adds	r3, #1
 8002050:	61fb      	str	r3, [r7, #28]
 8002052:	8a7b      	ldrh	r3, [r7, #18]
 8002054:	69fa      	ldr	r2, [r7, #28]
 8002056:	429a      	cmp	r2, r3
 8002058:	d384      	bcc.n	8001f64 <DrawChar+0x68>
  }
}
 800205a:	bf00      	nop
 800205c:	3720      	adds	r7, #32
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	2000018c 	.word	0x2000018c
 8002068:	20000190 	.word	0x20000190

0800206c <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af02      	add	r7, sp, #8
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
 8002078:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_discovery.Init.Mode         = DMA2D_R2M;
 800207a:	4b16      	ldr	r3, [pc, #88]	; (80020d4 <LL_FillBuffer+0x68>)
 800207c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002080:	605a      	str	r2, [r3, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 8002082:	4b14      	ldr	r3, [pc, #80]	; (80020d4 <LL_FillBuffer+0x68>)
 8002084:	2200      	movs	r2, #0
 8002086:	609a      	str	r2, [r3, #8]
  hdma2d_discovery.Init.OutputOffset = OffLine;
 8002088:	4a12      	ldr	r2, [pc, #72]	; (80020d4 <LL_FillBuffer+0x68>)
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	60d3      	str	r3, [r2, #12]

  hdma2d_discovery.Instance = DMA2D;
 800208e:	4b11      	ldr	r3, [pc, #68]	; (80020d4 <LL_FillBuffer+0x68>)
 8002090:	4a11      	ldr	r2, [pc, #68]	; (80020d8 <LL_FillBuffer+0x6c>)
 8002092:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 8002094:	480f      	ldr	r0, [pc, #60]	; (80020d4 <LL_FillBuffer+0x68>)
 8002096:	f001 fbef 	bl	8003878 <HAL_DMA2D_Init>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d115      	bne.n	80020cc <LL_FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, LayerIndex) == HAL_OK)
 80020a0:	68f9      	ldr	r1, [r7, #12]
 80020a2:	480c      	ldr	r0, [pc, #48]	; (80020d4 <LL_FillBuffer+0x68>)
 80020a4:	f001 fd56 	bl	8003b54 <HAL_DMA2D_ConfigLayer>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d10e      	bne.n	80020cc <LL_FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&hdma2d_discovery, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80020ae:	68ba      	ldr	r2, [r7, #8]
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	69f9      	ldr	r1, [r7, #28]
 80020b8:	4806      	ldr	r0, [pc, #24]	; (80020d4 <LL_FillBuffer+0x68>)
 80020ba:	f001 fc37 	bl	800392c <HAL_DMA2D_Start>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d103      	bne.n	80020cc <LL_FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 80020c4:	210a      	movs	r1, #10
 80020c6:	4803      	ldr	r0, [pc, #12]	; (80020d4 <LL_FillBuffer+0x68>)
 80020c8:	f001 fc5b 	bl	8003982 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 80020cc:	bf00      	nop
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	2000032c 	.word	0x2000032c
 80020d8:	4002b000 	.word	0x4002b000

080020dc <LL_ConvertLineToARGB8888>:
  * @param  pDst: Output color
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af02      	add	r7, sp, #8
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
 80020e8:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hdma2d_discovery.Init.Mode         = DMA2D_M2M_PFC;
 80020ea:	4b1c      	ldr	r3, [pc, #112]	; (800215c <LL_ConvertLineToARGB8888+0x80>)
 80020ec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80020f0:	605a      	str	r2, [r3, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 80020f2:	4b1a      	ldr	r3, [pc, #104]	; (800215c <LL_ConvertLineToARGB8888+0x80>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	609a      	str	r2, [r3, #8]
  hdma2d_discovery.Init.OutputOffset = 0;
 80020f8:	4b18      	ldr	r3, [pc, #96]	; (800215c <LL_ConvertLineToARGB8888+0x80>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hdma2d_discovery.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80020fe:	4b17      	ldr	r3, [pc, #92]	; (800215c <LL_ConvertLineToARGB8888+0x80>)
 8002100:	2200      	movs	r2, #0
 8002102:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d_discovery.LayerCfg[1].InputAlpha = 0xFF;
 8002104:	4b15      	ldr	r3, [pc, #84]	; (800215c <LL_ConvertLineToARGB8888+0x80>)
 8002106:	22ff      	movs	r2, #255	; 0xff
 8002108:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d_discovery.LayerCfg[1].InputColorMode = ColorMode;
 800210a:	4a14      	ldr	r2, [pc, #80]	; (800215c <LL_ConvertLineToARGB8888+0x80>)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdma2d_discovery.LayerCfg[1].InputOffset = 0;
 8002110:	4b12      	ldr	r3, [pc, #72]	; (800215c <LL_ConvertLineToARGB8888+0x80>)
 8002112:	2200      	movs	r2, #0
 8002114:	639a      	str	r2, [r3, #56]	; 0x38

  hdma2d_discovery.Instance = DMA2D;
 8002116:	4b11      	ldr	r3, [pc, #68]	; (800215c <LL_ConvertLineToARGB8888+0x80>)
 8002118:	4a11      	ldr	r2, [pc, #68]	; (8002160 <LL_ConvertLineToARGB8888+0x84>)
 800211a:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 800211c:	480f      	ldr	r0, [pc, #60]	; (800215c <LL_ConvertLineToARGB8888+0x80>)
 800211e:	f001 fbab 	bl	8003878 <HAL_DMA2D_Init>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d115      	bne.n	8002154 <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, 1) == HAL_OK)
 8002128:	2101      	movs	r1, #1
 800212a:	480c      	ldr	r0, [pc, #48]	; (800215c <LL_ConvertLineToARGB8888+0x80>)
 800212c:	f001 fd12 	bl	8003b54 <HAL_DMA2D_ConfigLayer>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10e      	bne.n	8002154 <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hdma2d_discovery, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8002136:	68f9      	ldr	r1, [r7, #12]
 8002138:	68ba      	ldr	r2, [r7, #8]
 800213a:	2301      	movs	r3, #1
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4806      	ldr	r0, [pc, #24]	; (800215c <LL_ConvertLineToARGB8888+0x80>)
 8002142:	f001 fbf3 	bl	800392c <HAL_DMA2D_Start>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d103      	bne.n	8002154 <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 800214c:	210a      	movs	r1, #10
 800214e:	4803      	ldr	r0, [pc, #12]	; (800215c <LL_ConvertLineToARGB8888+0x80>)
 8002150:	f001 fc17 	bl	8003982 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8002154:	bf00      	nop
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	2000032c 	.word	0x2000032c
 8002160:	4002b000 	.word	0x4002b000

08002164 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002168:	4b29      	ldr	r3, [pc, #164]	; (8002210 <BSP_SDRAM_Init+0xac>)
 800216a:	4a2a      	ldr	r2, [pc, #168]	; (8002214 <BSP_SDRAM_Init+0xb0>)
 800216c:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 800216e:	4b2a      	ldr	r3, [pc, #168]	; (8002218 <BSP_SDRAM_Init+0xb4>)
 8002170:	2202      	movs	r2, #2
 8002172:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8002174:	4b28      	ldr	r3, [pc, #160]	; (8002218 <BSP_SDRAM_Init+0xb4>)
 8002176:	2207      	movs	r2, #7
 8002178:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 800217a:	4b27      	ldr	r3, [pc, #156]	; (8002218 <BSP_SDRAM_Init+0xb4>)
 800217c:	2204      	movs	r2, #4
 800217e:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8002180:	4b25      	ldr	r3, [pc, #148]	; (8002218 <BSP_SDRAM_Init+0xb4>)
 8002182:	2207      	movs	r2, #7
 8002184:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8002186:	4b24      	ldr	r3, [pc, #144]	; (8002218 <BSP_SDRAM_Init+0xb4>)
 8002188:	2202      	movs	r2, #2
 800218a:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 800218c:	4b22      	ldr	r3, [pc, #136]	; (8002218 <BSP_SDRAM_Init+0xb4>)
 800218e:	2202      	movs	r2, #2
 8002190:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8002192:	4b21      	ldr	r3, [pc, #132]	; (8002218 <BSP_SDRAM_Init+0xb4>)
 8002194:	2202      	movs	r2, #2
 8002196:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8002198:	4b1d      	ldr	r3, [pc, #116]	; (8002210 <BSP_SDRAM_Init+0xac>)
 800219a:	2200      	movs	r2, #0
 800219c:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800219e:	4b1c      	ldr	r3, [pc, #112]	; (8002210 <BSP_SDRAM_Init+0xac>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80021a4:	4b1a      	ldr	r3, [pc, #104]	; (8002210 <BSP_SDRAM_Init+0xac>)
 80021a6:	2204      	movs	r2, #4
 80021a8:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80021aa:	4b19      	ldr	r3, [pc, #100]	; (8002210 <BSP_SDRAM_Init+0xac>)
 80021ac:	2220      	movs	r2, #32
 80021ae:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80021b0:	4b17      	ldr	r3, [pc, #92]	; (8002210 <BSP_SDRAM_Init+0xac>)
 80021b2:	2240      	movs	r2, #64	; 0x40
 80021b4:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 80021b6:	4b16      	ldr	r3, [pc, #88]	; (8002210 <BSP_SDRAM_Init+0xac>)
 80021b8:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80021bc:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80021be:	4b14      	ldr	r3, [pc, #80]	; (8002210 <BSP_SDRAM_Init+0xac>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80021c4:	4b12      	ldr	r3, [pc, #72]	; (8002210 <BSP_SDRAM_Init+0xac>)
 80021c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021ca:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80021cc:	4b10      	ldr	r3, [pc, #64]	; (8002210 <BSP_SDRAM_Init+0xac>)
 80021ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021d2:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80021d4:	4b0e      	ldr	r3, [pc, #56]	; (8002210 <BSP_SDRAM_Init+0xac>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80021da:	2100      	movs	r1, #0
 80021dc:	480c      	ldr	r0, [pc, #48]	; (8002210 <BSP_SDRAM_Init+0xac>)
 80021de:	f000 f87f 	bl	80022e0 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80021e2:	490d      	ldr	r1, [pc, #52]	; (8002218 <BSP_SDRAM_Init+0xb4>)
 80021e4:	480a      	ldr	r0, [pc, #40]	; (8002210 <BSP_SDRAM_Init+0xac>)
 80021e6:	f006 fb82 	bl	80088ee <HAL_SDRAM_Init>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d003      	beq.n	80021f8 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80021f0:	4b0a      	ldr	r3, [pc, #40]	; (800221c <BSP_SDRAM_Init+0xb8>)
 80021f2:	2201      	movs	r2, #1
 80021f4:	701a      	strb	r2, [r3, #0]
 80021f6:	e002      	b.n	80021fe <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80021f8:	4b08      	ldr	r3, [pc, #32]	; (800221c <BSP_SDRAM_Init+0xb8>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80021fe:	f240 6003 	movw	r0, #1539	; 0x603
 8002202:	f000 f80d 	bl	8002220 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8002206:	4b05      	ldr	r3, [pc, #20]	; (800221c <BSP_SDRAM_Init+0xb8>)
 8002208:	781b      	ldrb	r3, [r3, #0]
}
 800220a:	4618      	mov	r0, r3
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	20000448 	.word	0x20000448
 8002214:	a0000140 	.word	0xa0000140
 8002218:	20000238 	.word	0x20000238
 800221c:	20000038 	.word	0x20000038

08002220 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8002228:	2300      	movs	r3, #0
 800222a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800222c:	4b2a      	ldr	r3, [pc, #168]	; (80022d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800222e:	2201      	movs	r2, #1
 8002230:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002232:	4b29      	ldr	r3, [pc, #164]	; (80022d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002234:	2210      	movs	r2, #16
 8002236:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002238:	4b27      	ldr	r3, [pc, #156]	; (80022d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800223a:	2201      	movs	r2, #1
 800223c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800223e:	4b26      	ldr	r3, [pc, #152]	; (80022d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002240:	2200      	movs	r2, #0
 8002242:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002244:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002248:	4923      	ldr	r1, [pc, #140]	; (80022d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800224a:	4824      	ldr	r0, [pc, #144]	; (80022dc <BSP_SDRAM_Initialization_sequence+0xbc>)
 800224c:	f006 fb83 	bl	8008956 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002250:	2001      	movs	r0, #1
 8002252:	f000 fb79 	bl	8002948 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8002256:	4b20      	ldr	r3, [pc, #128]	; (80022d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002258:	2202      	movs	r2, #2
 800225a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800225c:	4b1e      	ldr	r3, [pc, #120]	; (80022d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800225e:	2210      	movs	r2, #16
 8002260:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002262:	4b1d      	ldr	r3, [pc, #116]	; (80022d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002264:	2201      	movs	r2, #1
 8002266:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002268:	4b1b      	ldr	r3, [pc, #108]	; (80022d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800226a:	2200      	movs	r2, #0
 800226c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800226e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002272:	4919      	ldr	r1, [pc, #100]	; (80022d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002274:	4819      	ldr	r0, [pc, #100]	; (80022dc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002276:	f006 fb6e 	bl	8008956 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800227a:	4b17      	ldr	r3, [pc, #92]	; (80022d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800227c:	2203      	movs	r2, #3
 800227e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002280:	4b15      	ldr	r3, [pc, #84]	; (80022d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002282:	2210      	movs	r2, #16
 8002284:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8002286:	4b14      	ldr	r3, [pc, #80]	; (80022d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002288:	2208      	movs	r2, #8
 800228a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800228c:	4b12      	ldr	r3, [pc, #72]	; (80022d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800228e:	2200      	movs	r2, #0
 8002290:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002292:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002296:	4910      	ldr	r1, [pc, #64]	; (80022d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002298:	4810      	ldr	r0, [pc, #64]	; (80022dc <BSP_SDRAM_Initialization_sequence+0xbc>)
 800229a:	f006 fb5c 	bl	8008956 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800229e:	f44f 730c 	mov.w	r3, #560	; 0x230
 80022a2:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80022a4:	4b0c      	ldr	r3, [pc, #48]	; (80022d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022a6:	2204      	movs	r2, #4
 80022a8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80022aa:	4b0b      	ldr	r3, [pc, #44]	; (80022d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022ac:	2210      	movs	r2, #16
 80022ae:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80022b0:	4b09      	ldr	r3, [pc, #36]	; (80022d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022b2:	2201      	movs	r2, #1
 80022b4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	4a07      	ldr	r2, [pc, #28]	; (80022d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022ba:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80022bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022c0:	4905      	ldr	r1, [pc, #20]	; (80022d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022c2:	4806      	ldr	r0, [pc, #24]	; (80022dc <BSP_SDRAM_Initialization_sequence+0xbc>)
 80022c4:	f006 fb47 	bl	8008956 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	4804      	ldr	r0, [pc, #16]	; (80022dc <BSP_SDRAM_Initialization_sequence+0xbc>)
 80022cc:	f006 fb6e 	bl	80089ac <HAL_SDRAM_ProgramRefreshRate>
}
 80022d0:	bf00      	nop
 80022d2:	3710      	adds	r7, #16
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	20000254 	.word	0x20000254
 80022dc:	20000448 	.word	0x20000448

080022e0 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params  
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b090      	sub	sp, #64	; 0x40
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80022ea:	4b71      	ldr	r3, [pc, #452]	; (80024b0 <BSP_SDRAM_MspInit+0x1d0>)
 80022ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ee:	4a70      	ldr	r2, [pc, #448]	; (80024b0 <BSP_SDRAM_MspInit+0x1d0>)
 80022f0:	f043 0301 	orr.w	r3, r3, #1
 80022f4:	6393      	str	r3, [r2, #56]	; 0x38
 80022f6:	4b6e      	ldr	r3, [pc, #440]	; (80024b0 <BSP_SDRAM_MspInit+0x1d0>)
 80022f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002300:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8002302:	4b6b      	ldr	r3, [pc, #428]	; (80024b0 <BSP_SDRAM_MspInit+0x1d0>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	4a6a      	ldr	r2, [pc, #424]	; (80024b0 <BSP_SDRAM_MspInit+0x1d0>)
 8002308:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800230c:	6313      	str	r3, [r2, #48]	; 0x30
 800230e:	4b68      	ldr	r3, [pc, #416]	; (80024b0 <BSP_SDRAM_MspInit+0x1d0>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002316:	627b      	str	r3, [r7, #36]	; 0x24
 8002318:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800231a:	4b65      	ldr	r3, [pc, #404]	; (80024b0 <BSP_SDRAM_MspInit+0x1d0>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	4a64      	ldr	r2, [pc, #400]	; (80024b0 <BSP_SDRAM_MspInit+0x1d0>)
 8002320:	f043 0308 	orr.w	r3, r3, #8
 8002324:	6313      	str	r3, [r2, #48]	; 0x30
 8002326:	4b62      	ldr	r3, [pc, #392]	; (80024b0 <BSP_SDRAM_MspInit+0x1d0>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	f003 0308 	and.w	r3, r3, #8
 800232e:	623b      	str	r3, [r7, #32]
 8002330:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002332:	4b5f      	ldr	r3, [pc, #380]	; (80024b0 <BSP_SDRAM_MspInit+0x1d0>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002336:	4a5e      	ldr	r2, [pc, #376]	; (80024b0 <BSP_SDRAM_MspInit+0x1d0>)
 8002338:	f043 0310 	orr.w	r3, r3, #16
 800233c:	6313      	str	r3, [r2, #48]	; 0x30
 800233e:	4b5c      	ldr	r3, [pc, #368]	; (80024b0 <BSP_SDRAM_MspInit+0x1d0>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	f003 0310 	and.w	r3, r3, #16
 8002346:	61fb      	str	r3, [r7, #28]
 8002348:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800234a:	4b59      	ldr	r3, [pc, #356]	; (80024b0 <BSP_SDRAM_MspInit+0x1d0>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	4a58      	ldr	r2, [pc, #352]	; (80024b0 <BSP_SDRAM_MspInit+0x1d0>)
 8002350:	f043 0320 	orr.w	r3, r3, #32
 8002354:	6313      	str	r3, [r2, #48]	; 0x30
 8002356:	4b56      	ldr	r3, [pc, #344]	; (80024b0 <BSP_SDRAM_MspInit+0x1d0>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	f003 0320 	and.w	r3, r3, #32
 800235e:	61bb      	str	r3, [r7, #24]
 8002360:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002362:	4b53      	ldr	r3, [pc, #332]	; (80024b0 <BSP_SDRAM_MspInit+0x1d0>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	4a52      	ldr	r2, [pc, #328]	; (80024b0 <BSP_SDRAM_MspInit+0x1d0>)
 8002368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800236c:	6313      	str	r3, [r2, #48]	; 0x30
 800236e:	4b50      	ldr	r3, [pc, #320]	; (80024b0 <BSP_SDRAM_MspInit+0x1d0>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002376:	617b      	str	r3, [r7, #20]
 8002378:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800237a:	4b4d      	ldr	r3, [pc, #308]	; (80024b0 <BSP_SDRAM_MspInit+0x1d0>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	4a4c      	ldr	r2, [pc, #304]	; (80024b0 <BSP_SDRAM_MspInit+0x1d0>)
 8002380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002384:	6313      	str	r3, [r2, #48]	; 0x30
 8002386:	4b4a      	ldr	r3, [pc, #296]	; (80024b0 <BSP_SDRAM_MspInit+0x1d0>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800238e:	613b      	str	r3, [r7, #16]
 8002390:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002392:	4b47      	ldr	r3, [pc, #284]	; (80024b0 <BSP_SDRAM_MspInit+0x1d0>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	4a46      	ldr	r2, [pc, #280]	; (80024b0 <BSP_SDRAM_MspInit+0x1d0>)
 8002398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800239c:	6313      	str	r3, [r2, #48]	; 0x30
 800239e:	4b44      	ldr	r3, [pc, #272]	; (80024b0 <BSP_SDRAM_MspInit+0x1d0>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80023aa:	2302      	movs	r3, #2
 80023ac:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80023ae:	2301      	movs	r3, #1
 80023b0:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80023b2:	2303      	movs	r3, #3
 80023b4:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80023b6:	230c      	movs	r3, #12
 80023b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 80023ba:	f24c 7303 	movw	r3, #50947	; 0xc703
 80023be:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_14 | GPIO_PIN_15;
 
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80023c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023c4:	4619      	mov	r1, r3
 80023c6:	483b      	ldr	r0, [pc, #236]	; (80024b4 <BSP_SDRAM_MspInit+0x1d4>)
 80023c8:	f002 fd6e 	bl	8004ea8 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80023cc:	f64f 7383 	movw	r3, #65411	; 0xff83
 80023d0:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
      
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80023d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023d6:	4619      	mov	r1, r3
 80023d8:	4837      	ldr	r0, [pc, #220]	; (80024b8 <BSP_SDRAM_MspInit+0x1d8>)
 80023da:	f002 fd65 	bl	8004ea8 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80023de:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80023e2:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
    
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80023e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023e8:	4619      	mov	r1, r3
 80023ea:	4834      	ldr	r0, [pc, #208]	; (80024bc <BSP_SDRAM_MspInit+0x1dc>)
 80023ec:	f002 fd5c 	bl	8004ea8 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4|\
 80023f0:	f248 1337 	movw	r3, #33079	; 0x8137
 80023f4:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80023f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023fa:	4619      	mov	r1, r3
 80023fc:	4830      	ldr	r0, [pc, #192]	; (80024c0 <BSP_SDRAM_MspInit+0x1e0>)
 80023fe:	f002 fd53 	bl	8004ea8 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8002402:	f64f 732c 	movw	r3, #65324	; 0xff2c
 8002406:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8002408:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800240c:	4619      	mov	r1, r3
 800240e:	482d      	ldr	r0, [pc, #180]	; (80024c4 <BSP_SDRAM_MspInit+0x1e4>)
 8002410:	f002 fd4a 	bl	8004ea8 <HAL_GPIO_Init>
  
  /* GPIOI configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8002414:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8002418:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
 800241a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800241e:	4619      	mov	r1, r3
 8002420:	4829      	ldr	r0, [pc, #164]	; (80024c8 <BSP_SDRAM_MspInit+0x1e8>)
 8002422:	f002 fd41 	bl	8004ea8 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002426:	4b29      	ldr	r3, [pc, #164]	; (80024cc <BSP_SDRAM_MspInit+0x1ec>)
 8002428:	2200      	movs	r2, #0
 800242a:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800242c:	4b27      	ldr	r3, [pc, #156]	; (80024cc <BSP_SDRAM_MspInit+0x1ec>)
 800242e:	2280      	movs	r2, #128	; 0x80
 8002430:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002432:	4b26      	ldr	r3, [pc, #152]	; (80024cc <BSP_SDRAM_MspInit+0x1ec>)
 8002434:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002438:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800243a:	4b24      	ldr	r3, [pc, #144]	; (80024cc <BSP_SDRAM_MspInit+0x1ec>)
 800243c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002440:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002442:	4b22      	ldr	r3, [pc, #136]	; (80024cc <BSP_SDRAM_MspInit+0x1ec>)
 8002444:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002448:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800244a:	4b20      	ldr	r3, [pc, #128]	; (80024cc <BSP_SDRAM_MspInit+0x1ec>)
 800244c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002450:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8002452:	4b1e      	ldr	r3, [pc, #120]	; (80024cc <BSP_SDRAM_MspInit+0x1ec>)
 8002454:	2200      	movs	r2, #0
 8002456:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002458:	4b1c      	ldr	r3, [pc, #112]	; (80024cc <BSP_SDRAM_MspInit+0x1ec>)
 800245a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800245e:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8002460:	4b1a      	ldr	r3, [pc, #104]	; (80024cc <BSP_SDRAM_MspInit+0x1ec>)
 8002462:	2200      	movs	r2, #0
 8002464:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002466:	4b19      	ldr	r3, [pc, #100]	; (80024cc <BSP_SDRAM_MspInit+0x1ec>)
 8002468:	2203      	movs	r2, #3
 800246a:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800246c:	4b17      	ldr	r3, [pc, #92]	; (80024cc <BSP_SDRAM_MspInit+0x1ec>)
 800246e:	2200      	movs	r2, #0
 8002470:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002472:	4b16      	ldr	r3, [pc, #88]	; (80024cc <BSP_SDRAM_MspInit+0x1ec>)
 8002474:	2200      	movs	r2, #0
 8002476:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8002478:	4b14      	ldr	r3, [pc, #80]	; (80024cc <BSP_SDRAM_MspInit+0x1ec>)
 800247a:	4a15      	ldr	r2, [pc, #84]	; (80024d0 <BSP_SDRAM_MspInit+0x1f0>)
 800247c:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a12      	ldr	r2, [pc, #72]	; (80024cc <BSP_SDRAM_MspInit+0x1ec>)
 8002482:	631a      	str	r2, [r3, #48]	; 0x30
 8002484:	4a11      	ldr	r2, [pc, #68]	; (80024cc <BSP_SDRAM_MspInit+0x1ec>)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800248a:	4810      	ldr	r0, [pc, #64]	; (80024cc <BSP_SDRAM_MspInit+0x1ec>)
 800248c:	f001 f8e6 	bl	800365c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8002490:	480e      	ldr	r0, [pc, #56]	; (80024cc <BSP_SDRAM_MspInit+0x1ec>)
 8002492:	f001 f835 	bl	8003500 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002496:	2200      	movs	r2, #0
 8002498:	210f      	movs	r1, #15
 800249a:	2038      	movs	r0, #56	; 0x38
 800249c:	f000 fff9 	bl	8003492 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80024a0:	2038      	movs	r0, #56	; 0x38
 80024a2:	f001 f812 	bl	80034ca <HAL_NVIC_EnableIRQ>
}
 80024a6:	bf00      	nop
 80024a8:	3740      	adds	r7, #64	; 0x40
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40023800 	.word	0x40023800
 80024b4:	40020c00 	.word	0x40020c00
 80024b8:	40021000 	.word	0x40021000
 80024bc:	40021400 	.word	0x40021400
 80024c0:	40021800 	.word	0x40021800
 80024c4:	40021c00 	.word	0x40021c00
 80024c8:	40022000 	.word	0x40022000
 80024cc:	20000264 	.word	0x20000264
 80024d0:	40026410 	.word	0x40026410

080024d4 <BSP_TS_Init>:
  * @param  ts_SizeX : Maximum X size of the TS area on LCD
  * @param  ts_SizeY : Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4603      	mov	r3, r0
 80024dc:	460a      	mov	r2, r1
 80024de:	80fb      	strh	r3, [r7, #6]
 80024e0:	4613      	mov	r3, r2
 80024e2:	80bb      	strh	r3, [r7, #4]
  uint8_t ts_status = TS_OK;
 80024e4:	2300      	movs	r3, #0
 80024e6:	73fb      	strb	r3, [r7, #15]
  uint8_t ts_id1, ts_id2 = 0;
 80024e8:	2300      	movs	r3, #0
 80024ea:	73bb      	strb	r3, [r7, #14]
  /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
  /* but the prototype of Init() is like that in template and should be respected       */

  /* Initialize the communication channel to sensor (I2C) if necessary */
  /* that is initialization is done only once after a power up         */
  ft6x06_ts_drv.Init(I2C_Address);
 80024ec:	4b25      	ldr	r3, [pc, #148]	; (8002584 <BSP_TS_Init+0xb0>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a25      	ldr	r2, [pc, #148]	; (8002588 <BSP_TS_Init+0xb4>)
 80024f2:	7812      	ldrb	r2, [r2, #0]
 80024f4:	b292      	uxth	r2, r2
 80024f6:	4610      	mov	r0, r2
 80024f8:	4798      	blx	r3

  ts_id1 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 80024fa:	4b22      	ldr	r3, [pc, #136]	; (8002584 <BSP_TS_Init+0xb0>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2054      	movs	r0, #84	; 0x54
 8002500:	4798      	blx	r3
 8002502:	4603      	mov	r3, r0
 8002504:	737b      	strb	r3, [r7, #13]
  if(ts_id1 != FT6206_ID_VALUE)
 8002506:	7b7b      	ldrb	r3, [r7, #13]
 8002508:	2b11      	cmp	r3, #17
 800250a:	d009      	beq.n	8002520 <BSP_TS_Init+0x4c>
  {
    ts_id2 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS_A02);
 800250c:	4b1d      	ldr	r3, [pc, #116]	; (8002584 <BSP_TS_Init+0xb0>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	2070      	movs	r0, #112	; 0x70
 8002512:	4798      	blx	r3
 8002514:	4603      	mov	r3, r0
 8002516:	73bb      	strb	r3, [r7, #14]
    I2C_Address    = TS_I2C_ADDRESS_A02;    
 8002518:	4b1b      	ldr	r3, [pc, #108]	; (8002588 <BSP_TS_Init+0xb4>)
 800251a:	2270      	movs	r2, #112	; 0x70
 800251c:	701a      	strb	r2, [r3, #0]
 800251e:	e002      	b.n	8002526 <BSP_TS_Init+0x52>
  }
  else
  {
    I2C_Address    = TS_I2C_ADDRESS;    
 8002520:	4b19      	ldr	r3, [pc, #100]	; (8002588 <BSP_TS_Init+0xb4>)
 8002522:	2254      	movs	r2, #84	; 0x54
 8002524:	701a      	strb	r2, [r3, #0]
  }
  
  /* Scan FT6xx6 TouchScreen IC controller ID register by I2C Read       */
  /* Verify this is a FT6206 or FT6336G, otherwise this is an error case */
  if((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 8002526:	7b7b      	ldrb	r3, [r7, #13]
 8002528:	2b11      	cmp	r3, #17
 800252a:	d002      	beq.n	8002532 <BSP_TS_Init+0x5e>
 800252c:	7bbb      	ldrb	r3, [r7, #14]
 800252e:	2b11      	cmp	r3, #17
 8002530:	d121      	bne.n	8002576 <BSP_TS_Init+0xa2>
  {
    /* Found FT6206 : Initialize the TS driver structure */
    ts_driver = &ft6x06_ts_drv;
 8002532:	4b16      	ldr	r3, [pc, #88]	; (800258c <BSP_TS_Init+0xb8>)
 8002534:	4a13      	ldr	r2, [pc, #76]	; (8002584 <BSP_TS_Init+0xb0>)
 8002536:	601a      	str	r2, [r3, #0]

    /* Get LCD chosen orientation */
    if(ts_SizeX < ts_SizeY)
 8002538:	88fa      	ldrh	r2, [r7, #6]
 800253a:	88bb      	ldrh	r3, [r7, #4]
 800253c:	429a      	cmp	r2, r3
 800253e:	d203      	bcs.n	8002548 <BSP_TS_Init+0x74>
    {
      ts_orientation = TS_SWAP_NONE;                
 8002540:	4b13      	ldr	r3, [pc, #76]	; (8002590 <BSP_TS_Init+0xbc>)
 8002542:	2201      	movs	r2, #1
 8002544:	701a      	strb	r2, [r3, #0]
 8002546:	e002      	b.n	800254e <BSP_TS_Init+0x7a>
    }
    else
    {
      ts_orientation = TS_SWAP_XY | TS_SWAP_Y;                 
 8002548:	4b11      	ldr	r3, [pc, #68]	; (8002590 <BSP_TS_Init+0xbc>)
 800254a:	220c      	movs	r2, #12
 800254c:	701a      	strb	r2, [r3, #0]
    }

    if(ts_status == TS_OK)
 800254e:	7bfb      	ldrb	r3, [r7, #15]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d112      	bne.n	800257a <BSP_TS_Init+0xa6>
    {
      /* Software reset the TouchScreen */
      ts_driver->Reset(I2C_Address);
 8002554:	4b0d      	ldr	r3, [pc, #52]	; (800258c <BSP_TS_Init+0xb8>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	4a0b      	ldr	r2, [pc, #44]	; (8002588 <BSP_TS_Init+0xb4>)
 800255c:	7812      	ldrb	r2, [r2, #0]
 800255e:	b292      	uxth	r2, r2
 8002560:	4610      	mov	r0, r2
 8002562:	4798      	blx	r3

      /* Calibrate, Configure and Start the TouchScreen driver */
      ts_driver->Start(I2C_Address);
 8002564:	4b09      	ldr	r3, [pc, #36]	; (800258c <BSP_TS_Init+0xb8>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	4a07      	ldr	r2, [pc, #28]	; (8002588 <BSP_TS_Init+0xb4>)
 800256c:	7812      	ldrb	r2, [r2, #0]
 800256e:	b292      	uxth	r2, r2
 8002570:	4610      	mov	r0, r2
 8002572:	4798      	blx	r3
    if(ts_status == TS_OK)
 8002574:	e001      	b.n	800257a <BSP_TS_Init+0xa6>

    } /* of if(ts_status == TS_OK) */
  }
  else
  {
    ts_status = TS_DEVICE_NOT_FOUND;
 8002576:	2303      	movs	r3, #3
 8002578:	73fb      	strb	r3, [r7, #15]
  }

  return (ts_status);
 800257a:	7bfb      	ldrb	r3, [r7, #15]
}
 800257c:	4618      	mov	r0, r3
 800257e:	3710      	adds	r7, #16
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	20000000 	.word	0x20000000
 8002588:	200002c9 	.word	0x200002c9
 800258c:	200002c4 	.word	0x200002c4
 8002590:	200002c8 	.word	0x200002c8

08002594 <BSP_TS_ITConfig>:
/**
  * @brief  Configures and enables the touch screen interrupts.
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_ITConfig(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
  uint8_t ts_status = TS_OK;
 800259a:	2300      	movs	r3, #0
 800259c:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef gpio_init_structure;

  /* Msp Init of GPIO used for TS_INT pin coming from TouchScreen driver IC FT6x06 */
  /* When touchscreen is operated in interrupt mode */
  BSP_TS_INT_MspInit();
 800259e:	f000 f94f 	bl	8002840 <BSP_TS_INT_MspInit>

  /* Configure Interrupt mode for TS_INT pin falling edge : when a new touch is available */
  /* TS_INT pin is active on low level on new touch available */
  gpio_init_structure.Pin = TS_INT_PIN;
 80025a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025a6:	603b      	str	r3, [r7, #0]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80025a8:	2301      	movs	r3, #1
 80025aa:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80025ac:	2302      	movs	r3, #2
 80025ae:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 80025b0:	4b0d      	ldr	r3, [pc, #52]	; (80025e8 <BSP_TS_ITConfig+0x54>)
 80025b2:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 80025b4:	463b      	mov	r3, r7
 80025b6:	4619      	mov	r1, r3
 80025b8:	480c      	ldr	r0, [pc, #48]	; (80025ec <BSP_TS_ITConfig+0x58>)
 80025ba:	f002 fc75 	bl	8004ea8 <HAL_GPIO_Init>

  /* Enable and set the TS_INT EXTI Interrupt to an intermediate priority */
  HAL_NVIC_SetPriority((IRQn_Type)(TS_INT_EXTI_IRQn), 0x0F, 0x00);
 80025be:	2200      	movs	r2, #0
 80025c0:	210f      	movs	r1, #15
 80025c2:	2028      	movs	r0, #40	; 0x28
 80025c4:	f000 ff65 	bl	8003492 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(TS_INT_EXTI_IRQn));
 80025c8:	2028      	movs	r0, #40	; 0x28
 80025ca:	f000 ff7e 	bl	80034ca <HAL_NVIC_EnableIRQ>

  /* Enable the TS in interrupt mode */
  /* In that case the INT output of FT6206 when new touch is available */
  /* is active on low level and directed on EXTI */
  ts_driver->EnableIT(I2C_Address);
 80025ce:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <BSP_TS_ITConfig+0x5c>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	4a07      	ldr	r2, [pc, #28]	; (80025f4 <BSP_TS_ITConfig+0x60>)
 80025d6:	7812      	ldrb	r2, [r2, #0]
 80025d8:	b292      	uxth	r2, r2
 80025da:	4610      	mov	r0, r2
 80025dc:	4798      	blx	r3

  return (ts_status);
 80025de:	7dfb      	ldrb	r3, [r7, #23]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	10210000 	.word	0x10210000
 80025ec:	40022000 	.word	0x40022000
 80025f0:	200002c4 	.word	0x200002c4
 80025f4:	200002c9 	.word	0x200002c9

080025f8 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 80025f8:	b590      	push	{r4, r7, lr}
 80025fa:	b089      	sub	sp, #36	; 0x24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8002600:	2300      	movs	r3, #0
 8002602:	76fb      	strb	r3, [r7, #27]
  uint32_t area = 0;
  uint32_t event = 0;
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = ts_driver->DetectTouch(I2C_Address);
 8002604:	4b89      	ldr	r3, [pc, #548]	; (800282c <BSP_TS_GetState+0x234>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	4a89      	ldr	r2, [pc, #548]	; (8002830 <BSP_TS_GetState+0x238>)
 800260c:	7812      	ldrb	r2, [r2, #0]
 800260e:	b292      	uxth	r2, r2
 8002610:	4610      	mov	r0, r2
 8002612:	4798      	blx	r3
 8002614:	4603      	mov	r3, r0
 8002616:	461a      	mov	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	701a      	strb	r2, [r3, #0]
  if(TS_State->touchDetected)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 80fe 	beq.w	8002822 <BSP_TS_GetState+0x22a>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8002626:	2300      	movs	r3, #0
 8002628:	61fb      	str	r3, [r7, #28]
 800262a:	e0f3      	b.n	8002814 <BSP_TS_GetState+0x21c>
    {
      /* Get each touch coordinates */
      ts_driver->GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 800262c:	4b7f      	ldr	r3, [pc, #508]	; (800282c <BSP_TS_GetState+0x234>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	4a7f      	ldr	r2, [pc, #508]	; (8002830 <BSP_TS_GetState+0x238>)
 8002634:	7812      	ldrb	r2, [r2, #0]
 8002636:	b290      	uxth	r0, r2
 8002638:	f107 0110 	add.w	r1, r7, #16
 800263c:	69fa      	ldr	r2, [r7, #28]
 800263e:	0052      	lsls	r2, r2, #1
 8002640:	188c      	adds	r4, r1, r2
 8002642:	f107 010c 	add.w	r1, r7, #12
 8002646:	69fa      	ldr	r2, [r7, #28]
 8002648:	0052      	lsls	r2, r2, #1
 800264a:	440a      	add	r2, r1
 800264c:	4621      	mov	r1, r4
 800264e:	4798      	blx	r3

      if(ts_orientation & TS_SWAP_XY)
 8002650:	4b78      	ldr	r3, [pc, #480]	; (8002834 <BSP_TS_GetState+0x23c>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	f003 0308 	and.w	r3, r3, #8
 8002658:	2b00      	cmp	r3, #0
 800265a:	d01d      	beq.n	8002698 <BSP_TS_GetState+0xa0>
      {
        tmp = Raw_x[index];
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	f107 0220 	add.w	r2, r7, #32
 8002664:	4413      	add	r3, r2
 8002666:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800266a:	833b      	strh	r3, [r7, #24]
        Raw_x[index] = Raw_y[index]; 
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	f107 0220 	add.w	r2, r7, #32
 8002674:	4413      	add	r3, r2
 8002676:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	f107 0120 	add.w	r1, r7, #32
 8002682:	440b      	add	r3, r1
 8002684:	f823 2c10 	strh.w	r2, [r3, #-16]
        Raw_y[index] = tmp;
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	f107 0220 	add.w	r2, r7, #32
 8002690:	4413      	add	r3, r2
 8002692:	8b3a      	ldrh	r2, [r7, #24]
 8002694:	f823 2c14 	strh.w	r2, [r3, #-20]
      }
      
      if(ts_orientation & TS_SWAP_X)
 8002698:	4b66      	ldr	r3, [pc, #408]	; (8002834 <BSP_TS_GetState+0x23c>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d011      	beq.n	80026c8 <BSP_TS_GetState+0xd0>
      {
        Raw_x[index] = FT_6206_MAX_WIDTH - 1 - Raw_x[index];
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	f107 0220 	add.w	r2, r7, #32
 80026ac:	4413      	add	r3, r2
 80026ae:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 80026b2:	f240 331f 	movw	r3, #799	; 0x31f
 80026b6:	1a9b      	subs	r3, r3, r2
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	f107 0120 	add.w	r1, r7, #32
 80026c2:	440b      	add	r3, r1
 80026c4:	f823 2c10 	strh.w	r2, [r3, #-16]
      }

      if(ts_orientation & TS_SWAP_Y)
 80026c8:	4b5a      	ldr	r3, [pc, #360]	; (8002834 <BSP_TS_GetState+0x23c>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	f003 0304 	and.w	r3, r3, #4
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d011      	beq.n	80026f8 <BSP_TS_GetState+0x100>
      {
        Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	f107 0220 	add.w	r2, r7, #32
 80026dc:	4413      	add	r3, r2
 80026de:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 80026e2:	f240 13df 	movw	r3, #479	; 0x1df
 80026e6:	1a9b      	subs	r3, r3, r2
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	f107 0120 	add.w	r1, r7, #32
 80026f2:	440b      	add	r3, r1
 80026f4:	f823 2c14 	strh.w	r2, [r3, #-20]
      }
            
      xDiff = Raw_x[index] > _x[index]? (Raw_x[index] - _x[index]): (_x[index] - Raw_x[index]);
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	f107 0220 	add.w	r2, r7, #32
 8002700:	4413      	add	r3, r2
 8002702:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8002706:	4619      	mov	r1, r3
 8002708:	4a4b      	ldr	r2, [pc, #300]	; (8002838 <BSP_TS_GetState+0x240>)
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002710:	4299      	cmp	r1, r3
 8002712:	d90e      	bls.n	8002732 <BSP_TS_GetState+0x13a>
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	f107 0220 	add.w	r2, r7, #32
 800271c:	4413      	add	r3, r2
 800271e:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 8002722:	4945      	ldr	r1, [pc, #276]	; (8002838 <BSP_TS_GetState+0x240>)
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800272a:	b29b      	uxth	r3, r3
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	b29b      	uxth	r3, r3
 8002730:	e00d      	b.n	800274e <BSP_TS_GetState+0x156>
 8002732:	4a41      	ldr	r2, [pc, #260]	; (8002838 <BSP_TS_GetState+0x240>)
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800273a:	b29a      	uxth	r2, r3
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	f107 0120 	add.w	r1, r7, #32
 8002744:	440b      	add	r3, r1
 8002746:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	b29b      	uxth	r3, r3
 800274e:	82fb      	strh	r3, [r7, #22]
      yDiff = Raw_y[index] > _y[index]? (Raw_y[index] - _y[index]): (_y[index] - Raw_y[index]);
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	f107 0220 	add.w	r2, r7, #32
 8002758:	4413      	add	r3, r2
 800275a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800275e:	4619      	mov	r1, r3
 8002760:	4a36      	ldr	r2, [pc, #216]	; (800283c <BSP_TS_GetState+0x244>)
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002768:	4299      	cmp	r1, r3
 800276a:	d90e      	bls.n	800278a <BSP_TS_GetState+0x192>
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	f107 0220 	add.w	r2, r7, #32
 8002774:	4413      	add	r3, r2
 8002776:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 800277a:	4930      	ldr	r1, [pc, #192]	; (800283c <BSP_TS_GetState+0x244>)
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002782:	b29b      	uxth	r3, r3
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	b29b      	uxth	r3, r3
 8002788:	e00d      	b.n	80027a6 <BSP_TS_GetState+0x1ae>
 800278a:	4a2c      	ldr	r2, [pc, #176]	; (800283c <BSP_TS_GetState+0x244>)
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002792:	b29a      	uxth	r2, r3
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	f107 0120 	add.w	r1, r7, #32
 800279c:	440b      	add	r3, r1
 800279e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	82bb      	strh	r3, [r7, #20]

      if ((xDiff + yDiff) > 5)
 80027a8:	8afa      	ldrh	r2, [r7, #22]
 80027aa:	8abb      	ldrh	r3, [r7, #20]
 80027ac:	4413      	add	r3, r2
 80027ae:	2b05      	cmp	r3, #5
 80027b0:	dd17      	ble.n	80027e2 <BSP_TS_GetState+0x1ea>
      {
        _x[index] = Raw_x[index];
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	f107 0220 	add.w	r2, r7, #32
 80027ba:	4413      	add	r3, r2
 80027bc:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80027c0:	4619      	mov	r1, r3
 80027c2:	4a1d      	ldr	r2, [pc, #116]	; (8002838 <BSP_TS_GetState+0x240>)
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = Raw_y[index];
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	f107 0220 	add.w	r2, r7, #32
 80027d2:	4413      	add	r3, r2
 80027d4:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80027d8:	4619      	mov	r1, r3
 80027da:	4a18      	ldr	r2, [pc, #96]	; (800283c <BSP_TS_GetState+0x244>)
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }


      TS_State->touchX[index] = _x[index];
 80027e2:	4a15      	ldr	r2, [pc, #84]	; (8002838 <BSP_TS_GetState+0x240>)
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ea:	b299      	uxth	r1, r3
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	4413      	add	r3, r2
 80027f4:	460a      	mov	r2, r1
 80027f6:	805a      	strh	r2, [r3, #2]
      TS_State->touchY[index] = _y[index];
 80027f8:	4a10      	ldr	r2, [pc, #64]	; (800283c <BSP_TS_GetState+0x244>)
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002800:	b299      	uxth	r1, r3
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	4413      	add	r3, r2
 800280a:	460a      	mov	r2, r1
 800280c:	80da      	strh	r2, [r3, #6]
    for(index=0; index < TS_State->touchDetected; index++)
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	3301      	adds	r3, #1
 8002812:	61fb      	str	r3, [r7, #28]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	461a      	mov	r2, r3
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	4293      	cmp	r3, r2
 800281e:	f4ff af05 	bcc.w	800262c <BSP_TS_GetState+0x34>
    ts_status = BSP_TS_Get_GestureId(TS_State);
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8002822:	7efb      	ldrb	r3, [r7, #27]
}
 8002824:	4618      	mov	r0, r3
 8002826:	3724      	adds	r7, #36	; 0x24
 8002828:	46bd      	mov	sp, r7
 800282a:	bd90      	pop	{r4, r7, pc}
 800282c:	200002c4 	.word	0x200002c4
 8002830:	200002c9 	.word	0x200002c9
 8002834:	200002c8 	.word	0x200002c8
 8002838:	200002cc 	.word	0x200002cc
 800283c:	200002d4 	.word	0x200002d4

08002840 <BSP_TS_INT_MspInit>:
/**
  * @brief  Initializes the TS_INT pin MSP.
  * @retval None
  */
__weak void BSP_TS_INT_MspInit(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  TS_INT_GPIO_CLK_ENABLE();
 8002846:	4b0f      	ldr	r3, [pc, #60]	; (8002884 <BSP_TS_INT_MspInit+0x44>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284a:	4a0e      	ldr	r2, [pc, #56]	; (8002884 <BSP_TS_INT_MspInit+0x44>)
 800284c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002850:	6313      	str	r3, [r2, #48]	; 0x30
 8002852:	4b0c      	ldr	r3, [pc, #48]	; (8002884 <BSP_TS_INT_MspInit+0x44>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800285a:	603b      	str	r3, [r7, #0]
 800285c:	683b      	ldr	r3, [r7, #0]

  /* GPIO configuration in input for TouchScreen interrupt signal on TS_INT pin */
  gpio_init_structure.Pin       = TS_INT_PIN;
 800285e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002862:	607b      	str	r3, [r7, #4]

  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8002864:	2300      	movs	r3, #0
 8002866:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002868:	2301      	movs	r3, #1
 800286a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 800286c:	2303      	movs	r3, #3
 800286e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 8002870:	1d3b      	adds	r3, r7, #4
 8002872:	4619      	mov	r1, r3
 8002874:	4804      	ldr	r0, [pc, #16]	; (8002888 <BSP_TS_INT_MspInit+0x48>)
 8002876:	f002 fb17 	bl	8004ea8 <HAL_GPIO_Init>
}
 800287a:	bf00      	nop
 800287c:	3718      	adds	r7, #24
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40023800 	.word	0x40023800
 8002888:	40022000 	.word	0x40022000

0800288c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002890:	2003      	movs	r0, #3
 8002892:	f000 fdf3 	bl	800347c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002896:	2000      	movs	r0, #0
 8002898:	f000 f806 	bl	80028a8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800289c:	f00b fe66 	bl	800e56c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	bd80      	pop	{r7, pc}
	...

080028a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028b0:	4b12      	ldr	r3, [pc, #72]	; (80028fc <HAL_InitTick+0x54>)
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	4b12      	ldr	r3, [pc, #72]	; (8002900 <HAL_InitTick+0x58>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	4619      	mov	r1, r3
 80028ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028be:	fbb3 f3f1 	udiv	r3, r3, r1
 80028c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c6:	4618      	mov	r0, r3
 80028c8:	f000 fe0d 	bl	80034e6 <HAL_SYSTICK_Config>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e00e      	b.n	80028f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2b0f      	cmp	r3, #15
 80028da:	d80a      	bhi.n	80028f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028dc:	2200      	movs	r2, #0
 80028de:	6879      	ldr	r1, [r7, #4]
 80028e0:	f04f 30ff 	mov.w	r0, #4294967295
 80028e4:	f000 fdd5 	bl	8003492 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028e8:	4a06      	ldr	r2, [pc, #24]	; (8002904 <HAL_InitTick+0x5c>)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
 80028f0:	e000      	b.n	80028f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3708      	adds	r7, #8
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	20000048 	.word	0x20000048
 8002900:	20000040 	.word	0x20000040
 8002904:	2000003c 	.word	0x2000003c

08002908 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800290c:	4b06      	ldr	r3, [pc, #24]	; (8002928 <HAL_IncTick+0x20>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	461a      	mov	r2, r3
 8002912:	4b06      	ldr	r3, [pc, #24]	; (800292c <HAL_IncTick+0x24>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4413      	add	r3, r2
 8002918:	4a04      	ldr	r2, [pc, #16]	; (800292c <HAL_IncTick+0x24>)
 800291a:	6013      	str	r3, [r2, #0]
}
 800291c:	bf00      	nop
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	20000040 	.word	0x20000040
 800292c:	2000047c 	.word	0x2000047c

08002930 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  return uwTick;
 8002934:	4b03      	ldr	r3, [pc, #12]	; (8002944 <HAL_GetTick+0x14>)
 8002936:	681b      	ldr	r3, [r3, #0]
}
 8002938:	4618      	mov	r0, r3
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	2000047c 	.word	0x2000047c

08002948 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002950:	f7ff ffee 	bl	8002930 <HAL_GetTick>
 8002954:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002960:	d005      	beq.n	800296e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002962:	4b09      	ldr	r3, [pc, #36]	; (8002988 <HAL_Delay+0x40>)
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	461a      	mov	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	4413      	add	r3, r2
 800296c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800296e:	bf00      	nop
 8002970:	f7ff ffde 	bl	8002930 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	429a      	cmp	r2, r3
 800297e:	d8f7      	bhi.n	8002970 <HAL_Delay+0x28>
  {
  }
}
 8002980:	bf00      	nop
 8002982:	3710      	adds	r7, #16
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	20000040 	.word	0x20000040

0800298c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002994:	2300      	movs	r3, #0
 8002996:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e031      	b.n	8002a06 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d109      	bne.n	80029be <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f00b fe02 	bl	800e5b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	f003 0310 	and.w	r3, r3, #16
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d116      	bne.n	80029f8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029ce:	4b10      	ldr	r3, [pc, #64]	; (8002a10 <HAL_ADC_Init+0x84>)
 80029d0:	4013      	ands	r3, r2
 80029d2:	f043 0202 	orr.w	r2, r3, #2
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 fb7a 	bl	80030d4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	f023 0303 	bic.w	r3, r3, #3
 80029ee:	f043 0201 	orr.w	r2, r3, #1
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	641a      	str	r2, [r3, #64]	; 0x40
 80029f6:	e001      	b.n	80029fc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	ffffeefd 	.word	0xffffeefd

08002a14 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d101      	bne.n	8002a2e <HAL_ADC_Start_IT+0x1a>
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	e0a8      	b.n	8002b80 <HAL_ADC_Start_IT+0x16c>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2201      	movs	r2, #1
 8002a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d018      	beq.n	8002a76 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689a      	ldr	r2, [r3, #8]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f042 0201 	orr.w	r2, r2, #1
 8002a52:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002a54:	4b4d      	ldr	r3, [pc, #308]	; (8002b8c <HAL_ADC_Start_IT+0x178>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a4d      	ldr	r2, [pc, #308]	; (8002b90 <HAL_ADC_Start_IT+0x17c>)
 8002a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5e:	0c9a      	lsrs	r2, r3, #18
 8002a60:	4613      	mov	r3, r2
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	4413      	add	r3, r2
 8002a66:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002a68:	e002      	b.n	8002a70 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1f9      	bne.n	8002a6a <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d17c      	bne.n	8002b7e <HAL_ADC_Start_IT+0x16a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a88:	4b42      	ldr	r3, [pc, #264]	; (8002b94 <HAL_ADC_Start_IT+0x180>)
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d007      	beq.n	8002ab2 <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002aaa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002abe:	d106      	bne.n	8002ace <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac4:	f023 0206 	bic.w	r2, r3, #6
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	645a      	str	r2, [r3, #68]	; 0x44
 8002acc:	e002      	b.n	8002ad4 <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002ae4:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	6859      	ldr	r1, [r3, #4]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	4b29      	ldr	r3, [pc, #164]	; (8002b98 <HAL_ADC_Start_IT+0x184>)
 8002af2:	430b      	orrs	r3, r1
 8002af4:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002af6:	4b29      	ldr	r3, [pc, #164]	; (8002b9c <HAL_ADC_Start_IT+0x188>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f003 031f 	and.w	r3, r3, #31
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10f      	bne.n	8002b22 <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d136      	bne.n	8002b7e <HAL_ADC_Start_IT+0x16a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689a      	ldr	r2, [r3, #8]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b1e:	609a      	str	r2, [r3, #8]
 8002b20:	e02d      	b.n	8002b7e <HAL_ADC_Start_IT+0x16a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a1e      	ldr	r2, [pc, #120]	; (8002ba0 <HAL_ADC_Start_IT+0x18c>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d10e      	bne.n	8002b4a <HAL_ADC_Start_IT+0x136>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d107      	bne.n	8002b4a <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b48:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002b4a:	4b14      	ldr	r3, [pc, #80]	; (8002b9c <HAL_ADC_Start_IT+0x188>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f003 0310 	and.w	r3, r3, #16
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d113      	bne.n	8002b7e <HAL_ADC_Start_IT+0x16a>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a12      	ldr	r2, [pc, #72]	; (8002ba4 <HAL_ADC_Start_IT+0x190>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d10e      	bne.n	8002b7e <HAL_ADC_Start_IT+0x16a>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d107      	bne.n	8002b7e <HAL_ADC_Start_IT+0x16a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b7c:	609a      	str	r2, [r3, #8]
      } 
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3714      	adds	r7, #20
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr
 8002b8c:	20000048 	.word	0x20000048
 8002b90:	431bde83 	.word	0x431bde83
 8002b94:	fffff8fe 	.word	0xfffff8fe
 8002b98:	04000020 	.word	0x04000020
 8002b9c:	40012300 	.word	0x40012300
 8002ba0:	40012000 	.word	0x40012000
 8002ba4:	40012200 	.word	0x40012200

08002ba8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	60fb      	str	r3, [r7, #12]
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	bf0c      	ite	eq
 8002bc6:	2301      	moveq	r3, #1
 8002bc8:	2300      	movne	r3, #0
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f003 0320 	and.w	r3, r3, #32
 8002bd8:	2b20      	cmp	r3, #32
 8002bda:	bf0c      	ite	eq
 8002bdc:	2301      	moveq	r3, #1
 8002bde:	2300      	movne	r3, #0
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d049      	beq.n	8002c7e <HAL_ADC_IRQHandler+0xd6>
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d046      	beq.n	8002c7e <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf4:	f003 0310 	and.w	r3, r3, #16
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d105      	bne.n	8002c08 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c00:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d12b      	bne.n	8002c6e <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d127      	bne.n	8002c6e <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c24:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d006      	beq.n	8002c3a <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d119      	bne.n	8002c6e <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	685a      	ldr	r2, [r3, #4]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f022 0220 	bic.w	r2, r2, #32
 8002c48:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d105      	bne.n	8002c6e <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	f043 0201 	orr.w	r2, r3, #1
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f00a f9c2 	bl	800cff8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f06f 0212 	mvn.w	r2, #18
 8002c7c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0304 	and.w	r3, r3, #4
 8002c88:	2b04      	cmp	r3, #4
 8002c8a:	bf0c      	ite	eq
 8002c8c:	2301      	moveq	r3, #1
 8002c8e:	2300      	movne	r3, #0
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c9e:	2b80      	cmp	r3, #128	; 0x80
 8002ca0:	bf0c      	ite	eq
 8002ca2:	2301      	moveq	r3, #1
 8002ca4:	2300      	movne	r3, #0
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d057      	beq.n	8002d60 <HAL_ADC_IRQHandler+0x1b8>
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d054      	beq.n	8002d60 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cba:	f003 0310 	and.w	r3, r3, #16
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d105      	bne.n	8002cce <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d139      	bne.n	8002d50 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d006      	beq.n	8002cf8 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d12b      	bne.n	8002d50 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d124      	bne.n	8002d50 <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d11d      	bne.n	8002d50 <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d119      	bne.n	8002d50 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	685a      	ldr	r2, [r3, #4]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d2a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d30:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d105      	bne.n	8002d50 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d48:	f043 0201 	orr.w	r2, r3, #1
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 fab9 	bl	80032c8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f06f 020c 	mvn.w	r2, #12
 8002d5e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	bf0c      	ite	eq
 8002d6e:	2301      	moveq	r3, #1
 8002d70:	2300      	movne	r3, #0
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d80:	2b40      	cmp	r3, #64	; 0x40
 8002d82:	bf0c      	ite	eq
 8002d84:	2301      	moveq	r3, #1
 8002d86:	2300      	movne	r3, #0
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d017      	beq.n	8002dc2 <HAL_ADC_IRQHandler+0x21a>
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d014      	beq.n	8002dc2 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d10d      	bne.n	8002dc2 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 f846 	bl	8002e44 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f06f 0201 	mvn.w	r2, #1
 8002dc0:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0320 	and.w	r3, r3, #32
 8002dcc:	2b20      	cmp	r3, #32
 8002dce:	bf0c      	ite	eq
 8002dd0:	2301      	moveq	r3, #1
 8002dd2:	2300      	movne	r3, #0
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002de2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002de6:	bf0c      	ite	eq
 8002de8:	2301      	moveq	r3, #1
 8002dea:	2300      	movne	r3, #0
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d015      	beq.n	8002e22 <HAL_ADC_IRQHandler+0x27a>
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d012      	beq.n	8002e22 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e00:	f043 0202 	orr.w	r2, r3, #2
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f06f 0220 	mvn.w	r2, #32
 8002e10:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 f820 	bl	8002e58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f06f 0220 	mvn.w	r2, #32
 8002e20:	601a      	str	r2, [r3, #0]
  }
}
 8002e22:	bf00      	nop
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002e2a:	b480      	push	{r7}
 8002e2c:	b083      	sub	sp, #12
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002e76:	2300      	movs	r3, #0
 8002e78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d101      	bne.n	8002e88 <HAL_ADC_ConfigChannel+0x1c>
 8002e84:	2302      	movs	r3, #2
 8002e86:	e115      	b.n	80030b4 <HAL_ADC_ConfigChannel+0x248>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2b09      	cmp	r3, #9
 8002e96:	d935      	bls.n	8002f04 <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68d9      	ldr	r1, [r3, #12]
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	4413      	add	r3, r2
 8002eac:	3b1e      	subs	r3, #30
 8002eae:	2207      	movs	r2, #7
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	43da      	mvns	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	400a      	ands	r2, r1
 8002ebc:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a7f      	ldr	r2, [pc, #508]	; (80030c0 <HAL_ADC_ConfigChannel+0x254>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d10a      	bne.n	8002ede <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68d9      	ldr	r1, [r3, #12]
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	061a      	lsls	r2, r3, #24
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	60da      	str	r2, [r3, #12]
 8002edc:	e035      	b.n	8002f4a <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68d9      	ldr	r1, [r3, #12]
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	689a      	ldr	r2, [r3, #8]
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	4618      	mov	r0, r3
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	4403      	add	r3, r0
 8002ef6:	3b1e      	subs	r3, #30
 8002ef8:	409a      	lsls	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	430a      	orrs	r2, r1
 8002f00:	60da      	str	r2, [r3, #12]
 8002f02:	e022      	b.n	8002f4a <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6919      	ldr	r1, [r3, #16]
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	461a      	mov	r2, r3
 8002f12:	4613      	mov	r3, r2
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	4413      	add	r3, r2
 8002f18:	2207      	movs	r2, #7
 8002f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1e:	43da      	mvns	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	400a      	ands	r2, r1
 8002f26:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6919      	ldr	r1, [r3, #16]
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	689a      	ldr	r2, [r3, #8]
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	4618      	mov	r0, r3
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	4403      	add	r3, r0
 8002f40:	409a      	lsls	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	430a      	orrs	r2, r1
 8002f48:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	2b06      	cmp	r3, #6
 8002f50:	d824      	bhi.n	8002f9c <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685a      	ldr	r2, [r3, #4]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	4413      	add	r3, r2
 8002f62:	3b05      	subs	r3, #5
 8002f64:	221f      	movs	r2, #31
 8002f66:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6a:	43da      	mvns	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	400a      	ands	r2, r1
 8002f72:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	4618      	mov	r0, r3
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	4613      	mov	r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	4413      	add	r3, r2
 8002f8c:	3b05      	subs	r3, #5
 8002f8e:	fa00 f203 	lsl.w	r2, r0, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	430a      	orrs	r2, r1
 8002f98:	635a      	str	r2, [r3, #52]	; 0x34
 8002f9a:	e04c      	b.n	8003036 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	2b0c      	cmp	r3, #12
 8002fa2:	d824      	bhi.n	8002fee <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685a      	ldr	r2, [r3, #4]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	4413      	add	r3, r2
 8002fb4:	3b23      	subs	r3, #35	; 0x23
 8002fb6:	221f      	movs	r2, #31
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	43da      	mvns	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	400a      	ands	r2, r1
 8002fc4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685a      	ldr	r2, [r3, #4]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	4413      	add	r3, r2
 8002fde:	3b23      	subs	r3, #35	; 0x23
 8002fe0:	fa00 f203 	lsl.w	r2, r0, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	631a      	str	r2, [r3, #48]	; 0x30
 8002fec:	e023      	b.n	8003036 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	4413      	add	r3, r2
 8002ffe:	3b41      	subs	r3, #65	; 0x41
 8003000:	221f      	movs	r2, #31
 8003002:	fa02 f303 	lsl.w	r3, r2, r3
 8003006:	43da      	mvns	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	400a      	ands	r2, r1
 800300e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	b29b      	uxth	r3, r3
 800301c:	4618      	mov	r0, r3
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685a      	ldr	r2, [r3, #4]
 8003022:	4613      	mov	r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	4413      	add	r3, r2
 8003028:	3b41      	subs	r3, #65	; 0x41
 800302a:	fa00 f203 	lsl.w	r2, r0, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	430a      	orrs	r2, r1
 8003034:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a22      	ldr	r2, [pc, #136]	; (80030c4 <HAL_ADC_ConfigChannel+0x258>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d109      	bne.n	8003054 <HAL_ADC_ConfigChannel+0x1e8>
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2b12      	cmp	r3, #18
 8003046:	d105      	bne.n	8003054 <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003048:	4b1f      	ldr	r3, [pc, #124]	; (80030c8 <HAL_ADC_ConfigChannel+0x25c>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	4a1e      	ldr	r2, [pc, #120]	; (80030c8 <HAL_ADC_ConfigChannel+0x25c>)
 800304e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003052:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a1a      	ldr	r2, [pc, #104]	; (80030c4 <HAL_ADC_ConfigChannel+0x258>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d125      	bne.n	80030aa <HAL_ADC_ConfigChannel+0x23e>
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a17      	ldr	r2, [pc, #92]	; (80030c0 <HAL_ADC_ConfigChannel+0x254>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d003      	beq.n	8003070 <HAL_ADC_ConfigChannel+0x204>
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2b11      	cmp	r3, #17
 800306e:	d11c      	bne.n	80030aa <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003070:	4b15      	ldr	r3, [pc, #84]	; (80030c8 <HAL_ADC_ConfigChannel+0x25c>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	4a14      	ldr	r2, [pc, #80]	; (80030c8 <HAL_ADC_ConfigChannel+0x25c>)
 8003076:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800307a:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a0f      	ldr	r2, [pc, #60]	; (80030c0 <HAL_ADC_ConfigChannel+0x254>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d111      	bne.n	80030aa <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003086:	4b11      	ldr	r3, [pc, #68]	; (80030cc <HAL_ADC_ConfigChannel+0x260>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a11      	ldr	r2, [pc, #68]	; (80030d0 <HAL_ADC_ConfigChannel+0x264>)
 800308c:	fba2 2303 	umull	r2, r3, r2, r3
 8003090:	0c9a      	lsrs	r2, r3, #18
 8003092:	4613      	mov	r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	4413      	add	r3, r2
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800309c:	e002      	b.n	80030a4 <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	3b01      	subs	r3, #1
 80030a2:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1f9      	bne.n	800309e <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3714      	adds	r7, #20
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr
 80030c0:	10000012 	.word	0x10000012
 80030c4:	40012000 	.word	0x40012000
 80030c8:	40012300 	.word	0x40012300
 80030cc:	20000048 	.word	0x20000048
 80030d0:	431bde83 	.word	0x431bde83

080030d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80030dc:	4b78      	ldr	r3, [pc, #480]	; (80032c0 <ADC_Init+0x1ec>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	4a77      	ldr	r2, [pc, #476]	; (80032c0 <ADC_Init+0x1ec>)
 80030e2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80030e6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80030e8:	4b75      	ldr	r3, [pc, #468]	; (80032c0 <ADC_Init+0x1ec>)
 80030ea:	685a      	ldr	r2, [r3, #4]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	4973      	ldr	r1, [pc, #460]	; (80032c0 <ADC_Init+0x1ec>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	685a      	ldr	r2, [r3, #4]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003104:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	6859      	ldr	r1, [r3, #4]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	021a      	lsls	r2, r3, #8
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003128:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	6859      	ldr	r1, [r3, #4]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689a      	ldr	r2, [r3, #8]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	430a      	orrs	r2, r1
 800313a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	689a      	ldr	r2, [r3, #8]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800314a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	6899      	ldr	r1, [r3, #8]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	68da      	ldr	r2, [r3, #12]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	430a      	orrs	r2, r1
 800315c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003162:	4a58      	ldr	r2, [pc, #352]	; (80032c4 <ADC_Init+0x1f0>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d022      	beq.n	80031ae <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689a      	ldr	r2, [r3, #8]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003176:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	6899      	ldr	r1, [r3, #8]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	430a      	orrs	r2, r1
 8003188:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003198:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	6899      	ldr	r1, [r3, #8]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	609a      	str	r2, [r3, #8]
 80031ac:	e00f      	b.n	80031ce <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	689a      	ldr	r2, [r3, #8]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689a      	ldr	r2, [r3, #8]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f022 0202 	bic.w	r2, r2, #2
 80031dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6899      	ldr	r1, [r3, #8]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	005a      	lsls	r2, r3, #1
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d01b      	beq.n	8003234 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	685a      	ldr	r2, [r3, #4]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800320a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800321a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6859      	ldr	r1, [r3, #4]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003226:	3b01      	subs	r3, #1
 8003228:	035a      	lsls	r2, r3, #13
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	605a      	str	r2, [r3, #4]
 8003232:	e007      	b.n	8003244 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	685a      	ldr	r2, [r3, #4]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003242:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003252:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	3b01      	subs	r3, #1
 8003260:	051a      	lsls	r2, r3, #20
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	430a      	orrs	r2, r1
 8003268:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	689a      	ldr	r2, [r3, #8]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003278:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	6899      	ldr	r1, [r3, #8]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003286:	025a      	lsls	r2, r3, #9
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	430a      	orrs	r2, r1
 800328e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689a      	ldr	r2, [r3, #8]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800329e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6899      	ldr	r1, [r3, #8]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	029a      	lsls	r2, r3, #10
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	430a      	orrs	r2, r1
 80032b2:	609a      	str	r2, [r3, #8]
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr
 80032c0:	40012300 	.word	0x40012300
 80032c4:	0f000001 	.word	0x0f000001

080032c8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032dc:	b480      	push	{r7}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f003 0307 	and.w	r3, r3, #7
 80032ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032ec:	4b0b      	ldr	r3, [pc, #44]	; (800331c <__NVIC_SetPriorityGrouping+0x40>)
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032f2:	68ba      	ldr	r2, [r7, #8]
 80032f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032f8:	4013      	ands	r3, r2
 80032fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003304:	4b06      	ldr	r3, [pc, #24]	; (8003320 <__NVIC_SetPriorityGrouping+0x44>)
 8003306:	4313      	orrs	r3, r2
 8003308:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800330a:	4a04      	ldr	r2, [pc, #16]	; (800331c <__NVIC_SetPriorityGrouping+0x40>)
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	60d3      	str	r3, [r2, #12]
}
 8003310:	bf00      	nop
 8003312:	3714      	adds	r7, #20
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr
 800331c:	e000ed00 	.word	0xe000ed00
 8003320:	05fa0000 	.word	0x05fa0000

08003324 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003328:	4b04      	ldr	r3, [pc, #16]	; (800333c <__NVIC_GetPriorityGrouping+0x18>)
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	0a1b      	lsrs	r3, r3, #8
 800332e:	f003 0307 	and.w	r3, r3, #7
}
 8003332:	4618      	mov	r0, r3
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr
 800333c:	e000ed00 	.word	0xe000ed00

08003340 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	4603      	mov	r3, r0
 8003348:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800334a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800334e:	2b00      	cmp	r3, #0
 8003350:	db0b      	blt.n	800336a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003352:	79fb      	ldrb	r3, [r7, #7]
 8003354:	f003 021f 	and.w	r2, r3, #31
 8003358:	4907      	ldr	r1, [pc, #28]	; (8003378 <__NVIC_EnableIRQ+0x38>)
 800335a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800335e:	095b      	lsrs	r3, r3, #5
 8003360:	2001      	movs	r0, #1
 8003362:	fa00 f202 	lsl.w	r2, r0, r2
 8003366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800336a:	bf00      	nop
 800336c:	370c      	adds	r7, #12
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	e000e100 	.word	0xe000e100

0800337c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	4603      	mov	r3, r0
 8003384:	6039      	str	r1, [r7, #0]
 8003386:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800338c:	2b00      	cmp	r3, #0
 800338e:	db0a      	blt.n	80033a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	b2da      	uxtb	r2, r3
 8003394:	490c      	ldr	r1, [pc, #48]	; (80033c8 <__NVIC_SetPriority+0x4c>)
 8003396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339a:	0112      	lsls	r2, r2, #4
 800339c:	b2d2      	uxtb	r2, r2
 800339e:	440b      	add	r3, r1
 80033a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033a4:	e00a      	b.n	80033bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	b2da      	uxtb	r2, r3
 80033aa:	4908      	ldr	r1, [pc, #32]	; (80033cc <__NVIC_SetPriority+0x50>)
 80033ac:	79fb      	ldrb	r3, [r7, #7]
 80033ae:	f003 030f 	and.w	r3, r3, #15
 80033b2:	3b04      	subs	r3, #4
 80033b4:	0112      	lsls	r2, r2, #4
 80033b6:	b2d2      	uxtb	r2, r2
 80033b8:	440b      	add	r3, r1
 80033ba:	761a      	strb	r2, [r3, #24]
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	e000e100 	.word	0xe000e100
 80033cc:	e000ed00 	.word	0xe000ed00

080033d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b089      	sub	sp, #36	; 0x24
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f003 0307 	and.w	r3, r3, #7
 80033e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	f1c3 0307 	rsb	r3, r3, #7
 80033ea:	2b04      	cmp	r3, #4
 80033ec:	bf28      	it	cs
 80033ee:	2304      	movcs	r3, #4
 80033f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	3304      	adds	r3, #4
 80033f6:	2b06      	cmp	r3, #6
 80033f8:	d902      	bls.n	8003400 <NVIC_EncodePriority+0x30>
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	3b03      	subs	r3, #3
 80033fe:	e000      	b.n	8003402 <NVIC_EncodePriority+0x32>
 8003400:	2300      	movs	r3, #0
 8003402:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003404:	f04f 32ff 	mov.w	r2, #4294967295
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	fa02 f303 	lsl.w	r3, r2, r3
 800340e:	43da      	mvns	r2, r3
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	401a      	ands	r2, r3
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003418:	f04f 31ff 	mov.w	r1, #4294967295
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	fa01 f303 	lsl.w	r3, r1, r3
 8003422:	43d9      	mvns	r1, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003428:	4313      	orrs	r3, r2
         );
}
 800342a:	4618      	mov	r0, r3
 800342c:	3724      	adds	r7, #36	; 0x24
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
	...

08003438 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	3b01      	subs	r3, #1
 8003444:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003448:	d301      	bcc.n	800344e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800344a:	2301      	movs	r3, #1
 800344c:	e00f      	b.n	800346e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800344e:	4a0a      	ldr	r2, [pc, #40]	; (8003478 <SysTick_Config+0x40>)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	3b01      	subs	r3, #1
 8003454:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003456:	210f      	movs	r1, #15
 8003458:	f04f 30ff 	mov.w	r0, #4294967295
 800345c:	f7ff ff8e 	bl	800337c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003460:	4b05      	ldr	r3, [pc, #20]	; (8003478 <SysTick_Config+0x40>)
 8003462:	2200      	movs	r2, #0
 8003464:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003466:	4b04      	ldr	r3, [pc, #16]	; (8003478 <SysTick_Config+0x40>)
 8003468:	2207      	movs	r2, #7
 800346a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	e000e010 	.word	0xe000e010

0800347c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f7ff ff29 	bl	80032dc <__NVIC_SetPriorityGrouping>
}
 800348a:	bf00      	nop
 800348c:	3708      	adds	r7, #8
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003492:	b580      	push	{r7, lr}
 8003494:	b086      	sub	sp, #24
 8003496:	af00      	add	r7, sp, #0
 8003498:	4603      	mov	r3, r0
 800349a:	60b9      	str	r1, [r7, #8]
 800349c:	607a      	str	r2, [r7, #4]
 800349e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80034a0:	2300      	movs	r3, #0
 80034a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034a4:	f7ff ff3e 	bl	8003324 <__NVIC_GetPriorityGrouping>
 80034a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	68b9      	ldr	r1, [r7, #8]
 80034ae:	6978      	ldr	r0, [r7, #20]
 80034b0:	f7ff ff8e 	bl	80033d0 <NVIC_EncodePriority>
 80034b4:	4602      	mov	r2, r0
 80034b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ba:	4611      	mov	r1, r2
 80034bc:	4618      	mov	r0, r3
 80034be:	f7ff ff5d 	bl	800337c <__NVIC_SetPriority>
}
 80034c2:	bf00      	nop
 80034c4:	3718      	adds	r7, #24
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b082      	sub	sp, #8
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	4603      	mov	r3, r0
 80034d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d8:	4618      	mov	r0, r3
 80034da:	f7ff ff31 	bl	8003340 <__NVIC_EnableIRQ>
}
 80034de:	bf00      	nop
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b082      	sub	sp, #8
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f7ff ffa2 	bl	8003438 <SysTick_Config>
 80034f4:	4603      	mov	r3, r0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3708      	adds	r7, #8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
	...

08003500 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003508:	2300      	movs	r3, #0
 800350a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800350c:	f7ff fa10 	bl	8002930 <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d101      	bne.n	800351c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e099      	b.n	8003650 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2202      	movs	r2, #2
 8003528:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f022 0201 	bic.w	r2, r2, #1
 800353a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800353c:	e00f      	b.n	800355e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800353e:	f7ff f9f7 	bl	8002930 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b05      	cmp	r3, #5
 800354a:	d908      	bls.n	800355e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2220      	movs	r2, #32
 8003550:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2203      	movs	r2, #3
 8003556:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e078      	b.n	8003650 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1e8      	bne.n	800353e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003574:	697a      	ldr	r2, [r7, #20]
 8003576:	4b38      	ldr	r3, [pc, #224]	; (8003658 <HAL_DMA_Init+0x158>)
 8003578:	4013      	ands	r3, r2
 800357a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685a      	ldr	r2, [r3, #4]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800358a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003596:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b4:	2b04      	cmp	r3, #4
 80035b6:	d107      	bne.n	80035c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c0:	4313      	orrs	r3, r2
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	f023 0307 	bic.w	r3, r3, #7
 80035de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ee:	2b04      	cmp	r3, #4
 80035f0:	d117      	bne.n	8003622 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00e      	beq.n	8003622 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f000 f8bd 	bl	8003784 <DMA_CheckFifoParam>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d008      	beq.n	8003622 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2240      	movs	r2, #64	; 0x40
 8003614:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2201      	movs	r2, #1
 800361a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800361e:	2301      	movs	r3, #1
 8003620:	e016      	b.n	8003650 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 f874 	bl	8003718 <DMA_CalcBaseAndBitshift>
 8003630:	4603      	mov	r3, r0
 8003632:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003638:	223f      	movs	r2, #63	; 0x3f
 800363a:	409a      	lsls	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2201      	movs	r2, #1
 800364a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3718      	adds	r7, #24
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	e010803f 	.word	0xe010803f

0800365c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e050      	b.n	8003710 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b02      	cmp	r3, #2
 8003678:	d101      	bne.n	800367e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800367a:	2302      	movs	r3, #2
 800367c:	e048      	b.n	8003710 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 0201 	bic.w	r2, r2, #1
 800368c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2200      	movs	r2, #0
 8003694:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2200      	movs	r2, #0
 800369c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2200      	movs	r2, #0
 80036a4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2200      	movs	r2, #0
 80036ac:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2200      	movs	r2, #0
 80036b4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2221      	movs	r2, #33	; 0x21
 80036bc:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 f82a 	bl	8003718 <DMA_CalcBaseAndBitshift>
 80036c4:	4603      	mov	r3, r0
 80036c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036cc:	223f      	movs	r2, #63	; 0x3f
 80036ce:	409a      	lsls	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3710      	adds	r7, #16
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	b2db      	uxtb	r3, r3
 8003726:	3b10      	subs	r3, #16
 8003728:	4a13      	ldr	r2, [pc, #76]	; (8003778 <DMA_CalcBaseAndBitshift+0x60>)
 800372a:	fba2 2303 	umull	r2, r3, r2, r3
 800372e:	091b      	lsrs	r3, r3, #4
 8003730:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003732:	4a12      	ldr	r2, [pc, #72]	; (800377c <DMA_CalcBaseAndBitshift+0x64>)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	4413      	add	r3, r2
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	461a      	mov	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2b03      	cmp	r3, #3
 8003744:	d908      	bls.n	8003758 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	461a      	mov	r2, r3
 800374c:	4b0c      	ldr	r3, [pc, #48]	; (8003780 <DMA_CalcBaseAndBitshift+0x68>)
 800374e:	4013      	ands	r3, r2
 8003750:	1d1a      	adds	r2, r3, #4
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	659a      	str	r2, [r3, #88]	; 0x58
 8003756:	e006      	b.n	8003766 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	461a      	mov	r2, r3
 800375e:	4b08      	ldr	r3, [pc, #32]	; (8003780 <DMA_CalcBaseAndBitshift+0x68>)
 8003760:	4013      	ands	r3, r2
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800376a:	4618      	mov	r0, r3
 800376c:	3714      	adds	r7, #20
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	aaaaaaab 	.word	0xaaaaaaab
 800377c:	08011324 	.word	0x08011324
 8003780:	fffffc00 	.word	0xfffffc00

08003784 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003784:	b480      	push	{r7}
 8003786:	b085      	sub	sp, #20
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800378c:	2300      	movs	r3, #0
 800378e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003794:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d11f      	bne.n	80037de <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	2b03      	cmp	r3, #3
 80037a2:	d855      	bhi.n	8003850 <DMA_CheckFifoParam+0xcc>
 80037a4:	a201      	add	r2, pc, #4	; (adr r2, 80037ac <DMA_CheckFifoParam+0x28>)
 80037a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037aa:	bf00      	nop
 80037ac:	080037bd 	.word	0x080037bd
 80037b0:	080037cf 	.word	0x080037cf
 80037b4:	080037bd 	.word	0x080037bd
 80037b8:	08003851 	.word	0x08003851
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d045      	beq.n	8003854 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037cc:	e042      	b.n	8003854 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037d6:	d13f      	bne.n	8003858 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037dc:	e03c      	b.n	8003858 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037e6:	d121      	bne.n	800382c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	2b03      	cmp	r3, #3
 80037ec:	d836      	bhi.n	800385c <DMA_CheckFifoParam+0xd8>
 80037ee:	a201      	add	r2, pc, #4	; (adr r2, 80037f4 <DMA_CheckFifoParam+0x70>)
 80037f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f4:	08003805 	.word	0x08003805
 80037f8:	0800380b 	.word	0x0800380b
 80037fc:	08003805 	.word	0x08003805
 8003800:	0800381d 	.word	0x0800381d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	73fb      	strb	r3, [r7, #15]
      break;
 8003808:	e02f      	b.n	800386a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d024      	beq.n	8003860 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800381a:	e021      	b.n	8003860 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003820:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003824:	d11e      	bne.n	8003864 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800382a:	e01b      	b.n	8003864 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	2b02      	cmp	r3, #2
 8003830:	d902      	bls.n	8003838 <DMA_CheckFifoParam+0xb4>
 8003832:	2b03      	cmp	r3, #3
 8003834:	d003      	beq.n	800383e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003836:	e018      	b.n	800386a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	73fb      	strb	r3, [r7, #15]
      break;
 800383c:	e015      	b.n	800386a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003842:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00e      	beq.n	8003868 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	73fb      	strb	r3, [r7, #15]
      break;
 800384e:	e00b      	b.n	8003868 <DMA_CheckFifoParam+0xe4>
      break;
 8003850:	bf00      	nop
 8003852:	e00a      	b.n	800386a <DMA_CheckFifoParam+0xe6>
      break;
 8003854:	bf00      	nop
 8003856:	e008      	b.n	800386a <DMA_CheckFifoParam+0xe6>
      break;
 8003858:	bf00      	nop
 800385a:	e006      	b.n	800386a <DMA_CheckFifoParam+0xe6>
      break;
 800385c:	bf00      	nop
 800385e:	e004      	b.n	800386a <DMA_CheckFifoParam+0xe6>
      break;
 8003860:	bf00      	nop
 8003862:	e002      	b.n	800386a <DMA_CheckFifoParam+0xe6>
      break;   
 8003864:	bf00      	nop
 8003866:	e000      	b.n	800386a <DMA_CheckFifoParam+0xe6>
      break;
 8003868:	bf00      	nop
    }
  } 
  
  return status; 
 800386a:	7bfb      	ldrb	r3, [r7, #15]
}
 800386c:	4618      	mov	r0, r3
 800386e:	3714      	adds	r7, #20
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e049      	b.n	800391e <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d106      	bne.n	80038a4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f00a feae 	bl	800e600 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2202      	movs	r2, #2
 80038a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685a      	ldr	r2, [r3, #4]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	430a      	orrs	r2, r1
 80038c0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038c8:	f023 0107 	bic.w	r1, r3, #7
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	430a      	orrs	r2, r1
 80038d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038de:	4b12      	ldr	r3, [pc, #72]	; (8003928 <HAL_DMA2D_Init+0xb0>)
 80038e0:	4013      	ands	r3, r2
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	68d1      	ldr	r1, [r2, #12]
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	6812      	ldr	r2, [r2, #0]
 80038ea:	430b      	orrs	r3, r1
 80038ec:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038f4:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	051a      	lsls	r2, r3, #20
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	055b      	lsls	r3, r3, #21
 8003904:	431a      	orrs	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	430a      	orrs	r2, r1
 800390c:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3708      	adds	r7, #8
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	ffffc000 	.word	0xffffc000

0800392c <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af02      	add	r7, sp, #8
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	607a      	str	r2, [r7, #4]
 8003938:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003940:	2b01      	cmp	r3, #1
 8003942:	d101      	bne.n	8003948 <HAL_DMA2D_Start+0x1c>
 8003944:	2302      	movs	r3, #2
 8003946:	e018      	b.n	800397a <HAL_DMA2D_Start+0x4e>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2202      	movs	r2, #2
 8003954:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	9300      	str	r3, [sp, #0]
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	68b9      	ldr	r1, [r7, #8]
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f000 f994 	bl	8003c90 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f042 0201 	orr.w	r2, r2, #1
 8003976:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b086      	sub	sp, #24
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
 800398a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800398c:	2300      	movs	r3, #0
 800398e:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	2b00      	cmp	r3, #0
 800399c:	d056      	beq.n	8003a4c <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 800399e:	f7fe ffc7 	bl	8002930 <HAL_GetTick>
 80039a2:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80039a4:	e04b      	b.n	8003a3e <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d023      	beq.n	8003a00 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f003 0320 	and.w	r3, r3, #32
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d005      	beq.n	80039ce <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c6:	f043 0202 	orr.w	r2, r3, #2
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f003 0301 	and.w	r3, r3, #1
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d005      	beq.n	80039e4 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039dc:	f043 0201 	orr.w	r2, r3, #1
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2221      	movs	r2, #33	; 0x21
 80039ea:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2204      	movs	r2, #4
 80039f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e0a5      	b.n	8003b4c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a06:	d01a      	beq.n	8003a3e <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8003a08:	f7fe ff92 	bl	8002930 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	683a      	ldr	r2, [r7, #0]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d302      	bcc.n	8003a1e <HAL_DMA2D_PollForTransfer+0x9c>
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10f      	bne.n	8003a3e <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a22:	f043 0220 	orr.w	r2, r3, #32
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2203      	movs	r2, #3
 8003a2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e086      	b.n	8003b4c <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f003 0302 	and.w	r3, r3, #2
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d0ac      	beq.n	80039a6 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	69db      	ldr	r3, [r3, #28]
 8003a52:	f003 0320 	and.w	r3, r3, #32
 8003a56:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5e:	f003 0320 	and.w	r3, r3, #32
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d061      	beq.n	8003b32 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a6e:	f7fe ff5f 	bl	8002930 <HAL_GetTick>
 8003a72:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003a74:	e056      	b.n	8003b24 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d02e      	beq.n	8003ae6 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f003 0308 	and.w	r3, r3, #8
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d005      	beq.n	8003a9e <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a96:	f043 0204 	orr.w	r2, r3, #4
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f003 0320 	and.w	r3, r3, #32
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d005      	beq.n	8003ab4 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aac:	f043 0202 	orr.w	r2, r3, #2
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d005      	beq.n	8003aca <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac2:	f043 0201 	orr.w	r2, r3, #1
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2229      	movs	r2, #41	; 0x29
 8003ad0:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2204      	movs	r2, #4
 8003ad6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e032      	b.n	8003b4c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aec:	d01a      	beq.n	8003b24 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8003aee:	f7fe ff1f 	bl	8002930 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	683a      	ldr	r2, [r7, #0]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d302      	bcc.n	8003b04 <HAL_DMA2D_PollForTransfer+0x182>
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d10f      	bne.n	8003b24 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b08:	f043 0220 	orr.w	r2, r3, #32
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2203      	movs	r2, #3
 8003b14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e013      	b.n	8003b4c <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f003 0310 	and.w	r3, r3, #16
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d0a1      	beq.n	8003a76 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2212      	movs	r2, #18
 8003b38:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3718      	adds	r7, #24
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b087      	sub	sp, #28
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d101      	bne.n	8003b74 <HAL_DMA2D_ConfigLayer+0x20>
 8003b70:	2302      	movs	r3, #2
 8003b72:	e084      	b.n	8003c7e <HAL_DMA2D_ConfigLayer+0x12a>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2202      	movs	r2, #2
 8003b80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003b84:	683a      	ldr	r2, [r7, #0]
 8003b86:	4613      	mov	r3, r2
 8003b88:	005b      	lsls	r3, r3, #1
 8003b8a:	4413      	add	r3, r2
 8003b8c:	00db      	lsls	r3, r3, #3
 8003b8e:	3320      	adds	r3, #32
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	4413      	add	r3, r2
 8003b94:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	685a      	ldr	r2, [r3, #4]
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	041b      	lsls	r3, r3, #16
 8003ba0:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8003ba8:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8003bb4:	4b35      	ldr	r3, [pc, #212]	; (8003c8c <HAL_DMA2D_ConfigLayer+0x138>)
 8003bb6:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	2b0a      	cmp	r3, #10
 8003bbe:	d003      	beq.n	8003bc8 <HAL_DMA2D_ConfigLayer+0x74>
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	2b09      	cmp	r3, #9
 8003bc6:	d107      	bne.n	8003bd8 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	617b      	str	r3, [r7, #20]
 8003bd6:	e005      	b.n	8003be4 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	061b      	lsls	r3, r3, #24
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d120      	bne.n	8003c2c <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	43db      	mvns	r3, r3
 8003bf4:	ea02 0103 	and.w	r1, r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	6812      	ldr	r2, [r2, #0]
 8003c0a:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	2b0a      	cmp	r3, #10
 8003c12:	d003      	beq.n	8003c1c <HAL_DMA2D_ConfigLayer+0xc8>
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	2b09      	cmp	r3, #9
 8003c1a:	d127      	bne.n	8003c6c <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	68da      	ldr	r2, [r3, #12]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003c28:	629a      	str	r2, [r3, #40]	; 0x28
 8003c2a:	e01f      	b.n	8003c6c <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	69da      	ldr	r2, [r3, #28]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	43db      	mvns	r3, r3
 8003c36:	ea02 0103 	and.w	r1, r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	430a      	orrs	r2, r1
 8003c42:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	6812      	ldr	r2, [r2, #0]
 8003c4c:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	2b0a      	cmp	r3, #10
 8003c54:	d003      	beq.n	8003c5e <HAL_DMA2D_ConfigLayer+0x10a>
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	2b09      	cmp	r3, #9
 8003c5c:	d106      	bne.n	8003c6c <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	68da      	ldr	r2, [r3, #12]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003c6a:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	371c      	adds	r7, #28
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	ff33000f 	.word	0xff33000f

08003c90 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b08b      	sub	sp, #44	; 0x2c
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
 8003c9c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca4:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	041a      	lsls	r2, r3, #16
 8003cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003cc8:	d174      	bne.n	8003db4 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003cd0:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003cd8:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003ce0:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d108      	bne.n	8003d02 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	431a      	orrs	r2, r3
 8003cf6:	6a3b      	ldr	r3, [r7, #32]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	627b      	str	r3, [r7, #36]	; 0x24
 8003d00:	e053      	b.n	8003daa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d106      	bne.n	8003d18 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003d0a:	69ba      	ldr	r2, [r7, #24]
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	627b      	str	r3, [r7, #36]	; 0x24
 8003d16:	e048      	b.n	8003daa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d111      	bne.n	8003d44 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	0cdb      	lsrs	r3, r3, #19
 8003d24:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	0a9b      	lsrs	r3, r3, #10
 8003d2a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	08db      	lsrs	r3, r3, #3
 8003d30:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	015a      	lsls	r2, r3, #5
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	02db      	lsls	r3, r3, #11
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	697a      	ldr	r2, [r7, #20]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	627b      	str	r3, [r7, #36]	; 0x24
 8003d42:	e032      	b.n	8003daa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	2b03      	cmp	r3, #3
 8003d4a:	d117      	bne.n	8003d7c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003d4c:	6a3b      	ldr	r3, [r7, #32]
 8003d4e:	0fdb      	lsrs	r3, r3, #31
 8003d50:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	0cdb      	lsrs	r3, r3, #19
 8003d56:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	0adb      	lsrs	r3, r3, #11
 8003d5c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	08db      	lsrs	r3, r3, #3
 8003d62:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	015a      	lsls	r2, r3, #5
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	029b      	lsls	r3, r3, #10
 8003d6c:	431a      	orrs	r2, r3
 8003d6e:	6a3b      	ldr	r3, [r7, #32]
 8003d70:	03db      	lsls	r3, r3, #15
 8003d72:	4313      	orrs	r3, r2
 8003d74:	697a      	ldr	r2, [r7, #20]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	627b      	str	r3, [r7, #36]	; 0x24
 8003d7a:	e016      	b.n	8003daa <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003d7c:	6a3b      	ldr	r3, [r7, #32]
 8003d7e:	0f1b      	lsrs	r3, r3, #28
 8003d80:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	0d1b      	lsrs	r3, r3, #20
 8003d86:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	0b1b      	lsrs	r3, r3, #12
 8003d8c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	091b      	lsrs	r3, r3, #4
 8003d92:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	011a      	lsls	r2, r3, #4
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	021b      	lsls	r3, r3, #8
 8003d9c:	431a      	orrs	r2, r3
 8003d9e:	6a3b      	ldr	r3, [r7, #32]
 8003da0:	031b      	lsls	r3, r3, #12
 8003da2:	4313      	orrs	r3, r2
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003db0:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003db2:	e003      	b.n	8003dbc <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68ba      	ldr	r2, [r7, #8]
 8003dba:	60da      	str	r2, [r3, #12]
}
 8003dbc:	bf00      	nop
 8003dbe:	372c      	adds	r7, #44	; 0x2c
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b085      	sub	sp, #20
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
 8003dd4:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	019a      	lsls	r2, r3, #6
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	431a      	orrs	r2, r3
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	021b      	lsls	r3, r3, #8
 8003de2:	431a      	orrs	r2, r3
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	041b      	lsls	r3, r3, #16
 8003de8:	431a      	orrs	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8003dee:	bf00      	nop
 8003df0:	3714      	adds	r7, #20
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr

08003dfa <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b086      	sub	sp, #24
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	60f8      	str	r0, [r7, #12]
 8003e02:	60b9      	str	r1, [r7, #8]
 8003e04:	607a      	str	r2, [r7, #4]
 8003e06:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e08:	f7fe fd92 	bl	8002930 <HAL_GetTick>
 8003e0c:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003e0e:	e009      	b.n	8003e24 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 8003e10:	f7fe fd8e 	bl	8002930 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e1e:	d901      	bls.n	8003e24 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e015      	b.n	8003e50 <DSI_ShortWrite+0x56>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e2a:	f003 0301 	and.w	r3, r3, #1
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d0ee      	beq.n	8003e10 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	019a      	lsls	r2, r3, #6
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	431a      	orrs	r2, r3
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	021b      	lsls	r3, r3, #8
 8003e3e:	ea42 0103 	orr.w	r1, r2, r3
 8003e42:	6a3b      	ldr	r3, [r7, #32]
 8003e44:	041a      	lsls	r2, r3, #16
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3718      	adds	r7, #24
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b088      	sub	sp, #32
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d101      	bne.n	8003e6c <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e106      	b.n	800407a <HAL_DSI_Init+0x222>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	7c5b      	ldrb	r3, [r3, #17]
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d102      	bne.n	8003e7c <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f00a fbe2 	bl	800e640 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2203      	movs	r2, #3
 8003e80:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8003e82:	2300      	movs	r3, #0
 8003e84:	613b      	str	r3, [r7, #16]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003e96:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003ea2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ea6:	613b      	str	r3, [r7, #16]
 8003ea8:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003eaa:	f7fe fd41 	bl	8002930 <HAL_GetTick>
 8003eae:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003eb0:	e009      	b.n	8003ec6 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003eb2:	f7fe fd3d 	bl	8002930 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ec0:	d901      	bls.n	8003ec6 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e0d9      	b.n	800407a <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003ece:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d0ed      	beq.n	8003eb2 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	4b68      	ldr	r3, [pc, #416]	; (8004084 <HAL_DSI_Init+0x22c>)
 8003ee4:	400b      	ands	r3, r1
 8003ee6:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	009a      	lsls	r2, r3, #2
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	02db      	lsls	r3, r3, #11
 8003efe:	431a      	orrs	r2, r3
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	041b      	lsls	r3, r3, #16
 8003f06:	431a      	orrs	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8003f12:	2300      	movs	r3, #0
 8003f14:	60fb      	str	r3, [r7, #12]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f042 0201 	orr.w	r2, r2, #1
 8003f26:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	60fb      	str	r3, [r7, #12]
 8003f38:	68fb      	ldr	r3, [r7, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f3a:	f7fe fcf9 	bl	8002930 <HAL_GetTick>
 8003f3e:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003f40:	e009      	b.n	8003f56 <HAL_DSI_Init+0xfe>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003f42:	f7fe fcf5 	bl	8002930 <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f50:	d901      	bls.n	8003f56 <HAL_DSI_Init+0xfe>
    {
      return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e091      	b.n	800407a <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d0ed      	beq.n	8003f42 <HAL_DSI_Init+0xea>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f042 0206 	orr.w	r2, r2, #6
 8003f76:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f022 0203 	bic.w	r2, r2, #3
 8003f8a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f042 0201 	orr.w	r2, r2, #1
 8003fa4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f022 0203 	bic.w	r2, r2, #3
 8003fb8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	68da      	ldr	r2, [r3, #12]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	689a      	ldr	r2, [r3, #8]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003fe0:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	6899      	ldr	r1, [r3, #8]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689a      	ldr	r2, [r3, #8]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d002      	beq.n	8004002 <HAL_DSI_Init+0x1aa>
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	e000      	b.n	8004004 <HAL_DSI_Init+0x1ac>
 8004002:	2301      	movs	r3, #1
 8004004:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	4a1f      	ldr	r2, [pc, #124]	; (8004088 <HAL_DSI_Init+0x230>)
 800400a:	fb02 f203 	mul.w	r2, r2, r3
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f003 0303 	and.w	r3, r3, #3
 8004016:	409a      	lsls	r2, r3
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8004020:	fb01 f303 	mul.w	r3, r1, r3
 8004024:	fbb2 f3f3 	udiv	r3, r2, r3
 8004028:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800403a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	430a      	orrs	r2, r1
 800404e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2200      	movs	r2, #0
 8004058:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2200      	movs	r2, #0
 8004062:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	619a      	str	r2, [r3, #24]

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2201      	movs	r2, #1
 8004076:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3720      	adds	r7, #32
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	fffc8603 	.word	0xfffc8603
 8004088:	003d0900 	.word	0x003d0900

0800408c <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d101      	bne.n	800409e <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e066      	b.n	800416c <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2203      	movs	r2, #3
 80040a2:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 80040a4:	2300      	movs	r3, #0
 80040a6:	617b      	str	r3, [r7, #20]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f022 0208 	bic.w	r2, r2, #8
 80040b8:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80040c4:	f003 0308 	and.w	r3, r3, #8
 80040c8:	617b      	str	r3, [r7, #20]
 80040ca:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 80040cc:	2300      	movs	r3, #0
 80040ce:	613b      	str	r3, [r7, #16]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	685a      	ldr	r2, [r3, #4]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f022 0201 	bic.w	r2, r2, #1
 80040de:	605a      	str	r2, [r3, #4]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	613b      	str	r3, [r7, #16]
 80040ec:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f022 0206 	bic.w	r2, r2, #6
 80040fe:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 8004102:	2300      	movs	r3, #0
 8004104:	60fb      	str	r3, [r7, #12]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f022 0201 	bic.w	r2, r2, #1
 8004116:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	60fb      	str	r3, [r7, #12]
 8004128:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 800412a:	2300      	movs	r3, #0
 800412c:	60bb      	str	r3, [r7, #8]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800413e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800414a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800414e:	60bb      	str	r3, [r7, #8]
 8004150:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f00a fab8 	bl	800e6c8 <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800416a:	2300      	movs	r3, #0
}
 800416c:	4618      	mov	r0, r3
 800416e:	3718      	adds	r7, #24
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @ref DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	7c1b      	ldrb	r3, [r3, #16]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d101      	bne.n	800418a <HAL_DSI_ConfigErrorMonitor+0x16>
 8004186:	2302      	movs	r3, #2
 8004188:	e0aa      	b.n	80042e0 <HAL_DSI_ConfigErrorMonitor+0x16c>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2200      	movs	r2, #0
 8004196:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2200      	movs	r2, #0
 80041a0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	683a      	ldr	r2, [r7, #0]
 80041a8:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	f003 0301 	and.w	r3, r3, #1
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00a      	beq.n	80041ca <HAL_DSI_ConfigErrorMonitor+0x56>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80041c4:	430b      	orrs	r3, r1
 80041c6:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	f003 0302 	and.w	r3, r3, #2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d009      	beq.n	80041e8 <HAL_DSI_ConfigErrorMonitor+0x74>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 80041e4:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	f003 0304 	and.w	r3, r3, #4
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d009      	beq.n	8004206 <HAL_DSI_ConfigErrorMonitor+0x92>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f042 0201 	orr.w	r2, r2, #1
 8004202:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	f003 0308 	and.w	r3, r3, #8
 800420c:	2b00      	cmp	r3, #0
 800420e:	d009      	beq.n	8004224 <HAL_DSI_ConfigErrorMonitor+0xb0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f042 0202 	orr.w	r2, r2, #2
 8004220:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	f003 0310 	and.w	r3, r3, #16
 800422a:	2b00      	cmp	r3, #0
 800422c:	d009      	beq.n	8004242 <HAL_DSI_ConfigErrorMonitor+0xce>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f042 020c 	orr.w	r2, r2, #12
 800423e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	f003 0320 	and.w	r3, r3, #32
 8004248:	2b00      	cmp	r3, #0
 800424a:	d009      	beq.n	8004260 <HAL_DSI_ConfigErrorMonitor+0xec>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f042 0210 	orr.w	r2, r2, #16
 800425c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004266:	2b00      	cmp	r3, #0
 8004268:	d009      	beq.n	800427e <HAL_DSI_ConfigErrorMonitor+0x10a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f042 0220 	orr.w	r2, r2, #32
 800427a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004284:	2b00      	cmp	r3, #0
 8004286:	d009      	beq.n	800429c <HAL_DSI_ConfigErrorMonitor+0x128>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004298:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d009      	beq.n	80042ba <HAL_DSI_ConfigErrorMonitor+0x146>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80042b6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d009      	beq.n	80042d8 <HAL_DSI_ConfigErrorMonitor+0x164>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 80042d4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	7c1b      	ldrb	r3, [r3, #16]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d101      	bne.n	8004302 <HAL_DSI_SetGenericVCID+0x16>
 80042fe:	2302      	movs	r3, #2
 8004300:	e016      	b.n	8004330 <HAL_DSI_SetGenericVCID+0x44>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2201      	movs	r2, #1
 8004306:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f022 0203 	bic.w	r2, r2, #3
 8004316:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	430a      	orrs	r2, r1
 8004326:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	7c1b      	ldrb	r3, [r3, #16]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d101      	bne.n	8004352 <HAL_DSI_ConfigVideoMode+0x16>
 800434e:	2302      	movs	r3, #2
 8004350:	e1ee      	b.n	8004730 <HAL_DSI_ConfigVideoMode+0x3f4>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2201      	movs	r2, #1
 8004356:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f022 0201 	bic.w	r2, r2, #1
 8004366:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 0201 	bic.w	r2, r2, #1
 8004378:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f022 0203 	bic.w	r2, r2, #3
 800438a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	68da      	ldr	r2, [r3, #12]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	430a      	orrs	r2, r1
 800439c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	4b8b      	ldr	r3, [pc, #556]	; (80045d8 <HAL_DSI_ConfigVideoMode+0x29c>)
 80043aa:	400b      	ands	r3, r1
 80043ac:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	691a      	ldr	r2, [r3, #16]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	430a      	orrs	r2, r1
 80043be:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	4b84      	ldr	r3, [pc, #528]	; (80045dc <HAL_DSI_ConfigVideoMode+0x2a0>)
 80043cc:	400b      	ands	r3, r1
 80043ce:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	695a      	ldr	r2, [r3, #20]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	430a      	orrs	r2, r1
 80043e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	4b7b      	ldr	r3, [pc, #492]	; (80045dc <HAL_DSI_ConfigVideoMode+0x2a0>)
 80043ee:	400b      	ands	r3, r1
 80043f0:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	699a      	ldr	r2, [r3, #24]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	430a      	orrs	r2, r1
 8004402:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68da      	ldr	r2, [r3, #12]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f022 0203 	bic.w	r2, r2, #3
 8004412:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68d9      	ldr	r1, [r3, #12]
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	430a      	orrs	r2, r1
 8004424:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	695a      	ldr	r2, [r3, #20]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f022 0207 	bic.w	r2, r2, #7
 8004434:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	6959      	ldr	r1, [r3, #20]
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	6a1b      	ldr	r3, [r3, #32]
 8004444:	431a      	orrs	r2, r3
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	69db      	ldr	r3, [r3, #28]
 800444a:	431a      	orrs	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	430a      	orrs	r2, r1
 8004452:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	691a      	ldr	r2, [r3, #16]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f022 020f 	bic.w	r2, r2, #15
 8004462:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	6919      	ldr	r1, [r3, #16]
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	685a      	ldr	r2, [r3, #4]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	430a      	orrs	r2, r1
 8004474:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f022 020e 	bic.w	r2, r2, #14
 8004486:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	005a      	lsls	r2, r3, #1
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	430a      	orrs	r2, r1
 800449e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	2b03      	cmp	r3, #3
 80044a8:	d110      	bne.n	80044cc <HAL_DSI_ConfigVideoMode+0x190>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	691a      	ldr	r2, [r3, #16]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044b8:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	6919      	ldr	r1, [r3, #16]
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	689a      	ldr	r2, [r3, #8]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	430a      	orrs	r2, r1
 80044ca:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	4b42      	ldr	r3, [pc, #264]	; (80045e0 <HAL_DSI_ConfigVideoMode+0x2a4>)
 80044d8:	400b      	ands	r3, r1
 80044da:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	430a      	orrs	r2, r1
 80044ec:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	4b39      	ldr	r3, [pc, #228]	; (80045e0 <HAL_DSI_ConfigVideoMode+0x2a4>)
 80044fa:	400b      	ands	r3, r1
 80044fc:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	430a      	orrs	r2, r1
 800450e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	4b32      	ldr	r3, [pc, #200]	; (80045e4 <HAL_DSI_ConfigVideoMode+0x2a8>)
 800451c:	400b      	ands	r3, r1
 800451e:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	430a      	orrs	r2, r1
 8004530:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	4b2a      	ldr	r3, [pc, #168]	; (80045e8 <HAL_DSI_ConfigVideoMode+0x2ac>)
 800453e:	400b      	ands	r3, r1
 8004540:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	430a      	orrs	r2, r1
 8004552:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	4b22      	ldr	r3, [pc, #136]	; (80045e8 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8004560:	400b      	ands	r3, r1
 8004562:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	430a      	orrs	r2, r1
 8004574:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	4b19      	ldr	r3, [pc, #100]	; (80045e8 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8004582:	400b      	ands	r3, r1
 8004584:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	430a      	orrs	r2, r1
 8004596:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	4b0d      	ldr	r3, [pc, #52]	; (80045d8 <HAL_DSI_ConfigVideoMode+0x29c>)
 80045a4:	400b      	ands	r3, r1
 80045a6:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045c8:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045d4:	e00a      	b.n	80045ec <HAL_DSI_ConfigVideoMode+0x2b0>
 80045d6:	bf00      	nop
 80045d8:	ffffc000 	.word	0xffffc000
 80045dc:	ffffe000 	.word	0xffffe000
 80045e0:	fffff000 	.word	0xfffff000
 80045e4:	ffff8000 	.word	0xffff8000
 80045e8:	fffffc00 	.word	0xfffffc00
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	430a      	orrs	r2, r1
 80045f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	699a      	ldr	r2, [r3, #24]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8004602:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6999      	ldr	r1, [r3, #24]
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800460e:	041a      	lsls	r2, r3, #16
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	430a      	orrs	r2, r1
 8004616:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	699a      	ldr	r2, [r3, #24]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004626:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6999      	ldr	r1, [r3, #24]
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	430a      	orrs	r2, r1
 8004638:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004648:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	430a      	orrs	r2, r1
 800465a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800466a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	430a      	orrs	r2, r1
 800467c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800468c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	430a      	orrs	r2, r1
 800469e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046ae:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	430a      	orrs	r2, r1
 80046c0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80046d0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	430a      	orrs	r2, r1
 80046e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046f2:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	430a      	orrs	r2, r1
 8004704:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004714:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	430a      	orrs	r2, r1
 8004726:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	7c1b      	ldrb	r3, [r3, #16]
 800474a:	2b01      	cmp	r3, #1
 800474c:	d101      	bne.n	8004752 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 800474e:	2302      	movs	r3, #2
 8004750:	e0c5      	b.n	80048de <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2201      	movs	r2, #1
 8004756:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f042 0201 	orr.w	r2, r2, #1
 8004766:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f022 0201 	bic.w	r2, r2, #1
 8004778:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f042 0201 	orr.w	r2, r2, #1
 800478c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68da      	ldr	r2, [r3, #12]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f022 0203 	bic.w	r2, r2, #3
 800479e:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68d9      	ldr	r1, [r3, #12]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	430a      	orrs	r2, r1
 80047b0:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	695a      	ldr	r2, [r3, #20]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f022 0207 	bic.w	r2, r2, #7
 80047c0:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	6959      	ldr	r1, [r3, #20]
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	69da      	ldr	r2, [r3, #28]
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	431a      	orrs	r2, r3
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	695b      	ldr	r3, [r3, #20]
 80047d6:	431a      	orrs	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	430a      	orrs	r2, r1
 80047de:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	691a      	ldr	r2, [r3, #16]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f022 020f 	bic.w	r2, r2, #15
 80047ee:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	6919      	ldr	r1, [r3, #16]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	685a      	ldr	r2, [r3, #4]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	430a      	orrs	r2, r1
 8004800:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f022 020e 	bic.w	r2, r2, #14
 8004812:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	005a      	lsls	r2, r3, #1
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	430a      	orrs	r2, r1
 800482a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	4b2c      	ldr	r3, [pc, #176]	; (80048ec <HAL_DSI_ConfigAdaptedCommandMode+0x1b0>)
 800483a:	400b      	ands	r3, r1
 800483c:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	689a      	ldr	r2, [r3, #8]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	430a      	orrs	r2, r1
 800484e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004860:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	68da      	ldr	r2, [r3, #12]
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	431a      	orrs	r2, r3
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487a:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8004880:	431a      	orrs	r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	430a      	orrs	r2, r1
 8004888:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f022 0201 	bic.w	r2, r2, #1
 800489a:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	430a      	orrs	r2, r1
 80048ac:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f042 0201 	orr.w	r2, r2, #1
 80048be:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f042 0202 	orr.w	r2, r2, #2
 80048d2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	370c      	adds	r7, #12
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	ffff0000 	.word	0xffff0000

080048f0 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	7c1b      	ldrb	r3, [r3, #16]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d101      	bne.n	8004906 <HAL_DSI_ConfigCommand+0x16>
 8004902:	2302      	movs	r3, #2
 8004904:	e049      	b.n	800499a <HAL_DSI_ConfigCommand+0xaa>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2201      	movs	r2, #1
 800490a:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	4b24      	ldr	r3, [pc, #144]	; (80049a8 <HAL_DSI_ConfigCommand+0xb8>)
 8004918:	400b      	ands	r3, r1
 800491a:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800492a:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8004930:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 8004936:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 800493c:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 8004942:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 8004948:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 800494e:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8004954:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 800495a:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 8004960:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 8004966:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	430a      	orrs	r2, r1
 800496e:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f022 0202 	bic.w	r2, r2, #2
 800497e:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	430a      	orrs	r2, r1
 8004990:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	370c      	adds	r7, #12
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	fef080ff 	.word	0xfef080ff

080049ac <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @ref DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	7c1b      	ldrb	r3, [r3, #16]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d101      	bne.n	80049c2 <HAL_DSI_ConfigFlowControl+0x16>
 80049be:	2302      	movs	r3, #2
 80049c0:	e016      	b.n	80049f0 <HAL_DSI_ConfigFlowControl+0x44>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2201      	movs	r2, #1
 80049c6:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f022 021f 	bic.w	r2, r2, #31
 80049d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	683a      	ldr	r2, [r7, #0]
 80049e4:	430a      	orrs	r2, r1
 80049e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	7c1b      	ldrb	r3, [r3, #16]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d101      	bne.n	8004a12 <HAL_DSI_ConfigPhyTimer+0x16>
 8004a0e:	2302      	movs	r3, #2
 8004a10:	e058      	b.n	8004ac4 <HAL_DSI_ConfigPhyTimer+0xc8>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2201      	movs	r2, #1
 8004a16:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	4293      	cmp	r3, r2
 8004a22:	bf38      	it	cc
 8004a24:	4613      	movcc	r3, r2
 8004a26:	60fb      	str	r3, [r7, #12]
     This timings are configured by the HS2LP_TIME and LP2HS_TIME in the DSI Host Clock Lane Timer Configuration Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8004a38:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	041a      	lsls	r2, r3, #16
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	431a      	orrs	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	430a      	orrs	r2, r1
 8004a52:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8004a66:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	691a      	ldr	r2, [r3, #16]
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	041b      	lsls	r3, r3, #16
 8004a7c:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8004a84:	431a      	orrs	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	430a      	orrs	r2, r1
 8004a8c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004aa0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	695b      	ldr	r3, [r3, #20]
 8004ab0:	021a      	lsls	r2, r3, #8
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3714      	adds	r7, #20
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	7c1b      	ldrb	r3, [r3, #16]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d101      	bne.n	8004ae6 <HAL_DSI_ConfigHostTimeouts+0x16>
 8004ae2:	2302      	movs	r3, #2
 8004ae4:	e0b4      	b.n	8004c50 <HAL_DSI_ConfigHostTimeouts+0x180>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	689a      	ldr	r2, [r3, #8]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004afa:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	6899      	ldr	r1, [r3, #8]
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	021a      	lsls	r2, r3, #8
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	b292      	uxth	r2, r2
 8004b1c:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	041a      	lsls	r2, r3, #16
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	4b47      	ldr	r3, [pc, #284]	; (8004c5c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004b3e:	400b      	ands	r3, r1
 8004b40:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	689a      	ldr	r2, [r3, #8]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	430a      	orrs	r2, r1
 8004b52:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	4b3f      	ldr	r3, [pc, #252]	; (8004c5c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004b60:	400b      	ands	r3, r1
 8004b62:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	68da      	ldr	r2, [r3, #12]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	430a      	orrs	r2, r1
 8004b74:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	4b36      	ldr	r3, [pc, #216]	; (8004c5c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004b84:	400b      	ands	r3, r1
 8004b86:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	691a      	ldr	r2, [r3, #16]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	4b2b      	ldr	r3, [pc, #172]	; (8004c5c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004bae:	400b      	ands	r3, r1
 8004bb0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	695a      	ldr	r2, [r3, #20]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004bda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	699a      	ldr	r2, [r3, #24]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	4b16      	ldr	r3, [pc, #88]	; (8004c5c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004c02:	400b      	ands	r3, r1
 8004c04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	69da      	ldr	r2, [r3, #28]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	4b0c      	ldr	r3, [pc, #48]	; (8004c5c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004c2c:	400b      	ands	r3, r1
 8004c2e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	6a1a      	ldr	r2, [r3, #32]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	430a      	orrs	r2, r1
 8004c44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr
 8004c5c:	ffff0000 	.word	0xffff0000

08004c60 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b085      	sub	sp, #20
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	7c1b      	ldrb	r3, [r3, #16]
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d101      	bne.n	8004c74 <HAL_DSI_Start+0x14>
 8004c70:	2302      	movs	r3, #2
 8004c72:	e02b      	b.n	8004ccc <HAL_DSI_Start+0x6c>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	60fb      	str	r3, [r7, #12]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	685a      	ldr	r2, [r3, #4]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f042 0201 	orr.w	r2, r2, #1
 8004c8c:	605a      	str	r2, [r3, #4]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f003 0301 	and.w	r3, r3, #1
 8004c98:	60fb      	str	r3, [r7, #12]
 8004c9a:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	60bb      	str	r3, [r7, #8]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f042 0208 	orr.w	r2, r2, #8
 8004cb0:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004cbc:	f003 0308 	and.w	r3, r3, #8
 8004cc0:	60bb      	str	r3, [r7, #8]
 8004cc2:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3714      	adds	r7, #20
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b088      	sub	sp, #32
 8004cdc:	af02      	add	r7, sp, #8
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]
 8004ce4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	7c1b      	ldrb	r3, [r3, #16]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d101      	bne.n	8004cf2 <HAL_DSI_ShortWrite+0x1a>
 8004cee:	2302      	movs	r3, #2
 8004cf0:	e010      	b.n	8004d14 <HAL_DSI_ShortWrite+0x3c>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	741a      	strb	r2, [r3, #16]

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8004cf8:	6a3b      	ldr	r3, [r7, #32]
 8004cfa:	9300      	str	r3, [sp, #0]
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	68b9      	ldr	r1, [r7, #8]
 8004d02:	68f8      	ldr	r0, [r7, #12]
 8004d04:	f7ff f879 	bl	8003dfa <DSI_ShortWrite>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	741a      	strb	r2, [r3, #16]

  return status;
 8004d12:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3718      	adds	r7, #24
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b08c      	sub	sp, #48	; 0x30
 8004d20:	af02      	add	r7, sp, #8
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]
 8004d28:	603b      	str	r3, [r7, #0]
  uint32_t uicounter, nbBytes, count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8004d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d2c:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	7c1b      	ldrb	r3, [r3, #16]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d101      	bne.n	8004d3a <HAL_DSI_LongWrite+0x1e>
 8004d36:	2302      	movs	r3, #2
 8004d38:	e084      	b.n	8004e44 <HAL_DSI_LongWrite+0x128>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d40:	f7fd fdf6 	bl	8002930 <HAL_GetTick>
 8004d44:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004d46:	e00c      	b.n	8004d62 <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004d48:	f7fd fdf2 	bl	8002930 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d56:	d904      	bls.n	8004d62 <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e070      	b.n	8004e44 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d68:	f003 0301 	and.w	r3, r3, #1
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d0eb      	beq.n	8004d48 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8004d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d72:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	2b03      	cmp	r3, #3
 8004d78:	bf28      	it	cs
 8004d7a:	2303      	movcs	r3, #3
 8004d7c:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8004d7e:	2300      	movs	r3, #0
 8004d80:	623b      	str	r3, [r7, #32]
 8004d82:	e00f      	b.n	8004da4 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8004d84:	69ba      	ldr	r2, [r7, #24]
 8004d86:	6a3b      	ldr	r3, [r7, #32]
 8004d88:	4413      	add	r3, r2
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	6a3b      	ldr	r3, [r7, #32]
 8004d90:	3301      	adds	r3, #1
 8004d92:	00db      	lsls	r3, r3, #3
 8004d94:	fa02 f303 	lsl.w	r3, r2, r3
 8004d98:	69fa      	ldr	r2, [r7, #28]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8004d9e:	6a3b      	ldr	r3, [r7, #32]
 8004da0:	3301      	adds	r3, #1
 8004da2:	623b      	str	r3, [r7, #32]
 8004da4:	6a3a      	ldr	r2, [r7, #32]
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d3eb      	bcc.n	8004d84 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	69fa      	ldr	r2, [r7, #28]
 8004db2:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8004db4:	683a      	ldr	r2, [r7, #0]
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8004dbc:	69ba      	ldr	r2, [r7, #24]
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8004dc4:	e028      	b.n	8004e18 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8004dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc8:	2b04      	cmp	r3, #4
 8004dca:	bf28      	it	cs
 8004dcc:	2304      	movcs	r3, #4
 8004dce:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	623b      	str	r3, [r7, #32]
 8004dd8:	e00e      	b.n	8004df8 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8004dda:	69ba      	ldr	r2, [r7, #24]
 8004ddc:	6a3b      	ldr	r3, [r7, #32]
 8004dde:	4413      	add	r3, r2
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	461a      	mov	r2, r3
 8004de4:	6a3b      	ldr	r3, [r7, #32]
 8004de6:	00db      	lsls	r3, r3, #3
 8004de8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dec:	69fa      	ldr	r2, [r7, #28]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8004df2:	6a3b      	ldr	r3, [r7, #32]
 8004df4:	3301      	adds	r3, #1
 8004df6:	623b      	str	r3, [r7, #32]
 8004df8:	6a3a      	ldr	r2, [r7, #32]
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d3ec      	bcc.n	8004dda <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	69fa      	ldr	r2, [r7, #28]
 8004e06:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8004e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8004e10:	69ba      	ldr	r2, [r7, #24]
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	4413      	add	r3, r2
 8004e16:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8004e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1d3      	bne.n	8004dc6 <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004e26:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	9300      	str	r3, [sp, #0]
 8004e32:	4613      	mov	r3, r2
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	68b9      	ldr	r1, [r7, #8]
 8004e38:	f7fe ffc6 	bl	8003dc8 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3728      	adds	r7, #40	; 0x28
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	7c1b      	ldrb	r3, [r3, #16]
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d101      	bne.n	8004e62 <HAL_DSI_SetLowPowerRXFilter+0x16>
 8004e5e:	2302      	movs	r3, #2
 8004e60:	e01b      	b.n	8004e9a <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2201      	movs	r2, #1
 8004e66:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8004e78:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	065a      	lsls	r2, r3, #25
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	430a      	orrs	r2, r1
 8004e8e:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	370c      	adds	r7, #12
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
	...

08004ea8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b089      	sub	sp, #36	; 0x24
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	61fb      	str	r3, [r7, #28]
 8004ec6:	e175      	b.n	80051b4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004ec8:	2201      	movs	r2, #1
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	697a      	ldr	r2, [r7, #20]
 8004ed8:	4013      	ands	r3, r2
 8004eda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004edc:	693a      	ldr	r2, [r7, #16]
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	f040 8164 	bne.w	80051ae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d003      	beq.n	8004ef6 <HAL_GPIO_Init+0x4e>
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	2b12      	cmp	r3, #18
 8004ef4:	d123      	bne.n	8004f3e <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	08da      	lsrs	r2, r3, #3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	3208      	adds	r2, #8
 8004efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	f003 0307 	and.w	r3, r3, #7
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	220f      	movs	r2, #15
 8004f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f12:	43db      	mvns	r3, r3
 8004f14:	69ba      	ldr	r2, [r7, #24]
 8004f16:	4013      	ands	r3, r2
 8004f18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	691a      	ldr	r2, [r3, #16]
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	f003 0307 	and.w	r3, r3, #7
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2a:	69ba      	ldr	r2, [r7, #24]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	08da      	lsrs	r2, r3, #3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	3208      	adds	r2, #8
 8004f38:	69b9      	ldr	r1, [r7, #24]
 8004f3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	005b      	lsls	r3, r3, #1
 8004f48:	2203      	movs	r2, #3
 8004f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4e:	43db      	mvns	r3, r3
 8004f50:	69ba      	ldr	r2, [r7, #24]
 8004f52:	4013      	ands	r3, r2
 8004f54:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	f003 0203 	and.w	r2, r3, #3
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	005b      	lsls	r3, r3, #1
 8004f62:	fa02 f303 	lsl.w	r3, r2, r3
 8004f66:	69ba      	ldr	r2, [r7, #24]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	69ba      	ldr	r2, [r7, #24]
 8004f70:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d00b      	beq.n	8004f92 <HAL_GPIO_Init+0xea>
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d007      	beq.n	8004f92 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004f86:	2b11      	cmp	r3, #17
 8004f88:	d003      	beq.n	8004f92 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	2b12      	cmp	r3, #18
 8004f90:	d130      	bne.n	8004ff4 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	005b      	lsls	r3, r3, #1
 8004f9c:	2203      	movs	r2, #3
 8004f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa2:	43db      	mvns	r3, r3
 8004fa4:	69ba      	ldr	r2, [r7, #24]
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	68da      	ldr	r2, [r3, #12]
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	005b      	lsls	r3, r3, #1
 8004fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb6:	69ba      	ldr	r2, [r7, #24]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	69ba      	ldr	r2, [r7, #24]
 8004fc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004fc8:	2201      	movs	r2, #1
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd0:	43db      	mvns	r3, r3
 8004fd2:	69ba      	ldr	r2, [r7, #24]
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	091b      	lsrs	r3, r3, #4
 8004fde:	f003 0201 	and.w	r2, r3, #1
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe8:	69ba      	ldr	r2, [r7, #24]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	69ba      	ldr	r2, [r7, #24]
 8004ff2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	005b      	lsls	r3, r3, #1
 8004ffe:	2203      	movs	r2, #3
 8005000:	fa02 f303 	lsl.w	r3, r2, r3
 8005004:	43db      	mvns	r3, r3
 8005006:	69ba      	ldr	r2, [r7, #24]
 8005008:	4013      	ands	r3, r2
 800500a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	689a      	ldr	r2, [r3, #8]
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	005b      	lsls	r3, r3, #1
 8005014:	fa02 f303 	lsl.w	r3, r2, r3
 8005018:	69ba      	ldr	r2, [r7, #24]
 800501a:	4313      	orrs	r3, r2
 800501c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	69ba      	ldr	r2, [r7, #24]
 8005022:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800502c:	2b00      	cmp	r3, #0
 800502e:	f000 80be 	beq.w	80051ae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005032:	4b65      	ldr	r3, [pc, #404]	; (80051c8 <HAL_GPIO_Init+0x320>)
 8005034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005036:	4a64      	ldr	r2, [pc, #400]	; (80051c8 <HAL_GPIO_Init+0x320>)
 8005038:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800503c:	6453      	str	r3, [r2, #68]	; 0x44
 800503e:	4b62      	ldr	r3, [pc, #392]	; (80051c8 <HAL_GPIO_Init+0x320>)
 8005040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005046:	60fb      	str	r3, [r7, #12]
 8005048:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800504a:	4a60      	ldr	r2, [pc, #384]	; (80051cc <HAL_GPIO_Init+0x324>)
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	089b      	lsrs	r3, r3, #2
 8005050:	3302      	adds	r3, #2
 8005052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005056:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	f003 0303 	and.w	r3, r3, #3
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	220f      	movs	r2, #15
 8005062:	fa02 f303 	lsl.w	r3, r2, r3
 8005066:	43db      	mvns	r3, r3
 8005068:	69ba      	ldr	r2, [r7, #24]
 800506a:	4013      	ands	r3, r2
 800506c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a57      	ldr	r2, [pc, #348]	; (80051d0 <HAL_GPIO_Init+0x328>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d037      	beq.n	80050e6 <HAL_GPIO_Init+0x23e>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a56      	ldr	r2, [pc, #344]	; (80051d4 <HAL_GPIO_Init+0x32c>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d031      	beq.n	80050e2 <HAL_GPIO_Init+0x23a>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a55      	ldr	r2, [pc, #340]	; (80051d8 <HAL_GPIO_Init+0x330>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d02b      	beq.n	80050de <HAL_GPIO_Init+0x236>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a54      	ldr	r2, [pc, #336]	; (80051dc <HAL_GPIO_Init+0x334>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d025      	beq.n	80050da <HAL_GPIO_Init+0x232>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a53      	ldr	r2, [pc, #332]	; (80051e0 <HAL_GPIO_Init+0x338>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d01f      	beq.n	80050d6 <HAL_GPIO_Init+0x22e>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a52      	ldr	r2, [pc, #328]	; (80051e4 <HAL_GPIO_Init+0x33c>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d019      	beq.n	80050d2 <HAL_GPIO_Init+0x22a>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a51      	ldr	r2, [pc, #324]	; (80051e8 <HAL_GPIO_Init+0x340>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d013      	beq.n	80050ce <HAL_GPIO_Init+0x226>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a50      	ldr	r2, [pc, #320]	; (80051ec <HAL_GPIO_Init+0x344>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d00d      	beq.n	80050ca <HAL_GPIO_Init+0x222>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a4f      	ldr	r2, [pc, #316]	; (80051f0 <HAL_GPIO_Init+0x348>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d007      	beq.n	80050c6 <HAL_GPIO_Init+0x21e>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a4e      	ldr	r2, [pc, #312]	; (80051f4 <HAL_GPIO_Init+0x34c>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d101      	bne.n	80050c2 <HAL_GPIO_Init+0x21a>
 80050be:	2309      	movs	r3, #9
 80050c0:	e012      	b.n	80050e8 <HAL_GPIO_Init+0x240>
 80050c2:	230a      	movs	r3, #10
 80050c4:	e010      	b.n	80050e8 <HAL_GPIO_Init+0x240>
 80050c6:	2308      	movs	r3, #8
 80050c8:	e00e      	b.n	80050e8 <HAL_GPIO_Init+0x240>
 80050ca:	2307      	movs	r3, #7
 80050cc:	e00c      	b.n	80050e8 <HAL_GPIO_Init+0x240>
 80050ce:	2306      	movs	r3, #6
 80050d0:	e00a      	b.n	80050e8 <HAL_GPIO_Init+0x240>
 80050d2:	2305      	movs	r3, #5
 80050d4:	e008      	b.n	80050e8 <HAL_GPIO_Init+0x240>
 80050d6:	2304      	movs	r3, #4
 80050d8:	e006      	b.n	80050e8 <HAL_GPIO_Init+0x240>
 80050da:	2303      	movs	r3, #3
 80050dc:	e004      	b.n	80050e8 <HAL_GPIO_Init+0x240>
 80050de:	2302      	movs	r3, #2
 80050e0:	e002      	b.n	80050e8 <HAL_GPIO_Init+0x240>
 80050e2:	2301      	movs	r3, #1
 80050e4:	e000      	b.n	80050e8 <HAL_GPIO_Init+0x240>
 80050e6:	2300      	movs	r3, #0
 80050e8:	69fa      	ldr	r2, [r7, #28]
 80050ea:	f002 0203 	and.w	r2, r2, #3
 80050ee:	0092      	lsls	r2, r2, #2
 80050f0:	4093      	lsls	r3, r2
 80050f2:	69ba      	ldr	r2, [r7, #24]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80050f8:	4934      	ldr	r1, [pc, #208]	; (80051cc <HAL_GPIO_Init+0x324>)
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	089b      	lsrs	r3, r3, #2
 80050fe:	3302      	adds	r3, #2
 8005100:	69ba      	ldr	r2, [r7, #24]
 8005102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005106:	4b3c      	ldr	r3, [pc, #240]	; (80051f8 <HAL_GPIO_Init+0x350>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	43db      	mvns	r3, r3
 8005110:	69ba      	ldr	r2, [r7, #24]
 8005112:	4013      	ands	r3, r2
 8005114:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d003      	beq.n	800512a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005122:	69ba      	ldr	r2, [r7, #24]
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	4313      	orrs	r3, r2
 8005128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800512a:	4a33      	ldr	r2, [pc, #204]	; (80051f8 <HAL_GPIO_Init+0x350>)
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005130:	4b31      	ldr	r3, [pc, #196]	; (80051f8 <HAL_GPIO_Init+0x350>)
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	43db      	mvns	r3, r3
 800513a:	69ba      	ldr	r2, [r7, #24]
 800513c:	4013      	ands	r3, r2
 800513e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005148:	2b00      	cmp	r3, #0
 800514a:	d003      	beq.n	8005154 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800514c:	69ba      	ldr	r2, [r7, #24]
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	4313      	orrs	r3, r2
 8005152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005154:	4a28      	ldr	r2, [pc, #160]	; (80051f8 <HAL_GPIO_Init+0x350>)
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800515a:	4b27      	ldr	r3, [pc, #156]	; (80051f8 <HAL_GPIO_Init+0x350>)
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	43db      	mvns	r3, r3
 8005164:	69ba      	ldr	r2, [r7, #24]
 8005166:	4013      	ands	r3, r2
 8005168:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d003      	beq.n	800517e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005176:	69ba      	ldr	r2, [r7, #24]
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	4313      	orrs	r3, r2
 800517c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800517e:	4a1e      	ldr	r2, [pc, #120]	; (80051f8 <HAL_GPIO_Init+0x350>)
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005184:	4b1c      	ldr	r3, [pc, #112]	; (80051f8 <HAL_GPIO_Init+0x350>)
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	43db      	mvns	r3, r3
 800518e:	69ba      	ldr	r2, [r7, #24]
 8005190:	4013      	ands	r3, r2
 8005192:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800519c:	2b00      	cmp	r3, #0
 800519e:	d003      	beq.n	80051a8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80051a0:	69ba      	ldr	r2, [r7, #24]
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80051a8:	4a13      	ldr	r2, [pc, #76]	; (80051f8 <HAL_GPIO_Init+0x350>)
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	3301      	adds	r3, #1
 80051b2:	61fb      	str	r3, [r7, #28]
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	2b0f      	cmp	r3, #15
 80051b8:	f67f ae86 	bls.w	8004ec8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80051bc:	bf00      	nop
 80051be:	3724      	adds	r7, #36	; 0x24
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr
 80051c8:	40023800 	.word	0x40023800
 80051cc:	40013800 	.word	0x40013800
 80051d0:	40020000 	.word	0x40020000
 80051d4:	40020400 	.word	0x40020400
 80051d8:	40020800 	.word	0x40020800
 80051dc:	40020c00 	.word	0x40020c00
 80051e0:	40021000 	.word	0x40021000
 80051e4:	40021400 	.word	0x40021400
 80051e8:	40021800 	.word	0x40021800
 80051ec:	40021c00 	.word	0x40021c00
 80051f0:	40022000 	.word	0x40022000
 80051f4:	40022400 	.word	0x40022400
 80051f8:	40013c00 	.word	0x40013c00

080051fc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b087      	sub	sp, #28
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8005206:	2300      	movs	r3, #0
 8005208:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800520a:	2300      	movs	r3, #0
 800520c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800520e:	2300      	movs	r3, #0
 8005210:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005212:	2300      	movs	r3, #0
 8005214:	617b      	str	r3, [r7, #20]
 8005216:	e0d9      	b.n	80053cc <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005218:	2201      	movs	r2, #1
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	fa02 f303 	lsl.w	r3, r2, r3
 8005220:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005222:	683a      	ldr	r2, [r7, #0]
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	4013      	ands	r3, r2
 8005228:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	429a      	cmp	r2, r3
 8005230:	f040 80c9 	bne.w	80053c6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8005234:	4a6a      	ldr	r2, [pc, #424]	; (80053e0 <HAL_GPIO_DeInit+0x1e4>)
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	089b      	lsrs	r3, r3, #2
 800523a:	3302      	adds	r3, #2
 800523c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005240:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f003 0303 	and.w	r3, r3, #3
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	220f      	movs	r2, #15
 800524c:	fa02 f303 	lsl.w	r3, r2, r3
 8005250:	68ba      	ldr	r2, [r7, #8]
 8005252:	4013      	ands	r3, r2
 8005254:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a62      	ldr	r2, [pc, #392]	; (80053e4 <HAL_GPIO_DeInit+0x1e8>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d037      	beq.n	80052ce <HAL_GPIO_DeInit+0xd2>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a61      	ldr	r2, [pc, #388]	; (80053e8 <HAL_GPIO_DeInit+0x1ec>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d031      	beq.n	80052ca <HAL_GPIO_DeInit+0xce>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a60      	ldr	r2, [pc, #384]	; (80053ec <HAL_GPIO_DeInit+0x1f0>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d02b      	beq.n	80052c6 <HAL_GPIO_DeInit+0xca>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a5f      	ldr	r2, [pc, #380]	; (80053f0 <HAL_GPIO_DeInit+0x1f4>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d025      	beq.n	80052c2 <HAL_GPIO_DeInit+0xc6>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a5e      	ldr	r2, [pc, #376]	; (80053f4 <HAL_GPIO_DeInit+0x1f8>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d01f      	beq.n	80052be <HAL_GPIO_DeInit+0xc2>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a5d      	ldr	r2, [pc, #372]	; (80053f8 <HAL_GPIO_DeInit+0x1fc>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d019      	beq.n	80052ba <HAL_GPIO_DeInit+0xbe>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a5c      	ldr	r2, [pc, #368]	; (80053fc <HAL_GPIO_DeInit+0x200>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d013      	beq.n	80052b6 <HAL_GPIO_DeInit+0xba>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a5b      	ldr	r2, [pc, #364]	; (8005400 <HAL_GPIO_DeInit+0x204>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d00d      	beq.n	80052b2 <HAL_GPIO_DeInit+0xb6>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a5a      	ldr	r2, [pc, #360]	; (8005404 <HAL_GPIO_DeInit+0x208>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d007      	beq.n	80052ae <HAL_GPIO_DeInit+0xb2>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a59      	ldr	r2, [pc, #356]	; (8005408 <HAL_GPIO_DeInit+0x20c>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d101      	bne.n	80052aa <HAL_GPIO_DeInit+0xae>
 80052a6:	2309      	movs	r3, #9
 80052a8:	e012      	b.n	80052d0 <HAL_GPIO_DeInit+0xd4>
 80052aa:	230a      	movs	r3, #10
 80052ac:	e010      	b.n	80052d0 <HAL_GPIO_DeInit+0xd4>
 80052ae:	2308      	movs	r3, #8
 80052b0:	e00e      	b.n	80052d0 <HAL_GPIO_DeInit+0xd4>
 80052b2:	2307      	movs	r3, #7
 80052b4:	e00c      	b.n	80052d0 <HAL_GPIO_DeInit+0xd4>
 80052b6:	2306      	movs	r3, #6
 80052b8:	e00a      	b.n	80052d0 <HAL_GPIO_DeInit+0xd4>
 80052ba:	2305      	movs	r3, #5
 80052bc:	e008      	b.n	80052d0 <HAL_GPIO_DeInit+0xd4>
 80052be:	2304      	movs	r3, #4
 80052c0:	e006      	b.n	80052d0 <HAL_GPIO_DeInit+0xd4>
 80052c2:	2303      	movs	r3, #3
 80052c4:	e004      	b.n	80052d0 <HAL_GPIO_DeInit+0xd4>
 80052c6:	2302      	movs	r3, #2
 80052c8:	e002      	b.n	80052d0 <HAL_GPIO_DeInit+0xd4>
 80052ca:	2301      	movs	r3, #1
 80052cc:	e000      	b.n	80052d0 <HAL_GPIO_DeInit+0xd4>
 80052ce:	2300      	movs	r3, #0
 80052d0:	697a      	ldr	r2, [r7, #20]
 80052d2:	f002 0203 	and.w	r2, r2, #3
 80052d6:	0092      	lsls	r2, r2, #2
 80052d8:	4093      	lsls	r3, r2
 80052da:	68ba      	ldr	r2, [r7, #8]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d132      	bne.n	8005346 <HAL_GPIO_DeInit+0x14a>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	f003 0303 	and.w	r3, r3, #3
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	220f      	movs	r2, #15
 80052ea:	fa02 f303 	lsl.w	r3, r2, r3
 80052ee:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80052f0:	4a3b      	ldr	r2, [pc, #236]	; (80053e0 <HAL_GPIO_DeInit+0x1e4>)
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	089b      	lsrs	r3, r3, #2
 80052f6:	3302      	adds	r3, #2
 80052f8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	43da      	mvns	r2, r3
 8005300:	4837      	ldr	r0, [pc, #220]	; (80053e0 <HAL_GPIO_DeInit+0x1e4>)
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	089b      	lsrs	r3, r3, #2
 8005306:	400a      	ands	r2, r1
 8005308:	3302      	adds	r3, #2
 800530a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800530e:	4b3f      	ldr	r3, [pc, #252]	; (800540c <HAL_GPIO_DeInit+0x210>)
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	43db      	mvns	r3, r3
 8005316:	493d      	ldr	r1, [pc, #244]	; (800540c <HAL_GPIO_DeInit+0x210>)
 8005318:	4013      	ands	r3, r2
 800531a:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800531c:	4b3b      	ldr	r3, [pc, #236]	; (800540c <HAL_GPIO_DeInit+0x210>)
 800531e:	685a      	ldr	r2, [r3, #4]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	43db      	mvns	r3, r3
 8005324:	4939      	ldr	r1, [pc, #228]	; (800540c <HAL_GPIO_DeInit+0x210>)
 8005326:	4013      	ands	r3, r2
 8005328:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800532a:	4b38      	ldr	r3, [pc, #224]	; (800540c <HAL_GPIO_DeInit+0x210>)
 800532c:	689a      	ldr	r2, [r3, #8]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	43db      	mvns	r3, r3
 8005332:	4936      	ldr	r1, [pc, #216]	; (800540c <HAL_GPIO_DeInit+0x210>)
 8005334:	4013      	ands	r3, r2
 8005336:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005338:	4b34      	ldr	r3, [pc, #208]	; (800540c <HAL_GPIO_DeInit+0x210>)
 800533a:	68da      	ldr	r2, [r3, #12]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	43db      	mvns	r3, r3
 8005340:	4932      	ldr	r1, [pc, #200]	; (800540c <HAL_GPIO_DeInit+0x210>)
 8005342:	4013      	ands	r3, r2
 8005344:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	005b      	lsls	r3, r3, #1
 800534e:	2103      	movs	r1, #3
 8005350:	fa01 f303 	lsl.w	r3, r1, r3
 8005354:	43db      	mvns	r3, r3
 8005356:	401a      	ands	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	08da      	lsrs	r2, r3, #3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	3208      	adds	r2, #8
 8005364:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	f003 0307 	and.w	r3, r3, #7
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	220f      	movs	r2, #15
 8005372:	fa02 f303 	lsl.w	r3, r2, r3
 8005376:	43db      	mvns	r3, r3
 8005378:	697a      	ldr	r2, [r7, #20]
 800537a:	08d2      	lsrs	r2, r2, #3
 800537c:	4019      	ands	r1, r3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	3208      	adds	r2, #8
 8005382:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	689a      	ldr	r2, [r3, #8]
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	005b      	lsls	r3, r3, #1
 800538e:	2103      	movs	r1, #3
 8005390:	fa01 f303 	lsl.w	r3, r1, r3
 8005394:	43db      	mvns	r3, r3
 8005396:	401a      	ands	r2, r3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685a      	ldr	r2, [r3, #4]
 80053a0:	2101      	movs	r1, #1
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	fa01 f303 	lsl.w	r3, r1, r3
 80053a8:	43db      	mvns	r3, r3
 80053aa:	401a      	ands	r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	68da      	ldr	r2, [r3, #12]
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	005b      	lsls	r3, r3, #1
 80053b8:	2103      	movs	r1, #3
 80053ba:	fa01 f303 	lsl.w	r3, r1, r3
 80053be:	43db      	mvns	r3, r3
 80053c0:	401a      	ands	r2, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	60da      	str	r2, [r3, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	3301      	adds	r3, #1
 80053ca:	617b      	str	r3, [r7, #20]
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	2b0f      	cmp	r3, #15
 80053d0:	f67f af22 	bls.w	8005218 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80053d4:	bf00      	nop
 80053d6:	371c      	adds	r7, #28
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr
 80053e0:	40013800 	.word	0x40013800
 80053e4:	40020000 	.word	0x40020000
 80053e8:	40020400 	.word	0x40020400
 80053ec:	40020800 	.word	0x40020800
 80053f0:	40020c00 	.word	0x40020c00
 80053f4:	40021000 	.word	0x40021000
 80053f8:	40021400 	.word	0x40021400
 80053fc:	40021800 	.word	0x40021800
 8005400:	40021c00 	.word	0x40021c00
 8005404:	40022000 	.word	0x40022000
 8005408:	40022400 	.word	0x40022400
 800540c:	40013c00 	.word	0x40013c00

08005410 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	460b      	mov	r3, r1
 800541a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	691a      	ldr	r2, [r3, #16]
 8005420:	887b      	ldrh	r3, [r7, #2]
 8005422:	4013      	ands	r3, r2
 8005424:	2b00      	cmp	r3, #0
 8005426:	d002      	beq.n	800542e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005428:	2301      	movs	r3, #1
 800542a:	73fb      	strb	r3, [r7, #15]
 800542c:	e001      	b.n	8005432 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800542e:	2300      	movs	r3, #0
 8005430:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005432:	7bfb      	ldrb	r3, [r7, #15]
}
 8005434:	4618      	mov	r0, r3
 8005436:	3714      	adds	r7, #20
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	460b      	mov	r3, r1
 800544a:	807b      	strh	r3, [r7, #2]
 800544c:	4613      	mov	r3, r2
 800544e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005450:	787b      	ldrb	r3, [r7, #1]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d003      	beq.n	800545e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005456:	887a      	ldrh	r2, [r7, #2]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800545c:	e003      	b.n	8005466 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800545e:	887b      	ldrh	r3, [r7, #2]
 8005460:	041a      	lsls	r2, r3, #16
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	619a      	str	r2, [r3, #24]
}
 8005466:	bf00      	nop
 8005468:	370c      	adds	r7, #12
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
	...

08005474 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
 800547a:	4603      	mov	r3, r0
 800547c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800547e:	4b08      	ldr	r3, [pc, #32]	; (80054a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005480:	695a      	ldr	r2, [r3, #20]
 8005482:	88fb      	ldrh	r3, [r7, #6]
 8005484:	4013      	ands	r3, r2
 8005486:	2b00      	cmp	r3, #0
 8005488:	d006      	beq.n	8005498 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800548a:	4a05      	ldr	r2, [pc, #20]	; (80054a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800548c:	88fb      	ldrh	r3, [r7, #6]
 800548e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005490:	88fb      	ldrh	r3, [r7, #6]
 8005492:	4618      	mov	r0, r3
 8005494:	f007 fdc2 	bl	800d01c <HAL_GPIO_EXTI_Callback>
  }
}
 8005498:	bf00      	nop
 800549a:	3708      	adds	r7, #8
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	40013c00 	.word	0x40013c00

080054a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d101      	bne.n	80054b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e07f      	b.n	80055b6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d106      	bne.n	80054d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 f8a9 	bl	8005622 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2224      	movs	r2, #36	; 0x24
 80054d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f022 0201 	bic.w	r2, r2, #1
 80054e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685a      	ldr	r2, [r3, #4]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80054f4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	689a      	ldr	r2, [r3, #8]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005504:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	2b01      	cmp	r3, #1
 800550c:	d107      	bne.n	800551e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	689a      	ldr	r2, [r3, #8]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800551a:	609a      	str	r2, [r3, #8]
 800551c:	e006      	b.n	800552c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	689a      	ldr	r2, [r3, #8]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800552a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	2b02      	cmp	r3, #2
 8005532:	d104      	bne.n	800553e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800553c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	6859      	ldr	r1, [r3, #4]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	4b1d      	ldr	r3, [pc, #116]	; (80055c0 <HAL_I2C_Init+0x11c>)
 800554a:	430b      	orrs	r3, r1
 800554c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	68da      	ldr	r2, [r3, #12]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800555c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	691a      	ldr	r2, [r3, #16]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	ea42 0103 	orr.w	r1, r2, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	021a      	lsls	r2, r3, #8
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	430a      	orrs	r2, r1
 8005576:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	69d9      	ldr	r1, [r3, #28]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a1a      	ldr	r2, [r3, #32]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	430a      	orrs	r2, r1
 8005586:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f042 0201 	orr.w	r2, r2, #1
 8005596:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2220      	movs	r2, #32
 80055a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3708      	adds	r7, #8
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	02008000 	.word	0x02008000

080055c4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d101      	bne.n	80055d6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e021      	b.n	800561a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2224      	movs	r2, #36	; 0x24
 80055da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f022 0201 	bic.w	r2, r2, #1
 80055ec:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 f821 	bl	8005636 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3708      	adds	r7, #8
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005622:	b480      	push	{r7}
 8005624:	b083      	sub	sp, #12
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800562a:	bf00      	nop
 800562c:	370c      	adds	r7, #12
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr

08005636 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8005636:	b480      	push	{r7}
 8005638:	b083      	sub	sp, #12
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800563e:	bf00      	nop
 8005640:	370c      	adds	r7, #12
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
	...

0800564c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b088      	sub	sp, #32
 8005650:	af02      	add	r7, sp, #8
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	4608      	mov	r0, r1
 8005656:	4611      	mov	r1, r2
 8005658:	461a      	mov	r2, r3
 800565a:	4603      	mov	r3, r0
 800565c:	817b      	strh	r3, [r7, #10]
 800565e:	460b      	mov	r3, r1
 8005660:	813b      	strh	r3, [r7, #8]
 8005662:	4613      	mov	r3, r2
 8005664:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b20      	cmp	r3, #32
 8005670:	f040 80f9 	bne.w	8005866 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005674:	6a3b      	ldr	r3, [r7, #32]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d002      	beq.n	8005680 <HAL_I2C_Mem_Write+0x34>
 800567a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800567c:	2b00      	cmp	r3, #0
 800567e:	d105      	bne.n	800568c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005686:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e0ed      	b.n	8005868 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005692:	2b01      	cmp	r3, #1
 8005694:	d101      	bne.n	800569a <HAL_I2C_Mem_Write+0x4e>
 8005696:	2302      	movs	r3, #2
 8005698:	e0e6      	b.n	8005868 <HAL_I2C_Mem_Write+0x21c>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2201      	movs	r2, #1
 800569e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80056a2:	f7fd f945 	bl	8002930 <HAL_GetTick>
 80056a6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	9300      	str	r3, [sp, #0]
 80056ac:	2319      	movs	r3, #25
 80056ae:	2201      	movs	r2, #1
 80056b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80056b4:	68f8      	ldr	r0, [r7, #12]
 80056b6:	f000 fad1 	bl	8005c5c <I2C_WaitOnFlagUntilTimeout>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d001      	beq.n	80056c4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e0d1      	b.n	8005868 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2221      	movs	r2, #33	; 0x21
 80056c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2240      	movs	r2, #64	; 0x40
 80056d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2200      	movs	r2, #0
 80056d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6a3a      	ldr	r2, [r7, #32]
 80056de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80056e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2200      	movs	r2, #0
 80056ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80056ec:	88f8      	ldrh	r0, [r7, #6]
 80056ee:	893a      	ldrh	r2, [r7, #8]
 80056f0:	8979      	ldrh	r1, [r7, #10]
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	9301      	str	r3, [sp, #4]
 80056f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f8:	9300      	str	r3, [sp, #0]
 80056fa:	4603      	mov	r3, r0
 80056fc:	68f8      	ldr	r0, [r7, #12]
 80056fe:	f000 f9e1 	bl	8005ac4 <I2C_RequestMemoryWrite>
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d005      	beq.n	8005714 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2200      	movs	r2, #0
 800570c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e0a9      	b.n	8005868 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005718:	b29b      	uxth	r3, r3
 800571a:	2bff      	cmp	r3, #255	; 0xff
 800571c:	d90e      	bls.n	800573c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	22ff      	movs	r2, #255	; 0xff
 8005722:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005728:	b2da      	uxtb	r2, r3
 800572a:	8979      	ldrh	r1, [r7, #10]
 800572c:	2300      	movs	r3, #0
 800572e:	9300      	str	r3, [sp, #0]
 8005730:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005734:	68f8      	ldr	r0, [r7, #12]
 8005736:	f000 fbb3 	bl	8005ea0 <I2C_TransferConfig>
 800573a:	e00f      	b.n	800575c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005740:	b29a      	uxth	r2, r3
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800574a:	b2da      	uxtb	r2, r3
 800574c:	8979      	ldrh	r1, [r7, #10]
 800574e:	2300      	movs	r3, #0
 8005750:	9300      	str	r3, [sp, #0]
 8005752:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005756:	68f8      	ldr	r0, [r7, #12]
 8005758:	f000 fba2 	bl	8005ea0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800575c:	697a      	ldr	r2, [r7, #20]
 800575e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005760:	68f8      	ldr	r0, [r7, #12]
 8005762:	f000 fabb 	bl	8005cdc <I2C_WaitOnTXISFlagUntilTimeout>
 8005766:	4603      	mov	r3, r0
 8005768:	2b00      	cmp	r3, #0
 800576a:	d001      	beq.n	8005770 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e07b      	b.n	8005868 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005774:	781a      	ldrb	r2, [r3, #0]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005780:	1c5a      	adds	r2, r3, #1
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800578a:	b29b      	uxth	r3, r3
 800578c:	3b01      	subs	r3, #1
 800578e:	b29a      	uxth	r2, r3
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005798:	3b01      	subs	r3, #1
 800579a:	b29a      	uxth	r2, r3
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d034      	beq.n	8005814 <HAL_I2C_Mem_Write+0x1c8>
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d130      	bne.n	8005814 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	9300      	str	r3, [sp, #0]
 80057b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b8:	2200      	movs	r2, #0
 80057ba:	2180      	movs	r1, #128	; 0x80
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	f000 fa4d 	bl	8005c5c <I2C_WaitOnFlagUntilTimeout>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d001      	beq.n	80057cc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e04d      	b.n	8005868 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	2bff      	cmp	r3, #255	; 0xff
 80057d4:	d90e      	bls.n	80057f4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	22ff      	movs	r2, #255	; 0xff
 80057da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057e0:	b2da      	uxtb	r2, r3
 80057e2:	8979      	ldrh	r1, [r7, #10]
 80057e4:	2300      	movs	r3, #0
 80057e6:	9300      	str	r3, [sp, #0]
 80057e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80057ec:	68f8      	ldr	r0, [r7, #12]
 80057ee:	f000 fb57 	bl	8005ea0 <I2C_TransferConfig>
 80057f2:	e00f      	b.n	8005814 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057f8:	b29a      	uxth	r2, r3
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005802:	b2da      	uxtb	r2, r3
 8005804:	8979      	ldrh	r1, [r7, #10]
 8005806:	2300      	movs	r3, #0
 8005808:	9300      	str	r3, [sp, #0]
 800580a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800580e:	68f8      	ldr	r0, [r7, #12]
 8005810:	f000 fb46 	bl	8005ea0 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005818:	b29b      	uxth	r3, r3
 800581a:	2b00      	cmp	r3, #0
 800581c:	d19e      	bne.n	800575c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800581e:	697a      	ldr	r2, [r7, #20]
 8005820:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005822:	68f8      	ldr	r0, [r7, #12]
 8005824:	f000 fa9a 	bl	8005d5c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d001      	beq.n	8005832 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e01a      	b.n	8005868 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2220      	movs	r2, #32
 8005838:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	6859      	ldr	r1, [r3, #4]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	4b0a      	ldr	r3, [pc, #40]	; (8005870 <HAL_I2C_Mem_Write+0x224>)
 8005846:	400b      	ands	r3, r1
 8005848:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2220      	movs	r2, #32
 800584e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005862:	2300      	movs	r3, #0
 8005864:	e000      	b.n	8005868 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005866:	2302      	movs	r3, #2
  }
}
 8005868:	4618      	mov	r0, r3
 800586a:	3718      	adds	r7, #24
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}
 8005870:	fe00e800 	.word	0xfe00e800

08005874 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b088      	sub	sp, #32
 8005878:	af02      	add	r7, sp, #8
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	4608      	mov	r0, r1
 800587e:	4611      	mov	r1, r2
 8005880:	461a      	mov	r2, r3
 8005882:	4603      	mov	r3, r0
 8005884:	817b      	strh	r3, [r7, #10]
 8005886:	460b      	mov	r3, r1
 8005888:	813b      	strh	r3, [r7, #8]
 800588a:	4613      	mov	r3, r2
 800588c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005894:	b2db      	uxtb	r3, r3
 8005896:	2b20      	cmp	r3, #32
 8005898:	f040 80fd 	bne.w	8005a96 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800589c:	6a3b      	ldr	r3, [r7, #32]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d002      	beq.n	80058a8 <HAL_I2C_Mem_Read+0x34>
 80058a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d105      	bne.n	80058b4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058ae:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e0f1      	b.n	8005a98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d101      	bne.n	80058c2 <HAL_I2C_Mem_Read+0x4e>
 80058be:	2302      	movs	r3, #2
 80058c0:	e0ea      	b.n	8005a98 <HAL_I2C_Mem_Read+0x224>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2201      	movs	r2, #1
 80058c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80058ca:	f7fd f831 	bl	8002930 <HAL_GetTick>
 80058ce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	9300      	str	r3, [sp, #0]
 80058d4:	2319      	movs	r3, #25
 80058d6:	2201      	movs	r2, #1
 80058d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80058dc:	68f8      	ldr	r0, [r7, #12]
 80058de:	f000 f9bd 	bl	8005c5c <I2C_WaitOnFlagUntilTimeout>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d001      	beq.n	80058ec <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e0d5      	b.n	8005a98 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2222      	movs	r2, #34	; 0x22
 80058f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2240      	movs	r2, #64	; 0x40
 80058f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2200      	movs	r2, #0
 8005900:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6a3a      	ldr	r2, [r7, #32]
 8005906:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800590c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2200      	movs	r2, #0
 8005912:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005914:	88f8      	ldrh	r0, [r7, #6]
 8005916:	893a      	ldrh	r2, [r7, #8]
 8005918:	8979      	ldrh	r1, [r7, #10]
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	9301      	str	r3, [sp, #4]
 800591e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005920:	9300      	str	r3, [sp, #0]
 8005922:	4603      	mov	r3, r0
 8005924:	68f8      	ldr	r0, [r7, #12]
 8005926:	f000 f921 	bl	8005b6c <I2C_RequestMemoryRead>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d005      	beq.n	800593c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2200      	movs	r2, #0
 8005934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e0ad      	b.n	8005a98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005940:	b29b      	uxth	r3, r3
 8005942:	2bff      	cmp	r3, #255	; 0xff
 8005944:	d90e      	bls.n	8005964 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	22ff      	movs	r2, #255	; 0xff
 800594a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005950:	b2da      	uxtb	r2, r3
 8005952:	8979      	ldrh	r1, [r7, #10]
 8005954:	4b52      	ldr	r3, [pc, #328]	; (8005aa0 <HAL_I2C_Mem_Read+0x22c>)
 8005956:	9300      	str	r3, [sp, #0]
 8005958:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800595c:	68f8      	ldr	r0, [r7, #12]
 800595e:	f000 fa9f 	bl	8005ea0 <I2C_TransferConfig>
 8005962:	e00f      	b.n	8005984 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005968:	b29a      	uxth	r2, r3
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005972:	b2da      	uxtb	r2, r3
 8005974:	8979      	ldrh	r1, [r7, #10]
 8005976:	4b4a      	ldr	r3, [pc, #296]	; (8005aa0 <HAL_I2C_Mem_Read+0x22c>)
 8005978:	9300      	str	r3, [sp, #0]
 800597a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800597e:	68f8      	ldr	r0, [r7, #12]
 8005980:	f000 fa8e 	bl	8005ea0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	9300      	str	r3, [sp, #0]
 8005988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800598a:	2200      	movs	r2, #0
 800598c:	2104      	movs	r1, #4
 800598e:	68f8      	ldr	r0, [r7, #12]
 8005990:	f000 f964 	bl	8005c5c <I2C_WaitOnFlagUntilTimeout>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d001      	beq.n	800599e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e07c      	b.n	8005a98 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a8:	b2d2      	uxtb	r2, r2
 80059aa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b0:	1c5a      	adds	r2, r3, #1
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059ba:	3b01      	subs	r3, #1
 80059bc:	b29a      	uxth	r2, r3
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	3b01      	subs	r3, #1
 80059ca:	b29a      	uxth	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d034      	beq.n	8005a44 <HAL_I2C_Mem_Read+0x1d0>
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d130      	bne.n	8005a44 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	9300      	str	r3, [sp, #0]
 80059e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e8:	2200      	movs	r2, #0
 80059ea:	2180      	movs	r1, #128	; 0x80
 80059ec:	68f8      	ldr	r0, [r7, #12]
 80059ee:	f000 f935 	bl	8005c5c <I2C_WaitOnFlagUntilTimeout>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d001      	beq.n	80059fc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e04d      	b.n	8005a98 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	2bff      	cmp	r3, #255	; 0xff
 8005a04:	d90e      	bls.n	8005a24 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	22ff      	movs	r2, #255	; 0xff
 8005a0a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a10:	b2da      	uxtb	r2, r3
 8005a12:	8979      	ldrh	r1, [r7, #10]
 8005a14:	2300      	movs	r3, #0
 8005a16:	9300      	str	r3, [sp, #0]
 8005a18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	f000 fa3f 	bl	8005ea0 <I2C_TransferConfig>
 8005a22:	e00f      	b.n	8005a44 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a28:	b29a      	uxth	r2, r3
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a32:	b2da      	uxtb	r2, r3
 8005a34:	8979      	ldrh	r1, [r7, #10]
 8005a36:	2300      	movs	r3, #0
 8005a38:	9300      	str	r3, [sp, #0]
 8005a3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a3e:	68f8      	ldr	r0, [r7, #12]
 8005a40:	f000 fa2e 	bl	8005ea0 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d19a      	bne.n	8005984 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a4e:	697a      	ldr	r2, [r7, #20]
 8005a50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a52:	68f8      	ldr	r0, [r7, #12]
 8005a54:	f000 f982 	bl	8005d5c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d001      	beq.n	8005a62 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e01a      	b.n	8005a98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	2220      	movs	r2, #32
 8005a68:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	6859      	ldr	r1, [r3, #4]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	4b0b      	ldr	r3, [pc, #44]	; (8005aa4 <HAL_I2C_Mem_Read+0x230>)
 8005a76:	400b      	ands	r3, r1
 8005a78:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2220      	movs	r2, #32
 8005a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005a92:	2300      	movs	r3, #0
 8005a94:	e000      	b.n	8005a98 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005a96:	2302      	movs	r3, #2
  }
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3718      	adds	r7, #24
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	80002400 	.word	0x80002400
 8005aa4:	fe00e800 	.word	0xfe00e800

08005aa8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ab6:	b2db      	uxtb	r3, r3
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b086      	sub	sp, #24
 8005ac8:	af02      	add	r7, sp, #8
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	4608      	mov	r0, r1
 8005ace:	4611      	mov	r1, r2
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	817b      	strh	r3, [r7, #10]
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	813b      	strh	r3, [r7, #8]
 8005ada:	4613      	mov	r3, r2
 8005adc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005ade:	88fb      	ldrh	r3, [r7, #6]
 8005ae0:	b2da      	uxtb	r2, r3
 8005ae2:	8979      	ldrh	r1, [r7, #10]
 8005ae4:	4b20      	ldr	r3, [pc, #128]	; (8005b68 <I2C_RequestMemoryWrite+0xa4>)
 8005ae6:	9300      	str	r3, [sp, #0]
 8005ae8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005aec:	68f8      	ldr	r0, [r7, #12]
 8005aee:	f000 f9d7 	bl	8005ea0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005af2:	69fa      	ldr	r2, [r7, #28]
 8005af4:	69b9      	ldr	r1, [r7, #24]
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	f000 f8f0 	bl	8005cdc <I2C_WaitOnTXISFlagUntilTimeout>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d001      	beq.n	8005b06 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e02c      	b.n	8005b60 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b06:	88fb      	ldrh	r3, [r7, #6]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d105      	bne.n	8005b18 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b0c:	893b      	ldrh	r3, [r7, #8]
 8005b0e:	b2da      	uxtb	r2, r3
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	629a      	str	r2, [r3, #40]	; 0x28
 8005b16:	e015      	b.n	8005b44 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005b18:	893b      	ldrh	r3, [r7, #8]
 8005b1a:	0a1b      	lsrs	r3, r3, #8
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	b2da      	uxtb	r2, r3
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b26:	69fa      	ldr	r2, [r7, #28]
 8005b28:	69b9      	ldr	r1, [r7, #24]
 8005b2a:	68f8      	ldr	r0, [r7, #12]
 8005b2c:	f000 f8d6 	bl	8005cdc <I2C_WaitOnTXISFlagUntilTimeout>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d001      	beq.n	8005b3a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e012      	b.n	8005b60 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b3a:	893b      	ldrh	r3, [r7, #8]
 8005b3c:	b2da      	uxtb	r2, r3
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	9300      	str	r3, [sp, #0]
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	2180      	movs	r1, #128	; 0x80
 8005b4e:	68f8      	ldr	r0, [r7, #12]
 8005b50:	f000 f884 	bl	8005c5c <I2C_WaitOnFlagUntilTimeout>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d001      	beq.n	8005b5e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e000      	b.n	8005b60 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005b5e:	2300      	movs	r3, #0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3710      	adds	r7, #16
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	80002000 	.word	0x80002000

08005b6c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b086      	sub	sp, #24
 8005b70:	af02      	add	r7, sp, #8
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	4608      	mov	r0, r1
 8005b76:	4611      	mov	r1, r2
 8005b78:	461a      	mov	r2, r3
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	817b      	strh	r3, [r7, #10]
 8005b7e:	460b      	mov	r3, r1
 8005b80:	813b      	strh	r3, [r7, #8]
 8005b82:	4613      	mov	r3, r2
 8005b84:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005b86:	88fb      	ldrh	r3, [r7, #6]
 8005b88:	b2da      	uxtb	r2, r3
 8005b8a:	8979      	ldrh	r1, [r7, #10]
 8005b8c:	4b20      	ldr	r3, [pc, #128]	; (8005c10 <I2C_RequestMemoryRead+0xa4>)
 8005b8e:	9300      	str	r3, [sp, #0]
 8005b90:	2300      	movs	r3, #0
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	f000 f984 	bl	8005ea0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b98:	69fa      	ldr	r2, [r7, #28]
 8005b9a:	69b9      	ldr	r1, [r7, #24]
 8005b9c:	68f8      	ldr	r0, [r7, #12]
 8005b9e:	f000 f89d 	bl	8005cdc <I2C_WaitOnTXISFlagUntilTimeout>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d001      	beq.n	8005bac <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e02c      	b.n	8005c06 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005bac:	88fb      	ldrh	r3, [r7, #6]
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d105      	bne.n	8005bbe <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005bb2:	893b      	ldrh	r3, [r7, #8]
 8005bb4:	b2da      	uxtb	r2, r3
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	629a      	str	r2, [r3, #40]	; 0x28
 8005bbc:	e015      	b.n	8005bea <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005bbe:	893b      	ldrh	r3, [r7, #8]
 8005bc0:	0a1b      	lsrs	r3, r3, #8
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	b2da      	uxtb	r2, r3
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bcc:	69fa      	ldr	r2, [r7, #28]
 8005bce:	69b9      	ldr	r1, [r7, #24]
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f000 f883 	bl	8005cdc <I2C_WaitOnTXISFlagUntilTimeout>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d001      	beq.n	8005be0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e012      	b.n	8005c06 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005be0:	893b      	ldrh	r3, [r7, #8]
 8005be2:	b2da      	uxtb	r2, r3
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	9300      	str	r3, [sp, #0]
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	2140      	movs	r1, #64	; 0x40
 8005bf4:	68f8      	ldr	r0, [r7, #12]
 8005bf6:	f000 f831 	bl	8005c5c <I2C_WaitOnFlagUntilTimeout>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d001      	beq.n	8005c04 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e000      	b.n	8005c06 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3710      	adds	r7, #16
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	80002000 	.word	0x80002000

08005c14 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	699b      	ldr	r3, [r3, #24]
 8005c22:	f003 0302 	and.w	r3, r3, #2
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d103      	bne.n	8005c32 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	699b      	ldr	r3, [r3, #24]
 8005c38:	f003 0301 	and.w	r3, r3, #1
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d007      	beq.n	8005c50 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	699a      	ldr	r2, [r3, #24]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f042 0201 	orr.w	r2, r2, #1
 8005c4e:	619a      	str	r2, [r3, #24]
  }
}
 8005c50:	bf00      	nop
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	60b9      	str	r1, [r7, #8]
 8005c66:	603b      	str	r3, [r7, #0]
 8005c68:	4613      	mov	r3, r2
 8005c6a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c6c:	e022      	b.n	8005cb4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c74:	d01e      	beq.n	8005cb4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c76:	f7fc fe5b 	bl	8002930 <HAL_GetTick>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	1ad3      	subs	r3, r2, r3
 8005c80:	683a      	ldr	r2, [r7, #0]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d302      	bcc.n	8005c8c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d113      	bne.n	8005cb4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c90:	f043 0220 	orr.w	r2, r3, #32
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2220      	movs	r2, #32
 8005c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e00f      	b.n	8005cd4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	699a      	ldr	r2, [r3, #24]
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	68ba      	ldr	r2, [r7, #8]
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	bf0c      	ite	eq
 8005cc4:	2301      	moveq	r3, #1
 8005cc6:	2300      	movne	r3, #0
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	461a      	mov	r2, r3
 8005ccc:	79fb      	ldrb	r3, [r7, #7]
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d0cd      	beq.n	8005c6e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3710      	adds	r7, #16
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005ce8:	e02c      	b.n	8005d44 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	68b9      	ldr	r1, [r7, #8]
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	f000 f870 	bl	8005dd4 <I2C_IsAcknowledgeFailed>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d001      	beq.n	8005cfe <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e02a      	b.n	8005d54 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d04:	d01e      	beq.n	8005d44 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d06:	f7fc fe13 	bl	8002930 <HAL_GetTick>
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	1ad3      	subs	r3, r2, r3
 8005d10:	68ba      	ldr	r2, [r7, #8]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d302      	bcc.n	8005d1c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d113      	bne.n	8005d44 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d20:	f043 0220 	orr.w	r2, r3, #32
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2220      	movs	r2, #32
 8005d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e007      	b.n	8005d54 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	699b      	ldr	r3, [r3, #24]
 8005d4a:	f003 0302 	and.w	r3, r3, #2
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d1cb      	bne.n	8005cea <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d52:	2300      	movs	r3, #0
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3710      	adds	r7, #16
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d68:	e028      	b.n	8005dbc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	68b9      	ldr	r1, [r7, #8]
 8005d6e:	68f8      	ldr	r0, [r7, #12]
 8005d70:	f000 f830 	bl	8005dd4 <I2C_IsAcknowledgeFailed>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d001      	beq.n	8005d7e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e026      	b.n	8005dcc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d7e:	f7fc fdd7 	bl	8002930 <HAL_GetTick>
 8005d82:	4602      	mov	r2, r0
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	68ba      	ldr	r2, [r7, #8]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d302      	bcc.n	8005d94 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d113      	bne.n	8005dbc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d98:	f043 0220 	orr.w	r2, r3, #32
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2220      	movs	r2, #32
 8005da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e007      	b.n	8005dcc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	f003 0320 	and.w	r3, r3, #32
 8005dc6:	2b20      	cmp	r3, #32
 8005dc8:	d1cf      	bne.n	8005d6a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3710      	adds	r7, #16
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	699b      	ldr	r3, [r3, #24]
 8005de6:	f003 0310 	and.w	r3, r3, #16
 8005dea:	2b10      	cmp	r3, #16
 8005dec:	d151      	bne.n	8005e92 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005dee:	e022      	b.n	8005e36 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df6:	d01e      	beq.n	8005e36 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005df8:	f7fc fd9a 	bl	8002930 <HAL_GetTick>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	68ba      	ldr	r2, [r7, #8]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d302      	bcc.n	8005e0e <I2C_IsAcknowledgeFailed+0x3a>
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d113      	bne.n	8005e36 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e12:	f043 0220 	orr.w	r2, r3, #32
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2220      	movs	r2, #32
 8005e1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e02e      	b.n	8005e94 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	699b      	ldr	r3, [r3, #24]
 8005e3c:	f003 0320 	and.w	r3, r3, #32
 8005e40:	2b20      	cmp	r3, #32
 8005e42:	d1d5      	bne.n	8005df0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2210      	movs	r2, #16
 8005e4a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	2220      	movs	r2, #32
 8005e52:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005e54:	68f8      	ldr	r0, [r7, #12]
 8005e56:	f7ff fedd 	bl	8005c14 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	6859      	ldr	r1, [r3, #4]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	4b0d      	ldr	r3, [pc, #52]	; (8005e9c <I2C_IsAcknowledgeFailed+0xc8>)
 8005e66:	400b      	ands	r3, r1
 8005e68:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e6e:	f043 0204 	orr.w	r2, r3, #4
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2220      	movs	r2, #32
 8005e7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e000      	b.n	8005e94 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005e92:	2300      	movs	r3, #0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3710      	adds	r7, #16
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}
 8005e9c:	fe00e800 	.word	0xfe00e800

08005ea0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b085      	sub	sp, #20
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	607b      	str	r3, [r7, #4]
 8005eaa:	460b      	mov	r3, r1
 8005eac:	817b      	strh	r3, [r7, #10]
 8005eae:	4613      	mov	r3, r2
 8005eb0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	685a      	ldr	r2, [r3, #4]
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	0d5b      	lsrs	r3, r3, #21
 8005ebc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005ec0:	4b0d      	ldr	r3, [pc, #52]	; (8005ef8 <I2C_TransferConfig+0x58>)
 8005ec2:	430b      	orrs	r3, r1
 8005ec4:	43db      	mvns	r3, r3
 8005ec6:	ea02 0103 	and.w	r1, r2, r3
 8005eca:	897b      	ldrh	r3, [r7, #10]
 8005ecc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005ed0:	7a7b      	ldrb	r3, [r7, #9]
 8005ed2:	041b      	lsls	r3, r3, #16
 8005ed4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005ed8:	431a      	orrs	r2, r3
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	431a      	orrs	r2, r3
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	431a      	orrs	r2, r3
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	430a      	orrs	r2, r1
 8005ee8:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005eea:	bf00      	nop
 8005eec:	3714      	adds	r7, #20
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr
 8005ef6:	bf00      	nop
 8005ef8:	03ff63ff 	.word	0x03ff63ff

08005efc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d101      	bne.n	8005f0e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e0bf      	b.n	800608e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d106      	bne.n	8005f28 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f008 fbee 	bl	800e704 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2202      	movs	r2, #2
 8005f2c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	699a      	ldr	r2, [r3, #24]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005f3e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	6999      	ldr	r1, [r3, #24]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	685a      	ldr	r2, [r3, #4]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005f54:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	430a      	orrs	r2, r1
 8005f62:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	6899      	ldr	r1, [r3, #8]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	4b4a      	ldr	r3, [pc, #296]	; (8006098 <HAL_LTDC_Init+0x19c>)
 8005f70:	400b      	ands	r3, r1
 8005f72:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	695b      	ldr	r3, [r3, #20]
 8005f78:	041b      	lsls	r3, r3, #16
 8005f7a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	6899      	ldr	r1, [r3, #8]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	699a      	ldr	r2, [r3, #24]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	431a      	orrs	r2, r3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	430a      	orrs	r2, r1
 8005f90:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	68d9      	ldr	r1, [r3, #12]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	4b3e      	ldr	r3, [pc, #248]	; (8006098 <HAL_LTDC_Init+0x19c>)
 8005f9e:	400b      	ands	r3, r1
 8005fa0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	69db      	ldr	r3, [r3, #28]
 8005fa6:	041b      	lsls	r3, r3, #16
 8005fa8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68d9      	ldr	r1, [r3, #12]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6a1a      	ldr	r2, [r3, #32]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	431a      	orrs	r2, r3
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	430a      	orrs	r2, r1
 8005fbe:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	6919      	ldr	r1, [r3, #16]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	4b33      	ldr	r3, [pc, #204]	; (8006098 <HAL_LTDC_Init+0x19c>)
 8005fcc:	400b      	ands	r3, r1
 8005fce:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd4:	041b      	lsls	r3, r3, #16
 8005fd6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	6919      	ldr	r1, [r3, #16]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	431a      	orrs	r2, r3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	430a      	orrs	r2, r1
 8005fec:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	6959      	ldr	r1, [r3, #20]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	4b27      	ldr	r3, [pc, #156]	; (8006098 <HAL_LTDC_Init+0x19c>)
 8005ffa:	400b      	ands	r3, r1
 8005ffc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006002:	041b      	lsls	r3, r3, #16
 8006004:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	6959      	ldr	r1, [r3, #20]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	431a      	orrs	r2, r3
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	430a      	orrs	r2, r1
 800601a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006022:	021b      	lsls	r3, r3, #8
 8006024:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800602c:	041b      	lsls	r3, r3, #16
 800602e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800603e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006046:	68ba      	ldr	r2, [r7, #8]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	4313      	orrs	r3, r2
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006052:	431a      	orrs	r2, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	430a      	orrs	r2, r1
 800605a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f042 0206 	orr.w	r2, r2, #6
 800606a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	699a      	ldr	r2, [r3, #24]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f042 0201 	orr.w	r2, r2, #1
 800607a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	3710      	adds	r7, #16
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	f000f800 	.word	0xf000f800

0800609c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800609c:	b5b0      	push	{r4, r5, r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d101      	bne.n	80060b6 <HAL_LTDC_ConfigLayer+0x1a>
 80060b2:	2302      	movs	r3, #2
 80060b4:	e02c      	b.n	8006110 <HAL_LTDC_ConfigLayer+0x74>
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2201      	movs	r2, #1
 80060ba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2202      	movs	r2, #2
 80060c2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2134      	movs	r1, #52	; 0x34
 80060cc:	fb01 f303 	mul.w	r3, r1, r3
 80060d0:	4413      	add	r3, r2
 80060d2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	4614      	mov	r4, r2
 80060da:	461d      	mov	r5, r3
 80060dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80060de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80060e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80060e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060e8:	682b      	ldr	r3, [r5, #0]
 80060ea:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	68b9      	ldr	r1, [r7, #8]
 80060f0:	68f8      	ldr	r0, [r7, #12]
 80060f2:	f000 f811 	bl	8006118 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2201      	movs	r2, #1
 80060fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2201      	movs	r2, #1
 8006102:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2200      	movs	r2, #0
 800610a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800610e:	2300      	movs	r3, #0
}
 8006110:	4618      	mov	r0, r3
 8006112:	3710      	adds	r7, #16
 8006114:	46bd      	mov	sp, r7
 8006116:	bdb0      	pop	{r4, r5, r7, pc}

08006118 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006118:	b480      	push	{r7}
 800611a:	b089      	sub	sp, #36	; 0x24
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	685a      	ldr	r2, [r3, #4]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	0c1b      	lsrs	r3, r3, #16
 8006130:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006134:	4413      	add	r3, r2
 8006136:	041b      	lsls	r3, r3, #16
 8006138:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	461a      	mov	r2, r3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	01db      	lsls	r3, r3, #7
 8006144:	4413      	add	r3, r2
 8006146:	3384      	adds	r3, #132	; 0x84
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	68fa      	ldr	r2, [r7, #12]
 800614c:	6812      	ldr	r2, [r2, #0]
 800614e:	4611      	mov	r1, r2
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	01d2      	lsls	r2, r2, #7
 8006154:	440a      	add	r2, r1
 8006156:	3284      	adds	r2, #132	; 0x84
 8006158:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800615c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	0c1b      	lsrs	r3, r3, #16
 800616a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800616e:	4413      	add	r3, r2
 8006170:	1c5a      	adds	r2, r3, #1
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4619      	mov	r1, r3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	01db      	lsls	r3, r3, #7
 800617c:	440b      	add	r3, r1
 800617e:	3384      	adds	r3, #132	; 0x84
 8006180:	4619      	mov	r1, r3
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	4313      	orrs	r3, r2
 8006186:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	68da      	ldr	r2, [r3, #12]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006196:	4413      	add	r3, r2
 8006198:	041b      	lsls	r3, r3, #16
 800619a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	461a      	mov	r2, r3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	01db      	lsls	r3, r3, #7
 80061a6:	4413      	add	r3, r2
 80061a8:	3384      	adds	r3, #132	; 0x84
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	6812      	ldr	r2, [r2, #0]
 80061b0:	4611      	mov	r1, r2
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	01d2      	lsls	r2, r2, #7
 80061b6:	440a      	add	r2, r1
 80061b8:	3284      	adds	r2, #132	; 0x84
 80061ba:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80061be:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	689a      	ldr	r2, [r3, #8]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061ce:	4413      	add	r3, r2
 80061d0:	1c5a      	adds	r2, r3, #1
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4619      	mov	r1, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	01db      	lsls	r3, r3, #7
 80061dc:	440b      	add	r3, r1
 80061de:	3384      	adds	r3, #132	; 0x84
 80061e0:	4619      	mov	r1, r3
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	4313      	orrs	r3, r2
 80061e6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	461a      	mov	r2, r3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	01db      	lsls	r3, r3, #7
 80061f2:	4413      	add	r3, r2
 80061f4:	3384      	adds	r3, #132	; 0x84
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	6812      	ldr	r2, [r2, #0]
 80061fc:	4611      	mov	r1, r2
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	01d2      	lsls	r2, r2, #7
 8006202:	440a      	add	r2, r1
 8006204:	3284      	adds	r2, #132	; 0x84
 8006206:	f023 0307 	bic.w	r3, r3, #7
 800620a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	461a      	mov	r2, r3
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	01db      	lsls	r3, r3, #7
 8006216:	4413      	add	r3, r2
 8006218:	3384      	adds	r3, #132	; 0x84
 800621a:	461a      	mov	r2, r3
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	691b      	ldr	r3, [r3, #16]
 8006220:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006228:	021b      	lsls	r3, r3, #8
 800622a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006232:	041b      	lsls	r3, r3, #16
 8006234:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	699b      	ldr	r3, [r3, #24]
 800623a:	061b      	lsls	r3, r3, #24
 800623c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	461a      	mov	r2, r3
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	01db      	lsls	r3, r3, #7
 8006248:	4413      	add	r3, r2
 800624a:	3384      	adds	r3, #132	; 0x84
 800624c:	699b      	ldr	r3, [r3, #24]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	461a      	mov	r2, r3
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	01db      	lsls	r3, r3, #7
 8006258:	4413      	add	r3, r2
 800625a:	3384      	adds	r3, #132	; 0x84
 800625c:	461a      	mov	r2, r3
 800625e:	2300      	movs	r3, #0
 8006260:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006268:	461a      	mov	r2, r3
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	431a      	orrs	r2, r3
 800626e:	69bb      	ldr	r3, [r7, #24]
 8006270:	431a      	orrs	r2, r3
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4619      	mov	r1, r3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	01db      	lsls	r3, r3, #7
 800627c:	440b      	add	r3, r1
 800627e:	3384      	adds	r3, #132	; 0x84
 8006280:	4619      	mov	r1, r3
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	4313      	orrs	r3, r2
 8006286:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	461a      	mov	r2, r3
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	01db      	lsls	r3, r3, #7
 8006292:	4413      	add	r3, r2
 8006294:	3384      	adds	r3, #132	; 0x84
 8006296:	695b      	ldr	r3, [r3, #20]
 8006298:	68fa      	ldr	r2, [r7, #12]
 800629a:	6812      	ldr	r2, [r2, #0]
 800629c:	4611      	mov	r1, r2
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	01d2      	lsls	r2, r2, #7
 80062a2:	440a      	add	r2, r1
 80062a4:	3284      	adds	r2, #132	; 0x84
 80062a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80062aa:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	461a      	mov	r2, r3
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	01db      	lsls	r3, r3, #7
 80062b6:	4413      	add	r3, r2
 80062b8:	3384      	adds	r3, #132	; 0x84
 80062ba:	461a      	mov	r2, r3
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	695b      	ldr	r3, [r3, #20]
 80062c0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	461a      	mov	r2, r3
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	01db      	lsls	r3, r3, #7
 80062cc:	4413      	add	r3, r2
 80062ce:	3384      	adds	r3, #132	; 0x84
 80062d0:	69da      	ldr	r2, [r3, #28]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4619      	mov	r1, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	01db      	lsls	r3, r3, #7
 80062dc:	440b      	add	r3, r1
 80062de:	3384      	adds	r3, #132	; 0x84
 80062e0:	4619      	mov	r1, r3
 80062e2:	4b58      	ldr	r3, [pc, #352]	; (8006444 <LTDC_SetConfig+0x32c>)
 80062e4:	4013      	ands	r3, r2
 80062e6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	69da      	ldr	r2, [r3, #28]
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	6a1b      	ldr	r3, [r3, #32]
 80062f0:	68f9      	ldr	r1, [r7, #12]
 80062f2:	6809      	ldr	r1, [r1, #0]
 80062f4:	4608      	mov	r0, r1
 80062f6:	6879      	ldr	r1, [r7, #4]
 80062f8:	01c9      	lsls	r1, r1, #7
 80062fa:	4401      	add	r1, r0
 80062fc:	3184      	adds	r1, #132	; 0x84
 80062fe:	4313      	orrs	r3, r2
 8006300:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	461a      	mov	r2, r3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	01db      	lsls	r3, r3, #7
 800630c:	4413      	add	r3, r2
 800630e:	3384      	adds	r3, #132	; 0x84
 8006310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	461a      	mov	r2, r3
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	01db      	lsls	r3, r3, #7
 800631c:	4413      	add	r3, r2
 800631e:	3384      	adds	r3, #132	; 0x84
 8006320:	461a      	mov	r2, r3
 8006322:	2300      	movs	r3, #0
 8006324:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	461a      	mov	r2, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	01db      	lsls	r3, r3, #7
 8006330:	4413      	add	r3, r2
 8006332:	3384      	adds	r3, #132	; 0x84
 8006334:	461a      	mov	r2, r3
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d102      	bne.n	800634a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006344:	2304      	movs	r3, #4
 8006346:	61fb      	str	r3, [r7, #28]
 8006348:	e01b      	b.n	8006382 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	2b01      	cmp	r3, #1
 8006350:	d102      	bne.n	8006358 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006352:	2303      	movs	r3, #3
 8006354:	61fb      	str	r3, [r7, #28]
 8006356:	e014      	b.n	8006382 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	691b      	ldr	r3, [r3, #16]
 800635c:	2b04      	cmp	r3, #4
 800635e:	d00b      	beq.n	8006378 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006364:	2b02      	cmp	r3, #2
 8006366:	d007      	beq.n	8006378 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800636c:	2b03      	cmp	r3, #3
 800636e:	d003      	beq.n	8006378 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006374:	2b07      	cmp	r3, #7
 8006376:	d102      	bne.n	800637e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006378:	2302      	movs	r3, #2
 800637a:	61fb      	str	r3, [r7, #28]
 800637c:	e001      	b.n	8006382 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800637e:	2301      	movs	r3, #1
 8006380:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	461a      	mov	r2, r3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	01db      	lsls	r3, r3, #7
 800638c:	4413      	add	r3, r2
 800638e:	3384      	adds	r3, #132	; 0x84
 8006390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	6812      	ldr	r2, [r2, #0]
 8006396:	4611      	mov	r1, r2
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	01d2      	lsls	r2, r2, #7
 800639c:	440a      	add	r2, r1
 800639e:	3284      	adds	r2, #132	; 0x84
 80063a0:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80063a4:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063aa:	69fa      	ldr	r2, [r7, #28]
 80063ac:	fb02 f303 	mul.w	r3, r2, r3
 80063b0:	041a      	lsls	r2, r3, #16
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	6859      	ldr	r1, [r3, #4]
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	1acb      	subs	r3, r1, r3
 80063bc:	69f9      	ldr	r1, [r7, #28]
 80063be:	fb01 f303 	mul.w	r3, r1, r3
 80063c2:	3303      	adds	r3, #3
 80063c4:	68f9      	ldr	r1, [r7, #12]
 80063c6:	6809      	ldr	r1, [r1, #0]
 80063c8:	4608      	mov	r0, r1
 80063ca:	6879      	ldr	r1, [r7, #4]
 80063cc:	01c9      	lsls	r1, r1, #7
 80063ce:	4401      	add	r1, r0
 80063d0:	3184      	adds	r1, #132	; 0x84
 80063d2:	4313      	orrs	r3, r2
 80063d4:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	461a      	mov	r2, r3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	01db      	lsls	r3, r3, #7
 80063e0:	4413      	add	r3, r2
 80063e2:	3384      	adds	r3, #132	; 0x84
 80063e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4619      	mov	r1, r3
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	01db      	lsls	r3, r3, #7
 80063f0:	440b      	add	r3, r1
 80063f2:	3384      	adds	r3, #132	; 0x84
 80063f4:	4619      	mov	r1, r3
 80063f6:	4b14      	ldr	r3, [pc, #80]	; (8006448 <LTDC_SetConfig+0x330>)
 80063f8:	4013      	ands	r3, r2
 80063fa:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	461a      	mov	r2, r3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	01db      	lsls	r3, r3, #7
 8006406:	4413      	add	r3, r2
 8006408:	3384      	adds	r3, #132	; 0x84
 800640a:	461a      	mov	r2, r3
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006410:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	461a      	mov	r2, r3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	01db      	lsls	r3, r3, #7
 800641c:	4413      	add	r3, r2
 800641e:	3384      	adds	r3, #132	; 0x84
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	6812      	ldr	r2, [r2, #0]
 8006426:	4611      	mov	r1, r2
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	01d2      	lsls	r2, r2, #7
 800642c:	440a      	add	r2, r1
 800642e:	3284      	adds	r2, #132	; 0x84
 8006430:	f043 0301 	orr.w	r3, r3, #1
 8006434:	6013      	str	r3, [r2, #0]
}
 8006436:	bf00      	nop
 8006438:	3724      	adds	r7, #36	; 0x24
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr
 8006442:	bf00      	nop
 8006444:	fffff8f8 	.word	0xfffff8f8
 8006448:	fffff800 	.word	0xfffff800

0800644c <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645a:	2b00      	cmp	r3, #0
 800645c:	d101      	bne.n	8006462 <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 800645e:	2200      	movs	r2, #0
 8006460:	e001      	b.n	8006466 <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 8006462:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	6a1b      	ldr	r3, [r3, #32]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d102      	bne.n	8006478 <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 8006472:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006476:	e000      	b.n	800647a <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 8006478:	2200      	movs	r2, #0
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	69db      	ldr	r3, [r3, #28]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d102      	bne.n	800648c <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 8006486:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800648a:	e000      	b.n	800648e <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 800648c:	2200      	movs	r2, #0
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	605a      	str	r2, [r3, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006496:	1e5a      	subs	r2, r3, #1
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a4:	4413      	add	r3, r2
 80064a6:	1e5a      	subs	r2, r3, #1
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive - 1U;
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b4:	441a      	add	r2, r3
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ba:	4413      	add	r3, r2
 80064bc:	1e5a      	subs	r2, r3, #1
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ca:	441a      	add	r2, r3
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d0:	441a      	add	r2, r3
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064d6:	4413      	add	r3, r2
 80064d8:	1e5a      	subs	r2, r3, #1
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80064de:	2300      	movs	r3, #0
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	370c      	adds	r7, #12
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b082      	sub	sp, #8
 80064f0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80064f2:	2300      	movs	r3, #0
 80064f4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80064f6:	4b23      	ldr	r3, [pc, #140]	; (8006584 <HAL_PWREx_EnableOverDrive+0x98>)
 80064f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064fa:	4a22      	ldr	r2, [pc, #136]	; (8006584 <HAL_PWREx_EnableOverDrive+0x98>)
 80064fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006500:	6413      	str	r3, [r2, #64]	; 0x40
 8006502:	4b20      	ldr	r3, [pc, #128]	; (8006584 <HAL_PWREx_EnableOverDrive+0x98>)
 8006504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800650a:	603b      	str	r3, [r7, #0]
 800650c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800650e:	4b1e      	ldr	r3, [pc, #120]	; (8006588 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a1d      	ldr	r2, [pc, #116]	; (8006588 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006518:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800651a:	f7fc fa09 	bl	8002930 <HAL_GetTick>
 800651e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006520:	e009      	b.n	8006536 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006522:	f7fc fa05 	bl	8002930 <HAL_GetTick>
 8006526:	4602      	mov	r2, r0
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	1ad3      	subs	r3, r2, r3
 800652c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006530:	d901      	bls.n	8006536 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006532:	2303      	movs	r3, #3
 8006534:	e022      	b.n	800657c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006536:	4b14      	ldr	r3, [pc, #80]	; (8006588 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800653e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006542:	d1ee      	bne.n	8006522 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006544:	4b10      	ldr	r3, [pc, #64]	; (8006588 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a0f      	ldr	r2, [pc, #60]	; (8006588 <HAL_PWREx_EnableOverDrive+0x9c>)
 800654a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800654e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006550:	f7fc f9ee 	bl	8002930 <HAL_GetTick>
 8006554:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006556:	e009      	b.n	800656c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006558:	f7fc f9ea 	bl	8002930 <HAL_GetTick>
 800655c:	4602      	mov	r2, r0
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	1ad3      	subs	r3, r2, r3
 8006562:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006566:	d901      	bls.n	800656c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006568:	2303      	movs	r3, #3
 800656a:	e007      	b.n	800657c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800656c:	4b06      	ldr	r3, [pc, #24]	; (8006588 <HAL_PWREx_EnableOverDrive+0x9c>)
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006574:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006578:	d1ee      	bne.n	8006558 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800657a:	2300      	movs	r3, #0
}
 800657c:	4618      	mov	r0, r3
 800657e:	3708      	adds	r7, #8
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}
 8006584:	40023800 	.word	0x40023800
 8006588:	40007000 	.word	0x40007000

0800658c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b086      	sub	sp, #24
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8006594:	2300      	movs	r3, #0
 8006596:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d101      	bne.n	80065a2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e25e      	b.n	8006a60 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 0301 	and.w	r3, r3, #1
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	f000 8087 	beq.w	80066be <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80065b0:	4b96      	ldr	r3, [pc, #600]	; (800680c <HAL_RCC_OscConfig+0x280>)
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	f003 030c 	and.w	r3, r3, #12
 80065b8:	2b04      	cmp	r3, #4
 80065ba:	d00c      	beq.n	80065d6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065bc:	4b93      	ldr	r3, [pc, #588]	; (800680c <HAL_RCC_OscConfig+0x280>)
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	f003 030c 	and.w	r3, r3, #12
 80065c4:	2b08      	cmp	r3, #8
 80065c6:	d112      	bne.n	80065ee <HAL_RCC_OscConfig+0x62>
 80065c8:	4b90      	ldr	r3, [pc, #576]	; (800680c <HAL_RCC_OscConfig+0x280>)
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065d4:	d10b      	bne.n	80065ee <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065d6:	4b8d      	ldr	r3, [pc, #564]	; (800680c <HAL_RCC_OscConfig+0x280>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d06c      	beq.n	80066bc <HAL_RCC_OscConfig+0x130>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d168      	bne.n	80066bc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	e238      	b.n	8006a60 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065f6:	d106      	bne.n	8006606 <HAL_RCC_OscConfig+0x7a>
 80065f8:	4b84      	ldr	r3, [pc, #528]	; (800680c <HAL_RCC_OscConfig+0x280>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a83      	ldr	r2, [pc, #524]	; (800680c <HAL_RCC_OscConfig+0x280>)
 80065fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006602:	6013      	str	r3, [r2, #0]
 8006604:	e02e      	b.n	8006664 <HAL_RCC_OscConfig+0xd8>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d10c      	bne.n	8006628 <HAL_RCC_OscConfig+0x9c>
 800660e:	4b7f      	ldr	r3, [pc, #508]	; (800680c <HAL_RCC_OscConfig+0x280>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a7e      	ldr	r2, [pc, #504]	; (800680c <HAL_RCC_OscConfig+0x280>)
 8006614:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006618:	6013      	str	r3, [r2, #0]
 800661a:	4b7c      	ldr	r3, [pc, #496]	; (800680c <HAL_RCC_OscConfig+0x280>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a7b      	ldr	r2, [pc, #492]	; (800680c <HAL_RCC_OscConfig+0x280>)
 8006620:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006624:	6013      	str	r3, [r2, #0]
 8006626:	e01d      	b.n	8006664 <HAL_RCC_OscConfig+0xd8>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006630:	d10c      	bne.n	800664c <HAL_RCC_OscConfig+0xc0>
 8006632:	4b76      	ldr	r3, [pc, #472]	; (800680c <HAL_RCC_OscConfig+0x280>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a75      	ldr	r2, [pc, #468]	; (800680c <HAL_RCC_OscConfig+0x280>)
 8006638:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800663c:	6013      	str	r3, [r2, #0]
 800663e:	4b73      	ldr	r3, [pc, #460]	; (800680c <HAL_RCC_OscConfig+0x280>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a72      	ldr	r2, [pc, #456]	; (800680c <HAL_RCC_OscConfig+0x280>)
 8006644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006648:	6013      	str	r3, [r2, #0]
 800664a:	e00b      	b.n	8006664 <HAL_RCC_OscConfig+0xd8>
 800664c:	4b6f      	ldr	r3, [pc, #444]	; (800680c <HAL_RCC_OscConfig+0x280>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a6e      	ldr	r2, [pc, #440]	; (800680c <HAL_RCC_OscConfig+0x280>)
 8006652:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006656:	6013      	str	r3, [r2, #0]
 8006658:	4b6c      	ldr	r3, [pc, #432]	; (800680c <HAL_RCC_OscConfig+0x280>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a6b      	ldr	r2, [pc, #428]	; (800680c <HAL_RCC_OscConfig+0x280>)
 800665e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006662:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d013      	beq.n	8006694 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800666c:	f7fc f960 	bl	8002930 <HAL_GetTick>
 8006670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006672:	e008      	b.n	8006686 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006674:	f7fc f95c 	bl	8002930 <HAL_GetTick>
 8006678:	4602      	mov	r2, r0
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	2b64      	cmp	r3, #100	; 0x64
 8006680:	d901      	bls.n	8006686 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006682:	2303      	movs	r3, #3
 8006684:	e1ec      	b.n	8006a60 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006686:	4b61      	ldr	r3, [pc, #388]	; (800680c <HAL_RCC_OscConfig+0x280>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800668e:	2b00      	cmp	r3, #0
 8006690:	d0f0      	beq.n	8006674 <HAL_RCC_OscConfig+0xe8>
 8006692:	e014      	b.n	80066be <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006694:	f7fc f94c 	bl	8002930 <HAL_GetTick>
 8006698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800669a:	e008      	b.n	80066ae <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800669c:	f7fc f948 	bl	8002930 <HAL_GetTick>
 80066a0:	4602      	mov	r2, r0
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	2b64      	cmp	r3, #100	; 0x64
 80066a8:	d901      	bls.n	80066ae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	e1d8      	b.n	8006a60 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066ae:	4b57      	ldr	r3, [pc, #348]	; (800680c <HAL_RCC_OscConfig+0x280>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d1f0      	bne.n	800669c <HAL_RCC_OscConfig+0x110>
 80066ba:	e000      	b.n	80066be <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 0302 	and.w	r3, r3, #2
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d069      	beq.n	800679e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80066ca:	4b50      	ldr	r3, [pc, #320]	; (800680c <HAL_RCC_OscConfig+0x280>)
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	f003 030c 	and.w	r3, r3, #12
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d00b      	beq.n	80066ee <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066d6:	4b4d      	ldr	r3, [pc, #308]	; (800680c <HAL_RCC_OscConfig+0x280>)
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	f003 030c 	and.w	r3, r3, #12
 80066de:	2b08      	cmp	r3, #8
 80066e0:	d11c      	bne.n	800671c <HAL_RCC_OscConfig+0x190>
 80066e2:	4b4a      	ldr	r3, [pc, #296]	; (800680c <HAL_RCC_OscConfig+0x280>)
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d116      	bne.n	800671c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066ee:	4b47      	ldr	r3, [pc, #284]	; (800680c <HAL_RCC_OscConfig+0x280>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 0302 	and.w	r3, r3, #2
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d005      	beq.n	8006706 <HAL_RCC_OscConfig+0x17a>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d001      	beq.n	8006706 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	e1ac      	b.n	8006a60 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006706:	4b41      	ldr	r3, [pc, #260]	; (800680c <HAL_RCC_OscConfig+0x280>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	00db      	lsls	r3, r3, #3
 8006714:	493d      	ldr	r1, [pc, #244]	; (800680c <HAL_RCC_OscConfig+0x280>)
 8006716:	4313      	orrs	r3, r2
 8006718:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800671a:	e040      	b.n	800679e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d023      	beq.n	800676c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006724:	4b39      	ldr	r3, [pc, #228]	; (800680c <HAL_RCC_OscConfig+0x280>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a38      	ldr	r2, [pc, #224]	; (800680c <HAL_RCC_OscConfig+0x280>)
 800672a:	f043 0301 	orr.w	r3, r3, #1
 800672e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006730:	f7fc f8fe 	bl	8002930 <HAL_GetTick>
 8006734:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006736:	e008      	b.n	800674a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006738:	f7fc f8fa 	bl	8002930 <HAL_GetTick>
 800673c:	4602      	mov	r2, r0
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	2b02      	cmp	r3, #2
 8006744:	d901      	bls.n	800674a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006746:	2303      	movs	r3, #3
 8006748:	e18a      	b.n	8006a60 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800674a:	4b30      	ldr	r3, [pc, #192]	; (800680c <HAL_RCC_OscConfig+0x280>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f003 0302 	and.w	r3, r3, #2
 8006752:	2b00      	cmp	r3, #0
 8006754:	d0f0      	beq.n	8006738 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006756:	4b2d      	ldr	r3, [pc, #180]	; (800680c <HAL_RCC_OscConfig+0x280>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	00db      	lsls	r3, r3, #3
 8006764:	4929      	ldr	r1, [pc, #164]	; (800680c <HAL_RCC_OscConfig+0x280>)
 8006766:	4313      	orrs	r3, r2
 8006768:	600b      	str	r3, [r1, #0]
 800676a:	e018      	b.n	800679e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800676c:	4b27      	ldr	r3, [pc, #156]	; (800680c <HAL_RCC_OscConfig+0x280>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a26      	ldr	r2, [pc, #152]	; (800680c <HAL_RCC_OscConfig+0x280>)
 8006772:	f023 0301 	bic.w	r3, r3, #1
 8006776:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006778:	f7fc f8da 	bl	8002930 <HAL_GetTick>
 800677c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800677e:	e008      	b.n	8006792 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006780:	f7fc f8d6 	bl	8002930 <HAL_GetTick>
 8006784:	4602      	mov	r2, r0
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	1ad3      	subs	r3, r2, r3
 800678a:	2b02      	cmp	r3, #2
 800678c:	d901      	bls.n	8006792 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800678e:	2303      	movs	r3, #3
 8006790:	e166      	b.n	8006a60 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006792:	4b1e      	ldr	r3, [pc, #120]	; (800680c <HAL_RCC_OscConfig+0x280>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 0302 	and.w	r3, r3, #2
 800679a:	2b00      	cmp	r3, #0
 800679c:	d1f0      	bne.n	8006780 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 0308 	and.w	r3, r3, #8
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d038      	beq.n	800681c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	695b      	ldr	r3, [r3, #20]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d019      	beq.n	80067e6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067b2:	4b16      	ldr	r3, [pc, #88]	; (800680c <HAL_RCC_OscConfig+0x280>)
 80067b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067b6:	4a15      	ldr	r2, [pc, #84]	; (800680c <HAL_RCC_OscConfig+0x280>)
 80067b8:	f043 0301 	orr.w	r3, r3, #1
 80067bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067be:	f7fc f8b7 	bl	8002930 <HAL_GetTick>
 80067c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067c4:	e008      	b.n	80067d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80067c6:	f7fc f8b3 	bl	8002930 <HAL_GetTick>
 80067ca:	4602      	mov	r2, r0
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	1ad3      	subs	r3, r2, r3
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	d901      	bls.n	80067d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80067d4:	2303      	movs	r3, #3
 80067d6:	e143      	b.n	8006a60 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067d8:	4b0c      	ldr	r3, [pc, #48]	; (800680c <HAL_RCC_OscConfig+0x280>)
 80067da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067dc:	f003 0302 	and.w	r3, r3, #2
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d0f0      	beq.n	80067c6 <HAL_RCC_OscConfig+0x23a>
 80067e4:	e01a      	b.n	800681c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067e6:	4b09      	ldr	r3, [pc, #36]	; (800680c <HAL_RCC_OscConfig+0x280>)
 80067e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067ea:	4a08      	ldr	r2, [pc, #32]	; (800680c <HAL_RCC_OscConfig+0x280>)
 80067ec:	f023 0301 	bic.w	r3, r3, #1
 80067f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067f2:	f7fc f89d 	bl	8002930 <HAL_GetTick>
 80067f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067f8:	e00a      	b.n	8006810 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80067fa:	f7fc f899 	bl	8002930 <HAL_GetTick>
 80067fe:	4602      	mov	r2, r0
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	1ad3      	subs	r3, r2, r3
 8006804:	2b02      	cmp	r3, #2
 8006806:	d903      	bls.n	8006810 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006808:	2303      	movs	r3, #3
 800680a:	e129      	b.n	8006a60 <HAL_RCC_OscConfig+0x4d4>
 800680c:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006810:	4b95      	ldr	r3, [pc, #596]	; (8006a68 <HAL_RCC_OscConfig+0x4dc>)
 8006812:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006814:	f003 0302 	and.w	r3, r3, #2
 8006818:	2b00      	cmp	r3, #0
 800681a:	d1ee      	bne.n	80067fa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 0304 	and.w	r3, r3, #4
 8006824:	2b00      	cmp	r3, #0
 8006826:	f000 80a4 	beq.w	8006972 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800682a:	4b8f      	ldr	r3, [pc, #572]	; (8006a68 <HAL_RCC_OscConfig+0x4dc>)
 800682c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006832:	2b00      	cmp	r3, #0
 8006834:	d10d      	bne.n	8006852 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006836:	4b8c      	ldr	r3, [pc, #560]	; (8006a68 <HAL_RCC_OscConfig+0x4dc>)
 8006838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800683a:	4a8b      	ldr	r2, [pc, #556]	; (8006a68 <HAL_RCC_OscConfig+0x4dc>)
 800683c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006840:	6413      	str	r3, [r2, #64]	; 0x40
 8006842:	4b89      	ldr	r3, [pc, #548]	; (8006a68 <HAL_RCC_OscConfig+0x4dc>)
 8006844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800684a:	60fb      	str	r3, [r7, #12]
 800684c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800684e:	2301      	movs	r3, #1
 8006850:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006852:	4b86      	ldr	r3, [pc, #536]	; (8006a6c <HAL_RCC_OscConfig+0x4e0>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800685a:	2b00      	cmp	r3, #0
 800685c:	d118      	bne.n	8006890 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800685e:	4b83      	ldr	r3, [pc, #524]	; (8006a6c <HAL_RCC_OscConfig+0x4e0>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a82      	ldr	r2, [pc, #520]	; (8006a6c <HAL_RCC_OscConfig+0x4e0>)
 8006864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006868:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800686a:	f7fc f861 	bl	8002930 <HAL_GetTick>
 800686e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006870:	e008      	b.n	8006884 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006872:	f7fc f85d 	bl	8002930 <HAL_GetTick>
 8006876:	4602      	mov	r2, r0
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	1ad3      	subs	r3, r2, r3
 800687c:	2b64      	cmp	r3, #100	; 0x64
 800687e:	d901      	bls.n	8006884 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006880:	2303      	movs	r3, #3
 8006882:	e0ed      	b.n	8006a60 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006884:	4b79      	ldr	r3, [pc, #484]	; (8006a6c <HAL_RCC_OscConfig+0x4e0>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800688c:	2b00      	cmp	r3, #0
 800688e:	d0f0      	beq.n	8006872 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	2b01      	cmp	r3, #1
 8006896:	d106      	bne.n	80068a6 <HAL_RCC_OscConfig+0x31a>
 8006898:	4b73      	ldr	r3, [pc, #460]	; (8006a68 <HAL_RCC_OscConfig+0x4dc>)
 800689a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800689c:	4a72      	ldr	r2, [pc, #456]	; (8006a68 <HAL_RCC_OscConfig+0x4dc>)
 800689e:	f043 0301 	orr.w	r3, r3, #1
 80068a2:	6713      	str	r3, [r2, #112]	; 0x70
 80068a4:	e02d      	b.n	8006902 <HAL_RCC_OscConfig+0x376>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d10c      	bne.n	80068c8 <HAL_RCC_OscConfig+0x33c>
 80068ae:	4b6e      	ldr	r3, [pc, #440]	; (8006a68 <HAL_RCC_OscConfig+0x4dc>)
 80068b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068b2:	4a6d      	ldr	r2, [pc, #436]	; (8006a68 <HAL_RCC_OscConfig+0x4dc>)
 80068b4:	f023 0301 	bic.w	r3, r3, #1
 80068b8:	6713      	str	r3, [r2, #112]	; 0x70
 80068ba:	4b6b      	ldr	r3, [pc, #428]	; (8006a68 <HAL_RCC_OscConfig+0x4dc>)
 80068bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068be:	4a6a      	ldr	r2, [pc, #424]	; (8006a68 <HAL_RCC_OscConfig+0x4dc>)
 80068c0:	f023 0304 	bic.w	r3, r3, #4
 80068c4:	6713      	str	r3, [r2, #112]	; 0x70
 80068c6:	e01c      	b.n	8006902 <HAL_RCC_OscConfig+0x376>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	2b05      	cmp	r3, #5
 80068ce:	d10c      	bne.n	80068ea <HAL_RCC_OscConfig+0x35e>
 80068d0:	4b65      	ldr	r3, [pc, #404]	; (8006a68 <HAL_RCC_OscConfig+0x4dc>)
 80068d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068d4:	4a64      	ldr	r2, [pc, #400]	; (8006a68 <HAL_RCC_OscConfig+0x4dc>)
 80068d6:	f043 0304 	orr.w	r3, r3, #4
 80068da:	6713      	str	r3, [r2, #112]	; 0x70
 80068dc:	4b62      	ldr	r3, [pc, #392]	; (8006a68 <HAL_RCC_OscConfig+0x4dc>)
 80068de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068e0:	4a61      	ldr	r2, [pc, #388]	; (8006a68 <HAL_RCC_OscConfig+0x4dc>)
 80068e2:	f043 0301 	orr.w	r3, r3, #1
 80068e6:	6713      	str	r3, [r2, #112]	; 0x70
 80068e8:	e00b      	b.n	8006902 <HAL_RCC_OscConfig+0x376>
 80068ea:	4b5f      	ldr	r3, [pc, #380]	; (8006a68 <HAL_RCC_OscConfig+0x4dc>)
 80068ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ee:	4a5e      	ldr	r2, [pc, #376]	; (8006a68 <HAL_RCC_OscConfig+0x4dc>)
 80068f0:	f023 0301 	bic.w	r3, r3, #1
 80068f4:	6713      	str	r3, [r2, #112]	; 0x70
 80068f6:	4b5c      	ldr	r3, [pc, #368]	; (8006a68 <HAL_RCC_OscConfig+0x4dc>)
 80068f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068fa:	4a5b      	ldr	r2, [pc, #364]	; (8006a68 <HAL_RCC_OscConfig+0x4dc>)
 80068fc:	f023 0304 	bic.w	r3, r3, #4
 8006900:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d015      	beq.n	8006936 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800690a:	f7fc f811 	bl	8002930 <HAL_GetTick>
 800690e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006910:	e00a      	b.n	8006928 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006912:	f7fc f80d 	bl	8002930 <HAL_GetTick>
 8006916:	4602      	mov	r2, r0
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	1ad3      	subs	r3, r2, r3
 800691c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006920:	4293      	cmp	r3, r2
 8006922:	d901      	bls.n	8006928 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006924:	2303      	movs	r3, #3
 8006926:	e09b      	b.n	8006a60 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006928:	4b4f      	ldr	r3, [pc, #316]	; (8006a68 <HAL_RCC_OscConfig+0x4dc>)
 800692a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800692c:	f003 0302 	and.w	r3, r3, #2
 8006930:	2b00      	cmp	r3, #0
 8006932:	d0ee      	beq.n	8006912 <HAL_RCC_OscConfig+0x386>
 8006934:	e014      	b.n	8006960 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006936:	f7fb fffb 	bl	8002930 <HAL_GetTick>
 800693a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800693c:	e00a      	b.n	8006954 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800693e:	f7fb fff7 	bl	8002930 <HAL_GetTick>
 8006942:	4602      	mov	r2, r0
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	1ad3      	subs	r3, r2, r3
 8006948:	f241 3288 	movw	r2, #5000	; 0x1388
 800694c:	4293      	cmp	r3, r2
 800694e:	d901      	bls.n	8006954 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006950:	2303      	movs	r3, #3
 8006952:	e085      	b.n	8006a60 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006954:	4b44      	ldr	r3, [pc, #272]	; (8006a68 <HAL_RCC_OscConfig+0x4dc>)
 8006956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006958:	f003 0302 	and.w	r3, r3, #2
 800695c:	2b00      	cmp	r3, #0
 800695e:	d1ee      	bne.n	800693e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006960:	7dfb      	ldrb	r3, [r7, #23]
 8006962:	2b01      	cmp	r3, #1
 8006964:	d105      	bne.n	8006972 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006966:	4b40      	ldr	r3, [pc, #256]	; (8006a68 <HAL_RCC_OscConfig+0x4dc>)
 8006968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800696a:	4a3f      	ldr	r2, [pc, #252]	; (8006a68 <HAL_RCC_OscConfig+0x4dc>)
 800696c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006970:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	699b      	ldr	r3, [r3, #24]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d071      	beq.n	8006a5e <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800697a:	4b3b      	ldr	r3, [pc, #236]	; (8006a68 <HAL_RCC_OscConfig+0x4dc>)
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	f003 030c 	and.w	r3, r3, #12
 8006982:	2b08      	cmp	r3, #8
 8006984:	d069      	beq.n	8006a5a <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	699b      	ldr	r3, [r3, #24]
 800698a:	2b02      	cmp	r3, #2
 800698c:	d14b      	bne.n	8006a26 <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800698e:	4b36      	ldr	r3, [pc, #216]	; (8006a68 <HAL_RCC_OscConfig+0x4dc>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a35      	ldr	r2, [pc, #212]	; (8006a68 <HAL_RCC_OscConfig+0x4dc>)
 8006994:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006998:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800699a:	f7fb ffc9 	bl	8002930 <HAL_GetTick>
 800699e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069a0:	e008      	b.n	80069b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069a2:	f7fb ffc5 	bl	8002930 <HAL_GetTick>
 80069a6:	4602      	mov	r2, r0
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	1ad3      	subs	r3, r2, r3
 80069ac:	2b02      	cmp	r3, #2
 80069ae:	d901      	bls.n	80069b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80069b0:	2303      	movs	r3, #3
 80069b2:	e055      	b.n	8006a60 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069b4:	4b2c      	ldr	r3, [pc, #176]	; (8006a68 <HAL_RCC_OscConfig+0x4dc>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d1f0      	bne.n	80069a2 <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	69da      	ldr	r2, [r3, #28]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6a1b      	ldr	r3, [r3, #32]
 80069c8:	431a      	orrs	r2, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ce:	019b      	lsls	r3, r3, #6
 80069d0:	431a      	orrs	r2, r3
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d6:	085b      	lsrs	r3, r3, #1
 80069d8:	3b01      	subs	r3, #1
 80069da:	041b      	lsls	r3, r3, #16
 80069dc:	431a      	orrs	r2, r3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e2:	061b      	lsls	r3, r3, #24
 80069e4:	431a      	orrs	r2, r3
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ea:	071b      	lsls	r3, r3, #28
 80069ec:	491e      	ldr	r1, [pc, #120]	; (8006a68 <HAL_RCC_OscConfig+0x4dc>)
 80069ee:	4313      	orrs	r3, r2
 80069f0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069f2:	4b1d      	ldr	r3, [pc, #116]	; (8006a68 <HAL_RCC_OscConfig+0x4dc>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a1c      	ldr	r2, [pc, #112]	; (8006a68 <HAL_RCC_OscConfig+0x4dc>)
 80069f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069fe:	f7fb ff97 	bl	8002930 <HAL_GetTick>
 8006a02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a04:	e008      	b.n	8006a18 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a06:	f7fb ff93 	bl	8002930 <HAL_GetTick>
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	1ad3      	subs	r3, r2, r3
 8006a10:	2b02      	cmp	r3, #2
 8006a12:	d901      	bls.n	8006a18 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8006a14:	2303      	movs	r3, #3
 8006a16:	e023      	b.n	8006a60 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a18:	4b13      	ldr	r3, [pc, #76]	; (8006a68 <HAL_RCC_OscConfig+0x4dc>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d0f0      	beq.n	8006a06 <HAL_RCC_OscConfig+0x47a>
 8006a24:	e01b      	b.n	8006a5e <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a26:	4b10      	ldr	r3, [pc, #64]	; (8006a68 <HAL_RCC_OscConfig+0x4dc>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a0f      	ldr	r2, [pc, #60]	; (8006a68 <HAL_RCC_OscConfig+0x4dc>)
 8006a2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a32:	f7fb ff7d 	bl	8002930 <HAL_GetTick>
 8006a36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a38:	e008      	b.n	8006a4c <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a3a:	f7fb ff79 	bl	8002930 <HAL_GetTick>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	1ad3      	subs	r3, r2, r3
 8006a44:	2b02      	cmp	r3, #2
 8006a46:	d901      	bls.n	8006a4c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006a48:	2303      	movs	r3, #3
 8006a4a:	e009      	b.n	8006a60 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a4c:	4b06      	ldr	r3, [pc, #24]	; (8006a68 <HAL_RCC_OscConfig+0x4dc>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d1f0      	bne.n	8006a3a <HAL_RCC_OscConfig+0x4ae>
 8006a58:	e001      	b.n	8006a5e <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e000      	b.n	8006a60 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 8006a5e:	2300      	movs	r3, #0
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3718      	adds	r7, #24
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	40023800 	.word	0x40023800
 8006a6c:	40007000 	.word	0x40007000

08006a70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d101      	bne.n	8006a88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	e0ce      	b.n	8006c26 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006a88:	4b69      	ldr	r3, [pc, #420]	; (8006c30 <HAL_RCC_ClockConfig+0x1c0>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f003 030f 	and.w	r3, r3, #15
 8006a90:	683a      	ldr	r2, [r7, #0]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d910      	bls.n	8006ab8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a96:	4b66      	ldr	r3, [pc, #408]	; (8006c30 <HAL_RCC_ClockConfig+0x1c0>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f023 020f 	bic.w	r2, r3, #15
 8006a9e:	4964      	ldr	r1, [pc, #400]	; (8006c30 <HAL_RCC_ClockConfig+0x1c0>)
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006aa6:	4b62      	ldr	r3, [pc, #392]	; (8006c30 <HAL_RCC_ClockConfig+0x1c0>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f003 030f 	and.w	r3, r3, #15
 8006aae:	683a      	ldr	r2, [r7, #0]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d001      	beq.n	8006ab8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e0b6      	b.n	8006c26 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 0302 	and.w	r3, r3, #2
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d020      	beq.n	8006b06 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 0304 	and.w	r3, r3, #4
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d005      	beq.n	8006adc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ad0:	4b58      	ldr	r3, [pc, #352]	; (8006c34 <HAL_RCC_ClockConfig+0x1c4>)
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	4a57      	ldr	r2, [pc, #348]	; (8006c34 <HAL_RCC_ClockConfig+0x1c4>)
 8006ad6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006ada:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 0308 	and.w	r3, r3, #8
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d005      	beq.n	8006af4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ae8:	4b52      	ldr	r3, [pc, #328]	; (8006c34 <HAL_RCC_ClockConfig+0x1c4>)
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	4a51      	ldr	r2, [pc, #324]	; (8006c34 <HAL_RCC_ClockConfig+0x1c4>)
 8006aee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006af2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006af4:	4b4f      	ldr	r3, [pc, #316]	; (8006c34 <HAL_RCC_ClockConfig+0x1c4>)
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	494c      	ldr	r1, [pc, #304]	; (8006c34 <HAL_RCC_ClockConfig+0x1c4>)
 8006b02:	4313      	orrs	r3, r2
 8006b04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f003 0301 	and.w	r3, r3, #1
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d040      	beq.n	8006b94 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d107      	bne.n	8006b2a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b1a:	4b46      	ldr	r3, [pc, #280]	; (8006c34 <HAL_RCC_ClockConfig+0x1c4>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d115      	bne.n	8006b52 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	e07d      	b.n	8006c26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	2b02      	cmp	r3, #2
 8006b30:	d107      	bne.n	8006b42 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b32:	4b40      	ldr	r3, [pc, #256]	; (8006c34 <HAL_RCC_ClockConfig+0x1c4>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d109      	bne.n	8006b52 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e071      	b.n	8006c26 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b42:	4b3c      	ldr	r3, [pc, #240]	; (8006c34 <HAL_RCC_ClockConfig+0x1c4>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 0302 	and.w	r3, r3, #2
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d101      	bne.n	8006b52 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e069      	b.n	8006c26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b52:	4b38      	ldr	r3, [pc, #224]	; (8006c34 <HAL_RCC_ClockConfig+0x1c4>)
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	f023 0203 	bic.w	r2, r3, #3
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	4935      	ldr	r1, [pc, #212]	; (8006c34 <HAL_RCC_ClockConfig+0x1c4>)
 8006b60:	4313      	orrs	r3, r2
 8006b62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b64:	f7fb fee4 	bl	8002930 <HAL_GetTick>
 8006b68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b6a:	e00a      	b.n	8006b82 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b6c:	f7fb fee0 	bl	8002930 <HAL_GetTick>
 8006b70:	4602      	mov	r2, r0
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	1ad3      	subs	r3, r2, r3
 8006b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d901      	bls.n	8006b82 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006b7e:	2303      	movs	r3, #3
 8006b80:	e051      	b.n	8006c26 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b82:	4b2c      	ldr	r3, [pc, #176]	; (8006c34 <HAL_RCC_ClockConfig+0x1c4>)
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	f003 020c 	and.w	r2, r3, #12
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d1eb      	bne.n	8006b6c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006b94:	4b26      	ldr	r3, [pc, #152]	; (8006c30 <HAL_RCC_ClockConfig+0x1c0>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f003 030f 	and.w	r3, r3, #15
 8006b9c:	683a      	ldr	r2, [r7, #0]
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d210      	bcs.n	8006bc4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ba2:	4b23      	ldr	r3, [pc, #140]	; (8006c30 <HAL_RCC_ClockConfig+0x1c0>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f023 020f 	bic.w	r2, r3, #15
 8006baa:	4921      	ldr	r1, [pc, #132]	; (8006c30 <HAL_RCC_ClockConfig+0x1c0>)
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bb2:	4b1f      	ldr	r3, [pc, #124]	; (8006c30 <HAL_RCC_ClockConfig+0x1c0>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f003 030f 	and.w	r3, r3, #15
 8006bba:	683a      	ldr	r2, [r7, #0]
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d001      	beq.n	8006bc4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e030      	b.n	8006c26 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 0304 	and.w	r3, r3, #4
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d008      	beq.n	8006be2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006bd0:	4b18      	ldr	r3, [pc, #96]	; (8006c34 <HAL_RCC_ClockConfig+0x1c4>)
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	4915      	ldr	r1, [pc, #84]	; (8006c34 <HAL_RCC_ClockConfig+0x1c4>)
 8006bde:	4313      	orrs	r3, r2
 8006be0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 0308 	and.w	r3, r3, #8
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d009      	beq.n	8006c02 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006bee:	4b11      	ldr	r3, [pc, #68]	; (8006c34 <HAL_RCC_ClockConfig+0x1c4>)
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	00db      	lsls	r3, r3, #3
 8006bfc:	490d      	ldr	r1, [pc, #52]	; (8006c34 <HAL_RCC_ClockConfig+0x1c4>)
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006c02:	f000 f81d 	bl	8006c40 <HAL_RCC_GetSysClockFreq>
 8006c06:	4601      	mov	r1, r0
 8006c08:	4b0a      	ldr	r3, [pc, #40]	; (8006c34 <HAL_RCC_ClockConfig+0x1c4>)
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	091b      	lsrs	r3, r3, #4
 8006c0e:	f003 030f 	and.w	r3, r3, #15
 8006c12:	4a09      	ldr	r2, [pc, #36]	; (8006c38 <HAL_RCC_ClockConfig+0x1c8>)
 8006c14:	5cd3      	ldrb	r3, [r2, r3]
 8006c16:	fa21 f303 	lsr.w	r3, r1, r3
 8006c1a:	4a08      	ldr	r2, [pc, #32]	; (8006c3c <HAL_RCC_ClockConfig+0x1cc>)
 8006c1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006c1e:	2000      	movs	r0, #0
 8006c20:	f7fb fe42 	bl	80028a8 <HAL_InitTick>

  return HAL_OK;
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3710      	adds	r7, #16
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	40023c00 	.word	0x40023c00
 8006c34:	40023800 	.word	0x40023800
 8006c38:	0812a7f8 	.word	0x0812a7f8
 8006c3c:	20000048 	.word	0x20000048

08006c40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c42:	b085      	sub	sp, #20
 8006c44:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006c46:	2300      	movs	r3, #0
 8006c48:	607b      	str	r3, [r7, #4]
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	60fb      	str	r3, [r7, #12]
 8006c4e:	2300      	movs	r3, #0
 8006c50:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8006c52:	2300      	movs	r3, #0
 8006c54:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c56:	4b50      	ldr	r3, [pc, #320]	; (8006d98 <HAL_RCC_GetSysClockFreq+0x158>)
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	f003 030c 	and.w	r3, r3, #12
 8006c5e:	2b04      	cmp	r3, #4
 8006c60:	d007      	beq.n	8006c72 <HAL_RCC_GetSysClockFreq+0x32>
 8006c62:	2b08      	cmp	r3, #8
 8006c64:	d008      	beq.n	8006c78 <HAL_RCC_GetSysClockFreq+0x38>
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	f040 808d 	bne.w	8006d86 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c6c:	4b4b      	ldr	r3, [pc, #300]	; (8006d9c <HAL_RCC_GetSysClockFreq+0x15c>)
 8006c6e:	60bb      	str	r3, [r7, #8]
       break;
 8006c70:	e08c      	b.n	8006d8c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006c72:	4b4b      	ldr	r3, [pc, #300]	; (8006da0 <HAL_RCC_GetSysClockFreq+0x160>)
 8006c74:	60bb      	str	r3, [r7, #8]
      break;
 8006c76:	e089      	b.n	8006d8c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c78:	4b47      	ldr	r3, [pc, #284]	; (8006d98 <HAL_RCC_GetSysClockFreq+0x158>)
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c80:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006c82:	4b45      	ldr	r3, [pc, #276]	; (8006d98 <HAL_RCC_GetSysClockFreq+0x158>)
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d023      	beq.n	8006cd6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c8e:	4b42      	ldr	r3, [pc, #264]	; (8006d98 <HAL_RCC_GetSysClockFreq+0x158>)
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	099b      	lsrs	r3, r3, #6
 8006c94:	f04f 0400 	mov.w	r4, #0
 8006c98:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006c9c:	f04f 0200 	mov.w	r2, #0
 8006ca0:	ea03 0501 	and.w	r5, r3, r1
 8006ca4:	ea04 0602 	and.w	r6, r4, r2
 8006ca8:	4a3d      	ldr	r2, [pc, #244]	; (8006da0 <HAL_RCC_GetSysClockFreq+0x160>)
 8006caa:	fb02 f106 	mul.w	r1, r2, r6
 8006cae:	2200      	movs	r2, #0
 8006cb0:	fb02 f205 	mul.w	r2, r2, r5
 8006cb4:	440a      	add	r2, r1
 8006cb6:	493a      	ldr	r1, [pc, #232]	; (8006da0 <HAL_RCC_GetSysClockFreq+0x160>)
 8006cb8:	fba5 0101 	umull	r0, r1, r5, r1
 8006cbc:	1853      	adds	r3, r2, r1
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f04f 0400 	mov.w	r4, #0
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	4623      	mov	r3, r4
 8006cca:	f7f9 fb11 	bl	80002f0 <__aeabi_uldivmod>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	460c      	mov	r4, r1
 8006cd2:	60fb      	str	r3, [r7, #12]
 8006cd4:	e049      	b.n	8006d6a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006cd6:	4b30      	ldr	r3, [pc, #192]	; (8006d98 <HAL_RCC_GetSysClockFreq+0x158>)
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	099b      	lsrs	r3, r3, #6
 8006cdc:	f04f 0400 	mov.w	r4, #0
 8006ce0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006ce4:	f04f 0200 	mov.w	r2, #0
 8006ce8:	ea03 0501 	and.w	r5, r3, r1
 8006cec:	ea04 0602 	and.w	r6, r4, r2
 8006cf0:	4629      	mov	r1, r5
 8006cf2:	4632      	mov	r2, r6
 8006cf4:	f04f 0300 	mov.w	r3, #0
 8006cf8:	f04f 0400 	mov.w	r4, #0
 8006cfc:	0154      	lsls	r4, r2, #5
 8006cfe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006d02:	014b      	lsls	r3, r1, #5
 8006d04:	4619      	mov	r1, r3
 8006d06:	4622      	mov	r2, r4
 8006d08:	1b49      	subs	r1, r1, r5
 8006d0a:	eb62 0206 	sbc.w	r2, r2, r6
 8006d0e:	f04f 0300 	mov.w	r3, #0
 8006d12:	f04f 0400 	mov.w	r4, #0
 8006d16:	0194      	lsls	r4, r2, #6
 8006d18:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006d1c:	018b      	lsls	r3, r1, #6
 8006d1e:	1a5b      	subs	r3, r3, r1
 8006d20:	eb64 0402 	sbc.w	r4, r4, r2
 8006d24:	f04f 0100 	mov.w	r1, #0
 8006d28:	f04f 0200 	mov.w	r2, #0
 8006d2c:	00e2      	lsls	r2, r4, #3
 8006d2e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006d32:	00d9      	lsls	r1, r3, #3
 8006d34:	460b      	mov	r3, r1
 8006d36:	4614      	mov	r4, r2
 8006d38:	195b      	adds	r3, r3, r5
 8006d3a:	eb44 0406 	adc.w	r4, r4, r6
 8006d3e:	f04f 0100 	mov.w	r1, #0
 8006d42:	f04f 0200 	mov.w	r2, #0
 8006d46:	02a2      	lsls	r2, r4, #10
 8006d48:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006d4c:	0299      	lsls	r1, r3, #10
 8006d4e:	460b      	mov	r3, r1
 8006d50:	4614      	mov	r4, r2
 8006d52:	4618      	mov	r0, r3
 8006d54:	4621      	mov	r1, r4
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f04f 0400 	mov.w	r4, #0
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	4623      	mov	r3, r4
 8006d60:	f7f9 fac6 	bl	80002f0 <__aeabi_uldivmod>
 8006d64:	4603      	mov	r3, r0
 8006d66:	460c      	mov	r4, r1
 8006d68:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8006d6a:	4b0b      	ldr	r3, [pc, #44]	; (8006d98 <HAL_RCC_GetSysClockFreq+0x158>)
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	0c1b      	lsrs	r3, r3, #16
 8006d70:	f003 0303 	and.w	r3, r3, #3
 8006d74:	3301      	adds	r3, #1
 8006d76:	005b      	lsls	r3, r3, #1
 8006d78:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006d7a:	68fa      	ldr	r2, [r7, #12]
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d82:	60bb      	str	r3, [r7, #8]
      break;
 8006d84:	e002      	b.n	8006d8c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006d86:	4b05      	ldr	r3, [pc, #20]	; (8006d9c <HAL_RCC_GetSysClockFreq+0x15c>)
 8006d88:	60bb      	str	r3, [r7, #8]
      break;
 8006d8a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d8c:	68bb      	ldr	r3, [r7, #8]
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3714      	adds	r7, #20
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d96:	bf00      	nop
 8006d98:	40023800 	.word	0x40023800
 8006d9c:	00f42400 	.word	0x00f42400
 8006da0:	017d7840 	.word	0x017d7840

08006da4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b088      	sub	sp, #32
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006dac:	2300      	movs	r3, #0
 8006dae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006db0:	2300      	movs	r3, #0
 8006db2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006db4:	2300      	movs	r3, #0
 8006db6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006db8:	2300      	movs	r3, #0
 8006dba:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 0301 	and.w	r3, r3, #1
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d012      	beq.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006dcc:	4b69      	ldr	r3, [pc, #420]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	4a68      	ldr	r2, [pc, #416]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dd2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006dd6:	6093      	str	r3, [r2, #8]
 8006dd8:	4b66      	ldr	r3, [pc, #408]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dda:	689a      	ldr	r2, [r3, #8]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006de0:	4964      	ldr	r1, [pc, #400]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006de2:	4313      	orrs	r3, r2
 8006de4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d101      	bne.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006dee:	2301      	movs	r3, #1
 8006df0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d017      	beq.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006dfe:	4b5d      	ldr	r3, [pc, #372]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e04:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e0c:	4959      	ldr	r1, [pc, #356]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e1c:	d101      	bne.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d101      	bne.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d017      	beq.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006e3a:	4b4e      	ldr	r3, [pc, #312]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e40:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e48:	494a      	ldr	r1, [pc, #296]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e58:	d101      	bne.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d101      	bne.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006e66:	2301      	movs	r3, #1
 8006e68:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d001      	beq.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006e76:	2301      	movs	r3, #1
 8006e78:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f003 0320 	and.w	r3, r3, #32
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	f000 808b 	beq.w	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006e88:	4b3a      	ldr	r3, [pc, #232]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e8c:	4a39      	ldr	r2, [pc, #228]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e92:	6413      	str	r3, [r2, #64]	; 0x40
 8006e94:	4b37      	ldr	r3, [pc, #220]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e9c:	60bb      	str	r3, [r7, #8]
 8006e9e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006ea0:	4b35      	ldr	r3, [pc, #212]	; (8006f78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a34      	ldr	r2, [pc, #208]	; (8006f78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006ea6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006eaa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006eac:	f7fb fd40 	bl	8002930 <HAL_GetTick>
 8006eb0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006eb2:	e008      	b.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006eb4:	f7fb fd3c 	bl	8002930 <HAL_GetTick>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	1ad3      	subs	r3, r2, r3
 8006ebe:	2b64      	cmp	r3, #100	; 0x64
 8006ec0:	d901      	bls.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006ec2:	2303      	movs	r3, #3
 8006ec4:	e38d      	b.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006ec6:	4b2c      	ldr	r3, [pc, #176]	; (8006f78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d0f0      	beq.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006ed2:	4b28      	ldr	r3, [pc, #160]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006eda:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d035      	beq.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ee6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006eea:	693a      	ldr	r2, [r7, #16]
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d02e      	beq.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006ef0:	4b20      	ldr	r3, [pc, #128]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ef4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ef8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006efa:	4b1e      	ldr	r3, [pc, #120]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006efe:	4a1d      	ldr	r2, [pc, #116]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f04:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006f06:	4b1b      	ldr	r3, [pc, #108]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f0a:	4a1a      	ldr	r2, [pc, #104]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f10:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006f12:	4a18      	ldr	r2, [pc, #96]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006f18:	4b16      	ldr	r3, [pc, #88]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f1c:	f003 0301 	and.w	r3, r3, #1
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d114      	bne.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f24:	f7fb fd04 	bl	8002930 <HAL_GetTick>
 8006f28:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f2a:	e00a      	b.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f2c:	f7fb fd00 	bl	8002930 <HAL_GetTick>
 8006f30:	4602      	mov	r2, r0
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	1ad3      	subs	r3, r2, r3
 8006f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d901      	bls.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006f3e:	2303      	movs	r3, #3
 8006f40:	e34f      	b.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f42:	4b0c      	ldr	r3, [pc, #48]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f46:	f003 0302 	and.w	r3, r3, #2
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d0ee      	beq.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f5a:	d111      	bne.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006f5c:	4b05      	ldr	r3, [pc, #20]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006f68:	4b04      	ldr	r3, [pc, #16]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006f6a:	400b      	ands	r3, r1
 8006f6c:	4901      	ldr	r1, [pc, #4]	; (8006f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	608b      	str	r3, [r1, #8]
 8006f72:	e00b      	b.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006f74:	40023800 	.word	0x40023800
 8006f78:	40007000 	.word	0x40007000
 8006f7c:	0ffffcff 	.word	0x0ffffcff
 8006f80:	4bb3      	ldr	r3, [pc, #716]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	4ab2      	ldr	r2, [pc, #712]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f86:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006f8a:	6093      	str	r3, [r2, #8]
 8006f8c:	4bb0      	ldr	r3, [pc, #704]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f8e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f98:	49ad      	ldr	r1, [pc, #692]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f003 0310 	and.w	r3, r3, #16
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d010      	beq.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006faa:	4ba9      	ldr	r3, [pc, #676]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006fac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fb0:	4aa7      	ldr	r2, [pc, #668]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006fb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006fb6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006fba:	4ba5      	ldr	r3, [pc, #660]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006fbc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc4:	49a2      	ldr	r1, [pc, #648]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d00a      	beq.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006fd8:	4b9d      	ldr	r3, [pc, #628]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fde:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fe6:	499a      	ldr	r1, [pc, #616]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d00a      	beq.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006ffa:	4b95      	ldr	r3, [pc, #596]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007000:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007008:	4991      	ldr	r1, [pc, #580]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800700a:	4313      	orrs	r3, r2
 800700c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007018:	2b00      	cmp	r3, #0
 800701a:	d00a      	beq.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800701c:	4b8c      	ldr	r3, [pc, #560]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800701e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007022:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800702a:	4989      	ldr	r1, [pc, #548]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800702c:	4313      	orrs	r3, r2
 800702e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800703a:	2b00      	cmp	r3, #0
 800703c:	d00a      	beq.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800703e:	4b84      	ldr	r3, [pc, #528]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007044:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800704c:	4980      	ldr	r1, [pc, #512]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800704e:	4313      	orrs	r3, r2
 8007050:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800705c:	2b00      	cmp	r3, #0
 800705e:	d00a      	beq.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007060:	4b7b      	ldr	r3, [pc, #492]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007066:	f023 0203 	bic.w	r2, r3, #3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800706e:	4978      	ldr	r1, [pc, #480]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007070:	4313      	orrs	r3, r2
 8007072:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800707e:	2b00      	cmp	r3, #0
 8007080:	d00a      	beq.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007082:	4b73      	ldr	r3, [pc, #460]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007088:	f023 020c 	bic.w	r2, r3, #12
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007090:	496f      	ldr	r1, [pc, #444]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007092:	4313      	orrs	r3, r2
 8007094:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d00a      	beq.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80070a4:	4b6a      	ldr	r3, [pc, #424]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070aa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070b2:	4967      	ldr	r1, [pc, #412]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070b4:	4313      	orrs	r3, r2
 80070b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d00a      	beq.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80070c6:	4b62      	ldr	r3, [pc, #392]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070cc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070d4:	495e      	ldr	r1, [pc, #376]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070d6:	4313      	orrs	r3, r2
 80070d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d00a      	beq.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80070e8:	4b59      	ldr	r3, [pc, #356]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070f6:	4956      	ldr	r1, [pc, #344]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070f8:	4313      	orrs	r3, r2
 80070fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007106:	2b00      	cmp	r3, #0
 8007108:	d00a      	beq.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800710a:	4b51      	ldr	r3, [pc, #324]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800710c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007110:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007118:	494d      	ldr	r1, [pc, #308]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800711a:	4313      	orrs	r3, r2
 800711c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007128:	2b00      	cmp	r3, #0
 800712a:	d00a      	beq.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800712c:	4b48      	ldr	r3, [pc, #288]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800712e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007132:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800713a:	4945      	ldr	r1, [pc, #276]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800713c:	4313      	orrs	r3, r2
 800713e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800714a:	2b00      	cmp	r3, #0
 800714c:	d00a      	beq.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800714e:	4b40      	ldr	r3, [pc, #256]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007154:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800715c:	493c      	ldr	r1, [pc, #240]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800715e:	4313      	orrs	r3, r2
 8007160:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800716c:	2b00      	cmp	r3, #0
 800716e:	d00a      	beq.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007170:	4b37      	ldr	r3, [pc, #220]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007176:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800717e:	4934      	ldr	r1, [pc, #208]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007180:	4313      	orrs	r3, r2
 8007182:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800718e:	2b00      	cmp	r3, #0
 8007190:	d011      	beq.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007192:	4b2f      	ldr	r3, [pc, #188]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007198:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071a0:	492b      	ldr	r1, [pc, #172]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80071a2:	4313      	orrs	r3, r2
 80071a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071b0:	d101      	bne.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80071b2:	2301      	movs	r3, #1
 80071b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f003 0308 	and.w	r3, r3, #8
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d001      	beq.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80071c2:	2301      	movs	r3, #1
 80071c4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d00a      	beq.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80071d2:	4b1f      	ldr	r3, [pc, #124]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80071d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071d8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071e0:	491b      	ldr	r1, [pc, #108]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80071e2:	4313      	orrs	r3, r2
 80071e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d00b      	beq.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80071f4:	4b16      	ldr	r3, [pc, #88]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80071f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071fa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007204:	4912      	ldr	r1, [pc, #72]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007206:	4313      	orrs	r3, r2
 8007208:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007214:	2b00      	cmp	r3, #0
 8007216:	d00b      	beq.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8007218:	4b0d      	ldr	r3, [pc, #52]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800721a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800721e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007228:	4909      	ldr	r1, [pc, #36]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800722a:	4313      	orrs	r3, r2
 800722c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007238:	2b00      	cmp	r3, #0
 800723a:	d00f      	beq.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800723c:	4b04      	ldr	r3, [pc, #16]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800723e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007242:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800724c:	e002      	b.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800724e:	bf00      	nop
 8007250:	40023800 	.word	0x40023800
 8007254:	4985      	ldr	r1, [pc, #532]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007256:	4313      	orrs	r3, r2
 8007258:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007264:	2b00      	cmp	r3, #0
 8007266:	d00b      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007268:	4b80      	ldr	r3, [pc, #512]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800726a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800726e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007278:	497c      	ldr	r1, [pc, #496]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800727a:	4313      	orrs	r3, r2
 800727c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	2b01      	cmp	r3, #1
 8007284:	d005      	beq.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800728e:	f040 80d6 	bne.w	800743e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007292:	4b76      	ldr	r3, [pc, #472]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a75      	ldr	r2, [pc, #468]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007298:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800729c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800729e:	f7fb fb47 	bl	8002930 <HAL_GetTick>
 80072a2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80072a4:	e008      	b.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80072a6:	f7fb fb43 	bl	8002930 <HAL_GetTick>
 80072aa:	4602      	mov	r2, r0
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	1ad3      	subs	r3, r2, r3
 80072b0:	2b64      	cmp	r3, #100	; 0x64
 80072b2:	d901      	bls.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80072b4:	2303      	movs	r3, #3
 80072b6:	e194      	b.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80072b8:	4b6c      	ldr	r3, [pc, #432]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d1f0      	bne.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 0301 	and.w	r3, r3, #1
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d021      	beq.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x570>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d11d      	bne.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80072d8:	4b64      	ldr	r3, [pc, #400]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80072da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072de:	0c1b      	lsrs	r3, r3, #16
 80072e0:	f003 0303 	and.w	r3, r3, #3
 80072e4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80072e6:	4b61      	ldr	r3, [pc, #388]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80072e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072ec:	0e1b      	lsrs	r3, r3, #24
 80072ee:	f003 030f 	and.w	r3, r3, #15
 80072f2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	019a      	lsls	r2, r3, #6
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	041b      	lsls	r3, r3, #16
 80072fe:	431a      	orrs	r2, r3
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	061b      	lsls	r3, r3, #24
 8007304:	431a      	orrs	r2, r3
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	071b      	lsls	r3, r3, #28
 800730c:	4957      	ldr	r1, [pc, #348]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800730e:	4313      	orrs	r3, r2
 8007310:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800731c:	2b00      	cmp	r3, #0
 800731e:	d004      	beq.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007324:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007328:	d00a      	beq.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007332:	2b00      	cmp	r3, #0
 8007334:	d02e      	beq.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800733a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800733e:	d129      	bne.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007340:	4b4a      	ldr	r3, [pc, #296]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007342:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007346:	0c1b      	lsrs	r3, r3, #16
 8007348:	f003 0303 	and.w	r3, r3, #3
 800734c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800734e:	4b47      	ldr	r3, [pc, #284]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007350:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007354:	0f1b      	lsrs	r3, r3, #28
 8007356:	f003 0307 	and.w	r3, r3, #7
 800735a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	019a      	lsls	r2, r3, #6
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	041b      	lsls	r3, r3, #16
 8007366:	431a      	orrs	r2, r3
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	68db      	ldr	r3, [r3, #12]
 800736c:	061b      	lsls	r3, r3, #24
 800736e:	431a      	orrs	r2, r3
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	071b      	lsls	r3, r3, #28
 8007374:	493d      	ldr	r1, [pc, #244]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007376:	4313      	orrs	r3, r2
 8007378:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800737c:	4b3b      	ldr	r3, [pc, #236]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800737e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007382:	f023 021f 	bic.w	r2, r3, #31
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738a:	3b01      	subs	r3, #1
 800738c:	4937      	ldr	r1, [pc, #220]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800738e:	4313      	orrs	r3, r2
 8007390:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800739c:	2b00      	cmp	r3, #0
 800739e:	d01d      	beq.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80073a0:	4b32      	ldr	r3, [pc, #200]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80073a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073a6:	0e1b      	lsrs	r3, r3, #24
 80073a8:	f003 030f 	and.w	r3, r3, #15
 80073ac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80073ae:	4b2f      	ldr	r3, [pc, #188]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80073b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073b4:	0f1b      	lsrs	r3, r3, #28
 80073b6:	f003 0307 	and.w	r3, r3, #7
 80073ba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	019a      	lsls	r2, r3, #6
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	691b      	ldr	r3, [r3, #16]
 80073c6:	041b      	lsls	r3, r3, #16
 80073c8:	431a      	orrs	r2, r3
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	061b      	lsls	r3, r3, #24
 80073ce:	431a      	orrs	r2, r3
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	071b      	lsls	r3, r3, #28
 80073d4:	4925      	ldr	r1, [pc, #148]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80073d6:	4313      	orrs	r3, r2
 80073d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d011      	beq.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	019a      	lsls	r2, r3, #6
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	691b      	ldr	r3, [r3, #16]
 80073f2:	041b      	lsls	r3, r3, #16
 80073f4:	431a      	orrs	r2, r3
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	061b      	lsls	r3, r3, #24
 80073fc:	431a      	orrs	r2, r3
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	071b      	lsls	r3, r3, #28
 8007404:	4919      	ldr	r1, [pc, #100]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007406:	4313      	orrs	r3, r2
 8007408:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800740c:	4b17      	ldr	r3, [pc, #92]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a16      	ldr	r2, [pc, #88]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007412:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007416:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007418:	f7fb fa8a 	bl	8002930 <HAL_GetTick>
 800741c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800741e:	e008      	b.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007420:	f7fb fa86 	bl	8002930 <HAL_GetTick>
 8007424:	4602      	mov	r2, r0
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	1ad3      	subs	r3, r2, r3
 800742a:	2b64      	cmp	r3, #100	; 0x64
 800742c:	d901      	bls.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800742e:	2303      	movs	r3, #3
 8007430:	e0d7      	b.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007432:	4b0e      	ldr	r3, [pc, #56]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800743a:	2b00      	cmp	r3, #0
 800743c:	d0f0      	beq.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800743e:	69bb      	ldr	r3, [r7, #24]
 8007440:	2b01      	cmp	r3, #1
 8007442:	f040 80cd 	bne.w	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007446:	4b09      	ldr	r3, [pc, #36]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a08      	ldr	r2, [pc, #32]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800744c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007450:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007452:	f7fb fa6d 	bl	8002930 <HAL_GetTick>
 8007456:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007458:	e00a      	b.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800745a:	f7fb fa69 	bl	8002930 <HAL_GetTick>
 800745e:	4602      	mov	r2, r0
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	1ad3      	subs	r3, r2, r3
 8007464:	2b64      	cmp	r3, #100	; 0x64
 8007466:	d903      	bls.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007468:	2303      	movs	r3, #3
 800746a:	e0ba      	b.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 800746c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007470:	4b5e      	ldr	r3, [pc, #376]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007478:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800747c:	d0ed      	beq.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007486:	2b00      	cmp	r3, #0
 8007488:	d003      	beq.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800748e:	2b00      	cmp	r3, #0
 8007490:	d009      	beq.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800749a:	2b00      	cmp	r3, #0
 800749c:	d02e      	beq.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d12a      	bne.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80074a6:	4b51      	ldr	r3, [pc, #324]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80074a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074ac:	0c1b      	lsrs	r3, r3, #16
 80074ae:	f003 0303 	and.w	r3, r3, #3
 80074b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80074b4:	4b4d      	ldr	r3, [pc, #308]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80074b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074ba:	0f1b      	lsrs	r3, r3, #28
 80074bc:	f003 0307 	and.w	r3, r3, #7
 80074c0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	695b      	ldr	r3, [r3, #20]
 80074c6:	019a      	lsls	r2, r3, #6
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	041b      	lsls	r3, r3, #16
 80074cc:	431a      	orrs	r2, r3
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	699b      	ldr	r3, [r3, #24]
 80074d2:	061b      	lsls	r3, r3, #24
 80074d4:	431a      	orrs	r2, r3
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	071b      	lsls	r3, r3, #28
 80074da:	4944      	ldr	r1, [pc, #272]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80074dc:	4313      	orrs	r3, r2
 80074de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80074e2:	4b42      	ldr	r3, [pc, #264]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80074e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074e8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f0:	3b01      	subs	r3, #1
 80074f2:	021b      	lsls	r3, r3, #8
 80074f4:	493d      	ldr	r1, [pc, #244]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80074f6:	4313      	orrs	r3, r2
 80074f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007504:	2b00      	cmp	r3, #0
 8007506:	d022      	beq.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800750c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007510:	d11d      	bne.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007512:	4b36      	ldr	r3, [pc, #216]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007518:	0e1b      	lsrs	r3, r3, #24
 800751a:	f003 030f 	and.w	r3, r3, #15
 800751e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007520:	4b32      	ldr	r3, [pc, #200]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007526:	0f1b      	lsrs	r3, r3, #28
 8007528:	f003 0307 	and.w	r3, r3, #7
 800752c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	695b      	ldr	r3, [r3, #20]
 8007532:	019a      	lsls	r2, r3, #6
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6a1b      	ldr	r3, [r3, #32]
 8007538:	041b      	lsls	r3, r3, #16
 800753a:	431a      	orrs	r2, r3
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	061b      	lsls	r3, r3, #24
 8007540:	431a      	orrs	r2, r3
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	071b      	lsls	r3, r3, #28
 8007546:	4929      	ldr	r1, [pc, #164]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007548:	4313      	orrs	r3, r2
 800754a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f003 0308 	and.w	r3, r3, #8
 8007556:	2b00      	cmp	r3, #0
 8007558:	d028      	beq.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800755a:	4b24      	ldr	r3, [pc, #144]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800755c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007560:	0e1b      	lsrs	r3, r3, #24
 8007562:	f003 030f 	and.w	r3, r3, #15
 8007566:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007568:	4b20      	ldr	r3, [pc, #128]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800756a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800756e:	0c1b      	lsrs	r3, r3, #16
 8007570:	f003 0303 	and.w	r3, r3, #3
 8007574:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	695b      	ldr	r3, [r3, #20]
 800757a:	019a      	lsls	r2, r3, #6
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	041b      	lsls	r3, r3, #16
 8007580:	431a      	orrs	r2, r3
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	061b      	lsls	r3, r3, #24
 8007586:	431a      	orrs	r2, r3
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	69db      	ldr	r3, [r3, #28]
 800758c:	071b      	lsls	r3, r3, #28
 800758e:	4917      	ldr	r1, [pc, #92]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007590:	4313      	orrs	r3, r2
 8007592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007596:	4b15      	ldr	r3, [pc, #84]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007598:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800759c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a4:	4911      	ldr	r1, [pc, #68]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80075a6:	4313      	orrs	r3, r2
 80075a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80075ac:	4b0f      	ldr	r3, [pc, #60]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a0e      	ldr	r2, [pc, #56]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80075b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075b8:	f7fb f9ba 	bl	8002930 <HAL_GetTick>
 80075bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80075be:	e008      	b.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80075c0:	f7fb f9b6 	bl	8002930 <HAL_GetTick>
 80075c4:	4602      	mov	r2, r0
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	1ad3      	subs	r3, r2, r3
 80075ca:	2b64      	cmp	r3, #100	; 0x64
 80075cc:	d901      	bls.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80075ce:	2303      	movs	r3, #3
 80075d0:	e007      	b.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80075d2:	4b06      	ldr	r3, [pc, #24]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075de:	d1ef      	bne.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80075e0:	2300      	movs	r3, #0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3720      	adds	r7, #32
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop
 80075ec:	40023800 	.word	0x40023800

080075f0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b082      	sub	sp, #8
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d101      	bne.n	8007602 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80075fe:	2301      	movs	r3, #1
 8007600:	e01d      	b.n	800763e <HAL_SD_Init+0x4e>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007608:	b2db      	uxtb	r3, r3
 800760a:	2b00      	cmp	r3, #0
 800760c:	d105      	bne.n	800761a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2200      	movs	r2, #0
 8007612:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f007 f895 	bl	800e744 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2203      	movs	r2, #3
 800761e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 f80f 	bl	8007646 <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2200      	movs	r2, #0
 800762c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800763c:	2300      	movs	r3, #0
}
 800763e:	4618      	mov	r0, r3
 8007640:	3708      	adds	r7, #8
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}

08007646 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007646:	b5b0      	push	{r4, r5, r7, lr}
 8007648:	b08e      	sub	sp, #56	; 0x38
 800764a:	af04      	add	r7, sp, #16
 800764c:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800764e:	2300      	movs	r3, #0
 8007650:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007652:	2300      	movs	r3, #0
 8007654:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8007656:	2300      	movs	r3, #0
 8007658:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800765a:	2300      	movs	r3, #0
 800765c:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800765e:	2300      	movs	r3, #0
 8007660:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007662:	2300      	movs	r3, #0
 8007664:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8007666:	2376      	movs	r3, #118	; 0x76
 8007668:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681d      	ldr	r5, [r3, #0]
 800766e:	466c      	mov	r4, sp
 8007670:	f107 0318 	add.w	r3, r7, #24
 8007674:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007678:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800767c:	f107 030c 	add.w	r3, r7, #12
 8007680:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007682:	4628      	mov	r0, r5
 8007684:	f001 fd90 	bl	80091a8 <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd); 
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	685a      	ldr	r2, [r3, #4]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007696:	605a      	str	r2, [r3, #4]
  
  /* Set Power State to ON */
  SDMMC_PowerState_ON(hsd->Instance);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4618      	mov	r0, r3
 800769e:	f001 fdcd 	bl	800923c <SDMMC_PowerState_ON>
  
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	685a      	ldr	r2, [r3, #4]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076b0:	605a      	str	r2, [r3, #4]
  
  /* Required power up waiting time before starting the SD initialization sequence */
  HAL_Delay(2);
 80076b2:	2002      	movs	r0, #2
 80076b4:	f7fb f948 	bl	8002948 <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 fee3 	bl	8008484 <SD_PowerON>
 80076be:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80076c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d00b      	beq.n	80076de <HAL_SD_InitCard+0x98>
  {
    hsd->State = HAL_SD_STATE_READY;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2201      	movs	r2, #1
 80076ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d4:	431a      	orrs	r2, r3
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	e013      	b.n	8007706 <HAL_SD_InitCard+0xc0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 fe07 	bl	80082f2 <SD_InitCard>
 80076e4:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80076e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d00b      	beq.n	8007704 <HAL_SD_InitCard+0xbe>
  {
    hsd->State = HAL_SD_STATE_READY;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fa:	431a      	orrs	r2, r3
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	e000      	b.n	8007706 <HAL_SD_InitCard+0xc0>
  }

  return HAL_OK;
 8007704:	2300      	movs	r3, #0
}
 8007706:	4618      	mov	r0, r3
 8007708:	3728      	adds	r7, #40	; 0x28
 800770a:	46bd      	mov	sp, r7
 800770c:	bdb0      	pop	{r4, r5, r7, pc}

0800770e <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800770e:	b590      	push	{r4, r7, lr}
 8007710:	b08f      	sub	sp, #60	; 0x3c
 8007712:	af00      	add	r7, sp, #0
 8007714:	60f8      	str	r0, [r7, #12]
 8007716:	60b9      	str	r1, [r7, #8]
 8007718:	607a      	str	r2, [r7, #4]
 800771a:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800771c:	2300      	movs	r3, #0
 800771e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 8007720:	f7fb f906 	bl	8002930 <HAL_GetTick>
 8007724:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0, *tempbuff = (uint32_t *)pData;
 8007726:	2300      	movs	r3, #0
 8007728:	633b      	str	r3, [r7, #48]	; 0x30
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d107      	bne.n	8007744 <HAL_SD_ReadBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007738:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	e176      	b.n	8007a32 <HAL_SD_ReadBlocks+0x324>
  }
 
  if(hsd->State == HAL_SD_STATE_READY)
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800774a:	b2db      	uxtb	r3, r3
 800774c:	2b01      	cmp	r3, #1
 800774e:	f040 8169 	bne.w	8007a24 <HAL_SD_ReadBlocks+0x316>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2200      	movs	r2, #0
 8007756:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	441a      	add	r2, r3
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007762:	429a      	cmp	r2, r3
 8007764:	d907      	bls.n	8007776 <HAL_SD_ReadBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800776a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007772:	2301      	movs	r3, #1
 8007774:	e15d      	b.n	8007a32 <HAL_SD_ReadBlocks+0x324>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2203      	movs	r2, #3
 800777a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	2200      	movs	r2, #0
 8007784:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800778a:	2b01      	cmp	r3, #1
 800778c:	d002      	beq.n	8007794 <HAL_SD_ReadBlocks+0x86>
    {
      BlockAdd *= 512;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	025b      	lsls	r3, r3, #9
 8007792:	607b      	str	r3, [r7, #4]
    }
      
    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f44f 7100 	mov.w	r1, #512	; 0x200
 800779c:	4618      	mov	r0, r3
 800779e:	f001 fde1 	bl	8009364 <SDMMC_CmdBlockLength>
 80077a2:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 80077a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d010      	beq.n	80077cc <HAL_SD_ReadBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);      
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80077b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077ba:	431a      	orrs	r2, r3
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2201      	movs	r2, #1
 80077c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80077c8:	2301      	movs	r3, #1
 80077ca:	e132      	b.n	8007a32 <HAL_SD_ReadBlocks+0x324>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80077cc:	f04f 33ff 	mov.w	r3, #4294967295
 80077d0:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	025b      	lsls	r3, r3, #9
 80077d6:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80077d8:	2390      	movs	r3, #144	; 0x90
 80077da:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80077dc:	2302      	movs	r3, #2
 80077de:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80077e0:	2300      	movs	r3, #0
 80077e2:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 80077e4:	2301      	movs	r3, #1
 80077e6:	627b      	str	r3, [r7, #36]	; 0x24
    SDMMC_ConfigData(hsd->Instance, &config);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f107 0210 	add.w	r2, r7, #16
 80077f0:	4611      	mov	r1, r2
 80077f2:	4618      	mov	r0, r3
 80077f4:	f001 fd8a 	bl	800930c <SDMMC_ConfigData>
    
    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1)
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d90a      	bls.n	8007814 <HAL_SD_ReadBlocks+0x106>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2202      	movs	r2, #2
 8007802:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	6879      	ldr	r1, [r7, #4]
 800780a:	4618      	mov	r0, r3
 800780c:	f001 fdf2 	bl	80093f4 <SDMMC_CmdReadMultiBlock>
 8007810:	6378      	str	r0, [r7, #52]	; 0x34
 8007812:	e009      	b.n	8007828 <HAL_SD_ReadBlocks+0x11a>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2201      	movs	r2, #1
 8007818:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	6879      	ldr	r1, [r7, #4]
 8007820:	4618      	mov	r0, r3
 8007822:	f001 fdc3 	bl	80093ac <SDMMC_CmdReadSingleBlock>
 8007826:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800782a:	2b00      	cmp	r3, #0
 800782c:	d04a      	beq.n	80078c4 <HAL_SD_ReadBlocks+0x1b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007836:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800783c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800783e:	431a      	orrs	r2, r3
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2201      	movs	r2, #1
 8007848:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800784c:	2301      	movs	r3, #1
 800784e:	e0f0      	b.n	8007a32 <HAL_SD_ReadBlocks+0x324>
    }
      
    /* Poll on SDMMC flags */
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007856:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800785a:	2b00      	cmp	r3, #0
 800785c:	d016      	beq.n	800788c <HAL_SD_ReadBlocks+0x17e>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800785e:	2300      	movs	r3, #0
 8007860:	633b      	str	r3, [r7, #48]	; 0x30
 8007862:	e00d      	b.n	8007880 <HAL_SD_ReadBlocks+0x172>
        {
          *(tempbuff + count) = SDMMC_ReadFIFO(hsd->Instance);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	6819      	ldr	r1, [r3, #0]
 8007868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800786a:	009b      	lsls	r3, r3, #2
 800786c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800786e:	18d4      	adds	r4, r2, r3
 8007870:	4608      	mov	r0, r1
 8007872:	f001 fcc5 	bl	8009200 <SDMMC_ReadFIFO>
 8007876:	4603      	mov	r3, r0
 8007878:	6023      	str	r3, [r4, #0]
        for(count = 0U; count < 8U; count++)
 800787a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800787c:	3301      	adds	r3, #1
 800787e:	633b      	str	r3, [r7, #48]	; 0x30
 8007880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007882:	2b07      	cmp	r3, #7
 8007884:	d9ee      	bls.n	8007864 <HAL_SD_ReadBlocks+0x156>
        }
        tempbuff += 8U;
 8007886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007888:	3320      	adds	r3, #32
 800788a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 800788c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800788e:	2b00      	cmp	r3, #0
 8007890:	d007      	beq.n	80078a2 <HAL_SD_ReadBlocks+0x194>
 8007892:	f7fb f84d 	bl	8002930 <HAL_GetTick>
 8007896:	4602      	mov	r2, r0
 8007898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800789a:	1ad3      	subs	r3, r2, r3
 800789c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800789e:	429a      	cmp	r2, r3
 80078a0:	d810      	bhi.n	80078c4 <HAL_SD_ReadBlocks+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80078aa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2201      	movs	r2, #1
 80078bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 80078c0:	2303      	movs	r3, #3
 80078c2:	e0b6      	b.n	8007a32 <HAL_SD_ReadBlocks+0x324>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078ca:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d0be      	beq.n	8007850 <HAL_SD_ReadBlocks+0x142>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d020      	beq.n	8007922 <HAL_SD_ReadBlocks+0x214>
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	2b01      	cmp	r3, #1
 80078e4:	d91d      	bls.n	8007922 <HAL_SD_ReadBlocks+0x214>
    {    
      if(hsd->SdCard.CardType != CARD_SECURED)
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ea:	2b03      	cmp	r3, #3
 80078ec:	d019      	beq.n	8007922 <HAL_SD_ReadBlocks+0x214>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4618      	mov	r0, r3
 80078f4:	f001 fdea 	bl	80094cc <SDMMC_CmdStopTransfer>
 80078f8:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 80078fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d010      	beq.n	8007922 <HAL_SD_ReadBlocks+0x214>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007908:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800790e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007910:	431a      	orrs	r2, r3
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2201      	movs	r2, #1
 800791a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 800791e:	2301      	movs	r3, #1
 8007920:	e087      	b.n	8007a32 <HAL_SD_ReadBlocks+0x324>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007928:	f003 0308 	and.w	r3, r3, #8
 800792c:	2b00      	cmp	r3, #0
 800792e:	d010      	beq.n	8007952 <HAL_SD_ReadBlocks+0x244>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007938:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800793e:	f043 0208 	orr.w	r2, r3, #8
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2201      	movs	r2, #1
 800794a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	e06f      	b.n	8007a32 <HAL_SD_ReadBlocks+0x324>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007958:	f003 0302 	and.w	r3, r3, #2
 800795c:	2b00      	cmp	r3, #0
 800795e:	d010      	beq.n	8007982 <HAL_SD_ReadBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007968:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800796e:	f043 0202 	orr.w	r2, r3, #2
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2201      	movs	r2, #1
 800797a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800797e:	2301      	movs	r3, #1
 8007980:	e057      	b.n	8007a32 <HAL_SD_ReadBlocks+0x324>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007988:	f003 0320 	and.w	r3, r3, #32
 800798c:	2b00      	cmp	r3, #0
 800798e:	d037      	beq.n	8007a00 <HAL_SD_ReadBlocks+0x2f2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007998:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800799e:	f043 0220 	orr.w	r2, r3, #32
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2201      	movs	r2, #1
 80079aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	e03f      	b.n	8007a32 <HAL_SD_ReadBlocks+0x324>
    }
    
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
    {
      *tempbuff = SDMMC_ReadFIFO(hsd->Instance);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4618      	mov	r0, r3
 80079b8:	f001 fc22 	bl	8009200 <SDMMC_ReadFIFO>
 80079bc:	4602      	mov	r2, r0
 80079be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c0:	601a      	str	r2, [r3, #0]
      tempbuff++;
 80079c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c4:	3304      	adds	r3, #4
 80079c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 80079c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d007      	beq.n	80079de <HAL_SD_ReadBlocks+0x2d0>
 80079ce:	f7fa ffaf 	bl	8002930 <HAL_GetTick>
 80079d2:	4602      	mov	r2, r0
 80079d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d6:	1ad3      	subs	r3, r2, r3
 80079d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079da:	429a      	cmp	r2, r3
 80079dc:	d810      	bhi.n	8007a00 <HAL_SD_ReadBlocks+0x2f2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);        
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80079e6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2201      	movs	r2, #1
 80079f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 80079fc:	2301      	movs	r3, #1
 80079fe:	e018      	b.n	8007a32 <HAL_SD_ReadBlocks+0x324>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d1d1      	bne.n	80079b2 <HAL_SD_ReadBlocks+0x2a4>
      }
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007a16:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 8007a20:	2300      	movs	r3, #0
 8007a22:	e006      	b.n	8007a32 <HAL_SD_ReadBlocks+0x324>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a28:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007a30:	2301      	movs	r3, #1
  }
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	373c      	adds	r7, #60	; 0x3c
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd90      	pop	{r4, r7, pc}

08007a3a <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007a3a:	b580      	push	{r7, lr}
 8007a3c:	b08e      	sub	sp, #56	; 0x38
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	60f8      	str	r0, [r7, #12]
 8007a42:	60b9      	str	r1, [r7, #8]
 8007a44:	607a      	str	r2, [r7, #4]
 8007a46:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 8007a4c:	f7fa ff70 	bl	8002930 <HAL_GetTick>
 8007a50:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0;
 8007a52:	2300      	movs	r3, #0
 8007a54:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t *tempbuff = (uint32_t *)pData;
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d107      	bne.n	8007a70 <HAL_SD_WriteBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a64:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	e147      	b.n	8007d00 <HAL_SD_WriteBlocks+0x2c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	f040 813a 	bne.w	8007cf2 <HAL_SD_WriteBlocks+0x2b8>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2200      	movs	r2, #0
 8007a82:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	441a      	add	r2, r3
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d907      	bls.n	8007aa2 <HAL_SD_WriteBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a96:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e12e      	b.n	8007d00 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2203      	movs	r2, #3
 8007aa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	62da      	str	r2, [r3, #44]	; 0x2c
     
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d002      	beq.n	8007ac0 <HAL_SD_WriteBlocks+0x86>
    {
      BlockAdd *= 512;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	025b      	lsls	r3, r3, #9
 8007abe:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f001 fc4b 	bl	8009364 <SDMMC_CmdBlockLength>
 8007ace:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d010      	beq.n	8007af8 <HAL_SD_WriteBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007ade:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ae6:	431a      	orrs	r2, r3
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007af4:	2301      	movs	r3, #1
 8007af6:	e103      	b.n	8007d00 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d90a      	bls.n	8007b14 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2220      	movs	r2, #32
 8007b02:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	6879      	ldr	r1, [r7, #4]
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f001 fcba 	bl	8009484 <SDMMC_CmdWriteMultiBlock>
 8007b10:	6378      	str	r0, [r7, #52]	; 0x34
 8007b12:	e009      	b.n	8007b28 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2210      	movs	r2, #16
 8007b18:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	6879      	ldr	r1, [r7, #4]
 8007b20:	4618      	mov	r0, r3
 8007b22:	f001 fc8b 	bl	800943c <SDMMC_CmdWriteSingleBlock>
 8007b26:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d010      	beq.n	8007b50 <HAL_SD_WriteBlocks+0x116>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007b36:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b3e:	431a      	orrs	r2, r3
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2201      	movs	r2, #1
 8007b48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e0d7      	b.n	8007d00 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007b50:	f04f 33ff 	mov.w	r3, #4294967295
 8007b54:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	025b      	lsls	r3, r3, #9
 8007b5a:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007b5c:	2390      	movs	r3, #144	; 0x90
 8007b5e:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007b60:	2300      	movs	r3, #0
 8007b62:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007b64:	2300      	movs	r3, #0
 8007b66:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8007b68:	2301      	movs	r3, #1
 8007b6a:	627b      	str	r3, [r7, #36]	; 0x24
    SDMMC_ConfigData(hsd->Instance, &config);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f107 0210 	add.w	r2, r7, #16
 8007b74:	4611      	mov	r1, r2
 8007b76:	4618      	mov	r0, r3
 8007b78:	f001 fbc8 	bl	800930c <SDMMC_ConfigData>
    
    /* Write block(s) in polling mode */
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007b7c:	e037      	b.n	8007bee <HAL_SD_WriteBlocks+0x1b4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE))
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d014      	beq.n	8007bb6 <HAL_SD_WriteBlocks+0x17c>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	633b      	str	r3, [r7, #48]	; 0x30
 8007b90:	e00b      	b.n	8007baa <HAL_SD_WriteBlocks+0x170>
        {
          SDMMC_WriteFIFO(hsd->Instance, (tempbuff + count));
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	6818      	ldr	r0, [r3, #0]
 8007b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b98:	009b      	lsls	r3, r3, #2
 8007b9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b9c:	4413      	add	r3, r2
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	f001 fb3b 	bl	800921a <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8007ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba6:	3301      	adds	r3, #1
 8007ba8:	633b      	str	r3, [r7, #48]	; 0x30
 8007baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bac:	2b07      	cmp	r3, #7
 8007bae:	d9f0      	bls.n	8007b92 <HAL_SD_WriteBlocks+0x158>
        }
        tempbuff += 8U;
 8007bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb2:	3320      	adds	r3, #32
 8007bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8007bb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d007      	beq.n	8007bcc <HAL_SD_WriteBlocks+0x192>
 8007bbc:	f7fa feb8 	bl	8002930 <HAL_GetTick>
 8007bc0:	4602      	mov	r2, r0
 8007bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc4:	1ad3      	subs	r3, r2, r3
 8007bc6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d810      	bhi.n	8007bee <HAL_SD_WriteBlocks+0x1b4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007bd4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bdc:	431a      	orrs	r2, r3
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2201      	movs	r2, #1
 8007be6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 8007bea:	2303      	movs	r3, #3
 8007bec:	e088      	b.n	8007d00 <HAL_SD_WriteBlocks+0x2c6>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bf4:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d0c0      	beq.n	8007b7e <HAL_SD_WriteBlocks+0x144>
      }
    }
    
    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d020      	beq.n	8007c4c <HAL_SD_WriteBlocks+0x212>
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d91d      	bls.n	8007c4c <HAL_SD_WriteBlocks+0x212>
    { 
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c14:	2b03      	cmp	r3, #3
 8007c16:	d019      	beq.n	8007c4c <HAL_SD_WriteBlocks+0x212>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f001 fc55 	bl	80094cc <SDMMC_CmdStopTransfer>
 8007c22:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 8007c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d010      	beq.n	8007c4c <HAL_SD_WriteBlocks+0x212>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007c32:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c3a:	431a      	orrs	r2, r3
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2201      	movs	r2, #1
 8007c44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	e059      	b.n	8007d00 <HAL_SD_WriteBlocks+0x2c6>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c52:	f003 0308 	and.w	r3, r3, #8
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d010      	beq.n	8007c7c <HAL_SD_WriteBlocks+0x242>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007c62:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c68:	f043 0208 	orr.w	r2, r3, #8
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	e041      	b.n	8007d00 <HAL_SD_WriteBlocks+0x2c6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c82:	f003 0302 	and.w	r3, r3, #2
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d010      	beq.n	8007cac <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007c92:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c98:	f043 0202 	orr.w	r2, r3, #2
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	e029      	b.n	8007d00 <HAL_SD_WriteBlocks+0x2c6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cb2:	f003 0310 	and.w	r3, r3, #16
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d010      	beq.n	8007cdc <HAL_SD_WriteBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007cc2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc8:	f043 0210 	orr.w	r2, r3, #16
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	e011      	b.n	8007d00 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007ce4:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2201      	movs	r2, #1
 8007cea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	e006      	b.n	8007d00 <HAL_SD_WriteBlocks+0x2c6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
  }
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3738      	adds	r7, #56	; 0x38
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b085      	sub	sp, #20
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0;
 8007d12:	2300      	movs	r3, #0
 8007d14:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d1a:	0e1b      	lsrs	r3, r3, #24
 8007d1c:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	099b      	lsrs	r3, r3, #6
 8007d22:	b2db      	uxtb	r3, r3
 8007d24:	f003 0303 	and.w	r3, r3, #3
 8007d28:	b2da      	uxtb	r2, r3
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	089b      	lsrs	r3, r3, #2
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	f003 030f 	and.w	r3, r3, #15
 8007d38:	b2da      	uxtb	r2, r3
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	f003 0303 	and.w	r3, r3, #3
 8007d46:	b2da      	uxtb	r2, r3
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0] & 0x00FF0000) >> 16;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d50:	0c1b      	lsrs	r3, r3, #16
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	b2da      	uxtb	r2, r3
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0] & 0x0000FF00) >> 8;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d62:	0a1b      	lsrs	r3, r3, #8
 8007d64:	b2db      	uxtb	r3, r3
 8007d66:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	b2da      	uxtb	r2, r3
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0] & 0x000000FF;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d74:	b2db      	uxtb	r3, r3
 8007d76:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	b2da      	uxtb	r2, r3
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d84:	0e1b      	lsrs	r3, r3, #24
 8007d86:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	011b      	lsls	r3, r3, #4
 8007d8e:	b29a      	uxth	r2, r3
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1] & 0x00FF0000U) >> 16;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d98:	0c1b      	lsrs	r3, r3, #16
 8007d9a:	b2db      	uxtb	r3, r3
 8007d9c:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	88db      	ldrh	r3, [r3, #6]
 8007da2:	b29a      	uxth	r2, r3
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	091b      	lsrs	r3, r3, #4
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	f003 030f 	and.w	r3, r3, #15
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	4313      	orrs	r3, r2
 8007db2:	b29a      	uxth	r2, r3
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	f003 030f 	and.w	r3, r3, #15
 8007dc0:	b2da      	uxtb	r2, r3
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007dca:	0a1b      	lsrs	r3, r3, #8
 8007dcc:	b2db      	uxtb	r3, r3
 8007dce:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	09db      	lsrs	r3, r3, #7
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	f003 0301 	and.w	r3, r3, #1
 8007dda:	b2da      	uxtb	r2, r3
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	099b      	lsrs	r3, r3, #6
 8007de4:	b2db      	uxtb	r3, r3
 8007de6:	f003 0301 	and.w	r3, r3, #1
 8007dea:	b2da      	uxtb	r2, r3
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	095b      	lsrs	r3, r3, #5
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	f003 0301 	and.w	r3, r3, #1
 8007dfa:	b2da      	uxtb	r2, r3
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	091b      	lsrs	r3, r3, #4
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	f003 0301 	and.w	r3, r3, #1
 8007e0a:	b2da      	uxtb	r2, r3
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	2200      	movs	r2, #0
 8007e14:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	f040 8086 	bne.w	8007f2c <HAL_SD_GetCardCSD+0x224>
  {
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	029b      	lsls	r3, r3, #10
 8007e24:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2;
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	691a      	ldr	r2, [r3, #16]
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	009b      	lsls	r3, r3, #2
 8007e3c:	431a      	orrs	r2, r3
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e46:	0e1b      	lsrs	r3, r3, #24
 8007e48:	b2db      	uxtb	r3, r3
 8007e4a:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	691a      	ldr	r2, [r3, #16]
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	099b      	lsrs	r3, r3, #6
 8007e54:	f003 0303 	and.w	r3, r3, #3
 8007e58:	431a      	orrs	r2, r3
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	08db      	lsrs	r3, r3, #3
 8007e62:	b2db      	uxtb	r3, r3
 8007e64:	f003 0307 	and.w	r3, r3, #7
 8007e68:	b2da      	uxtb	r2, r3
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	f003 0307 	and.w	r3, r3, #7
 8007e76:	b2da      	uxtb	r2, r3
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e80:	0c1b      	lsrs	r3, r3, #16
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	095b      	lsrs	r3, r3, #5
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	f003 0307 	and.w	r3, r3, #7
 8007e90:	b2da      	uxtb	r2, r3
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	089b      	lsrs	r3, r3, #2
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	f003 0307 	and.w	r3, r3, #7
 8007ea0:	b2da      	uxtb	r2, r3
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	005b      	lsls	r3, r3, #1
 8007eac:	b2db      	uxtb	r3, r3
 8007eae:	f003 0306 	and.w	r3, r3, #6
 8007eb2:	b2da      	uxtb	r2, r3
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ebc:	0a1b      	lsrs	r3, r3, #8
 8007ebe:	b2db      	uxtb	r3, r3
 8007ec0:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	7e1b      	ldrb	r3, [r3, #24]
 8007ec6:	b2da      	uxtb	r2, r3
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	09db      	lsrs	r3, r3, #7
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	f003 0301 	and.w	r3, r3, #1
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	b2da      	uxtb	r2, r3
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	691b      	ldr	r3, [r3, #16]
 8007ee0:	1c5a      	adds	r2, r3, #1
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	7e1b      	ldrb	r3, [r3, #24]
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	3302      	adds	r3, #2
 8007eee:	2201      	movs	r2, #1
 8007ef0:	409a      	lsls	r2, r3
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ef6:	fb02 f203 	mul.w	r2, r2, r3
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	7a1b      	ldrb	r3, [r3, #8]
 8007f02:	b2db      	uxtb	r3, r3
 8007f04:	461a      	mov	r2, r3
 8007f06:	2301      	movs	r3, #1
 8007f08:	4093      	lsls	r3, r2
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f14:	687a      	ldr	r2, [r7, #4]
 8007f16:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007f18:	0a52      	lsrs	r2, r2, #9
 8007f1a:	fb02 f203 	mul.w	r2, r2, r3
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f28:	661a      	str	r2, [r3, #96]	; 0x60
 8007f2a:	e04d      	b.n	8007fc8 <HAL_SD_GetCardCSD+0x2c0>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d138      	bne.n	8007fa6 <HAL_SD_GetCardCSD+0x29e>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f38:	b2db      	uxtb	r3, r3
 8007f3a:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	041b      	lsls	r3, r3, #16
 8007f40:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f4c:	0e1b      	lsrs	r3, r3, #24
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8);
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	691a      	ldr	r2, [r3, #16]
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	021b      	lsls	r3, r3, #8
 8007f5a:	431a      	orrs	r2, r3
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f64:	0c1b      	lsrs	r3, r3, #16
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	691a      	ldr	r2, [r3, #16]
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	431a      	orrs	r2, r3
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f7a:	0a1b      	lsrs	r3, r3, #8
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	691b      	ldr	r3, [r3, #16]
 8007f84:	3301      	adds	r3, #1
 8007f86:	029a      	lsls	r2, r3, #10
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	655a      	str	r2, [r3, #84]	; 0x54
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f9a:	659a      	str	r2, [r3, #88]	; 0x58
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	661a      	str	r2, [r3, #96]	; 0x60
 8007fa4:	e010      	b.n	8007fc8 <HAL_SD_GetCardCSD+0x2c0>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007fae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fb4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	e0c1      	b.n	800814c <HAL_SD_GetCardCSD+0x444>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	099b      	lsrs	r3, r3, #6
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	f003 0301 	and.w	r3, r3, #1
 8007fd2:	b2da      	uxtb	r2, r3
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	005b      	lsls	r3, r3, #1
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8007fe4:	b2da      	uxtb	r2, r3
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	7e9b      	ldrb	r3, [r3, #26]
 8007ff6:	b2da      	uxtb	r2, r3
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	09db      	lsrs	r3, r3, #7
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	f003 0301 	and.w	r3, r3, #1
 8008002:	b2db      	uxtb	r3, r3
 8008004:	4313      	orrs	r3, r2
 8008006:	b2da      	uxtb	r2, r3
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	b2db      	uxtb	r3, r3
 8008010:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008014:	b2da      	uxtb	r2, r3
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800801e:	0e1b      	lsrs	r3, r3, #24
 8008020:	b2db      	uxtb	r3, r3
 8008022:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	09db      	lsrs	r3, r3, #7
 8008028:	b2db      	uxtb	r3, r3
 800802a:	f003 0301 	and.w	r3, r3, #1
 800802e:	b2da      	uxtb	r2, r3
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	095b      	lsrs	r3, r3, #5
 8008038:	b2db      	uxtb	r3, r3
 800803a:	f003 0303 	and.w	r3, r3, #3
 800803e:	b2da      	uxtb	r2, r3
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	089b      	lsrs	r3, r3, #2
 8008048:	b2db      	uxtb	r3, r3
 800804a:	f003 0307 	and.w	r3, r3, #7
 800804e:	b2da      	uxtb	r2, r3
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	b2db      	uxtb	r3, r3
 8008058:	009b      	lsls	r3, r3, #2
 800805a:	b2db      	uxtb	r3, r3
 800805c:	f003 030c 	and.w	r3, r3, #12
 8008060:	b2da      	uxtb	r2, r3
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x00FF0000) >> 16);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800806a:	0c1b      	lsrs	r3, r3, #16
 800806c:	b2db      	uxtb	r3, r3
 800806e:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	7fdb      	ldrb	r3, [r3, #31]
 8008074:	b2da      	uxtb	r2, r3
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	099b      	lsrs	r3, r3, #6
 800807a:	b2db      	uxtb	r3, r3
 800807c:	f003 0303 	and.w	r3, r3, #3
 8008080:	b2db      	uxtb	r3, r3
 8008082:	4313      	orrs	r3, r2
 8008084:	b2da      	uxtb	r2, r3
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	095b      	lsrs	r3, r3, #5
 800808e:	b2db      	uxtb	r3, r3
 8008090:	f003 0301 	and.w	r3, r3, #1
 8008094:	b2da      	uxtb	r2, r3
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0;
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	2200      	movs	r2, #0
 80080a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	f003 0301 	and.w	r3, r3, #1
 80080ac:	b2da      	uxtb	r2, r3
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x0000FF00) >> 8);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080b8:	0a1b      	lsrs	r3, r3, #8
 80080ba:	b2db      	uxtb	r3, r3
 80080bc:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	09db      	lsrs	r3, r3, #7
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	f003 0301 	and.w	r3, r3, #1
 80080c8:	b2da      	uxtb	r2, r3
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	099b      	lsrs	r3, r3, #6
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	f003 0301 	and.w	r3, r3, #1
 80080da:	b2da      	uxtb	r2, r3
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	095b      	lsrs	r3, r3, #5
 80080e6:	b2db      	uxtb	r3, r3
 80080e8:	f003 0301 	and.w	r3, r3, #1
 80080ec:	b2da      	uxtb	r2, r3
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	091b      	lsrs	r3, r3, #4
 80080f8:	b2db      	uxtb	r3, r3
 80080fa:	f003 0301 	and.w	r3, r3, #1
 80080fe:	b2da      	uxtb	r2, r3
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	089b      	lsrs	r3, r3, #2
 800810a:	b2db      	uxtb	r3, r3
 800810c:	f003 0303 	and.w	r3, r3, #3
 8008110:	b2da      	uxtb	r2, r3
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	b2db      	uxtb	r3, r3
 800811c:	f003 0303 	and.w	r3, r3, #3
 8008120:	b2da      	uxtb	r2, r3
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3] & 0x000000FF);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800812c:	b2db      	uxtb	r3, r3
 800812e:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	085b      	lsrs	r3, r3, #1
 8008134:	b2db      	uxtb	r3, r3
 8008136:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800813a:	b2da      	uxtb	r2, r3
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	2201      	movs	r2, #1
 8008146:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 800814a:	2300      	movs	r3, #0
}
 800814c:	4618      	mov	r0, r3
 800814e:	3714      	adds	r7, #20
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr

08008158 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008158:	b480      	push	{r7}
 800815a:	b083      	sub	sp, #12
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 80081a2:	2300      	movs	r3, #0
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	370c      	adds	r7, #12
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr

080081b0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80081b0:	b5b0      	push	{r4, r5, r7, lr}
 80081b2:	b08e      	sub	sp, #56	; 0x38
 80081b4:	af04      	add	r7, sp, #16
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80081ba:	2300      	movs	r3, #0
 80081bc:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2203      	movs	r2, #3
 80081c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081ca:	2b03      	cmp	r3, #3
 80081cc:	d02e      	beq.n	800822c <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081d4:	d106      	bne.n	80081e4 <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081da:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	639a      	str	r2, [r3, #56]	; 0x38
 80081e2:	e029      	b.n	8008238 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081ea:	d10a      	bne.n	8008202 <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 fa1b 	bl	8008628 <SD_WideBus_Enable>
 80081f2:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fa:	431a      	orrs	r2, r3
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	639a      	str	r2, [r3, #56]	; 0x38
 8008200:	e01a      	b.n	8008238 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d10a      	bne.n	800821e <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 fa5a 	bl	80086c2 <SD_WideBus_Disable>
 800820e:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008216:	431a      	orrs	r2, r3
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	639a      	str	r2, [r3, #56]	; 0x38
 800821c:	e00c      	b.n	8008238 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008222:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	639a      	str	r2, [r3, #56]	; 0x38
 800822a:	e005      	b.n	8008238 <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008230:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800823c:	2b00      	cmp	r3, #0
 800823e:	d00a      	beq.n	8008256 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008248:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2201      	movs	r2, #1
 800824e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008252:	2301      	movs	r3, #1
 8008254:	e024      	b.n	80082a0 <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	68db      	ldr	r3, [r3, #12]
 8008266:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	695b      	ldr	r3, [r3, #20]
 8008270:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	699b      	ldr	r3, [r3, #24]
 8008276:	623b      	str	r3, [r7, #32]
    SDMMC_Init(hsd->Instance, Init);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681d      	ldr	r5, [r3, #0]
 800827c:	466c      	mov	r4, sp
 800827e:	f107 0318 	add.w	r3, r7, #24
 8008282:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008286:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800828a:	f107 030c 	add.w	r3, r7, #12
 800828e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008290:	4628      	mov	r0, r5
 8008292:	f000 ff89 	bl	80091a8 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2201      	movs	r2, #1
 800829a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 800829e:	2300      	movs	r3, #0
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3728      	adds	r7, #40	; 0x28
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bdb0      	pop	{r4, r5, r7, pc}

080082a8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b086      	sub	sp, #24
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 80082b0:	2304      	movs	r3, #4
 80082b2:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80082b4:	2300      	movs	r3, #0
 80082b6:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 80082b8:	2300      	movs	r3, #0
 80082ba:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 80082bc:	f107 030c 	add.w	r3, r7, #12
 80082c0:	4619      	mov	r1, r3
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 f986 	bl	80085d4 <SD_SendStatus>
 80082c8:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d005      	beq.n	80082dc <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	431a      	orrs	r2, r3
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9) & 0x0F);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	0a5b      	lsrs	r3, r3, #9
 80082e0:	b2db      	uxtb	r3, r3
 80082e2:	f003 030f 	and.w	r3, r3, #15
 80082e6:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 80082e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3718      	adds	r7, #24
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}

080082f2 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80082f2:	b5b0      	push	{r4, r5, r7, lr}
 80082f4:	b094      	sub	sp, #80	; 0x50
 80082f6:	af04      	add	r7, sp, #16
 80082f8:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80082fa:	2300      	movs	r3, #0
 80082fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1;
 80082fe:	2301      	movs	r3, #1
 8008300:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4618      	mov	r0, r3
 8008308:	f000 ffa6 	bl	8009258 <SDMMC_GetPowerState>
 800830c:	4603      	mov	r3, r0
 800830e:	2b00      	cmp	r3, #0
 8008310:	d102      	bne.n	8008318 <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008312:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008316:	e0b1      	b.n	800847c <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800831c:	2b03      	cmp	r3, #3
 800831e:	d02f      	beq.n	8008380 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4618      	mov	r0, r3
 8008326:	f001 f9ec 	bl	8009702 <SDMMC_CmdSendCID>
 800832a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800832c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800832e:	2b00      	cmp	r3, #0
 8008330:	d001      	beq.n	8008336 <SD_InitCard+0x44>
    {
      return errorstate;
 8008332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008334:	e0a2      	b.n	800847c <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	2100      	movs	r1, #0
 800833c:	4618      	mov	r0, r3
 800833e:	f000 ffd0 	bl	80092e2 <SDMMC_GetResponse>
 8008342:	4602      	mov	r2, r0
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	2104      	movs	r1, #4
 800834e:	4618      	mov	r0, r3
 8008350:	f000 ffc7 	bl	80092e2 <SDMMC_GetResponse>
 8008354:	4602      	mov	r2, r0
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	2108      	movs	r1, #8
 8008360:	4618      	mov	r0, r3
 8008362:	f000 ffbe 	bl	80092e2 <SDMMC_GetResponse>
 8008366:	4602      	mov	r2, r0
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	210c      	movs	r1, #12
 8008372:	4618      	mov	r0, r3
 8008374:	f000 ffb5 	bl	80092e2 <SDMMC_GetResponse>
 8008378:	4602      	mov	r2, r0
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008384:	2b03      	cmp	r3, #3
 8008386:	d00d      	beq.n	80083a4 <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f107 020e 	add.w	r2, r7, #14
 8008390:	4611      	mov	r1, r2
 8008392:	4618      	mov	r0, r3
 8008394:	f001 f9f6 	bl	8009784 <SDMMC_CmdSetRelAdd>
 8008398:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800839a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800839c:	2b00      	cmp	r3, #0
 800839e:	d001      	beq.n	80083a4 <SD_InitCard+0xb2>
    {
      return errorstate;
 80083a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083a2:	e06b      	b.n	800847c <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083a8:	2b03      	cmp	r3, #3
 80083aa:	d036      	beq.n	800841a <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80083ac:	89fb      	ldrh	r3, [r7, #14]
 80083ae:	461a      	mov	r2, r3
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681a      	ldr	r2, [r3, #0]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083bc:	041b      	lsls	r3, r3, #16
 80083be:	4619      	mov	r1, r3
 80083c0:	4610      	mov	r0, r2
 80083c2:	f001 f9be 	bl	8009742 <SDMMC_CmdSendCSD>
 80083c6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80083c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d001      	beq.n	80083d2 <SD_InitCard+0xe0>
    {
      return errorstate;
 80083ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083d0:	e054      	b.n	800847c <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	2100      	movs	r1, #0
 80083d8:	4618      	mov	r0, r3
 80083da:	f000 ff82 	bl	80092e2 <SDMMC_GetResponse>
 80083de:	4602      	mov	r2, r0
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	2104      	movs	r1, #4
 80083ea:	4618      	mov	r0, r3
 80083ec:	f000 ff79 	bl	80092e2 <SDMMC_GetResponse>
 80083f0:	4602      	mov	r2, r0
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	2108      	movs	r1, #8
 80083fc:	4618      	mov	r0, r3
 80083fe:	f000 ff70 	bl	80092e2 <SDMMC_GetResponse>
 8008402:	4602      	mov	r2, r0
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	210c      	movs	r1, #12
 800840e:	4618      	mov	r0, r3
 8008410:	f000 ff67 	bl	80092e2 <SDMMC_GetResponse>
 8008414:	4602      	mov	r2, r0
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	2104      	movs	r1, #4
 8008420:	4618      	mov	r0, r3
 8008422:	f000 ff5e 	bl	80092e2 <SDMMC_GetResponse>
 8008426:	4603      	mov	r3, r0
 8008428:	0d1a      	lsrs	r2, r3, #20
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 800842e:	f107 0310 	add.w	r3, r7, #16
 8008432:	4619      	mov	r1, r3
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f7ff fc67 	bl	8007d08 <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6819      	ldr	r1, [r3, #0]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008442:	041b      	lsls	r3, r3, #16
 8008444:	f04f 0400 	mov.w	r4, #0
 8008448:	461a      	mov	r2, r3
 800844a:	4623      	mov	r3, r4
 800844c:	4608      	mov	r0, r1
 800844e:	f001 f861 	bl	8009514 <SDMMC_CmdSelDesel>
 8008452:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008456:	2b00      	cmp	r3, #0
 8008458:	d001      	beq.n	800845e <SD_InitCard+0x16c>
  {
    return errorstate;
 800845a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800845c:	e00e      	b.n	800847c <SD_InitCard+0x18a>
  }

  /* Configure SDMMC peripheral interface */     
  SDMMC_Init(hsd->Instance, hsd->Init);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681d      	ldr	r5, [r3, #0]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	466c      	mov	r4, sp
 8008466:	f103 0210 	add.w	r2, r3, #16
 800846a:	ca07      	ldmia	r2, {r0, r1, r2}
 800846c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008470:	3304      	adds	r3, #4
 8008472:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008474:	4628      	mov	r0, r5
 8008476:	f000 fe97 	bl	80091a8 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800847a:	2300      	movs	r3, #0
}
 800847c:	4618      	mov	r0, r3
 800847e:	3740      	adds	r7, #64	; 0x40
 8008480:	46bd      	mov	sp, r7
 8008482:	bdb0      	pop	{r4, r5, r7, pc}

08008484 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b086      	sub	sp, #24
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 800848c:	2300      	movs	r3, #0
 800848e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0, validvoltage = 0;
 8008490:	2300      	movs	r3, #0
 8008492:	617b      	str	r3, [r7, #20]
 8008494:	2300      	movs	r3, #0
 8008496:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008498:	2300      	movs	r3, #0
 800849a:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4618      	mov	r0, r3
 80084a2:	f001 f85c 	bl	800955e <SDMMC_CmdGoIdleState>
 80084a6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d001      	beq.n	80084b2 <SD_PowerON+0x2e>
  {
    return errorstate;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	e08c      	b.n	80085cc <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4618      	mov	r0, r3
 80084b8:	f001 f871 	bl	800959e <SDMMC_CmdOperCond>
 80084bc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d03d      	beq.n	8008540 <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2200      	movs	r2, #0
 80084c8:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 80084ca:	e032      	b.n	8008532 <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	1c5a      	adds	r2, r3, #1
 80084d0:	60ba      	str	r2, [r7, #8]
 80084d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d102      	bne.n	80084e0 <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80084da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80084de:	e075      	b.n	80085cc <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	2100      	movs	r1, #0
 80084e6:	4618      	mov	r0, r3
 80084e8:	f001 f87a 	bl	80095e0 <SDMMC_CmdAppCommand>
 80084ec:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d002      	beq.n	80084fa <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80084f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80084f8:	e068      	b.n	80085cc <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	2100      	movs	r1, #0
 8008500:	4618      	mov	r0, r3
 8008502:	f001 f891 	bl	8009628 <SDMMC_CmdAppOperCommand>
 8008506:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d002      	beq.n	8008514 <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800850e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008512:	e05b      	b.n	80085cc <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	2100      	movs	r1, #0
 800851a:	4618      	mov	r0, r3
 800851c:	f000 fee1 	bl	80092e2 <SDMMC_GetResponse>
 8008520:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	0fdb      	lsrs	r3, r3, #31
 8008526:	2b01      	cmp	r3, #1
 8008528:	bf0c      	ite	eq
 800852a:	2301      	moveq	r3, #1
 800852c:	2300      	movne	r3, #0
 800852e:	b2db      	uxtb	r3, r3
 8008530:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d0c9      	beq.n	80084cc <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2200      	movs	r2, #0
 800853c:	645a      	str	r2, [r3, #68]	; 0x44
 800853e:	e044      	b.n	80085ca <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2201      	movs	r2, #1
 8008544:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 8008546:	e031      	b.n	80085ac <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	1c5a      	adds	r2, r3, #1
 800854c:	60ba      	str	r2, [r7, #8]
 800854e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008552:	4293      	cmp	r3, r2
 8008554:	d102      	bne.n	800855c <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008556:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800855a:	e037      	b.n	80085cc <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	2100      	movs	r1, #0
 8008562:	4618      	mov	r0, r3
 8008564:	f001 f83c 	bl	80095e0 <SDMMC_CmdAppCommand>
 8008568:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d001      	beq.n	8008574 <SD_PowerON+0xf0>
      {
        return errorstate;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	e02b      	b.n	80085cc <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800857c:	4618      	mov	r0, r3
 800857e:	f001 f853 	bl	8009628 <SDMMC_CmdAppOperCommand>
 8008582:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d001      	beq.n	800858e <SD_PowerON+0x10a>
      {
        return errorstate;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	e01e      	b.n	80085cc <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	2100      	movs	r1, #0
 8008594:	4618      	mov	r0, r3
 8008596:	f000 fea4 	bl	80092e2 <SDMMC_GetResponse>
 800859a:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	0fdb      	lsrs	r3, r3, #31
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	bf0c      	ite	eq
 80085a4:	2301      	moveq	r3, #1
 80085a6:	2300      	movne	r3, #0
 80085a8:	b2db      	uxtb	r3, r3
 80085aa:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d0ca      	beq.n	8008548 <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d003      	beq.n	80085c4 <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2201      	movs	r2, #1
 80085c0:	645a      	str	r2, [r3, #68]	; 0x44
 80085c2:	e002      	b.n	80085ca <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2200      	movs	r2, #0
 80085c8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 80085ca:	2300      	movs	r3, #0
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3718      	adds	r7, #24
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b084      	sub	sp, #16
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80085de:	2300      	movs	r3, #0
 80085e0:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d102      	bne.n	80085ee <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 80085e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80085ec:	e018      	b.n	8008620 <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681a      	ldr	r2, [r3, #0]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085f6:	041b      	lsls	r3, r3, #16
 80085f8:	4619      	mov	r1, r3
 80085fa:	4610      	mov	r0, r2
 80085fc:	f001 f8e5 	bl	80097ca <SDMMC_CmdSendStatus>
 8008600:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d001      	beq.n	800860c <SD_SendStatus+0x38>
  {
    return errorstate;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	e009      	b.n	8008620 <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	2100      	movs	r1, #0
 8008612:	4618      	mov	r0, r3
 8008614:	f000 fe65 	bl	80092e2 <SDMMC_GetResponse>
 8008618:	4602      	mov	r2, r0
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 800861e:	2300      	movs	r3, #0
}
 8008620:	4618      	mov	r0, r3
 8008622:	3710      	adds	r7, #16
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b086      	sub	sp, #24
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 8008630:	2300      	movs	r3, #0
 8008632:	60fb      	str	r3, [r7, #12]
 8008634:	2300      	movs	r3, #0
 8008636:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008638:	2300      	movs	r3, #0
 800863a:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	2100      	movs	r1, #0
 8008642:	4618      	mov	r0, r3
 8008644:	f000 fe4d 	bl	80092e2 <SDMMC_GetResponse>
 8008648:	4603      	mov	r3, r0
 800864a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800864e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008652:	d102      	bne.n	800865a <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008654:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008658:	e02f      	b.n	80086ba <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800865a:	f107 030c 	add.w	r3, r7, #12
 800865e:	4619      	mov	r1, r3
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f000 f87b 	bl	800875c <SD_FindSCR>
 8008666:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d001      	beq.n	8008672 <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	e023      	b.n	80086ba <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008678:	2b00      	cmp	r3, #0
 800867a:	d01c      	beq.n	80086b6 <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681a      	ldr	r2, [r3, #0]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008684:	041b      	lsls	r3, r3, #16
 8008686:	4619      	mov	r1, r3
 8008688:	4610      	mov	r0, r2
 800868a:	f000 ffa9 	bl	80095e0 <SDMMC_CmdAppCommand>
 800868e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d001      	beq.n	800869a <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	e00f      	b.n	80086ba <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	2102      	movs	r1, #2
 80086a0:	4618      	mov	r0, r3
 80086a2:	f000 ffe7 	bl	8009674 <SDMMC_CmdBusWidth>
 80086a6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d001      	beq.n	80086b2 <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	e003      	b.n	80086ba <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 80086b2:	2300      	movs	r3, #0
 80086b4:	e001      	b.n	80086ba <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80086b6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3718      	adds	r7, #24
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}

080086c2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80086c2:	b580      	push	{r7, lr}
 80086c4:	b086      	sub	sp, #24
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 80086ca:	2300      	movs	r3, #0
 80086cc:	60fb      	str	r3, [r7, #12]
 80086ce:	2300      	movs	r3, #0
 80086d0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80086d2:	2300      	movs	r3, #0
 80086d4:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	2100      	movs	r1, #0
 80086dc:	4618      	mov	r0, r3
 80086de:	f000 fe00 	bl	80092e2 <SDMMC_GetResponse>
 80086e2:	4603      	mov	r3, r0
 80086e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80086ec:	d102      	bne.n	80086f4 <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80086ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80086f2:	e02f      	b.n	8008754 <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80086f4:	f107 030c 	add.w	r3, r7, #12
 80086f8:	4619      	mov	r1, r3
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 f82e 	bl	800875c <SD_FindSCR>
 8008700:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d001      	beq.n	800870c <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	e023      	b.n	8008754 <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008712:	2b00      	cmp	r3, #0
 8008714:	d01c      	beq.n	8008750 <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681a      	ldr	r2, [r3, #0]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800871e:	041b      	lsls	r3, r3, #16
 8008720:	4619      	mov	r1, r3
 8008722:	4610      	mov	r0, r2
 8008724:	f000 ff5c 	bl	80095e0 <SDMMC_CmdAppCommand>
 8008728:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d001      	beq.n	8008734 <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	e00f      	b.n	8008754 <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	2100      	movs	r1, #0
 800873a:	4618      	mov	r0, r3
 800873c:	f000 ff9a 	bl	8009674 <SDMMC_CmdBusWidth>
 8008740:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d001      	beq.n	800874c <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	e003      	b.n	8008754 <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 800874c:	2300      	movs	r3, #0
 800874e:	e001      	b.n	8008754 <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008750:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008754:	4618      	mov	r0, r3
 8008756:	3718      	adds	r7, #24
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}

0800875c <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800875c:	b590      	push	{r4, r7, lr}
 800875e:	b08f      	sub	sp, #60	; 0x3c
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008766:	2300      	movs	r3, #0
 8008768:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 800876a:	f7fa f8e1 	bl	8002930 <HAL_GetTick>
 800876e:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0;
 8008770:	2300      	movs	r3, #0
 8008772:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2] = {0, 0};
 8008774:	2300      	movs	r3, #0
 8008776:	60fb      	str	r3, [r7, #12]
 8008778:	2300      	movs	r3, #0
 800877a:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	2108      	movs	r1, #8
 8008782:	4618      	mov	r0, r3
 8008784:	f000 fdee 	bl	8009364 <SDMMC_CmdBlockLength>
 8008788:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800878a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800878c:	2b00      	cmp	r3, #0
 800878e:	d001      	beq.n	8008794 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008792:	e0a8      	b.n	80088e6 <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681a      	ldr	r2, [r3, #0]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800879c:	041b      	lsls	r3, r3, #16
 800879e:	4619      	mov	r1, r3
 80087a0:	4610      	mov	r0, r2
 80087a2:	f000 ff1d 	bl	80095e0 <SDMMC_CmdAppCommand>
 80087a6:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 80087a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d001      	beq.n	80087b2 <SD_FindSCR+0x56>
  {
    return errorstate;
 80087ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b0:	e099      	b.n	80088e6 <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80087b2:	f04f 33ff 	mov.w	r3, #4294967295
 80087b6:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8;
 80087b8:	2308      	movs	r3, #8
 80087ba:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80087bc:	2330      	movs	r3, #48	; 0x30
 80087be:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80087c0:	2302      	movs	r3, #2
 80087c2:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80087c4:	2300      	movs	r3, #0
 80087c6:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80087c8:	2301      	movs	r3, #1
 80087ca:	62bb      	str	r3, [r7, #40]	; 0x28
  SDMMC_ConfigData(hsd->Instance, &config);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f107 0214 	add.w	r2, r7, #20
 80087d4:	4611      	mov	r1, r2
 80087d6:	4618      	mov	r0, r3
 80087d8:	f000 fd98 	bl	800930c <SDMMC_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4618      	mov	r0, r3
 80087e2:	f000 ff6b 	bl	80096bc <SDMMC_CmdSendSCR>
 80087e6:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 80087e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d022      	beq.n	8008834 <SD_FindSCR+0xd8>
  {
    return errorstate;
 80087ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f0:	e079      	b.n	80088e6 <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d00e      	beq.n	800881e <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6819      	ldr	r1, [r3, #0]
 8008804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008806:	009b      	lsls	r3, r3, #2
 8008808:	f107 020c 	add.w	r2, r7, #12
 800880c:	18d4      	adds	r4, r2, r3
 800880e:	4608      	mov	r0, r1
 8008810:	f000 fcf6 	bl	8009200 <SDMMC_ReadFIFO>
 8008814:	4603      	mov	r3, r0
 8008816:	6023      	str	r3, [r4, #0]
      index++;
 8008818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800881a:	3301      	adds	r3, #1
 800881c:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800881e:	f7fa f887 	bl	8002930 <HAL_GetTick>
 8008822:	4602      	mov	r2, r0
 8008824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008826:	1ad3      	subs	r3, r2, r3
 8008828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800882c:	d102      	bne.n	8008834 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800882e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008832:	e058      	b.n	80088e6 <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800883a:	f240 432a 	movw	r3, #1066	; 0x42a
 800883e:	4013      	ands	r3, r2
 8008840:	2b00      	cmp	r3, #0
 8008842:	d0d6      	beq.n	80087f2 <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800884a:	f003 0308 	and.w	r3, r3, #8
 800884e:	2b00      	cmp	r3, #0
 8008850:	d005      	beq.n	800885e <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	2208      	movs	r2, #8
 8008858:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800885a:	2308      	movs	r3, #8
 800885c:	e043      	b.n	80088e6 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008864:	f003 0302 	and.w	r3, r3, #2
 8008868:	2b00      	cmp	r3, #0
 800886a:	d005      	beq.n	8008878 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	2202      	movs	r2, #2
 8008872:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008874:	2302      	movs	r3, #2
 8008876:	e036      	b.n	80088e6 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800887e:	f003 0320 	and.w	r3, r3, #32
 8008882:	2b00      	cmp	r3, #0
 8008884:	d005      	beq.n	8008892 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	2220      	movs	r2, #32
 800888c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 800888e:	2320      	movs	r3, #32
 8008890:	e029      	b.n	80088e6 <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800889a:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	061a      	lsls	r2, r3, #24
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	021b      	lsls	r3, r3, #8
 80088a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80088a8:	431a      	orrs	r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	0a1b      	lsrs	r3, r3, #8
 80088ae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80088b2:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	3304      	adds	r3, #4
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 80088be:	430a      	orrs	r2, r1
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80088c0:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	061a      	lsls	r2, r3, #24
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	021b      	lsls	r3, r3, #8
 80088ca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80088ce:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	0a1b      	lsrs	r3, r3, #8
 80088d4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80088d8:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	0e1b      	lsrs	r3, r3, #24
 80088de:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 80088e4:	2300      	movs	r3, #0
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	373c      	adds	r7, #60	; 0x3c
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd90      	pop	{r4, r7, pc}

080088ee <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80088ee:	b580      	push	{r7, lr}
 80088f0:	b082      	sub	sp, #8
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	6078      	str	r0, [r7, #4]
 80088f6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d101      	bne.n	8008902 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80088fe:	2301      	movs	r3, #1
 8008900:	e025      	b.n	800894e <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008908:	b2db      	uxtb	r3, r3
 800890a:	2b00      	cmp	r3, #0
 800890c:	d106      	bne.n	800891c <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2200      	movs	r2, #0
 8008912:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f006 f87a 	bl	800ea10 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2202      	movs	r2, #2
 8008920:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681a      	ldr	r2, [r3, #0]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	3304      	adds	r3, #4
 800892c:	4619      	mov	r1, r3
 800892e:	4610      	mov	r0, r2
 8008930:	f000 fb14 	bl	8008f5c <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6818      	ldr	r0, [r3, #0]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	461a      	mov	r2, r3
 800893e:	6839      	ldr	r1, [r7, #0]
 8008940:	f000 fb7e 	bl	8009040 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2201      	movs	r2, #1
 8008948:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800894c:	2300      	movs	r3, #0
}
 800894e:	4618      	mov	r0, r3
 8008950:	3708      	adds	r7, #8
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}

08008956 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008956:	b580      	push	{r7, lr}
 8008958:	b084      	sub	sp, #16
 800895a:	af00      	add	r7, sp, #0
 800895c:	60f8      	str	r0, [r7, #12]
 800895e:	60b9      	str	r1, [r7, #8]
 8008960:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008968:	b2db      	uxtb	r3, r3
 800896a:	2b02      	cmp	r3, #2
 800896c:	d101      	bne.n	8008972 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800896e:	2302      	movs	r3, #2
 8008970:	e018      	b.n	80089a4 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2202      	movs	r2, #2
 8008976:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	687a      	ldr	r2, [r7, #4]
 8008980:	68b9      	ldr	r1, [r7, #8]
 8008982:	4618      	mov	r0, r3
 8008984:	f000 fbdc 	bl	8009140 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	2b02      	cmp	r3, #2
 800898e:	d104      	bne.n	800899a <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	2205      	movs	r2, #5
 8008994:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8008998:	e003      	b.n	80089a2 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2201      	movs	r2, #1
 800899e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80089a2:	2300      	movs	r3, #0
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3710      	adds	r7, #16
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b082      	sub	sp, #8
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80089bc:	b2db      	uxtb	r3, r3
 80089be:	2b02      	cmp	r3, #2
 80089c0:	d101      	bne.n	80089c6 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80089c2:	2302      	movs	r3, #2
 80089c4:	e00e      	b.n	80089e4 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2202      	movs	r2, #2
 80089ca:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	6839      	ldr	r1, [r7, #0]
 80089d4:	4618      	mov	r0, r3
 80089d6:	f000 fbd4 	bl	8009182 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2201      	movs	r2, #1
 80089de:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 80089e2:	2300      	movs	r3, #0
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3708      	adds	r7, #8
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b082      	sub	sp, #8
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d101      	bne.n	80089fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80089fa:	2301      	movs	r3, #1
 80089fc:	e01d      	b.n	8008a3a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a04:	b2db      	uxtb	r3, r3
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d106      	bne.n	8008a18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f005 ff16 	bl	800e844 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2202      	movs	r2, #2
 8008a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681a      	ldr	r2, [r3, #0]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	3304      	adds	r3, #4
 8008a28:	4619      	mov	r1, r3
 8008a2a:	4610      	mov	r0, r2
 8008a2c:	f000 f97c 	bl	8008d28 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2201      	movs	r2, #1
 8008a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a38:	2300      	movs	r3, #0
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3708      	adds	r7, #8
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
	...

08008a44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b085      	sub	sp, #20
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	68da      	ldr	r2, [r3, #12]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f042 0201 	orr.w	r2, r2, #1
 8008a5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	689a      	ldr	r2, [r3, #8]
 8008a62:	4b0c      	ldr	r3, [pc, #48]	; (8008a94 <HAL_TIM_Base_Start_IT+0x50>)
 8008a64:	4013      	ands	r3, r2
 8008a66:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2b06      	cmp	r3, #6
 8008a6c:	d00b      	beq.n	8008a86 <HAL_TIM_Base_Start_IT+0x42>
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a74:	d007      	beq.n	8008a86 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	681a      	ldr	r2, [r3, #0]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f042 0201 	orr.w	r2, r2, #1
 8008a84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a86:	2300      	movs	r3, #0
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3714      	adds	r7, #20
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr
 8008a94:	00010007 	.word	0x00010007

08008a98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b082      	sub	sp, #8
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	691b      	ldr	r3, [r3, #16]
 8008aa6:	f003 0302 	and.w	r3, r3, #2
 8008aaa:	2b02      	cmp	r3, #2
 8008aac:	d122      	bne.n	8008af4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	68db      	ldr	r3, [r3, #12]
 8008ab4:	f003 0302 	and.w	r3, r3, #2
 8008ab8:	2b02      	cmp	r3, #2
 8008aba:	d11b      	bne.n	8008af4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f06f 0202 	mvn.w	r2, #2
 8008ac4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2201      	movs	r2, #1
 8008aca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	699b      	ldr	r3, [r3, #24]
 8008ad2:	f003 0303 	and.w	r3, r3, #3
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d003      	beq.n	8008ae2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 f905 	bl	8008cea <HAL_TIM_IC_CaptureCallback>
 8008ae0:	e005      	b.n	8008aee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 f8f7 	bl	8008cd6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f000 f908 	bl	8008cfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2200      	movs	r2, #0
 8008af2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	691b      	ldr	r3, [r3, #16]
 8008afa:	f003 0304 	and.w	r3, r3, #4
 8008afe:	2b04      	cmp	r3, #4
 8008b00:	d122      	bne.n	8008b48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	68db      	ldr	r3, [r3, #12]
 8008b08:	f003 0304 	and.w	r3, r3, #4
 8008b0c:	2b04      	cmp	r3, #4
 8008b0e:	d11b      	bne.n	8008b48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f06f 0204 	mvn.w	r2, #4
 8008b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2202      	movs	r2, #2
 8008b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	699b      	ldr	r3, [r3, #24]
 8008b26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d003      	beq.n	8008b36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f000 f8db 	bl	8008cea <HAL_TIM_IC_CaptureCallback>
 8008b34:	e005      	b.n	8008b42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f000 f8cd 	bl	8008cd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f000 f8de 	bl	8008cfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2200      	movs	r2, #0
 8008b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	691b      	ldr	r3, [r3, #16]
 8008b4e:	f003 0308 	and.w	r3, r3, #8
 8008b52:	2b08      	cmp	r3, #8
 8008b54:	d122      	bne.n	8008b9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	68db      	ldr	r3, [r3, #12]
 8008b5c:	f003 0308 	and.w	r3, r3, #8
 8008b60:	2b08      	cmp	r3, #8
 8008b62:	d11b      	bne.n	8008b9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f06f 0208 	mvn.w	r2, #8
 8008b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2204      	movs	r2, #4
 8008b72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	69db      	ldr	r3, [r3, #28]
 8008b7a:	f003 0303 	and.w	r3, r3, #3
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d003      	beq.n	8008b8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 f8b1 	bl	8008cea <HAL_TIM_IC_CaptureCallback>
 8008b88:	e005      	b.n	8008b96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 f8a3 	bl	8008cd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f000 f8b4 	bl	8008cfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	691b      	ldr	r3, [r3, #16]
 8008ba2:	f003 0310 	and.w	r3, r3, #16
 8008ba6:	2b10      	cmp	r3, #16
 8008ba8:	d122      	bne.n	8008bf0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	68db      	ldr	r3, [r3, #12]
 8008bb0:	f003 0310 	and.w	r3, r3, #16
 8008bb4:	2b10      	cmp	r3, #16
 8008bb6:	d11b      	bne.n	8008bf0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f06f 0210 	mvn.w	r2, #16
 8008bc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2208      	movs	r2, #8
 8008bc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	69db      	ldr	r3, [r3, #28]
 8008bce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d003      	beq.n	8008bde <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f000 f887 	bl	8008cea <HAL_TIM_IC_CaptureCallback>
 8008bdc:	e005      	b.n	8008bea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 f879 	bl	8008cd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f000 f88a 	bl	8008cfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2200      	movs	r2, #0
 8008bee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	691b      	ldr	r3, [r3, #16]
 8008bf6:	f003 0301 	and.w	r3, r3, #1
 8008bfa:	2b01      	cmp	r3, #1
 8008bfc:	d10e      	bne.n	8008c1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	68db      	ldr	r3, [r3, #12]
 8008c04:	f003 0301 	and.w	r3, r3, #1
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d107      	bne.n	8008c1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f06f 0201 	mvn.w	r2, #1
 8008c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f004 fa60 	bl	800d0dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	691b      	ldr	r3, [r3, #16]
 8008c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c26:	2b80      	cmp	r3, #128	; 0x80
 8008c28:	d10e      	bne.n	8008c48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	68db      	ldr	r3, [r3, #12]
 8008c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c34:	2b80      	cmp	r3, #128	; 0x80
 8008c36:	d107      	bne.n	8008c48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 f976 	bl	8008f34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	691b      	ldr	r3, [r3, #16]
 8008c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c56:	d10e      	bne.n	8008c76 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	68db      	ldr	r3, [r3, #12]
 8008c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c62:	2b80      	cmp	r3, #128	; 0x80
 8008c64:	d107      	bne.n	8008c76 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008c6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f000 f969 	bl	8008f48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	691b      	ldr	r3, [r3, #16]
 8008c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c80:	2b40      	cmp	r3, #64	; 0x40
 8008c82:	d10e      	bne.n	8008ca2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	68db      	ldr	r3, [r3, #12]
 8008c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c8e:	2b40      	cmp	r3, #64	; 0x40
 8008c90:	d107      	bne.n	8008ca2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008c9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f000 f838 	bl	8008d12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	691b      	ldr	r3, [r3, #16]
 8008ca8:	f003 0320 	and.w	r3, r3, #32
 8008cac:	2b20      	cmp	r3, #32
 8008cae:	d10e      	bne.n	8008cce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	68db      	ldr	r3, [r3, #12]
 8008cb6:	f003 0320 	and.w	r3, r3, #32
 8008cba:	2b20      	cmp	r3, #32
 8008cbc:	d107      	bne.n	8008cce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f06f 0220 	mvn.w	r2, #32
 8008cc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f000 f929 	bl	8008f20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008cce:	bf00      	nop
 8008cd0:	3708      	adds	r7, #8
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}

08008cd6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008cd6:	b480      	push	{r7}
 8008cd8:	b083      	sub	sp, #12
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008cde:	bf00      	nop
 8008ce0:	370c      	adds	r7, #12
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr

08008cea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008cea:	b480      	push	{r7}
 8008cec:	b083      	sub	sp, #12
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008cf2:	bf00      	nop
 8008cf4:	370c      	adds	r7, #12
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfc:	4770      	bx	lr

08008cfe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008cfe:	b480      	push	{r7}
 8008d00:	b083      	sub	sp, #12
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008d06:	bf00      	nop
 8008d08:	370c      	adds	r7, #12
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d10:	4770      	bx	lr

08008d12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008d12:	b480      	push	{r7}
 8008d14:	b083      	sub	sp, #12
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008d1a:	bf00      	nop
 8008d1c:	370c      	adds	r7, #12
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d24:	4770      	bx	lr
	...

08008d28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b085      	sub	sp, #20
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
 8008d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	4a40      	ldr	r2, [pc, #256]	; (8008e3c <TIM_Base_SetConfig+0x114>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d013      	beq.n	8008d68 <TIM_Base_SetConfig+0x40>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d46:	d00f      	beq.n	8008d68 <TIM_Base_SetConfig+0x40>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	4a3d      	ldr	r2, [pc, #244]	; (8008e40 <TIM_Base_SetConfig+0x118>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d00b      	beq.n	8008d68 <TIM_Base_SetConfig+0x40>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	4a3c      	ldr	r2, [pc, #240]	; (8008e44 <TIM_Base_SetConfig+0x11c>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d007      	beq.n	8008d68 <TIM_Base_SetConfig+0x40>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	4a3b      	ldr	r2, [pc, #236]	; (8008e48 <TIM_Base_SetConfig+0x120>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d003      	beq.n	8008d68 <TIM_Base_SetConfig+0x40>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	4a3a      	ldr	r2, [pc, #232]	; (8008e4c <TIM_Base_SetConfig+0x124>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d108      	bne.n	8008d7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	68fa      	ldr	r2, [r7, #12]
 8008d76:	4313      	orrs	r3, r2
 8008d78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	4a2f      	ldr	r2, [pc, #188]	; (8008e3c <TIM_Base_SetConfig+0x114>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d02b      	beq.n	8008dda <TIM_Base_SetConfig+0xb2>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d88:	d027      	beq.n	8008dda <TIM_Base_SetConfig+0xb2>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	4a2c      	ldr	r2, [pc, #176]	; (8008e40 <TIM_Base_SetConfig+0x118>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d023      	beq.n	8008dda <TIM_Base_SetConfig+0xb2>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	4a2b      	ldr	r2, [pc, #172]	; (8008e44 <TIM_Base_SetConfig+0x11c>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d01f      	beq.n	8008dda <TIM_Base_SetConfig+0xb2>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	4a2a      	ldr	r2, [pc, #168]	; (8008e48 <TIM_Base_SetConfig+0x120>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d01b      	beq.n	8008dda <TIM_Base_SetConfig+0xb2>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	4a29      	ldr	r2, [pc, #164]	; (8008e4c <TIM_Base_SetConfig+0x124>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d017      	beq.n	8008dda <TIM_Base_SetConfig+0xb2>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	4a28      	ldr	r2, [pc, #160]	; (8008e50 <TIM_Base_SetConfig+0x128>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d013      	beq.n	8008dda <TIM_Base_SetConfig+0xb2>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	4a27      	ldr	r2, [pc, #156]	; (8008e54 <TIM_Base_SetConfig+0x12c>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d00f      	beq.n	8008dda <TIM_Base_SetConfig+0xb2>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	4a26      	ldr	r2, [pc, #152]	; (8008e58 <TIM_Base_SetConfig+0x130>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d00b      	beq.n	8008dda <TIM_Base_SetConfig+0xb2>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	4a25      	ldr	r2, [pc, #148]	; (8008e5c <TIM_Base_SetConfig+0x134>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d007      	beq.n	8008dda <TIM_Base_SetConfig+0xb2>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	4a24      	ldr	r2, [pc, #144]	; (8008e60 <TIM_Base_SetConfig+0x138>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d003      	beq.n	8008dda <TIM_Base_SetConfig+0xb2>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	4a23      	ldr	r2, [pc, #140]	; (8008e64 <TIM_Base_SetConfig+0x13c>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d108      	bne.n	8008dec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008de0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	68db      	ldr	r3, [r3, #12]
 8008de6:	68fa      	ldr	r2, [r7, #12]
 8008de8:	4313      	orrs	r3, r2
 8008dea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	695b      	ldr	r3, [r3, #20]
 8008df6:	4313      	orrs	r3, r2
 8008df8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	68fa      	ldr	r2, [r7, #12]
 8008dfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	689a      	ldr	r2, [r3, #8]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	681a      	ldr	r2, [r3, #0]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	4a0a      	ldr	r2, [pc, #40]	; (8008e3c <TIM_Base_SetConfig+0x114>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d003      	beq.n	8008e20 <TIM_Base_SetConfig+0xf8>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	4a0c      	ldr	r2, [pc, #48]	; (8008e4c <TIM_Base_SetConfig+0x124>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d103      	bne.n	8008e28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	691a      	ldr	r2, [r3, #16]
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	615a      	str	r2, [r3, #20]
}
 8008e2e:	bf00      	nop
 8008e30:	3714      	adds	r7, #20
 8008e32:	46bd      	mov	sp, r7
 8008e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e38:	4770      	bx	lr
 8008e3a:	bf00      	nop
 8008e3c:	40010000 	.word	0x40010000
 8008e40:	40000400 	.word	0x40000400
 8008e44:	40000800 	.word	0x40000800
 8008e48:	40000c00 	.word	0x40000c00
 8008e4c:	40010400 	.word	0x40010400
 8008e50:	40014000 	.word	0x40014000
 8008e54:	40014400 	.word	0x40014400
 8008e58:	40014800 	.word	0x40014800
 8008e5c:	40001800 	.word	0x40001800
 8008e60:	40001c00 	.word	0x40001c00
 8008e64:	40002000 	.word	0x40002000

08008e68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b085      	sub	sp, #20
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e78:	2b01      	cmp	r3, #1
 8008e7a:	d101      	bne.n	8008e80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e7c:	2302      	movs	r3, #2
 8008e7e:	e045      	b.n	8008f0c <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2201      	movs	r2, #1
 8008e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2202      	movs	r2, #2
 8008e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	685b      	ldr	r3, [r3, #4]
 8008e96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	689b      	ldr	r3, [r3, #8]
 8008e9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4a1c      	ldr	r2, [pc, #112]	; (8008f18 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d004      	beq.n	8008eb4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4a1b      	ldr	r2, [pc, #108]	; (8008f1c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d108      	bne.n	8008ec6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008eba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	68fa      	ldr	r2, [r7, #12]
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ecc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	68fa      	ldr	r2, [r7, #12]
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ede:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	689b      	ldr	r3, [r3, #8]
 8008ee4:	68ba      	ldr	r2, [r7, #8]
 8008ee6:	4313      	orrs	r3, r2
 8008ee8:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	68fa      	ldr	r2, [r7, #12]
 8008ef0:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	68ba      	ldr	r2, [r7, #8]
 8008ef8:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2201      	movs	r2, #1
 8008efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2200      	movs	r2, #0
 8008f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f0a:	2300      	movs	r3, #0
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3714      	adds	r7, #20
 8008f10:	46bd      	mov	sp, r7
 8008f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f16:	4770      	bx	lr
 8008f18:	40010000 	.word	0x40010000
 8008f1c:	40010400 	.word	0x40010400

08008f20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b083      	sub	sp, #12
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008f28:	bf00      	nop
 8008f2a:	370c      	adds	r7, #12
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f32:	4770      	bx	lr

08008f34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b083      	sub	sp, #12
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008f3c:	bf00      	nop
 8008f3e:	370c      	adds	r7, #12
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr

08008f48 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b083      	sub	sp, #12
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008f50:	bf00      	nop
 8008f52:	370c      	adds	r7, #12
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr

08008f5c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b085      	sub	sp, #20
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8008f66:	2300      	movs	r3, #0
 8008f68:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	2b01      	cmp	r3, #1
 8008f74:	d027      	beq.n	8008fc6 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008f7c:	68fa      	ldr	r2, [r7, #12]
 8008f7e:	4b2f      	ldr	r3, [pc, #188]	; (800903c <FMC_SDRAM_Init+0xe0>)
 8008f80:	4013      	ands	r3, r2
 8008f82:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008f8c:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8008f92:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8008f98:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8008f9e:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8008fa4:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8008faa:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8008fb0:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008fb6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008fb8:	68fa      	ldr	r2, [r7, #12]
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	68fa      	ldr	r2, [r7, #12]
 8008fc2:	601a      	str	r2, [r3, #0]
 8008fc4:	e032      	b.n	800902c <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008fd2:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008fdc:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008fe2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008fe4:	68fa      	ldr	r2, [r7, #12]
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008ff0:	68ba      	ldr	r2, [r7, #8]
 8008ff2:	4b12      	ldr	r3, [pc, #72]	; (800903c <FMC_SDRAM_Init+0xe0>)
 8008ff4:	4013      	ands	r3, r2
 8008ff6:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009000:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8009006:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800900c:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8009012:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8009018:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800901a:	68ba      	ldr	r2, [r7, #8]
 800901c:	4313      	orrs	r3, r2
 800901e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	68fa      	ldr	r2, [r7, #12]
 8009024:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	68ba      	ldr	r2, [r7, #8]
 800902a:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800902c:	2300      	movs	r3, #0
}
 800902e:	4618      	mov	r0, r3
 8009030:	3714      	adds	r7, #20
 8009032:	46bd      	mov	sp, r7
 8009034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009038:	4770      	bx	lr
 800903a:	bf00      	nop
 800903c:	ffff8000 	.word	0xffff8000

08009040 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009040:	b480      	push	{r7}
 8009042:	b087      	sub	sp, #28
 8009044:	af00      	add	r7, sp, #0
 8009046:	60f8      	str	r0, [r7, #12]
 8009048:	60b9      	str	r1, [r7, #8]
 800904a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800904c:	2300      	movs	r3, #0
 800904e:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8009050:	2300      	movs	r3, #0
 8009052:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2b01      	cmp	r3, #1
 8009058:	d02e      	beq.n	80090b8 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	689b      	ldr	r3, [r3, #8]
 800905e:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009066:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	3b01      	subs	r3, #1
 8009074:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8009076:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	689b      	ldr	r3, [r3, #8]
 800907c:	3b01      	subs	r3, #1
 800907e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8009080:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	68db      	ldr	r3, [r3, #12]
 8009086:	3b01      	subs	r3, #1
 8009088:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800908a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	691b      	ldr	r3, [r3, #16]
 8009090:	3b01      	subs	r3, #1
 8009092:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8009094:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	695b      	ldr	r3, [r3, #20]
 800909a:	3b01      	subs	r3, #1
 800909c:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800909e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	699b      	ldr	r3, [r3, #24]
 80090a4:	3b01      	subs	r3, #1
 80090a6:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80090a8:	4313      	orrs	r3, r2
 80090aa:	697a      	ldr	r2, [r7, #20]
 80090ac:	4313      	orrs	r3, r2
 80090ae:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	697a      	ldr	r2, [r7, #20]
 80090b4:	609a      	str	r2, [r3, #8]
 80090b6:	e039      	b.n	800912c <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	689b      	ldr	r3, [r3, #8]
 80090bc:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80090be:	697a      	ldr	r2, [r7, #20]
 80090c0:	4b1e      	ldr	r3, [pc, #120]	; (800913c <FMC_SDRAM_Timing_Init+0xfc>)
 80090c2:	4013      	ands	r3, r2
 80090c4:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	68db      	ldr	r3, [r3, #12]
 80090ca:	3b01      	subs	r3, #1
 80090cc:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	695b      	ldr	r3, [r3, #20]
 80090d2:	3b01      	subs	r3, #1
 80090d4:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80090d6:	4313      	orrs	r3, r2
 80090d8:	697a      	ldr	r2, [r7, #20]
 80090da:	4313      	orrs	r3, r2
 80090dc:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	68db      	ldr	r3, [r3, #12]
 80090e2:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80090ea:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	685b      	ldr	r3, [r3, #4]
 80090f6:	3b01      	subs	r3, #1
 80090f8:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80090fa:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	689b      	ldr	r3, [r3, #8]
 8009100:	3b01      	subs	r3, #1
 8009102:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8009104:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	691b      	ldr	r3, [r3, #16]
 800910a:	3b01      	subs	r3, #1
 800910c:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800910e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	699b      	ldr	r3, [r3, #24]
 8009114:	3b01      	subs	r3, #1
 8009116:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8009118:	4313      	orrs	r3, r2
 800911a:	693a      	ldr	r2, [r7, #16]
 800911c:	4313      	orrs	r3, r2
 800911e:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	697a      	ldr	r2, [r7, #20]
 8009124:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	693a      	ldr	r2, [r7, #16]
 800912a:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800912c:	2300      	movs	r3, #0
}
 800912e:	4618      	mov	r0, r3
 8009130:	371c      	adds	r7, #28
 8009132:	46bd      	mov	sp, r7
 8009134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009138:	4770      	bx	lr
 800913a:	bf00      	nop
 800913c:	ff0f0fff 	.word	0xff0f0fff

08009140 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009140:	b480      	push	{r7}
 8009142:	b087      	sub	sp, #28
 8009144:	af00      	add	r7, sp, #0
 8009146:	60f8      	str	r0, [r7, #12]
 8009148:	60b9      	str	r1, [r7, #8]
 800914a:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800914c:	2300      	movs	r3, #0
 800914e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009158:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	689b      	ldr	r3, [r3, #8]
 800915e:	3b01      	subs	r3, #1
 8009160:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8009162:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	68db      	ldr	r3, [r3, #12]
 8009168:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800916a:	4313      	orrs	r3, r2
 800916c:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800916e:	697a      	ldr	r2, [r7, #20]
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8009174:	2300      	movs	r3, #0
}
 8009176:	4618      	mov	r0, r3
 8009178:	371c      	adds	r7, #28
 800917a:	46bd      	mov	sp, r7
 800917c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009180:	4770      	bx	lr

08009182 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8009182:	b480      	push	{r7}
 8009184:	b083      	sub	sp, #12
 8009186:	af00      	add	r7, sp, #0
 8009188:	6078      	str	r0, [r7, #4]
 800918a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	695a      	ldr	r2, [r3, #20]
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	005b      	lsls	r3, r3, #1
 8009194:	431a      	orrs	r2, r3
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800919a:	2300      	movs	r3, #0
}
 800919c:	4618      	mov	r0, r3
 800919e:	370c      	adds	r7, #12
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr

080091a8 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80091a8:	b084      	sub	sp, #16
 80091aa:	b480      	push	{r7}
 80091ac:	b085      	sub	sp, #20
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	6078      	str	r0, [r7, #4]
 80091b2:	f107 001c 	add.w	r0, r7, #28
 80091b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80091ba:	2300      	movs	r3, #0
 80091bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80091be:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80091c0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80091c2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80091c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80091c6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80091c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80091ca:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80091cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80091ce:	431a      	orrs	r2, r3
             Init.ClockDiv
 80091d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80091d2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80091d4:	68fa      	ldr	r2, [r7, #12]
 80091d6:	4313      	orrs	r3, r2
 80091d8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	685a      	ldr	r2, [r3, #4]
 80091de:	4b07      	ldr	r3, [pc, #28]	; (80091fc <SDMMC_Init+0x54>)
 80091e0:	4013      	ands	r3, r2
 80091e2:	68fa      	ldr	r2, [r7, #12]
 80091e4:	431a      	orrs	r2, r3
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80091ea:	2300      	movs	r3, #0
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3714      	adds	r7, #20
 80091f0:	46bd      	mov	sp, r7
 80091f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f6:	b004      	add	sp, #16
 80091f8:	4770      	bx	lr
 80091fa:	bf00      	nop
 80091fc:	ffff8100 	.word	0xffff8100

08009200 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8009200:	b480      	push	{r7}
 8009202:	b083      	sub	sp, #12
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800920e:	4618      	mov	r0, r3
 8009210:	370c      	adds	r7, #12
 8009212:	46bd      	mov	sp, r7
 8009214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009218:	4770      	bx	lr

0800921a <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800921a:	b480      	push	{r7}
 800921c:	b083      	sub	sp, #12
 800921e:	af00      	add	r7, sp, #0
 8009220:	6078      	str	r0, [r7, #4]
 8009222:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	681a      	ldr	r2, [r3, #0]
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800922e:	2300      	movs	r3, #0
}
 8009230:	4618      	mov	r0, r3
 8009232:	370c      	adds	r7, #12
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr

0800923c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800923c:	b480      	push	{r7}
 800923e:	b083      	sub	sp, #12
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2203      	movs	r2, #3
 8009248:	601a      	str	r2, [r3, #0]
  
  return HAL_OK; 
 800924a:	2300      	movs	r3, #0
}
 800924c:	4618      	mov	r0, r3
 800924e:	370c      	adds	r7, #12
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr

08009258 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8009258:	b480      	push	{r7}
 800925a:	b083      	sub	sp, #12
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f003 0303 	and.w	r3, r3, #3
}
 8009268:	4618      	mov	r0, r3
 800926a:	370c      	adds	r7, #12
 800926c:	46bd      	mov	sp, r7
 800926e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009272:	4770      	bx	lr

08009274 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8009274:	b480      	push	{r7}
 8009276:	b085      	sub	sp, #20
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800927e:	2300      	movs	r3, #0
 8009280:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	681a      	ldr	r2, [r3, #0]
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009292:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009298:	431a      	orrs	r2, r3
                       Command->CPSM);
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800929e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80092a0:	68fa      	ldr	r2, [r7, #12]
 80092a2:	4313      	orrs	r3, r2
 80092a4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	68da      	ldr	r2, [r3, #12]
 80092aa:	4b06      	ldr	r3, [pc, #24]	; (80092c4 <SDMMC_SendCommand+0x50>)
 80092ac:	4013      	ands	r3, r2
 80092ae:	68fa      	ldr	r2, [r7, #12]
 80092b0:	431a      	orrs	r2, r3
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80092b6:	2300      	movs	r3, #0
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3714      	adds	r7, #20
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr
 80092c4:	fffff000 	.word	0xfffff000

080092c8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b083      	sub	sp, #12
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	691b      	ldr	r3, [r3, #16]
 80092d4:	b2db      	uxtb	r3, r3
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	370c      	adds	r7, #12
 80092da:	46bd      	mov	sp, r7
 80092dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e0:	4770      	bx	lr

080092e2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80092e2:	b480      	push	{r7}
 80092e4:	b085      	sub	sp, #20
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
 80092ea:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 80092ec:	2300      	movs	r3, #0
 80092ee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	3314      	adds	r3, #20
 80092f4:	461a      	mov	r2, r3
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	4413      	add	r3, r2
 80092fa:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
}  
 8009300:	4618      	mov	r0, r3
 8009302:	3714      	adds	r7, #20
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr

0800930c <SDMMC_ConfigData>:
  * @param  Data  pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800930c:	b480      	push	{r7}
 800930e:	b085      	sub	sp, #20
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009316:	2300      	movs	r3, #0
 8009318:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	681a      	ldr	r2, [r3, #0]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	685a      	ldr	r2, [r3, #4]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009332:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009338:	431a      	orrs	r2, r3
                       Data->DPSM);
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800933e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009340:	68fa      	ldr	r2, [r7, #12]
 8009342:	4313      	orrs	r3, r2
 8009344:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800934a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	431a      	orrs	r2, r3
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009356:	2300      	movs	r3, #0

}
 8009358:	4618      	mov	r0, r3
 800935a:	3714      	adds	r7, #20
 800935c:	46bd      	mov	sp, r7
 800935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009362:	4770      	bx	lr

08009364 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b088      	sub	sp, #32
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
 800936c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800936e:	2300      	movs	r3, #0
 8009370:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009376:	2310      	movs	r3, #16
 8009378:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800937a:	2340      	movs	r3, #64	; 0x40
 800937c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800937e:	2300      	movs	r3, #0
 8009380:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009382:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009386:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009388:	f107 0308 	add.w	r3, r7, #8
 800938c:	4619      	mov	r1, r3
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f7ff ff70 	bl	8009274 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8009394:	f241 3288 	movw	r2, #5000	; 0x1388
 8009398:	2110      	movs	r1, #16
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f000 fa64 	bl	8009868 <SDMMC_GetCmdResp1>
 80093a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80093a2:	69fb      	ldr	r3, [r7, #28]
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3720      	adds	r7, #32
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b088      	sub	sp, #32
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80093b6:	2300      	movs	r3, #0
 80093b8:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80093be:	2311      	movs	r3, #17
 80093c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80093c2:	2340      	movs	r3, #64	; 0x40
 80093c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80093c6:	2300      	movs	r3, #0
 80093c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80093ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093ce:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80093d0:	f107 0308 	add.w	r3, r7, #8
 80093d4:	4619      	mov	r1, r3
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f7ff ff4c 	bl	8009274 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80093dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80093e0:	2111      	movs	r1, #17
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 fa40 	bl	8009868 <SDMMC_GetCmdResp1>
 80093e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80093ea:	69fb      	ldr	r3, [r7, #28]
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3720      	adds	r7, #32
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b088      	sub	sp, #32
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80093fe:	2300      	movs	r3, #0
 8009400:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009406:	2312      	movs	r3, #18
 8009408:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800940a:	2340      	movs	r3, #64	; 0x40
 800940c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800940e:	2300      	movs	r3, #0
 8009410:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009412:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009416:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009418:	f107 0308 	add.w	r3, r7, #8
 800941c:	4619      	mov	r1, r3
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f7ff ff28 	bl	8009274 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009424:	f241 3288 	movw	r2, #5000	; 0x1388
 8009428:	2112      	movs	r1, #18
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f000 fa1c 	bl	8009868 <SDMMC_GetCmdResp1>
 8009430:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009432:	69fb      	ldr	r3, [r7, #28]
}
 8009434:	4618      	mov	r0, r3
 8009436:	3720      	adds	r7, #32
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b088      	sub	sp, #32
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009446:	2300      	movs	r3, #0
 8009448:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800944e:	2318      	movs	r3, #24
 8009450:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009452:	2340      	movs	r3, #64	; 0x40
 8009454:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009456:	2300      	movs	r3, #0
 8009458:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800945a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800945e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009460:	f107 0308 	add.w	r3, r7, #8
 8009464:	4619      	mov	r1, r3
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f7ff ff04 	bl	8009274 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800946c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009470:	2118      	movs	r1, #24
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 f9f8 	bl	8009868 <SDMMC_GetCmdResp1>
 8009478:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800947a:	69fb      	ldr	r3, [r7, #28]
}
 800947c:	4618      	mov	r0, r3
 800947e:	3720      	adds	r7, #32
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}

08009484 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b088      	sub	sp, #32
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800948e:	2300      	movs	r3, #0
 8009490:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009496:	2319      	movs	r3, #25
 8009498:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800949a:	2340      	movs	r3, #64	; 0x40
 800949c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800949e:	2300      	movs	r3, #0
 80094a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80094a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094a6:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80094a8:	f107 0308 	add.w	r3, r7, #8
 80094ac:	4619      	mov	r1, r3
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f7ff fee0 	bl	8009274 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80094b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80094b8:	2119      	movs	r1, #25
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f000 f9d4 	bl	8009868 <SDMMC_GetCmdResp1>
 80094c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80094c2:	69fb      	ldr	r3, [r7, #28]
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3720      	adds	r7, #32
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}

080094cc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b088      	sub	sp, #32
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80094d4:	2300      	movs	r3, #0
 80094d6:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0;
 80094d8:	2300      	movs	r3, #0
 80094da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80094dc:	230c      	movs	r3, #12
 80094de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80094e0:	2340      	movs	r3, #64	; 0x40
 80094e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80094e4:	2300      	movs	r3, #0
 80094e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80094e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094ec:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80094ee:	f107 0308 	add.w	r3, r7, #8
 80094f2:	4619      	mov	r1, r3
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f7ff febd 	bl	8009274 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, 100000000/*SDMMC_CMDTIMEOUT*/);
 80094fa:	4a05      	ldr	r2, [pc, #20]	; (8009510 <SDMMC_CmdStopTransfer+0x44>)
 80094fc:	210c      	movs	r1, #12
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f000 f9b2 	bl	8009868 <SDMMC_GetCmdResp1>
 8009504:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009506:	69fb      	ldr	r3, [r7, #28]
}
 8009508:	4618      	mov	r0, r3
 800950a:	3720      	adds	r7, #32
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}
 8009510:	05f5e100 	.word	0x05f5e100

08009514 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b08a      	sub	sp, #40	; 0x28
 8009518:	af00      	add	r7, sp, #0
 800951a:	60f8      	str	r0, [r7, #12]
 800951c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009520:	2300      	movs	r3, #0
 8009522:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009528:	2307      	movs	r3, #7
 800952a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800952c:	2340      	movs	r3, #64	; 0x40
 800952e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009530:	2300      	movs	r3, #0
 8009532:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009534:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009538:	623b      	str	r3, [r7, #32]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800953a:	f107 0310 	add.w	r3, r7, #16
 800953e:	4619      	mov	r1, r3
 8009540:	68f8      	ldr	r0, [r7, #12]
 8009542:	f7ff fe97 	bl	8009274 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009546:	f241 3288 	movw	r2, #5000	; 0x1388
 800954a:	2107      	movs	r1, #7
 800954c:	68f8      	ldr	r0, [r7, #12]
 800954e:	f000 f98b 	bl	8009868 <SDMMC_GetCmdResp1>
 8009552:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8009554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009556:	4618      	mov	r0, r3
 8009558:	3728      	adds	r7, #40	; 0x28
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}

0800955e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800955e:	b580      	push	{r7, lr}
 8009560:	b088      	sub	sp, #32
 8009562:	af00      	add	r7, sp, #0
 8009564:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009566:	2300      	movs	r3, #0
 8009568:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0;
 800956a:	2300      	movs	r3, #0
 800956c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800956e:	2300      	movs	r3, #0
 8009570:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8009572:	2300      	movs	r3, #0
 8009574:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009576:	2300      	movs	r3, #0
 8009578:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800957a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800957e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009580:	f107 0308 	add.w	r3, r7, #8
 8009584:	4619      	mov	r1, r3
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f7ff fe74 	bl	8009274 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f000 f941 	bl	8009814 <SDMMC_GetCmdError>
 8009592:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009594:	69fb      	ldr	r3, [r7, #28]
}
 8009596:	4618      	mov	r0, r3
 8009598:	3720      	adds	r7, #32
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}

0800959e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800959e:	b580      	push	{r7, lr}
 80095a0:	b088      	sub	sp, #32
 80095a2:	af00      	add	r7, sp, #0
 80095a4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80095a6:	2300      	movs	r3, #0
 80095a8:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80095aa:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80095ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80095b0:	2308      	movs	r3, #8
 80095b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80095b4:	2340      	movs	r3, #64	; 0x40
 80095b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80095b8:	2300      	movs	r3, #0
 80095ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80095bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095c0:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80095c2:	f107 0308 	add.w	r3, r7, #8
 80095c6:	4619      	mov	r1, r3
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f7ff fe53 	bl	8009274 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f000 fb12 	bl	8009bf8 <SDMMC_GetCmdResp7>
 80095d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80095d6:	69fb      	ldr	r3, [r7, #28]
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3720      	adds	r7, #32
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}

080095e0 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b088      	sub	sp, #32
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80095ea:	2300      	movs	r3, #0
 80095ec:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80095f2:	2337      	movs	r3, #55	; 0x37
 80095f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80095f6:	2340      	movs	r3, #64	; 0x40
 80095f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80095fa:	2300      	movs	r3, #0
 80095fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80095fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009602:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009604:	f107 0308 	add.w	r3, r7, #8
 8009608:	4619      	mov	r1, r3
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f7ff fe32 	bl	8009274 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009610:	f241 3288 	movw	r2, #5000	; 0x1388
 8009614:	2137      	movs	r1, #55	; 0x37
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f000 f926 	bl	8009868 <SDMMC_GetCmdResp1>
 800961c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800961e:	69fb      	ldr	r3, [r7, #28]
}
 8009620:	4618      	mov	r0, r3
 8009622:	3720      	adds	r7, #32
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t SdType)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b088      	sub	sp, #32
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
 8009630:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009632:	2300      	movs	r3, #0
 8009634:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8009636:	683a      	ldr	r2, [r7, #0]
 8009638:	4b0d      	ldr	r3, [pc, #52]	; (8009670 <SDMMC_CmdAppOperCommand+0x48>)
 800963a:	4313      	orrs	r3, r2
 800963c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800963e:	2329      	movs	r3, #41	; 0x29
 8009640:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009642:	2340      	movs	r3, #64	; 0x40
 8009644:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009646:	2300      	movs	r3, #0
 8009648:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800964a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800964e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009650:	f107 0308 	add.w	r3, r7, #8
 8009654:	4619      	mov	r1, r3
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f7ff fe0c 	bl	8009274 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f000 fa29 	bl	8009ab4 <SDMMC_GetCmdResp3>
 8009662:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009664:	69fb      	ldr	r3, [r7, #28]
}
 8009666:	4618      	mov	r0, r3
 8009668:	3720      	adds	r7, #32
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
 800966e:	bf00      	nop
 8009670:	80100000 	.word	0x80100000

08009674 <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b088      	sub	sp, #32
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800967e:	2300      	movs	r3, #0
 8009680:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009686:	2306      	movs	r3, #6
 8009688:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800968a:	2340      	movs	r3, #64	; 0x40
 800968c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800968e:	2300      	movs	r3, #0
 8009690:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009692:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009696:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009698:	f107 0308 	add.w	r3, r7, #8
 800969c:	4619      	mov	r1, r3
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f7ff fde8 	bl	8009274 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80096a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80096a8:	2106      	movs	r1, #6
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f000 f8dc 	bl	8009868 <SDMMC_GetCmdResp1>
 80096b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80096b2:	69fb      	ldr	r3, [r7, #28]
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3720      	adds	r7, #32
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}

080096bc <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b088      	sub	sp, #32
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80096c4:	2300      	movs	r3, #0
 80096c6:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0;
 80096c8:	2300      	movs	r3, #0
 80096ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80096cc:	2333      	movs	r3, #51	; 0x33
 80096ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80096d0:	2340      	movs	r3, #64	; 0x40
 80096d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80096d4:	2300      	movs	r3, #0
 80096d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80096d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096dc:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80096de:	f107 0308 	add.w	r3, r7, #8
 80096e2:	4619      	mov	r1, r3
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f7ff fdc5 	bl	8009274 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80096ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80096ee:	2133      	movs	r1, #51	; 0x33
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f000 f8b9 	bl	8009868 <SDMMC_GetCmdResp1>
 80096f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80096f8:	69fb      	ldr	r3, [r7, #28]
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3720      	adds	r7, #32
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}

08009702 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8009702:	b580      	push	{r7, lr}
 8009704:	b088      	sub	sp, #32
 8009706:	af00      	add	r7, sp, #0
 8009708:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800970a:	2300      	movs	r3, #0
 800970c:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0;
 800970e:	2300      	movs	r3, #0
 8009710:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009712:	2302      	movs	r3, #2
 8009714:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009716:	23c0      	movs	r3, #192	; 0xc0
 8009718:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800971a:	2300      	movs	r3, #0
 800971c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800971e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009722:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009724:	f107 0308 	add.w	r3, r7, #8
 8009728:	4619      	mov	r1, r3
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f7ff fda2 	bl	8009274 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f000 f97f 	bl	8009a34 <SDMMC_GetCmdResp2>
 8009736:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009738:	69fb      	ldr	r3, [r7, #28]
}
 800973a:	4618      	mov	r0, r3
 800973c:	3720      	adds	r7, #32
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}

08009742 <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009742:	b580      	push	{r7, lr}
 8009744:	b088      	sub	sp, #32
 8009746:	af00      	add	r7, sp, #0
 8009748:	6078      	str	r0, [r7, #4]
 800974a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800974c:	2300      	movs	r3, #0
 800974e:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009754:	2309      	movs	r3, #9
 8009756:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009758:	23c0      	movs	r3, #192	; 0xc0
 800975a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800975c:	2300      	movs	r3, #0
 800975e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009760:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009764:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009766:	f107 0308 	add.w	r3, r7, #8
 800976a:	4619      	mov	r1, r3
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f7ff fd81 	bl	8009274 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f000 f95e 	bl	8009a34 <SDMMC_GetCmdResp2>
 8009778:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800977a:	69fb      	ldr	r3, [r7, #28]
}
 800977c:	4618      	mov	r0, r3
 800977e:	3720      	adds	r7, #32
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}

08009784 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b088      	sub	sp, #32
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800978e:	2300      	movs	r3, #0
 8009790:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0;
 8009792:	2300      	movs	r3, #0
 8009794:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009796:	2303      	movs	r3, #3
 8009798:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800979a:	2340      	movs	r3, #64	; 0x40
 800979c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800979e:	2300      	movs	r3, #0
 80097a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80097a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097a6:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80097a8:	f107 0308 	add.w	r3, r7, #8
 80097ac:	4619      	mov	r1, r3
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f7ff fd60 	bl	8009274 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80097b4:	683a      	ldr	r2, [r7, #0]
 80097b6:	2103      	movs	r1, #3
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f000 f9af 	bl	8009b1c <SDMMC_GetCmdResp6>
 80097be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80097c0:	69fb      	ldr	r3, [r7, #28]
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3720      	adds	r7, #32
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}

080097ca <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80097ca:	b580      	push	{r7, lr}
 80097cc:	b088      	sub	sp, #32
 80097ce:	af00      	add	r7, sp, #0
 80097d0:	6078      	str	r0, [r7, #4]
 80097d2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80097d4:	2300      	movs	r3, #0
 80097d6:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80097dc:	230d      	movs	r3, #13
 80097de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80097e0:	2340      	movs	r3, #64	; 0x40
 80097e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80097e4:	2300      	movs	r3, #0
 80097e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80097e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097ec:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80097ee:	f107 0308 	add.w	r3, r7, #8
 80097f2:	4619      	mov	r1, r3
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f7ff fd3d 	bl	8009274 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80097fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80097fe:	210d      	movs	r1, #13
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f000 f831 	bl	8009868 <SDMMC_GetCmdResp1>
 8009806:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009808:	69fb      	ldr	r3, [r7, #28]
}
 800980a:	4618      	mov	r0, r3
 800980c:	3720      	adds	r7, #32
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}
	...

08009814 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8009814:	b490      	push	{r4, r7}
 8009816:	b082      	sub	sp, #8
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800981c:	4b10      	ldr	r3, [pc, #64]	; (8009860 <SDMMC_GetCmdError+0x4c>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4a10      	ldr	r2, [pc, #64]	; (8009864 <SDMMC_GetCmdError+0x50>)
 8009822:	fba2 2303 	umull	r2, r3, r2, r3
 8009826:	0a5b      	lsrs	r3, r3, #9
 8009828:	f241 3288 	movw	r2, #5000	; 0x1388
 800982c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8009830:	4623      	mov	r3, r4
 8009832:	1e5c      	subs	r4, r3, #1
 8009834:	2b00      	cmp	r3, #0
 8009836:	d102      	bne.n	800983e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009838:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800983c:	e00a      	b.n	8009854 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009846:	2b00      	cmp	r3, #0
 8009848:	d0f2      	beq.n	8009830 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009850:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8009852:	2300      	movs	r3, #0
}
 8009854:	4618      	mov	r0, r3
 8009856:	3708      	adds	r7, #8
 8009858:	46bd      	mov	sp, r7
 800985a:	bc90      	pop	{r4, r7}
 800985c:	4770      	bx	lr
 800985e:	bf00      	nop
 8009860:	20000048 	.word	0x20000048
 8009864:	10624dd3 	.word	0x10624dd3

08009868 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009868:	b590      	push	{r4, r7, lr}
 800986a:	b087      	sub	sp, #28
 800986c:	af00      	add	r7, sp, #0
 800986e:	60f8      	str	r0, [r7, #12]
 8009870:	460b      	mov	r3, r1
 8009872:	607a      	str	r2, [r7, #4]
 8009874:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8009876:	4b6c      	ldr	r3, [pc, #432]	; (8009a28 <SDMMC_GetCmdResp1+0x1c0>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4a6c      	ldr	r2, [pc, #432]	; (8009a2c <SDMMC_GetCmdResp1+0x1c4>)
 800987c:	fba2 2303 	umull	r2, r3, r2, r3
 8009880:	0a5b      	lsrs	r3, r3, #9
 8009882:	687a      	ldr	r2, [r7, #4]
 8009884:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8009888:	4623      	mov	r3, r4
 800988a:	1e5c      	subs	r4, r3, #1
 800988c:	2b00      	cmp	r3, #0
 800988e:	d102      	bne.n	8009896 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009890:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009894:	e0c3      	b.n	8009a1e <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800989a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d0f2      	beq.n	8009888 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098a6:	f003 0304 	and.w	r3, r3, #4
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d004      	beq.n	80098b8 <SDMMC_GetCmdResp1+0x50>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	2204      	movs	r2, #4
 80098b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80098b4:	2304      	movs	r3, #4
 80098b6:	e0b2      	b.n	8009a1e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098bc:	f003 0301 	and.w	r3, r3, #1
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d004      	beq.n	80098ce <SDMMC_GetCmdResp1+0x66>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	2201      	movs	r2, #1
 80098c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80098ca:	2301      	movs	r3, #1
 80098cc:	e0a7      	b.n	8009a1e <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80098ce:	68f8      	ldr	r0, [r7, #12]
 80098d0:	f7ff fcfa 	bl	80092c8 <SDMMC_GetCommandResponse>
 80098d4:	4603      	mov	r3, r0
 80098d6:	461a      	mov	r2, r3
 80098d8:	7afb      	ldrb	r3, [r7, #11]
 80098da:	4293      	cmp	r3, r2
 80098dc:	d001      	beq.n	80098e2 <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80098de:	2301      	movs	r3, #1
 80098e0:	e09d      	b.n	8009a1e <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80098e8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80098ea:	2100      	movs	r1, #0
 80098ec:	68f8      	ldr	r0, [r7, #12]
 80098ee:	f7ff fcf8 	bl	80092e2 <SDMMC_GetResponse>
 80098f2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80098f4:	697a      	ldr	r2, [r7, #20]
 80098f6:	4b4e      	ldr	r3, [pc, #312]	; (8009a30 <SDMMC_GetCmdResp1+0x1c8>)
 80098f8:	4013      	ands	r3, r2
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d101      	bne.n	8009902 <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 80098fe:	2300      	movs	r3, #0
 8009900:	e08d      	b.n	8009a1e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	2b00      	cmp	r3, #0
 8009906:	da02      	bge.n	800990e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009908:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800990c:	e087      	b.n	8009a1e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009914:	2b00      	cmp	r3, #0
 8009916:	d001      	beq.n	800991c <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009918:	2340      	movs	r3, #64	; 0x40
 800991a:	e080      	b.n	8009a1e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009922:	2b00      	cmp	r3, #0
 8009924:	d001      	beq.n	800992a <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009926:	2380      	movs	r3, #128	; 0x80
 8009928:	e079      	b.n	8009a1e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009930:	2b00      	cmp	r3, #0
 8009932:	d002      	beq.n	800993a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009934:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009938:	e071      	b.n	8009a1e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009940:	2b00      	cmp	r3, #0
 8009942:	d002      	beq.n	800994a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009944:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009948:	e069      	b.n	8009a1e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009950:	2b00      	cmp	r3, #0
 8009952:	d002      	beq.n	800995a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009954:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009958:	e061      	b.n	8009a1e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009960:	2b00      	cmp	r3, #0
 8009962:	d002      	beq.n	800996a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009964:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009968:	e059      	b.n	8009a1e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009970:	2b00      	cmp	r3, #0
 8009972:	d002      	beq.n	800997a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009974:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009978:	e051      	b.n	8009a1e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009980:	2b00      	cmp	r3, #0
 8009982:	d002      	beq.n	800998a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009984:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009988:	e049      	b.n	8009a1e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800998a:	697b      	ldr	r3, [r7, #20]
 800998c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009990:	2b00      	cmp	r3, #0
 8009992:	d002      	beq.n	800999a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009994:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009998:	e041      	b.n	8009a1e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d002      	beq.n	80099aa <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 80099a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80099a8:	e039      	b.n	8009a1e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d002      	beq.n	80099ba <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80099b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80099b8:	e031      	b.n	8009a1e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d002      	beq.n	80099ca <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80099c4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80099c8:	e029      	b.n	8009a1e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d002      	beq.n	80099da <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80099d4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80099d8:	e021      	b.n	8009a1e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d002      	beq.n	80099ea <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80099e4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80099e8:	e019      	b.n	8009a1e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d002      	beq.n	80099fa <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80099f4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80099f8:	e011      	b.n	8009a1e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d002      	beq.n	8009a0a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009a04:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009a08:	e009      	b.n	8009a1e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	f003 0308 	and.w	r3, r3, #8
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d002      	beq.n	8009a1a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009a14:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009a18:	e001      	b.n	8009a1e <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009a1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	371c      	adds	r7, #28
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd90      	pop	{r4, r7, pc}
 8009a26:	bf00      	nop
 8009a28:	20000048 	.word	0x20000048
 8009a2c:	10624dd3 	.word	0x10624dd3
 8009a30:	fdffe008 	.word	0xfdffe008

08009a34 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8009a34:	b490      	push	{r4, r7}
 8009a36:	b082      	sub	sp, #8
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8009a3c:	4b1b      	ldr	r3, [pc, #108]	; (8009aac <SDMMC_GetCmdResp2+0x78>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4a1b      	ldr	r2, [pc, #108]	; (8009ab0 <SDMMC_GetCmdResp2+0x7c>)
 8009a42:	fba2 2303 	umull	r2, r3, r2, r3
 8009a46:	0a5b      	lsrs	r3, r3, #9
 8009a48:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a4c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8009a50:	4623      	mov	r3, r4
 8009a52:	1e5c      	subs	r4, r3, #1
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d102      	bne.n	8009a5e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009a58:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009a5c:	e020      	b.n	8009aa0 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a62:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d0f2      	beq.n	8009a50 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a6e:	f003 0304 	and.w	r3, r3, #4
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d004      	beq.n	8009a80 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2204      	movs	r2, #4
 8009a7a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009a7c:	2304      	movs	r3, #4
 8009a7e:	e00f      	b.n	8009aa0 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a84:	f003 0301 	and.w	r3, r3, #1
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d004      	beq.n	8009a96 <SDMMC_GetCmdResp2+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2201      	movs	r2, #1
 8009a90:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009a92:	2301      	movs	r3, #1
 8009a94:	e004      	b.n	8009aa0 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009a9c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009a9e:	2300      	movs	r3, #0
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3708      	adds	r7, #8
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bc90      	pop	{r4, r7}
 8009aa8:	4770      	bx	lr
 8009aaa:	bf00      	nop
 8009aac:	20000048 	.word	0x20000048
 8009ab0:	10624dd3 	.word	0x10624dd3

08009ab4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009ab4:	b490      	push	{r4, r7}
 8009ab6:	b082      	sub	sp, #8
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8009abc:	4b15      	ldr	r3, [pc, #84]	; (8009b14 <SDMMC_GetCmdResp3+0x60>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	4a15      	ldr	r2, [pc, #84]	; (8009b18 <SDMMC_GetCmdResp3+0x64>)
 8009ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ac6:	0a5b      	lsrs	r3, r3, #9
 8009ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009acc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8009ad0:	4623      	mov	r3, r4
 8009ad2:	1e5c      	subs	r4, r3, #1
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d102      	bne.n	8009ade <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009ad8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009adc:	e015      	b.n	8009b0a <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ae2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d0f2      	beq.n	8009ad0 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009aee:	f003 0304 	and.w	r3, r3, #4
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d004      	beq.n	8009b00 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2204      	movs	r2, #4
 8009afa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009afc:	2304      	movs	r3, #4
 8009afe:	e004      	b.n	8009b0a <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009b06:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009b08:	2300      	movs	r3, #0
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3708      	adds	r7, #8
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bc90      	pop	{r4, r7}
 8009b12:	4770      	bx	lr
 8009b14:	20000048 	.word	0x20000048
 8009b18:	10624dd3 	.word	0x10624dd3

08009b1c <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009b1c:	b590      	push	{r4, r7, lr}
 8009b1e:	b087      	sub	sp, #28
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	60f8      	str	r0, [r7, #12]
 8009b24:	460b      	mov	r3, r1
 8009b26:	607a      	str	r2, [r7, #4]
 8009b28:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8009b2a:	4b31      	ldr	r3, [pc, #196]	; (8009bf0 <SDMMC_GetCmdResp6+0xd4>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	4a31      	ldr	r2, [pc, #196]	; (8009bf4 <SDMMC_GetCmdResp6+0xd8>)
 8009b30:	fba2 2303 	umull	r2, r3, r2, r3
 8009b34:	0a5b      	lsrs	r3, r3, #9
 8009b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b3a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8009b3e:	4623      	mov	r3, r4
 8009b40:	1e5c      	subs	r4, r3, #1
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d102      	bne.n	8009b4c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009b46:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009b4a:	e04c      	b.n	8009be6 <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b50:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d0f2      	beq.n	8009b3e <SDMMC_GetCmdResp6+0x22>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b5c:	f003 0304 	and.w	r3, r3, #4
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d004      	beq.n	8009b6e <SDMMC_GetCmdResp6+0x52>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	2204      	movs	r2, #4
 8009b68:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009b6a:	2304      	movs	r3, #4
 8009b6c:	e03b      	b.n	8009be6 <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b72:	f003 0301 	and.w	r3, r3, #1
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d004      	beq.n	8009b84 <SDMMC_GetCmdResp6+0x68>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	2201      	movs	r2, #1
 8009b7e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009b80:	2301      	movs	r3, #1
 8009b82:	e030      	b.n	8009be6 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009b84:	68f8      	ldr	r0, [r7, #12]
 8009b86:	f7ff fb9f 	bl	80092c8 <SDMMC_GetCommandResponse>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	461a      	mov	r2, r3
 8009b8e:	7afb      	ldrb	r3, [r7, #11]
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d001      	beq.n	8009b98 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009b94:	2301      	movs	r3, #1
 8009b96:	e026      	b.n	8009be6 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009b9e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009ba0:	2100      	movs	r1, #0
 8009ba2:	68f8      	ldr	r0, [r7, #12]
 8009ba4:	f7ff fb9d 	bl	80092e2 <SDMMC_GetResponse>
 8009ba8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d106      	bne.n	8009bc2 <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	0c1b      	lsrs	r3, r3, #16
 8009bb8:	b29a      	uxth	r2, r3
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	e011      	b.n	8009be6 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009bc2:	697b      	ldr	r3, [r7, #20]
 8009bc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d002      	beq.n	8009bd2 <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009bcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009bd0:	e009      	b.n	8009be6 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d002      	beq.n	8009be2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009bdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009be0:	e001      	b.n	8009be6 <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009be2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	371c      	adds	r7, #28
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd90      	pop	{r4, r7, pc}
 8009bee:	bf00      	nop
 8009bf0:	20000048 	.word	0x20000048
 8009bf4:	10624dd3 	.word	0x10624dd3

08009bf8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8009bf8:	b490      	push	{r4, r7}
 8009bfa:	b082      	sub	sp, #8
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8009c00:	4b18      	ldr	r3, [pc, #96]	; (8009c64 <SDMMC_GetCmdResp7+0x6c>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4a18      	ldr	r2, [pc, #96]	; (8009c68 <SDMMC_GetCmdResp7+0x70>)
 8009c06:	fba2 2303 	umull	r2, r3, r2, r3
 8009c0a:	0a5b      	lsrs	r3, r3, #9
 8009c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c10:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8009c14:	4623      	mov	r3, r4
 8009c16:	1e5c      	subs	r4, r3, #1
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d102      	bne.n	8009c22 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009c1c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009c20:	e01a      	b.n	8009c58 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c26:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d0f2      	beq.n	8009c14 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c32:	f003 0304 	and.w	r3, r3, #4
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d004      	beq.n	8009c44 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2240      	movs	r2, #64	; 0x40
 8009c3e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009c40:	2304      	movs	r3, #4
 8009c42:	e009      	b.n	8009c58 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d002      	beq.n	8009c56 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2240      	movs	r2, #64	; 0x40
 8009c54:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009c56:	2300      	movs	r3, #0
  
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	3708      	adds	r7, #8
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bc90      	pop	{r4, r7}
 8009c60:	4770      	bx	lr
 8009c62:	bf00      	nop
 8009c64:	20000048 	.word	0x20000048
 8009c68:	10624dd3 	.word	0x10624dd3

08009c6c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b084      	sub	sp, #16
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	4603      	mov	r3, r0
 8009c74:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009c76:	79fb      	ldrb	r3, [r7, #7]
 8009c78:	4a08      	ldr	r2, [pc, #32]	; (8009c9c <disk_status+0x30>)
 8009c7a:	009b      	lsls	r3, r3, #2
 8009c7c:	4413      	add	r3, r2
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	685b      	ldr	r3, [r3, #4]
 8009c82:	79fa      	ldrb	r2, [r7, #7]
 8009c84:	4905      	ldr	r1, [pc, #20]	; (8009c9c <disk_status+0x30>)
 8009c86:	440a      	add	r2, r1
 8009c88:	7a12      	ldrb	r2, [r2, #8]
 8009c8a:	4610      	mov	r0, r2
 8009c8c:	4798      	blx	r3
 8009c8e:	4603      	mov	r3, r0
 8009c90:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3710      	adds	r7, #16
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}
 8009c9c:	20000304 	.word	0x20000304

08009ca0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b084      	sub	sp, #16
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009caa:	2300      	movs	r3, #0
 8009cac:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009cae:	79fb      	ldrb	r3, [r7, #7]
 8009cb0:	4a0d      	ldr	r2, [pc, #52]	; (8009ce8 <disk_initialize+0x48>)
 8009cb2:	5cd3      	ldrb	r3, [r2, r3]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d111      	bne.n	8009cdc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009cb8:	79fb      	ldrb	r3, [r7, #7]
 8009cba:	4a0b      	ldr	r2, [pc, #44]	; (8009ce8 <disk_initialize+0x48>)
 8009cbc:	2101      	movs	r1, #1
 8009cbe:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009cc0:	79fb      	ldrb	r3, [r7, #7]
 8009cc2:	4a09      	ldr	r2, [pc, #36]	; (8009ce8 <disk_initialize+0x48>)
 8009cc4:	009b      	lsls	r3, r3, #2
 8009cc6:	4413      	add	r3, r2
 8009cc8:	685b      	ldr	r3, [r3, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	79fa      	ldrb	r2, [r7, #7]
 8009cce:	4906      	ldr	r1, [pc, #24]	; (8009ce8 <disk_initialize+0x48>)
 8009cd0:	440a      	add	r2, r1
 8009cd2:	7a12      	ldrb	r2, [r2, #8]
 8009cd4:	4610      	mov	r0, r2
 8009cd6:	4798      	blx	r3
 8009cd8:	4603      	mov	r3, r0
 8009cda:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3710      	adds	r7, #16
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	bf00      	nop
 8009ce8:	20000304 	.word	0x20000304

08009cec <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009cec:	b590      	push	{r4, r7, lr}
 8009cee:	b087      	sub	sp, #28
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	60b9      	str	r1, [r7, #8]
 8009cf4:	607a      	str	r2, [r7, #4]
 8009cf6:	603b      	str	r3, [r7, #0]
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009cfc:	7bfb      	ldrb	r3, [r7, #15]
 8009cfe:	4a0a      	ldr	r2, [pc, #40]	; (8009d28 <disk_read+0x3c>)
 8009d00:	009b      	lsls	r3, r3, #2
 8009d02:	4413      	add	r3, r2
 8009d04:	685b      	ldr	r3, [r3, #4]
 8009d06:	689c      	ldr	r4, [r3, #8]
 8009d08:	7bfb      	ldrb	r3, [r7, #15]
 8009d0a:	4a07      	ldr	r2, [pc, #28]	; (8009d28 <disk_read+0x3c>)
 8009d0c:	4413      	add	r3, r2
 8009d0e:	7a18      	ldrb	r0, [r3, #8]
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	687a      	ldr	r2, [r7, #4]
 8009d14:	68b9      	ldr	r1, [r7, #8]
 8009d16:	47a0      	blx	r4
 8009d18:	4603      	mov	r3, r0
 8009d1a:	75fb      	strb	r3, [r7, #23]
  return res;
 8009d1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	371c      	adds	r7, #28
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd90      	pop	{r4, r7, pc}
 8009d26:	bf00      	nop
 8009d28:	20000304 	.word	0x20000304

08009d2c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009d2c:	b590      	push	{r4, r7, lr}
 8009d2e:	b087      	sub	sp, #28
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	60b9      	str	r1, [r7, #8]
 8009d34:	607a      	str	r2, [r7, #4]
 8009d36:	603b      	str	r3, [r7, #0]
 8009d38:	4603      	mov	r3, r0
 8009d3a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009d3c:	7bfb      	ldrb	r3, [r7, #15]
 8009d3e:	4a0a      	ldr	r2, [pc, #40]	; (8009d68 <disk_write+0x3c>)
 8009d40:	009b      	lsls	r3, r3, #2
 8009d42:	4413      	add	r3, r2
 8009d44:	685b      	ldr	r3, [r3, #4]
 8009d46:	68dc      	ldr	r4, [r3, #12]
 8009d48:	7bfb      	ldrb	r3, [r7, #15]
 8009d4a:	4a07      	ldr	r2, [pc, #28]	; (8009d68 <disk_write+0x3c>)
 8009d4c:	4413      	add	r3, r2
 8009d4e:	7a18      	ldrb	r0, [r3, #8]
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	687a      	ldr	r2, [r7, #4]
 8009d54:	68b9      	ldr	r1, [r7, #8]
 8009d56:	47a0      	blx	r4
 8009d58:	4603      	mov	r3, r0
 8009d5a:	75fb      	strb	r3, [r7, #23]
  return res;
 8009d5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	371c      	adds	r7, #28
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd90      	pop	{r4, r7, pc}
 8009d66:	bf00      	nop
 8009d68:	20000304 	.word	0x20000304

08009d6c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b084      	sub	sp, #16
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	4603      	mov	r3, r0
 8009d74:	603a      	str	r2, [r7, #0]
 8009d76:	71fb      	strb	r3, [r7, #7]
 8009d78:	460b      	mov	r3, r1
 8009d7a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009d7c:	79fb      	ldrb	r3, [r7, #7]
 8009d7e:	4a09      	ldr	r2, [pc, #36]	; (8009da4 <disk_ioctl+0x38>)
 8009d80:	009b      	lsls	r3, r3, #2
 8009d82:	4413      	add	r3, r2
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	691b      	ldr	r3, [r3, #16]
 8009d88:	79fa      	ldrb	r2, [r7, #7]
 8009d8a:	4906      	ldr	r1, [pc, #24]	; (8009da4 <disk_ioctl+0x38>)
 8009d8c:	440a      	add	r2, r1
 8009d8e:	7a10      	ldrb	r0, [r2, #8]
 8009d90:	79b9      	ldrb	r1, [r7, #6]
 8009d92:	683a      	ldr	r2, [r7, #0]
 8009d94:	4798      	blx	r3
 8009d96:	4603      	mov	r3, r0
 8009d98:	73fb      	strb	r3, [r7, #15]
  return res;
 8009d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	3710      	adds	r7, #16
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}
 8009da4:	20000304 	.word	0x20000304

08009da8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009da8:	b480      	push	{r7}
 8009daa:	b085      	sub	sp, #20
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	3301      	adds	r3, #1
 8009db4:	781b      	ldrb	r3, [r3, #0]
 8009db6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009db8:	89fb      	ldrh	r3, [r7, #14]
 8009dba:	021b      	lsls	r3, r3, #8
 8009dbc:	b21a      	sxth	r2, r3
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	781b      	ldrb	r3, [r3, #0]
 8009dc2:	b21b      	sxth	r3, r3
 8009dc4:	4313      	orrs	r3, r2
 8009dc6:	b21b      	sxth	r3, r3
 8009dc8:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009dca:	89fb      	ldrh	r3, [r7, #14]
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3714      	adds	r7, #20
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd6:	4770      	bx	lr

08009dd8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b085      	sub	sp, #20
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	3303      	adds	r3, #3
 8009de4:	781b      	ldrb	r3, [r3, #0]
 8009de6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	021b      	lsls	r3, r3, #8
 8009dec:	687a      	ldr	r2, [r7, #4]
 8009dee:	3202      	adds	r2, #2
 8009df0:	7812      	ldrb	r2, [r2, #0]
 8009df2:	4313      	orrs	r3, r2
 8009df4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	021b      	lsls	r3, r3, #8
 8009dfa:	687a      	ldr	r2, [r7, #4]
 8009dfc:	3201      	adds	r2, #1
 8009dfe:	7812      	ldrb	r2, [r2, #0]
 8009e00:	4313      	orrs	r3, r2
 8009e02:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	021b      	lsls	r3, r3, #8
 8009e08:	687a      	ldr	r2, [r7, #4]
 8009e0a:	7812      	ldrb	r2, [r2, #0]
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	60fb      	str	r3, [r7, #12]
	return rv;
 8009e10:	68fb      	ldr	r3, [r7, #12]
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3714      	adds	r7, #20
 8009e16:	46bd      	mov	sp, r7
 8009e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1c:	4770      	bx	lr

08009e1e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009e1e:	b480      	push	{r7}
 8009e20:	b083      	sub	sp, #12
 8009e22:	af00      	add	r7, sp, #0
 8009e24:	6078      	str	r0, [r7, #4]
 8009e26:	460b      	mov	r3, r1
 8009e28:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	1c5a      	adds	r2, r3, #1
 8009e2e:	607a      	str	r2, [r7, #4]
 8009e30:	887a      	ldrh	r2, [r7, #2]
 8009e32:	b2d2      	uxtb	r2, r2
 8009e34:	701a      	strb	r2, [r3, #0]
 8009e36:	887b      	ldrh	r3, [r7, #2]
 8009e38:	0a1b      	lsrs	r3, r3, #8
 8009e3a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	1c5a      	adds	r2, r3, #1
 8009e40:	607a      	str	r2, [r7, #4]
 8009e42:	887a      	ldrh	r2, [r7, #2]
 8009e44:	b2d2      	uxtb	r2, r2
 8009e46:	701a      	strb	r2, [r3, #0]
}
 8009e48:	bf00      	nop
 8009e4a:	370c      	adds	r7, #12
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e52:	4770      	bx	lr

08009e54 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009e54:	b480      	push	{r7}
 8009e56:	b083      	sub	sp, #12
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	1c5a      	adds	r2, r3, #1
 8009e62:	607a      	str	r2, [r7, #4]
 8009e64:	683a      	ldr	r2, [r7, #0]
 8009e66:	b2d2      	uxtb	r2, r2
 8009e68:	701a      	strb	r2, [r3, #0]
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	0a1b      	lsrs	r3, r3, #8
 8009e6e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	1c5a      	adds	r2, r3, #1
 8009e74:	607a      	str	r2, [r7, #4]
 8009e76:	683a      	ldr	r2, [r7, #0]
 8009e78:	b2d2      	uxtb	r2, r2
 8009e7a:	701a      	strb	r2, [r3, #0]
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	0a1b      	lsrs	r3, r3, #8
 8009e80:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	1c5a      	adds	r2, r3, #1
 8009e86:	607a      	str	r2, [r7, #4]
 8009e88:	683a      	ldr	r2, [r7, #0]
 8009e8a:	b2d2      	uxtb	r2, r2
 8009e8c:	701a      	strb	r2, [r3, #0]
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	0a1b      	lsrs	r3, r3, #8
 8009e92:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	1c5a      	adds	r2, r3, #1
 8009e98:	607a      	str	r2, [r7, #4]
 8009e9a:	683a      	ldr	r2, [r7, #0]
 8009e9c:	b2d2      	uxtb	r2, r2
 8009e9e:	701a      	strb	r2, [r3, #0]
}
 8009ea0:	bf00      	nop
 8009ea2:	370c      	adds	r7, #12
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eaa:	4770      	bx	lr

08009eac <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009eac:	b480      	push	{r7}
 8009eae:	b087      	sub	sp, #28
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	60f8      	str	r0, [r7, #12]
 8009eb4:	60b9      	str	r1, [r7, #8]
 8009eb6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d00d      	beq.n	8009ee2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009ec6:	693a      	ldr	r2, [r7, #16]
 8009ec8:	1c53      	adds	r3, r2, #1
 8009eca:	613b      	str	r3, [r7, #16]
 8009ecc:	697b      	ldr	r3, [r7, #20]
 8009ece:	1c59      	adds	r1, r3, #1
 8009ed0:	6179      	str	r1, [r7, #20]
 8009ed2:	7812      	ldrb	r2, [r2, #0]
 8009ed4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	3b01      	subs	r3, #1
 8009eda:	607b      	str	r3, [r7, #4]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d1f1      	bne.n	8009ec6 <mem_cpy+0x1a>
	}
}
 8009ee2:	bf00      	nop
 8009ee4:	371c      	adds	r7, #28
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eec:	4770      	bx	lr

08009eee <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009eee:	b480      	push	{r7}
 8009ef0:	b087      	sub	sp, #28
 8009ef2:	af00      	add	r7, sp, #0
 8009ef4:	60f8      	str	r0, [r7, #12]
 8009ef6:	60b9      	str	r1, [r7, #8]
 8009ef8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	1c5a      	adds	r2, r3, #1
 8009f02:	617a      	str	r2, [r7, #20]
 8009f04:	68ba      	ldr	r2, [r7, #8]
 8009f06:	b2d2      	uxtb	r2, r2
 8009f08:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	3b01      	subs	r3, #1
 8009f0e:	607b      	str	r3, [r7, #4]
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d1f3      	bne.n	8009efe <mem_set+0x10>
}
 8009f16:	bf00      	nop
 8009f18:	371c      	adds	r7, #28
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f20:	4770      	bx	lr

08009f22 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009f22:	b480      	push	{r7}
 8009f24:	b089      	sub	sp, #36	; 0x24
 8009f26:	af00      	add	r7, sp, #0
 8009f28:	60f8      	str	r0, [r7, #12]
 8009f2a:	60b9      	str	r1, [r7, #8]
 8009f2c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	61fb      	str	r3, [r7, #28]
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009f36:	2300      	movs	r3, #0
 8009f38:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009f3a:	69fb      	ldr	r3, [r7, #28]
 8009f3c:	1c5a      	adds	r2, r3, #1
 8009f3e:	61fa      	str	r2, [r7, #28]
 8009f40:	781b      	ldrb	r3, [r3, #0]
 8009f42:	4619      	mov	r1, r3
 8009f44:	69bb      	ldr	r3, [r7, #24]
 8009f46:	1c5a      	adds	r2, r3, #1
 8009f48:	61ba      	str	r2, [r7, #24]
 8009f4a:	781b      	ldrb	r3, [r3, #0]
 8009f4c:	1acb      	subs	r3, r1, r3
 8009f4e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	3b01      	subs	r3, #1
 8009f54:	607b      	str	r3, [r7, #4]
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d002      	beq.n	8009f62 <mem_cmp+0x40>
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d0eb      	beq.n	8009f3a <mem_cmp+0x18>

	return r;
 8009f62:	697b      	ldr	r3, [r7, #20]
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	3724      	adds	r7, #36	; 0x24
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6e:	4770      	bx	lr

08009f70 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009f70:	b480      	push	{r7}
 8009f72:	b083      	sub	sp, #12
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
 8009f78:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009f7a:	e002      	b.n	8009f82 <chk_chr+0x12>
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	3301      	adds	r3, #1
 8009f80:	607b      	str	r3, [r7, #4]
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	781b      	ldrb	r3, [r3, #0]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d005      	beq.n	8009f96 <chk_chr+0x26>
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	781b      	ldrb	r3, [r3, #0]
 8009f8e:	461a      	mov	r2, r3
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	4293      	cmp	r3, r2
 8009f94:	d1f2      	bne.n	8009f7c <chk_chr+0xc>
	return *str;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	781b      	ldrb	r3, [r3, #0]
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	370c      	adds	r7, #12
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa4:	4770      	bx	lr
	...

08009fa8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b085      	sub	sp, #20
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
 8009fb0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	60bb      	str	r3, [r7, #8]
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	60fb      	str	r3, [r7, #12]
 8009fba:	e029      	b.n	800a010 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009fbc:	4a27      	ldr	r2, [pc, #156]	; (800a05c <chk_lock+0xb4>)
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	011b      	lsls	r3, r3, #4
 8009fc2:	4413      	add	r3, r2
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d01d      	beq.n	800a006 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009fca:	4a24      	ldr	r2, [pc, #144]	; (800a05c <chk_lock+0xb4>)
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	011b      	lsls	r3, r3, #4
 8009fd0:	4413      	add	r3, r2
 8009fd2:	681a      	ldr	r2, [r3, #0]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	429a      	cmp	r2, r3
 8009fda:	d116      	bne.n	800a00a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009fdc:	4a1f      	ldr	r2, [pc, #124]	; (800a05c <chk_lock+0xb4>)
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	011b      	lsls	r3, r3, #4
 8009fe2:	4413      	add	r3, r2
 8009fe4:	3304      	adds	r3, #4
 8009fe6:	681a      	ldr	r2, [r3, #0]
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009fec:	429a      	cmp	r2, r3
 8009fee:	d10c      	bne.n	800a00a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009ff0:	4a1a      	ldr	r2, [pc, #104]	; (800a05c <chk_lock+0xb4>)
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	011b      	lsls	r3, r3, #4
 8009ff6:	4413      	add	r3, r2
 8009ff8:	3308      	adds	r3, #8
 8009ffa:	681a      	ldr	r2, [r3, #0]
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a000:	429a      	cmp	r2, r3
 800a002:	d102      	bne.n	800a00a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a004:	e007      	b.n	800a016 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a006:	2301      	movs	r3, #1
 800a008:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	3301      	adds	r3, #1
 800a00e:	60fb      	str	r3, [r7, #12]
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	2b01      	cmp	r3, #1
 800a014:	d9d2      	bls.n	8009fbc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	2b02      	cmp	r3, #2
 800a01a:	d109      	bne.n	800a030 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d102      	bne.n	800a028 <chk_lock+0x80>
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	2b02      	cmp	r3, #2
 800a026:	d101      	bne.n	800a02c <chk_lock+0x84>
 800a028:	2300      	movs	r3, #0
 800a02a:	e010      	b.n	800a04e <chk_lock+0xa6>
 800a02c:	2312      	movs	r3, #18
 800a02e:	e00e      	b.n	800a04e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d108      	bne.n	800a048 <chk_lock+0xa0>
 800a036:	4a09      	ldr	r2, [pc, #36]	; (800a05c <chk_lock+0xb4>)
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	011b      	lsls	r3, r3, #4
 800a03c:	4413      	add	r3, r2
 800a03e:	330c      	adds	r3, #12
 800a040:	881b      	ldrh	r3, [r3, #0]
 800a042:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a046:	d101      	bne.n	800a04c <chk_lock+0xa4>
 800a048:	2310      	movs	r3, #16
 800a04a:	e000      	b.n	800a04e <chk_lock+0xa6>
 800a04c:	2300      	movs	r3, #0
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3714      	adds	r7, #20
 800a052:	46bd      	mov	sp, r7
 800a054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a058:	4770      	bx	lr
 800a05a:	bf00      	nop
 800a05c:	200002e4 	.word	0x200002e4

0800a060 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a060:	b480      	push	{r7}
 800a062:	b083      	sub	sp, #12
 800a064:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a066:	2300      	movs	r3, #0
 800a068:	607b      	str	r3, [r7, #4]
 800a06a:	e002      	b.n	800a072 <enq_lock+0x12>
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	3301      	adds	r3, #1
 800a070:	607b      	str	r3, [r7, #4]
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2b01      	cmp	r3, #1
 800a076:	d806      	bhi.n	800a086 <enq_lock+0x26>
 800a078:	4a09      	ldr	r2, [pc, #36]	; (800a0a0 <enq_lock+0x40>)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	011b      	lsls	r3, r3, #4
 800a07e:	4413      	add	r3, r2
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d1f2      	bne.n	800a06c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2b02      	cmp	r3, #2
 800a08a:	bf14      	ite	ne
 800a08c:	2301      	movne	r3, #1
 800a08e:	2300      	moveq	r3, #0
 800a090:	b2db      	uxtb	r3, r3
}
 800a092:	4618      	mov	r0, r3
 800a094:	370c      	adds	r7, #12
 800a096:	46bd      	mov	sp, r7
 800a098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09c:	4770      	bx	lr
 800a09e:	bf00      	nop
 800a0a0:	200002e4 	.word	0x200002e4

0800a0a4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b085      	sub	sp, #20
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
 800a0ac:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	60fb      	str	r3, [r7, #12]
 800a0b2:	e01f      	b.n	800a0f4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a0b4:	4a41      	ldr	r2, [pc, #260]	; (800a1bc <inc_lock+0x118>)
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	011b      	lsls	r3, r3, #4
 800a0ba:	4413      	add	r3, r2
 800a0bc:	681a      	ldr	r2, [r3, #0]
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	429a      	cmp	r2, r3
 800a0c4:	d113      	bne.n	800a0ee <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a0c6:	4a3d      	ldr	r2, [pc, #244]	; (800a1bc <inc_lock+0x118>)
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	011b      	lsls	r3, r3, #4
 800a0cc:	4413      	add	r3, r2
 800a0ce:	3304      	adds	r3, #4
 800a0d0:	681a      	ldr	r2, [r3, #0]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	d109      	bne.n	800a0ee <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a0da:	4a38      	ldr	r2, [pc, #224]	; (800a1bc <inc_lock+0x118>)
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	011b      	lsls	r3, r3, #4
 800a0e0:	4413      	add	r3, r2
 800a0e2:	3308      	adds	r3, #8
 800a0e4:	681a      	ldr	r2, [r3, #0]
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a0ea:	429a      	cmp	r2, r3
 800a0ec:	d006      	beq.n	800a0fc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	3301      	adds	r3, #1
 800a0f2:	60fb      	str	r3, [r7, #12]
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	2b01      	cmp	r3, #1
 800a0f8:	d9dc      	bls.n	800a0b4 <inc_lock+0x10>
 800a0fa:	e000      	b.n	800a0fe <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a0fc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	2b02      	cmp	r3, #2
 800a102:	d132      	bne.n	800a16a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a104:	2300      	movs	r3, #0
 800a106:	60fb      	str	r3, [r7, #12]
 800a108:	e002      	b.n	800a110 <inc_lock+0x6c>
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	3301      	adds	r3, #1
 800a10e:	60fb      	str	r3, [r7, #12]
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2b01      	cmp	r3, #1
 800a114:	d806      	bhi.n	800a124 <inc_lock+0x80>
 800a116:	4a29      	ldr	r2, [pc, #164]	; (800a1bc <inc_lock+0x118>)
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	011b      	lsls	r3, r3, #4
 800a11c:	4413      	add	r3, r2
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d1f2      	bne.n	800a10a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	2b02      	cmp	r3, #2
 800a128:	d101      	bne.n	800a12e <inc_lock+0x8a>
 800a12a:	2300      	movs	r3, #0
 800a12c:	e040      	b.n	800a1b0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681a      	ldr	r2, [r3, #0]
 800a132:	4922      	ldr	r1, [pc, #136]	; (800a1bc <inc_lock+0x118>)
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	011b      	lsls	r3, r3, #4
 800a138:	440b      	add	r3, r1
 800a13a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	689a      	ldr	r2, [r3, #8]
 800a140:	491e      	ldr	r1, [pc, #120]	; (800a1bc <inc_lock+0x118>)
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	011b      	lsls	r3, r3, #4
 800a146:	440b      	add	r3, r1
 800a148:	3304      	adds	r3, #4
 800a14a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	695a      	ldr	r2, [r3, #20]
 800a150:	491a      	ldr	r1, [pc, #104]	; (800a1bc <inc_lock+0x118>)
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	011b      	lsls	r3, r3, #4
 800a156:	440b      	add	r3, r1
 800a158:	3308      	adds	r3, #8
 800a15a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a15c:	4a17      	ldr	r2, [pc, #92]	; (800a1bc <inc_lock+0x118>)
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	011b      	lsls	r3, r3, #4
 800a162:	4413      	add	r3, r2
 800a164:	330c      	adds	r3, #12
 800a166:	2200      	movs	r2, #0
 800a168:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d009      	beq.n	800a184 <inc_lock+0xe0>
 800a170:	4a12      	ldr	r2, [pc, #72]	; (800a1bc <inc_lock+0x118>)
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	011b      	lsls	r3, r3, #4
 800a176:	4413      	add	r3, r2
 800a178:	330c      	adds	r3, #12
 800a17a:	881b      	ldrh	r3, [r3, #0]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d001      	beq.n	800a184 <inc_lock+0xe0>
 800a180:	2300      	movs	r3, #0
 800a182:	e015      	b.n	800a1b0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d108      	bne.n	800a19c <inc_lock+0xf8>
 800a18a:	4a0c      	ldr	r2, [pc, #48]	; (800a1bc <inc_lock+0x118>)
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	011b      	lsls	r3, r3, #4
 800a190:	4413      	add	r3, r2
 800a192:	330c      	adds	r3, #12
 800a194:	881b      	ldrh	r3, [r3, #0]
 800a196:	3301      	adds	r3, #1
 800a198:	b29a      	uxth	r2, r3
 800a19a:	e001      	b.n	800a1a0 <inc_lock+0xfc>
 800a19c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a1a0:	4906      	ldr	r1, [pc, #24]	; (800a1bc <inc_lock+0x118>)
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	011b      	lsls	r3, r3, #4
 800a1a6:	440b      	add	r3, r1
 800a1a8:	330c      	adds	r3, #12
 800a1aa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	3301      	adds	r3, #1
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3714      	adds	r7, #20
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ba:	4770      	bx	lr
 800a1bc:	200002e4 	.word	0x200002e4

0800a1c0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b085      	sub	sp, #20
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	3b01      	subs	r3, #1
 800a1cc:	607b      	str	r3, [r7, #4]
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2b01      	cmp	r3, #1
 800a1d2:	d825      	bhi.n	800a220 <dec_lock+0x60>
		n = Files[i].ctr;
 800a1d4:	4a17      	ldr	r2, [pc, #92]	; (800a234 <dec_lock+0x74>)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	011b      	lsls	r3, r3, #4
 800a1da:	4413      	add	r3, r2
 800a1dc:	330c      	adds	r3, #12
 800a1de:	881b      	ldrh	r3, [r3, #0]
 800a1e0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a1e2:	89fb      	ldrh	r3, [r7, #14]
 800a1e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1e8:	d101      	bne.n	800a1ee <dec_lock+0x2e>
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a1ee:	89fb      	ldrh	r3, [r7, #14]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d002      	beq.n	800a1fa <dec_lock+0x3a>
 800a1f4:	89fb      	ldrh	r3, [r7, #14]
 800a1f6:	3b01      	subs	r3, #1
 800a1f8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a1fa:	4a0e      	ldr	r2, [pc, #56]	; (800a234 <dec_lock+0x74>)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	011b      	lsls	r3, r3, #4
 800a200:	4413      	add	r3, r2
 800a202:	330c      	adds	r3, #12
 800a204:	89fa      	ldrh	r2, [r7, #14]
 800a206:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a208:	89fb      	ldrh	r3, [r7, #14]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d105      	bne.n	800a21a <dec_lock+0x5a>
 800a20e:	4a09      	ldr	r2, [pc, #36]	; (800a234 <dec_lock+0x74>)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	011b      	lsls	r3, r3, #4
 800a214:	4413      	add	r3, r2
 800a216:	2200      	movs	r2, #0
 800a218:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a21a:	2300      	movs	r3, #0
 800a21c:	737b      	strb	r3, [r7, #13]
 800a21e:	e001      	b.n	800a224 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a220:	2302      	movs	r3, #2
 800a222:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a224:	7b7b      	ldrb	r3, [r7, #13]
}
 800a226:	4618      	mov	r0, r3
 800a228:	3714      	adds	r7, #20
 800a22a:	46bd      	mov	sp, r7
 800a22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a230:	4770      	bx	lr
 800a232:	bf00      	nop
 800a234:	200002e4 	.word	0x200002e4

0800a238 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a238:	b480      	push	{r7}
 800a23a:	b085      	sub	sp, #20
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a240:	2300      	movs	r3, #0
 800a242:	60fb      	str	r3, [r7, #12]
 800a244:	e010      	b.n	800a268 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a246:	4a0d      	ldr	r2, [pc, #52]	; (800a27c <clear_lock+0x44>)
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	011b      	lsls	r3, r3, #4
 800a24c:	4413      	add	r3, r2
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	687a      	ldr	r2, [r7, #4]
 800a252:	429a      	cmp	r2, r3
 800a254:	d105      	bne.n	800a262 <clear_lock+0x2a>
 800a256:	4a09      	ldr	r2, [pc, #36]	; (800a27c <clear_lock+0x44>)
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	011b      	lsls	r3, r3, #4
 800a25c:	4413      	add	r3, r2
 800a25e:	2200      	movs	r2, #0
 800a260:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	3301      	adds	r3, #1
 800a266:	60fb      	str	r3, [r7, #12]
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2b01      	cmp	r3, #1
 800a26c:	d9eb      	bls.n	800a246 <clear_lock+0xe>
	}
}
 800a26e:	bf00      	nop
 800a270:	3714      	adds	r7, #20
 800a272:	46bd      	mov	sp, r7
 800a274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a278:	4770      	bx	lr
 800a27a:	bf00      	nop
 800a27c:	200002e4 	.word	0x200002e4

0800a280 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b086      	sub	sp, #24
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a288:	2300      	movs	r3, #0
 800a28a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	78db      	ldrb	r3, [r3, #3]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d034      	beq.n	800a2fe <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a298:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	7858      	ldrb	r0, [r3, #1]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	697a      	ldr	r2, [r7, #20]
 800a2a8:	f7ff fd40 	bl	8009d2c <disk_write>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d002      	beq.n	800a2b8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	73fb      	strb	r3, [r7, #15]
 800a2b6:	e022      	b.n	800a2fe <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6a1b      	ldr	r3, [r3, #32]
 800a2c2:	697a      	ldr	r2, [r7, #20]
 800a2c4:	1ad2      	subs	r2, r2, r3
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	699b      	ldr	r3, [r3, #24]
 800a2ca:	429a      	cmp	r2, r3
 800a2cc:	d217      	bcs.n	800a2fe <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	789b      	ldrb	r3, [r3, #2]
 800a2d2:	613b      	str	r3, [r7, #16]
 800a2d4:	e010      	b.n	800a2f8 <sync_window+0x78>
					wsect += fs->fsize;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	699b      	ldr	r3, [r3, #24]
 800a2da:	697a      	ldr	r2, [r7, #20]
 800a2dc:	4413      	add	r3, r2
 800a2de:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	7858      	ldrb	r0, [r3, #1]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	697a      	ldr	r2, [r7, #20]
 800a2ee:	f7ff fd1d 	bl	8009d2c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	3b01      	subs	r3, #1
 800a2f6:	613b      	str	r3, [r7, #16]
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	2b01      	cmp	r3, #1
 800a2fc:	d8eb      	bhi.n	800a2d6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a2fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800a300:	4618      	mov	r0, r3
 800a302:	3718      	adds	r7, #24
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}

0800a308 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b084      	sub	sp, #16
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a312:	2300      	movs	r3, #0
 800a314:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a31a:	683a      	ldr	r2, [r7, #0]
 800a31c:	429a      	cmp	r2, r3
 800a31e:	d01b      	beq.n	800a358 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f7ff ffad 	bl	800a280 <sync_window>
 800a326:	4603      	mov	r3, r0
 800a328:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a32a:	7bfb      	ldrb	r3, [r7, #15]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d113      	bne.n	800a358 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	7858      	ldrb	r0, [r3, #1]
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a33a:	2301      	movs	r3, #1
 800a33c:	683a      	ldr	r2, [r7, #0]
 800a33e:	f7ff fcd5 	bl	8009cec <disk_read>
 800a342:	4603      	mov	r3, r0
 800a344:	2b00      	cmp	r3, #0
 800a346:	d004      	beq.n	800a352 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a348:	f04f 33ff 	mov.w	r3, #4294967295
 800a34c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a34e:	2301      	movs	r3, #1
 800a350:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	683a      	ldr	r2, [r7, #0]
 800a356:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800a358:	7bfb      	ldrb	r3, [r7, #15]
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3710      	adds	r7, #16
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}
	...

0800a364 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b084      	sub	sp, #16
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f7ff ff87 	bl	800a280 <sync_window>
 800a372:	4603      	mov	r3, r0
 800a374:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a376:	7bfb      	ldrb	r3, [r7, #15]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d158      	bne.n	800a42e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	781b      	ldrb	r3, [r3, #0]
 800a380:	2b03      	cmp	r3, #3
 800a382:	d148      	bne.n	800a416 <sync_fs+0xb2>
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	791b      	ldrb	r3, [r3, #4]
 800a388:	2b01      	cmp	r3, #1
 800a38a:	d144      	bne.n	800a416 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	3330      	adds	r3, #48	; 0x30
 800a390:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a394:	2100      	movs	r1, #0
 800a396:	4618      	mov	r0, r3
 800a398:	f7ff fda9 	bl	8009eee <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	3330      	adds	r3, #48	; 0x30
 800a3a0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a3a4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f7ff fd38 	bl	8009e1e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	3330      	adds	r3, #48	; 0x30
 800a3b2:	4921      	ldr	r1, [pc, #132]	; (800a438 <sync_fs+0xd4>)
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f7ff fd4d 	bl	8009e54 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	3330      	adds	r3, #48	; 0x30
 800a3be:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a3c2:	491e      	ldr	r1, [pc, #120]	; (800a43c <sync_fs+0xd8>)
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f7ff fd45 	bl	8009e54 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	3330      	adds	r3, #48	; 0x30
 800a3ce:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	691b      	ldr	r3, [r3, #16]
 800a3d6:	4619      	mov	r1, r3
 800a3d8:	4610      	mov	r0, r2
 800a3da:	f7ff fd3b 	bl	8009e54 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	3330      	adds	r3, #48	; 0x30
 800a3e2:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	68db      	ldr	r3, [r3, #12]
 800a3ea:	4619      	mov	r1, r3
 800a3ec:	4610      	mov	r0, r2
 800a3ee:	f7ff fd31 	bl	8009e54 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	69db      	ldr	r3, [r3, #28]
 800a3f6:	1c5a      	adds	r2, r3, #1
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	7858      	ldrb	r0, [r3, #1]
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a40a:	2301      	movs	r3, #1
 800a40c:	f7ff fc8e 	bl	8009d2c <disk_write>
			fs->fsi_flag = 0;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2200      	movs	r2, #0
 800a414:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	785b      	ldrb	r3, [r3, #1]
 800a41a:	2200      	movs	r2, #0
 800a41c:	2100      	movs	r1, #0
 800a41e:	4618      	mov	r0, r3
 800a420:	f7ff fca4 	bl	8009d6c <disk_ioctl>
 800a424:	4603      	mov	r3, r0
 800a426:	2b00      	cmp	r3, #0
 800a428:	d001      	beq.n	800a42e <sync_fs+0xca>
 800a42a:	2301      	movs	r3, #1
 800a42c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a42e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a430:	4618      	mov	r0, r3
 800a432:	3710      	adds	r7, #16
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}
 800a438:	41615252 	.word	0x41615252
 800a43c:	61417272 	.word	0x61417272

0800a440 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a440:	b480      	push	{r7}
 800a442:	b083      	sub	sp, #12
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
 800a448:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	3b02      	subs	r3, #2
 800a44e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	695b      	ldr	r3, [r3, #20]
 800a454:	3b02      	subs	r3, #2
 800a456:	683a      	ldr	r2, [r7, #0]
 800a458:	429a      	cmp	r2, r3
 800a45a:	d301      	bcc.n	800a460 <clust2sect+0x20>
 800a45c:	2300      	movs	r3, #0
 800a45e:	e008      	b.n	800a472 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	895b      	ldrh	r3, [r3, #10]
 800a464:	461a      	mov	r2, r3
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	fb03 f202 	mul.w	r2, r3, r2
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a470:	4413      	add	r3, r2
}
 800a472:	4618      	mov	r0, r3
 800a474:	370c      	adds	r7, #12
 800a476:	46bd      	mov	sp, r7
 800a478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47c:	4770      	bx	lr

0800a47e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a47e:	b580      	push	{r7, lr}
 800a480:	b086      	sub	sp, #24
 800a482:	af00      	add	r7, sp, #0
 800a484:	6078      	str	r0, [r7, #4]
 800a486:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	2b01      	cmp	r3, #1
 800a492:	d904      	bls.n	800a49e <get_fat+0x20>
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	695b      	ldr	r3, [r3, #20]
 800a498:	683a      	ldr	r2, [r7, #0]
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d302      	bcc.n	800a4a4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a49e:	2301      	movs	r3, #1
 800a4a0:	617b      	str	r3, [r7, #20]
 800a4a2:	e08c      	b.n	800a5be <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a4a4:	f04f 33ff 	mov.w	r3, #4294967295
 800a4a8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	781b      	ldrb	r3, [r3, #0]
 800a4ae:	2b02      	cmp	r3, #2
 800a4b0:	d045      	beq.n	800a53e <get_fat+0xc0>
 800a4b2:	2b03      	cmp	r3, #3
 800a4b4:	d05d      	beq.n	800a572 <get_fat+0xf4>
 800a4b6:	2b01      	cmp	r3, #1
 800a4b8:	d177      	bne.n	800a5aa <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	60fb      	str	r3, [r7, #12]
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	085b      	lsrs	r3, r3, #1
 800a4c2:	68fa      	ldr	r2, [r7, #12]
 800a4c4:	4413      	add	r3, r2
 800a4c6:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	6a1a      	ldr	r2, [r3, #32]
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	0a5b      	lsrs	r3, r3, #9
 800a4d0:	4413      	add	r3, r2
 800a4d2:	4619      	mov	r1, r3
 800a4d4:	6938      	ldr	r0, [r7, #16]
 800a4d6:	f7ff ff17 	bl	800a308 <move_window>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d167      	bne.n	800a5b0 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	1c5a      	adds	r2, r3, #1
 800a4e4:	60fa      	str	r2, [r7, #12]
 800a4e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4ea:	693a      	ldr	r2, [r7, #16]
 800a4ec:	4413      	add	r3, r2
 800a4ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a4f2:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	6a1a      	ldr	r2, [r3, #32]
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	0a5b      	lsrs	r3, r3, #9
 800a4fc:	4413      	add	r3, r2
 800a4fe:	4619      	mov	r1, r3
 800a500:	6938      	ldr	r0, [r7, #16]
 800a502:	f7ff ff01 	bl	800a308 <move_window>
 800a506:	4603      	mov	r3, r0
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d153      	bne.n	800a5b4 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a512:	693a      	ldr	r2, [r7, #16]
 800a514:	4413      	add	r3, r2
 800a516:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a51a:	021b      	lsls	r3, r3, #8
 800a51c:	461a      	mov	r2, r3
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	4313      	orrs	r3, r2
 800a522:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	f003 0301 	and.w	r3, r3, #1
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d002      	beq.n	800a534 <get_fat+0xb6>
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	091b      	lsrs	r3, r3, #4
 800a532:	e002      	b.n	800a53a <get_fat+0xbc>
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a53a:	617b      	str	r3, [r7, #20]
			break;
 800a53c:	e03f      	b.n	800a5be <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	6a1a      	ldr	r2, [r3, #32]
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	0a1b      	lsrs	r3, r3, #8
 800a546:	4413      	add	r3, r2
 800a548:	4619      	mov	r1, r3
 800a54a:	6938      	ldr	r0, [r7, #16]
 800a54c:	f7ff fedc 	bl	800a308 <move_window>
 800a550:	4603      	mov	r3, r0
 800a552:	2b00      	cmp	r3, #0
 800a554:	d130      	bne.n	800a5b8 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	005b      	lsls	r3, r3, #1
 800a560:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a564:	4413      	add	r3, r2
 800a566:	4618      	mov	r0, r3
 800a568:	f7ff fc1e 	bl	8009da8 <ld_word>
 800a56c:	4603      	mov	r3, r0
 800a56e:	617b      	str	r3, [r7, #20]
			break;
 800a570:	e025      	b.n	800a5be <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	6a1a      	ldr	r2, [r3, #32]
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	09db      	lsrs	r3, r3, #7
 800a57a:	4413      	add	r3, r2
 800a57c:	4619      	mov	r1, r3
 800a57e:	6938      	ldr	r0, [r7, #16]
 800a580:	f7ff fec2 	bl	800a308 <move_window>
 800a584:	4603      	mov	r3, r0
 800a586:	2b00      	cmp	r3, #0
 800a588:	d118      	bne.n	800a5bc <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a58a:	693b      	ldr	r3, [r7, #16]
 800a58c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	009b      	lsls	r3, r3, #2
 800a594:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a598:	4413      	add	r3, r2
 800a59a:	4618      	mov	r0, r3
 800a59c:	f7ff fc1c 	bl	8009dd8 <ld_dword>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a5a6:	617b      	str	r3, [r7, #20]
			break;
 800a5a8:	e009      	b.n	800a5be <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	617b      	str	r3, [r7, #20]
 800a5ae:	e006      	b.n	800a5be <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a5b0:	bf00      	nop
 800a5b2:	e004      	b.n	800a5be <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a5b4:	bf00      	nop
 800a5b6:	e002      	b.n	800a5be <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a5b8:	bf00      	nop
 800a5ba:	e000      	b.n	800a5be <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a5bc:	bf00      	nop
		}
	}

	return val;
 800a5be:	697b      	ldr	r3, [r7, #20]
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	3718      	adds	r7, #24
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}

0800a5c8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a5c8:	b590      	push	{r4, r7, lr}
 800a5ca:	b089      	sub	sp, #36	; 0x24
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	60f8      	str	r0, [r7, #12]
 800a5d0:	60b9      	str	r1, [r7, #8]
 800a5d2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a5d4:	2302      	movs	r3, #2
 800a5d6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	2b01      	cmp	r3, #1
 800a5dc:	f240 80d6 	bls.w	800a78c <put_fat+0x1c4>
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	695b      	ldr	r3, [r3, #20]
 800a5e4:	68ba      	ldr	r2, [r7, #8]
 800a5e6:	429a      	cmp	r2, r3
 800a5e8:	f080 80d0 	bcs.w	800a78c <put_fat+0x1c4>
		switch (fs->fs_type) {
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	781b      	ldrb	r3, [r3, #0]
 800a5f0:	2b02      	cmp	r3, #2
 800a5f2:	d073      	beq.n	800a6dc <put_fat+0x114>
 800a5f4:	2b03      	cmp	r3, #3
 800a5f6:	f000 8091 	beq.w	800a71c <put_fat+0x154>
 800a5fa:	2b01      	cmp	r3, #1
 800a5fc:	f040 80c6 	bne.w	800a78c <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	61bb      	str	r3, [r7, #24]
 800a604:	69bb      	ldr	r3, [r7, #24]
 800a606:	085b      	lsrs	r3, r3, #1
 800a608:	69ba      	ldr	r2, [r7, #24]
 800a60a:	4413      	add	r3, r2
 800a60c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	6a1a      	ldr	r2, [r3, #32]
 800a612:	69bb      	ldr	r3, [r7, #24]
 800a614:	0a5b      	lsrs	r3, r3, #9
 800a616:	4413      	add	r3, r2
 800a618:	4619      	mov	r1, r3
 800a61a:	68f8      	ldr	r0, [r7, #12]
 800a61c:	f7ff fe74 	bl	800a308 <move_window>
 800a620:	4603      	mov	r3, r0
 800a622:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a624:	7ffb      	ldrb	r3, [r7, #31]
 800a626:	2b00      	cmp	r3, #0
 800a628:	f040 80a9 	bne.w	800a77e <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a632:	69bb      	ldr	r3, [r7, #24]
 800a634:	1c59      	adds	r1, r3, #1
 800a636:	61b9      	str	r1, [r7, #24]
 800a638:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a63c:	4413      	add	r3, r2
 800a63e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	f003 0301 	and.w	r3, r3, #1
 800a646:	2b00      	cmp	r3, #0
 800a648:	d00d      	beq.n	800a666 <put_fat+0x9e>
 800a64a:	697b      	ldr	r3, [r7, #20]
 800a64c:	781b      	ldrb	r3, [r3, #0]
 800a64e:	b25b      	sxtb	r3, r3
 800a650:	f003 030f 	and.w	r3, r3, #15
 800a654:	b25a      	sxtb	r2, r3
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	b2db      	uxtb	r3, r3
 800a65a:	011b      	lsls	r3, r3, #4
 800a65c:	b25b      	sxtb	r3, r3
 800a65e:	4313      	orrs	r3, r2
 800a660:	b25b      	sxtb	r3, r3
 800a662:	b2db      	uxtb	r3, r3
 800a664:	e001      	b.n	800a66a <put_fat+0xa2>
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	b2db      	uxtb	r3, r3
 800a66a:	697a      	ldr	r2, [r7, #20]
 800a66c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	2201      	movs	r2, #1
 800a672:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	6a1a      	ldr	r2, [r3, #32]
 800a678:	69bb      	ldr	r3, [r7, #24]
 800a67a:	0a5b      	lsrs	r3, r3, #9
 800a67c:	4413      	add	r3, r2
 800a67e:	4619      	mov	r1, r3
 800a680:	68f8      	ldr	r0, [r7, #12]
 800a682:	f7ff fe41 	bl	800a308 <move_window>
 800a686:	4603      	mov	r3, r0
 800a688:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a68a:	7ffb      	ldrb	r3, [r7, #31]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d178      	bne.n	800a782 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a696:	69bb      	ldr	r3, [r7, #24]
 800a698:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a69c:	4413      	add	r3, r2
 800a69e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	f003 0301 	and.w	r3, r3, #1
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d003      	beq.n	800a6b2 <put_fat+0xea>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	091b      	lsrs	r3, r3, #4
 800a6ae:	b2db      	uxtb	r3, r3
 800a6b0:	e00e      	b.n	800a6d0 <put_fat+0x108>
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	781b      	ldrb	r3, [r3, #0]
 800a6b6:	b25b      	sxtb	r3, r3
 800a6b8:	f023 030f 	bic.w	r3, r3, #15
 800a6bc:	b25a      	sxtb	r2, r3
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	0a1b      	lsrs	r3, r3, #8
 800a6c2:	b25b      	sxtb	r3, r3
 800a6c4:	f003 030f 	and.w	r3, r3, #15
 800a6c8:	b25b      	sxtb	r3, r3
 800a6ca:	4313      	orrs	r3, r2
 800a6cc:	b25b      	sxtb	r3, r3
 800a6ce:	b2db      	uxtb	r3, r3
 800a6d0:	697a      	ldr	r2, [r7, #20]
 800a6d2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	2201      	movs	r2, #1
 800a6d8:	70da      	strb	r2, [r3, #3]
			break;
 800a6da:	e057      	b.n	800a78c <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	6a1a      	ldr	r2, [r3, #32]
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	0a1b      	lsrs	r3, r3, #8
 800a6e4:	4413      	add	r3, r2
 800a6e6:	4619      	mov	r1, r3
 800a6e8:	68f8      	ldr	r0, [r7, #12]
 800a6ea:	f7ff fe0d 	bl	800a308 <move_window>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a6f2:	7ffb      	ldrb	r3, [r7, #31]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d146      	bne.n	800a786 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a6fe:	68bb      	ldr	r3, [r7, #8]
 800a700:	005b      	lsls	r3, r3, #1
 800a702:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a706:	4413      	add	r3, r2
 800a708:	687a      	ldr	r2, [r7, #4]
 800a70a:	b292      	uxth	r2, r2
 800a70c:	4611      	mov	r1, r2
 800a70e:	4618      	mov	r0, r3
 800a710:	f7ff fb85 	bl	8009e1e <st_word>
			fs->wflag = 1;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	2201      	movs	r2, #1
 800a718:	70da      	strb	r2, [r3, #3]
			break;
 800a71a:	e037      	b.n	800a78c <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	6a1a      	ldr	r2, [r3, #32]
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	09db      	lsrs	r3, r3, #7
 800a724:	4413      	add	r3, r2
 800a726:	4619      	mov	r1, r3
 800a728:	68f8      	ldr	r0, [r7, #12]
 800a72a:	f7ff fded 	bl	800a308 <move_window>
 800a72e:	4603      	mov	r3, r0
 800a730:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a732:	7ffb      	ldrb	r3, [r7, #31]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d128      	bne.n	800a78a <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	009b      	lsls	r3, r3, #2
 800a748:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a74c:	4413      	add	r3, r2
 800a74e:	4618      	mov	r0, r3
 800a750:	f7ff fb42 	bl	8009dd8 <ld_dword>
 800a754:	4603      	mov	r3, r0
 800a756:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a75a:	4323      	orrs	r3, r4
 800a75c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a764:	68bb      	ldr	r3, [r7, #8]
 800a766:	009b      	lsls	r3, r3, #2
 800a768:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a76c:	4413      	add	r3, r2
 800a76e:	6879      	ldr	r1, [r7, #4]
 800a770:	4618      	mov	r0, r3
 800a772:	f7ff fb6f 	bl	8009e54 <st_dword>
			fs->wflag = 1;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	2201      	movs	r2, #1
 800a77a:	70da      	strb	r2, [r3, #3]
			break;
 800a77c:	e006      	b.n	800a78c <put_fat+0x1c4>
			if (res != FR_OK) break;
 800a77e:	bf00      	nop
 800a780:	e004      	b.n	800a78c <put_fat+0x1c4>
			if (res != FR_OK) break;
 800a782:	bf00      	nop
 800a784:	e002      	b.n	800a78c <put_fat+0x1c4>
			if (res != FR_OK) break;
 800a786:	bf00      	nop
 800a788:	e000      	b.n	800a78c <put_fat+0x1c4>
			if (res != FR_OK) break;
 800a78a:	bf00      	nop
		}
	}
	return res;
 800a78c:	7ffb      	ldrb	r3, [r7, #31]
}
 800a78e:	4618      	mov	r0, r3
 800a790:	3724      	adds	r7, #36	; 0x24
 800a792:	46bd      	mov	sp, r7
 800a794:	bd90      	pop	{r4, r7, pc}

0800a796 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a796:	b580      	push	{r7, lr}
 800a798:	b088      	sub	sp, #32
 800a79a:	af00      	add	r7, sp, #0
 800a79c:	60f8      	str	r0, [r7, #12]
 800a79e:	60b9      	str	r1, [r7, #8]
 800a7a0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	2b01      	cmp	r3, #1
 800a7b0:	d904      	bls.n	800a7bc <remove_chain+0x26>
 800a7b2:	69bb      	ldr	r3, [r7, #24]
 800a7b4:	695b      	ldr	r3, [r3, #20]
 800a7b6:	68ba      	ldr	r2, [r7, #8]
 800a7b8:	429a      	cmp	r2, r3
 800a7ba:	d301      	bcc.n	800a7c0 <remove_chain+0x2a>
 800a7bc:	2302      	movs	r3, #2
 800a7be:	e04b      	b.n	800a858 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d00c      	beq.n	800a7e0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a7c6:	f04f 32ff 	mov.w	r2, #4294967295
 800a7ca:	6879      	ldr	r1, [r7, #4]
 800a7cc:	69b8      	ldr	r0, [r7, #24]
 800a7ce:	f7ff fefb 	bl	800a5c8 <put_fat>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a7d6:	7ffb      	ldrb	r3, [r7, #31]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d001      	beq.n	800a7e0 <remove_chain+0x4a>
 800a7dc:	7ffb      	ldrb	r3, [r7, #31]
 800a7de:	e03b      	b.n	800a858 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a7e0:	68b9      	ldr	r1, [r7, #8]
 800a7e2:	68f8      	ldr	r0, [r7, #12]
 800a7e4:	f7ff fe4b 	bl	800a47e <get_fat>
 800a7e8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d031      	beq.n	800a854 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a7f0:	697b      	ldr	r3, [r7, #20]
 800a7f2:	2b01      	cmp	r3, #1
 800a7f4:	d101      	bne.n	800a7fa <remove_chain+0x64>
 800a7f6:	2302      	movs	r3, #2
 800a7f8:	e02e      	b.n	800a858 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a7fa:	697b      	ldr	r3, [r7, #20]
 800a7fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a800:	d101      	bne.n	800a806 <remove_chain+0x70>
 800a802:	2301      	movs	r3, #1
 800a804:	e028      	b.n	800a858 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a806:	2200      	movs	r2, #0
 800a808:	68b9      	ldr	r1, [r7, #8]
 800a80a:	69b8      	ldr	r0, [r7, #24]
 800a80c:	f7ff fedc 	bl	800a5c8 <put_fat>
 800a810:	4603      	mov	r3, r0
 800a812:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a814:	7ffb      	ldrb	r3, [r7, #31]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d001      	beq.n	800a81e <remove_chain+0x88>
 800a81a:	7ffb      	ldrb	r3, [r7, #31]
 800a81c:	e01c      	b.n	800a858 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a81e:	69bb      	ldr	r3, [r7, #24]
 800a820:	691a      	ldr	r2, [r3, #16]
 800a822:	69bb      	ldr	r3, [r7, #24]
 800a824:	695b      	ldr	r3, [r3, #20]
 800a826:	3b02      	subs	r3, #2
 800a828:	429a      	cmp	r2, r3
 800a82a:	d20b      	bcs.n	800a844 <remove_chain+0xae>
			fs->free_clst++;
 800a82c:	69bb      	ldr	r3, [r7, #24]
 800a82e:	691b      	ldr	r3, [r3, #16]
 800a830:	1c5a      	adds	r2, r3, #1
 800a832:	69bb      	ldr	r3, [r7, #24]
 800a834:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800a836:	69bb      	ldr	r3, [r7, #24]
 800a838:	791b      	ldrb	r3, [r3, #4]
 800a83a:	f043 0301 	orr.w	r3, r3, #1
 800a83e:	b2da      	uxtb	r2, r3
 800a840:	69bb      	ldr	r3, [r7, #24]
 800a842:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a844:	697b      	ldr	r3, [r7, #20]
 800a846:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a848:	69bb      	ldr	r3, [r7, #24]
 800a84a:	695b      	ldr	r3, [r3, #20]
 800a84c:	68ba      	ldr	r2, [r7, #8]
 800a84e:	429a      	cmp	r2, r3
 800a850:	d3c6      	bcc.n	800a7e0 <remove_chain+0x4a>
 800a852:	e000      	b.n	800a856 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a854:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a856:	2300      	movs	r3, #0
}
 800a858:	4618      	mov	r0, r3
 800a85a:	3720      	adds	r7, #32
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd80      	pop	{r7, pc}

0800a860 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b088      	sub	sp, #32
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
 800a868:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d10d      	bne.n	800a892 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a876:	693b      	ldr	r3, [r7, #16]
 800a878:	68db      	ldr	r3, [r3, #12]
 800a87a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a87c:	69bb      	ldr	r3, [r7, #24]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d004      	beq.n	800a88c <create_chain+0x2c>
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	695b      	ldr	r3, [r3, #20]
 800a886:	69ba      	ldr	r2, [r7, #24]
 800a888:	429a      	cmp	r2, r3
 800a88a:	d31b      	bcc.n	800a8c4 <create_chain+0x64>
 800a88c:	2301      	movs	r3, #1
 800a88e:	61bb      	str	r3, [r7, #24]
 800a890:	e018      	b.n	800a8c4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a892:	6839      	ldr	r1, [r7, #0]
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f7ff fdf2 	bl	800a47e <get_fat>
 800a89a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	2b01      	cmp	r3, #1
 800a8a0:	d801      	bhi.n	800a8a6 <create_chain+0x46>
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	e070      	b.n	800a988 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8ac:	d101      	bne.n	800a8b2 <create_chain+0x52>
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	e06a      	b.n	800a988 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a8b2:	693b      	ldr	r3, [r7, #16]
 800a8b4:	695b      	ldr	r3, [r3, #20]
 800a8b6:	68fa      	ldr	r2, [r7, #12]
 800a8b8:	429a      	cmp	r2, r3
 800a8ba:	d201      	bcs.n	800a8c0 <create_chain+0x60>
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	e063      	b.n	800a988 <create_chain+0x128>
		scl = clst;
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a8c4:	69bb      	ldr	r3, [r7, #24]
 800a8c6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a8c8:	69fb      	ldr	r3, [r7, #28]
 800a8ca:	3301      	adds	r3, #1
 800a8cc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a8ce:	693b      	ldr	r3, [r7, #16]
 800a8d0:	695b      	ldr	r3, [r3, #20]
 800a8d2:	69fa      	ldr	r2, [r7, #28]
 800a8d4:	429a      	cmp	r2, r3
 800a8d6:	d307      	bcc.n	800a8e8 <create_chain+0x88>
				ncl = 2;
 800a8d8:	2302      	movs	r3, #2
 800a8da:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a8dc:	69fa      	ldr	r2, [r7, #28]
 800a8de:	69bb      	ldr	r3, [r7, #24]
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	d901      	bls.n	800a8e8 <create_chain+0x88>
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	e04f      	b.n	800a988 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a8e8:	69f9      	ldr	r1, [r7, #28]
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f7ff fdc7 	bl	800a47e <get_fat>
 800a8f0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d00e      	beq.n	800a916 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	2b01      	cmp	r3, #1
 800a8fc:	d003      	beq.n	800a906 <create_chain+0xa6>
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a904:	d101      	bne.n	800a90a <create_chain+0xaa>
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	e03e      	b.n	800a988 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a90a:	69fa      	ldr	r2, [r7, #28]
 800a90c:	69bb      	ldr	r3, [r7, #24]
 800a90e:	429a      	cmp	r2, r3
 800a910:	d1da      	bne.n	800a8c8 <create_chain+0x68>
 800a912:	2300      	movs	r3, #0
 800a914:	e038      	b.n	800a988 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a916:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a918:	f04f 32ff 	mov.w	r2, #4294967295
 800a91c:	69f9      	ldr	r1, [r7, #28]
 800a91e:	6938      	ldr	r0, [r7, #16]
 800a920:	f7ff fe52 	bl	800a5c8 <put_fat>
 800a924:	4603      	mov	r3, r0
 800a926:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a928:	7dfb      	ldrb	r3, [r7, #23]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d109      	bne.n	800a942 <create_chain+0xe2>
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d006      	beq.n	800a942 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a934:	69fa      	ldr	r2, [r7, #28]
 800a936:	6839      	ldr	r1, [r7, #0]
 800a938:	6938      	ldr	r0, [r7, #16]
 800a93a:	f7ff fe45 	bl	800a5c8 <put_fat>
 800a93e:	4603      	mov	r3, r0
 800a940:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a942:	7dfb      	ldrb	r3, [r7, #23]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d116      	bne.n	800a976 <create_chain+0x116>
		fs->last_clst = ncl;
 800a948:	693b      	ldr	r3, [r7, #16]
 800a94a:	69fa      	ldr	r2, [r7, #28]
 800a94c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a94e:	693b      	ldr	r3, [r7, #16]
 800a950:	691a      	ldr	r2, [r3, #16]
 800a952:	693b      	ldr	r3, [r7, #16]
 800a954:	695b      	ldr	r3, [r3, #20]
 800a956:	3b02      	subs	r3, #2
 800a958:	429a      	cmp	r2, r3
 800a95a:	d804      	bhi.n	800a966 <create_chain+0x106>
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	691b      	ldr	r3, [r3, #16]
 800a960:	1e5a      	subs	r2, r3, #1
 800a962:	693b      	ldr	r3, [r7, #16]
 800a964:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800a966:	693b      	ldr	r3, [r7, #16]
 800a968:	791b      	ldrb	r3, [r3, #4]
 800a96a:	f043 0301 	orr.w	r3, r3, #1
 800a96e:	b2da      	uxtb	r2, r3
 800a970:	693b      	ldr	r3, [r7, #16]
 800a972:	711a      	strb	r2, [r3, #4]
 800a974:	e007      	b.n	800a986 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a976:	7dfb      	ldrb	r3, [r7, #23]
 800a978:	2b01      	cmp	r3, #1
 800a97a:	d102      	bne.n	800a982 <create_chain+0x122>
 800a97c:	f04f 33ff 	mov.w	r3, #4294967295
 800a980:	e000      	b.n	800a984 <create_chain+0x124>
 800a982:	2301      	movs	r3, #1
 800a984:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a986:	69fb      	ldr	r3, [r7, #28]
}
 800a988:	4618      	mov	r0, r3
 800a98a:	3720      	adds	r7, #32
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bd80      	pop	{r7, pc}

0800a990 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a990:	b480      	push	{r7}
 800a992:	b087      	sub	sp, #28
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
 800a998:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9a4:	3304      	adds	r3, #4
 800a9a6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	0a5b      	lsrs	r3, r3, #9
 800a9ac:	68fa      	ldr	r2, [r7, #12]
 800a9ae:	8952      	ldrh	r2, [r2, #10]
 800a9b0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a9b4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a9b6:	693b      	ldr	r3, [r7, #16]
 800a9b8:	1d1a      	adds	r2, r3, #4
 800a9ba:	613a      	str	r2, [r7, #16]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d101      	bne.n	800a9ca <clmt_clust+0x3a>
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	e010      	b.n	800a9ec <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800a9ca:	697a      	ldr	r2, [r7, #20]
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	d307      	bcc.n	800a9e2 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800a9d2:	697a      	ldr	r2, [r7, #20]
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	1ad3      	subs	r3, r2, r3
 800a9d8:	617b      	str	r3, [r7, #20]
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	3304      	adds	r3, #4
 800a9de:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a9e0:	e7e9      	b.n	800a9b6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800a9e2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a9e4:	693b      	ldr	r3, [r7, #16]
 800a9e6:	681a      	ldr	r2, [r3, #0]
 800a9e8:	697b      	ldr	r3, [r7, #20]
 800a9ea:	4413      	add	r3, r2
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	371c      	adds	r7, #28
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f6:	4770      	bx	lr

0800a9f8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b086      	sub	sp, #24
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
 800aa00:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aa0e:	d204      	bcs.n	800aa1a <dir_sdi+0x22>
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	f003 031f 	and.w	r3, r3, #31
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d001      	beq.n	800aa1e <dir_sdi+0x26>
		return FR_INT_ERR;
 800aa1a:	2302      	movs	r3, #2
 800aa1c:	e063      	b.n	800aae6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	683a      	ldr	r2, [r7, #0]
 800aa22:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	689b      	ldr	r3, [r3, #8]
 800aa28:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800aa2a:	697b      	ldr	r3, [r7, #20]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d106      	bne.n	800aa3e <dir_sdi+0x46>
 800aa30:	693b      	ldr	r3, [r7, #16]
 800aa32:	781b      	ldrb	r3, [r3, #0]
 800aa34:	2b02      	cmp	r3, #2
 800aa36:	d902      	bls.n	800aa3e <dir_sdi+0x46>
		clst = fs->dirbase;
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa3c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800aa3e:	697b      	ldr	r3, [r7, #20]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d10c      	bne.n	800aa5e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	095b      	lsrs	r3, r3, #5
 800aa48:	693a      	ldr	r2, [r7, #16]
 800aa4a:	8912      	ldrh	r2, [r2, #8]
 800aa4c:	4293      	cmp	r3, r2
 800aa4e:	d301      	bcc.n	800aa54 <dir_sdi+0x5c>
 800aa50:	2302      	movs	r3, #2
 800aa52:	e048      	b.n	800aae6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800aa54:	693b      	ldr	r3, [r7, #16]
 800aa56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	61da      	str	r2, [r3, #28]
 800aa5c:	e029      	b.n	800aab2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	895b      	ldrh	r3, [r3, #10]
 800aa62:	025b      	lsls	r3, r3, #9
 800aa64:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800aa66:	e019      	b.n	800aa9c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	6979      	ldr	r1, [r7, #20]
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f7ff fd06 	bl	800a47e <get_fat>
 800aa72:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa7a:	d101      	bne.n	800aa80 <dir_sdi+0x88>
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	e032      	b.n	800aae6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	2b01      	cmp	r3, #1
 800aa84:	d904      	bls.n	800aa90 <dir_sdi+0x98>
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	695b      	ldr	r3, [r3, #20]
 800aa8a:	697a      	ldr	r2, [r7, #20]
 800aa8c:	429a      	cmp	r2, r3
 800aa8e:	d301      	bcc.n	800aa94 <dir_sdi+0x9c>
 800aa90:	2302      	movs	r3, #2
 800aa92:	e028      	b.n	800aae6 <dir_sdi+0xee>
			ofs -= csz;
 800aa94:	683a      	ldr	r2, [r7, #0]
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	1ad3      	subs	r3, r2, r3
 800aa9a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800aa9c:	683a      	ldr	r2, [r7, #0]
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	429a      	cmp	r2, r3
 800aaa2:	d2e1      	bcs.n	800aa68 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800aaa4:	6979      	ldr	r1, [r7, #20]
 800aaa6:	6938      	ldr	r0, [r7, #16]
 800aaa8:	f7ff fcca 	bl	800a440 <clust2sect>
 800aaac:	4602      	mov	r2, r0
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	697a      	ldr	r2, [r7, #20]
 800aab6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	69db      	ldr	r3, [r3, #28]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d101      	bne.n	800aac4 <dir_sdi+0xcc>
 800aac0:	2302      	movs	r3, #2
 800aac2:	e010      	b.n	800aae6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	69da      	ldr	r2, [r3, #28]
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	0a5b      	lsrs	r3, r3, #9
 800aacc:	441a      	add	r2, r3
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800aad2:	693b      	ldr	r3, [r7, #16]
 800aad4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aade:	441a      	add	r2, r3
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800aae4:	2300      	movs	r3, #0
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	3718      	adds	r7, #24
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}

0800aaee <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800aaee:	b580      	push	{r7, lr}
 800aaf0:	b086      	sub	sp, #24
 800aaf2:	af00      	add	r7, sp, #0
 800aaf4:	6078      	str	r0, [r7, #4]
 800aaf6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	695b      	ldr	r3, [r3, #20]
 800ab02:	3320      	adds	r3, #32
 800ab04:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	69db      	ldr	r3, [r3, #28]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d003      	beq.n	800ab16 <dir_next+0x28>
 800ab0e:	68bb      	ldr	r3, [r7, #8]
 800ab10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ab14:	d301      	bcc.n	800ab1a <dir_next+0x2c>
 800ab16:	2304      	movs	r3, #4
 800ab18:	e0aa      	b.n	800ac70 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	f040 8098 	bne.w	800ac56 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	69db      	ldr	r3, [r3, #28]
 800ab2a:	1c5a      	adds	r2, r3, #1
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	699b      	ldr	r3, [r3, #24]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d10b      	bne.n	800ab50 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	095b      	lsrs	r3, r3, #5
 800ab3c:	68fa      	ldr	r2, [r7, #12]
 800ab3e:	8912      	ldrh	r2, [r2, #8]
 800ab40:	4293      	cmp	r3, r2
 800ab42:	f0c0 8088 	bcc.w	800ac56 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2200      	movs	r2, #0
 800ab4a:	61da      	str	r2, [r3, #28]
 800ab4c:	2304      	movs	r3, #4
 800ab4e:	e08f      	b.n	800ac70 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	0a5b      	lsrs	r3, r3, #9
 800ab54:	68fa      	ldr	r2, [r7, #12]
 800ab56:	8952      	ldrh	r2, [r2, #10]
 800ab58:	3a01      	subs	r2, #1
 800ab5a:	4013      	ands	r3, r2
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d17a      	bne.n	800ac56 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ab60:	687a      	ldr	r2, [r7, #4]
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	699b      	ldr	r3, [r3, #24]
 800ab66:	4619      	mov	r1, r3
 800ab68:	4610      	mov	r0, r2
 800ab6a:	f7ff fc88 	bl	800a47e <get_fat>
 800ab6e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ab70:	697b      	ldr	r3, [r7, #20]
 800ab72:	2b01      	cmp	r3, #1
 800ab74:	d801      	bhi.n	800ab7a <dir_next+0x8c>
 800ab76:	2302      	movs	r3, #2
 800ab78:	e07a      	b.n	800ac70 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab80:	d101      	bne.n	800ab86 <dir_next+0x98>
 800ab82:	2301      	movs	r3, #1
 800ab84:	e074      	b.n	800ac70 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	695b      	ldr	r3, [r3, #20]
 800ab8a:	697a      	ldr	r2, [r7, #20]
 800ab8c:	429a      	cmp	r2, r3
 800ab8e:	d358      	bcc.n	800ac42 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d104      	bne.n	800aba0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2200      	movs	r2, #0
 800ab9a:	61da      	str	r2, [r3, #28]
 800ab9c:	2304      	movs	r3, #4
 800ab9e:	e067      	b.n	800ac70 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800aba0:	687a      	ldr	r2, [r7, #4]
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	699b      	ldr	r3, [r3, #24]
 800aba6:	4619      	mov	r1, r3
 800aba8:	4610      	mov	r0, r2
 800abaa:	f7ff fe59 	bl	800a860 <create_chain>
 800abae:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800abb0:	697b      	ldr	r3, [r7, #20]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d101      	bne.n	800abba <dir_next+0xcc>
 800abb6:	2307      	movs	r3, #7
 800abb8:	e05a      	b.n	800ac70 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800abba:	697b      	ldr	r3, [r7, #20]
 800abbc:	2b01      	cmp	r3, #1
 800abbe:	d101      	bne.n	800abc4 <dir_next+0xd6>
 800abc0:	2302      	movs	r3, #2
 800abc2:	e055      	b.n	800ac70 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800abc4:	697b      	ldr	r3, [r7, #20]
 800abc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abca:	d101      	bne.n	800abd0 <dir_next+0xe2>
 800abcc:	2301      	movs	r3, #1
 800abce:	e04f      	b.n	800ac70 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800abd0:	68f8      	ldr	r0, [r7, #12]
 800abd2:	f7ff fb55 	bl	800a280 <sync_window>
 800abd6:	4603      	mov	r3, r0
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d001      	beq.n	800abe0 <dir_next+0xf2>
 800abdc:	2301      	movs	r3, #1
 800abde:	e047      	b.n	800ac70 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	3330      	adds	r3, #48	; 0x30
 800abe4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800abe8:	2100      	movs	r1, #0
 800abea:	4618      	mov	r0, r3
 800abec:	f7ff f97f 	bl	8009eee <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800abf0:	2300      	movs	r3, #0
 800abf2:	613b      	str	r3, [r7, #16]
 800abf4:	6979      	ldr	r1, [r7, #20]
 800abf6:	68f8      	ldr	r0, [r7, #12]
 800abf8:	f7ff fc22 	bl	800a440 <clust2sect>
 800abfc:	4602      	mov	r2, r0
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	62da      	str	r2, [r3, #44]	; 0x2c
 800ac02:	e012      	b.n	800ac2a <dir_next+0x13c>
						fs->wflag = 1;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	2201      	movs	r2, #1
 800ac08:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ac0a:	68f8      	ldr	r0, [r7, #12]
 800ac0c:	f7ff fb38 	bl	800a280 <sync_window>
 800ac10:	4603      	mov	r3, r0
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d001      	beq.n	800ac1a <dir_next+0x12c>
 800ac16:	2301      	movs	r3, #1
 800ac18:	e02a      	b.n	800ac70 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ac1a:	693b      	ldr	r3, [r7, #16]
 800ac1c:	3301      	adds	r3, #1
 800ac1e:	613b      	str	r3, [r7, #16]
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac24:	1c5a      	adds	r2, r3, #1
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	62da      	str	r2, [r3, #44]	; 0x2c
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	895b      	ldrh	r3, [r3, #10]
 800ac2e:	461a      	mov	r2, r3
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	4293      	cmp	r3, r2
 800ac34:	d3e6      	bcc.n	800ac04 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac3a:	693b      	ldr	r3, [r7, #16]
 800ac3c:	1ad2      	subs	r2, r2, r3
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	697a      	ldr	r2, [r7, #20]
 800ac46:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ac48:	6979      	ldr	r1, [r7, #20]
 800ac4a:	68f8      	ldr	r0, [r7, #12]
 800ac4c:	f7ff fbf8 	bl	800a440 <clust2sect>
 800ac50:	4602      	mov	r2, r0
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	68ba      	ldr	r2, [r7, #8]
 800ac5a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac68:	441a      	add	r2, r3
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ac6e:	2300      	movs	r3, #0
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	3718      	adds	r7, #24
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}

0800ac78 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b086      	sub	sp, #24
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
 800ac80:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ac88:	2100      	movs	r1, #0
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f7ff feb4 	bl	800a9f8 <dir_sdi>
 800ac90:	4603      	mov	r3, r0
 800ac92:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ac94:	7dfb      	ldrb	r3, [r7, #23]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d12b      	bne.n	800acf2 <dir_alloc+0x7a>
		n = 0;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	69db      	ldr	r3, [r3, #28]
 800aca2:	4619      	mov	r1, r3
 800aca4:	68f8      	ldr	r0, [r7, #12]
 800aca6:	f7ff fb2f 	bl	800a308 <move_window>
 800acaa:	4603      	mov	r3, r0
 800acac:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800acae:	7dfb      	ldrb	r3, [r7, #23]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d11d      	bne.n	800acf0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	6a1b      	ldr	r3, [r3, #32]
 800acb8:	781b      	ldrb	r3, [r3, #0]
 800acba:	2be5      	cmp	r3, #229	; 0xe5
 800acbc:	d004      	beq.n	800acc8 <dir_alloc+0x50>
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6a1b      	ldr	r3, [r3, #32]
 800acc2:	781b      	ldrb	r3, [r3, #0]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d107      	bne.n	800acd8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800acc8:	693b      	ldr	r3, [r7, #16]
 800acca:	3301      	adds	r3, #1
 800accc:	613b      	str	r3, [r7, #16]
 800acce:	693a      	ldr	r2, [r7, #16]
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	429a      	cmp	r2, r3
 800acd4:	d102      	bne.n	800acdc <dir_alloc+0x64>
 800acd6:	e00c      	b.n	800acf2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800acd8:	2300      	movs	r3, #0
 800acda:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800acdc:	2101      	movs	r1, #1
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f7ff ff05 	bl	800aaee <dir_next>
 800ace4:	4603      	mov	r3, r0
 800ace6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ace8:	7dfb      	ldrb	r3, [r7, #23]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d0d7      	beq.n	800ac9e <dir_alloc+0x26>
 800acee:	e000      	b.n	800acf2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800acf0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800acf2:	7dfb      	ldrb	r3, [r7, #23]
 800acf4:	2b04      	cmp	r3, #4
 800acf6:	d101      	bne.n	800acfc <dir_alloc+0x84>
 800acf8:	2307      	movs	r3, #7
 800acfa:	75fb      	strb	r3, [r7, #23]
	return res;
 800acfc:	7dfb      	ldrb	r3, [r7, #23]
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	3718      	adds	r7, #24
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}

0800ad06 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ad06:	b580      	push	{r7, lr}
 800ad08:	b084      	sub	sp, #16
 800ad0a:	af00      	add	r7, sp, #0
 800ad0c:	6078      	str	r0, [r7, #4]
 800ad0e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	331a      	adds	r3, #26
 800ad14:	4618      	mov	r0, r3
 800ad16:	f7ff f847 	bl	8009da8 <ld_word>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	781b      	ldrb	r3, [r3, #0]
 800ad22:	2b03      	cmp	r3, #3
 800ad24:	d109      	bne.n	800ad3a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	3314      	adds	r3, #20
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f7ff f83c 	bl	8009da8 <ld_word>
 800ad30:	4603      	mov	r3, r0
 800ad32:	041b      	lsls	r3, r3, #16
 800ad34:	68fa      	ldr	r2, [r7, #12]
 800ad36:	4313      	orrs	r3, r2
 800ad38:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
}
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	3710      	adds	r7, #16
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}

0800ad44 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b084      	sub	sp, #16
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	60f8      	str	r0, [r7, #12]
 800ad4c:	60b9      	str	r1, [r7, #8]
 800ad4e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	331a      	adds	r3, #26
 800ad54:	687a      	ldr	r2, [r7, #4]
 800ad56:	b292      	uxth	r2, r2
 800ad58:	4611      	mov	r1, r2
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	f7ff f85f 	bl	8009e1e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	781b      	ldrb	r3, [r3, #0]
 800ad64:	2b03      	cmp	r3, #3
 800ad66:	d109      	bne.n	800ad7c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ad68:	68bb      	ldr	r3, [r7, #8]
 800ad6a:	f103 0214 	add.w	r2, r3, #20
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	0c1b      	lsrs	r3, r3, #16
 800ad72:	b29b      	uxth	r3, r3
 800ad74:	4619      	mov	r1, r3
 800ad76:	4610      	mov	r0, r2
 800ad78:	f7ff f851 	bl	8009e1e <st_word>
	}
}
 800ad7c:	bf00      	nop
 800ad7e:	3710      	adds	r7, #16
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}

0800ad84 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b086      	sub	sp, #24
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ad92:	2100      	movs	r1, #0
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f7ff fe2f 	bl	800a9f8 <dir_sdi>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ad9e:	7dfb      	ldrb	r3, [r7, #23]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d001      	beq.n	800ada8 <dir_find+0x24>
 800ada4:	7dfb      	ldrb	r3, [r7, #23]
 800ada6:	e03e      	b.n	800ae26 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	69db      	ldr	r3, [r3, #28]
 800adac:	4619      	mov	r1, r3
 800adae:	6938      	ldr	r0, [r7, #16]
 800adb0:	f7ff faaa 	bl	800a308 <move_window>
 800adb4:	4603      	mov	r3, r0
 800adb6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800adb8:	7dfb      	ldrb	r3, [r7, #23]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d12f      	bne.n	800ae1e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6a1b      	ldr	r3, [r3, #32]
 800adc2:	781b      	ldrb	r3, [r3, #0]
 800adc4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800adc6:	7bfb      	ldrb	r3, [r7, #15]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d102      	bne.n	800add2 <dir_find+0x4e>
 800adcc:	2304      	movs	r3, #4
 800adce:	75fb      	strb	r3, [r7, #23]
 800add0:	e028      	b.n	800ae24 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6a1b      	ldr	r3, [r3, #32]
 800add6:	330b      	adds	r3, #11
 800add8:	781b      	ldrb	r3, [r3, #0]
 800adda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800adde:	b2da      	uxtb	r2, r3
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6a1b      	ldr	r3, [r3, #32]
 800ade8:	330b      	adds	r3, #11
 800adea:	781b      	ldrb	r3, [r3, #0]
 800adec:	f003 0308 	and.w	r3, r3, #8
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d10a      	bne.n	800ae0a <dir_find+0x86>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6a18      	ldr	r0, [r3, #32]
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	3324      	adds	r3, #36	; 0x24
 800adfc:	220b      	movs	r2, #11
 800adfe:	4619      	mov	r1, r3
 800ae00:	f7ff f88f 	bl	8009f22 <mem_cmp>
 800ae04:	4603      	mov	r3, r0
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d00b      	beq.n	800ae22 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ae0a:	2100      	movs	r1, #0
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f7ff fe6e 	bl	800aaee <dir_next>
 800ae12:	4603      	mov	r3, r0
 800ae14:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ae16:	7dfb      	ldrb	r3, [r7, #23]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d0c5      	beq.n	800ada8 <dir_find+0x24>
 800ae1c:	e002      	b.n	800ae24 <dir_find+0xa0>
		if (res != FR_OK) break;
 800ae1e:	bf00      	nop
 800ae20:	e000      	b.n	800ae24 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ae22:	bf00      	nop

	return res;
 800ae24:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae26:	4618      	mov	r0, r3
 800ae28:	3718      	adds	r7, #24
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}

0800ae2e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ae2e:	b580      	push	{r7, lr}
 800ae30:	b084      	sub	sp, #16
 800ae32:	af00      	add	r7, sp, #0
 800ae34:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800ae3c:	2101      	movs	r1, #1
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f7ff ff1a 	bl	800ac78 <dir_alloc>
 800ae44:	4603      	mov	r3, r0
 800ae46:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ae48:	7bfb      	ldrb	r3, [r7, #15]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d11c      	bne.n	800ae88 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	69db      	ldr	r3, [r3, #28]
 800ae52:	4619      	mov	r1, r3
 800ae54:	68b8      	ldr	r0, [r7, #8]
 800ae56:	f7ff fa57 	bl	800a308 <move_window>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ae5e:	7bfb      	ldrb	r3, [r7, #15]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d111      	bne.n	800ae88 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6a1b      	ldr	r3, [r3, #32]
 800ae68:	2220      	movs	r2, #32
 800ae6a:	2100      	movs	r1, #0
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	f7ff f83e 	bl	8009eee <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6a18      	ldr	r0, [r3, #32]
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	3324      	adds	r3, #36	; 0x24
 800ae7a:	220b      	movs	r2, #11
 800ae7c:	4619      	mov	r1, r3
 800ae7e:	f7ff f815 	bl	8009eac <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	2201      	movs	r2, #1
 800ae86:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ae88:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	3710      	adds	r7, #16
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}
	...

0800ae94 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b088      	sub	sp, #32
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
 800ae9c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	60fb      	str	r3, [r7, #12]
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	3324      	adds	r3, #36	; 0x24
 800aea8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800aeaa:	220b      	movs	r2, #11
 800aeac:	2120      	movs	r1, #32
 800aeae:	68b8      	ldr	r0, [r7, #8]
 800aeb0:	f7ff f81d 	bl	8009eee <mem_set>
	si = i = 0; ni = 8;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	613b      	str	r3, [r7, #16]
 800aeb8:	693b      	ldr	r3, [r7, #16]
 800aeba:	617b      	str	r3, [r7, #20]
 800aebc:	2308      	movs	r3, #8
 800aebe:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	1c5a      	adds	r2, r3, #1
 800aec4:	617a      	str	r2, [r7, #20]
 800aec6:	68fa      	ldr	r2, [r7, #12]
 800aec8:	4413      	add	r3, r2
 800aeca:	781b      	ldrb	r3, [r3, #0]
 800aecc:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800aece:	7ffb      	ldrb	r3, [r7, #31]
 800aed0:	2b20      	cmp	r3, #32
 800aed2:	d94e      	bls.n	800af72 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800aed4:	7ffb      	ldrb	r3, [r7, #31]
 800aed6:	2b2f      	cmp	r3, #47	; 0x2f
 800aed8:	d006      	beq.n	800aee8 <create_name+0x54>
 800aeda:	7ffb      	ldrb	r3, [r7, #31]
 800aedc:	2b5c      	cmp	r3, #92	; 0x5c
 800aede:	d110      	bne.n	800af02 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800aee0:	e002      	b.n	800aee8 <create_name+0x54>
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	3301      	adds	r3, #1
 800aee6:	617b      	str	r3, [r7, #20]
 800aee8:	68fa      	ldr	r2, [r7, #12]
 800aeea:	697b      	ldr	r3, [r7, #20]
 800aeec:	4413      	add	r3, r2
 800aeee:	781b      	ldrb	r3, [r3, #0]
 800aef0:	2b2f      	cmp	r3, #47	; 0x2f
 800aef2:	d0f6      	beq.n	800aee2 <create_name+0x4e>
 800aef4:	68fa      	ldr	r2, [r7, #12]
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	4413      	add	r3, r2
 800aefa:	781b      	ldrb	r3, [r3, #0]
 800aefc:	2b5c      	cmp	r3, #92	; 0x5c
 800aefe:	d0f0      	beq.n	800aee2 <create_name+0x4e>
			break;
 800af00:	e038      	b.n	800af74 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800af02:	7ffb      	ldrb	r3, [r7, #31]
 800af04:	2b2e      	cmp	r3, #46	; 0x2e
 800af06:	d003      	beq.n	800af10 <create_name+0x7c>
 800af08:	693a      	ldr	r2, [r7, #16]
 800af0a:	69bb      	ldr	r3, [r7, #24]
 800af0c:	429a      	cmp	r2, r3
 800af0e:	d30c      	bcc.n	800af2a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800af10:	69bb      	ldr	r3, [r7, #24]
 800af12:	2b0b      	cmp	r3, #11
 800af14:	d002      	beq.n	800af1c <create_name+0x88>
 800af16:	7ffb      	ldrb	r3, [r7, #31]
 800af18:	2b2e      	cmp	r3, #46	; 0x2e
 800af1a:	d001      	beq.n	800af20 <create_name+0x8c>
 800af1c:	2306      	movs	r3, #6
 800af1e:	e044      	b.n	800afaa <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800af20:	2308      	movs	r3, #8
 800af22:	613b      	str	r3, [r7, #16]
 800af24:	230b      	movs	r3, #11
 800af26:	61bb      	str	r3, [r7, #24]
			continue;
 800af28:	e022      	b.n	800af70 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800af2a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	da04      	bge.n	800af3c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800af32:	7ffb      	ldrb	r3, [r7, #31]
 800af34:	3b80      	subs	r3, #128	; 0x80
 800af36:	4a1f      	ldr	r2, [pc, #124]	; (800afb4 <create_name+0x120>)
 800af38:	5cd3      	ldrb	r3, [r2, r3]
 800af3a:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800af3c:	7ffb      	ldrb	r3, [r7, #31]
 800af3e:	4619      	mov	r1, r3
 800af40:	481d      	ldr	r0, [pc, #116]	; (800afb8 <create_name+0x124>)
 800af42:	f7ff f815 	bl	8009f70 <chk_chr>
 800af46:	4603      	mov	r3, r0
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d001      	beq.n	800af50 <create_name+0xbc>
 800af4c:	2306      	movs	r3, #6
 800af4e:	e02c      	b.n	800afaa <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800af50:	7ffb      	ldrb	r3, [r7, #31]
 800af52:	2b60      	cmp	r3, #96	; 0x60
 800af54:	d905      	bls.n	800af62 <create_name+0xce>
 800af56:	7ffb      	ldrb	r3, [r7, #31]
 800af58:	2b7a      	cmp	r3, #122	; 0x7a
 800af5a:	d802      	bhi.n	800af62 <create_name+0xce>
 800af5c:	7ffb      	ldrb	r3, [r7, #31]
 800af5e:	3b20      	subs	r3, #32
 800af60:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	1c5a      	adds	r2, r3, #1
 800af66:	613a      	str	r2, [r7, #16]
 800af68:	68ba      	ldr	r2, [r7, #8]
 800af6a:	4413      	add	r3, r2
 800af6c:	7ffa      	ldrb	r2, [r7, #31]
 800af6e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800af70:	e7a6      	b.n	800aec0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800af72:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800af74:	68fa      	ldr	r2, [r7, #12]
 800af76:	697b      	ldr	r3, [r7, #20]
 800af78:	441a      	add	r2, r3
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800af7e:	693b      	ldr	r3, [r7, #16]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d101      	bne.n	800af88 <create_name+0xf4>
 800af84:	2306      	movs	r3, #6
 800af86:	e010      	b.n	800afaa <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	781b      	ldrb	r3, [r3, #0]
 800af8c:	2be5      	cmp	r3, #229	; 0xe5
 800af8e:	d102      	bne.n	800af96 <create_name+0x102>
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	2205      	movs	r2, #5
 800af94:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800af96:	7ffb      	ldrb	r3, [r7, #31]
 800af98:	2b20      	cmp	r3, #32
 800af9a:	d801      	bhi.n	800afa0 <create_name+0x10c>
 800af9c:	2204      	movs	r2, #4
 800af9e:	e000      	b.n	800afa2 <create_name+0x10e>
 800afa0:	2200      	movs	r2, #0
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	330b      	adds	r3, #11
 800afa6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800afa8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3720      	adds	r7, #32
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}
 800afb2:	bf00      	nop
 800afb4:	0801132c 	.word	0x0801132c
 800afb8:	0800f47c 	.word	0x0800f47c

0800afbc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b086      	sub	sp, #24
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
 800afc4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800afca:	693b      	ldr	r3, [r7, #16]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800afd0:	e002      	b.n	800afd8 <follow_path+0x1c>
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	3301      	adds	r3, #1
 800afd6:	603b      	str	r3, [r7, #0]
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	781b      	ldrb	r3, [r3, #0]
 800afdc:	2b2f      	cmp	r3, #47	; 0x2f
 800afde:	d0f8      	beq.n	800afd2 <follow_path+0x16>
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	781b      	ldrb	r3, [r3, #0]
 800afe4:	2b5c      	cmp	r3, #92	; 0x5c
 800afe6:	d0f4      	beq.n	800afd2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800afe8:	693b      	ldr	r3, [r7, #16]
 800afea:	2200      	movs	r2, #0
 800afec:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	781b      	ldrb	r3, [r3, #0]
 800aff2:	2b1f      	cmp	r3, #31
 800aff4:	d80a      	bhi.n	800b00c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2280      	movs	r2, #128	; 0x80
 800affa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800affe:	2100      	movs	r1, #0
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	f7ff fcf9 	bl	800a9f8 <dir_sdi>
 800b006:	4603      	mov	r3, r0
 800b008:	75fb      	strb	r3, [r7, #23]
 800b00a:	e043      	b.n	800b094 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b00c:	463b      	mov	r3, r7
 800b00e:	4619      	mov	r1, r3
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f7ff ff3f 	bl	800ae94 <create_name>
 800b016:	4603      	mov	r3, r0
 800b018:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b01a:	7dfb      	ldrb	r3, [r7, #23]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d134      	bne.n	800b08a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	f7ff feaf 	bl	800ad84 <dir_find>
 800b026:	4603      	mov	r3, r0
 800b028:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b030:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b032:	7dfb      	ldrb	r3, [r7, #23]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d00a      	beq.n	800b04e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b038:	7dfb      	ldrb	r3, [r7, #23]
 800b03a:	2b04      	cmp	r3, #4
 800b03c:	d127      	bne.n	800b08e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b03e:	7afb      	ldrb	r3, [r7, #11]
 800b040:	f003 0304 	and.w	r3, r3, #4
 800b044:	2b00      	cmp	r3, #0
 800b046:	d122      	bne.n	800b08e <follow_path+0xd2>
 800b048:	2305      	movs	r3, #5
 800b04a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b04c:	e01f      	b.n	800b08e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b04e:	7afb      	ldrb	r3, [r7, #11]
 800b050:	f003 0304 	and.w	r3, r3, #4
 800b054:	2b00      	cmp	r3, #0
 800b056:	d11c      	bne.n	800b092 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b058:	693b      	ldr	r3, [r7, #16]
 800b05a:	799b      	ldrb	r3, [r3, #6]
 800b05c:	f003 0310 	and.w	r3, r3, #16
 800b060:	2b00      	cmp	r3, #0
 800b062:	d102      	bne.n	800b06a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b064:	2305      	movs	r3, #5
 800b066:	75fb      	strb	r3, [r7, #23]
 800b068:	e014      	b.n	800b094 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	695b      	ldr	r3, [r3, #20]
 800b074:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b078:	4413      	add	r3, r2
 800b07a:	4619      	mov	r1, r3
 800b07c:	68f8      	ldr	r0, [r7, #12]
 800b07e:	f7ff fe42 	bl	800ad06 <ld_clust>
 800b082:	4602      	mov	r2, r0
 800b084:	693b      	ldr	r3, [r7, #16]
 800b086:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b088:	e7c0      	b.n	800b00c <follow_path+0x50>
			if (res != FR_OK) break;
 800b08a:	bf00      	nop
 800b08c:	e002      	b.n	800b094 <follow_path+0xd8>
				break;
 800b08e:	bf00      	nop
 800b090:	e000      	b.n	800b094 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b092:	bf00      	nop
			}
		}
	}

	return res;
 800b094:	7dfb      	ldrb	r3, [r7, #23]
}
 800b096:	4618      	mov	r0, r3
 800b098:	3718      	adds	r7, #24
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}

0800b09e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b09e:	b480      	push	{r7}
 800b0a0:	b087      	sub	sp, #28
 800b0a2:	af00      	add	r7, sp, #0
 800b0a4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b0a6:	f04f 33ff 	mov.w	r3, #4294967295
 800b0aa:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d031      	beq.n	800b118 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	617b      	str	r3, [r7, #20]
 800b0ba:	e002      	b.n	800b0c2 <get_ldnumber+0x24>
 800b0bc:	697b      	ldr	r3, [r7, #20]
 800b0be:	3301      	adds	r3, #1
 800b0c0:	617b      	str	r3, [r7, #20]
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	781b      	ldrb	r3, [r3, #0]
 800b0c6:	2b20      	cmp	r3, #32
 800b0c8:	d903      	bls.n	800b0d2 <get_ldnumber+0x34>
 800b0ca:	697b      	ldr	r3, [r7, #20]
 800b0cc:	781b      	ldrb	r3, [r3, #0]
 800b0ce:	2b3a      	cmp	r3, #58	; 0x3a
 800b0d0:	d1f4      	bne.n	800b0bc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	781b      	ldrb	r3, [r3, #0]
 800b0d6:	2b3a      	cmp	r3, #58	; 0x3a
 800b0d8:	d11c      	bne.n	800b114 <get_ldnumber+0x76>
			tp = *path;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	1c5a      	adds	r2, r3, #1
 800b0e4:	60fa      	str	r2, [r7, #12]
 800b0e6:	781b      	ldrb	r3, [r3, #0]
 800b0e8:	3b30      	subs	r3, #48	; 0x30
 800b0ea:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	2b09      	cmp	r3, #9
 800b0f0:	d80e      	bhi.n	800b110 <get_ldnumber+0x72>
 800b0f2:	68fa      	ldr	r2, [r7, #12]
 800b0f4:	697b      	ldr	r3, [r7, #20]
 800b0f6:	429a      	cmp	r2, r3
 800b0f8:	d10a      	bne.n	800b110 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b0fa:	68bb      	ldr	r3, [r7, #8]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d107      	bne.n	800b110 <get_ldnumber+0x72>
					vol = (int)i;
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	3301      	adds	r3, #1
 800b108:	617b      	str	r3, [r7, #20]
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	697a      	ldr	r2, [r7, #20]
 800b10e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b110:	693b      	ldr	r3, [r7, #16]
 800b112:	e002      	b.n	800b11a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b114:	2300      	movs	r3, #0
 800b116:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b118:	693b      	ldr	r3, [r7, #16]
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	371c      	adds	r7, #28
 800b11e:	46bd      	mov	sp, r7
 800b120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b124:	4770      	bx	lr
	...

0800b128 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b082      	sub	sp, #8
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
 800b130:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2200      	movs	r2, #0
 800b136:	70da      	strb	r2, [r3, #3]
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f04f 32ff 	mov.w	r2, #4294967295
 800b13e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b140:	6839      	ldr	r1, [r7, #0]
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	f7ff f8e0 	bl	800a308 <move_window>
 800b148:	4603      	mov	r3, r0
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d001      	beq.n	800b152 <check_fs+0x2a>
 800b14e:	2304      	movs	r3, #4
 800b150:	e038      	b.n	800b1c4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	3330      	adds	r3, #48	; 0x30
 800b156:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b15a:	4618      	mov	r0, r3
 800b15c:	f7fe fe24 	bl	8009da8 <ld_word>
 800b160:	4603      	mov	r3, r0
 800b162:	461a      	mov	r2, r3
 800b164:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b168:	429a      	cmp	r2, r3
 800b16a:	d001      	beq.n	800b170 <check_fs+0x48>
 800b16c:	2303      	movs	r3, #3
 800b16e:	e029      	b.n	800b1c4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b176:	2be9      	cmp	r3, #233	; 0xe9
 800b178:	d009      	beq.n	800b18e <check_fs+0x66>
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b180:	2beb      	cmp	r3, #235	; 0xeb
 800b182:	d11e      	bne.n	800b1c2 <check_fs+0x9a>
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800b18a:	2b90      	cmp	r3, #144	; 0x90
 800b18c:	d119      	bne.n	800b1c2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	3330      	adds	r3, #48	; 0x30
 800b192:	3336      	adds	r3, #54	; 0x36
 800b194:	4618      	mov	r0, r3
 800b196:	f7fe fe1f 	bl	8009dd8 <ld_dword>
 800b19a:	4603      	mov	r3, r0
 800b19c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b1a0:	4a0a      	ldr	r2, [pc, #40]	; (800b1cc <check_fs+0xa4>)
 800b1a2:	4293      	cmp	r3, r2
 800b1a4:	d101      	bne.n	800b1aa <check_fs+0x82>
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	e00c      	b.n	800b1c4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	3330      	adds	r3, #48	; 0x30
 800b1ae:	3352      	adds	r3, #82	; 0x52
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	f7fe fe11 	bl	8009dd8 <ld_dword>
 800b1b6:	4602      	mov	r2, r0
 800b1b8:	4b05      	ldr	r3, [pc, #20]	; (800b1d0 <check_fs+0xa8>)
 800b1ba:	429a      	cmp	r2, r3
 800b1bc:	d101      	bne.n	800b1c2 <check_fs+0x9a>
 800b1be:	2300      	movs	r3, #0
 800b1c0:	e000      	b.n	800b1c4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b1c2:	2302      	movs	r3, #2
}
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	3708      	adds	r7, #8
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}
 800b1cc:	00544146 	.word	0x00544146
 800b1d0:	33544146 	.word	0x33544146

0800b1d4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b096      	sub	sp, #88	; 0x58
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	60f8      	str	r0, [r7, #12]
 800b1dc:	60b9      	str	r1, [r7, #8]
 800b1de:	4613      	mov	r3, r2
 800b1e0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b1e2:	68bb      	ldr	r3, [r7, #8]
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b1e8:	68f8      	ldr	r0, [r7, #12]
 800b1ea:	f7ff ff58 	bl	800b09e <get_ldnumber>
 800b1ee:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b1f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	da01      	bge.n	800b1fa <find_volume+0x26>
 800b1f6:	230b      	movs	r3, #11
 800b1f8:	e22e      	b.n	800b658 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b1fa:	4aa8      	ldr	r2, [pc, #672]	; (800b49c <find_volume+0x2c8>)
 800b1fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b202:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b206:	2b00      	cmp	r3, #0
 800b208:	d101      	bne.n	800b20e <find_volume+0x3a>
 800b20a:	230c      	movs	r3, #12
 800b20c:	e224      	b.n	800b658 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b20e:	68bb      	ldr	r3, [r7, #8]
 800b210:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b212:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b214:	79fb      	ldrb	r3, [r7, #7]
 800b216:	f023 0301 	bic.w	r3, r3, #1
 800b21a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b21c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b21e:	781b      	ldrb	r3, [r3, #0]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d01a      	beq.n	800b25a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b226:	785b      	ldrb	r3, [r3, #1]
 800b228:	4618      	mov	r0, r3
 800b22a:	f7fe fd1f 	bl	8009c6c <disk_status>
 800b22e:	4603      	mov	r3, r0
 800b230:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b234:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b238:	f003 0301 	and.w	r3, r3, #1
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d10c      	bne.n	800b25a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b240:	79fb      	ldrb	r3, [r7, #7]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d007      	beq.n	800b256 <find_volume+0x82>
 800b246:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b24a:	f003 0304 	and.w	r3, r3, #4
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d001      	beq.n	800b256 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b252:	230a      	movs	r3, #10
 800b254:	e200      	b.n	800b658 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800b256:	2300      	movs	r3, #0
 800b258:	e1fe      	b.n	800b658 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b25a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b25c:	2200      	movs	r2, #0
 800b25e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b262:	b2da      	uxtb	r2, r3
 800b264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b266:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b26a:	785b      	ldrb	r3, [r3, #1]
 800b26c:	4618      	mov	r0, r3
 800b26e:	f7fe fd17 	bl	8009ca0 <disk_initialize>
 800b272:	4603      	mov	r3, r0
 800b274:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b278:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b27c:	f003 0301 	and.w	r3, r3, #1
 800b280:	2b00      	cmp	r3, #0
 800b282:	d001      	beq.n	800b288 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b284:	2303      	movs	r3, #3
 800b286:	e1e7      	b.n	800b658 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b288:	79fb      	ldrb	r3, [r7, #7]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d007      	beq.n	800b29e <find_volume+0xca>
 800b28e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b292:	f003 0304 	and.w	r3, r3, #4
 800b296:	2b00      	cmp	r3, #0
 800b298:	d001      	beq.n	800b29e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b29a:	230a      	movs	r3, #10
 800b29c:	e1dc      	b.n	800b658 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b29e:	2300      	movs	r3, #0
 800b2a0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b2a2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b2a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b2a6:	f7ff ff3f 	bl	800b128 <check_fs>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b2b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b2b4:	2b02      	cmp	r3, #2
 800b2b6:	d14b      	bne.n	800b350 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	643b      	str	r3, [r7, #64]	; 0x40
 800b2bc:	e01f      	b.n	800b2fe <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b2be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2c0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b2c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2c6:	011b      	lsls	r3, r3, #4
 800b2c8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b2cc:	4413      	add	r3, r2
 800b2ce:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b2d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d2:	3304      	adds	r3, #4
 800b2d4:	781b      	ldrb	r3, [r3, #0]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d006      	beq.n	800b2e8 <find_volume+0x114>
 800b2da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2dc:	3308      	adds	r3, #8
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f7fe fd7a 	bl	8009dd8 <ld_dword>
 800b2e4:	4602      	mov	r2, r0
 800b2e6:	e000      	b.n	800b2ea <find_volume+0x116>
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2ec:	009b      	lsls	r3, r3, #2
 800b2ee:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800b2f2:	440b      	add	r3, r1
 800b2f4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b2f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2fa:	3301      	adds	r3, #1
 800b2fc:	643b      	str	r3, [r7, #64]	; 0x40
 800b2fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b300:	2b03      	cmp	r3, #3
 800b302:	d9dc      	bls.n	800b2be <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b304:	2300      	movs	r3, #0
 800b306:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b308:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d002      	beq.n	800b314 <find_volume+0x140>
 800b30e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b310:	3b01      	subs	r3, #1
 800b312:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b316:	009b      	lsls	r3, r3, #2
 800b318:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b31c:	4413      	add	r3, r2
 800b31e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b322:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b324:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b326:	2b00      	cmp	r3, #0
 800b328:	d005      	beq.n	800b336 <find_volume+0x162>
 800b32a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b32c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b32e:	f7ff fefb 	bl	800b128 <check_fs>
 800b332:	4603      	mov	r3, r0
 800b334:	e000      	b.n	800b338 <find_volume+0x164>
 800b336:	2303      	movs	r3, #3
 800b338:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b33c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b340:	2b01      	cmp	r3, #1
 800b342:	d905      	bls.n	800b350 <find_volume+0x17c>
 800b344:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b346:	3301      	adds	r3, #1
 800b348:	643b      	str	r3, [r7, #64]	; 0x40
 800b34a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b34c:	2b03      	cmp	r3, #3
 800b34e:	d9e1      	bls.n	800b314 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b350:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b354:	2b04      	cmp	r3, #4
 800b356:	d101      	bne.n	800b35c <find_volume+0x188>
 800b358:	2301      	movs	r3, #1
 800b35a:	e17d      	b.n	800b658 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b35c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b360:	2b01      	cmp	r3, #1
 800b362:	d901      	bls.n	800b368 <find_volume+0x194>
 800b364:	230d      	movs	r3, #13
 800b366:	e177      	b.n	800b658 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b36a:	3330      	adds	r3, #48	; 0x30
 800b36c:	330b      	adds	r3, #11
 800b36e:	4618      	mov	r0, r3
 800b370:	f7fe fd1a 	bl	8009da8 <ld_word>
 800b374:	4603      	mov	r3, r0
 800b376:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b37a:	d001      	beq.n	800b380 <find_volume+0x1ac>
 800b37c:	230d      	movs	r3, #13
 800b37e:	e16b      	b.n	800b658 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b382:	3330      	adds	r3, #48	; 0x30
 800b384:	3316      	adds	r3, #22
 800b386:	4618      	mov	r0, r3
 800b388:	f7fe fd0e 	bl	8009da8 <ld_word>
 800b38c:	4603      	mov	r3, r0
 800b38e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b390:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b392:	2b00      	cmp	r3, #0
 800b394:	d106      	bne.n	800b3a4 <find_volume+0x1d0>
 800b396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b398:	3330      	adds	r3, #48	; 0x30
 800b39a:	3324      	adds	r3, #36	; 0x24
 800b39c:	4618      	mov	r0, r3
 800b39e:	f7fe fd1b 	bl	8009dd8 <ld_dword>
 800b3a2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b3a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b3a8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b3aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ac:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800b3b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3b2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b3b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3b6:	789b      	ldrb	r3, [r3, #2]
 800b3b8:	2b01      	cmp	r3, #1
 800b3ba:	d005      	beq.n	800b3c8 <find_volume+0x1f4>
 800b3bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3be:	789b      	ldrb	r3, [r3, #2]
 800b3c0:	2b02      	cmp	r3, #2
 800b3c2:	d001      	beq.n	800b3c8 <find_volume+0x1f4>
 800b3c4:	230d      	movs	r3, #13
 800b3c6:	e147      	b.n	800b658 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b3c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ca:	789b      	ldrb	r3, [r3, #2]
 800b3cc:	461a      	mov	r2, r3
 800b3ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3d0:	fb02 f303 	mul.w	r3, r2, r3
 800b3d4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b3d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b3dc:	b29a      	uxth	r2, r3
 800b3de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3e0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b3e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3e4:	895b      	ldrh	r3, [r3, #10]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d008      	beq.n	800b3fc <find_volume+0x228>
 800b3ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ec:	895b      	ldrh	r3, [r3, #10]
 800b3ee:	461a      	mov	r2, r3
 800b3f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3f2:	895b      	ldrh	r3, [r3, #10]
 800b3f4:	3b01      	subs	r3, #1
 800b3f6:	4013      	ands	r3, r2
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d001      	beq.n	800b400 <find_volume+0x22c>
 800b3fc:	230d      	movs	r3, #13
 800b3fe:	e12b      	b.n	800b658 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b402:	3330      	adds	r3, #48	; 0x30
 800b404:	3311      	adds	r3, #17
 800b406:	4618      	mov	r0, r3
 800b408:	f7fe fcce 	bl	8009da8 <ld_word>
 800b40c:	4603      	mov	r3, r0
 800b40e:	461a      	mov	r2, r3
 800b410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b412:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b416:	891b      	ldrh	r3, [r3, #8]
 800b418:	f003 030f 	and.w	r3, r3, #15
 800b41c:	b29b      	uxth	r3, r3
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d001      	beq.n	800b426 <find_volume+0x252>
 800b422:	230d      	movs	r3, #13
 800b424:	e118      	b.n	800b658 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b428:	3330      	adds	r3, #48	; 0x30
 800b42a:	3313      	adds	r3, #19
 800b42c:	4618      	mov	r0, r3
 800b42e:	f7fe fcbb 	bl	8009da8 <ld_word>
 800b432:	4603      	mov	r3, r0
 800b434:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b436:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d106      	bne.n	800b44a <find_volume+0x276>
 800b43c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b43e:	3330      	adds	r3, #48	; 0x30
 800b440:	3320      	adds	r3, #32
 800b442:	4618      	mov	r0, r3
 800b444:	f7fe fcc8 	bl	8009dd8 <ld_dword>
 800b448:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b44a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b44c:	3330      	adds	r3, #48	; 0x30
 800b44e:	330e      	adds	r3, #14
 800b450:	4618      	mov	r0, r3
 800b452:	f7fe fca9 	bl	8009da8 <ld_word>
 800b456:	4603      	mov	r3, r0
 800b458:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b45a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d101      	bne.n	800b464 <find_volume+0x290>
 800b460:	230d      	movs	r3, #13
 800b462:	e0f9      	b.n	800b658 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b464:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b466:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b468:	4413      	add	r3, r2
 800b46a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b46c:	8912      	ldrh	r2, [r2, #8]
 800b46e:	0912      	lsrs	r2, r2, #4
 800b470:	b292      	uxth	r2, r2
 800b472:	4413      	add	r3, r2
 800b474:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b476:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b47a:	429a      	cmp	r2, r3
 800b47c:	d201      	bcs.n	800b482 <find_volume+0x2ae>
 800b47e:	230d      	movs	r3, #13
 800b480:	e0ea      	b.n	800b658 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b482:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b486:	1ad3      	subs	r3, r2, r3
 800b488:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b48a:	8952      	ldrh	r2, [r2, #10]
 800b48c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b490:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b494:	2b00      	cmp	r3, #0
 800b496:	d103      	bne.n	800b4a0 <find_volume+0x2cc>
 800b498:	230d      	movs	r3, #13
 800b49a:	e0dd      	b.n	800b658 <find_volume+0x484>
 800b49c:	200002dc 	.word	0x200002dc
		fmt = FS_FAT32;
 800b4a0:	2303      	movs	r3, #3
 800b4a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4a8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b4ac:	4293      	cmp	r3, r2
 800b4ae:	d802      	bhi.n	800b4b6 <find_volume+0x2e2>
 800b4b0:	2302      	movs	r3, #2
 800b4b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4b8:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	d802      	bhi.n	800b4c6 <find_volume+0x2f2>
 800b4c0:	2301      	movs	r3, #1
 800b4c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4c8:	1c9a      	adds	r2, r3, #2
 800b4ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4cc:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800b4ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b4d2:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b4d4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b4d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4d8:	441a      	add	r2, r3
 800b4da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4dc:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800b4de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4e2:	441a      	add	r2, r3
 800b4e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4e6:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800b4e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b4ec:	2b03      	cmp	r3, #3
 800b4ee:	d11e      	bne.n	800b52e <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b4f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4f2:	3330      	adds	r3, #48	; 0x30
 800b4f4:	332a      	adds	r3, #42	; 0x2a
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	f7fe fc56 	bl	8009da8 <ld_word>
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d001      	beq.n	800b506 <find_volume+0x332>
 800b502:	230d      	movs	r3, #13
 800b504:	e0a8      	b.n	800b658 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b508:	891b      	ldrh	r3, [r3, #8]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d001      	beq.n	800b512 <find_volume+0x33e>
 800b50e:	230d      	movs	r3, #13
 800b510:	e0a2      	b.n	800b658 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b514:	3330      	adds	r3, #48	; 0x30
 800b516:	332c      	adds	r3, #44	; 0x2c
 800b518:	4618      	mov	r0, r3
 800b51a:	f7fe fc5d 	bl	8009dd8 <ld_dword>
 800b51e:	4602      	mov	r2, r0
 800b520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b522:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b526:	695b      	ldr	r3, [r3, #20]
 800b528:	009b      	lsls	r3, r3, #2
 800b52a:	647b      	str	r3, [r7, #68]	; 0x44
 800b52c:	e01f      	b.n	800b56e <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b52e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b530:	891b      	ldrh	r3, [r3, #8]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d101      	bne.n	800b53a <find_volume+0x366>
 800b536:	230d      	movs	r3, #13
 800b538:	e08e      	b.n	800b658 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b53a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b53c:	6a1a      	ldr	r2, [r3, #32]
 800b53e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b540:	441a      	add	r2, r3
 800b542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b544:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b546:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b54a:	2b02      	cmp	r3, #2
 800b54c:	d103      	bne.n	800b556 <find_volume+0x382>
 800b54e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b550:	695b      	ldr	r3, [r3, #20]
 800b552:	005b      	lsls	r3, r3, #1
 800b554:	e00a      	b.n	800b56c <find_volume+0x398>
 800b556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b558:	695a      	ldr	r2, [r3, #20]
 800b55a:	4613      	mov	r3, r2
 800b55c:	005b      	lsls	r3, r3, #1
 800b55e:	4413      	add	r3, r2
 800b560:	085a      	lsrs	r2, r3, #1
 800b562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b564:	695b      	ldr	r3, [r3, #20]
 800b566:	f003 0301 	and.w	r3, r3, #1
 800b56a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b56c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b56e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b570:	699a      	ldr	r2, [r3, #24]
 800b572:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b574:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b578:	0a5b      	lsrs	r3, r3, #9
 800b57a:	429a      	cmp	r2, r3
 800b57c:	d201      	bcs.n	800b582 <find_volume+0x3ae>
 800b57e:	230d      	movs	r3, #13
 800b580:	e06a      	b.n	800b658 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b584:	f04f 32ff 	mov.w	r2, #4294967295
 800b588:	611a      	str	r2, [r3, #16]
 800b58a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b58c:	691a      	ldr	r2, [r3, #16]
 800b58e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b590:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800b592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b594:	2280      	movs	r2, #128	; 0x80
 800b596:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b598:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b59c:	2b03      	cmp	r3, #3
 800b59e:	d149      	bne.n	800b634 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b5a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5a2:	3330      	adds	r3, #48	; 0x30
 800b5a4:	3330      	adds	r3, #48	; 0x30
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f7fe fbfe 	bl	8009da8 <ld_word>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	2b01      	cmp	r3, #1
 800b5b0:	d140      	bne.n	800b634 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b5b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5b4:	3301      	adds	r3, #1
 800b5b6:	4619      	mov	r1, r3
 800b5b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b5ba:	f7fe fea5 	bl	800a308 <move_window>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d137      	bne.n	800b634 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800b5c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b5ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5cc:	3330      	adds	r3, #48	; 0x30
 800b5ce:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f7fe fbe8 	bl	8009da8 <ld_word>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	461a      	mov	r2, r3
 800b5dc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b5e0:	429a      	cmp	r2, r3
 800b5e2:	d127      	bne.n	800b634 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b5e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5e6:	3330      	adds	r3, #48	; 0x30
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	f7fe fbf5 	bl	8009dd8 <ld_dword>
 800b5ee:	4602      	mov	r2, r0
 800b5f0:	4b1b      	ldr	r3, [pc, #108]	; (800b660 <find_volume+0x48c>)
 800b5f2:	429a      	cmp	r2, r3
 800b5f4:	d11e      	bne.n	800b634 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b5f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5f8:	3330      	adds	r3, #48	; 0x30
 800b5fa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b5fe:	4618      	mov	r0, r3
 800b600:	f7fe fbea 	bl	8009dd8 <ld_dword>
 800b604:	4602      	mov	r2, r0
 800b606:	4b17      	ldr	r3, [pc, #92]	; (800b664 <find_volume+0x490>)
 800b608:	429a      	cmp	r2, r3
 800b60a:	d113      	bne.n	800b634 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b60c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b60e:	3330      	adds	r3, #48	; 0x30
 800b610:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b614:	4618      	mov	r0, r3
 800b616:	f7fe fbdf 	bl	8009dd8 <ld_dword>
 800b61a:	4602      	mov	r2, r0
 800b61c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b61e:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b622:	3330      	adds	r3, #48	; 0x30
 800b624:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b628:	4618      	mov	r0, r3
 800b62a:	f7fe fbd5 	bl	8009dd8 <ld_dword>
 800b62e:	4602      	mov	r2, r0
 800b630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b632:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b636:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b63a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b63c:	4b0a      	ldr	r3, [pc, #40]	; (800b668 <find_volume+0x494>)
 800b63e:	881b      	ldrh	r3, [r3, #0]
 800b640:	3301      	adds	r3, #1
 800b642:	b29a      	uxth	r2, r3
 800b644:	4b08      	ldr	r3, [pc, #32]	; (800b668 <find_volume+0x494>)
 800b646:	801a      	strh	r2, [r3, #0]
 800b648:	4b07      	ldr	r3, [pc, #28]	; (800b668 <find_volume+0x494>)
 800b64a:	881a      	ldrh	r2, [r3, #0]
 800b64c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b64e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b650:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b652:	f7fe fdf1 	bl	800a238 <clear_lock>
#endif
	return FR_OK;
 800b656:	2300      	movs	r3, #0
}
 800b658:	4618      	mov	r0, r3
 800b65a:	3758      	adds	r7, #88	; 0x58
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}
 800b660:	41615252 	.word	0x41615252
 800b664:	61417272 	.word	0x61417272
 800b668:	200002e0 	.word	0x200002e0

0800b66c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b084      	sub	sp, #16
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
 800b674:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b676:	2309      	movs	r3, #9
 800b678:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d01c      	beq.n	800b6ba <validate+0x4e>
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d018      	beq.n	800b6ba <validate+0x4e>
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	781b      	ldrb	r3, [r3, #0]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d013      	beq.n	800b6ba <validate+0x4e>
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	889a      	ldrh	r2, [r3, #4]
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	88db      	ldrh	r3, [r3, #6]
 800b69c:	429a      	cmp	r2, r3
 800b69e:	d10c      	bne.n	800b6ba <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	785b      	ldrb	r3, [r3, #1]
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f7fe fae0 	bl	8009c6c <disk_status>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	f003 0301 	and.w	r3, r3, #1
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d101      	bne.n	800b6ba <validate+0x4e>
			res = FR_OK;
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b6ba:	7bfb      	ldrb	r3, [r7, #15]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d102      	bne.n	800b6c6 <validate+0x5a>
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	e000      	b.n	800b6c8 <validate+0x5c>
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	683a      	ldr	r2, [r7, #0]
 800b6ca:	6013      	str	r3, [r2, #0]
	return res;
 800b6cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	3710      	adds	r7, #16
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}
	...

0800b6d8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b088      	sub	sp, #32
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	60f8      	str	r0, [r7, #12]
 800b6e0:	60b9      	str	r1, [r7, #8]
 800b6e2:	4613      	mov	r3, r2
 800b6e4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b6e6:	68bb      	ldr	r3, [r7, #8]
 800b6e8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b6ea:	f107 0310 	add.w	r3, r7, #16
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f7ff fcd5 	bl	800b09e <get_ldnumber>
 800b6f4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b6f6:	69fb      	ldr	r3, [r7, #28]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	da01      	bge.n	800b700 <f_mount+0x28>
 800b6fc:	230b      	movs	r3, #11
 800b6fe:	e02b      	b.n	800b758 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b700:	4a17      	ldr	r2, [pc, #92]	; (800b760 <f_mount+0x88>)
 800b702:	69fb      	ldr	r3, [r7, #28]
 800b704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b708:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b70a:	69bb      	ldr	r3, [r7, #24]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d005      	beq.n	800b71c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b710:	69b8      	ldr	r0, [r7, #24]
 800b712:	f7fe fd91 	bl	800a238 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b716:	69bb      	ldr	r3, [r7, #24]
 800b718:	2200      	movs	r2, #0
 800b71a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d002      	beq.n	800b728 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	2200      	movs	r2, #0
 800b726:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b728:	68fa      	ldr	r2, [r7, #12]
 800b72a:	490d      	ldr	r1, [pc, #52]	; (800b760 <f_mount+0x88>)
 800b72c:	69fb      	ldr	r3, [r7, #28]
 800b72e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d002      	beq.n	800b73e <f_mount+0x66>
 800b738:	79fb      	ldrb	r3, [r7, #7]
 800b73a:	2b01      	cmp	r3, #1
 800b73c:	d001      	beq.n	800b742 <f_mount+0x6a>
 800b73e:	2300      	movs	r3, #0
 800b740:	e00a      	b.n	800b758 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b742:	f107 010c 	add.w	r1, r7, #12
 800b746:	f107 0308 	add.w	r3, r7, #8
 800b74a:	2200      	movs	r2, #0
 800b74c:	4618      	mov	r0, r3
 800b74e:	f7ff fd41 	bl	800b1d4 <find_volume>
 800b752:	4603      	mov	r3, r0
 800b754:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b756:	7dfb      	ldrb	r3, [r7, #23]
}
 800b758:	4618      	mov	r0, r3
 800b75a:	3720      	adds	r7, #32
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}
 800b760:	200002dc 	.word	0x200002dc

0800b764 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b098      	sub	sp, #96	; 0x60
 800b768:	af00      	add	r7, sp, #0
 800b76a:	60f8      	str	r0, [r7, #12]
 800b76c:	60b9      	str	r1, [r7, #8]
 800b76e:	4613      	mov	r3, r2
 800b770:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d101      	bne.n	800b77c <f_open+0x18>
 800b778:	2309      	movs	r3, #9
 800b77a:	e1ad      	b.n	800bad8 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b77c:	79fb      	ldrb	r3, [r7, #7]
 800b77e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b782:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b784:	79fa      	ldrb	r2, [r7, #7]
 800b786:	f107 0110 	add.w	r1, r7, #16
 800b78a:	f107 0308 	add.w	r3, r7, #8
 800b78e:	4618      	mov	r0, r3
 800b790:	f7ff fd20 	bl	800b1d4 <find_volume>
 800b794:	4603      	mov	r3, r0
 800b796:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800b79a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	f040 8191 	bne.w	800bac6 <f_open+0x362>
		dj.obj.fs = fs;
 800b7a4:	693b      	ldr	r3, [r7, #16]
 800b7a6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b7a8:	68ba      	ldr	r2, [r7, #8]
 800b7aa:	f107 0314 	add.w	r3, r7, #20
 800b7ae:	4611      	mov	r1, r2
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f7ff fc03 	bl	800afbc <follow_path>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b7bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d11a      	bne.n	800b7fa <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b7c4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b7c8:	b25b      	sxtb	r3, r3
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	da03      	bge.n	800b7d6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800b7ce:	2306      	movs	r3, #6
 800b7d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b7d4:	e011      	b.n	800b7fa <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b7d6:	79fb      	ldrb	r3, [r7, #7]
 800b7d8:	f023 0301 	bic.w	r3, r3, #1
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	bf14      	ite	ne
 800b7e0:	2301      	movne	r3, #1
 800b7e2:	2300      	moveq	r3, #0
 800b7e4:	b2db      	uxtb	r3, r3
 800b7e6:	461a      	mov	r2, r3
 800b7e8:	f107 0314 	add.w	r3, r7, #20
 800b7ec:	4611      	mov	r1, r2
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	f7fe fbda 	bl	8009fa8 <chk_lock>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b7fa:	79fb      	ldrb	r3, [r7, #7]
 800b7fc:	f003 031c 	and.w	r3, r3, #28
 800b800:	2b00      	cmp	r3, #0
 800b802:	d07f      	beq.n	800b904 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800b804:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d017      	beq.n	800b83c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b80c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b810:	2b04      	cmp	r3, #4
 800b812:	d10e      	bne.n	800b832 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b814:	f7fe fc24 	bl	800a060 <enq_lock>
 800b818:	4603      	mov	r3, r0
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d006      	beq.n	800b82c <f_open+0xc8>
 800b81e:	f107 0314 	add.w	r3, r7, #20
 800b822:	4618      	mov	r0, r3
 800b824:	f7ff fb03 	bl	800ae2e <dir_register>
 800b828:	4603      	mov	r3, r0
 800b82a:	e000      	b.n	800b82e <f_open+0xca>
 800b82c:	2312      	movs	r3, #18
 800b82e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b832:	79fb      	ldrb	r3, [r7, #7]
 800b834:	f043 0308 	orr.w	r3, r3, #8
 800b838:	71fb      	strb	r3, [r7, #7]
 800b83a:	e010      	b.n	800b85e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b83c:	7ebb      	ldrb	r3, [r7, #26]
 800b83e:	f003 0311 	and.w	r3, r3, #17
 800b842:	2b00      	cmp	r3, #0
 800b844:	d003      	beq.n	800b84e <f_open+0xea>
					res = FR_DENIED;
 800b846:	2307      	movs	r3, #7
 800b848:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b84c:	e007      	b.n	800b85e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b84e:	79fb      	ldrb	r3, [r7, #7]
 800b850:	f003 0304 	and.w	r3, r3, #4
 800b854:	2b00      	cmp	r3, #0
 800b856:	d002      	beq.n	800b85e <f_open+0xfa>
 800b858:	2308      	movs	r3, #8
 800b85a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b85e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b862:	2b00      	cmp	r3, #0
 800b864:	d168      	bne.n	800b938 <f_open+0x1d4>
 800b866:	79fb      	ldrb	r3, [r7, #7]
 800b868:	f003 0308 	and.w	r3, r3, #8
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d063      	beq.n	800b938 <f_open+0x1d4>
				dw = GET_FATTIME();
 800b870:	f000 fc54 	bl	800c11c <get_fattime>
 800b874:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b878:	330e      	adds	r3, #14
 800b87a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b87c:	4618      	mov	r0, r3
 800b87e:	f7fe fae9 	bl	8009e54 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b884:	3316      	adds	r3, #22
 800b886:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b888:	4618      	mov	r0, r3
 800b88a:	f7fe fae3 	bl	8009e54 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b88e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b890:	330b      	adds	r3, #11
 800b892:	2220      	movs	r2, #32
 800b894:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b896:	693b      	ldr	r3, [r7, #16]
 800b898:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b89a:	4611      	mov	r1, r2
 800b89c:	4618      	mov	r0, r3
 800b89e:	f7ff fa32 	bl	800ad06 <ld_clust>
 800b8a2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b8a4:	693b      	ldr	r3, [r7, #16]
 800b8a6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f7ff fa4a 	bl	800ad44 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b8b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8b2:	331c      	adds	r3, #28
 800b8b4:	2100      	movs	r1, #0
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f7fe facc 	bl	8009e54 <st_dword>
					fs->wflag = 1;
 800b8bc:	693b      	ldr	r3, [r7, #16]
 800b8be:	2201      	movs	r2, #1
 800b8c0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b8c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d037      	beq.n	800b938 <f_open+0x1d4>
						dw = fs->winsect;
 800b8c8:	693b      	ldr	r3, [r7, #16]
 800b8ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8cc:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800b8ce:	f107 0314 	add.w	r3, r7, #20
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f7fe ff5d 	bl	800a796 <remove_chain>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800b8e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d126      	bne.n	800b938 <f_open+0x1d4>
							res = move_window(fs, dw);
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f7fe fd0a 	bl	800a308 <move_window>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b8fa:	693b      	ldr	r3, [r7, #16]
 800b8fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b8fe:	3a01      	subs	r2, #1
 800b900:	60da      	str	r2, [r3, #12]
 800b902:	e019      	b.n	800b938 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b904:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d115      	bne.n	800b938 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b90c:	7ebb      	ldrb	r3, [r7, #26]
 800b90e:	f003 0310 	and.w	r3, r3, #16
 800b912:	2b00      	cmp	r3, #0
 800b914:	d003      	beq.n	800b91e <f_open+0x1ba>
					res = FR_NO_FILE;
 800b916:	2304      	movs	r3, #4
 800b918:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b91c:	e00c      	b.n	800b938 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b91e:	79fb      	ldrb	r3, [r7, #7]
 800b920:	f003 0302 	and.w	r3, r3, #2
 800b924:	2b00      	cmp	r3, #0
 800b926:	d007      	beq.n	800b938 <f_open+0x1d4>
 800b928:	7ebb      	ldrb	r3, [r7, #26]
 800b92a:	f003 0301 	and.w	r3, r3, #1
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d002      	beq.n	800b938 <f_open+0x1d4>
						res = FR_DENIED;
 800b932:	2307      	movs	r3, #7
 800b934:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800b938:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d128      	bne.n	800b992 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b940:	79fb      	ldrb	r3, [r7, #7]
 800b942:	f003 0308 	and.w	r3, r3, #8
 800b946:	2b00      	cmp	r3, #0
 800b948:	d003      	beq.n	800b952 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800b94a:	79fb      	ldrb	r3, [r7, #7]
 800b94c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b950:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b952:	693b      	ldr	r3, [r7, #16]
 800b954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800b95a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b960:	79fb      	ldrb	r3, [r7, #7]
 800b962:	f023 0301 	bic.w	r3, r3, #1
 800b966:	2b00      	cmp	r3, #0
 800b968:	bf14      	ite	ne
 800b96a:	2301      	movne	r3, #1
 800b96c:	2300      	moveq	r3, #0
 800b96e:	b2db      	uxtb	r3, r3
 800b970:	461a      	mov	r2, r3
 800b972:	f107 0314 	add.w	r3, r7, #20
 800b976:	4611      	mov	r1, r2
 800b978:	4618      	mov	r0, r3
 800b97a:	f7fe fb93 	bl	800a0a4 <inc_lock>
 800b97e:	4602      	mov	r2, r0
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	691b      	ldr	r3, [r3, #16]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d102      	bne.n	800b992 <f_open+0x22e>
 800b98c:	2302      	movs	r3, #2
 800b98e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b992:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b996:	2b00      	cmp	r3, #0
 800b998:	f040 8095 	bne.w	800bac6 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b99c:	693b      	ldr	r3, [r7, #16]
 800b99e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b9a0:	4611      	mov	r1, r2
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	f7ff f9af 	bl	800ad06 <ld_clust>
 800b9a8:	4602      	mov	r2, r0
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b9ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9b0:	331c      	adds	r3, #28
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f7fe fa10 	bl	8009dd8 <ld_dword>
 800b9b8:	4602      	mov	r2, r0
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b9c4:	693a      	ldr	r2, [r7, #16]
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b9ca:	693b      	ldr	r3, [r7, #16]
 800b9cc:	88da      	ldrh	r2, [r3, #6]
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	79fa      	ldrb	r2, [r7, #7]
 800b9d6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	2200      	movs	r2, #0
 800b9dc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	3330      	adds	r3, #48	; 0x30
 800b9ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b9f2:	2100      	movs	r1, #0
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f7fe fa7a 	bl	8009eee <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b9fa:	79fb      	ldrb	r3, [r7, #7]
 800b9fc:	f003 0320 	and.w	r3, r3, #32
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d060      	beq.n	800bac6 <f_open+0x362>
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	68db      	ldr	r3, [r3, #12]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d05c      	beq.n	800bac6 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	68da      	ldr	r2, [r3, #12]
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ba14:	693b      	ldr	r3, [r7, #16]
 800ba16:	895b      	ldrh	r3, [r3, #10]
 800ba18:	025b      	lsls	r3, r3, #9
 800ba1a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	689b      	ldr	r3, [r3, #8]
 800ba20:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	68db      	ldr	r3, [r3, #12]
 800ba26:	657b      	str	r3, [r7, #84]	; 0x54
 800ba28:	e016      	b.n	800ba58 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f7fe fd25 	bl	800a47e <get_fat>
 800ba34:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800ba36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ba38:	2b01      	cmp	r3, #1
 800ba3a:	d802      	bhi.n	800ba42 <f_open+0x2de>
 800ba3c:	2302      	movs	r3, #2
 800ba3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ba42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ba44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba48:	d102      	bne.n	800ba50 <f_open+0x2ec>
 800ba4a:	2301      	movs	r3, #1
 800ba4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ba50:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ba52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba54:	1ad3      	subs	r3, r2, r3
 800ba56:	657b      	str	r3, [r7, #84]	; 0x54
 800ba58:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d103      	bne.n	800ba68 <f_open+0x304>
 800ba60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ba62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba64:	429a      	cmp	r2, r3
 800ba66:	d8e0      	bhi.n	800ba2a <f_open+0x2c6>
				}
				fp->clust = clst;
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ba6c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ba6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d127      	bne.n	800bac6 <f_open+0x362>
 800ba76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d022      	beq.n	800bac6 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ba84:	4618      	mov	r0, r3
 800ba86:	f7fe fcdb 	bl	800a440 <clust2sect>
 800ba8a:	6478      	str	r0, [r7, #68]	; 0x44
 800ba8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d103      	bne.n	800ba9a <f_open+0x336>
						res = FR_INT_ERR;
 800ba92:	2302      	movs	r3, #2
 800ba94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ba98:	e015      	b.n	800bac6 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ba9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba9c:	0a5a      	lsrs	r2, r3, #9
 800ba9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800baa0:	441a      	add	r2, r3
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800baa6:	693b      	ldr	r3, [r7, #16]
 800baa8:	7858      	ldrb	r0, [r3, #1]
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	6a1a      	ldr	r2, [r3, #32]
 800bab4:	2301      	movs	r3, #1
 800bab6:	f7fe f919 	bl	8009cec <disk_read>
 800baba:	4603      	mov	r3, r0
 800babc:	2b00      	cmp	r3, #0
 800babe:	d002      	beq.n	800bac6 <f_open+0x362>
 800bac0:	2301      	movs	r3, #1
 800bac2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800bac6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d002      	beq.n	800bad4 <f_open+0x370>
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	2200      	movs	r2, #0
 800bad2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800bad4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800bad8:	4618      	mov	r0, r3
 800bada:	3760      	adds	r7, #96	; 0x60
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}

0800bae0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b08c      	sub	sp, #48	; 0x30
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	60f8      	str	r0, [r7, #12]
 800bae8:	60b9      	str	r1, [r7, #8]
 800baea:	607a      	str	r2, [r7, #4]
 800baec:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800baee:	68bb      	ldr	r3, [r7, #8]
 800baf0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	2200      	movs	r2, #0
 800baf6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	f107 0210 	add.w	r2, r7, #16
 800bafe:	4611      	mov	r1, r2
 800bb00:	4618      	mov	r0, r3
 800bb02:	f7ff fdb3 	bl	800b66c <validate>
 800bb06:	4603      	mov	r3, r0
 800bb08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800bb0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d107      	bne.n	800bb24 <f_write+0x44>
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	7d5b      	ldrb	r3, [r3, #21]
 800bb18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800bb1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d002      	beq.n	800bb2a <f_write+0x4a>
 800bb24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bb28:	e14b      	b.n	800bdc2 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	7d1b      	ldrb	r3, [r3, #20]
 800bb2e:	f003 0302 	and.w	r3, r3, #2
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d101      	bne.n	800bb3a <f_write+0x5a>
 800bb36:	2307      	movs	r3, #7
 800bb38:	e143      	b.n	800bdc2 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	699a      	ldr	r2, [r3, #24]
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	441a      	add	r2, r3
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	699b      	ldr	r3, [r3, #24]
 800bb46:	429a      	cmp	r2, r3
 800bb48:	f080 812d 	bcs.w	800bda6 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	699b      	ldr	r3, [r3, #24]
 800bb50:	43db      	mvns	r3, r3
 800bb52:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800bb54:	e127      	b.n	800bda6 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	699b      	ldr	r3, [r3, #24]
 800bb5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	f040 80e3 	bne.w	800bd2a <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	699b      	ldr	r3, [r3, #24]
 800bb68:	0a5b      	lsrs	r3, r3, #9
 800bb6a:	693a      	ldr	r2, [r7, #16]
 800bb6c:	8952      	ldrh	r2, [r2, #10]
 800bb6e:	3a01      	subs	r2, #1
 800bb70:	4013      	ands	r3, r2
 800bb72:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800bb74:	69bb      	ldr	r3, [r7, #24]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d143      	bne.n	800bc02 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	699b      	ldr	r3, [r3, #24]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d10c      	bne.n	800bb9c <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	689b      	ldr	r3, [r3, #8]
 800bb86:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800bb88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d11a      	bne.n	800bbc4 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	2100      	movs	r1, #0
 800bb92:	4618      	mov	r0, r3
 800bb94:	f7fe fe64 	bl	800a860 <create_chain>
 800bb98:	62b8      	str	r0, [r7, #40]	; 0x28
 800bb9a:	e013      	b.n	800bbc4 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d007      	beq.n	800bbb4 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	699b      	ldr	r3, [r3, #24]
 800bba8:	4619      	mov	r1, r3
 800bbaa:	68f8      	ldr	r0, [r7, #12]
 800bbac:	f7fe fef0 	bl	800a990 <clmt_clust>
 800bbb0:	62b8      	str	r0, [r7, #40]	; 0x28
 800bbb2:	e007      	b.n	800bbc4 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800bbb4:	68fa      	ldr	r2, [r7, #12]
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	69db      	ldr	r3, [r3, #28]
 800bbba:	4619      	mov	r1, r3
 800bbbc:	4610      	mov	r0, r2
 800bbbe:	f7fe fe4f 	bl	800a860 <create_chain>
 800bbc2:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bbc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	f000 80f2 	beq.w	800bdb0 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800bbcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbce:	2b01      	cmp	r3, #1
 800bbd0:	d104      	bne.n	800bbdc <f_write+0xfc>
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	2202      	movs	r2, #2
 800bbd6:	755a      	strb	r2, [r3, #21]
 800bbd8:	2302      	movs	r3, #2
 800bbda:	e0f2      	b.n	800bdc2 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bbdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbe2:	d104      	bne.n	800bbee <f_write+0x10e>
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	2201      	movs	r2, #1
 800bbe8:	755a      	strb	r2, [r3, #21]
 800bbea:	2301      	movs	r3, #1
 800bbec:	e0e9      	b.n	800bdc2 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bbf2:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	689b      	ldr	r3, [r3, #8]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d102      	bne.n	800bc02 <f_write+0x122>
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc00:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	7d1b      	ldrb	r3, [r3, #20]
 800bc06:	b25b      	sxtb	r3, r3
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	da18      	bge.n	800bc3e <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bc0c:	693b      	ldr	r3, [r7, #16]
 800bc0e:	7858      	ldrb	r0, [r3, #1]
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	6a1a      	ldr	r2, [r3, #32]
 800bc1a:	2301      	movs	r3, #1
 800bc1c:	f7fe f886 	bl	8009d2c <disk_write>
 800bc20:	4603      	mov	r3, r0
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d004      	beq.n	800bc30 <f_write+0x150>
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	2201      	movs	r2, #1
 800bc2a:	755a      	strb	r2, [r3, #21]
 800bc2c:	2301      	movs	r3, #1
 800bc2e:	e0c8      	b.n	800bdc2 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	7d1b      	ldrb	r3, [r3, #20]
 800bc34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc38:	b2da      	uxtb	r2, r3
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800bc3e:	693a      	ldr	r2, [r7, #16]
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	69db      	ldr	r3, [r3, #28]
 800bc44:	4619      	mov	r1, r3
 800bc46:	4610      	mov	r0, r2
 800bc48:	f7fe fbfa 	bl	800a440 <clust2sect>
 800bc4c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800bc4e:	697b      	ldr	r3, [r7, #20]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d104      	bne.n	800bc5e <f_write+0x17e>
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	2202      	movs	r2, #2
 800bc58:	755a      	strb	r2, [r3, #21]
 800bc5a:	2302      	movs	r3, #2
 800bc5c:	e0b1      	b.n	800bdc2 <f_write+0x2e2>
			sect += csect;
 800bc5e:	697a      	ldr	r2, [r7, #20]
 800bc60:	69bb      	ldr	r3, [r7, #24]
 800bc62:	4413      	add	r3, r2
 800bc64:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	0a5b      	lsrs	r3, r3, #9
 800bc6a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800bc6c:	6a3b      	ldr	r3, [r7, #32]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d03c      	beq.n	800bcec <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800bc72:	69ba      	ldr	r2, [r7, #24]
 800bc74:	6a3b      	ldr	r3, [r7, #32]
 800bc76:	4413      	add	r3, r2
 800bc78:	693a      	ldr	r2, [r7, #16]
 800bc7a:	8952      	ldrh	r2, [r2, #10]
 800bc7c:	4293      	cmp	r3, r2
 800bc7e:	d905      	bls.n	800bc8c <f_write+0x1ac>
					cc = fs->csize - csect;
 800bc80:	693b      	ldr	r3, [r7, #16]
 800bc82:	895b      	ldrh	r3, [r3, #10]
 800bc84:	461a      	mov	r2, r3
 800bc86:	69bb      	ldr	r3, [r7, #24]
 800bc88:	1ad3      	subs	r3, r2, r3
 800bc8a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bc8c:	693b      	ldr	r3, [r7, #16]
 800bc8e:	7858      	ldrb	r0, [r3, #1]
 800bc90:	6a3b      	ldr	r3, [r7, #32]
 800bc92:	697a      	ldr	r2, [r7, #20]
 800bc94:	69f9      	ldr	r1, [r7, #28]
 800bc96:	f7fe f849 	bl	8009d2c <disk_write>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d004      	beq.n	800bcaa <f_write+0x1ca>
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	2201      	movs	r2, #1
 800bca4:	755a      	strb	r2, [r3, #21]
 800bca6:	2301      	movs	r3, #1
 800bca8:	e08b      	b.n	800bdc2 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	6a1a      	ldr	r2, [r3, #32]
 800bcae:	697b      	ldr	r3, [r7, #20]
 800bcb0:	1ad3      	subs	r3, r2, r3
 800bcb2:	6a3a      	ldr	r2, [r7, #32]
 800bcb4:	429a      	cmp	r2, r3
 800bcb6:	d915      	bls.n	800bce4 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	6a1a      	ldr	r2, [r3, #32]
 800bcc2:	697b      	ldr	r3, [r7, #20]
 800bcc4:	1ad3      	subs	r3, r2, r3
 800bcc6:	025b      	lsls	r3, r3, #9
 800bcc8:	69fa      	ldr	r2, [r7, #28]
 800bcca:	4413      	add	r3, r2
 800bccc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bcd0:	4619      	mov	r1, r3
 800bcd2:	f7fe f8eb 	bl	8009eac <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	7d1b      	ldrb	r3, [r3, #20]
 800bcda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bcde:	b2da      	uxtb	r2, r3
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800bce4:	6a3b      	ldr	r3, [r7, #32]
 800bce6:	025b      	lsls	r3, r3, #9
 800bce8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800bcea:	e03f      	b.n	800bd6c <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	6a1b      	ldr	r3, [r3, #32]
 800bcf0:	697a      	ldr	r2, [r7, #20]
 800bcf2:	429a      	cmp	r2, r3
 800bcf4:	d016      	beq.n	800bd24 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	699a      	ldr	r2, [r3, #24]
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bcfe:	429a      	cmp	r2, r3
 800bd00:	d210      	bcs.n	800bd24 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800bd02:	693b      	ldr	r3, [r7, #16]
 800bd04:	7858      	ldrb	r0, [r3, #1]
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bd0c:	2301      	movs	r3, #1
 800bd0e:	697a      	ldr	r2, [r7, #20]
 800bd10:	f7fd ffec 	bl	8009cec <disk_read>
 800bd14:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d004      	beq.n	800bd24 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	2201      	movs	r2, #1
 800bd1e:	755a      	strb	r2, [r3, #21]
 800bd20:	2301      	movs	r3, #1
 800bd22:	e04e      	b.n	800bdc2 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	697a      	ldr	r2, [r7, #20]
 800bd28:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	699b      	ldr	r3, [r3, #24]
 800bd2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd32:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800bd36:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800bd38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	429a      	cmp	r2, r3
 800bd3e:	d901      	bls.n	800bd44 <f_write+0x264>
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	699b      	ldr	r3, [r3, #24]
 800bd4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd52:	4413      	add	r3, r2
 800bd54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd56:	69f9      	ldr	r1, [r7, #28]
 800bd58:	4618      	mov	r0, r3
 800bd5a:	f7fe f8a7 	bl	8009eac <mem_cpy>
		fp->flag |= FA_DIRTY;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	7d1b      	ldrb	r3, [r3, #20]
 800bd62:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bd66:	b2da      	uxtb	r2, r3
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800bd6c:	69fa      	ldr	r2, [r7, #28]
 800bd6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd70:	4413      	add	r3, r2
 800bd72:	61fb      	str	r3, [r7, #28]
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	699a      	ldr	r2, [r3, #24]
 800bd78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd7a:	441a      	add	r2, r3
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	619a      	str	r2, [r3, #24]
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	68da      	ldr	r2, [r3, #12]
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	699b      	ldr	r3, [r3, #24]
 800bd88:	429a      	cmp	r2, r3
 800bd8a:	bf38      	it	cc
 800bd8c:	461a      	movcc	r2, r3
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	60da      	str	r2, [r3, #12]
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	681a      	ldr	r2, [r3, #0]
 800bd96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd98:	441a      	add	r2, r3
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	601a      	str	r2, [r3, #0]
 800bd9e:	687a      	ldr	r2, [r7, #4]
 800bda0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bda2:	1ad3      	subs	r3, r2, r3
 800bda4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	f47f aed4 	bne.w	800bb56 <f_write+0x76>
 800bdae:	e000      	b.n	800bdb2 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bdb0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	7d1b      	ldrb	r3, [r3, #20]
 800bdb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdba:	b2da      	uxtb	r2, r3
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800bdc0:	2300      	movs	r3, #0
}
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	3730      	adds	r7, #48	; 0x30
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bd80      	pop	{r7, pc}

0800bdca <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800bdca:	b580      	push	{r7, lr}
 800bdcc:	b086      	sub	sp, #24
 800bdce:	af00      	add	r7, sp, #0
 800bdd0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	f107 0208 	add.w	r2, r7, #8
 800bdd8:	4611      	mov	r1, r2
 800bdda:	4618      	mov	r0, r3
 800bddc:	f7ff fc46 	bl	800b66c <validate>
 800bde0:	4603      	mov	r3, r0
 800bde2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bde4:	7dfb      	ldrb	r3, [r7, #23]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d168      	bne.n	800bebc <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	7d1b      	ldrb	r3, [r3, #20]
 800bdee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d062      	beq.n	800bebc <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	7d1b      	ldrb	r3, [r3, #20]
 800bdfa:	b25b      	sxtb	r3, r3
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	da15      	bge.n	800be2c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	7858      	ldrb	r0, [r3, #1]
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	6a1a      	ldr	r2, [r3, #32]
 800be0e:	2301      	movs	r3, #1
 800be10:	f7fd ff8c 	bl	8009d2c <disk_write>
 800be14:	4603      	mov	r3, r0
 800be16:	2b00      	cmp	r3, #0
 800be18:	d001      	beq.n	800be1e <f_sync+0x54>
 800be1a:	2301      	movs	r3, #1
 800be1c:	e04f      	b.n	800bebe <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	7d1b      	ldrb	r3, [r3, #20]
 800be22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be26:	b2da      	uxtb	r2, r3
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800be2c:	f000 f976 	bl	800c11c <get_fattime>
 800be30:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800be32:	68ba      	ldr	r2, [r7, #8]
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be38:	4619      	mov	r1, r3
 800be3a:	4610      	mov	r0, r2
 800be3c:	f7fe fa64 	bl	800a308 <move_window>
 800be40:	4603      	mov	r3, r0
 800be42:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800be44:	7dfb      	ldrb	r3, [r7, #23]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d138      	bne.n	800bebc <f_sync+0xf2>
					dir = fp->dir_ptr;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be4e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	330b      	adds	r3, #11
 800be54:	781a      	ldrb	r2, [r3, #0]
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	330b      	adds	r3, #11
 800be5a:	f042 0220 	orr.w	r2, r2, #32
 800be5e:	b2d2      	uxtb	r2, r2
 800be60:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6818      	ldr	r0, [r3, #0]
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	689b      	ldr	r3, [r3, #8]
 800be6a:	461a      	mov	r2, r3
 800be6c:	68f9      	ldr	r1, [r7, #12]
 800be6e:	f7fe ff69 	bl	800ad44 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	f103 021c 	add.w	r2, r3, #28
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	68db      	ldr	r3, [r3, #12]
 800be7c:	4619      	mov	r1, r3
 800be7e:	4610      	mov	r0, r2
 800be80:	f7fd ffe8 	bl	8009e54 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	3316      	adds	r3, #22
 800be88:	6939      	ldr	r1, [r7, #16]
 800be8a:	4618      	mov	r0, r3
 800be8c:	f7fd ffe2 	bl	8009e54 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	3312      	adds	r3, #18
 800be94:	2100      	movs	r1, #0
 800be96:	4618      	mov	r0, r3
 800be98:	f7fd ffc1 	bl	8009e1e <st_word>
					fs->wflag = 1;
 800be9c:	68bb      	ldr	r3, [r7, #8]
 800be9e:	2201      	movs	r2, #1
 800bea0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800bea2:	68bb      	ldr	r3, [r7, #8]
 800bea4:	4618      	mov	r0, r3
 800bea6:	f7fe fa5d 	bl	800a364 <sync_fs>
 800beaa:	4603      	mov	r3, r0
 800beac:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	7d1b      	ldrb	r3, [r3, #20]
 800beb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800beb6:	b2da      	uxtb	r2, r3
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800bebc:	7dfb      	ldrb	r3, [r7, #23]
}
 800bebe:	4618      	mov	r0, r3
 800bec0:	3718      	adds	r7, #24
 800bec2:	46bd      	mov	sp, r7
 800bec4:	bd80      	pop	{r7, pc}

0800bec6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800bec6:	b580      	push	{r7, lr}
 800bec8:	b084      	sub	sp, #16
 800beca:	af00      	add	r7, sp, #0
 800becc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f7ff ff7b 	bl	800bdca <f_sync>
 800bed4:	4603      	mov	r3, r0
 800bed6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800bed8:	7bfb      	ldrb	r3, [r7, #15]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d118      	bne.n	800bf10 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f107 0208 	add.w	r2, r7, #8
 800bee4:	4611      	mov	r1, r2
 800bee6:	4618      	mov	r0, r3
 800bee8:	f7ff fbc0 	bl	800b66c <validate>
 800beec:	4603      	mov	r3, r0
 800beee:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bef0:	7bfb      	ldrb	r3, [r7, #15]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d10c      	bne.n	800bf10 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	691b      	ldr	r3, [r3, #16]
 800befa:	4618      	mov	r0, r3
 800befc:	f7fe f960 	bl	800a1c0 <dec_lock>
 800bf00:	4603      	mov	r3, r0
 800bf02:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800bf04:	7bfb      	ldrb	r3, [r7, #15]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d102      	bne.n	800bf10 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800bf10:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf12:	4618      	mov	r0, r3
 800bf14:	3710      	adds	r7, #16
 800bf16:	46bd      	mov	sp, r7
 800bf18:	bd80      	pop	{r7, pc}
	...

0800bf1c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800bf1c:	b480      	push	{r7}
 800bf1e:	b087      	sub	sp, #28
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	60f8      	str	r0, [r7, #12]
 800bf24:	60b9      	str	r1, [r7, #8]
 800bf26:	4613      	mov	r3, r2
 800bf28:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800bf2a:	2301      	movs	r3, #1
 800bf2c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800bf2e:	2300      	movs	r3, #0
 800bf30:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800bf32:	4b1f      	ldr	r3, [pc, #124]	; (800bfb0 <FATFS_LinkDriverEx+0x94>)
 800bf34:	7a5b      	ldrb	r3, [r3, #9]
 800bf36:	b2db      	uxtb	r3, r3
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d131      	bne.n	800bfa0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800bf3c:	4b1c      	ldr	r3, [pc, #112]	; (800bfb0 <FATFS_LinkDriverEx+0x94>)
 800bf3e:	7a5b      	ldrb	r3, [r3, #9]
 800bf40:	b2db      	uxtb	r3, r3
 800bf42:	461a      	mov	r2, r3
 800bf44:	4b1a      	ldr	r3, [pc, #104]	; (800bfb0 <FATFS_LinkDriverEx+0x94>)
 800bf46:	2100      	movs	r1, #0
 800bf48:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800bf4a:	4b19      	ldr	r3, [pc, #100]	; (800bfb0 <FATFS_LinkDriverEx+0x94>)
 800bf4c:	7a5b      	ldrb	r3, [r3, #9]
 800bf4e:	b2db      	uxtb	r3, r3
 800bf50:	4a17      	ldr	r2, [pc, #92]	; (800bfb0 <FATFS_LinkDriverEx+0x94>)
 800bf52:	009b      	lsls	r3, r3, #2
 800bf54:	4413      	add	r3, r2
 800bf56:	68fa      	ldr	r2, [r7, #12]
 800bf58:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800bf5a:	4b15      	ldr	r3, [pc, #84]	; (800bfb0 <FATFS_LinkDriverEx+0x94>)
 800bf5c:	7a5b      	ldrb	r3, [r3, #9]
 800bf5e:	b2db      	uxtb	r3, r3
 800bf60:	461a      	mov	r2, r3
 800bf62:	4b13      	ldr	r3, [pc, #76]	; (800bfb0 <FATFS_LinkDriverEx+0x94>)
 800bf64:	4413      	add	r3, r2
 800bf66:	79fa      	ldrb	r2, [r7, #7]
 800bf68:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800bf6a:	4b11      	ldr	r3, [pc, #68]	; (800bfb0 <FATFS_LinkDriverEx+0x94>)
 800bf6c:	7a5b      	ldrb	r3, [r3, #9]
 800bf6e:	b2db      	uxtb	r3, r3
 800bf70:	1c5a      	adds	r2, r3, #1
 800bf72:	b2d1      	uxtb	r1, r2
 800bf74:	4a0e      	ldr	r2, [pc, #56]	; (800bfb0 <FATFS_LinkDriverEx+0x94>)
 800bf76:	7251      	strb	r1, [r2, #9]
 800bf78:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800bf7a:	7dbb      	ldrb	r3, [r7, #22]
 800bf7c:	3330      	adds	r3, #48	; 0x30
 800bf7e:	b2da      	uxtb	r2, r3
 800bf80:	68bb      	ldr	r3, [r7, #8]
 800bf82:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	3301      	adds	r3, #1
 800bf88:	223a      	movs	r2, #58	; 0x3a
 800bf8a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800bf8c:	68bb      	ldr	r3, [r7, #8]
 800bf8e:	3302      	adds	r3, #2
 800bf90:	222f      	movs	r2, #47	; 0x2f
 800bf92:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	3303      	adds	r3, #3
 800bf98:	2200      	movs	r2, #0
 800bf9a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bfa0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	371c      	adds	r7, #28
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfac:	4770      	bx	lr
 800bfae:	bf00      	nop
 800bfb0:	20000304 	.word	0x20000304

0800bfb4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b082      	sub	sp, #8
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
 800bfbc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	6839      	ldr	r1, [r7, #0]
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f7ff ffaa 	bl	800bf1c <FATFS_LinkDriverEx>
 800bfc8:	4603      	mov	r3, r0
}
 800bfca:	4618      	mov	r0, r3
 800bfcc:	3708      	adds	r7, #8
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bd80      	pop	{r7, pc}
	...

0800bfd4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b082      	sub	sp, #8
 800bfd8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800bfda:	2300      	movs	r3, #0
 800bfdc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800bfde:	f000 f879 	bl	800c0d4 <BSP_SD_IsDetected>
 800bfe2:	4603      	mov	r3, r0
 800bfe4:	2b01      	cmp	r3, #1
 800bfe6:	d001      	beq.n	800bfec <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800bfe8:	2302      	movs	r3, #2
 800bfea:	e012      	b.n	800c012 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 800bfec:	480b      	ldr	r0, [pc, #44]	; (800c01c <BSP_SD_Init+0x48>)
 800bfee:	f7fb faff 	bl	80075f0 <HAL_SD_Init>
 800bff2:	4603      	mov	r3, r0
 800bff4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800bff6:	79fb      	ldrb	r3, [r7, #7]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d109      	bne.n	800c010 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800bffc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c000:	4806      	ldr	r0, [pc, #24]	; (800c01c <BSP_SD_Init+0x48>)
 800c002:	f7fc f8d5 	bl	80081b0 <HAL_SD_ConfigWideBusOperation>
 800c006:	4603      	mov	r3, r0
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d001      	beq.n	800c010 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800c00c:	2301      	movs	r3, #1
 800c00e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800c010:	79fb      	ldrb	r3, [r7, #7]
}
 800c012:	4618      	mov	r0, r3
 800c014:	3708      	adds	r7, #8
 800c016:	46bd      	mov	sp, r7
 800c018:	bd80      	pop	{r7, pc}
 800c01a:	bf00      	nop
 800c01c:	2000096c 	.word	0x2000096c

0800c020 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b088      	sub	sp, #32
 800c024:	af02      	add	r7, sp, #8
 800c026:	60f8      	str	r0, [r7, #12]
 800c028:	60b9      	str	r1, [r7, #8]
 800c02a:	607a      	str	r2, [r7, #4]
 800c02c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800c02e:	2300      	movs	r3, #0
 800c030:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	9300      	str	r3, [sp, #0]
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	68ba      	ldr	r2, [r7, #8]
 800c03a:	68f9      	ldr	r1, [r7, #12]
 800c03c:	4806      	ldr	r0, [pc, #24]	; (800c058 <BSP_SD_ReadBlocks+0x38>)
 800c03e:	f7fb fb66 	bl	800770e <HAL_SD_ReadBlocks>
 800c042:	4603      	mov	r3, r0
 800c044:	2b00      	cmp	r3, #0
 800c046:	d001      	beq.n	800c04c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800c048:	2301      	movs	r3, #1
 800c04a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800c04c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c04e:	4618      	mov	r0, r3
 800c050:	3718      	adds	r7, #24
 800c052:	46bd      	mov	sp, r7
 800c054:	bd80      	pop	{r7, pc}
 800c056:	bf00      	nop
 800c058:	2000096c 	.word	0x2000096c

0800c05c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b088      	sub	sp, #32
 800c060:	af02      	add	r7, sp, #8
 800c062:	60f8      	str	r0, [r7, #12]
 800c064:	60b9      	str	r1, [r7, #8]
 800c066:	607a      	str	r2, [r7, #4]
 800c068:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800c06a:	2300      	movs	r3, #0
 800c06c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	9300      	str	r3, [sp, #0]
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	68ba      	ldr	r2, [r7, #8]
 800c076:	68f9      	ldr	r1, [r7, #12]
 800c078:	4806      	ldr	r0, [pc, #24]	; (800c094 <BSP_SD_WriteBlocks+0x38>)
 800c07a:	f7fb fcde 	bl	8007a3a <HAL_SD_WriteBlocks>
 800c07e:	4603      	mov	r3, r0
 800c080:	2b00      	cmp	r3, #0
 800c082:	d001      	beq.n	800c088 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800c084:	2301      	movs	r3, #1
 800c086:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800c088:	7dfb      	ldrb	r3, [r7, #23]
}
 800c08a:	4618      	mov	r0, r3
 800c08c:	3718      	adds	r7, #24
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd80      	pop	{r7, pc}
 800c092:	bf00      	nop
 800c094:	2000096c 	.word	0x2000096c

0800c098 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c09c:	4805      	ldr	r0, [pc, #20]	; (800c0b4 <BSP_SD_GetCardState+0x1c>)
 800c09e:	f7fc f903 	bl	80082a8 <HAL_SD_GetCardState>
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	2b04      	cmp	r3, #4
 800c0a6:	bf14      	ite	ne
 800c0a8:	2301      	movne	r3, #1
 800c0aa:	2300      	moveq	r3, #0
 800c0ac:	b2db      	uxtb	r3, r3
}
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	bd80      	pop	{r7, pc}
 800c0b2:	bf00      	nop
 800c0b4:	2000096c 	.word	0x2000096c

0800c0b8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b082      	sub	sp, #8
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 800c0c0:	6879      	ldr	r1, [r7, #4]
 800c0c2:	4803      	ldr	r0, [pc, #12]	; (800c0d0 <BSP_SD_GetCardInfo+0x18>)
 800c0c4:	f7fc f848 	bl	8008158 <HAL_SD_GetCardInfo>
}
 800c0c8:	bf00      	nop
 800c0ca:	3708      	adds	r7, #8
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bd80      	pop	{r7, pc}
 800c0d0:	2000096c 	.word	0x2000096c

0800c0d4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b082      	sub	sp, #8
 800c0d8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c0da:	2301      	movs	r3, #1
 800c0dc:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800c0de:	f000 f825 	bl	800c12c <BSP_PlatformIsDetected>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d101      	bne.n	800c0ec <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800c0ec:	79fb      	ldrb	r3, [r7, #7]
 800c0ee:	b2db      	uxtb	r3, r3
}
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	3708      	adds	r7, #8
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd80      	pop	{r7, pc}

0800c0f8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c0fc:	4904      	ldr	r1, [pc, #16]	; (800c110 <MX_FATFS_Init+0x18>)
 800c0fe:	4805      	ldr	r0, [pc, #20]	; (800c114 <MX_FATFS_Init+0x1c>)
 800c100:	f7ff ff58 	bl	800bfb4 <FATFS_LinkDriver>
 800c104:	4603      	mov	r3, r0
 800c106:	461a      	mov	r2, r3
 800c108:	4b03      	ldr	r3, [pc, #12]	; (800c118 <MX_FATFS_Init+0x20>)
 800c10a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800c10c:	bf00      	nop
 800c10e:	bd80      	pop	{r7, pc}
 800c110:	20000484 	.word	0x20000484
 800c114:	0812a7e4 	.word	0x0812a7e4
 800c118:	20000480 	.word	0x20000480

0800c11c <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c11c:	b480      	push	{r7}
 800c11e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c120:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800c122:	4618      	mov	r0, r3
 800c124:	46bd      	mov	sp, r7
 800c126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12a:	4770      	bx	lr

0800c12c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b082      	sub	sp, #8
 800c130:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800c132:	2301      	movs	r3, #1
 800c134:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800c136:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c13a:	4806      	ldr	r0, [pc, #24]	; (800c154 <BSP_PlatformIsDetected+0x28>)
 800c13c:	f7f9 f968 	bl	8005410 <HAL_GPIO_ReadPin>
 800c140:	4603      	mov	r3, r0
 800c142:	2b00      	cmp	r3, #0
 800c144:	d001      	beq.n	800c14a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800c146:	2300      	movs	r3, #0
 800c148:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800c14a:	79fb      	ldrb	r3, [r7, #7]
}  
 800c14c:	4618      	mov	r0, r3
 800c14e:	3708      	adds	r7, #8
 800c150:	46bd      	mov	sp, r7
 800c152:	bd80      	pop	{r7, pc}
 800c154:	40022000 	.word	0x40022000

0800c158 <drawGrid>:

#include "game.h"
#include "stm32f769i_discovery_lcd.h"

void drawGrid(void)
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b082      	sub	sp, #8
 800c15c:	af00      	add	r7, sp, #0
	uint8_t offset;

	// Draw the background
	BSP_LCD_SetTextColor(BOARD_COLOR);
 800c15e:	4823      	ldr	r0, [pc, #140]	; (800c1ec <drawGrid+0x94>)
 800c160:	f7f5 f9a0 	bl	80014a4 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 0, GRID_SIZE, GRID_SIZE);
 800c164:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800c168:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c16c:	2100      	movs	r1, #0
 800c16e:	2000      	movs	r0, #0
 800c170:	f7f5 fd08 	bl	8001b84 <BSP_LCD_FillRect>

	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800c174:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800c178:	f7f5 f994 	bl	80014a4 <BSP_LCD_SetTextColor>

	for(uint8_t i=0; i<=BOARD_SIZE; i++)
 800c17c:	2300      	movs	r3, #0
 800c17e:	71bb      	strb	r3, [r7, #6]
 800c180:	e02c      	b.n	800c1dc <drawGrid+0x84>
	{

		// for i = 0 the offset would be -2 which breaks the lcd, so we need a special case to set it to 0 instead
		if(i == 0)
 800c182:	79bb      	ldrb	r3, [r7, #6]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d102      	bne.n	800c18e <drawGrid+0x36>
		{
			offset = 0;
 800c188:	2300      	movs	r3, #0
 800c18a:	71fb      	strb	r3, [r7, #7]
 800c18c:	e001      	b.n	800c192 <drawGrid+0x3a>
		}
		else
		{
			offset = LINE_WIDTH/2;
 800c18e:	2302      	movs	r3, #2
 800c190:	71fb      	strb	r3, [r7, #7]
		}

		// Horizontal
		BSP_LCD_FillRect(0, (i * SQUARE_SIZE)-offset, GRID_SIZE, LINE_WIDTH);
 800c192:	79bb      	ldrb	r3, [r7, #6]
 800c194:	b29b      	uxth	r3, r3
 800c196:	461a      	mov	r2, r3
 800c198:	0112      	lsls	r2, r2, #4
 800c19a:	1ad3      	subs	r3, r2, r3
 800c19c:	009b      	lsls	r3, r3, #2
 800c19e:	b29a      	uxth	r2, r3
 800c1a0:	79fb      	ldrb	r3, [r7, #7]
 800c1a2:	b29b      	uxth	r3, r3
 800c1a4:	1ad3      	subs	r3, r2, r3
 800c1a6:	b299      	uxth	r1, r3
 800c1a8:	2304      	movs	r3, #4
 800c1aa:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c1ae:	2000      	movs	r0, #0
 800c1b0:	f7f5 fce8 	bl	8001b84 <BSP_LCD_FillRect>

		// Vertical
		BSP_LCD_FillRect((i * SQUARE_SIZE)-offset, 0, LINE_WIDTH, GRID_SIZE);
 800c1b4:	79bb      	ldrb	r3, [r7, #6]
 800c1b6:	b29b      	uxth	r3, r3
 800c1b8:	461a      	mov	r2, r3
 800c1ba:	0112      	lsls	r2, r2, #4
 800c1bc:	1ad3      	subs	r3, r2, r3
 800c1be:	009b      	lsls	r3, r3, #2
 800c1c0:	b29a      	uxth	r2, r3
 800c1c2:	79fb      	ldrb	r3, [r7, #7]
 800c1c4:	b29b      	uxth	r3, r3
 800c1c6:	1ad3      	subs	r3, r2, r3
 800c1c8:	b298      	uxth	r0, r3
 800c1ca:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800c1ce:	2204      	movs	r2, #4
 800c1d0:	2100      	movs	r1, #0
 800c1d2:	f7f5 fcd7 	bl	8001b84 <BSP_LCD_FillRect>
	for(uint8_t i=0; i<=BOARD_SIZE; i++)
 800c1d6:	79bb      	ldrb	r3, [r7, #6]
 800c1d8:	3301      	adds	r3, #1
 800c1da:	71bb      	strb	r3, [r7, #6]
 800c1dc:	79bb      	ldrb	r3, [r7, #6]
 800c1de:	2b08      	cmp	r3, #8
 800c1e0:	d9cf      	bls.n	800c182 <drawGrid+0x2a>
	}
}
 800c1e2:	bf00      	nop
 800c1e4:	3708      	adds	r7, #8
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}
 800c1ea:	bf00      	nop
 800c1ec:	ff4c9572 	.word	0xff4c9572

0800c1f0 <gameTitle>:

void gameTitle(void)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	af00      	add	r7, sp, #0

  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800c1f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c1f8:	f7f5 f9b6 	bl	8001568 <BSP_LCD_Clear>

  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800c1fc:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800c200:	f7f5 f950 	bl	80014a4 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(480, 0, 320, 50);
 800c204:	2332      	movs	r3, #50	; 0x32
 800c206:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800c20a:	2100      	movs	r1, #0
 800c20c:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 800c210:	f7f5 fcb8 	bl	8001b84 <BSP_LCD_FillRect>
  BSP_LCD_SetFont(&Font24);
 800c214:	4809      	ldr	r0, [pc, #36]	; (800c23c <gameTitle+0x4c>)
 800c216:	f7f5 f977 	bl	8001508 <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800c21a:	f04f 30ff 	mov.w	r0, #4294967295
 800c21e:	f7f5 f941 	bl	80014a4 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 800c222:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800c226:	f7f5 f955 	bl	80014d4 <BSP_LCD_SetBackColor>
  BSP_LCD_DisplayStringAt(100, 10, (uint8_t *)"REVERSI", RIGHT_MODE); //función quiere uint8_t
 800c22a:	2302      	movs	r3, #2
 800c22c:	4a04      	ldr	r2, [pc, #16]	; (800c240 <gameTitle+0x50>)
 800c22e:	210a      	movs	r1, #10
 800c230:	2064      	movs	r0, #100	; 0x64
 800c232:	f7f5 fa05 	bl	8001640 <BSP_LCD_DisplayStringAt>

}
 800c236:	bf00      	nop
 800c238:	bd80      	pop	{r7, pc}
 800c23a:	bf00      	nop
 800c23c:	20000028 	.word	0x20000028
 800c240:	0800f4c0 	.word	0x0800f4c0

0800c244 <init_game>:

void init_game(void)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b082      	sub	sp, #8
 800c248:	af00      	add	r7, sp, #0
	gameTitle();
 800c24a:	f7ff ffd1 	bl	800c1f0 <gameTitle>
	drawGrid();
 800c24e:	f7ff ff83 	bl	800c158 <drawGrid>

    // Clear the board
    for(uint8_t i=0; i<BOARD_SIZE; i++)
 800c252:	2300      	movs	r3, #0
 800c254:	71fb      	strb	r3, [r7, #7]
 800c256:	e013      	b.n	800c280 <init_game+0x3c>
    {
        for(uint8_t j=0; j<BOARD_SIZE; j++)
 800c258:	2300      	movs	r3, #0
 800c25a:	71bb      	strb	r3, [r7, #6]
 800c25c:	e00a      	b.n	800c274 <init_game+0x30>
        {
             mat[i][j] = 0;
 800c25e:	79fa      	ldrb	r2, [r7, #7]
 800c260:	79bb      	ldrb	r3, [r7, #6]
 800c262:	4914      	ldr	r1, [pc, #80]	; (800c2b4 <init_game+0x70>)
 800c264:	00d2      	lsls	r2, r2, #3
 800c266:	440a      	add	r2, r1
 800c268:	4413      	add	r3, r2
 800c26a:	2200      	movs	r2, #0
 800c26c:	701a      	strb	r2, [r3, #0]
        for(uint8_t j=0; j<BOARD_SIZE; j++)
 800c26e:	79bb      	ldrb	r3, [r7, #6]
 800c270:	3301      	adds	r3, #1
 800c272:	71bb      	strb	r3, [r7, #6]
 800c274:	79bb      	ldrb	r3, [r7, #6]
 800c276:	2b07      	cmp	r3, #7
 800c278:	d9f1      	bls.n	800c25e <init_game+0x1a>
    for(uint8_t i=0; i<BOARD_SIZE; i++)
 800c27a:	79fb      	ldrb	r3, [r7, #7]
 800c27c:	3301      	adds	r3, #1
 800c27e:	71fb      	strb	r3, [r7, #7]
 800c280:	79fb      	ldrb	r3, [r7, #7]
 800c282:	2b07      	cmp	r3, #7
 800c284:	d9e8      	bls.n	800c258 <init_game+0x14>
        }
    }

    mat[3][3] = 1;
 800c286:	4b0b      	ldr	r3, [pc, #44]	; (800c2b4 <init_game+0x70>)
 800c288:	2201      	movs	r2, #1
 800c28a:	76da      	strb	r2, [r3, #27]
    mat[4][4] = 1;
 800c28c:	4b09      	ldr	r3, [pc, #36]	; (800c2b4 <init_game+0x70>)
 800c28e:	2201      	movs	r2, #1
 800c290:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    mat[4][3] = 2;
 800c294:	4b07      	ldr	r3, [pc, #28]	; (800c2b4 <init_game+0x70>)
 800c296:	2202      	movs	r2, #2
 800c298:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    mat[3][4] = 2;
 800c29c:	4b05      	ldr	r3, [pc, #20]	; (800c2b4 <init_game+0x70>)
 800c29e:	2202      	movs	r2, #2
 800c2a0:	771a      	strb	r2, [r3, #28]

	printInfo();
 800c2a2:	f000 f867 	bl	800c374 <printInfo>
    printBoard();
 800c2a6:	f000 f807 	bl	800c2b8 <printBoard>
}
 800c2aa:	bf00      	nop
 800c2ac:	3708      	adds	r7, #8
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}
 800c2b2:	bf00      	nop
 800c2b4:	200008e8 	.word	0x200008e8

0800c2b8 <printBoard>:

//imprime el tablero
void printBoard(void)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b082      	sub	sp, #8
 800c2bc:	af00      	add	r7, sp, #0
	uint8_t i, j;
	uint8_t value;

    for (i = 0; i < BOARD_SIZE; i++)
 800c2be:	2300      	movs	r3, #0
 800c2c0:	71fb      	strb	r3, [r7, #7]
 800c2c2:	e04e      	b.n	800c362 <printBoard+0xaa>
    {
        for (j = 0; j < BOARD_SIZE; j++)
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	71bb      	strb	r3, [r7, #6]
 800c2c8:	e045      	b.n	800c356 <printBoard+0x9e>
        {
            value = mat[i][j]; //para leer que está almacenado en la matriz
 800c2ca:	79fa      	ldrb	r2, [r7, #7]
 800c2cc:	79bb      	ldrb	r3, [r7, #6]
 800c2ce:	4928      	ldr	r1, [pc, #160]	; (800c370 <printBoard+0xb8>)
 800c2d0:	00d2      	lsls	r2, r2, #3
 800c2d2:	440a      	add	r2, r1
 800c2d4:	4413      	add	r3, r2
 800c2d6:	781b      	ldrb	r3, [r3, #0]
 800c2d8:	717b      	strb	r3, [r7, #5]

            if (value == 1)
 800c2da:	797b      	ldrb	r3, [r7, #5]
 800c2dc:	2b01      	cmp	r3, #1
 800c2de:	d11a      	bne.n	800c316 <printBoard+0x5e>
            {
            	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800c2e0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800c2e4:	f7f5 f8de 	bl	80014a4 <BSP_LCD_SetTextColor>
            	BSP_LCD_FillCircle((j*SQUARE_SIZE)+HALF_SQUARE_SIZE, (i*SQUARE_SIZE)+HALF_SQUARE_SIZE, PIECE_RADIUS);
 800c2e8:	79bb      	ldrb	r3, [r7, #6]
 800c2ea:	b29b      	uxth	r3, r3
 800c2ec:	461a      	mov	r2, r3
 800c2ee:	0112      	lsls	r2, r2, #4
 800c2f0:	1ad3      	subs	r3, r2, r3
 800c2f2:	009b      	lsls	r3, r3, #2
 800c2f4:	b29b      	uxth	r3, r3
 800c2f6:	331e      	adds	r3, #30
 800c2f8:	b298      	uxth	r0, r3
 800c2fa:	79fb      	ldrb	r3, [r7, #7]
 800c2fc:	b29b      	uxth	r3, r3
 800c2fe:	461a      	mov	r2, r3
 800c300:	0112      	lsls	r2, r2, #4
 800c302:	1ad3      	subs	r3, r2, r3
 800c304:	009b      	lsls	r3, r3, #2
 800c306:	b29b      	uxth	r3, r3
 800c308:	331e      	adds	r3, #30
 800c30a:	b29b      	uxth	r3, r3
 800c30c:	2219      	movs	r2, #25
 800c30e:	4619      	mov	r1, r3
 800c310:	f7f5 fc92 	bl	8001c38 <BSP_LCD_FillCircle>
 800c314:	e01c      	b.n	800c350 <printBoard+0x98>
            }
            else if (value == 2)
 800c316:	797b      	ldrb	r3, [r7, #5]
 800c318:	2b02      	cmp	r3, #2
 800c31a:	d119      	bne.n	800c350 <printBoard+0x98>
            {
        		 BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800c31c:	f04f 30ff 	mov.w	r0, #4294967295
 800c320:	f7f5 f8c0 	bl	80014a4 <BSP_LCD_SetTextColor>
             	 BSP_LCD_FillCircle((j*SQUARE_SIZE)+HALF_SQUARE_SIZE, (i*SQUARE_SIZE)+HALF_SQUARE_SIZE, PIECE_RADIUS);
 800c324:	79bb      	ldrb	r3, [r7, #6]
 800c326:	b29b      	uxth	r3, r3
 800c328:	461a      	mov	r2, r3
 800c32a:	0112      	lsls	r2, r2, #4
 800c32c:	1ad3      	subs	r3, r2, r3
 800c32e:	009b      	lsls	r3, r3, #2
 800c330:	b29b      	uxth	r3, r3
 800c332:	331e      	adds	r3, #30
 800c334:	b298      	uxth	r0, r3
 800c336:	79fb      	ldrb	r3, [r7, #7]
 800c338:	b29b      	uxth	r3, r3
 800c33a:	461a      	mov	r2, r3
 800c33c:	0112      	lsls	r2, r2, #4
 800c33e:	1ad3      	subs	r3, r2, r3
 800c340:	009b      	lsls	r3, r3, #2
 800c342:	b29b      	uxth	r3, r3
 800c344:	331e      	adds	r3, #30
 800c346:	b29b      	uxth	r3, r3
 800c348:	2219      	movs	r2, #25
 800c34a:	4619      	mov	r1, r3
 800c34c:	f7f5 fc74 	bl	8001c38 <BSP_LCD_FillCircle>
        for (j = 0; j < BOARD_SIZE; j++)
 800c350:	79bb      	ldrb	r3, [r7, #6]
 800c352:	3301      	adds	r3, #1
 800c354:	71bb      	strb	r3, [r7, #6]
 800c356:	79bb      	ldrb	r3, [r7, #6]
 800c358:	2b07      	cmp	r3, #7
 800c35a:	d9b6      	bls.n	800c2ca <printBoard+0x12>
    for (i = 0; i < BOARD_SIZE; i++)
 800c35c:	79fb      	ldrb	r3, [r7, #7]
 800c35e:	3301      	adds	r3, #1
 800c360:	71fb      	strb	r3, [r7, #7]
 800c362:	79fb      	ldrb	r3, [r7, #7]
 800c364:	2b07      	cmp	r3, #7
 800c366:	d9ad      	bls.n	800c2c4 <printBoard+0xc>
            }
        }
    }
}
 800c368:	bf00      	nop
 800c36a:	3708      	adds	r7, #8
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}
 800c370:	200008e8 	.word	0x200008e8

0800c374 <printInfo>:

void printInfo(void)
{
 800c374:	b5b0      	push	{r4, r5, r7, lr}
 800c376:	b08c      	sub	sp, #48	; 0x30
 800c378:	af00      	add	r7, sp, #0
	uint8_t player1Counter, player2Counter;
	char pieces[20];
	char information[20];

    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800c37a:	f04f 30ff 	mov.w	r0, #4294967295
 800c37e:	f7f5 f891 	bl	80014a4 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(485, LINE(5), BSP_LCD_GetXSize()-485, 350);
 800c382:	f7f5 f8db 	bl	800153c <BSP_LCD_GetFont>
 800c386:	4603      	mov	r3, r0
 800c388:	88db      	ldrh	r3, [r3, #6]
 800c38a:	461a      	mov	r2, r3
 800c38c:	0092      	lsls	r2, r2, #2
 800c38e:	4413      	add	r3, r2
 800c390:	b29c      	uxth	r4, r3
 800c392:	f7f5 f80f 	bl	80013b4 <BSP_LCD_GetXSize>
 800c396:	4603      	mov	r3, r0
 800c398:	b29b      	uxth	r3, r3
 800c39a:	f2a3 13e5 	subw	r3, r3, #485	; 0x1e5
 800c39e:	b29a      	uxth	r2, r3
 800c3a0:	f44f 73af 	mov.w	r3, #350	; 0x15e
 800c3a4:	4621      	mov	r1, r4
 800c3a6:	f240 10e5 	movw	r0, #485	; 0x1e5
 800c3aa:	f7f5 fbeb 	bl	8001b84 <BSP_LCD_FillRect>

    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800c3ae:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800c3b2:	f7f5 f877 	bl	80014a4 <BSP_LCD_SetTextColor>
    BSP_LCD_DrawHLine(480, LINE(5), 420);
 800c3b6:	f7f5 f8c1 	bl	800153c <BSP_LCD_GetFont>
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	88db      	ldrh	r3, [r3, #6]
 800c3be:	461a      	mov	r2, r3
 800c3c0:	0092      	lsls	r2, r2, #2
 800c3c2:	4413      	add	r3, r2
 800c3c4:	b29b      	uxth	r3, r3
 800c3c6:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800c3ca:	4619      	mov	r1, r3
 800c3cc:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 800c3d0:	f7f5 f9fa 	bl	80017c8 <BSP_LCD_DrawHLine>

    countPieces(&player1Counter, &player2Counter);
 800c3d4:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 800c3d8:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800c3dc:	4611      	mov	r1, r2
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f000 f854 	bl	800c48c <countPieces>

	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800c3e4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800c3e8:	f7f5 f85c 	bl	80014a4 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800c3ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c3f0:	f7f5 f870 	bl	80014d4 <BSP_LCD_SetBackColor>

	sprintf(information, "GAME INFORMATION");
 800c3f4:	1d3b      	adds	r3, r7, #4
 800c3f6:	4a22      	ldr	r2, [pc, #136]	; (800c480 <printInfo+0x10c>)
 800c3f8:	461c      	mov	r4, r3
 800c3fa:	4615      	mov	r5, r2
 800c3fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c3fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c400:	682b      	ldr	r3, [r5, #0]
 800c402:	7023      	strb	r3, [r4, #0]
	BSP_LCD_DisplayStringAt(20, LINE(6), (uint8_t*) information, RIGHT_MODE);
 800c404:	f7f5 f89a 	bl	800153c <BSP_LCD_GetFont>
 800c408:	4603      	mov	r3, r0
 800c40a:	88db      	ldrh	r3, [r3, #6]
 800c40c:	461a      	mov	r2, r3
 800c40e:	0052      	lsls	r2, r2, #1
 800c410:	4413      	add	r3, r2
 800c412:	005b      	lsls	r3, r3, #1
 800c414:	b299      	uxth	r1, r3
 800c416:	1d3a      	adds	r2, r7, #4
 800c418:	2302      	movs	r3, #2
 800c41a:	2014      	movs	r0, #20
 800c41c:	f7f5 f910 	bl	8001640 <BSP_LCD_DisplayStringAt>

	sprintf(pieces, "Pieces Ply. 1 = %.2d", player1Counter);
 800c420:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c424:	461a      	mov	r2, r3
 800c426:	f107 0318 	add.w	r3, r7, #24
 800c42a:	4916      	ldr	r1, [pc, #88]	; (800c484 <printInfo+0x110>)
 800c42c:	4618      	mov	r0, r3
 800c42e:	f002 fc13 	bl	800ec58 <siprintf>
	BSP_LCD_DisplayStringAt(5, LINE(8), (uint8_t*) pieces, RIGHT_MODE);
 800c432:	f7f5 f883 	bl	800153c <BSP_LCD_GetFont>
 800c436:	4603      	mov	r3, r0
 800c438:	88db      	ldrh	r3, [r3, #6]
 800c43a:	00db      	lsls	r3, r3, #3
 800c43c:	b299      	uxth	r1, r3
 800c43e:	f107 0218 	add.w	r2, r7, #24
 800c442:	2302      	movs	r3, #2
 800c444:	2005      	movs	r0, #5
 800c446:	f7f5 f8fb 	bl	8001640 <BSP_LCD_DisplayStringAt>

	sprintf(pieces, "Pieces Ply. 2 = %.2d", player2Counter);
 800c44a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c44e:	461a      	mov	r2, r3
 800c450:	f107 0318 	add.w	r3, r7, #24
 800c454:	490c      	ldr	r1, [pc, #48]	; (800c488 <printInfo+0x114>)
 800c456:	4618      	mov	r0, r3
 800c458:	f002 fbfe 	bl	800ec58 <siprintf>
	BSP_LCD_DisplayStringAt(5, LINE(9), (uint8_t*) pieces, RIGHT_MODE);
 800c45c:	f7f5 f86e 	bl	800153c <BSP_LCD_GetFont>
 800c460:	4603      	mov	r3, r0
 800c462:	88db      	ldrh	r3, [r3, #6]
 800c464:	461a      	mov	r2, r3
 800c466:	00d2      	lsls	r2, r2, #3
 800c468:	4413      	add	r3, r2
 800c46a:	b299      	uxth	r1, r3
 800c46c:	f107 0218 	add.w	r2, r7, #24
 800c470:	2302      	movs	r3, #2
 800c472:	2005      	movs	r0, #5
 800c474:	f7f5 f8e4 	bl	8001640 <BSP_LCD_DisplayStringAt>

}
 800c478:	bf00      	nop
 800c47a:	3730      	adds	r7, #48	; 0x30
 800c47c:	46bd      	mov	sp, r7
 800c47e:	bdb0      	pop	{r4, r5, r7, pc}
 800c480:	0800f4c8 	.word	0x0800f4c8
 800c484:	0800f4dc 	.word	0x0800f4dc
 800c488:	0800f4f4 	.word	0x0800f4f4

0800c48c <countPieces>:

//hace el recuento despues de cada movimiento de las fichas de cada jugador
void countPieces (uint8_t *player1Counter, uint8_t *player2Counter)
{
 800c48c:	b480      	push	{r7}
 800c48e:	b085      	sub	sp, #20
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
 800c494:	6039      	str	r1, [r7, #0]
    *player1Counter=0;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	2200      	movs	r2, #0
 800c49a:	701a      	strb	r2, [r3, #0]
    *player2Counter=0;
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	2200      	movs	r2, #0
 800c4a0:	701a      	strb	r2, [r3, #0]

    for(uint8_t i=0; i<8; i++)
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	73fb      	strb	r3, [r7, #15]
 800c4a6:	e02a      	b.n	800c4fe <countPieces+0x72>
    {
        for(uint8_t j=0; j<8; j++)
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	73bb      	strb	r3, [r7, #14]
 800c4ac:	e021      	b.n	800c4f2 <countPieces+0x66>
        {
            if(mat[i][j] == 1)
 800c4ae:	7bfa      	ldrb	r2, [r7, #15]
 800c4b0:	7bbb      	ldrb	r3, [r7, #14]
 800c4b2:	4917      	ldr	r1, [pc, #92]	; (800c510 <countPieces+0x84>)
 800c4b4:	00d2      	lsls	r2, r2, #3
 800c4b6:	440a      	add	r2, r1
 800c4b8:	4413      	add	r3, r2
 800c4ba:	781b      	ldrb	r3, [r3, #0]
 800c4bc:	2b01      	cmp	r3, #1
 800c4be:	d106      	bne.n	800c4ce <countPieces+0x42>
            {
                (*player1Counter)++;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	781b      	ldrb	r3, [r3, #0]
 800c4c4:	3301      	adds	r3, #1
 800c4c6:	b2da      	uxtb	r2, r3
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	701a      	strb	r2, [r3, #0]
 800c4cc:	e00e      	b.n	800c4ec <countPieces+0x60>
            }
            else if(mat[i][j] == 2)
 800c4ce:	7bfa      	ldrb	r2, [r7, #15]
 800c4d0:	7bbb      	ldrb	r3, [r7, #14]
 800c4d2:	490f      	ldr	r1, [pc, #60]	; (800c510 <countPieces+0x84>)
 800c4d4:	00d2      	lsls	r2, r2, #3
 800c4d6:	440a      	add	r2, r1
 800c4d8:	4413      	add	r3, r2
 800c4da:	781b      	ldrb	r3, [r3, #0]
 800c4dc:	2b02      	cmp	r3, #2
 800c4de:	d105      	bne.n	800c4ec <countPieces+0x60>
            {
                (*player2Counter)++;
 800c4e0:	683b      	ldr	r3, [r7, #0]
 800c4e2:	781b      	ldrb	r3, [r3, #0]
 800c4e4:	3301      	adds	r3, #1
 800c4e6:	b2da      	uxtb	r2, r3
 800c4e8:	683b      	ldr	r3, [r7, #0]
 800c4ea:	701a      	strb	r2, [r3, #0]
        for(uint8_t j=0; j<8; j++)
 800c4ec:	7bbb      	ldrb	r3, [r7, #14]
 800c4ee:	3301      	adds	r3, #1
 800c4f0:	73bb      	strb	r3, [r7, #14]
 800c4f2:	7bbb      	ldrb	r3, [r7, #14]
 800c4f4:	2b07      	cmp	r3, #7
 800c4f6:	d9da      	bls.n	800c4ae <countPieces+0x22>
    for(uint8_t i=0; i<8; i++)
 800c4f8:	7bfb      	ldrb	r3, [r7, #15]
 800c4fa:	3301      	adds	r3, #1
 800c4fc:	73fb      	strb	r3, [r7, #15]
 800c4fe:	7bfb      	ldrb	r3, [r7, #15]
 800c500:	2b07      	cmp	r3, #7
 800c502:	d9d1      	bls.n	800c4a8 <countPieces+0x1c>
            }
        }
    }
}
 800c504:	bf00      	nop
 800c506:	3714      	adds	r7, #20
 800c508:	46bd      	mov	sp, r7
 800c50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50e:	4770      	bx	lr
 800c510:	200008e8 	.word	0x200008e8

0800c514 <flip>:

//cambia la pieza del jugador opuesto
//asumese que i e j ya son contados desde 0 hasta 7 en lugar de 1 a 8
void flip(uint8_t player, uint8_t i, uint8_t j)
{
 800c514:	b480      	push	{r7}
 800c516:	b089      	sub	sp, #36	; 0x24
 800c518:	af00      	add	r7, sp, #0
 800c51a:	4603      	mov	r3, r0
 800c51c:	71fb      	strb	r3, [r7, #7]
 800c51e:	460b      	mov	r3, r1
 800c520:	71bb      	strb	r3, [r7, #6]
 800c522:	4613      	mov	r3, r2
 800c524:	717b      	strb	r3, [r7, #5]
    uint8_t oppositePlayer;

    if(player==1)
 800c526:	79fb      	ldrb	r3, [r7, #7]
 800c528:	2b01      	cmp	r3, #1
 800c52a:	d102      	bne.n	800c532 <flip+0x1e>
    {
        oppositePlayer=2;
 800c52c:	2302      	movs	r3, #2
 800c52e:	77fb      	strb	r3, [r7, #31]
 800c530:	e001      	b.n	800c536 <flip+0x22>
    }
    else
    {
        oppositePlayer=1;
 800c532:	2301      	movs	r3, #1
 800c534:	77fb      	strb	r3, [r7, #31]
     *  L (i,j) R
     * BL   B   BR
     */

    // top left
    if(i > 0 && j > 0) // we cant check outside of the matrix because (-1, -1) doesnt exist
 800c536:	79bb      	ldrb	r3, [r7, #6]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d05b      	beq.n	800c5f4 <flip+0xe0>
 800c53c:	797b      	ldrb	r3, [r7, #5]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d058      	beq.n	800c5f4 <flip+0xe0>
    {
        if(mat[i-1][j-1] == oppositePlayer)
 800c542:	79bb      	ldrb	r3, [r7, #6]
 800c544:	1e5a      	subs	r2, r3, #1
 800c546:	797b      	ldrb	r3, [r7, #5]
 800c548:	3b01      	subs	r3, #1
 800c54a:	49b0      	ldr	r1, [pc, #704]	; (800c80c <flip+0x2f8>)
 800c54c:	00d2      	lsls	r2, r2, #3
 800c54e:	440a      	add	r2, r1
 800c550:	4413      	add	r3, r2
 800c552:	781b      	ldrb	r3, [r3, #0]
 800c554:	7ffa      	ldrb	r2, [r7, #31]
 800c556:	429a      	cmp	r2, r3
 800c558:	d14c      	bne.n	800c5f4 <flip+0xe0>
        {
            // posicao adjacent
        	int8_t startI = i - 1;
 800c55a:	79bb      	ldrb	r3, [r7, #6]
 800c55c:	3b01      	subs	r3, #1
 800c55e:	b2db      	uxtb	r3, r3
 800c560:	77bb      	strb	r3, [r7, #30]
            int8_t startJ = j - 1;
 800c562:	797b      	ldrb	r3, [r7, #5]
 800c564:	3b01      	subs	r3, #1
 800c566:	b2db      	uxtb	r3, r3
 800c568:	777b      	strb	r3, [r7, #29]

            while (startI >= 0 && startJ >= 0)//para no salir fuera de la raiz
 800c56a:	e039      	b.n	800c5e0 <flip+0xcc>
            {
                if(mat [startI][startJ]==player)
 800c56c:	f997 201e 	ldrsb.w	r2, [r7, #30]
 800c570:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800c574:	49a5      	ldr	r1, [pc, #660]	; (800c80c <flip+0x2f8>)
 800c576:	00d2      	lsls	r2, r2, #3
 800c578:	440a      	add	r2, r1
 800c57a:	4413      	add	r3, r2
 800c57c:	781b      	ldrb	r3, [r3, #0]
 800c57e:	79fa      	ldrb	r2, [r7, #7]
 800c580:	429a      	cmp	r2, r3
 800c582:	d121      	bne.n	800c5c8 <flip+0xb4>
                {
                    while(startI != i && startJ!=j)
 800c584:	e015      	b.n	800c5b2 <flip+0x9e>
                    {
                        mat[startI][startJ] = player;
 800c586:	f997 201e 	ldrsb.w	r2, [r7, #30]
 800c58a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800c58e:	499f      	ldr	r1, [pc, #636]	; (800c80c <flip+0x2f8>)
 800c590:	00d2      	lsls	r2, r2, #3
 800c592:	440a      	add	r2, r1
 800c594:	4413      	add	r3, r2
 800c596:	79fa      	ldrb	r2, [r7, #7]
 800c598:	701a      	strb	r2, [r3, #0]

                        startI++;
 800c59a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800c59e:	b2db      	uxtb	r3, r3
 800c5a0:	3301      	adds	r3, #1
 800c5a2:	b2db      	uxtb	r3, r3
 800c5a4:	77bb      	strb	r3, [r7, #30]
                        startJ++;
 800c5a6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800c5aa:	b2db      	uxtb	r3, r3
 800c5ac:	3301      	adds	r3, #1
 800c5ae:	b2db      	uxtb	r3, r3
 800c5b0:	777b      	strb	r3, [r7, #29]
                    while(startI != i && startJ!=j)
 800c5b2:	f997 201e 	ldrsb.w	r2, [r7, #30]
 800c5b6:	79bb      	ldrb	r3, [r7, #6]
 800c5b8:	429a      	cmp	r2, r3
 800c5ba:	d01a      	beq.n	800c5f2 <flip+0xde>
 800c5bc:	f997 201d 	ldrsb.w	r2, [r7, #29]
 800c5c0:	797b      	ldrb	r3, [r7, #5]
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	d1df      	bne.n	800c586 <flip+0x72>
                    }
                    break; // sale del while porque ya sabemos que esta posicion es valida
 800c5c6:	e014      	b.n	800c5f2 <flip+0xde>
                }

                startI--;
 800c5c8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800c5cc:	b2db      	uxtb	r3, r3
 800c5ce:	3b01      	subs	r3, #1
 800c5d0:	b2db      	uxtb	r3, r3
 800c5d2:	77bb      	strb	r3, [r7, #30]
                startJ--;
 800c5d4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800c5d8:	b2db      	uxtb	r3, r3
 800c5da:	3b01      	subs	r3, #1
 800c5dc:	b2db      	uxtb	r3, r3
 800c5de:	777b      	strb	r3, [r7, #29]
            while (startI >= 0 && startJ >= 0)//para no salir fuera de la raiz
 800c5e0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	db05      	blt.n	800c5f4 <flip+0xe0>
 800c5e8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	dabd      	bge.n	800c56c <flip+0x58>
 800c5f0:	e000      	b.n	800c5f4 <flip+0xe0>
                    break; // sale del while porque ya sabemos que esta posicion es valida
 800c5f2:	bf00      	nop
            }
        }
    }

    // top
    if(i>0)
 800c5f4:	79bb      	ldrb	r3, [r7, #6]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d03e      	beq.n	800c678 <flip+0x164>
    {
        if(mat[i-1][j] == oppositePlayer)
 800c5fa:	79bb      	ldrb	r3, [r7, #6]
 800c5fc:	1e5a      	subs	r2, r3, #1
 800c5fe:	797b      	ldrb	r3, [r7, #5]
 800c600:	4982      	ldr	r1, [pc, #520]	; (800c80c <flip+0x2f8>)
 800c602:	00d2      	lsls	r2, r2, #3
 800c604:	440a      	add	r2, r1
 800c606:	4413      	add	r3, r2
 800c608:	781b      	ldrb	r3, [r3, #0]
 800c60a:	7ffa      	ldrb	r2, [r7, #31]
 800c60c:	429a      	cmp	r2, r3
 800c60e:	d133      	bne.n	800c678 <flip+0x164>
        {
        	int8_t startI = i - 1;
 800c610:	79bb      	ldrb	r3, [r7, #6]
 800c612:	3b01      	subs	r3, #1
 800c614:	b2db      	uxtb	r3, r3
 800c616:	773b      	strb	r3, [r7, #28]
            int8_t startJ = j;
 800c618:	797b      	ldrb	r3, [r7, #5]
 800c61a:	74bb      	strb	r3, [r7, #18]

            while (startI >= 0)
 800c61c:	e028      	b.n	800c670 <flip+0x15c>
            {
                if(mat [startI][startJ]==player)
 800c61e:	f997 201c 	ldrsb.w	r2, [r7, #28]
 800c622:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800c626:	4979      	ldr	r1, [pc, #484]	; (800c80c <flip+0x2f8>)
 800c628:	00d2      	lsls	r2, r2, #3
 800c62a:	440a      	add	r2, r1
 800c62c:	4413      	add	r3, r2
 800c62e:	781b      	ldrb	r3, [r3, #0]
 800c630:	79fa      	ldrb	r2, [r7, #7]
 800c632:	429a      	cmp	r2, r3
 800c634:	d116      	bne.n	800c664 <flip+0x150>
                {
                    while(startI != i)
 800c636:	e00f      	b.n	800c658 <flip+0x144>
                    {
                        mat[startI][startJ] = player;
 800c638:	f997 201c 	ldrsb.w	r2, [r7, #28]
 800c63c:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800c640:	4972      	ldr	r1, [pc, #456]	; (800c80c <flip+0x2f8>)
 800c642:	00d2      	lsls	r2, r2, #3
 800c644:	440a      	add	r2, r1
 800c646:	4413      	add	r3, r2
 800c648:	79fa      	ldrb	r2, [r7, #7]
 800c64a:	701a      	strb	r2, [r3, #0]

                        startI++;
 800c64c:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800c650:	b2db      	uxtb	r3, r3
 800c652:	3301      	adds	r3, #1
 800c654:	b2db      	uxtb	r3, r3
 800c656:	773b      	strb	r3, [r7, #28]
                    while(startI != i)
 800c658:	f997 201c 	ldrsb.w	r2, [r7, #28]
 800c65c:	79bb      	ldrb	r3, [r7, #6]
 800c65e:	429a      	cmp	r2, r3
 800c660:	d1ea      	bne.n	800c638 <flip+0x124>
                    }
                     break; // sale del while porque ya sabemos que esta posicion es valida
 800c662:	e009      	b.n	800c678 <flip+0x164>
                }
                startI--;
 800c664:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800c668:	b2db      	uxtb	r3, r3
 800c66a:	3b01      	subs	r3, #1
 800c66c:	b2db      	uxtb	r3, r3
 800c66e:	773b      	strb	r3, [r7, #28]
            while (startI >= 0)
 800c670:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800c674:	2b00      	cmp	r3, #0
 800c676:	dad2      	bge.n	800c61e <flip+0x10a>
            }
        }
    }

    // top right
    if(i > 0 && j <7)
 800c678:	79bb      	ldrb	r3, [r7, #6]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d05b      	beq.n	800c736 <flip+0x222>
 800c67e:	797b      	ldrb	r3, [r7, #5]
 800c680:	2b06      	cmp	r3, #6
 800c682:	d858      	bhi.n	800c736 <flip+0x222>
    {
        if(mat[i-1][j+1] == oppositePlayer)
 800c684:	79bb      	ldrb	r3, [r7, #6]
 800c686:	1e5a      	subs	r2, r3, #1
 800c688:	797b      	ldrb	r3, [r7, #5]
 800c68a:	3301      	adds	r3, #1
 800c68c:	495f      	ldr	r1, [pc, #380]	; (800c80c <flip+0x2f8>)
 800c68e:	00d2      	lsls	r2, r2, #3
 800c690:	440a      	add	r2, r1
 800c692:	4413      	add	r3, r2
 800c694:	781b      	ldrb	r3, [r3, #0]
 800c696:	7ffa      	ldrb	r2, [r7, #31]
 800c698:	429a      	cmp	r2, r3
 800c69a:	d14c      	bne.n	800c736 <flip+0x222>
        {
        	int8_t startI = i - 1;
 800c69c:	79bb      	ldrb	r3, [r7, #6]
 800c69e:	3b01      	subs	r3, #1
 800c6a0:	b2db      	uxtb	r3, r3
 800c6a2:	76fb      	strb	r3, [r7, #27]
            int8_t startJ = j + 1;
 800c6a4:	797b      	ldrb	r3, [r7, #5]
 800c6a6:	3301      	adds	r3, #1
 800c6a8:	b2db      	uxtb	r3, r3
 800c6aa:	76bb      	strb	r3, [r7, #26]

            while (startI >= 0 && startJ <= 7)
 800c6ac:	e039      	b.n	800c722 <flip+0x20e>
            {
                if(mat [startI][startJ]==player)
 800c6ae:	f997 201b 	ldrsb.w	r2, [r7, #27]
 800c6b2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c6b6:	4955      	ldr	r1, [pc, #340]	; (800c80c <flip+0x2f8>)
 800c6b8:	00d2      	lsls	r2, r2, #3
 800c6ba:	440a      	add	r2, r1
 800c6bc:	4413      	add	r3, r2
 800c6be:	781b      	ldrb	r3, [r3, #0]
 800c6c0:	79fa      	ldrb	r2, [r7, #7]
 800c6c2:	429a      	cmp	r2, r3
 800c6c4:	d121      	bne.n	800c70a <flip+0x1f6>
                {
                    while(startI != i && startJ!=j)
 800c6c6:	e015      	b.n	800c6f4 <flip+0x1e0>
                    {
                        mat[startI][startJ] = player;
 800c6c8:	f997 201b 	ldrsb.w	r2, [r7, #27]
 800c6cc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c6d0:	494e      	ldr	r1, [pc, #312]	; (800c80c <flip+0x2f8>)
 800c6d2:	00d2      	lsls	r2, r2, #3
 800c6d4:	440a      	add	r2, r1
 800c6d6:	4413      	add	r3, r2
 800c6d8:	79fa      	ldrb	r2, [r7, #7]
 800c6da:	701a      	strb	r2, [r3, #0]

                        startI++;
 800c6dc:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c6e0:	b2db      	uxtb	r3, r3
 800c6e2:	3301      	adds	r3, #1
 800c6e4:	b2db      	uxtb	r3, r3
 800c6e6:	76fb      	strb	r3, [r7, #27]
                        startJ--;
 800c6e8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c6ec:	b2db      	uxtb	r3, r3
 800c6ee:	3b01      	subs	r3, #1
 800c6f0:	b2db      	uxtb	r3, r3
 800c6f2:	76bb      	strb	r3, [r7, #26]
                    while(startI != i && startJ!=j)
 800c6f4:	f997 201b 	ldrsb.w	r2, [r7, #27]
 800c6f8:	79bb      	ldrb	r3, [r7, #6]
 800c6fa:	429a      	cmp	r2, r3
 800c6fc:	d01a      	beq.n	800c734 <flip+0x220>
 800c6fe:	f997 201a 	ldrsb.w	r2, [r7, #26]
 800c702:	797b      	ldrb	r3, [r7, #5]
 800c704:	429a      	cmp	r2, r3
 800c706:	d1df      	bne.n	800c6c8 <flip+0x1b4>
                    }
                     break; // sale del while porque ya sabemos que esta posicion es valida
 800c708:	e014      	b.n	800c734 <flip+0x220>
                }
                startI--;
 800c70a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c70e:	b2db      	uxtb	r3, r3
 800c710:	3b01      	subs	r3, #1
 800c712:	b2db      	uxtb	r3, r3
 800c714:	76fb      	strb	r3, [r7, #27]
                startJ++;
 800c716:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c71a:	b2db      	uxtb	r3, r3
 800c71c:	3301      	adds	r3, #1
 800c71e:	b2db      	uxtb	r3, r3
 800c720:	76bb      	strb	r3, [r7, #26]
            while (startI >= 0 && startJ <= 7)
 800c722:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c726:	2b00      	cmp	r3, #0
 800c728:	db05      	blt.n	800c736 <flip+0x222>
 800c72a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c72e:	2b07      	cmp	r3, #7
 800c730:	ddbd      	ble.n	800c6ae <flip+0x19a>
 800c732:	e000      	b.n	800c736 <flip+0x222>
                     break; // sale del while porque ya sabemos que esta posicion es valida
 800c734:	bf00      	nop
            }
        }
    }

    // right
    if(j < 7)
 800c736:	797b      	ldrb	r3, [r7, #5]
 800c738:	2b06      	cmp	r3, #6
 800c73a:	d83e      	bhi.n	800c7ba <flip+0x2a6>
    {
        if(mat[i][j+1] == oppositePlayer)
 800c73c:	79ba      	ldrb	r2, [r7, #6]
 800c73e:	797b      	ldrb	r3, [r7, #5]
 800c740:	3301      	adds	r3, #1
 800c742:	4932      	ldr	r1, [pc, #200]	; (800c80c <flip+0x2f8>)
 800c744:	00d2      	lsls	r2, r2, #3
 800c746:	440a      	add	r2, r1
 800c748:	4413      	add	r3, r2
 800c74a:	781b      	ldrb	r3, [r3, #0]
 800c74c:	7ffa      	ldrb	r2, [r7, #31]
 800c74e:	429a      	cmp	r2, r3
 800c750:	d133      	bne.n	800c7ba <flip+0x2a6>
        {
        	int8_t startI = i;
 800c752:	79bb      	ldrb	r3, [r7, #6]
 800c754:	747b      	strb	r3, [r7, #17]
            int8_t startJ = j + 1;
 800c756:	797b      	ldrb	r3, [r7, #5]
 800c758:	3301      	adds	r3, #1
 800c75a:	b2db      	uxtb	r3, r3
 800c75c:	767b      	strb	r3, [r7, #25]

            while (startJ <= 7)
 800c75e:	e028      	b.n	800c7b2 <flip+0x29e>
            {
                if(mat [startI][startJ]==player)
 800c760:	f997 2011 	ldrsb.w	r2, [r7, #17]
 800c764:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800c768:	4928      	ldr	r1, [pc, #160]	; (800c80c <flip+0x2f8>)
 800c76a:	00d2      	lsls	r2, r2, #3
 800c76c:	440a      	add	r2, r1
 800c76e:	4413      	add	r3, r2
 800c770:	781b      	ldrb	r3, [r3, #0]
 800c772:	79fa      	ldrb	r2, [r7, #7]
 800c774:	429a      	cmp	r2, r3
 800c776:	d116      	bne.n	800c7a6 <flip+0x292>
                {
                    while(startJ!=j)
 800c778:	e00f      	b.n	800c79a <flip+0x286>
                    {
                        mat[startI][startJ] = player;
 800c77a:	f997 2011 	ldrsb.w	r2, [r7, #17]
 800c77e:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800c782:	4922      	ldr	r1, [pc, #136]	; (800c80c <flip+0x2f8>)
 800c784:	00d2      	lsls	r2, r2, #3
 800c786:	440a      	add	r2, r1
 800c788:	4413      	add	r3, r2
 800c78a:	79fa      	ldrb	r2, [r7, #7]
 800c78c:	701a      	strb	r2, [r3, #0]

                        startJ--;
 800c78e:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800c792:	b2db      	uxtb	r3, r3
 800c794:	3b01      	subs	r3, #1
 800c796:	b2db      	uxtb	r3, r3
 800c798:	767b      	strb	r3, [r7, #25]
                    while(startJ!=j)
 800c79a:	f997 2019 	ldrsb.w	r2, [r7, #25]
 800c79e:	797b      	ldrb	r3, [r7, #5]
 800c7a0:	429a      	cmp	r2, r3
 800c7a2:	d1ea      	bne.n	800c77a <flip+0x266>
                    }
                     break; // sale del while porque ya sabemos que esta posicion es valida
 800c7a4:	e009      	b.n	800c7ba <flip+0x2a6>
                }
                startJ++;
 800c7a6:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800c7aa:	b2db      	uxtb	r3, r3
 800c7ac:	3301      	adds	r3, #1
 800c7ae:	b2db      	uxtb	r3, r3
 800c7b0:	767b      	strb	r3, [r7, #25]
            while (startJ <= 7)
 800c7b2:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800c7b6:	2b07      	cmp	r3, #7
 800c7b8:	ddd2      	ble.n	800c760 <flip+0x24c>
            }
        }
    }

    // bottom right
    if (i < 7 && j < 7)
 800c7ba:	79bb      	ldrb	r3, [r7, #6]
 800c7bc:	2b06      	cmp	r3, #6
 800c7be:	d85e      	bhi.n	800c87e <flip+0x36a>
 800c7c0:	797b      	ldrb	r3, [r7, #5]
 800c7c2:	2b06      	cmp	r3, #6
 800c7c4:	d85b      	bhi.n	800c87e <flip+0x36a>
    {
        if(mat[i+1][j+1] == oppositePlayer)
 800c7c6:	79bb      	ldrb	r3, [r7, #6]
 800c7c8:	1c5a      	adds	r2, r3, #1
 800c7ca:	797b      	ldrb	r3, [r7, #5]
 800c7cc:	3301      	adds	r3, #1
 800c7ce:	490f      	ldr	r1, [pc, #60]	; (800c80c <flip+0x2f8>)
 800c7d0:	00d2      	lsls	r2, r2, #3
 800c7d2:	440a      	add	r2, r1
 800c7d4:	4413      	add	r3, r2
 800c7d6:	781b      	ldrb	r3, [r3, #0]
 800c7d8:	7ffa      	ldrb	r2, [r7, #31]
 800c7da:	429a      	cmp	r2, r3
 800c7dc:	d14f      	bne.n	800c87e <flip+0x36a>
        {
        	int8_t startI = i + 1;
 800c7de:	79bb      	ldrb	r3, [r7, #6]
 800c7e0:	3301      	adds	r3, #1
 800c7e2:	b2db      	uxtb	r3, r3
 800c7e4:	763b      	strb	r3, [r7, #24]
            int8_t startJ = j + 1;
 800c7e6:	797b      	ldrb	r3, [r7, #5]
 800c7e8:	3301      	adds	r3, #1
 800c7ea:	b2db      	uxtb	r3, r3
 800c7ec:	75fb      	strb	r3, [r7, #23]

            while (startI <= 7 && startJ <= 7)
 800c7ee:	e03c      	b.n	800c86a <flip+0x356>
            {
                if(mat [startI][startJ]==player)
 800c7f0:	f997 2018 	ldrsb.w	r2, [r7, #24]
 800c7f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c7f8:	4904      	ldr	r1, [pc, #16]	; (800c80c <flip+0x2f8>)
 800c7fa:	00d2      	lsls	r2, r2, #3
 800c7fc:	440a      	add	r2, r1
 800c7fe:	4413      	add	r3, r2
 800c800:	781b      	ldrb	r3, [r3, #0]
 800c802:	79fa      	ldrb	r2, [r7, #7]
 800c804:	429a      	cmp	r2, r3
 800c806:	d124      	bne.n	800c852 <flip+0x33e>
                {
                     while(startI != i && startJ!=j)
 800c808:	e018      	b.n	800c83c <flip+0x328>
 800c80a:	bf00      	nop
 800c80c:	200008e8 	.word	0x200008e8
                    {
                        mat[startI][startJ] = player;
 800c810:	f997 2018 	ldrsb.w	r2, [r7, #24]
 800c814:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c818:	498e      	ldr	r1, [pc, #568]	; (800ca54 <flip+0x540>)
 800c81a:	00d2      	lsls	r2, r2, #3
 800c81c:	440a      	add	r2, r1
 800c81e:	4413      	add	r3, r2
 800c820:	79fa      	ldrb	r2, [r7, #7]
 800c822:	701a      	strb	r2, [r3, #0]

                        startI--;
 800c824:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800c828:	b2db      	uxtb	r3, r3
 800c82a:	3b01      	subs	r3, #1
 800c82c:	b2db      	uxtb	r3, r3
 800c82e:	763b      	strb	r3, [r7, #24]
                        startJ--;
 800c830:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c834:	b2db      	uxtb	r3, r3
 800c836:	3b01      	subs	r3, #1
 800c838:	b2db      	uxtb	r3, r3
 800c83a:	75fb      	strb	r3, [r7, #23]
                     while(startI != i && startJ!=j)
 800c83c:	f997 2018 	ldrsb.w	r2, [r7, #24]
 800c840:	79bb      	ldrb	r3, [r7, #6]
 800c842:	429a      	cmp	r2, r3
 800c844:	d01a      	beq.n	800c87c <flip+0x368>
 800c846:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800c84a:	797b      	ldrb	r3, [r7, #5]
 800c84c:	429a      	cmp	r2, r3
 800c84e:	d1df      	bne.n	800c810 <flip+0x2fc>
                    }
                     break; // sale del while porque ya sabemos que esta posicion es valida
 800c850:	e014      	b.n	800c87c <flip+0x368>
                }
                startI++;
 800c852:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800c856:	b2db      	uxtb	r3, r3
 800c858:	3301      	adds	r3, #1
 800c85a:	b2db      	uxtb	r3, r3
 800c85c:	763b      	strb	r3, [r7, #24]
                startJ++;
 800c85e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c862:	b2db      	uxtb	r3, r3
 800c864:	3301      	adds	r3, #1
 800c866:	b2db      	uxtb	r3, r3
 800c868:	75fb      	strb	r3, [r7, #23]
            while (startI <= 7 && startJ <= 7)
 800c86a:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800c86e:	2b07      	cmp	r3, #7
 800c870:	dc05      	bgt.n	800c87e <flip+0x36a>
 800c872:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c876:	2b07      	cmp	r3, #7
 800c878:	ddba      	ble.n	800c7f0 <flip+0x2dc>
 800c87a:	e000      	b.n	800c87e <flip+0x36a>
                     break; // sale del while porque ya sabemos que esta posicion es valida
 800c87c:	bf00      	nop
            }
        }
    }

    // bottom
    if(i < 7)
 800c87e:	79bb      	ldrb	r3, [r7, #6]
 800c880:	2b06      	cmp	r3, #6
 800c882:	d83e      	bhi.n	800c902 <flip+0x3ee>
    {
            if(mat[i+1][j] == oppositePlayer)
 800c884:	79bb      	ldrb	r3, [r7, #6]
 800c886:	1c5a      	adds	r2, r3, #1
 800c888:	797b      	ldrb	r3, [r7, #5]
 800c88a:	4972      	ldr	r1, [pc, #456]	; (800ca54 <flip+0x540>)
 800c88c:	00d2      	lsls	r2, r2, #3
 800c88e:	440a      	add	r2, r1
 800c890:	4413      	add	r3, r2
 800c892:	781b      	ldrb	r3, [r3, #0]
 800c894:	7ffa      	ldrb	r2, [r7, #31]
 800c896:	429a      	cmp	r2, r3
 800c898:	d133      	bne.n	800c902 <flip+0x3ee>
            {
            	int8_t startI = i + 1;
 800c89a:	79bb      	ldrb	r3, [r7, #6]
 800c89c:	3301      	adds	r3, #1
 800c89e:	b2db      	uxtb	r3, r3
 800c8a0:	75bb      	strb	r3, [r7, #22]
                int8_t startJ = j;
 800c8a2:	797b      	ldrb	r3, [r7, #5]
 800c8a4:	743b      	strb	r3, [r7, #16]

                while (startI <=7)
 800c8a6:	e028      	b.n	800c8fa <flip+0x3e6>
                {
                    if(mat [startI][startJ]==player)
 800c8a8:	f997 2016 	ldrsb.w	r2, [r7, #22]
 800c8ac:	f997 3010 	ldrsb.w	r3, [r7, #16]
 800c8b0:	4968      	ldr	r1, [pc, #416]	; (800ca54 <flip+0x540>)
 800c8b2:	00d2      	lsls	r2, r2, #3
 800c8b4:	440a      	add	r2, r1
 800c8b6:	4413      	add	r3, r2
 800c8b8:	781b      	ldrb	r3, [r3, #0]
 800c8ba:	79fa      	ldrb	r2, [r7, #7]
 800c8bc:	429a      	cmp	r2, r3
 800c8be:	d116      	bne.n	800c8ee <flip+0x3da>
                    {
                        while(startI != i)
 800c8c0:	e00f      	b.n	800c8e2 <flip+0x3ce>
                        {
                            mat[startI][startJ] = player;
 800c8c2:	f997 2016 	ldrsb.w	r2, [r7, #22]
 800c8c6:	f997 3010 	ldrsb.w	r3, [r7, #16]
 800c8ca:	4962      	ldr	r1, [pc, #392]	; (800ca54 <flip+0x540>)
 800c8cc:	00d2      	lsls	r2, r2, #3
 800c8ce:	440a      	add	r2, r1
 800c8d0:	4413      	add	r3, r2
 800c8d2:	79fa      	ldrb	r2, [r7, #7]
 800c8d4:	701a      	strb	r2, [r3, #0]

                            startI--;
 800c8d6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800c8da:	b2db      	uxtb	r3, r3
 800c8dc:	3b01      	subs	r3, #1
 800c8de:	b2db      	uxtb	r3, r3
 800c8e0:	75bb      	strb	r3, [r7, #22]
                        while(startI != i)
 800c8e2:	f997 2016 	ldrsb.w	r2, [r7, #22]
 800c8e6:	79bb      	ldrb	r3, [r7, #6]
 800c8e8:	429a      	cmp	r2, r3
 800c8ea:	d1ea      	bne.n	800c8c2 <flip+0x3ae>
                         }
                         break; // sale del while porque ya sabemos que esta posicion es valida
 800c8ec:	e009      	b.n	800c902 <flip+0x3ee>
                    }
                    startI++;
 800c8ee:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800c8f2:	b2db      	uxtb	r3, r3
 800c8f4:	3301      	adds	r3, #1
 800c8f6:	b2db      	uxtb	r3, r3
 800c8f8:	75bb      	strb	r3, [r7, #22]
                while (startI <=7)
 800c8fa:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800c8fe:	2b07      	cmp	r3, #7
 800c900:	ddd2      	ble.n	800c8a8 <flip+0x394>
                }
            }
    }

    // bottom left
    if(i < 7 && j > 0)
 800c902:	79bb      	ldrb	r3, [r7, #6]
 800c904:	2b06      	cmp	r3, #6
 800c906:	d85b      	bhi.n	800c9c0 <flip+0x4ac>
 800c908:	797b      	ldrb	r3, [r7, #5]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d058      	beq.n	800c9c0 <flip+0x4ac>
    {
        if(mat[i+1][j-1] == oppositePlayer)
 800c90e:	79bb      	ldrb	r3, [r7, #6]
 800c910:	1c5a      	adds	r2, r3, #1
 800c912:	797b      	ldrb	r3, [r7, #5]
 800c914:	3b01      	subs	r3, #1
 800c916:	494f      	ldr	r1, [pc, #316]	; (800ca54 <flip+0x540>)
 800c918:	00d2      	lsls	r2, r2, #3
 800c91a:	440a      	add	r2, r1
 800c91c:	4413      	add	r3, r2
 800c91e:	781b      	ldrb	r3, [r3, #0]
 800c920:	7ffa      	ldrb	r2, [r7, #31]
 800c922:	429a      	cmp	r2, r3
 800c924:	d14c      	bne.n	800c9c0 <flip+0x4ac>
        {
        	int8_t startI = i + 1;
 800c926:	79bb      	ldrb	r3, [r7, #6]
 800c928:	3301      	adds	r3, #1
 800c92a:	b2db      	uxtb	r3, r3
 800c92c:	757b      	strb	r3, [r7, #21]
            int8_t startJ = j - 1;
 800c92e:	797b      	ldrb	r3, [r7, #5]
 800c930:	3b01      	subs	r3, #1
 800c932:	b2db      	uxtb	r3, r3
 800c934:	753b      	strb	r3, [r7, #20]

            while (startI <=7  && startJ >= 0)
 800c936:	e039      	b.n	800c9ac <flip+0x498>
            {
                if(mat [startI][startJ]==player)
 800c938:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800c93c:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800c940:	4944      	ldr	r1, [pc, #272]	; (800ca54 <flip+0x540>)
 800c942:	00d2      	lsls	r2, r2, #3
 800c944:	440a      	add	r2, r1
 800c946:	4413      	add	r3, r2
 800c948:	781b      	ldrb	r3, [r3, #0]
 800c94a:	79fa      	ldrb	r2, [r7, #7]
 800c94c:	429a      	cmp	r2, r3
 800c94e:	d121      	bne.n	800c994 <flip+0x480>
                {
                     while(startI != i && startJ!=j)
 800c950:	e015      	b.n	800c97e <flip+0x46a>
                    {
                        mat[startI][startJ] = player;
 800c952:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800c956:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800c95a:	493e      	ldr	r1, [pc, #248]	; (800ca54 <flip+0x540>)
 800c95c:	00d2      	lsls	r2, r2, #3
 800c95e:	440a      	add	r2, r1
 800c960:	4413      	add	r3, r2
 800c962:	79fa      	ldrb	r2, [r7, #7]
 800c964:	701a      	strb	r2, [r3, #0]

                        startI--;
 800c966:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800c96a:	b2db      	uxtb	r3, r3
 800c96c:	3b01      	subs	r3, #1
 800c96e:	b2db      	uxtb	r3, r3
 800c970:	757b      	strb	r3, [r7, #21]
                        startJ++;
 800c972:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800c976:	b2db      	uxtb	r3, r3
 800c978:	3301      	adds	r3, #1
 800c97a:	b2db      	uxtb	r3, r3
 800c97c:	753b      	strb	r3, [r7, #20]
                     while(startI != i && startJ!=j)
 800c97e:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800c982:	79bb      	ldrb	r3, [r7, #6]
 800c984:	429a      	cmp	r2, r3
 800c986:	d01a      	beq.n	800c9be <flip+0x4aa>
 800c988:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800c98c:	797b      	ldrb	r3, [r7, #5]
 800c98e:	429a      	cmp	r2, r3
 800c990:	d1df      	bne.n	800c952 <flip+0x43e>
                    }
                     break; // sale del while porque ya sabemos que esta posicion es valida
 800c992:	e014      	b.n	800c9be <flip+0x4aa>
                }
                startI++;
 800c994:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800c998:	b2db      	uxtb	r3, r3
 800c99a:	3301      	adds	r3, #1
 800c99c:	b2db      	uxtb	r3, r3
 800c99e:	757b      	strb	r3, [r7, #21]
                startJ--;
 800c9a0:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800c9a4:	b2db      	uxtb	r3, r3
 800c9a6:	3b01      	subs	r3, #1
 800c9a8:	b2db      	uxtb	r3, r3
 800c9aa:	753b      	strb	r3, [r7, #20]
            while (startI <=7  && startJ >= 0)
 800c9ac:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800c9b0:	2b07      	cmp	r3, #7
 800c9b2:	dc05      	bgt.n	800c9c0 <flip+0x4ac>
 800c9b4:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	dabd      	bge.n	800c938 <flip+0x424>
 800c9bc:	e000      	b.n	800c9c0 <flip+0x4ac>
                     break; // sale del while porque ya sabemos que esta posicion es valida
 800c9be:	bf00      	nop
            }
        }
    }

    // left
    if(j > 0)
 800c9c0:	797b      	ldrb	r3, [r7, #5]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d03f      	beq.n	800ca46 <flip+0x532>
    {
        if(mat[i][j-1] == oppositePlayer)
 800c9c6:	79ba      	ldrb	r2, [r7, #6]
 800c9c8:	797b      	ldrb	r3, [r7, #5]
 800c9ca:	3b01      	subs	r3, #1
 800c9cc:	4921      	ldr	r1, [pc, #132]	; (800ca54 <flip+0x540>)
 800c9ce:	00d2      	lsls	r2, r2, #3
 800c9d0:	440a      	add	r2, r1
 800c9d2:	4413      	add	r3, r2
 800c9d4:	781b      	ldrb	r3, [r3, #0]
 800c9d6:	7ffa      	ldrb	r2, [r7, #31]
 800c9d8:	429a      	cmp	r2, r3
 800c9da:	d134      	bne.n	800ca46 <flip+0x532>
        {
        	int8_t startI = i;
 800c9dc:	79bb      	ldrb	r3, [r7, #6]
 800c9de:	73fb      	strb	r3, [r7, #15]
        	int8_t startJ = j - 1;
 800c9e0:	797b      	ldrb	r3, [r7, #5]
 800c9e2:	3b01      	subs	r3, #1
 800c9e4:	b2db      	uxtb	r3, r3
 800c9e6:	74fb      	strb	r3, [r7, #19]

            while ( startJ >= 0)
 800c9e8:	e028      	b.n	800ca3c <flip+0x528>
            {
                if(mat [startI][startJ]==player)
 800c9ea:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800c9ee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c9f2:	4918      	ldr	r1, [pc, #96]	; (800ca54 <flip+0x540>)
 800c9f4:	00d2      	lsls	r2, r2, #3
 800c9f6:	440a      	add	r2, r1
 800c9f8:	4413      	add	r3, r2
 800c9fa:	781b      	ldrb	r3, [r3, #0]
 800c9fc:	79fa      	ldrb	r2, [r7, #7]
 800c9fe:	429a      	cmp	r2, r3
 800ca00:	d116      	bne.n	800ca30 <flip+0x51c>
                {
                     while(startJ!=j)
 800ca02:	e00f      	b.n	800ca24 <flip+0x510>
                    {
                        mat[startI][startJ] = player;
 800ca04:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800ca08:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ca0c:	4911      	ldr	r1, [pc, #68]	; (800ca54 <flip+0x540>)
 800ca0e:	00d2      	lsls	r2, r2, #3
 800ca10:	440a      	add	r2, r1
 800ca12:	4413      	add	r3, r2
 800ca14:	79fa      	ldrb	r2, [r7, #7]
 800ca16:	701a      	strb	r2, [r3, #0]

                        startJ++;
 800ca18:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ca1c:	b2db      	uxtb	r3, r3
 800ca1e:	3301      	adds	r3, #1
 800ca20:	b2db      	uxtb	r3, r3
 800ca22:	74fb      	strb	r3, [r7, #19]
                     while(startJ!=j)
 800ca24:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800ca28:	797b      	ldrb	r3, [r7, #5]
 800ca2a:	429a      	cmp	r2, r3
 800ca2c:	d1ea      	bne.n	800ca04 <flip+0x4f0>
                    }
                     break; // sale del while porque ya sabemos que esta posicion es valida
 800ca2e:	e00a      	b.n	800ca46 <flip+0x532>
                }
                startJ--;
 800ca30:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ca34:	b2db      	uxtb	r3, r3
 800ca36:	3b01      	subs	r3, #1
 800ca38:	b2db      	uxtb	r3, r3
 800ca3a:	74fb      	strb	r3, [r7, #19]
            while ( startJ >= 0)
 800ca3c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	dad2      	bge.n	800c9ea <flip+0x4d6>
            }
        }
    }
}
 800ca44:	e7ff      	b.n	800ca46 <flip+0x532>
 800ca46:	bf00      	nop
 800ca48:	3724      	adds	r7, #36	; 0x24
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca50:	4770      	bx	lr
 800ca52:	bf00      	nop
 800ca54:	200008e8 	.word	0x200008e8

0800ca58 <getAvailableMoves>:

// Busca en el tablero entero los movimientos validos
void getAvailableMoves(uint8_t player, uint8_t availablePosition[], uint8_t *numAvailablePosition)
{
 800ca58:	b480      	push	{r7}
 800ca5a:	b08d      	sub	sp, #52	; 0x34
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	4603      	mov	r3, r0
 800ca60:	60b9      	str	r1, [r7, #8]
 800ca62:	607a      	str	r2, [r7, #4]
 800ca64:	73fb      	strb	r3, [r7, #15]
	uint8_t oppositePlayer;

    if(player==1)
 800ca66:	7bfb      	ldrb	r3, [r7, #15]
 800ca68:	2b01      	cmp	r3, #1
 800ca6a:	d103      	bne.n	800ca74 <getAvailableMoves+0x1c>
    {
        oppositePlayer=2;
 800ca6c:	2302      	movs	r3, #2
 800ca6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ca72:	e002      	b.n	800ca7a <getAvailableMoves+0x22>
    }
    else
    {
        oppositePlayer=1;
 800ca74:	2301      	movs	r3, #1
 800ca76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }


    *numAvailablePosition = 0;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	701a      	strb	r2, [r3, #0]

    for(int i=0; i<8; i++)
 800ca80:	2300      	movs	r3, #0
 800ca82:	62bb      	str	r3, [r7, #40]	; 0x28
 800ca84:	e20c      	b.n	800cea0 <getAvailableMoves+0x448>
    {
        for(int j=0; j<8; j++)
 800ca86:	2300      	movs	r3, #0
 800ca88:	627b      	str	r3, [r7, #36]	; 0x24
 800ca8a:	e202      	b.n	800ce92 <getAvailableMoves+0x43a>
        {
            // We need to check if the position i,j is empty (equal to 0). If it isnt, then we continue to the next column
            if(mat[i][j] != 0)
 800ca8c:	4ab0      	ldr	r2, [pc, #704]	; (800cd50 <getAvailableMoves+0x2f8>)
 800ca8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca90:	00db      	lsls	r3, r3, #3
 800ca92:	441a      	add	r2, r3
 800ca94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca96:	4413      	add	r3, r2
 800ca98:	781b      	ldrb	r3, [r3, #0]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	f040 81f5 	bne.w	800ce8a <getAvailableMoves+0x432>
            /* TL   T   TR
             *  L (i,j) R
             * BL   B   BR
             */

            uint8_t positionValid = 0;//al inicio declaramos que la posición en invalida
 800caa0:	2300      	movs	r3, #0
 800caa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

            // top left
            if(i > 0 && j > 0) // Esta condición sirve para no acceder a posiciones fuera de la tabla
 800caa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	dd42      	ble.n	800cb32 <getAvailableMoves+0xda>
 800caac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caae:	2b00      	cmp	r3, #0
 800cab0:	dd3f      	ble.n	800cb32 <getAvailableMoves+0xda>
            {
                if(mat[i-1][j-1] == oppositePlayer)
 800cab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cab4:	1e5a      	subs	r2, r3, #1
 800cab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cab8:	3b01      	subs	r3, #1
 800caba:	49a5      	ldr	r1, [pc, #660]	; (800cd50 <getAvailableMoves+0x2f8>)
 800cabc:	00d2      	lsls	r2, r2, #3
 800cabe:	440a      	add	r2, r1
 800cac0:	4413      	add	r3, r2
 800cac2:	781b      	ldrb	r3, [r3, #0]
 800cac4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800cac8:	429a      	cmp	r2, r3
 800caca:	d132      	bne.n	800cb32 <getAvailableMoves+0xda>
                {
                    // posicao adjacent
                	int8_t startI = i - 1;//comienza en el mismo sitio de la ficha opuesta
 800cacc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cace:	b2db      	uxtb	r3, r3
 800cad0:	3b01      	subs	r3, #1
 800cad2:	b2db      	uxtb	r3, r3
 800cad4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
                	int8_t startJ = j - 1;
 800cad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cada:	b2db      	uxtb	r3, r3
 800cadc:	3b01      	subs	r3, #1
 800cade:	b2db      	uxtb	r3, r3
 800cae0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

                    while (startI >= 0 && startJ >= 0)//hasta los limites de la tabla
 800cae4:	e01d      	b.n	800cb22 <getAvailableMoves+0xca>
                    {
                        if(mat [startI][startJ]==player)
 800cae6:	f997 2022 	ldrsb.w	r2, [r7, #34]	; 0x22
 800caea:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800caee:	4998      	ldr	r1, [pc, #608]	; (800cd50 <getAvailableMoves+0x2f8>)
 800caf0:	00d2      	lsls	r2, r2, #3
 800caf2:	440a      	add	r2, r1
 800caf4:	4413      	add	r3, r2
 800caf6:	781b      	ldrb	r3, [r3, #0]
 800caf8:	7bfa      	ldrb	r2, [r7, #15]
 800cafa:	429a      	cmp	r2, r3
 800cafc:	d103      	bne.n	800cb06 <getAvailableMoves+0xae>
                        {
                             positionValid = 1;
 800cafe:	2301      	movs	r3, #1
 800cb00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                             break; // sale del while porque ya sabemos que esta posicion es valida
 800cb04:	e015      	b.n	800cb32 <getAvailableMoves+0xda>
                        }
                        startI--;
 800cb06:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 800cb0a:	b2db      	uxtb	r3, r3
 800cb0c:	3b01      	subs	r3, #1
 800cb0e:	b2db      	uxtb	r3, r3
 800cb10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
                        startJ--;
 800cb14:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800cb18:	b2db      	uxtb	r3, r3
 800cb1a:	3b01      	subs	r3, #1
 800cb1c:	b2db      	uxtb	r3, r3
 800cb1e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
                    while (startI >= 0 && startJ >= 0)//hasta los limites de la tabla
 800cb22:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	db03      	blt.n	800cb32 <getAvailableMoves+0xda>
 800cb2a:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	dad9      	bge.n	800cae6 <getAvailableMoves+0x8e>
                    }
                }
            }

            // top
            if(i>0)
 800cb32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	dd2f      	ble.n	800cb98 <getAvailableMoves+0x140>
            {
                if(mat[i-1][j] == oppositePlayer)
 800cb38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb3a:	3b01      	subs	r3, #1
 800cb3c:	4a84      	ldr	r2, [pc, #528]	; (800cd50 <getAvailableMoves+0x2f8>)
 800cb3e:	00db      	lsls	r3, r3, #3
 800cb40:	441a      	add	r2, r3
 800cb42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb44:	4413      	add	r3, r2
 800cb46:	781b      	ldrb	r3, [r3, #0]
 800cb48:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800cb4c:	429a      	cmp	r2, r3
 800cb4e:	d123      	bne.n	800cb98 <getAvailableMoves+0x140>
                {
                    int8_t startI = i - 1;
 800cb50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb52:	b2db      	uxtb	r3, r3
 800cb54:	3b01      	subs	r3, #1
 800cb56:	b2db      	uxtb	r3, r3
 800cb58:	f887 3020 	strb.w	r3, [r7, #32]
                    int8_t startJ = j;
 800cb5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb5e:	75bb      	strb	r3, [r7, #22]

                    while (startI >= 0)
 800cb60:	e016      	b.n	800cb90 <getAvailableMoves+0x138>
                    {
                        if(mat [startI][startJ]==player)
 800cb62:	f997 2020 	ldrsb.w	r2, [r7, #32]
 800cb66:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800cb6a:	4979      	ldr	r1, [pc, #484]	; (800cd50 <getAvailableMoves+0x2f8>)
 800cb6c:	00d2      	lsls	r2, r2, #3
 800cb6e:	440a      	add	r2, r1
 800cb70:	4413      	add	r3, r2
 800cb72:	781b      	ldrb	r3, [r3, #0]
 800cb74:	7bfa      	ldrb	r2, [r7, #15]
 800cb76:	429a      	cmp	r2, r3
 800cb78:	d103      	bne.n	800cb82 <getAvailableMoves+0x12a>
                        {
                             positionValid = 1;
 800cb7a:	2301      	movs	r3, #1
 800cb7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                             break; // sale del while porque ya sabemos que esta posicion es valida
 800cb80:	e00a      	b.n	800cb98 <getAvailableMoves+0x140>
                        }
                        startI--;
 800cb82:	f997 3020 	ldrsb.w	r3, [r7, #32]
 800cb86:	b2db      	uxtb	r3, r3
 800cb88:	3b01      	subs	r3, #1
 800cb8a:	b2db      	uxtb	r3, r3
 800cb8c:	f887 3020 	strb.w	r3, [r7, #32]
                    while (startI >= 0)
 800cb90:	f997 3020 	ldrsb.w	r3, [r7, #32]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	dae4      	bge.n	800cb62 <getAvailableMoves+0x10a>
                    }
                }
            }

            // top right
            if(i > 0 && j <7)
 800cb98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	dd3e      	ble.n	800cc1c <getAvailableMoves+0x1c4>
 800cb9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba0:	2b06      	cmp	r3, #6
 800cba2:	dc3b      	bgt.n	800cc1c <getAvailableMoves+0x1c4>
            {
                if(mat[i-1][j+1] == oppositePlayer)
 800cba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cba6:	1e5a      	subs	r2, r3, #1
 800cba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbaa:	3301      	adds	r3, #1
 800cbac:	4968      	ldr	r1, [pc, #416]	; (800cd50 <getAvailableMoves+0x2f8>)
 800cbae:	00d2      	lsls	r2, r2, #3
 800cbb0:	440a      	add	r2, r1
 800cbb2:	4413      	add	r3, r2
 800cbb4:	781b      	ldrb	r3, [r3, #0]
 800cbb6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800cbba:	429a      	cmp	r2, r3
 800cbbc:	d12e      	bne.n	800cc1c <getAvailableMoves+0x1c4>
                {
                	int8_t startI = i - 1;
 800cbbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbc0:	b2db      	uxtb	r3, r3
 800cbc2:	3b01      	subs	r3, #1
 800cbc4:	b2db      	uxtb	r3, r3
 800cbc6:	77fb      	strb	r3, [r7, #31]
                	int8_t startJ = j + 1;
 800cbc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbca:	b2db      	uxtb	r3, r3
 800cbcc:	3301      	adds	r3, #1
 800cbce:	b2db      	uxtb	r3, r3
 800cbd0:	77bb      	strb	r3, [r7, #30]

                    while (startI >= 0 && startJ <= 7)
 800cbd2:	e01b      	b.n	800cc0c <getAvailableMoves+0x1b4>
                    {
                        if(mat [startI][startJ]==player)
 800cbd4:	f997 201f 	ldrsb.w	r2, [r7, #31]
 800cbd8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800cbdc:	495c      	ldr	r1, [pc, #368]	; (800cd50 <getAvailableMoves+0x2f8>)
 800cbde:	00d2      	lsls	r2, r2, #3
 800cbe0:	440a      	add	r2, r1
 800cbe2:	4413      	add	r3, r2
 800cbe4:	781b      	ldrb	r3, [r3, #0]
 800cbe6:	7bfa      	ldrb	r2, [r7, #15]
 800cbe8:	429a      	cmp	r2, r3
 800cbea:	d103      	bne.n	800cbf4 <getAvailableMoves+0x19c>
                        {
                             positionValid = 1;
 800cbec:	2301      	movs	r3, #1
 800cbee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                             break; // sale del while porque ya sabemos que esta posicion es valida
 800cbf2:	e013      	b.n	800cc1c <getAvailableMoves+0x1c4>
                        }
                        startI--;
 800cbf4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cbf8:	b2db      	uxtb	r3, r3
 800cbfa:	3b01      	subs	r3, #1
 800cbfc:	b2db      	uxtb	r3, r3
 800cbfe:	77fb      	strb	r3, [r7, #31]
                        startJ++;
 800cc00:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800cc04:	b2db      	uxtb	r3, r3
 800cc06:	3301      	adds	r3, #1
 800cc08:	b2db      	uxtb	r3, r3
 800cc0a:	77bb      	strb	r3, [r7, #30]
                    while (startI >= 0 && startJ <= 7)
 800cc0c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	db03      	blt.n	800cc1c <getAvailableMoves+0x1c4>
 800cc14:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800cc18:	2b07      	cmp	r3, #7
 800cc1a:	dddb      	ble.n	800cbd4 <getAvailableMoves+0x17c>
                    }
                }
            }

            // right
            if(j < 7)
 800cc1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc1e:	2b06      	cmp	r3, #6
 800cc20:	dc2d      	bgt.n	800cc7e <getAvailableMoves+0x226>
            {
                if(mat[i][j+1] == oppositePlayer)
 800cc22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc24:	3301      	adds	r3, #1
 800cc26:	494a      	ldr	r1, [pc, #296]	; (800cd50 <getAvailableMoves+0x2f8>)
 800cc28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc2a:	00d2      	lsls	r2, r2, #3
 800cc2c:	440a      	add	r2, r1
 800cc2e:	4413      	add	r3, r2
 800cc30:	781b      	ldrb	r3, [r3, #0]
 800cc32:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800cc36:	429a      	cmp	r2, r3
 800cc38:	d121      	bne.n	800cc7e <getAvailableMoves+0x226>
                {
                	int8_t startI = i;
 800cc3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc3c:	757b      	strb	r3, [r7, #21]
                	int8_t startJ = j + 1;
 800cc3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc40:	b2db      	uxtb	r3, r3
 800cc42:	3301      	adds	r3, #1
 800cc44:	b2db      	uxtb	r3, r3
 800cc46:	777b      	strb	r3, [r7, #29]

                    while (startJ <= 7)
 800cc48:	e015      	b.n	800cc76 <getAvailableMoves+0x21e>
                    {
                        if(mat [startI][startJ]==player)
 800cc4a:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800cc4e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800cc52:	493f      	ldr	r1, [pc, #252]	; (800cd50 <getAvailableMoves+0x2f8>)
 800cc54:	00d2      	lsls	r2, r2, #3
 800cc56:	440a      	add	r2, r1
 800cc58:	4413      	add	r3, r2
 800cc5a:	781b      	ldrb	r3, [r3, #0]
 800cc5c:	7bfa      	ldrb	r2, [r7, #15]
 800cc5e:	429a      	cmp	r2, r3
 800cc60:	d103      	bne.n	800cc6a <getAvailableMoves+0x212>
                        {
                             positionValid = 1;
 800cc62:	2301      	movs	r3, #1
 800cc64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                             break; // sale del while porque ya sabemos que esta posicion es valida
 800cc68:	e009      	b.n	800cc7e <getAvailableMoves+0x226>
                        }
                        startJ++;
 800cc6a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800cc6e:	b2db      	uxtb	r3, r3
 800cc70:	3301      	adds	r3, #1
 800cc72:	b2db      	uxtb	r3, r3
 800cc74:	777b      	strb	r3, [r7, #29]
                    while (startJ <= 7)
 800cc76:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800cc7a:	2b07      	cmp	r3, #7
 800cc7c:	dde5      	ble.n	800cc4a <getAvailableMoves+0x1f2>
                    }
                }
            }

            // bottom right
            if (i < 7 && j < 7)
 800cc7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc80:	2b06      	cmp	r3, #6
 800cc82:	dc3e      	bgt.n	800cd02 <getAvailableMoves+0x2aa>
 800cc84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc86:	2b06      	cmp	r3, #6
 800cc88:	dc3b      	bgt.n	800cd02 <getAvailableMoves+0x2aa>
            {
                if(mat[i+1][j+1] == oppositePlayer)
 800cc8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc8c:	1c5a      	adds	r2, r3, #1
 800cc8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc90:	3301      	adds	r3, #1
 800cc92:	492f      	ldr	r1, [pc, #188]	; (800cd50 <getAvailableMoves+0x2f8>)
 800cc94:	00d2      	lsls	r2, r2, #3
 800cc96:	440a      	add	r2, r1
 800cc98:	4413      	add	r3, r2
 800cc9a:	781b      	ldrb	r3, [r3, #0]
 800cc9c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800cca0:	429a      	cmp	r2, r3
 800cca2:	d12e      	bne.n	800cd02 <getAvailableMoves+0x2aa>
                {
                	int8_t startI = i + 1;
 800cca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cca6:	b2db      	uxtb	r3, r3
 800cca8:	3301      	adds	r3, #1
 800ccaa:	b2db      	uxtb	r3, r3
 800ccac:	773b      	strb	r3, [r7, #28]
                	int8_t startJ = j + 1;
 800ccae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccb0:	b2db      	uxtb	r3, r3
 800ccb2:	3301      	adds	r3, #1
 800ccb4:	b2db      	uxtb	r3, r3
 800ccb6:	76fb      	strb	r3, [r7, #27]

                    while (startI <= 7 && startJ <= 7)
 800ccb8:	e01b      	b.n	800ccf2 <getAvailableMoves+0x29a>
                    {
                        if(mat [startI][startJ]==player)
 800ccba:	f997 201c 	ldrsb.w	r2, [r7, #28]
 800ccbe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ccc2:	4923      	ldr	r1, [pc, #140]	; (800cd50 <getAvailableMoves+0x2f8>)
 800ccc4:	00d2      	lsls	r2, r2, #3
 800ccc6:	440a      	add	r2, r1
 800ccc8:	4413      	add	r3, r2
 800ccca:	781b      	ldrb	r3, [r3, #0]
 800cccc:	7bfa      	ldrb	r2, [r7, #15]
 800ccce:	429a      	cmp	r2, r3
 800ccd0:	d103      	bne.n	800ccda <getAvailableMoves+0x282>
                        {
                             positionValid = 1;
 800ccd2:	2301      	movs	r3, #1
 800ccd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                             break; // sale del while porque ya sabemos que esta posicion es valida
 800ccd8:	e013      	b.n	800cd02 <getAvailableMoves+0x2aa>
                        }
                        startI++;
 800ccda:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800ccde:	b2db      	uxtb	r3, r3
 800cce0:	3301      	adds	r3, #1
 800cce2:	b2db      	uxtb	r3, r3
 800cce4:	773b      	strb	r3, [r7, #28]
                        startJ++;
 800cce6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ccea:	b2db      	uxtb	r3, r3
 800ccec:	3301      	adds	r3, #1
 800ccee:	b2db      	uxtb	r3, r3
 800ccf0:	76fb      	strb	r3, [r7, #27]
                    while (startI <= 7 && startJ <= 7)
 800ccf2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800ccf6:	2b07      	cmp	r3, #7
 800ccf8:	dc03      	bgt.n	800cd02 <getAvailableMoves+0x2aa>
 800ccfa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ccfe:	2b07      	cmp	r3, #7
 800cd00:	dddb      	ble.n	800ccba <getAvailableMoves+0x262>
                    }
                }
            }

            // bottom
            if(i < 7)
 800cd02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd04:	2b06      	cmp	r3, #6
 800cd06:	dc2f      	bgt.n	800cd68 <getAvailableMoves+0x310>
            {
                if(mat[i+1][j] == oppositePlayer)
 800cd08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd0a:	3301      	adds	r3, #1
 800cd0c:	4a10      	ldr	r2, [pc, #64]	; (800cd50 <getAvailableMoves+0x2f8>)
 800cd0e:	00db      	lsls	r3, r3, #3
 800cd10:	441a      	add	r2, r3
 800cd12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd14:	4413      	add	r3, r2
 800cd16:	781b      	ldrb	r3, [r3, #0]
 800cd18:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800cd1c:	429a      	cmp	r2, r3
 800cd1e:	d123      	bne.n	800cd68 <getAvailableMoves+0x310>
                {
                	int8_t startI = i + 1;
 800cd20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd22:	b2db      	uxtb	r3, r3
 800cd24:	3301      	adds	r3, #1
 800cd26:	b2db      	uxtb	r3, r3
 800cd28:	76bb      	strb	r3, [r7, #26]
                	int8_t startJ = j;
 800cd2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd2c:	753b      	strb	r3, [r7, #20]

                    while (startI <=7)
 800cd2e:	e017      	b.n	800cd60 <getAvailableMoves+0x308>
                    {
                        if(mat [startI][startJ]==player)
 800cd30:	f997 201a 	ldrsb.w	r2, [r7, #26]
 800cd34:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800cd38:	4905      	ldr	r1, [pc, #20]	; (800cd50 <getAvailableMoves+0x2f8>)
 800cd3a:	00d2      	lsls	r2, r2, #3
 800cd3c:	440a      	add	r2, r1
 800cd3e:	4413      	add	r3, r2
 800cd40:	781b      	ldrb	r3, [r3, #0]
 800cd42:	7bfa      	ldrb	r2, [r7, #15]
 800cd44:	429a      	cmp	r2, r3
 800cd46:	d105      	bne.n	800cd54 <getAvailableMoves+0x2fc>
                        {
                             positionValid = 1;
 800cd48:	2301      	movs	r3, #1
 800cd4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                             break; // sale del while porque ya sabemos que esta posicion es valida
 800cd4e:	e00b      	b.n	800cd68 <getAvailableMoves+0x310>
 800cd50:	200008e8 	.word	0x200008e8
                        }
                        startI++;
 800cd54:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800cd58:	b2db      	uxtb	r3, r3
 800cd5a:	3301      	adds	r3, #1
 800cd5c:	b2db      	uxtb	r3, r3
 800cd5e:	76bb      	strb	r3, [r7, #26]
                    while (startI <=7)
 800cd60:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800cd64:	2b07      	cmp	r3, #7
 800cd66:	dde3      	ble.n	800cd30 <getAvailableMoves+0x2d8>
                    }
                }
            }

            // bottom left
            if(i < 7 && j > 0)
 800cd68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd6a:	2b06      	cmp	r3, #6
 800cd6c:	dc3e      	bgt.n	800cdec <getAvailableMoves+0x394>
 800cd6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	dd3b      	ble.n	800cdec <getAvailableMoves+0x394>
            {
                if(mat[i+1][j-1] == oppositePlayer)
 800cd74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd76:	1c5a      	adds	r2, r3, #1
 800cd78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd7a:	3b01      	subs	r3, #1
 800cd7c:	494d      	ldr	r1, [pc, #308]	; (800ceb4 <getAvailableMoves+0x45c>)
 800cd7e:	00d2      	lsls	r2, r2, #3
 800cd80:	440a      	add	r2, r1
 800cd82:	4413      	add	r3, r2
 800cd84:	781b      	ldrb	r3, [r3, #0]
 800cd86:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800cd8a:	429a      	cmp	r2, r3
 800cd8c:	d12e      	bne.n	800cdec <getAvailableMoves+0x394>
                {
                	int8_t startI = i + 1;
 800cd8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd90:	b2db      	uxtb	r3, r3
 800cd92:	3301      	adds	r3, #1
 800cd94:	b2db      	uxtb	r3, r3
 800cd96:	767b      	strb	r3, [r7, #25]
                	int8_t startJ = j - 1;
 800cd98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd9a:	b2db      	uxtb	r3, r3
 800cd9c:	3b01      	subs	r3, #1
 800cd9e:	b2db      	uxtb	r3, r3
 800cda0:	763b      	strb	r3, [r7, #24]

                    while (startI <=7  && startJ >= 0)
 800cda2:	e01b      	b.n	800cddc <getAvailableMoves+0x384>
                    {
                        if(mat [startI][startJ]==player)
 800cda4:	f997 2019 	ldrsb.w	r2, [r7, #25]
 800cda8:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800cdac:	4941      	ldr	r1, [pc, #260]	; (800ceb4 <getAvailableMoves+0x45c>)
 800cdae:	00d2      	lsls	r2, r2, #3
 800cdb0:	440a      	add	r2, r1
 800cdb2:	4413      	add	r3, r2
 800cdb4:	781b      	ldrb	r3, [r3, #0]
 800cdb6:	7bfa      	ldrb	r2, [r7, #15]
 800cdb8:	429a      	cmp	r2, r3
 800cdba:	d103      	bne.n	800cdc4 <getAvailableMoves+0x36c>
                        {
                             positionValid = 1;
 800cdbc:	2301      	movs	r3, #1
 800cdbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                             break; // sale del while porque ya sabemos que esta posicion es valida
 800cdc2:	e013      	b.n	800cdec <getAvailableMoves+0x394>
                        }
                        startI++;
 800cdc4:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800cdc8:	b2db      	uxtb	r3, r3
 800cdca:	3301      	adds	r3, #1
 800cdcc:	b2db      	uxtb	r3, r3
 800cdce:	767b      	strb	r3, [r7, #25]
                        startJ--;
 800cdd0:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800cdd4:	b2db      	uxtb	r3, r3
 800cdd6:	3b01      	subs	r3, #1
 800cdd8:	b2db      	uxtb	r3, r3
 800cdda:	763b      	strb	r3, [r7, #24]
                    while (startI <=7  && startJ >= 0)
 800cddc:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800cde0:	2b07      	cmp	r3, #7
 800cde2:	dc03      	bgt.n	800cdec <getAvailableMoves+0x394>
 800cde4:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	dadb      	bge.n	800cda4 <getAvailableMoves+0x34c>
                    }
                }
            }

            // left
            if(j > 0)
 800cdec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	dd2d      	ble.n	800ce4e <getAvailableMoves+0x3f6>
            {
                if(mat[i][j-1] == oppositePlayer)
 800cdf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdf4:	3b01      	subs	r3, #1
 800cdf6:	492f      	ldr	r1, [pc, #188]	; (800ceb4 <getAvailableMoves+0x45c>)
 800cdf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cdfa:	00d2      	lsls	r2, r2, #3
 800cdfc:	440a      	add	r2, r1
 800cdfe:	4413      	add	r3, r2
 800ce00:	781b      	ldrb	r3, [r3, #0]
 800ce02:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ce06:	429a      	cmp	r2, r3
 800ce08:	d121      	bne.n	800ce4e <getAvailableMoves+0x3f6>
                {
                	int8_t startI = i;
 800ce0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce0c:	74fb      	strb	r3, [r7, #19]
                	int8_t startJ = j - 1;
 800ce0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce10:	b2db      	uxtb	r3, r3
 800ce12:	3b01      	subs	r3, #1
 800ce14:	b2db      	uxtb	r3, r3
 800ce16:	75fb      	strb	r3, [r7, #23]

                    while ( startJ >= 0)
 800ce18:	e015      	b.n	800ce46 <getAvailableMoves+0x3ee>
                    {
                        if(mat [startI][startJ]==player)
 800ce1a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800ce1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ce22:	4924      	ldr	r1, [pc, #144]	; (800ceb4 <getAvailableMoves+0x45c>)
 800ce24:	00d2      	lsls	r2, r2, #3
 800ce26:	440a      	add	r2, r1
 800ce28:	4413      	add	r3, r2
 800ce2a:	781b      	ldrb	r3, [r3, #0]
 800ce2c:	7bfa      	ldrb	r2, [r7, #15]
 800ce2e:	429a      	cmp	r2, r3
 800ce30:	d103      	bne.n	800ce3a <getAvailableMoves+0x3e2>
                        {
                             positionValid = 1;
 800ce32:	2301      	movs	r3, #1
 800ce34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                             break; // sale del while porque ya sabemos que esta posicion es valida
 800ce38:	e009      	b.n	800ce4e <getAvailableMoves+0x3f6>
                        }
                        startJ--;
 800ce3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ce3e:	b2db      	uxtb	r3, r3
 800ce40:	3b01      	subs	r3, #1
 800ce42:	b2db      	uxtb	r3, r3
 800ce44:	75fb      	strb	r3, [r7, #23]
                    while ( startJ >= 0)
 800ce46:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	dae5      	bge.n	800ce1a <getAvailableMoves+0x3c2>
                    }
                }
            }

            if (positionValid == 1)
 800ce4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ce52:	2b01      	cmp	r3, #1
 800ce54:	d11a      	bne.n	800ce8c <getAvailableMoves+0x434>
            {
                *availablePosition=(i+1)*10+j+1;//almacenar esta posicion que esta disponible, podria utilizar otro puntero para j
 800ce56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce58:	3301      	adds	r3, #1
 800ce5a:	b2db      	uxtb	r3, r3
 800ce5c:	461a      	mov	r2, r3
 800ce5e:	0092      	lsls	r2, r2, #2
 800ce60:	4413      	add	r3, r2
 800ce62:	005b      	lsls	r3, r3, #1
 800ce64:	b2da      	uxtb	r2, r3
 800ce66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce68:	b2db      	uxtb	r3, r3
 800ce6a:	4413      	add	r3, r2
 800ce6c:	b2db      	uxtb	r3, r3
 800ce6e:	3301      	adds	r3, #1
 800ce70:	b2da      	uxtb	r2, r3
 800ce72:	68bb      	ldr	r3, [r7, #8]
 800ce74:	701a      	strb	r2, [r3, #0]
                availablePosition++;//para que la proxima vez que encontraras una posición disponible la almacenaras en el enderezo de memoria
 800ce76:	68bb      	ldr	r3, [r7, #8]
 800ce78:	3301      	adds	r3, #1
 800ce7a:	60bb      	str	r3, [r7, #8]

                (*numAvailablePosition)++;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	781b      	ldrb	r3, [r3, #0]
 800ce80:	3301      	adds	r3, #1
 800ce82:	b2da      	uxtb	r2, r3
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	701a      	strb	r2, [r3, #0]
 800ce88:	e000      	b.n	800ce8c <getAvailableMoves+0x434>
                continue;
 800ce8a:	bf00      	nop
        for(int j=0; j<8; j++)
 800ce8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce8e:	3301      	adds	r3, #1
 800ce90:	627b      	str	r3, [r7, #36]	; 0x24
 800ce92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce94:	2b07      	cmp	r3, #7
 800ce96:	f77f adf9 	ble.w	800ca8c <getAvailableMoves+0x34>
    for(int i=0; i<8; i++)
 800ce9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce9c:	3301      	adds	r3, #1
 800ce9e:	62bb      	str	r3, [r7, #40]	; 0x28
 800cea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cea2:	2b07      	cmp	r3, #7
 800cea4:	f77f adef 	ble.w	800ca86 <getAvailableMoves+0x2e>
            }
        }
    }
}
 800cea8:	bf00      	nop
 800ceaa:	3734      	adds	r7, #52	; 0x34
 800ceac:	46bd      	mov	sp, r7
 800ceae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb2:	4770      	bx	lr
 800ceb4:	200008e8 	.word	0x200008e8

0800ceb8 <insertMove>:


//inserta una posición en el tablero para el jugador, pasada por parámetro(player) si la posición fuera valida
//retorna 0 cuando la posición es invalida, retorna 1 cuando es valida
int insertMove(uint8_t i, uint8_t j, uint8_t player, uint8_t availablePosition[], uint8_t numAvailablePosition)//como necesito de saber las jugadas en el tablero, paso la matrix por parametros
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b084      	sub	sp, #16
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	603b      	str	r3, [r7, #0]
 800cec0:	4603      	mov	r3, r0
 800cec2:	71fb      	strb	r3, [r7, #7]
 800cec4:	460b      	mov	r3, r1
 800cec6:	71bb      	strb	r3, [r7, #6]
 800cec8:	4613      	mov	r3, r2
 800ceca:	717b      	strb	r3, [r7, #5]
	uint8_t n = (i+1)*10+(j+1);
 800cecc:	79fb      	ldrb	r3, [r7, #7]
 800cece:	3301      	adds	r3, #1
 800ced0:	b2db      	uxtb	r3, r3
 800ced2:	461a      	mov	r2, r3
 800ced4:	0092      	lsls	r2, r2, #2
 800ced6:	4413      	add	r3, r2
 800ced8:	005b      	lsls	r3, r3, #1
 800ceda:	b2da      	uxtb	r2, r3
 800cedc:	79bb      	ldrb	r3, [r7, #6]
 800cede:	4413      	add	r3, r2
 800cee0:	b2db      	uxtb	r3, r3
 800cee2:	3301      	adds	r3, #1
 800cee4:	73bb      	strb	r3, [r7, #14]

    for(uint8_t k=0; k<numAvailablePosition; k++)
 800cee6:	2300      	movs	r3, #0
 800cee8:	73fb      	strb	r3, [r7, #15]
 800ceea:	e019      	b.n	800cf20 <insertMove+0x68>
    {
        if(availablePosition[k]==n)//quiero saber si el valor que la persona escribio esta en las posiciones disponibles
 800ceec:	7bfb      	ldrb	r3, [r7, #15]
 800ceee:	683a      	ldr	r2, [r7, #0]
 800cef0:	4413      	add	r3, r2
 800cef2:	781b      	ldrb	r3, [r3, #0]
 800cef4:	7bba      	ldrb	r2, [r7, #14]
 800cef6:	429a      	cmp	r2, r3
 800cef8:	d10f      	bne.n	800cf1a <insertMove+0x62>
        {
            mat[i][j] = player;
 800cefa:	79fa      	ldrb	r2, [r7, #7]
 800cefc:	79bb      	ldrb	r3, [r7, #6]
 800cefe:	490d      	ldr	r1, [pc, #52]	; (800cf34 <insertMove+0x7c>)
 800cf00:	00d2      	lsls	r2, r2, #3
 800cf02:	440a      	add	r2, r1
 800cf04:	4413      	add	r3, r2
 800cf06:	797a      	ldrb	r2, [r7, #5]
 800cf08:	701a      	strb	r2, [r3, #0]
            flip(player, i, j);
 800cf0a:	79ba      	ldrb	r2, [r7, #6]
 800cf0c:	79f9      	ldrb	r1, [r7, #7]
 800cf0e:	797b      	ldrb	r3, [r7, #5]
 800cf10:	4618      	mov	r0, r3
 800cf12:	f7ff faff 	bl	800c514 <flip>
            return 1;
 800cf16:	2301      	movs	r3, #1
 800cf18:	e007      	b.n	800cf2a <insertMove+0x72>
    for(uint8_t k=0; k<numAvailablePosition; k++)
 800cf1a:	7bfb      	ldrb	r3, [r7, #15]
 800cf1c:	3301      	adds	r3, #1
 800cf1e:	73fb      	strb	r3, [r7, #15]
 800cf20:	7bfa      	ldrb	r2, [r7, #15]
 800cf22:	7e3b      	ldrb	r3, [r7, #24]
 800cf24:	429a      	cmp	r2, r3
 800cf26:	d3e1      	bcc.n	800ceec <insertMove+0x34>
        }
    }

    return 0;
 800cf28:	2300      	movs	r3, #0
}
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	3710      	adds	r7, #16
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	bd80      	pop	{r7, pc}
 800cf32:	bf00      	nop
 800cf34:	200008e8 	.word	0x200008e8

0800cf38 <SCB_EnableICache>:
{
 800cf38:	b480      	push	{r7}
 800cf3a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800cf3c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800cf40:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800cf44:	4b0b      	ldr	r3, [pc, #44]	; (800cf74 <SCB_EnableICache+0x3c>)
 800cf46:	2200      	movs	r2, #0
 800cf48:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800cf4c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800cf50:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800cf54:	4b07      	ldr	r3, [pc, #28]	; (800cf74 <SCB_EnableICache+0x3c>)
 800cf56:	695b      	ldr	r3, [r3, #20]
 800cf58:	4a06      	ldr	r2, [pc, #24]	; (800cf74 <SCB_EnableICache+0x3c>)
 800cf5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cf5e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800cf60:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800cf64:	f3bf 8f6f 	isb	sy
}
 800cf68:	bf00      	nop
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf70:	4770      	bx	lr
 800cf72:	bf00      	nop
 800cf74:	e000ed00 	.word	0xe000ed00

0800cf78 <SCB_EnableDCache>:
{
 800cf78:	b480      	push	{r7}
 800cf7a:	b085      	sub	sp, #20
 800cf7c:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800cf7e:	4b1d      	ldr	r3, [pc, #116]	; (800cff4 <SCB_EnableDCache+0x7c>)
 800cf80:	2200      	movs	r2, #0
 800cf82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800cf86:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800cf8a:	4b1a      	ldr	r3, [pc, #104]	; (800cff4 <SCB_EnableDCache+0x7c>)
 800cf8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cf90:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	0b5b      	lsrs	r3, r3, #13
 800cf96:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800cf9a:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	08db      	lsrs	r3, r3, #3
 800cfa0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cfa4:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	015a      	lsls	r2, r3, #5
 800cfaa:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800cfae:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800cfb0:	68ba      	ldr	r2, [r7, #8]
 800cfb2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800cfb4:	490f      	ldr	r1, [pc, #60]	; (800cff4 <SCB_EnableDCache+0x7c>)
 800cfb6:	4313      	orrs	r3, r2
 800cfb8:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 800cfbc:	68bb      	ldr	r3, [r7, #8]
 800cfbe:	1e5a      	subs	r2, r3, #1
 800cfc0:	60ba      	str	r2, [r7, #8]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d1ef      	bne.n	800cfa6 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	1e5a      	subs	r2, r3, #1
 800cfca:	60fa      	str	r2, [r7, #12]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d1e5      	bne.n	800cf9c <SCB_EnableDCache+0x24>
 800cfd0:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800cfd4:	4b07      	ldr	r3, [pc, #28]	; (800cff4 <SCB_EnableDCache+0x7c>)
 800cfd6:	695b      	ldr	r3, [r3, #20]
 800cfd8:	4a06      	ldr	r2, [pc, #24]	; (800cff4 <SCB_EnableDCache+0x7c>)
 800cfda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cfde:	6153      	str	r3, [r2, #20]
 800cfe0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800cfe4:	f3bf 8f6f 	isb	sy
}
 800cfe8:	bf00      	nop
 800cfea:	3714      	adds	r7, #20
 800cfec:	46bd      	mov	sp, r7
 800cfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff2:	4770      	bx	lr
 800cff4:	e000ed00 	.word	0xe000ed00

0800cff8 <HAL_ADC_ConvCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//Interrupción del ADC
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b082      	sub	sp, #8
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
	ADC1value = HAL_ADC_GetValue(hadc);//Va a guardar el valor convertido de ADC, esta int va a ser llamada cuando el ADC termina la conversión
 800d000:	6878      	ldr	r0, [r7, #4]
 800d002:	f7f5 ff12 	bl	8002e2a <HAL_ADC_GetValue>
 800d006:	4603      	mov	r3, r0
 800d008:	461a      	mov	r2, r3
 800d00a:	4b03      	ldr	r3, [pc, #12]	; (800d018 <HAL_ADC_ConvCpltCallback+0x20>)
 800d00c:	601a      	str	r2, [r3, #0]
}
 800d00e:	bf00      	nop
 800d010:	3708      	adds	r7, #8
 800d012:	46bd      	mov	sp, r7
 800d014:	bd80      	pop	{r7, pc}
 800d016:	bf00      	nop
 800d018:	20000b24 	.word	0x20000b24

0800d01c <HAL_GPIO_EXTI_Callback>:

//Interrupción generada por el botón y para el touch screen
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b082      	sub	sp, #8
 800d020:	af00      	add	r7, sp, #0
 800d022:	4603      	mov	r3, r0
 800d024:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0)
 800d026:	88fb      	ldrh	r3, [r7, #6]
 800d028:	2b01      	cmp	r3, #1
 800d02a:	d105      	bne.n	800d038 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		resetPressed = 1;
 800d02c:	4b22      	ldr	r3, [pc, #136]	; (800d0b8 <HAL_GPIO_EXTI_Callback+0x9c>)
 800d02e:	2201      	movs	r2, #1
 800d030:	701a      	strb	r2, [r3, #0]
		programPhase = 1;
 800d032:	4b22      	ldr	r3, [pc, #136]	; (800d0bc <HAL_GPIO_EXTI_Callback+0xa0>)
 800d034:	2201      	movs	r2, #1
 800d036:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_13)
 800d038:	88fb      	ldrh	r3, [r7, #6]
 800d03a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d03e:	d136      	bne.n	800d0ae <HAL_GPIO_EXTI_Callback+0x92>
	{
		  BSP_TS_GetState(&TS_State);//funcion del sistema que va a obtener el estado del TS y lo va a guardar en el TS_State
 800d040:	481f      	ldr	r0, [pc, #124]	; (800d0c0 <HAL_GPIO_EXTI_Callback+0xa4>)
 800d042:	f7f5 fad9 	bl	80025f8 <BSP_TS_GetState>

		  if(TS_State.touchDetected >= 1 && alreadyTouched==0)
 800d046:	4b1e      	ldr	r3, [pc, #120]	; (800d0c0 <HAL_GPIO_EXTI_Callback+0xa4>)
 800d048:	781b      	ldrb	r3, [r3, #0]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d028      	beq.n	800d0a0 <HAL_GPIO_EXTI_Callback+0x84>
 800d04e:	4b1d      	ldr	r3, [pc, #116]	; (800d0c4 <HAL_GPIO_EXTI_Callback+0xa8>)
 800d050:	781b      	ldrb	r3, [r3, #0]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d124      	bne.n	800d0a0 <HAL_GPIO_EXTI_Callback+0x84>
		  {
			  alreadyTouched=1;
 800d056:	4b1b      	ldr	r3, [pc, #108]	; (800d0c4 <HAL_GPIO_EXTI_Callback+0xa8>)
 800d058:	2201      	movs	r2, #1
 800d05a:	701a      	strb	r2, [r3, #0]

			  // Lineas=Y; Columnas=X
			  // El tablero solo va estar entre 0 e 480 dividimos por 60 y va estar entre 0 e 7
			  if(TS_State.touchX[0]/60 <= 7)
 800d05c:	4b18      	ldr	r3, [pc, #96]	; (800d0c0 <HAL_GPIO_EXTI_Callback+0xa4>)
 800d05e:	885b      	ldrh	r3, [r3, #2]
 800d060:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800d064:	d213      	bcs.n	800d08e <HAL_GPIO_EXTI_Callback+0x72>
			  {
				  touchedX = TS_State.touchY[0]/60;
 800d066:	4b16      	ldr	r3, [pc, #88]	; (800d0c0 <HAL_GPIO_EXTI_Callback+0xa4>)
 800d068:	88db      	ldrh	r3, [r3, #6]
 800d06a:	4a17      	ldr	r2, [pc, #92]	; (800d0c8 <HAL_GPIO_EXTI_Callback+0xac>)
 800d06c:	fba2 2303 	umull	r2, r3, r2, r3
 800d070:	095b      	lsrs	r3, r3, #5
 800d072:	b29b      	uxth	r3, r3
 800d074:	b2da      	uxtb	r2, r3
 800d076:	4b15      	ldr	r3, [pc, #84]	; (800d0cc <HAL_GPIO_EXTI_Callback+0xb0>)
 800d078:	701a      	strb	r2, [r3, #0]
				  touchedY = TS_State.touchX[0]/60;
 800d07a:	4b11      	ldr	r3, [pc, #68]	; (800d0c0 <HAL_GPIO_EXTI_Callback+0xa4>)
 800d07c:	885b      	ldrh	r3, [r3, #2]
 800d07e:	4a12      	ldr	r2, [pc, #72]	; (800d0c8 <HAL_GPIO_EXTI_Callback+0xac>)
 800d080:	fba2 2303 	umull	r2, r3, r2, r3
 800d084:	095b      	lsrs	r3, r3, #5
 800d086:	b29b      	uxth	r3, r3
 800d088:	b2da      	uxtb	r2, r3
 800d08a:	4b11      	ldr	r3, [pc, #68]	; (800d0d0 <HAL_GPIO_EXTI_Callback+0xb4>)
 800d08c:	701a      	strb	r2, [r3, #0]
			  }
			  //guardamos la posición
			  touchedPosX = TS_State.touchX[0];
 800d08e:	4b0c      	ldr	r3, [pc, #48]	; (800d0c0 <HAL_GPIO_EXTI_Callback+0xa4>)
 800d090:	885a      	ldrh	r2, [r3, #2]
 800d092:	4b10      	ldr	r3, [pc, #64]	; (800d0d4 <HAL_GPIO_EXTI_Callback+0xb8>)
 800d094:	801a      	strh	r2, [r3, #0]
			  touchedPosY = TS_State.touchY[0];
 800d096:	4b0a      	ldr	r3, [pc, #40]	; (800d0c0 <HAL_GPIO_EXTI_Callback+0xa4>)
 800d098:	88da      	ldrh	r2, [r3, #6]
 800d09a:	4b0f      	ldr	r3, [pc, #60]	; (800d0d8 <HAL_GPIO_EXTI_Callback+0xbc>)
 800d09c:	801a      	strh	r2, [r3, #0]
		  {
			  alreadyTouched=0;
		  }
	}

}
 800d09e:	e006      	b.n	800d0ae <HAL_GPIO_EXTI_Callback+0x92>
		  else if(TS_State.touchDetected == 0)
 800d0a0:	4b07      	ldr	r3, [pc, #28]	; (800d0c0 <HAL_GPIO_EXTI_Callback+0xa4>)
 800d0a2:	781b      	ldrb	r3, [r3, #0]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d102      	bne.n	800d0ae <HAL_GPIO_EXTI_Callback+0x92>
			  alreadyTouched=0;
 800d0a8:	4b06      	ldr	r3, [pc, #24]	; (800d0c4 <HAL_GPIO_EXTI_Callback+0xa8>)
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	701a      	strb	r2, [r3, #0]
}
 800d0ae:	bf00      	nop
 800d0b0:	3708      	adds	r7, #8
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	bd80      	pop	{r7, pc}
 800d0b6:	bf00      	nop
 800d0b8:	20000318 	.word	0x20000318
 800d0bc:	20000043 	.word	0x20000043
 800d0c0:	20000b80 	.word	0x20000b80
 800d0c4:	20000310 	.word	0x20000310
 800d0c8:	88888889 	.word	0x88888889
 800d0cc:	20000ae0 	.word	0x20000ae0
 800d0d0:	20000928 	.word	0x20000928
 800d0d4:	2000092a 	.word	0x2000092a
 800d0d8:	2000092c 	.word	0x2000092c

0800d0dc <HAL_TIM_PeriodElapsedCallback>:

//Interrupción de los timers
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d0dc:	b480      	push	{r7}
 800d0de:	b083      	sub	sp, #12
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)//utilizado para saber cuando pasam 2 segundos
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	4a0e      	ldr	r2, [pc, #56]	; (800d124 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800d0ea:	4293      	cmp	r3, r2
 800d0ec:	d103      	bne.n	800d0f6 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		twoSecondsPass = 1;
 800d0ee:	4b0e      	ldr	r3, [pc, #56]	; (800d128 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800d0f0:	2201      	movs	r2, #1
 800d0f2:	701a      	strb	r2, [r3, #0]
	else if(htim->Instance == TIM7)//utilizado para cada segundo
	{
		counterTurn--;
		counterGame++;
	}
}
 800d0f4:	e010      	b.n	800d118 <HAL_TIM_PeriodElapsedCallback+0x3c>
	else if(htim->Instance == TIM7)//utilizado para cada segundo
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	4a0c      	ldr	r2, [pc, #48]	; (800d12c <HAL_TIM_PeriodElapsedCallback+0x50>)
 800d0fc:	4293      	cmp	r3, r2
 800d0fe:	d10b      	bne.n	800d118 <HAL_TIM_PeriodElapsedCallback+0x3c>
		counterTurn--;
 800d100:	4b0b      	ldr	r3, [pc, #44]	; (800d130 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800d102:	781b      	ldrb	r3, [r3, #0]
 800d104:	3b01      	subs	r3, #1
 800d106:	b2da      	uxtb	r2, r3
 800d108:	4b09      	ldr	r3, [pc, #36]	; (800d130 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800d10a:	701a      	strb	r2, [r3, #0]
		counterGame++;
 800d10c:	4b09      	ldr	r3, [pc, #36]	; (800d134 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800d10e:	881b      	ldrh	r3, [r3, #0]
 800d110:	3301      	adds	r3, #1
 800d112:	b29a      	uxth	r2, r3
 800d114:	4b07      	ldr	r3, [pc, #28]	; (800d134 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800d116:	801a      	strh	r2, [r3, #0]
}
 800d118:	bf00      	nop
 800d11a:	370c      	adds	r7, #12
 800d11c:	46bd      	mov	sp, r7
 800d11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d122:	4770      	bx	lr
 800d124:	40001000 	.word	0x40001000
 800d128:	20000311 	.word	0x20000311
 800d12c:	40001400 	.word	0x40001400
 800d130:	20000042 	.word	0x20000042
 800d134:	20000316 	.word	0x20000316

0800d138 <insideRectangle>:

//retorna 1 si tocamos dentro del rectangulo y 0 en caso contrario
uint8_t insideRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height)
{
 800d138:	b490      	push	{r4, r7}
 800d13a:	b082      	sub	sp, #8
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	4604      	mov	r4, r0
 800d140:	4608      	mov	r0, r1
 800d142:	4611      	mov	r1, r2
 800d144:	461a      	mov	r2, r3
 800d146:	4623      	mov	r3, r4
 800d148:	80fb      	strh	r3, [r7, #6]
 800d14a:	4603      	mov	r3, r0
 800d14c:	80bb      	strh	r3, [r7, #4]
 800d14e:	460b      	mov	r3, r1
 800d150:	807b      	strh	r3, [r7, #2]
 800d152:	4613      	mov	r3, r2
 800d154:	803b      	strh	r3, [r7, #0]
	if(touchedPosX >= x && touchedPosX <= x+width)
 800d156:	4b11      	ldr	r3, [pc, #68]	; (800d19c <insideRectangle+0x64>)
 800d158:	881b      	ldrh	r3, [r3, #0]
 800d15a:	88fa      	ldrh	r2, [r7, #6]
 800d15c:	429a      	cmp	r2, r3
 800d15e:	d816      	bhi.n	800d18e <insideRectangle+0x56>
 800d160:	4b0e      	ldr	r3, [pc, #56]	; (800d19c <insideRectangle+0x64>)
 800d162:	881b      	ldrh	r3, [r3, #0]
 800d164:	4619      	mov	r1, r3
 800d166:	88fa      	ldrh	r2, [r7, #6]
 800d168:	887b      	ldrh	r3, [r7, #2]
 800d16a:	4413      	add	r3, r2
 800d16c:	4299      	cmp	r1, r3
 800d16e:	dc0e      	bgt.n	800d18e <insideRectangle+0x56>
	{
		if(touchedPosY >= y && touchedPosY <= y+height)
 800d170:	4b0b      	ldr	r3, [pc, #44]	; (800d1a0 <insideRectangle+0x68>)
 800d172:	881b      	ldrh	r3, [r3, #0]
 800d174:	88ba      	ldrh	r2, [r7, #4]
 800d176:	429a      	cmp	r2, r3
 800d178:	d809      	bhi.n	800d18e <insideRectangle+0x56>
 800d17a:	4b09      	ldr	r3, [pc, #36]	; (800d1a0 <insideRectangle+0x68>)
 800d17c:	881b      	ldrh	r3, [r3, #0]
 800d17e:	4619      	mov	r1, r3
 800d180:	88ba      	ldrh	r2, [r7, #4]
 800d182:	883b      	ldrh	r3, [r7, #0]
 800d184:	4413      	add	r3, r2
 800d186:	4299      	cmp	r1, r3
 800d188:	dc01      	bgt.n	800d18e <insideRectangle+0x56>
		{
			return 1;
 800d18a:	2301      	movs	r3, #1
 800d18c:	e000      	b.n	800d190 <insideRectangle+0x58>
		}
	}

	return 0;
 800d18e:	2300      	movs	r3, #0

}
 800d190:	4618      	mov	r0, r3
 800d192:	3708      	adds	r7, #8
 800d194:	46bd      	mov	sp, r7
 800d196:	bc90      	pop	{r4, r7}
 800d198:	4770      	bx	lr
 800d19a:	bf00      	nop
 800d19c:	2000092a 	.word	0x2000092a
 800d1a0:	2000092c 	.word	0x2000092c

0800d1a4 <mainMenu>:

//función del menú de inicio, en ella vemos si el utilizador cargó dentro de algún rectangulo
void mainMenu(void)
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b084      	sub	sp, #16
 800d1a8:	af00      	add	r7, sp, #0
	char tempStr1[10];

	if(insideRectangle(xPlayerGame, yPlayerGame, widthPlayerGame, heightPlayerGame)==1)
 800d1aa:	2346      	movs	r3, #70	; 0x46
 800d1ac:	f240 1227 	movw	r2, #295	; 0x127
 800d1b0:	21b4      	movs	r1, #180	; 0xb4
 800d1b2:	20fa      	movs	r0, #250	; 0xfa
 800d1b4:	f7ff ffc0 	bl	800d138 <insideRectangle>
 800d1b8:	4603      	mov	r3, r0
 800d1ba:	2b01      	cmp	r3, #1
 800d1bc:	d10c      	bne.n	800d1d8 <mainMenu+0x34>
	{
    	BSP_LCD_Clear(LCD_COLOR_WHITE);
 800d1be:	f04f 30ff 	mov.w	r0, #4294967295
 800d1c2:	f7f4 f9d1 	bl	8001568 <BSP_LCD_Clear>

		init_game();
 800d1c6:	f7ff f83d 	bl	800c244 <init_game>
		programPhase=2;
 800d1ca:	4b33      	ldr	r3, [pc, #204]	; (800d298 <mainMenu+0xf4>)
 800d1cc:	2202      	movs	r2, #2
 800d1ce:	701a      	strb	r2, [r3, #0]
		counterGame = 0;
 800d1d0:	4b32      	ldr	r3, [pc, #200]	; (800d29c <mainMenu+0xf8>)
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	801a      	strh	r2, [r3, #0]

		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
		sprintf(tempStr1, "2 PLAYERS");
		BSP_LCD_DisplayStringAt(80, 350, (uint8_t*) tempStr1, RIGHT_MODE);
	}
}
 800d1d6:	e05b      	b.n	800d290 <mainMenu+0xec>
	else if (insideRectangle(x1Player, y1Player, width1Player, height1Player)==1)
 800d1d8:	2341      	movs	r3, #65	; 0x41
 800d1da:	22b9      	movs	r2, #185	; 0xb9
 800d1dc:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800d1e0:	2037      	movs	r0, #55	; 0x37
 800d1e2:	f7ff ffa9 	bl	800d138 <insideRectangle>
 800d1e6:	4603      	mov	r3, r0
 800d1e8:	2b01      	cmp	r3, #1
 800d1ea:	d123      	bne.n	800d234 <mainMenu+0x90>
		numberPlayers=1;
 800d1ec:	4b2c      	ldr	r3, [pc, #176]	; (800d2a0 <mainMenu+0xfc>)
 800d1ee:	2201      	movs	r2, #1
 800d1f0:	701a      	strb	r2, [r3, #0]
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800d1f2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800d1f6:	f7f4 f955 	bl	80014a4 <BSP_LCD_SetTextColor>
		sprintf(tempStr1, "1 PLAYER");
 800d1fa:	1d3b      	adds	r3, r7, #4
 800d1fc:	4a29      	ldr	r2, [pc, #164]	; (800d2a4 <mainMenu+0x100>)
 800d1fe:	ca07      	ldmia	r2, {r0, r1, r2}
 800d200:	c303      	stmia	r3!, {r0, r1}
 800d202:	701a      	strb	r2, [r3, #0]
		BSP_LCD_DisplayStringAt(80, 350, (uint8_t*) tempStr1, LEFT_MODE);
 800d204:	1d3a      	adds	r2, r7, #4
 800d206:	2303      	movs	r3, #3
 800d208:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800d20c:	2050      	movs	r0, #80	; 0x50
 800d20e:	f7f4 fa17 	bl	8001640 <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800d212:	f04f 30ff 	mov.w	r0, #4294967295
 800d216:	f7f4 f945 	bl	80014a4 <BSP_LCD_SetTextColor>
		sprintf(tempStr1, "2 PLAYERS");
 800d21a:	4a23      	ldr	r2, [pc, #140]	; (800d2a8 <mainMenu+0x104>)
 800d21c:	1d3b      	adds	r3, r7, #4
 800d21e:	ca07      	ldmia	r2, {r0, r1, r2}
 800d220:	c303      	stmia	r3!, {r0, r1}
 800d222:	801a      	strh	r2, [r3, #0]
		BSP_LCD_DisplayStringAt(80, 350, (uint8_t*) tempStr1, RIGHT_MODE);
 800d224:	1d3a      	adds	r2, r7, #4
 800d226:	2302      	movs	r3, #2
 800d228:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800d22c:	2050      	movs	r0, #80	; 0x50
 800d22e:	f7f4 fa07 	bl	8001640 <BSP_LCD_DisplayStringAt>
}
 800d232:	e02d      	b.n	800d290 <mainMenu+0xec>
	else if (insideRectangle(x2Players, y2Players, width2Players, height2Players)==1)
 800d234:	2341      	movs	r3, #65	; 0x41
 800d236:	22b9      	movs	r2, #185	; 0xb9
 800d238:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800d23c:	f240 2026 	movw	r0, #550	; 0x226
 800d240:	f7ff ff7a 	bl	800d138 <insideRectangle>
 800d244:	4603      	mov	r3, r0
 800d246:	2b01      	cmp	r3, #1
 800d248:	d122      	bne.n	800d290 <mainMenu+0xec>
		numberPlayers=2;
 800d24a:	4b15      	ldr	r3, [pc, #84]	; (800d2a0 <mainMenu+0xfc>)
 800d24c:	2202      	movs	r2, #2
 800d24e:	701a      	strb	r2, [r3, #0]
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800d250:	f04f 30ff 	mov.w	r0, #4294967295
 800d254:	f7f4 f926 	bl	80014a4 <BSP_LCD_SetTextColor>
		sprintf(tempStr1, "1 PLAYER");
 800d258:	1d3b      	adds	r3, r7, #4
 800d25a:	4a12      	ldr	r2, [pc, #72]	; (800d2a4 <mainMenu+0x100>)
 800d25c:	ca07      	ldmia	r2, {r0, r1, r2}
 800d25e:	c303      	stmia	r3!, {r0, r1}
 800d260:	701a      	strb	r2, [r3, #0]
		BSP_LCD_DisplayStringAt(80, 350, (uint8_t*) tempStr1, LEFT_MODE);
 800d262:	1d3a      	adds	r2, r7, #4
 800d264:	2303      	movs	r3, #3
 800d266:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800d26a:	2050      	movs	r0, #80	; 0x50
 800d26c:	f7f4 f9e8 	bl	8001640 <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800d270:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800d274:	f7f4 f916 	bl	80014a4 <BSP_LCD_SetTextColor>
		sprintf(tempStr1, "2 PLAYERS");
 800d278:	4a0b      	ldr	r2, [pc, #44]	; (800d2a8 <mainMenu+0x104>)
 800d27a:	1d3b      	adds	r3, r7, #4
 800d27c:	ca07      	ldmia	r2, {r0, r1, r2}
 800d27e:	c303      	stmia	r3!, {r0, r1}
 800d280:	801a      	strh	r2, [r3, #0]
		BSP_LCD_DisplayStringAt(80, 350, (uint8_t*) tempStr1, RIGHT_MODE);
 800d282:	1d3a      	adds	r2, r7, #4
 800d284:	2302      	movs	r3, #2
 800d286:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800d28a:	2050      	movs	r0, #80	; 0x50
 800d28c:	f7f4 f9d8 	bl	8001640 <BSP_LCD_DisplayStringAt>
}
 800d290:	bf00      	nop
 800d292:	3710      	adds	r7, #16
 800d294:	46bd      	mov	sp, r7
 800d296:	bd80      	pop	{r7, pc}
 800d298:	20000043 	.word	0x20000043
 800d29c:	20000316 	.word	0x20000316
 800d2a0:	20000041 	.word	0x20000041
 800d2a4:	0800f50c 	.word	0x0800f50c
 800d2a8:	0800f518 	.word	0x0800f518

0800d2ac <printMainMenu>:

//imprime el menú principal
void printMainMenu(void)
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	af00      	add	r7, sp, #0
	BSP_LCD_SetBackColor(backColor);
 800d2b0:	481e      	ldr	r0, [pc, #120]	; (800d32c <printMainMenu+0x80>)
 800d2b2:	f7f4 f90f 	bl	80014d4 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800d2b6:	f04f 30ff 	mov.w	r0, #4294967295
 800d2ba:	f7f4 f8f3 	bl	80014a4 <BSP_LCD_SetTextColor>

    BSP_LCD_DrawBitmap(0, 0, image);
 800d2be:	4a1c      	ldr	r2, [pc, #112]	; (800d330 <printMainMenu+0x84>)
 800d2c0:	2100      	movs	r1, #0
 800d2c2:	2000      	movs	r0, #0
 800d2c4:	f7f4 fbae 	bl	8001a24 <BSP_LCD_DrawBitmap>

	BSP_LCD_DisplayStringAt(0, 10, (uint8_t *)"REVERSI", CENTER_MODE);//funcion quiere uint8_t
 800d2c8:	2301      	movs	r3, #1
 800d2ca:	4a1a      	ldr	r2, [pc, #104]	; (800d334 <printMainMenu+0x88>)
 800d2cc:	210a      	movs	r1, #10
 800d2ce:	2000      	movs	r0, #0
 800d2d0:	f7f4 f9b6 	bl	8001640 <BSP_LCD_DisplayStringAt>

	////////////////////////////////////
	//JUGAR JUEGO

	sprintf(auxStr, "PLAY GAME");
 800d2d4:	4a18      	ldr	r2, [pc, #96]	; (800d338 <printMainMenu+0x8c>)
 800d2d6:	4b19      	ldr	r3, [pc, #100]	; (800d33c <printMainMenu+0x90>)
 800d2d8:	cb03      	ldmia	r3!, {r0, r1}
 800d2da:	6010      	str	r0, [r2, #0]
 800d2dc:	6051      	str	r1, [r2, #4]
 800d2de:	881b      	ldrh	r3, [r3, #0]
 800d2e0:	8113      	strh	r3, [r2, #8]
	BSP_LCD_DisplayStringAt(0, 200, (uint8_t*) auxStr, CENTER_MODE);
 800d2e2:	2301      	movs	r3, #1
 800d2e4:	4a14      	ldr	r2, [pc, #80]	; (800d338 <printMainMenu+0x8c>)
 800d2e6:	21c8      	movs	r1, #200	; 0xc8
 800d2e8:	2000      	movs	r0, #0
 800d2ea:	f7f4 f9a9 	bl	8001640 <BSP_LCD_DisplayStringAt>

	////////////////////////////////////
	//1 JUGADOR

	sprintf(auxStr, "1 PLAYER");
 800d2ee:	4a12      	ldr	r2, [pc, #72]	; (800d338 <printMainMenu+0x8c>)
 800d2f0:	4b13      	ldr	r3, [pc, #76]	; (800d340 <printMainMenu+0x94>)
 800d2f2:	cb03      	ldmia	r3!, {r0, r1}
 800d2f4:	6010      	str	r0, [r2, #0]
 800d2f6:	6051      	str	r1, [r2, #4]
 800d2f8:	781b      	ldrb	r3, [r3, #0]
 800d2fa:	7213      	strb	r3, [r2, #8]
	BSP_LCD_DisplayStringAt(80, 350, (uint8_t*) auxStr, LEFT_MODE);
 800d2fc:	2303      	movs	r3, #3
 800d2fe:	4a0e      	ldr	r2, [pc, #56]	; (800d338 <printMainMenu+0x8c>)
 800d300:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800d304:	2050      	movs	r0, #80	; 0x50
 800d306:	f7f4 f99b 	bl	8001640 <BSP_LCD_DisplayStringAt>

	////////////////////////////////////
	//2 JUGADORES

	sprintf(auxStr, "2 PLAYERS");
 800d30a:	4a0b      	ldr	r2, [pc, #44]	; (800d338 <printMainMenu+0x8c>)
 800d30c:	4b0d      	ldr	r3, [pc, #52]	; (800d344 <printMainMenu+0x98>)
 800d30e:	cb03      	ldmia	r3!, {r0, r1}
 800d310:	6010      	str	r0, [r2, #0]
 800d312:	6051      	str	r1, [r2, #4]
 800d314:	881b      	ldrh	r3, [r3, #0]
 800d316:	8113      	strh	r3, [r2, #8]
	BSP_LCD_DisplayStringAt(80, 350, (uint8_t*) auxStr, RIGHT_MODE);
 800d318:	2302      	movs	r3, #2
 800d31a:	4a07      	ldr	r2, [pc, #28]	; (800d338 <printMainMenu+0x8c>)
 800d31c:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800d320:	2050      	movs	r0, #80	; 0x50
 800d322:	f7f4 f98d 	bl	8001640 <BSP_LCD_DisplayStringAt>
}
 800d326:	bf00      	nop
 800d328:	bd80      	pop	{r7, pc}
 800d32a:	bf00      	nop
 800d32c:	ffac7644 	.word	0xffac7644
 800d330:	080113ac 	.word	0x080113ac
 800d334:	0800f524 	.word	0x0800f524
 800d338:	2000094c 	.word	0x2000094c
 800d33c:	0800f52c 	.word	0x0800f52c
 800d340:	0800f50c 	.word	0x0800f50c
 800d344:	0800f518 	.word	0x0800f518

0800d348 <printTime>:

//función que imprime el tiempo de jugada y el tiempo total
void printTime(void)
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	af00      	add	r7, sp, #0

	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800d34c:	4829      	ldr	r0, [pc, #164]	; (800d3f4 <printTime+0xac>)
 800d34e:	f7f4 f8a9 	bl	80014a4 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800d352:	f04f 30ff 	mov.w	r0, #4294967295
 800d356:	f7f4 f8bd 	bl	80014d4 <BSP_LCD_SetBackColor>

	sprintf(auxStr, "Time remaining: %.2d", counterTurn);
 800d35a:	4b27      	ldr	r3, [pc, #156]	; (800d3f8 <printTime+0xb0>)
 800d35c:	781b      	ldrb	r3, [r3, #0]
 800d35e:	461a      	mov	r2, r3
 800d360:	4926      	ldr	r1, [pc, #152]	; (800d3fc <printTime+0xb4>)
 800d362:	4827      	ldr	r0, [pc, #156]	; (800d400 <printTime+0xb8>)
 800d364:	f001 fc78 	bl	800ec58 <siprintf>
	BSP_LCD_DisplayStringAt(3, LINE(18), (uint8_t*) auxStr, RIGHT_MODE);
 800d368:	f7f4 f8e8 	bl	800153c <BSP_LCD_GetFont>
 800d36c:	4603      	mov	r3, r0
 800d36e:	88db      	ldrh	r3, [r3, #6]
 800d370:	461a      	mov	r2, r3
 800d372:	00d2      	lsls	r2, r2, #3
 800d374:	4413      	add	r3, r2
 800d376:	005b      	lsls	r3, r3, #1
 800d378:	b299      	uxth	r1, r3
 800d37a:	2302      	movs	r3, #2
 800d37c:	4a20      	ldr	r2, [pc, #128]	; (800d400 <printTime+0xb8>)
 800d37e:	2003      	movs	r0, #3
 800d380:	f7f4 f95e 	bl	8001640 <BSP_LCD_DisplayStringAt>

	counterMin = counterGame/60;
 800d384:	4b1f      	ldr	r3, [pc, #124]	; (800d404 <printTime+0xbc>)
 800d386:	881b      	ldrh	r3, [r3, #0]
 800d388:	4a1f      	ldr	r2, [pc, #124]	; (800d408 <printTime+0xc0>)
 800d38a:	fba2 2303 	umull	r2, r3, r2, r3
 800d38e:	095b      	lsrs	r3, r3, #5
 800d390:	b29b      	uxth	r3, r3
 800d392:	b2da      	uxtb	r2, r3
 800d394:	4b1d      	ldr	r3, [pc, #116]	; (800d40c <printTime+0xc4>)
 800d396:	701a      	strb	r2, [r3, #0]

	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800d398:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800d39c:	f7f4 f882 	bl	80014a4 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800d3a0:	f04f 30ff 	mov.w	r0, #4294967295
 800d3a4:	f7f4 f896 	bl	80014d4 <BSP_LCD_SetBackColor>

	sprintf(auxStr, "Total time: %.2d:%.2d", counterMin, counterGame %60);
 800d3a8:	4b18      	ldr	r3, [pc, #96]	; (800d40c <printTime+0xc4>)
 800d3aa:	781b      	ldrb	r3, [r3, #0]
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	4b15      	ldr	r3, [pc, #84]	; (800d404 <printTime+0xbc>)
 800d3b0:	881a      	ldrh	r2, [r3, #0]
 800d3b2:	4b15      	ldr	r3, [pc, #84]	; (800d408 <printTime+0xc0>)
 800d3b4:	fba3 1302 	umull	r1, r3, r3, r2
 800d3b8:	0959      	lsrs	r1, r3, #5
 800d3ba:	460b      	mov	r3, r1
 800d3bc:	011b      	lsls	r3, r3, #4
 800d3be:	1a5b      	subs	r3, r3, r1
 800d3c0:	009b      	lsls	r3, r3, #2
 800d3c2:	1ad3      	subs	r3, r2, r3
 800d3c4:	b29b      	uxth	r3, r3
 800d3c6:	4602      	mov	r2, r0
 800d3c8:	4911      	ldr	r1, [pc, #68]	; (800d410 <printTime+0xc8>)
 800d3ca:	480d      	ldr	r0, [pc, #52]	; (800d400 <printTime+0xb8>)
 800d3cc:	f001 fc44 	bl	800ec58 <siprintf>

	BSP_LCD_DisplayStringAt(10, LINE(11), (uint8_t*) auxStr, RIGHT_MODE);
 800d3d0:	f7f4 f8b4 	bl	800153c <BSP_LCD_GetFont>
 800d3d4:	4603      	mov	r3, r0
 800d3d6:	88db      	ldrh	r3, [r3, #6]
 800d3d8:	461a      	mov	r2, r3
 800d3da:	0092      	lsls	r2, r2, #2
 800d3dc:	441a      	add	r2, r3
 800d3de:	0052      	lsls	r2, r2, #1
 800d3e0:	4413      	add	r3, r2
 800d3e2:	b299      	uxth	r1, r3
 800d3e4:	2302      	movs	r3, #2
 800d3e6:	4a06      	ldr	r2, [pc, #24]	; (800d400 <printTime+0xb8>)
 800d3e8:	200a      	movs	r0, #10
 800d3ea:	f7f4 f929 	bl	8001640 <BSP_LCD_DisplayStringAt>
}
 800d3ee:	bf00      	nop
 800d3f0:	bd80      	pop	{r7, pc}
 800d3f2:	bf00      	nop
 800d3f4:	ffff0000 	.word	0xffff0000
 800d3f8:	20000042 	.word	0x20000042
 800d3fc:	0800f538 	.word	0x0800f538
 800d400:	2000094c 	.word	0x2000094c
 800d404:	20000316 	.word	0x20000316
 800d408:	88888889 	.word	0x88888889
 800d40c:	20000314 	.word	0x20000314
 800d410:	0800f550 	.word	0x0800f550

0800d414 <printTemperature>:

void printTemperature(void)
{
 800d414:	b580      	push	{r7, lr}
 800d416:	b082      	sub	sp, #8
 800d418:	af00      	add	r7, sp, #0
	int temperature;

	if(twoSecondsPass == 1)
 800d41a:	4b20      	ldr	r3, [pc, #128]	; (800d49c <printTemperature+0x88>)
 800d41c:	781b      	ldrb	r3, [r3, #0]
 800d41e:	2b01      	cmp	r3, #1
 800d420:	d137      	bne.n	800d492 <printTemperature+0x7e>
    {
	    temperature = ((((ADC1value * VREF)/MAX_CONVERTED_VALUE) - VSENS_AT_AMBIENT_TEMP) * 10 / AVG_SLOPE) + AMBIENT_TEMP;//convierte el valor de ADC para temperatura y lo guarda
 800d422:	4b1f      	ldr	r3, [pc, #124]	; (800d4a0 <printTemperature+0x8c>)
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	f640 42e4 	movw	r2, #3300	; 0xce4
 800d42a:	fb02 f303 	mul.w	r3, r2, r3
 800d42e:	4a1d      	ldr	r2, [pc, #116]	; (800d4a4 <printTemperature+0x90>)
 800d430:	fb82 1203 	smull	r1, r2, r2, r3
 800d434:	441a      	add	r2, r3
 800d436:	12d2      	asrs	r2, r2, #11
 800d438:	17db      	asrs	r3, r3, #31
 800d43a:	1ad3      	subs	r3, r2, r3
 800d43c:	f5a3 723e 	sub.w	r2, r3, #760	; 0x2f8
 800d440:	4613      	mov	r3, r2
 800d442:	009b      	lsls	r3, r3, #2
 800d444:	4413      	add	r3, r2
 800d446:	005b      	lsls	r3, r3, #1
 800d448:	4a17      	ldr	r2, [pc, #92]	; (800d4a8 <printTemperature+0x94>)
 800d44a:	fb82 1203 	smull	r1, r2, r2, r3
 800d44e:	10d2      	asrs	r2, r2, #3
 800d450:	17db      	asrs	r3, r3, #31
 800d452:	1ad3      	subs	r3, r2, r3
 800d454:	3319      	adds	r3, #25
 800d456:	607b      	str	r3, [r7, #4]

	    // Display temperature on the lcd

	    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800d458:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800d45c:	f7f4 f822 	bl	80014a4 <BSP_LCD_SetTextColor>
	    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800d460:	f04f 30ff 	mov.w	r0, #4294967295
 800d464:	f7f4 f836 	bl	80014d4 <BSP_LCD_SetBackColor>

    	sprintf(auxStr, "Temperature %d C", temperature);
 800d468:	687a      	ldr	r2, [r7, #4]
 800d46a:	4910      	ldr	r1, [pc, #64]	; (800d4ac <printTemperature+0x98>)
 800d46c:	4810      	ldr	r0, [pc, #64]	; (800d4b0 <printTemperature+0x9c>)
 800d46e:	f001 fbf3 	bl	800ec58 <siprintf>

	    BSP_LCD_DisplayStringAt(20, LINE(3), (uint8_t*) auxStr, RIGHT_MODE);
 800d472:	f7f4 f863 	bl	800153c <BSP_LCD_GetFont>
 800d476:	4603      	mov	r3, r0
 800d478:	88db      	ldrh	r3, [r3, #6]
 800d47a:	461a      	mov	r2, r3
 800d47c:	0052      	lsls	r2, r2, #1
 800d47e:	4413      	add	r3, r2
 800d480:	b299      	uxth	r1, r3
 800d482:	2302      	movs	r3, #2
 800d484:	4a0a      	ldr	r2, [pc, #40]	; (800d4b0 <printTemperature+0x9c>)
 800d486:	2014      	movs	r0, #20
 800d488:	f7f4 f8da 	bl	8001640 <BSP_LCD_DisplayStringAt>

	    twoSecondsPass = 0;
 800d48c:	4b03      	ldr	r3, [pc, #12]	; (800d49c <printTemperature+0x88>)
 800d48e:	2200      	movs	r2, #0
 800d490:	701a      	strb	r2, [r3, #0]
    }
}
 800d492:	bf00      	nop
 800d494:	3708      	adds	r7, #8
 800d496:	46bd      	mov	sp, r7
 800d498:	bd80      	pop	{r7, pc}
 800d49a:	bf00      	nop
 800d49c:	20000311 	.word	0x20000311
 800d4a0:	20000b24 	.word	0x20000b24
 800d4a4:	80080081 	.word	0x80080081
 800d4a8:	51eb851f 	.word	0x51eb851f
 800d4ac:	0800f568 	.word	0x0800f568
 800d4b0:	2000094c 	.word	0x2000094c

0800d4b4 <mainCycle>:

//función importante del programa donde pasa todo el juego
uint8_t mainCycle(void)
{
 800d4b4:	b590      	push	{r4, r7, lr}
 800d4b6:	b095      	sub	sp, #84	; 0x54
 800d4b8:	af02      	add	r7, sp, #8
    uint8_t availablePosition[8*8], numAvailablePosition;

	////////////////////////////
	// Player 1

	uint8_t validPosition = 0;
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	getAvailableMoves(1, availablePosition, &numAvailablePosition);
 800d4c0:	1cfa      	adds	r2, r7, #3
 800d4c2:	1d3b      	adds	r3, r7, #4
 800d4c4:	4619      	mov	r1, r3
 800d4c6:	2001      	movs	r0, #1
 800d4c8:	f7ff fac6 	bl	800ca58 <getAvailableMoves>

	if(numAvailablePosition == 0)
 800d4cc:	78fb      	ldrb	r3, [r7, #3]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d101      	bne.n	800d4d6 <mainCycle+0x22>
	{
		return 0;// 0 significa que no hay posiciones disponebles
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	e0db      	b.n	800d68e <mainCycle+0x1da>
	}

	sprintf(auxStr, "Player 1 Turn");
 800d4d6:	4a70      	ldr	r2, [pc, #448]	; (800d698 <mainCycle+0x1e4>)
 800d4d8:	4b70      	ldr	r3, [pc, #448]	; (800d69c <mainCycle+0x1e8>)
 800d4da:	4614      	mov	r4, r2
 800d4dc:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d4de:	6020      	str	r0, [r4, #0]
 800d4e0:	6061      	str	r1, [r4, #4]
 800d4e2:	60a2      	str	r2, [r4, #8]
 800d4e4:	881b      	ldrh	r3, [r3, #0]
 800d4e6:	81a3      	strh	r3, [r4, #12]
	BSP_LCD_DisplayStringAt(45, LINE(17), (uint8_t*) auxStr, RIGHT_MODE);
 800d4e8:	f7f4 f828 	bl	800153c <BSP_LCD_GetFont>
 800d4ec:	4603      	mov	r3, r0
 800d4ee:	88db      	ldrh	r3, [r3, #6]
 800d4f0:	461a      	mov	r2, r3
 800d4f2:	0112      	lsls	r2, r2, #4
 800d4f4:	4413      	add	r3, r2
 800d4f6:	b299      	uxth	r1, r3
 800d4f8:	2302      	movs	r3, #2
 800d4fa:	4a67      	ldr	r2, [pc, #412]	; (800d698 <mainCycle+0x1e4>)
 800d4fc:	202d      	movs	r0, #45	; 0x2d
 800d4fe:	f7f4 f89f 	bl	8001640 <BSP_LCD_DisplayStringAt>
	counterTurn = 20;
 800d502:	4b67      	ldr	r3, [pc, #412]	; (800d6a0 <mainCycle+0x1ec>)
 800d504:	2214      	movs	r2, #20
 800d506:	701a      	strb	r2, [r3, #0]

	while (validPosition == 0)//mientras la posicion del usuario no fuera valido permanece en el while
 800d508:	e02f      	b.n	800d56a <mainCycle+0xb6>
	{
		printTime();
 800d50a:	f7ff ff1d 	bl	800d348 <printTime>
		printTemperature();
 800d50e:	f7ff ff81 	bl	800d414 <printTemperature>

		if(counterTurn == 0)
 800d512:	4b63      	ldr	r3, [pc, #396]	; (800d6a0 <mainCycle+0x1ec>)
 800d514:	781b      	ldrb	r3, [r3, #0]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d10b      	bne.n	800d532 <mainCycle+0x7e>
		{
			passCounter1++;
 800d51a:	4b62      	ldr	r3, [pc, #392]	; (800d6a4 <mainCycle+0x1f0>)
 800d51c:	781b      	ldrb	r3, [r3, #0]
 800d51e:	3301      	adds	r3, #1
 800d520:	b2da      	uxtb	r2, r3
 800d522:	4b60      	ldr	r3, [pc, #384]	; (800d6a4 <mainCycle+0x1f0>)
 800d524:	701a      	strb	r2, [r3, #0]

			if(passCounter1 == 3)
 800d526:	4b5f      	ldr	r3, [pc, #380]	; (800d6a4 <mainCycle+0x1f0>)
 800d528:	781b      	ldrb	r3, [r3, #0]
 800d52a:	2b03      	cmp	r3, #3
 800d52c:	d122      	bne.n	800d574 <mainCycle+0xc0>
			{
				return 1;//para ser diferente a 0, sale debido a que ya pasó 3 turnos
 800d52e:	2301      	movs	r3, #1
 800d530:	e0ad      	b.n	800d68e <mainCycle+0x1da>
			}

			break;//cuando pasa un turno sale del ciclo while para continuar para el jugador 2
		}

		if(resetPressed == 1)//en caso de presionar el boton del reset sale de la función
 800d532:	4b5d      	ldr	r3, [pc, #372]	; (800d6a8 <mainCycle+0x1f4>)
 800d534:	781b      	ldrb	r3, [r3, #0]
 800d536:	2b01      	cmp	r3, #1
 800d538:	d101      	bne.n	800d53e <mainCycle+0x8a>
		{
			return 1;
 800d53a:	2301      	movs	r3, #1
 800d53c:	e0a7      	b.n	800d68e <mainCycle+0x1da>
		}

		// VER POSICION EN LA TOUCH SCREEN
		playeri = touchedX;//ahora son lineas, cambiamos arriba
 800d53e:	4b5b      	ldr	r3, [pc, #364]	; (800d6ac <mainCycle+0x1f8>)
 800d540:	781b      	ldrb	r3, [r3, #0]
 800d542:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		playerj = touchedY;//columnas
 800d546:	4b5a      	ldr	r3, [pc, #360]	; (800d6b0 <mainCycle+0x1fc>)
 800d548:	781b      	ldrb	r3, [r3, #0]
 800d54a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

		validPosition = insertMove(playeri, playerj, 1, availablePosition, numAvailablePosition);//si consigue insertar validPosition es 1, en caso contrario es 0
 800d54e:	78fb      	ldrb	r3, [r7, #3]
 800d550:	1d3a      	adds	r2, r7, #4
 800d552:	f897 1046 	ldrb.w	r1, [r7, #70]	; 0x46
 800d556:	f897 0047 	ldrb.w	r0, [r7, #71]	; 0x47
 800d55a:	9300      	str	r3, [sp, #0]
 800d55c:	4613      	mov	r3, r2
 800d55e:	2201      	movs	r2, #1
 800d560:	f7ff fcaa 	bl	800ceb8 <insertMove>
 800d564:	4603      	mov	r3, r0
 800d566:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	while (validPosition == 0)//mientras la posicion del usuario no fuera valido permanece en el while
 800d56a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d0cb      	beq.n	800d50a <mainCycle+0x56>
 800d572:	e000      	b.n	800d576 <mainCycle+0xc2>
			break;//cuando pasa un turno sale del ciclo while para continuar para el jugador 2
 800d574:	bf00      	nop
	}

	printInfo();
 800d576:	f7fe fefd 	bl	800c374 <printInfo>

	printBoard();//vuelve a imprimir el tablero
 800d57a:	f7fe fe9d 	bl	800c2b8 <printBoard>


	////////////////////////////
	// Player 2

	validPosition = 0;
 800d57e:	2300      	movs	r3, #0
 800d580:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	counterTurn = 20;
 800d584:	4b46      	ldr	r3, [pc, #280]	; (800d6a0 <mainCycle+0x1ec>)
 800d586:	2214      	movs	r2, #20
 800d588:	701a      	strb	r2, [r3, #0]
	getAvailableMoves(2, availablePosition, &numAvailablePosition);
 800d58a:	1cfa      	adds	r2, r7, #3
 800d58c:	1d3b      	adds	r3, r7, #4
 800d58e:	4619      	mov	r1, r3
 800d590:	2002      	movs	r0, #2
 800d592:	f7ff fa61 	bl	800ca58 <getAvailableMoves>

	if(numAvailablePosition == 0)
 800d596:	78fb      	ldrb	r3, [r7, #3]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d101      	bne.n	800d5a0 <mainCycle+0xec>
	{
		return 0;
 800d59c:	2300      	movs	r3, #0
 800d59e:	e076      	b.n	800d68e <mainCycle+0x1da>
	}

	sprintf(auxStr, "Player 2 Turn");
 800d5a0:	4a3d      	ldr	r2, [pc, #244]	; (800d698 <mainCycle+0x1e4>)
 800d5a2:	4b44      	ldr	r3, [pc, #272]	; (800d6b4 <mainCycle+0x200>)
 800d5a4:	4614      	mov	r4, r2
 800d5a6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d5a8:	6020      	str	r0, [r4, #0]
 800d5aa:	6061      	str	r1, [r4, #4]
 800d5ac:	60a2      	str	r2, [r4, #8]
 800d5ae:	881b      	ldrh	r3, [r3, #0]
 800d5b0:	81a3      	strh	r3, [r4, #12]
	BSP_LCD_DisplayStringAt(45, LINE(17), (uint8_t*) auxStr, RIGHT_MODE);
 800d5b2:	f7f3 ffc3 	bl	800153c <BSP_LCD_GetFont>
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	88db      	ldrh	r3, [r3, #6]
 800d5ba:	461a      	mov	r2, r3
 800d5bc:	0112      	lsls	r2, r2, #4
 800d5be:	4413      	add	r3, r2
 800d5c0:	b299      	uxth	r1, r3
 800d5c2:	2302      	movs	r3, #2
 800d5c4:	4a34      	ldr	r2, [pc, #208]	; (800d698 <mainCycle+0x1e4>)
 800d5c6:	202d      	movs	r0, #45	; 0x2d
 800d5c8:	f7f4 f83a 	bl	8001640 <BSP_LCD_DisplayStringAt>

	while (validPosition == 0)
 800d5cc:	e054      	b.n	800d678 <mainCycle+0x1c4>
	{
		printTime();
 800d5ce:	f7ff febb 	bl	800d348 <printTime>
		printTemperature();
 800d5d2:	f7ff ff1f 	bl	800d414 <printTemperature>

		if(counterTurn == 0)
 800d5d6:	4b32      	ldr	r3, [pc, #200]	; (800d6a0 <mainCycle+0x1ec>)
 800d5d8:	781b      	ldrb	r3, [r3, #0]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d10b      	bne.n	800d5f6 <mainCycle+0x142>
		{
			passCounter2++;
 800d5de:	4b36      	ldr	r3, [pc, #216]	; (800d6b8 <mainCycle+0x204>)
 800d5e0:	781b      	ldrb	r3, [r3, #0]
 800d5e2:	3301      	adds	r3, #1
 800d5e4:	b2da      	uxtb	r2, r3
 800d5e6:	4b34      	ldr	r3, [pc, #208]	; (800d6b8 <mainCycle+0x204>)
 800d5e8:	701a      	strb	r2, [r3, #0]

			if(passCounter2 == 3)
 800d5ea:	4b33      	ldr	r3, [pc, #204]	; (800d6b8 <mainCycle+0x204>)
 800d5ec:	781b      	ldrb	r3, [r3, #0]
 800d5ee:	2b03      	cmp	r3, #3
 800d5f0:	d147      	bne.n	800d682 <mainCycle+0x1ce>
			{
				return 1;
 800d5f2:	2301      	movs	r3, #1
 800d5f4:	e04b      	b.n	800d68e <mainCycle+0x1da>
			}

			break;
		}

		if(resetPressed == 1)
 800d5f6:	4b2c      	ldr	r3, [pc, #176]	; (800d6a8 <mainCycle+0x1f4>)
 800d5f8:	781b      	ldrb	r3, [r3, #0]
 800d5fa:	2b01      	cmp	r3, #1
 800d5fc:	d101      	bne.n	800d602 <mainCycle+0x14e>
		{
			return 1;
 800d5fe:	2301      	movs	r3, #1
 800d600:	e045      	b.n	800d68e <mainCycle+0x1da>
		}

		if(numberPlayers == 2)
 800d602:	4b2e      	ldr	r3, [pc, #184]	; (800d6bc <mainCycle+0x208>)
 800d604:	781b      	ldrb	r3, [r3, #0]
 800d606:	2b02      	cmp	r3, #2
 800d608:	d108      	bne.n	800d61c <mainCycle+0x168>
		{
			playeri = touchedX;
 800d60a:	4b28      	ldr	r3, [pc, #160]	; (800d6ac <mainCycle+0x1f8>)
 800d60c:	781b      	ldrb	r3, [r3, #0]
 800d60e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			playerj = touchedY;
 800d612:	4b27      	ldr	r3, [pc, #156]	; (800d6b0 <mainCycle+0x1fc>)
 800d614:	781b      	ldrb	r3, [r3, #0]
 800d616:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800d61a:	e01f      	b.n	800d65c <mainCycle+0x1a8>
		}
		else // AI player
		{
			HAL_Delay(1000);
 800d61c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d620:	f7f5 f992 	bl	8002948 <HAL_Delay>
			uint8_t selectedPosition = availablePosition[0];
 800d624:	793b      	ldrb	r3, [r7, #4]
 800d626:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

			playeri = (selectedPosition / 10) - 1;//la función insertMove requiere los parametros separados
 800d62a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800d62e:	4a24      	ldr	r2, [pc, #144]	; (800d6c0 <mainCycle+0x20c>)
 800d630:	fba2 2303 	umull	r2, r3, r2, r3
 800d634:	08db      	lsrs	r3, r3, #3
 800d636:	b2db      	uxtb	r3, r3
 800d638:	3b01      	subs	r3, #1
 800d63a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			playerj = (selectedPosition % 10) - 1;
 800d63e:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 800d642:	4b1f      	ldr	r3, [pc, #124]	; (800d6c0 <mainCycle+0x20c>)
 800d644:	fba3 1302 	umull	r1, r3, r3, r2
 800d648:	08d9      	lsrs	r1, r3, #3
 800d64a:	460b      	mov	r3, r1
 800d64c:	009b      	lsls	r3, r3, #2
 800d64e:	440b      	add	r3, r1
 800d650:	005b      	lsls	r3, r3, #1
 800d652:	1ad3      	subs	r3, r2, r3
 800d654:	b2db      	uxtb	r3, r3
 800d656:	3b01      	subs	r3, #1
 800d658:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

		}

		validPosition = insertMove(playeri, playerj, 2, availablePosition, numAvailablePosition);
 800d65c:	78fb      	ldrb	r3, [r7, #3]
 800d65e:	1d3a      	adds	r2, r7, #4
 800d660:	f897 1046 	ldrb.w	r1, [r7, #70]	; 0x46
 800d664:	f897 0047 	ldrb.w	r0, [r7, #71]	; 0x47
 800d668:	9300      	str	r3, [sp, #0]
 800d66a:	4613      	mov	r3, r2
 800d66c:	2202      	movs	r2, #2
 800d66e:	f7ff fc23 	bl	800ceb8 <insertMove>
 800d672:	4603      	mov	r3, r0
 800d674:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	while (validPosition == 0)
 800d678:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d0a6      	beq.n	800d5ce <mainCycle+0x11a>
 800d680:	e000      	b.n	800d684 <mainCycle+0x1d0>
			break;
 800d682:	bf00      	nop
	}

	printInfo();
 800d684:	f7fe fe76 	bl	800c374 <printInfo>
	printBoard();//vuelve a imprimir el tablero
 800d688:	f7fe fe16 	bl	800c2b8 <printBoard>

	return numAvailablePosition;
 800d68c:	78fb      	ldrb	r3, [r7, #3]
}
 800d68e:	4618      	mov	r0, r3
 800d690:	374c      	adds	r7, #76	; 0x4c
 800d692:	46bd      	mov	sp, r7
 800d694:	bd90      	pop	{r4, r7, pc}
 800d696:	bf00      	nop
 800d698:	2000094c 	.word	0x2000094c
 800d69c:	0800f57c 	.word	0x0800f57c
 800d6a0:	20000042 	.word	0x20000042
 800d6a4:	20000312 	.word	0x20000312
 800d6a8:	20000318 	.word	0x20000318
 800d6ac:	20000ae0 	.word	0x20000ae0
 800d6b0:	20000928 	.word	0x20000928
 800d6b4:	0800f58c 	.word	0x0800f58c
 800d6b8:	20000313 	.word	0x20000313
 800d6bc:	20000041 	.word	0x20000041
 800d6c0:	cccccccd 	.word	0xcccccccd

0800d6c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800d6c4:	b5b0      	push	{r4, r5, r7, lr}
 800d6c6:	b082      	sub	sp, #8
 800d6c8:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */
  

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800d6ca:	f7ff fc35 	bl	800cf38 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800d6ce:	f7ff fc53 	bl	800cf78 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800d6d2:	f7f5 f8db 	bl	800288c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800d6d6:	f000 f9cb 	bl	800da70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800d6da:	f000 fd7b 	bl	800e1d4 <MX_GPIO_Init>
  MX_DMA2D_Init();
 800d6de:	f000 fabd 	bl	800dc5c <MX_DMA2D_Init>
  MX_FMC_Init();
 800d6e2:	f000 fd29 	bl	800e138 <MX_FMC_Init>
  MX_LTDC_Init();
 800d6e6:	f000 fbe5 	bl	800deb4 <MX_LTDC_Init>
  MX_ADC1_Init();
 800d6ea:	f000 fa63 	bl	800dbb4 <MX_ADC1_Init>
  MX_DSIHOST_DSI_Init();
 800d6ee:	f000 faed 	bl	800dccc <MX_DSIHOST_DSI_Init>
  MX_TIM6_Init();
 800d6f2:	f000 fcb1 	bl	800e058 <MX_TIM6_Init>
  MX_TIM7_Init();
 800d6f6:	f000 fce7 	bl	800e0c8 <MX_TIM7_Init>
  MX_SDMMC2_SD_Init();
 800d6fa:	f000 fc8d 	bl	800e018 <MX_SDMMC2_SD_Init>
  MX_FATFS_Init();
 800d6fe:	f7fe fcfb 	bl	800c0f8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  LCD_Config();
 800d702:	f000 fe21 	bl	800e348 <LCD_Config>
  HAL_ADC_Start_IT(&hadc1);
 800d706:	48c1      	ldr	r0, [pc, #772]	; (800da0c <main+0x348>)
 800d708:	f7f5 f984 	bl	8002a14 <HAL_ADC_Start_IT>
  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 800d70c:	f7f3 fe52 	bl	80013b4 <BSP_LCD_GetXSize>
 800d710:	4603      	mov	r3, r0
 800d712:	b29c      	uxth	r4, r3
 800d714:	f7f3 fe5a 	bl	80013cc <BSP_LCD_GetYSize>
 800d718:	4603      	mov	r3, r0
 800d71a:	b29b      	uxth	r3, r3
 800d71c:	4619      	mov	r1, r3
 800d71e:	4620      	mov	r0, r4
 800d720:	f7f4 fed8 	bl	80024d4 <BSP_TS_Init>
  BSP_TS_ITConfig();
 800d724:	f7f4 ff36 	bl	8002594 <BSP_TS_ITConfig>
  HAL_TIM_Base_Start_IT(&htim6);
 800d728:	48b9      	ldr	r0, [pc, #740]	; (800da10 <main+0x34c>)
 800d72a:	f7fb f98b 	bl	8008a44 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 800d72e:	48b9      	ldr	r0, [pc, #740]	; (800da14 <main+0x350>)
 800d730:	f7fb f988 	bl	8008a44 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(programPhase == 1)
 800d734:	4bb8      	ldr	r3, [pc, #736]	; (800da18 <main+0x354>)
 800d736:	781b      	ldrb	r3, [r3, #0]
 800d738:	2b01      	cmp	r3, #1
 800d73a:	d10b      	bne.n	800d754 <main+0x90>
	  {
		  if(resetPressed == 1)
 800d73c:	4bb7      	ldr	r3, [pc, #732]	; (800da1c <main+0x358>)
 800d73e:	781b      	ldrb	r3, [r3, #0]
 800d740:	2b01      	cmp	r3, #1
 800d742:	d104      	bne.n	800d74e <main+0x8a>
		  {
			  resetPressed = 0;
 800d744:	4bb5      	ldr	r3, [pc, #724]	; (800da1c <main+0x358>)
 800d746:	2200      	movs	r2, #0
 800d748:	701a      	strb	r2, [r3, #0]
			  printMainMenu();
 800d74a:	f7ff fdaf 	bl	800d2ac <printMainMenu>
		  }

		  mainMenu();//llamamos a esta función para ver si la persona carga en algún sitio
 800d74e:	f7ff fd29 	bl	800d1a4 <mainMenu>
 800d752:	e0bf      	b.n	800d8d4 <main+0x210>
	  }
	  else if(programPhase == 2)
 800d754:	4bb0      	ldr	r3, [pc, #704]	; (800da18 <main+0x354>)
 800d756:	781b      	ldrb	r3, [r3, #0]
 800d758:	2b02      	cmp	r3, #2
 800d75a:	f040 80bb 	bne.w	800d8d4 <main+0x210>
	  {
		  ////////////////////////////////////
		  // TOUCH SCREEN

		  if(mainCycle() == 0)//No más movimientos
 800d75e:	f7ff fea9 	bl	800d4b4 <mainCycle>
 800d762:	4603      	mov	r3, r0
 800d764:	2b00      	cmp	r3, #0
 800d766:	d13e      	bne.n	800d7e6 <main+0x122>
		  {
			  sprintf(auxStr, "GAME OVER!");
 800d768:	4aad      	ldr	r2, [pc, #692]	; (800da20 <main+0x35c>)
 800d76a:	4bae      	ldr	r3, [pc, #696]	; (800da24 <main+0x360>)
 800d76c:	cb03      	ldmia	r3!, {r0, r1}
 800d76e:	6010      	str	r0, [r2, #0]
 800d770:	6051      	str	r1, [r2, #4]
 800d772:	8819      	ldrh	r1, [r3, #0]
 800d774:	789b      	ldrb	r3, [r3, #2]
 800d776:	8111      	strh	r1, [r2, #8]
 800d778:	7293      	strb	r3, [r2, #10]
			  BSP_LCD_DisplayStringAt(65, LINE(14), (uint8_t*) auxStr, RIGHT_MODE);
 800d77a:	f7f3 fedf 	bl	800153c <BSP_LCD_GetFont>
 800d77e:	4603      	mov	r3, r0
 800d780:	88db      	ldrh	r3, [r3, #6]
 800d782:	461a      	mov	r2, r3
 800d784:	00d2      	lsls	r2, r2, #3
 800d786:	1ad3      	subs	r3, r2, r3
 800d788:	005b      	lsls	r3, r3, #1
 800d78a:	b299      	uxth	r1, r3
 800d78c:	2302      	movs	r3, #2
 800d78e:	4aa4      	ldr	r2, [pc, #656]	; (800da20 <main+0x35c>)
 800d790:	2041      	movs	r0, #65	; 0x41
 800d792:	f7f3 ff55 	bl	8001640 <BSP_LCD_DisplayStringAt>

			  countPieces(&player1Counter, &player2Counter);
 800d796:	1d3a      	adds	r2, r7, #4
 800d798:	1d7b      	adds	r3, r7, #5
 800d79a:	4611      	mov	r1, r2
 800d79c:	4618      	mov	r0, r3
 800d79e:	f7fe fe75 	bl	800c48c <countPieces>
			  if(player1Counter > player2Counter)
 800d7a2:	797a      	ldrb	r2, [r7, #5]
 800d7a4:	793b      	ldrb	r3, [r7, #4]
 800d7a6:	429a      	cmp	r2, r3
 800d7a8:	d902      	bls.n	800d7b0 <main+0xec>
			  {
				 winner = 1;
 800d7aa:	2301      	movs	r3, #1
 800d7ac:	71fb      	strb	r3, [r7, #7]
 800d7ae:	e001      	b.n	800d7b4 <main+0xf0>
			  }
			  else
			  {
				 winner= 2;
 800d7b0:	2302      	movs	r3, #2
 800d7b2:	71fb      	strb	r3, [r7, #7]
			  }

			  sprintf(auxStr, "Winner = Player %d", winner);
 800d7b4:	79fb      	ldrb	r3, [r7, #7]
 800d7b6:	461a      	mov	r2, r3
 800d7b8:	499b      	ldr	r1, [pc, #620]	; (800da28 <main+0x364>)
 800d7ba:	4899      	ldr	r0, [pc, #612]	; (800da20 <main+0x35c>)
 800d7bc:	f001 fa4c 	bl	800ec58 <siprintf>
			  BSP_LCD_DisplayStringAt(10, LINE(15), (uint8_t*) auxStr, RIGHT_MODE);
 800d7c0:	f7f3 febc 	bl	800153c <BSP_LCD_GetFont>
 800d7c4:	4603      	mov	r3, r0
 800d7c6:	88db      	ldrh	r3, [r3, #6]
 800d7c8:	461a      	mov	r2, r3
 800d7ca:	0112      	lsls	r2, r2, #4
 800d7cc:	1ad3      	subs	r3, r2, r3
 800d7ce:	b299      	uxth	r1, r3
 800d7d0:	2302      	movs	r3, #2
 800d7d2:	4a93      	ldr	r2, [pc, #588]	; (800da20 <main+0x35c>)
 800d7d4:	200a      	movs	r0, #10
 800d7d6:	f7f3 ff33 	bl	8001640 <BSP_LCD_DisplayStringAt>

			  programPhase=3;
 800d7da:	4b8f      	ldr	r3, [pc, #572]	; (800da18 <main+0x354>)
 800d7dc:	2203      	movs	r2, #3
 800d7de:	701a      	strb	r2, [r3, #0]
			  writeToFile = 1;
 800d7e0:	4b92      	ldr	r3, [pc, #584]	; (800da2c <main+0x368>)
 800d7e2:	2201      	movs	r2, #1
 800d7e4:	701a      	strb	r2, [r3, #0]
		  }

		  if(passCounter1 == 3)
 800d7e6:	4b92      	ldr	r3, [pc, #584]	; (800da30 <main+0x36c>)
 800d7e8:	781b      	ldrb	r3, [r3, #0]
 800d7ea:	2b03      	cmp	r3, #3
 800d7ec:	d137      	bne.n	800d85e <main+0x19a>
		  {
			  sprintf(auxStr, "GAME OVER!");
 800d7ee:	4a8c      	ldr	r2, [pc, #560]	; (800da20 <main+0x35c>)
 800d7f0:	4b8c      	ldr	r3, [pc, #560]	; (800da24 <main+0x360>)
 800d7f2:	cb03      	ldmia	r3!, {r0, r1}
 800d7f4:	6010      	str	r0, [r2, #0]
 800d7f6:	6051      	str	r1, [r2, #4]
 800d7f8:	8819      	ldrh	r1, [r3, #0]
 800d7fa:	789b      	ldrb	r3, [r3, #2]
 800d7fc:	8111      	strh	r1, [r2, #8]
 800d7fe:	7293      	strb	r3, [r2, #10]
			  BSP_LCD_DisplayStringAt(65, LINE(14), (uint8_t*) auxStr, RIGHT_MODE);
 800d800:	f7f3 fe9c 	bl	800153c <BSP_LCD_GetFont>
 800d804:	4603      	mov	r3, r0
 800d806:	88db      	ldrh	r3, [r3, #6]
 800d808:	461a      	mov	r2, r3
 800d80a:	00d2      	lsls	r2, r2, #3
 800d80c:	1ad3      	subs	r3, r2, r3
 800d80e:	005b      	lsls	r3, r3, #1
 800d810:	b299      	uxth	r1, r3
 800d812:	2302      	movs	r3, #2
 800d814:	4a82      	ldr	r2, [pc, #520]	; (800da20 <main+0x35c>)
 800d816:	2041      	movs	r0, #65	; 0x41
 800d818:	f7f3 ff12 	bl	8001640 <BSP_LCD_DisplayStringAt>
			  sprintf(auxStr, "Winner = Player2");
 800d81c:	4a80      	ldr	r2, [pc, #512]	; (800da20 <main+0x35c>)
 800d81e:	4b85      	ldr	r3, [pc, #532]	; (800da34 <main+0x370>)
 800d820:	4615      	mov	r5, r2
 800d822:	461c      	mov	r4, r3
 800d824:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d826:	6028      	str	r0, [r5, #0]
 800d828:	6069      	str	r1, [r5, #4]
 800d82a:	60aa      	str	r2, [r5, #8]
 800d82c:	60eb      	str	r3, [r5, #12]
 800d82e:	7823      	ldrb	r3, [r4, #0]
 800d830:	742b      	strb	r3, [r5, #16]
			  BSP_LCD_DisplayStringAt(10, LINE(15), (uint8_t*) auxStr, RIGHT_MODE);
 800d832:	f7f3 fe83 	bl	800153c <BSP_LCD_GetFont>
 800d836:	4603      	mov	r3, r0
 800d838:	88db      	ldrh	r3, [r3, #6]
 800d83a:	461a      	mov	r2, r3
 800d83c:	0112      	lsls	r2, r2, #4
 800d83e:	1ad3      	subs	r3, r2, r3
 800d840:	b299      	uxth	r1, r3
 800d842:	2302      	movs	r3, #2
 800d844:	4a76      	ldr	r2, [pc, #472]	; (800da20 <main+0x35c>)
 800d846:	200a      	movs	r0, #10
 800d848:	f7f3 fefa 	bl	8001640 <BSP_LCD_DisplayStringAt>

			  winner = 2;
 800d84c:	2302      	movs	r3, #2
 800d84e:	71fb      	strb	r3, [r7, #7]
			  programPhase = 3;
 800d850:	4b71      	ldr	r3, [pc, #452]	; (800da18 <main+0x354>)
 800d852:	2203      	movs	r2, #3
 800d854:	701a      	strb	r2, [r3, #0]
			  writeToFile = 1;
 800d856:	4b75      	ldr	r3, [pc, #468]	; (800da2c <main+0x368>)
 800d858:	2201      	movs	r2, #1
 800d85a:	701a      	strb	r2, [r3, #0]
 800d85c:	e03a      	b.n	800d8d4 <main+0x210>
		  }
		  else if(passCounter2 == 3)
 800d85e:	4b76      	ldr	r3, [pc, #472]	; (800da38 <main+0x374>)
 800d860:	781b      	ldrb	r3, [r3, #0]
 800d862:	2b03      	cmp	r3, #3
 800d864:	d136      	bne.n	800d8d4 <main+0x210>
		  {
			  sprintf(auxStr, "GAME OVER!");
 800d866:	4a6e      	ldr	r2, [pc, #440]	; (800da20 <main+0x35c>)
 800d868:	4b6e      	ldr	r3, [pc, #440]	; (800da24 <main+0x360>)
 800d86a:	cb03      	ldmia	r3!, {r0, r1}
 800d86c:	6010      	str	r0, [r2, #0]
 800d86e:	6051      	str	r1, [r2, #4]
 800d870:	8819      	ldrh	r1, [r3, #0]
 800d872:	789b      	ldrb	r3, [r3, #2]
 800d874:	8111      	strh	r1, [r2, #8]
 800d876:	7293      	strb	r3, [r2, #10]
			  BSP_LCD_DisplayStringAt(65, LINE(14), (uint8_t*) auxStr, RIGHT_MODE);
 800d878:	f7f3 fe60 	bl	800153c <BSP_LCD_GetFont>
 800d87c:	4603      	mov	r3, r0
 800d87e:	88db      	ldrh	r3, [r3, #6]
 800d880:	461a      	mov	r2, r3
 800d882:	00d2      	lsls	r2, r2, #3
 800d884:	1ad3      	subs	r3, r2, r3
 800d886:	005b      	lsls	r3, r3, #1
 800d888:	b299      	uxth	r1, r3
 800d88a:	2302      	movs	r3, #2
 800d88c:	4a64      	ldr	r2, [pc, #400]	; (800da20 <main+0x35c>)
 800d88e:	2041      	movs	r0, #65	; 0x41
 800d890:	f7f3 fed6 	bl	8001640 <BSP_LCD_DisplayStringAt>
			  sprintf(auxStr, "Winner = Player1");
 800d894:	4a62      	ldr	r2, [pc, #392]	; (800da20 <main+0x35c>)
 800d896:	4b69      	ldr	r3, [pc, #420]	; (800da3c <main+0x378>)
 800d898:	4615      	mov	r5, r2
 800d89a:	461c      	mov	r4, r3
 800d89c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d89e:	6028      	str	r0, [r5, #0]
 800d8a0:	6069      	str	r1, [r5, #4]
 800d8a2:	60aa      	str	r2, [r5, #8]
 800d8a4:	60eb      	str	r3, [r5, #12]
 800d8a6:	7823      	ldrb	r3, [r4, #0]
 800d8a8:	742b      	strb	r3, [r5, #16]
			  BSP_LCD_DisplayStringAt(10, LINE(15), (uint8_t*) auxStr, RIGHT_MODE);
 800d8aa:	f7f3 fe47 	bl	800153c <BSP_LCD_GetFont>
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	88db      	ldrh	r3, [r3, #6]
 800d8b2:	461a      	mov	r2, r3
 800d8b4:	0112      	lsls	r2, r2, #4
 800d8b6:	1ad3      	subs	r3, r2, r3
 800d8b8:	b299      	uxth	r1, r3
 800d8ba:	2302      	movs	r3, #2
 800d8bc:	4a58      	ldr	r2, [pc, #352]	; (800da20 <main+0x35c>)
 800d8be:	200a      	movs	r0, #10
 800d8c0:	f7f3 febe 	bl	8001640 <BSP_LCD_DisplayStringAt>

			  winner = 1;
 800d8c4:	2301      	movs	r3, #1
 800d8c6:	71fb      	strb	r3, [r7, #7]
			  programPhase =3;
 800d8c8:	4b53      	ldr	r3, [pc, #332]	; (800da18 <main+0x354>)
 800d8ca:	2203      	movs	r2, #3
 800d8cc:	701a      	strb	r2, [r3, #0]
			  writeToFile = 1;
 800d8ce:	4b57      	ldr	r3, [pc, #348]	; (800da2c <main+0x368>)
 800d8d0:	2201      	movs	r2, #1
 800d8d2:	701a      	strb	r2, [r3, #0]
		  }
	   }

	  if(programPhase==3)
 800d8d4:	4b50      	ldr	r3, [pc, #320]	; (800da18 <main+0x354>)
 800d8d6:	781b      	ldrb	r3, [r3, #0]
 800d8d8:	2b03      	cmp	r3, #3
 800d8da:	f47f af2b 	bne.w	800d734 <main+0x70>
	  {
		  printTemperature();
 800d8de:	f7ff fd99 	bl	800d414 <printTemperature>

		  if(writeToFile == 1)
 800d8e2:	4b52      	ldr	r3, [pc, #328]	; (800da2c <main+0x368>)
 800d8e4:	781b      	ldrb	r3, [r3, #0]
 800d8e6:	2b01      	cmp	r3, #1
 800d8e8:	f47f af24 	bne.w	800d734 <main+0x70>
		  {
			 writeToFile = 0;
 800d8ec:	4b4f      	ldr	r3, [pc, #316]	; (800da2c <main+0x368>)
 800d8ee:	2200      	movs	r2, #0
 800d8f0:	701a      	strb	r2, [r3, #0]
			 if( f_mount (&SDFatFS, SDPath, 0)!=FR_OK)
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	4952      	ldr	r1, [pc, #328]	; (800da40 <main+0x37c>)
 800d8f6:	4853      	ldr	r0, [pc, #332]	; (800da44 <main+0x380>)
 800d8f8:	f7fd feee 	bl	800b6d8 <f_mount>
 800d8fc:	4603      	mov	r3, r0
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d001      	beq.n	800d906 <main+0x242>
			 Error_Handler();
 800d902:	f000 fd3b 	bl	800e37c <Error_Handler>

		     FRESULT res = f_open(&SDFile, "Reversi.txt", FA_CREATE_ALWAYS | FA_WRITE);
 800d906:	220a      	movs	r2, #10
 800d908:	494f      	ldr	r1, [pc, #316]	; (800da48 <main+0x384>)
 800d90a:	4850      	ldr	r0, [pc, #320]	; (800da4c <main+0x388>)
 800d90c:	f7fd ff2a 	bl	800b764 <f_open>
 800d910:	4603      	mov	r3, r0
 800d912:	71bb      	strb	r3, [r7, #6]

		     if(res != FR_OK)
 800d914:	79bb      	ldrb	r3, [r7, #6]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d015      	beq.n	800d946 <main+0x282>
		     {
		     	sprintf(auxStr, "Error: %d", res);
 800d91a:	79bb      	ldrb	r3, [r7, #6]
 800d91c:	461a      	mov	r2, r3
 800d91e:	494c      	ldr	r1, [pc, #304]	; (800da50 <main+0x38c>)
 800d920:	483f      	ldr	r0, [pc, #252]	; (800da20 <main+0x35c>)
 800d922:	f001 f999 	bl	800ec58 <siprintf>

			 BSP_LCD_DisplayStringAt(65, LINE(14), (uint8_t*) auxStr, LEFT_MODE);
 800d926:	f7f3 fe09 	bl	800153c <BSP_LCD_GetFont>
 800d92a:	4603      	mov	r3, r0
 800d92c:	88db      	ldrh	r3, [r3, #6]
 800d92e:	461a      	mov	r2, r3
 800d930:	00d2      	lsls	r2, r2, #3
 800d932:	1ad3      	subs	r3, r2, r3
 800d934:	005b      	lsls	r3, r3, #1
 800d936:	b299      	uxth	r1, r3
 800d938:	2303      	movs	r3, #3
 800d93a:	4a39      	ldr	r2, [pc, #228]	; (800da20 <main+0x35c>)
 800d93c:	2041      	movs	r0, #65	; 0x41
 800d93e:	f7f3 fe7f 	bl	8001640 <BSP_LCD_DisplayStringAt>
			 Error_Handler();
 800d942:	f000 fd1b 	bl	800e37c <Error_Handler>
		     }

		     sprintf(auxStr, "Winner = Player %d\n", winner);
 800d946:	79fb      	ldrb	r3, [r7, #7]
 800d948:	461a      	mov	r2, r3
 800d94a:	4942      	ldr	r1, [pc, #264]	; (800da54 <main+0x390>)
 800d94c:	4834      	ldr	r0, [pc, #208]	; (800da20 <main+0x35c>)
 800d94e:	f001 f983 	bl	800ec58 <siprintf>
		     if(f_write(&SDFile, auxStr, strlen(auxStr), &nBytes) !=FR_OK)
 800d952:	4833      	ldr	r0, [pc, #204]	; (800da20 <main+0x35c>)
 800d954:	f7f2 fc74 	bl	8000240 <strlen>
 800d958:	4602      	mov	r2, r0
 800d95a:	463b      	mov	r3, r7
 800d95c:	4930      	ldr	r1, [pc, #192]	; (800da20 <main+0x35c>)
 800d95e:	483b      	ldr	r0, [pc, #236]	; (800da4c <main+0x388>)
 800d960:	f7fe f8be 	bl	800bae0 <f_write>
 800d964:	4603      	mov	r3, r0
 800d966:	2b00      	cmp	r3, #0
 800d968:	d001      	beq.n	800d96e <main+0x2aa>
			 Error_Handler();
 800d96a:	f000 fd07 	bl	800e37c <Error_Handler>

		     sprintf(auxStr, "Pieces Ply. 1 = %.2d\n", player1Counter);
 800d96e:	797b      	ldrb	r3, [r7, #5]
 800d970:	461a      	mov	r2, r3
 800d972:	4939      	ldr	r1, [pc, #228]	; (800da58 <main+0x394>)
 800d974:	482a      	ldr	r0, [pc, #168]	; (800da20 <main+0x35c>)
 800d976:	f001 f96f 	bl	800ec58 <siprintf>
		     if(f_write(&SDFile, auxStr, strlen(auxStr), &nBytes) !=FR_OK)
 800d97a:	4829      	ldr	r0, [pc, #164]	; (800da20 <main+0x35c>)
 800d97c:	f7f2 fc60 	bl	8000240 <strlen>
 800d980:	4602      	mov	r2, r0
 800d982:	463b      	mov	r3, r7
 800d984:	4926      	ldr	r1, [pc, #152]	; (800da20 <main+0x35c>)
 800d986:	4831      	ldr	r0, [pc, #196]	; (800da4c <main+0x388>)
 800d988:	f7fe f8aa 	bl	800bae0 <f_write>
 800d98c:	4603      	mov	r3, r0
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d001      	beq.n	800d996 <main+0x2d2>
		 	 Error_Handler();
 800d992:	f000 fcf3 	bl	800e37c <Error_Handler>

	    	  sprintf(auxStr, "Pieces Ply. 2 = %.2d\n", player2Counter);
 800d996:	793b      	ldrb	r3, [r7, #4]
 800d998:	461a      	mov	r2, r3
 800d99a:	4930      	ldr	r1, [pc, #192]	; (800da5c <main+0x398>)
 800d99c:	4820      	ldr	r0, [pc, #128]	; (800da20 <main+0x35c>)
 800d99e:	f001 f95b 	bl	800ec58 <siprintf>
	    	  if(f_write(&SDFile, auxStr, strlen(auxStr), &nBytes) !=FR_OK)
 800d9a2:	481f      	ldr	r0, [pc, #124]	; (800da20 <main+0x35c>)
 800d9a4:	f7f2 fc4c 	bl	8000240 <strlen>
 800d9a8:	4602      	mov	r2, r0
 800d9aa:	463b      	mov	r3, r7
 800d9ac:	491c      	ldr	r1, [pc, #112]	; (800da20 <main+0x35c>)
 800d9ae:	4827      	ldr	r0, [pc, #156]	; (800da4c <main+0x388>)
 800d9b0:	f7fe f896 	bl	800bae0 <f_write>
 800d9b4:	4603      	mov	r3, r0
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d001      	beq.n	800d9be <main+0x2fa>
	   		  Error_Handler();
 800d9ba:	f000 fcdf 	bl	800e37c <Error_Handler>

	    	  sprintf(auxStr, "Total time: %.2d:%.2d\n", counterMin, counterGame %60);
 800d9be:	4b28      	ldr	r3, [pc, #160]	; (800da60 <main+0x39c>)
 800d9c0:	781b      	ldrb	r3, [r3, #0]
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	4b27      	ldr	r3, [pc, #156]	; (800da64 <main+0x3a0>)
 800d9c6:	881a      	ldrh	r2, [r3, #0]
 800d9c8:	4b27      	ldr	r3, [pc, #156]	; (800da68 <main+0x3a4>)
 800d9ca:	fba3 1302 	umull	r1, r3, r3, r2
 800d9ce:	0959      	lsrs	r1, r3, #5
 800d9d0:	460b      	mov	r3, r1
 800d9d2:	011b      	lsls	r3, r3, #4
 800d9d4:	1a5b      	subs	r3, r3, r1
 800d9d6:	009b      	lsls	r3, r3, #2
 800d9d8:	1ad3      	subs	r3, r2, r3
 800d9da:	b29b      	uxth	r3, r3
 800d9dc:	4602      	mov	r2, r0
 800d9de:	4923      	ldr	r1, [pc, #140]	; (800da6c <main+0x3a8>)
 800d9e0:	480f      	ldr	r0, [pc, #60]	; (800da20 <main+0x35c>)
 800d9e2:	f001 f939 	bl	800ec58 <siprintf>
		      if(f_write(&SDFile, auxStr, strlen(auxStr), &nBytes) !=FR_OK)
 800d9e6:	480e      	ldr	r0, [pc, #56]	; (800da20 <main+0x35c>)
 800d9e8:	f7f2 fc2a 	bl	8000240 <strlen>
 800d9ec:	4602      	mov	r2, r0
 800d9ee:	463b      	mov	r3, r7
 800d9f0:	490b      	ldr	r1, [pc, #44]	; (800da20 <main+0x35c>)
 800d9f2:	4816      	ldr	r0, [pc, #88]	; (800da4c <main+0x388>)
 800d9f4:	f7fe f874 	bl	800bae0 <f_write>
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d001      	beq.n	800da02 <main+0x33e>
		      Error_Handler();
 800d9fe:	f000 fcbd 	bl	800e37c <Error_Handler>

		      f_close(&SDFile);
 800da02:	4812      	ldr	r0, [pc, #72]	; (800da4c <main+0x388>)
 800da04:	f7fe fa5f 	bl	800bec6 <f_close>
	  if(programPhase == 1)
 800da08:	e694      	b.n	800d734 <main+0x70>
 800da0a:	bf00      	nop
 800da0c:	20000a98 	.word	0x20000a98
 800da10:	20000ae4 	.word	0x20000ae4
 800da14:	20000bc0 	.word	0x20000bc0
 800da18:	20000043 	.word	0x20000043
 800da1c:	20000318 	.word	0x20000318
 800da20:	2000094c 	.word	0x2000094c
 800da24:	0800f59c 	.word	0x0800f59c
 800da28:	0800f5a8 	.word	0x0800f5a8
 800da2c:	20000319 	.word	0x20000319
 800da30:	20000312 	.word	0x20000312
 800da34:	0800f5bc 	.word	0x0800f5bc
 800da38:	20000313 	.word	0x20000313
 800da3c:	0800f5d0 	.word	0x0800f5d0
 800da40:	20000484 	.word	0x20000484
 800da44:	200006b8 	.word	0x200006b8
 800da48:	0800f5e4 	.word	0x0800f5e4
 800da4c:	20000488 	.word	0x20000488
 800da50:	0800f5f0 	.word	0x0800f5f0
 800da54:	0800f5fc 	.word	0x0800f5fc
 800da58:	0800f610 	.word	0x0800f610
 800da5c:	0800f628 	.word	0x0800f628
 800da60:	20000314 	.word	0x20000314
 800da64:	20000316 	.word	0x20000316
 800da68:	88888889 	.word	0x88888889
 800da6c:	0800f640 	.word	0x0800f640

0800da70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b0b8      	sub	sp, #224	; 0xe0
 800da74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800da76:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800da7a:	2234      	movs	r2, #52	; 0x34
 800da7c:	2100      	movs	r1, #0
 800da7e:	4618      	mov	r0, r3
 800da80:	f001 f8e2 	bl	800ec48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800da84:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800da88:	2200      	movs	r2, #0
 800da8a:	601a      	str	r2, [r3, #0]
 800da8c:	605a      	str	r2, [r3, #4]
 800da8e:	609a      	str	r2, [r3, #8]
 800da90:	60da      	str	r2, [r3, #12]
 800da92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800da94:	f107 0308 	add.w	r3, r7, #8
 800da98:	2290      	movs	r2, #144	; 0x90
 800da9a:	2100      	movs	r1, #0
 800da9c:	4618      	mov	r0, r3
 800da9e:	f001 f8d3 	bl	800ec48 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800daa2:	4b41      	ldr	r3, [pc, #260]	; (800dba8 <SystemClock_Config+0x138>)
 800daa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800daa6:	4a40      	ldr	r2, [pc, #256]	; (800dba8 <SystemClock_Config+0x138>)
 800daa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800daac:	6413      	str	r3, [r2, #64]	; 0x40
 800daae:	4b3e      	ldr	r3, [pc, #248]	; (800dba8 <SystemClock_Config+0x138>)
 800dab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dab6:	607b      	str	r3, [r7, #4]
 800dab8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800daba:	4b3c      	ldr	r3, [pc, #240]	; (800dbac <SystemClock_Config+0x13c>)
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	4a3b      	ldr	r2, [pc, #236]	; (800dbac <SystemClock_Config+0x13c>)
 800dac0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800dac4:	6013      	str	r3, [r2, #0]
 800dac6:	4b39      	ldr	r3, [pc, #228]	; (800dbac <SystemClock_Config+0x13c>)
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800dace:	603b      	str	r3, [r7, #0]
 800dad0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800dad2:	2301      	movs	r3, #1
 800dad4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800dad8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800dadc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800dae0:	2302      	movs	r3, #2
 800dae2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800dae6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800daea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 800daee:	2319      	movs	r3, #25
 800daf0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 400;
 800daf4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800daf8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800dafc:	2302      	movs	r3, #2
 800dafe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800db02:	2308      	movs	r3, #8
 800db04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800db08:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800db0c:	4618      	mov	r0, r3
 800db0e:	f7f8 fd3d 	bl	800658c <HAL_RCC_OscConfig>
 800db12:	4603      	mov	r3, r0
 800db14:	2b00      	cmp	r3, #0
 800db16:	d001      	beq.n	800db1c <SystemClock_Config+0xac>
  {
    Error_Handler();
 800db18:	f000 fc30 	bl	800e37c <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800db1c:	f7f8 fce6 	bl	80064ec <HAL_PWREx_EnableOverDrive>
 800db20:	4603      	mov	r3, r0
 800db22:	2b00      	cmp	r3, #0
 800db24:	d001      	beq.n	800db2a <SystemClock_Config+0xba>
  {
    Error_Handler();
 800db26:	f000 fc29 	bl	800e37c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800db2a:	230f      	movs	r3, #15
 800db2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800db30:	2302      	movs	r3, #2
 800db32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800db36:	2300      	movs	r3, #0
 800db38:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800db3c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800db40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800db44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800db48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800db4c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800db50:	2106      	movs	r1, #6
 800db52:	4618      	mov	r0, r3
 800db54:	f7f8 ff8c 	bl	8006a70 <HAL_RCC_ClockConfig>
 800db58:	4603      	mov	r3, r0
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d001      	beq.n	800db62 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800db5e:	f000 fc0d 	bl	800e37c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SDMMC2
 800db62:	4b13      	ldr	r3, [pc, #76]	; (800dbb0 <SystemClock_Config+0x140>)
 800db64:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800db66:	23c0      	movs	r3, #192	; 0xc0
 800db68:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800db6a:	2302      	movs	r3, #2
 800db6c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800db6e:	2302      	movs	r3, #2
 800db70:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 800db72:	2300      	movs	r3, #0
 800db74:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800db76:	2301      	movs	r3, #1
 800db78:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800db7a:	2300      	movs	r3, #0
 800db7c:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800db7e:	2300      	movs	r3, #0
 800db80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc2ClockSelection = RCC_SDMMC2CLKSOURCE_CLK48;
 800db84:	2300      	movs	r3, #0
 800db86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800db8a:	f107 0308 	add.w	r3, r7, #8
 800db8e:	4618      	mov	r0, r3
 800db90:	f7f9 f908 	bl	8006da4 <HAL_RCCEx_PeriphCLKConfig>
 800db94:	4603      	mov	r3, r0
 800db96:	2b00      	cmp	r3, #0
 800db98:	d001      	beq.n	800db9e <SystemClock_Config+0x12e>
  {
    Error_Handler();
 800db9a:	f000 fbef 	bl	800e37c <Error_Handler>
  }
}
 800db9e:	bf00      	nop
 800dba0:	37e0      	adds	r7, #224	; 0xe0
 800dba2:	46bd      	mov	sp, r7
 800dba4:	bd80      	pop	{r7, pc}
 800dba6:	bf00      	nop
 800dba8:	40023800 	.word	0x40023800
 800dbac:	40007000 	.word	0x40007000
 800dbb0:	04200008 	.word	0x04200008

0800dbb4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b084      	sub	sp, #16
 800dbb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800dbba:	463b      	mov	r3, r7
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	601a      	str	r2, [r3, #0]
 800dbc0:	605a      	str	r2, [r3, #4]
 800dbc2:	609a      	str	r2, [r3, #8]
 800dbc4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800dbc6:	4b21      	ldr	r3, [pc, #132]	; (800dc4c <MX_ADC1_Init+0x98>)
 800dbc8:	4a21      	ldr	r2, [pc, #132]	; (800dc50 <MX_ADC1_Init+0x9c>)
 800dbca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800dbcc:	4b1f      	ldr	r3, [pc, #124]	; (800dc4c <MX_ADC1_Init+0x98>)
 800dbce:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800dbd2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800dbd4:	4b1d      	ldr	r3, [pc, #116]	; (800dc4c <MX_ADC1_Init+0x98>)
 800dbd6:	2200      	movs	r2, #0
 800dbd8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800dbda:	4b1c      	ldr	r3, [pc, #112]	; (800dc4c <MX_ADC1_Init+0x98>)
 800dbdc:	2200      	movs	r2, #0
 800dbde:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800dbe0:	4b1a      	ldr	r3, [pc, #104]	; (800dc4c <MX_ADC1_Init+0x98>)
 800dbe2:	2201      	movs	r2, #1
 800dbe4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800dbe6:	4b19      	ldr	r3, [pc, #100]	; (800dc4c <MX_ADC1_Init+0x98>)
 800dbe8:	2200      	movs	r2, #0
 800dbea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800dbee:	4b17      	ldr	r3, [pc, #92]	; (800dc4c <MX_ADC1_Init+0x98>)
 800dbf0:	2200      	movs	r2, #0
 800dbf2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800dbf4:	4b15      	ldr	r3, [pc, #84]	; (800dc4c <MX_ADC1_Init+0x98>)
 800dbf6:	4a17      	ldr	r2, [pc, #92]	; (800dc54 <MX_ADC1_Init+0xa0>)
 800dbf8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800dbfa:	4b14      	ldr	r3, [pc, #80]	; (800dc4c <MX_ADC1_Init+0x98>)
 800dbfc:	2200      	movs	r2, #0
 800dbfe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800dc00:	4b12      	ldr	r3, [pc, #72]	; (800dc4c <MX_ADC1_Init+0x98>)
 800dc02:	2201      	movs	r2, #1
 800dc04:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800dc06:	4b11      	ldr	r3, [pc, #68]	; (800dc4c <MX_ADC1_Init+0x98>)
 800dc08:	2200      	movs	r2, #0
 800dc0a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800dc0e:	4b0f      	ldr	r3, [pc, #60]	; (800dc4c <MX_ADC1_Init+0x98>)
 800dc10:	2201      	movs	r2, #1
 800dc12:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800dc14:	480d      	ldr	r0, [pc, #52]	; (800dc4c <MX_ADC1_Init+0x98>)
 800dc16:	f7f4 feb9 	bl	800298c <HAL_ADC_Init>
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d001      	beq.n	800dc24 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800dc20:	f000 fbac 	bl	800e37c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800dc24:	4b0c      	ldr	r3, [pc, #48]	; (800dc58 <MX_ADC1_Init+0xa4>)
 800dc26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800dc28:	2301      	movs	r3, #1
 800dc2a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800dc2c:	2303      	movs	r3, #3
 800dc2e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800dc30:	463b      	mov	r3, r7
 800dc32:	4619      	mov	r1, r3
 800dc34:	4805      	ldr	r0, [pc, #20]	; (800dc4c <MX_ADC1_Init+0x98>)
 800dc36:	f7f5 f919 	bl	8002e6c <HAL_ADC_ConfigChannel>
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d001      	beq.n	800dc44 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800dc40:	f000 fb9c 	bl	800e37c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800dc44:	bf00      	nop
 800dc46:	3710      	adds	r7, #16
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	bd80      	pop	{r7, pc}
 800dc4c:	20000a98 	.word	0x20000a98
 800dc50:	40012000 	.word	0x40012000
 800dc54:	0f000001 	.word	0x0f000001
 800dc58:	10000012 	.word	0x10000012

0800dc5c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800dc60:	4b18      	ldr	r3, [pc, #96]	; (800dcc4 <MX_DMA2D_Init+0x68>)
 800dc62:	4a19      	ldr	r2, [pc, #100]	; (800dcc8 <MX_DMA2D_Init+0x6c>)
 800dc64:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800dc66:	4b17      	ldr	r3, [pc, #92]	; (800dcc4 <MX_DMA2D_Init+0x68>)
 800dc68:	2200      	movs	r2, #0
 800dc6a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800dc6c:	4b15      	ldr	r3, [pc, #84]	; (800dcc4 <MX_DMA2D_Init+0x68>)
 800dc6e:	2200      	movs	r2, #0
 800dc70:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800dc72:	4b14      	ldr	r3, [pc, #80]	; (800dcc4 <MX_DMA2D_Init+0x68>)
 800dc74:	2200      	movs	r2, #0
 800dc76:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800dc78:	4b12      	ldr	r3, [pc, #72]	; (800dcc4 <MX_DMA2D_Init+0x68>)
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	639a      	str	r2, [r3, #56]	; 0x38
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800dc7e:	4b11      	ldr	r3, [pc, #68]	; (800dcc4 <MX_DMA2D_Init+0x68>)
 800dc80:	2200      	movs	r2, #0
 800dc82:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800dc84:	4b0f      	ldr	r3, [pc, #60]	; (800dcc4 <MX_DMA2D_Init+0x68>)
 800dc86:	2200      	movs	r2, #0
 800dc88:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800dc8a:	4b0e      	ldr	r3, [pc, #56]	; (800dcc4 <MX_DMA2D_Init+0x68>)
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 800dc90:	4b0c      	ldr	r3, [pc, #48]	; (800dcc4 <MX_DMA2D_Init+0x68>)
 800dc92:	2200      	movs	r2, #0
 800dc94:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 800dc96:	4b0b      	ldr	r3, [pc, #44]	; (800dcc4 <MX_DMA2D_Init+0x68>)
 800dc98:	2200      	movs	r2, #0
 800dc9a:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800dc9c:	4809      	ldr	r0, [pc, #36]	; (800dcc4 <MX_DMA2D_Init+0x68>)
 800dc9e:	f7f5 fdeb 	bl	8003878 <HAL_DMA2D_Init>
 800dca2:	4603      	mov	r3, r0
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d001      	beq.n	800dcac <MX_DMA2D_Init+0x50>
  {
    Error_Handler();
 800dca8:	f000 fb68 	bl	800e37c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800dcac:	2101      	movs	r1, #1
 800dcae:	4805      	ldr	r0, [pc, #20]	; (800dcc4 <MX_DMA2D_Init+0x68>)
 800dcb0:	f7f5 ff50 	bl	8003b54 <HAL_DMA2D_ConfigLayer>
 800dcb4:	4603      	mov	r3, r0
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d001      	beq.n	800dcbe <MX_DMA2D_Init+0x62>
  {
    Error_Handler();
 800dcba:	f000 fb5f 	bl	800e37c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800dcbe:	bf00      	nop
 800dcc0:	bd80      	pop	{r7, pc}
 800dcc2:	bf00      	nop
 800dcc4:	20000b28 	.word	0x20000b28
 800dcc8:	4002b000 	.word	0x4002b000

0800dccc <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b0aa      	sub	sp, #168	; 0xa8
 800dcd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 800dcd2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	601a      	str	r2, [r3, #0]
 800dcda:	605a      	str	r2, [r3, #4]
 800dcdc:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 800dcde:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800dce2:	2224      	movs	r2, #36	; 0x24
 800dce4:	2100      	movs	r1, #0
 800dce6:	4618      	mov	r0, r3
 800dce8:	f000 ffae 	bl	800ec48 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 800dcec:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800dcf0:	2200      	movs	r2, #0
 800dcf2:	601a      	str	r2, [r3, #0]
 800dcf4:	605a      	str	r2, [r3, #4]
 800dcf6:	609a      	str	r2, [r3, #8]
 800dcf8:	60da      	str	r2, [r3, #12]
 800dcfa:	611a      	str	r2, [r3, #16]
 800dcfc:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 800dcfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800dd02:	2234      	movs	r2, #52	; 0x34
 800dd04:	2100      	movs	r1, #0
 800dd06:	4618      	mov	r0, r3
 800dd08:	f000 ff9e 	bl	800ec48 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 800dd0c:	463b      	mov	r3, r7
 800dd0e:	222c      	movs	r2, #44	; 0x2c
 800dd10:	2100      	movs	r1, #0
 800dd12:	4618      	mov	r0, r3
 800dd14:	f000 ff98 	bl	800ec48 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 800dd18:	4b64      	ldr	r3, [pc, #400]	; (800deac <MX_DSIHOST_DSI_Init+0x1e0>)
 800dd1a:	4a65      	ldr	r2, [pc, #404]	; (800deb0 <MX_DSIHOST_DSI_Init+0x1e4>)
 800dd1c:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 800dd1e:	4b63      	ldr	r3, [pc, #396]	; (800deac <MX_DSIHOST_DSI_Init+0x1e0>)
 800dd20:	2200      	movs	r2, #0
 800dd22:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 800dd24:	4b61      	ldr	r3, [pc, #388]	; (800deac <MX_DSIHOST_DSI_Init+0x1e0>)
 800dd26:	2204      	movs	r2, #4
 800dd28:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 800dd2a:	4b60      	ldr	r3, [pc, #384]	; (800deac <MX_DSIHOST_DSI_Init+0x1e0>)
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 20;
 800dd30:	2314      	movs	r3, #20
 800dd32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 800dd36:	2301      	movs	r3, #1
 800dd38:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 800dd42:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800dd46:	4619      	mov	r1, r3
 800dd48:	4858      	ldr	r0, [pc, #352]	; (800deac <MX_DSIHOST_DSI_Init+0x1e0>)
 800dd4a:	f7f6 f885 	bl	8003e58 <HAL_DSI_Init>
 800dd4e:	4603      	mov	r3, r0
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d001      	beq.n	800dd58 <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 800dd54:	f000 fb12 	bl	800e37c <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 800dd58:	2301      	movs	r3, #1
 800dd5a:	67bb      	str	r3, [r7, #120]	; 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	67fb      	str	r3, [r7, #124]	; 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 800dd60:	2300      	movs	r3, #0
 800dd62:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 800dd66:	2300      	movs	r3, #0
 800dd68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 800dd72:	2300      	movs	r3, #0
 800dd74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 800dd78:	2300      	movs	r3, #0
 800dd7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 800dd7e:	2300      	movs	r3, #0
 800dd80:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.BTATimeout = 0;
 800dd84:	2300      	movs	r3, #0
 800dd86:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 800dd8a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800dd8e:	4619      	mov	r1, r3
 800dd90:	4846      	ldr	r0, [pc, #280]	; (800deac <MX_DSIHOST_DSI_Init+0x1e0>)
 800dd92:	f7f6 fe9d 	bl	8004ad0 <HAL_DSI_ConfigHostTimeouts>
 800dd96:	4603      	mov	r3, r0
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d001      	beq.n	800dda0 <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 800dd9c:	f000 faee 	bl	800e37c <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 800dda0:	231c      	movs	r3, #28
 800dda2:	663b      	str	r3, [r7, #96]	; 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 800dda4:	2321      	movs	r3, #33	; 0x21
 800dda6:	667b      	str	r3, [r7, #100]	; 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 800dda8:	230f      	movs	r3, #15
 800ddaa:	66bb      	str	r3, [r7, #104]	; 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 800ddac:	2319      	movs	r3, #25
 800ddae:	66fb      	str	r3, [r7, #108]	; 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.StopWaitTime = 0;
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 800ddb8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800ddbc:	4619      	mov	r1, r3
 800ddbe:	483b      	ldr	r0, [pc, #236]	; (800deac <MX_DSIHOST_DSI_Init+0x1e0>)
 800ddc0:	f7f6 fe1c 	bl	80049fc <HAL_DSI_ConfigPhyTimer>
 800ddc4:	4603      	mov	r3, r0
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d001      	beq.n	800ddce <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 800ddca:	f000 fad7 	bl	800e37c <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 800ddce:	2104      	movs	r1, #4
 800ddd0:	4836      	ldr	r0, [pc, #216]	; (800deac <MX_DSIHOST_DSI_Init+0x1e0>)
 800ddd2:	f7f6 fdeb 	bl	80049ac <HAL_DSI_ConfigFlowControl>
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d001      	beq.n	800dde0 <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 800dddc:	f000 face 	bl	800e37c <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 800dde0:	f242 7110 	movw	r1, #10000	; 0x2710
 800dde4:	4831      	ldr	r0, [pc, #196]	; (800deac <MX_DSIHOST_DSI_Init+0x1e0>)
 800dde6:	f7f7 f831 	bl	8004e4c <HAL_DSI_SetLowPowerRXFilter>
 800ddea:	4603      	mov	r3, r0
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d001      	beq.n	800ddf4 <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 800ddf0:	f000 fac4 	bl	800e37c <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 800ddf4:	2100      	movs	r1, #0
 800ddf6:	482d      	ldr	r0, [pc, #180]	; (800deac <MX_DSIHOST_DSI_Init+0x1e0>)
 800ddf8:	f7f6 f9bc 	bl	8004174 <HAL_DSI_ConfigErrorMonitor>
 800ddfc:	4603      	mov	r3, r0
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d001      	beq.n	800de06 <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 800de02:	f000 fabb 	bl	800e37c <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_DISABLE;
 800de06:	2300      	movs	r3, #0
 800de08:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 800de0a:	2300      	movs	r3, #0
 800de0c:	633b      	str	r3, [r7, #48]	; 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_DISABLE;
 800de0e:	2300      	movs	r3, #0
 800de10:	637b      	str	r3, [r7, #52]	; 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 800de12:	2300      	movs	r3, #0
 800de14:	63bb      	str	r3, [r7, #56]	; 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_DISABLE;
 800de16:	2300      	movs	r3, #0
 800de18:	63fb      	str	r3, [r7, #60]	; 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 800de1a:	2300      	movs	r3, #0
 800de1c:	643b      	str	r3, [r7, #64]	; 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_DISABLE;
 800de1e:	2300      	movs	r3, #0
 800de20:	647b      	str	r3, [r7, #68]	; 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 800de22:	2300      	movs	r3, #0
 800de24:	64bb      	str	r3, [r7, #72]	; 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_DISABLE;
 800de26:	2300      	movs	r3, #0
 800de28:	64fb      	str	r3, [r7, #76]	; 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 800de2a:	2300      	movs	r3, #0
 800de2c:	653b      	str	r3, [r7, #80]	; 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 800de2e:	2300      	movs	r3, #0
 800de30:	657b      	str	r3, [r7, #84]	; 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_DISABLE;
 800de32:	2300      	movs	r3, #0
 800de34:	65bb      	str	r3, [r7, #88]	; 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 800de36:	2300      	movs	r3, #0
 800de38:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 800de3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800de3e:	4619      	mov	r1, r3
 800de40:	481a      	ldr	r0, [pc, #104]	; (800deac <MX_DSIHOST_DSI_Init+0x1e0>)
 800de42:	f7f6 fd55 	bl	80048f0 <HAL_DSI_ConfigCommand>
 800de46:	4603      	mov	r3, r0
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d001      	beq.n	800de50 <MX_DSIHOST_DSI_Init+0x184>
  {
    Error_Handler();
 800de4c:	f000 fa96 	bl	800e37c <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 800de50:	2300      	movs	r3, #0
 800de52:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 800de54:	2305      	movs	r3, #5
 800de56:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 640;
 800de58:	f44f 7320 	mov.w	r3, #640	; 0x280
 800de5c:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 800de5e:	2310      	movs	r3, #16
 800de60:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 800de62:	2300      	movs	r3, #0
 800de64:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 800de66:	2304      	movs	r3, #4
 800de68:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 800de6a:	2302      	movs	r3, #2
 800de6c:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 800de6e:	2300      	movs	r3, #0
 800de70:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 800de72:	2300      	movs	r3, #0
 800de74:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 800de76:	2340      	movs	r3, #64	; 0x40
 800de78:	627b      	str	r3, [r7, #36]	; 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_DISABLE;
 800de7a:	2300      	movs	r3, #0
 800de7c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 800de7e:	463b      	mov	r3, r7
 800de80:	4619      	mov	r1, r3
 800de82:	480a      	ldr	r0, [pc, #40]	; (800deac <MX_DSIHOST_DSI_Init+0x1e0>)
 800de84:	f7f6 fc5a 	bl	800473c <HAL_DSI_ConfigAdaptedCommandMode>
 800de88:	4603      	mov	r3, r0
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d001      	beq.n	800de92 <MX_DSIHOST_DSI_Init+0x1c6>
  {
    Error_Handler();
 800de8e:	f000 fa75 	bl	800e37c <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 800de92:	2100      	movs	r1, #0
 800de94:	4805      	ldr	r0, [pc, #20]	; (800deac <MX_DSIHOST_DSI_Init+0x1e0>)
 800de96:	f7f6 fa29 	bl	80042ec <HAL_DSI_SetGenericVCID>
 800de9a:	4603      	mov	r3, r0
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d001      	beq.n	800dea4 <MX_DSIHOST_DSI_Init+0x1d8>
  {
    Error_Handler();
 800dea0:	f000 fa6c 	bl	800e37c <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 800dea4:	bf00      	nop
 800dea6:	37a8      	adds	r7, #168	; 0xa8
 800dea8:	46bd      	mov	sp, r7
 800deaa:	bd80      	pop	{r7, pc}
 800deac:	20000930 	.word	0x20000930
 800deb0:	40016c00 	.word	0x40016c00

0800deb4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b09a      	sub	sp, #104	; 0x68
 800deb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800deba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800debe:	2234      	movs	r2, #52	; 0x34
 800dec0:	2100      	movs	r1, #0
 800dec2:	4618      	mov	r0, r3
 800dec4:	f000 fec0 	bl	800ec48 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 800dec8:	463b      	mov	r3, r7
 800deca:	2234      	movs	r2, #52	; 0x34
 800decc:	2100      	movs	r1, #0
 800dece:	4618      	mov	r0, r3
 800ded0:	f000 feba 	bl	800ec48 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800ded4:	4b4e      	ldr	r3, [pc, #312]	; (800e010 <MX_LTDC_Init+0x15c>)
 800ded6:	4a4f      	ldr	r2, [pc, #316]	; (800e014 <MX_LTDC_Init+0x160>)
 800ded8:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800deda:	4b4d      	ldr	r3, [pc, #308]	; (800e010 <MX_LTDC_Init+0x15c>)
 800dedc:	2200      	movs	r2, #0
 800dede:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800dee0:	4b4b      	ldr	r3, [pc, #300]	; (800e010 <MX_LTDC_Init+0x15c>)
 800dee2:	2200      	movs	r2, #0
 800dee4:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800dee6:	4b4a      	ldr	r3, [pc, #296]	; (800e010 <MX_LTDC_Init+0x15c>)
 800dee8:	2200      	movs	r2, #0
 800deea:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800deec:	4b48      	ldr	r3, [pc, #288]	; (800e010 <MX_LTDC_Init+0x15c>)
 800deee:	2200      	movs	r2, #0
 800def0:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 800def2:	4b47      	ldr	r3, [pc, #284]	; (800e010 <MX_LTDC_Init+0x15c>)
 800def4:	2207      	movs	r2, #7
 800def6:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 800def8:	4b45      	ldr	r3, [pc, #276]	; (800e010 <MX_LTDC_Init+0x15c>)
 800defa:	2203      	movs	r2, #3
 800defc:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 800defe:	4b44      	ldr	r3, [pc, #272]	; (800e010 <MX_LTDC_Init+0x15c>)
 800df00:	220e      	movs	r2, #14
 800df02:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 800df04:	4b42      	ldr	r3, [pc, #264]	; (800e010 <MX_LTDC_Init+0x15c>)
 800df06:	2205      	movs	r2, #5
 800df08:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 800df0a:	4b41      	ldr	r3, [pc, #260]	; (800e010 <MX_LTDC_Init+0x15c>)
 800df0c:	f240 228e 	movw	r2, #654	; 0x28e
 800df10:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 800df12:	4b3f      	ldr	r3, [pc, #252]	; (800e010 <MX_LTDC_Init+0x15c>)
 800df14:	f240 12e5 	movw	r2, #485	; 0x1e5
 800df18:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 800df1a:	4b3d      	ldr	r3, [pc, #244]	; (800e010 <MX_LTDC_Init+0x15c>)
 800df1c:	f44f 7225 	mov.w	r2, #660	; 0x294
 800df20:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 800df22:	4b3b      	ldr	r3, [pc, #236]	; (800e010 <MX_LTDC_Init+0x15c>)
 800df24:	f240 12e7 	movw	r2, #487	; 0x1e7
 800df28:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800df2a:	4b39      	ldr	r3, [pc, #228]	; (800e010 <MX_LTDC_Init+0x15c>)
 800df2c:	2200      	movs	r2, #0
 800df2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800df32:	4b37      	ldr	r3, [pc, #220]	; (800e010 <MX_LTDC_Init+0x15c>)
 800df34:	2200      	movs	r2, #0
 800df36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800df3a:	4b35      	ldr	r3, [pc, #212]	; (800e010 <MX_LTDC_Init+0x15c>)
 800df3c:	2200      	movs	r2, #0
 800df3e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800df42:	4833      	ldr	r0, [pc, #204]	; (800e010 <MX_LTDC_Init+0x15c>)
 800df44:	f7f7 ffda 	bl	8005efc <HAL_LTDC_Init>
 800df48:	4603      	mov	r3, r0
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d001      	beq.n	800df52 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800df4e:	f000 fa15 	bl	800e37c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800df52:	2300      	movs	r3, #0
 800df54:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 800df56:	2300      	movs	r3, #0
 800df58:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 800df5a:	2300      	movs	r3, #0
 800df5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 800df5e:	2300      	movs	r3, #0
 800df60:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800df62:	2300      	movs	r3, #0
 800df64:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 800df66:	2300      	movs	r3, #0
 800df68:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 800df6a:	2300      	movs	r3, #0
 800df6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800df6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800df72:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800df74:	2305      	movs	r3, #5
 800df76:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 800df78:	2300      	movs	r3, #0
 800df7a:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 800df7c:	2300      	movs	r3, #0
 800df7e:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 800df80:	2300      	movs	r3, #0
 800df82:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 800df84:	2300      	movs	r3, #0
 800df86:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 800df8a:	2300      	movs	r3, #0
 800df8c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 800df90:	2300      	movs	r3, #0
 800df92:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800df96:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800df9a:	2200      	movs	r2, #0
 800df9c:	4619      	mov	r1, r3
 800df9e:	481c      	ldr	r0, [pc, #112]	; (800e010 <MX_LTDC_Init+0x15c>)
 800dfa0:	f7f8 f87c 	bl	800609c <HAL_LTDC_ConfigLayer>
 800dfa4:	4603      	mov	r3, r0
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d001      	beq.n	800dfae <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 800dfaa:	f000 f9e7 	bl	800e37c <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 800dfae:	2300      	movs	r3, #0
 800dfb0:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 800dfba:	2300      	movs	r3, #0
 800dfbc:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800dfca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dfce:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800dfd0:	2305      	movs	r3, #5
 800dfd2:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 800dfd8:	2300      	movs	r3, #0
 800dfda:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 800dfdc:	2300      	movs	r3, #0
 800dfde:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 800dfec:	2300      	movs	r3, #0
 800dfee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800dff2:	463b      	mov	r3, r7
 800dff4:	2201      	movs	r2, #1
 800dff6:	4619      	mov	r1, r3
 800dff8:	4805      	ldr	r0, [pc, #20]	; (800e010 <MX_LTDC_Init+0x15c>)
 800dffa:	f7f8 f84f 	bl	800609c <HAL_LTDC_ConfigLayer>
 800dffe:	4603      	mov	r3, r0
 800e000:	2b00      	cmp	r3, #0
 800e002:	d001      	beq.n	800e008 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 800e004:	f000 f9ba 	bl	800e37c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800e008:	bf00      	nop
 800e00a:	3768      	adds	r7, #104	; 0x68
 800e00c:	46bd      	mov	sp, r7
 800e00e:	bd80      	pop	{r7, pc}
 800e010:	200009f0 	.word	0x200009f0
 800e014:	40016800 	.word	0x40016800

0800e018 <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 800e018:	b480      	push	{r7}
 800e01a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 800e01c:	4b0c      	ldr	r3, [pc, #48]	; (800e050 <MX_SDMMC2_SD_Init+0x38>)
 800e01e:	4a0d      	ldr	r2, [pc, #52]	; (800e054 <MX_SDMMC2_SD_Init+0x3c>)
 800e020:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800e022:	4b0b      	ldr	r3, [pc, #44]	; (800e050 <MX_SDMMC2_SD_Init+0x38>)
 800e024:	2200      	movs	r2, #0
 800e026:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 800e028:	4b09      	ldr	r3, [pc, #36]	; (800e050 <MX_SDMMC2_SD_Init+0x38>)
 800e02a:	2200      	movs	r2, #0
 800e02c:	609a      	str	r2, [r3, #8]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800e02e:	4b08      	ldr	r3, [pc, #32]	; (800e050 <MX_SDMMC2_SD_Init+0x38>)
 800e030:	2200      	movs	r2, #0
 800e032:	60da      	str	r2, [r3, #12]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800e034:	4b06      	ldr	r3, [pc, #24]	; (800e050 <MX_SDMMC2_SD_Init+0x38>)
 800e036:	2200      	movs	r2, #0
 800e038:	611a      	str	r2, [r3, #16]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800e03a:	4b05      	ldr	r3, [pc, #20]	; (800e050 <MX_SDMMC2_SD_Init+0x38>)
 800e03c:	2200      	movs	r2, #0
 800e03e:	615a      	str	r2, [r3, #20]
  hsd2.Init.ClockDiv = 0;
 800e040:	4b03      	ldr	r3, [pc, #12]	; (800e050 <MX_SDMMC2_SD_Init+0x38>)
 800e042:	2200      	movs	r2, #0
 800e044:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 800e046:	bf00      	nop
 800e048:	46bd      	mov	sp, r7
 800e04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e04e:	4770      	bx	lr
 800e050:	2000096c 	.word	0x2000096c
 800e054:	40011c00 	.word	0x40011c00

0800e058 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b084      	sub	sp, #16
 800e05c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e05e:	1d3b      	adds	r3, r7, #4
 800e060:	2200      	movs	r2, #0
 800e062:	601a      	str	r2, [r3, #0]
 800e064:	605a      	str	r2, [r3, #4]
 800e066:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800e068:	4b15      	ldr	r3, [pc, #84]	; (800e0c0 <MX_TIM6_Init+0x68>)
 800e06a:	4a16      	ldr	r2, [pc, #88]	; (800e0c4 <MX_TIM6_Init+0x6c>)
 800e06c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 19999;
 800e06e:	4b14      	ldr	r3, [pc, #80]	; (800e0c0 <MX_TIM6_Init+0x68>)
 800e070:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800e074:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e076:	4b12      	ldr	r3, [pc, #72]	; (800e0c0 <MX_TIM6_Init+0x68>)
 800e078:	2200      	movs	r2, #0
 800e07a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 800e07c:	4b10      	ldr	r3, [pc, #64]	; (800e0c0 <MX_TIM6_Init+0x68>)
 800e07e:	f242 720f 	movw	r2, #9999	; 0x270f
 800e082:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e084:	4b0e      	ldr	r3, [pc, #56]	; (800e0c0 <MX_TIM6_Init+0x68>)
 800e086:	2200      	movs	r2, #0
 800e088:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800e08a:	480d      	ldr	r0, [pc, #52]	; (800e0c0 <MX_TIM6_Init+0x68>)
 800e08c:	f7fa fcae 	bl	80089ec <HAL_TIM_Base_Init>
 800e090:	4603      	mov	r3, r0
 800e092:	2b00      	cmp	r3, #0
 800e094:	d001      	beq.n	800e09a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800e096:	f000 f971 	bl	800e37c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e09a:	2300      	movs	r3, #0
 800e09c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e09e:	2300      	movs	r3, #0
 800e0a0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800e0a2:	1d3b      	adds	r3, r7, #4
 800e0a4:	4619      	mov	r1, r3
 800e0a6:	4806      	ldr	r0, [pc, #24]	; (800e0c0 <MX_TIM6_Init+0x68>)
 800e0a8:	f7fa fede 	bl	8008e68 <HAL_TIMEx_MasterConfigSynchronization>
 800e0ac:	4603      	mov	r3, r0
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d001      	beq.n	800e0b6 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800e0b2:	f000 f963 	bl	800e37c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800e0b6:	bf00      	nop
 800e0b8:	3710      	adds	r7, #16
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	bd80      	pop	{r7, pc}
 800e0be:	bf00      	nop
 800e0c0:	20000ae4 	.word	0x20000ae4
 800e0c4:	40001000 	.word	0x40001000

0800e0c8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b084      	sub	sp, #16
 800e0cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e0ce:	1d3b      	adds	r3, r7, #4
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	601a      	str	r2, [r3, #0]
 800e0d4:	605a      	str	r2, [r3, #4]
 800e0d6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800e0d8:	4b15      	ldr	r3, [pc, #84]	; (800e130 <MX_TIM7_Init+0x68>)
 800e0da:	4a16      	ldr	r2, [pc, #88]	; (800e134 <MX_TIM7_Init+0x6c>)
 800e0dc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9999;
 800e0de:	4b14      	ldr	r3, [pc, #80]	; (800e130 <MX_TIM7_Init+0x68>)
 800e0e0:	f242 720f 	movw	r2, #9999	; 0x270f
 800e0e4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e0e6:	4b12      	ldr	r3, [pc, #72]	; (800e130 <MX_TIM7_Init+0x68>)
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 800e0ec:	4b10      	ldr	r3, [pc, #64]	; (800e130 <MX_TIM7_Init+0x68>)
 800e0ee:	f242 720f 	movw	r2, #9999	; 0x270f
 800e0f2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e0f4:	4b0e      	ldr	r3, [pc, #56]	; (800e130 <MX_TIM7_Init+0x68>)
 800e0f6:	2200      	movs	r2, #0
 800e0f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800e0fa:	480d      	ldr	r0, [pc, #52]	; (800e130 <MX_TIM7_Init+0x68>)
 800e0fc:	f7fa fc76 	bl	80089ec <HAL_TIM_Base_Init>
 800e100:	4603      	mov	r3, r0
 800e102:	2b00      	cmp	r3, #0
 800e104:	d001      	beq.n	800e10a <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800e106:	f000 f939 	bl	800e37c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e10a:	2300      	movs	r3, #0
 800e10c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e10e:	2300      	movs	r3, #0
 800e110:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800e112:	1d3b      	adds	r3, r7, #4
 800e114:	4619      	mov	r1, r3
 800e116:	4806      	ldr	r0, [pc, #24]	; (800e130 <MX_TIM7_Init+0x68>)
 800e118:	f7fa fea6 	bl	8008e68 <HAL_TIMEx_MasterConfigSynchronization>
 800e11c:	4603      	mov	r3, r0
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d001      	beq.n	800e126 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800e122:	f000 f92b 	bl	800e37c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800e126:	bf00      	nop
 800e128:	3710      	adds	r7, #16
 800e12a:	46bd      	mov	sp, r7
 800e12c:	bd80      	pop	{r7, pc}
 800e12e:	bf00      	nop
 800e130:	20000bc0 	.word	0x20000bc0
 800e134:	40001400 	.word	0x40001400

0800e138 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b088      	sub	sp, #32
 800e13c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800e13e:	1d3b      	adds	r3, r7, #4
 800e140:	2200      	movs	r2, #0
 800e142:	601a      	str	r2, [r3, #0]
 800e144:	605a      	str	r2, [r3, #4]
 800e146:	609a      	str	r2, [r3, #8]
 800e148:	60da      	str	r2, [r3, #12]
 800e14a:	611a      	str	r2, [r3, #16]
 800e14c:	615a      	str	r2, [r3, #20]
 800e14e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800e150:	4b1e      	ldr	r3, [pc, #120]	; (800e1cc <MX_FMC_Init+0x94>)
 800e152:	4a1f      	ldr	r2, [pc, #124]	; (800e1d0 <MX_FMC_Init+0x98>)
 800e154:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800e156:	4b1d      	ldr	r3, [pc, #116]	; (800e1cc <MX_FMC_Init+0x94>)
 800e158:	2201      	movs	r2, #1
 800e15a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800e15c:	4b1b      	ldr	r3, [pc, #108]	; (800e1cc <MX_FMC_Init+0x94>)
 800e15e:	2200      	movs	r2, #0
 800e160:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 800e162:	4b1a      	ldr	r3, [pc, #104]	; (800e1cc <MX_FMC_Init+0x94>)
 800e164:	2208      	movs	r2, #8
 800e166:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 800e168:	4b18      	ldr	r3, [pc, #96]	; (800e1cc <MX_FMC_Init+0x94>)
 800e16a:	2220      	movs	r2, #32
 800e16c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800e16e:	4b17      	ldr	r3, [pc, #92]	; (800e1cc <MX_FMC_Init+0x94>)
 800e170:	2240      	movs	r2, #64	; 0x40
 800e172:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 800e174:	4b15      	ldr	r3, [pc, #84]	; (800e1cc <MX_FMC_Init+0x94>)
 800e176:	2280      	movs	r2, #128	; 0x80
 800e178:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800e17a:	4b14      	ldr	r3, [pc, #80]	; (800e1cc <MX_FMC_Init+0x94>)
 800e17c:	2200      	movs	r2, #0
 800e17e:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 800e180:	4b12      	ldr	r3, [pc, #72]	; (800e1cc <MX_FMC_Init+0x94>)
 800e182:	2200      	movs	r2, #0
 800e184:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800e186:	4b11      	ldr	r3, [pc, #68]	; (800e1cc <MX_FMC_Init+0x94>)
 800e188:	2200      	movs	r2, #0
 800e18a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800e18c:	4b0f      	ldr	r3, [pc, #60]	; (800e1cc <MX_FMC_Init+0x94>)
 800e18e:	2200      	movs	r2, #0
 800e190:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 800e192:	2310      	movs	r3, #16
 800e194:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 800e196:	2310      	movs	r3, #16
 800e198:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 800e19a:	2310      	movs	r3, #16
 800e19c:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 800e19e:	2310      	movs	r3, #16
 800e1a0:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 800e1a2:	2310      	movs	r3, #16
 800e1a4:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 800e1a6:	2310      	movs	r3, #16
 800e1a8:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 800e1aa:	2310      	movs	r3, #16
 800e1ac:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800e1ae:	1d3b      	adds	r3, r7, #4
 800e1b0:	4619      	mov	r1, r3
 800e1b2:	4806      	ldr	r0, [pc, #24]	; (800e1cc <MX_FMC_Init+0x94>)
 800e1b4:	f7fa fb9b 	bl	80088ee <HAL_SDRAM_Init>
 800e1b8:	4603      	mov	r3, r0
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d001      	beq.n	800e1c2 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 800e1be:	f000 f8dd 	bl	800e37c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800e1c2:	bf00      	nop
 800e1c4:	3720      	adds	r7, #32
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	bd80      	pop	{r7, pc}
 800e1ca:	bf00      	nop
 800e1cc:	20000b8c 	.word	0x20000b8c
 800e1d0:	a0000140 	.word	0xa0000140

0800e1d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b08e      	sub	sp, #56	; 0x38
 800e1d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e1da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e1de:	2200      	movs	r2, #0
 800e1e0:	601a      	str	r2, [r3, #0]
 800e1e2:	605a      	str	r2, [r3, #4]
 800e1e4:	609a      	str	r2, [r3, #8]
 800e1e6:	60da      	str	r2, [r3, #12]
 800e1e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800e1ea:	4b53      	ldr	r3, [pc, #332]	; (800e338 <MX_GPIO_Init+0x164>)
 800e1ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1ee:	4a52      	ldr	r2, [pc, #328]	; (800e338 <MX_GPIO_Init+0x164>)
 800e1f0:	f043 0302 	orr.w	r3, r3, #2
 800e1f4:	6313      	str	r3, [r2, #48]	; 0x30
 800e1f6:	4b50      	ldr	r3, [pc, #320]	; (800e338 <MX_GPIO_Init+0x164>)
 800e1f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1fa:	f003 0302 	and.w	r3, r3, #2
 800e1fe:	623b      	str	r3, [r7, #32]
 800e200:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800e202:	4b4d      	ldr	r3, [pc, #308]	; (800e338 <MX_GPIO_Init+0x164>)
 800e204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e206:	4a4c      	ldr	r2, [pc, #304]	; (800e338 <MX_GPIO_Init+0x164>)
 800e208:	f043 0308 	orr.w	r3, r3, #8
 800e20c:	6313      	str	r3, [r2, #48]	; 0x30
 800e20e:	4b4a      	ldr	r3, [pc, #296]	; (800e338 <MX_GPIO_Init+0x164>)
 800e210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e212:	f003 0308 	and.w	r3, r3, #8
 800e216:	61fb      	str	r3, [r7, #28]
 800e218:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800e21a:	4b47      	ldr	r3, [pc, #284]	; (800e338 <MX_GPIO_Init+0x164>)
 800e21c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e21e:	4a46      	ldr	r2, [pc, #280]	; (800e338 <MX_GPIO_Init+0x164>)
 800e220:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e224:	6313      	str	r3, [r2, #48]	; 0x30
 800e226:	4b44      	ldr	r3, [pc, #272]	; (800e338 <MX_GPIO_Init+0x164>)
 800e228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e22a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e22e:	61bb      	str	r3, [r7, #24]
 800e230:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800e232:	4b41      	ldr	r3, [pc, #260]	; (800e338 <MX_GPIO_Init+0x164>)
 800e234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e236:	4a40      	ldr	r2, [pc, #256]	; (800e338 <MX_GPIO_Init+0x164>)
 800e238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e23c:	6313      	str	r3, [r2, #48]	; 0x30
 800e23e:	4b3e      	ldr	r3, [pc, #248]	; (800e338 <MX_GPIO_Init+0x164>)
 800e240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e246:	617b      	str	r3, [r7, #20]
 800e248:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800e24a:	4b3b      	ldr	r3, [pc, #236]	; (800e338 <MX_GPIO_Init+0x164>)
 800e24c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e24e:	4a3a      	ldr	r2, [pc, #232]	; (800e338 <MX_GPIO_Init+0x164>)
 800e250:	f043 0320 	orr.w	r3, r3, #32
 800e254:	6313      	str	r3, [r2, #48]	; 0x30
 800e256:	4b38      	ldr	r3, [pc, #224]	; (800e338 <MX_GPIO_Init+0x164>)
 800e258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e25a:	f003 0320 	and.w	r3, r3, #32
 800e25e:	613b      	str	r3, [r7, #16]
 800e260:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800e262:	4b35      	ldr	r3, [pc, #212]	; (800e338 <MX_GPIO_Init+0x164>)
 800e264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e266:	4a34      	ldr	r2, [pc, #208]	; (800e338 <MX_GPIO_Init+0x164>)
 800e268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e26c:	6313      	str	r3, [r2, #48]	; 0x30
 800e26e:	4b32      	ldr	r3, [pc, #200]	; (800e338 <MX_GPIO_Init+0x164>)
 800e270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e276:	60fb      	str	r3, [r7, #12]
 800e278:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800e27a:	4b2f      	ldr	r3, [pc, #188]	; (800e338 <MX_GPIO_Init+0x164>)
 800e27c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e27e:	4a2e      	ldr	r2, [pc, #184]	; (800e338 <MX_GPIO_Init+0x164>)
 800e280:	f043 0301 	orr.w	r3, r3, #1
 800e284:	6313      	str	r3, [r2, #48]	; 0x30
 800e286:	4b2c      	ldr	r3, [pc, #176]	; (800e338 <MX_GPIO_Init+0x164>)
 800e288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e28a:	f003 0301 	and.w	r3, r3, #1
 800e28e:	60bb      	str	r3, [r7, #8]
 800e290:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800e292:	4b29      	ldr	r3, [pc, #164]	; (800e338 <MX_GPIO_Init+0x164>)
 800e294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e296:	4a28      	ldr	r2, [pc, #160]	; (800e338 <MX_GPIO_Init+0x164>)
 800e298:	f043 0310 	orr.w	r3, r3, #16
 800e29c:	6313      	str	r3, [r2, #48]	; 0x30
 800e29e:	4b26      	ldr	r3, [pc, #152]	; (800e338 <MX_GPIO_Init+0x164>)
 800e2a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2a2:	f003 0310 	and.w	r3, r3, #16
 800e2a6:	607b      	str	r3, [r7, #4]
 800e2a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800e2aa:	4b23      	ldr	r3, [pc, #140]	; (800e338 <MX_GPIO_Init+0x164>)
 800e2ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2ae:	4a22      	ldr	r2, [pc, #136]	; (800e338 <MX_GPIO_Init+0x164>)
 800e2b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e2b4:	6313      	str	r3, [r2, #48]	; 0x30
 800e2b6:	4b20      	ldr	r3, [pc, #128]	; (800e338 <MX_GPIO_Init+0x164>)
 800e2b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e2be:	603b      	str	r3, [r7, #0]
 800e2c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PI13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800e2c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e2c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800e2c8:	4b1c      	ldr	r3, [pc, #112]	; (800e33c <MX_GPIO_Init+0x168>)
 800e2ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800e2d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e2d4:	4619      	mov	r1, r3
 800e2d6:	481a      	ldr	r0, [pc, #104]	; (800e340 <MX_GPIO_Init+0x16c>)
 800e2d8:	f7f6 fde6 	bl	8004ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800e2dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e2e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800e2ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e2ee:	4619      	mov	r1, r3
 800e2f0:	4813      	ldr	r0, [pc, #76]	; (800e340 <MX_GPIO_Init+0x16c>)
 800e2f2:	f7f6 fdd9 	bl	8004ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800e2f6:	2301      	movs	r3, #1
 800e2f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800e2fa:	4b10      	ldr	r3, [pc, #64]	; (800e33c <MX_GPIO_Init+0x168>)
 800e2fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e2fe:	2300      	movs	r3, #0
 800e300:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e302:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e306:	4619      	mov	r1, r3
 800e308:	480e      	ldr	r0, [pc, #56]	; (800e344 <MX_GPIO_Init+0x170>)
 800e30a:	f7f6 fdcd 	bl	8004ea8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800e30e:	2200      	movs	r2, #0
 800e310:	2100      	movs	r1, #0
 800e312:	2006      	movs	r0, #6
 800e314:	f7f5 f8bd 	bl	8003492 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800e318:	2006      	movs	r0, #6
 800e31a:	f7f5 f8d6 	bl	80034ca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800e31e:	2200      	movs	r2, #0
 800e320:	2100      	movs	r1, #0
 800e322:	2028      	movs	r0, #40	; 0x28
 800e324:	f7f5 f8b5 	bl	8003492 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800e328:	2028      	movs	r0, #40	; 0x28
 800e32a:	f7f5 f8ce 	bl	80034ca <HAL_NVIC_EnableIRQ>

}
 800e32e:	bf00      	nop
 800e330:	3738      	adds	r7, #56	; 0x38
 800e332:	46bd      	mov	sp, r7
 800e334:	bd80      	pop	{r7, pc}
 800e336:	bf00      	nop
 800e338:	40023800 	.word	0x40023800
 800e33c:	10110000 	.word	0x10110000
 800e340:	40022000 	.word	0x40022000
 800e344:	40020000 	.word	0x40020000

0800e348 <LCD_Config>:

/* USER CODE BEGIN 4 */
static void LCD_Config(void)
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	b082      	sub	sp, #8
 800e34c:	af00      	add	r7, sp, #0
  uint32_t  lcd_status;

  /* Initialize the LCD */
  lcd_status = BSP_LCD_Init();
 800e34e:	f7f2 feac 	bl	80010aa <BSP_LCD_Init>
 800e352:	4603      	mov	r3, r0
 800e354:	607b      	str	r3, [r7, #4]
  while(lcd_status != LCD_OK);//si LCD_init no fuera ok estaría en ciclo infinito
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d1fc      	bne.n	800e356 <LCD_Config+0xe>

  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 800e35c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800e360:	2000      	movs	r0, #0
 800e362:	f7f3 f83f 	bl	80013e4 <BSP_LCD_LayerDefaultInit>

  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800e366:	f04f 30ff 	mov.w	r0, #4294967295
 800e36a:	f7f3 f8fd 	bl	8001568 <BSP_LCD_Clear>

  printMainMenu();
 800e36e:	f7fe ff9d 	bl	800d2ac <printMainMenu>
}
 800e372:	bf00      	nop
 800e374:	3708      	adds	r7, #8
 800e376:	46bd      	mov	sp, r7
 800e378:	bd80      	pop	{r7, pc}
	...

0800e37c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800e37c:	b580      	push	{r7, lr}
 800e37e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	BSP_LCD_DisplayStringAt(10, LINE(15), (uint8_t*) auxStr, CENTER_MODE);
 800e380:	f7f3 f8dc 	bl	800153c <BSP_LCD_GetFont>
 800e384:	4603      	mov	r3, r0
 800e386:	88db      	ldrh	r3, [r3, #6]
 800e388:	461a      	mov	r2, r3
 800e38a:	0112      	lsls	r2, r2, #4
 800e38c:	1ad3      	subs	r3, r2, r3
 800e38e:	b299      	uxth	r1, r3
 800e390:	2301      	movs	r3, #1
 800e392:	4a03      	ldr	r2, [pc, #12]	; (800e3a0 <Error_Handler+0x24>)
 800e394:	200a      	movs	r0, #10
 800e396:	f7f3 f953 	bl	8001640 <BSP_LCD_DisplayStringAt>

  /* USER CODE END Error_Handler_Debug */
}
 800e39a:	bf00      	nop
 800e39c:	bd80      	pop	{r7, pc}
 800e39e:	bf00      	nop
 800e3a0:	2000094c 	.word	0x2000094c

0800e3a4 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b082      	sub	sp, #8
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	4603      	mov	r3, r0
 800e3ac:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800e3ae:	4b0b      	ldr	r3, [pc, #44]	; (800e3dc <SD_CheckStatus+0x38>)
 800e3b0:	2201      	movs	r2, #1
 800e3b2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800e3b4:	f7fd fe70 	bl	800c098 <BSP_SD_GetCardState>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d107      	bne.n	800e3ce <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800e3be:	4b07      	ldr	r3, [pc, #28]	; (800e3dc <SD_CheckStatus+0x38>)
 800e3c0:	781b      	ldrb	r3, [r3, #0]
 800e3c2:	b2db      	uxtb	r3, r3
 800e3c4:	f023 0301 	bic.w	r3, r3, #1
 800e3c8:	b2da      	uxtb	r2, r3
 800e3ca:	4b04      	ldr	r3, [pc, #16]	; (800e3dc <SD_CheckStatus+0x38>)
 800e3cc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800e3ce:	4b03      	ldr	r3, [pc, #12]	; (800e3dc <SD_CheckStatus+0x38>)
 800e3d0:	781b      	ldrb	r3, [r3, #0]
 800e3d2:	b2db      	uxtb	r3, r3
}
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	3708      	adds	r7, #8
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	bd80      	pop	{r7, pc}
 800e3dc:	20000044 	.word	0x20000044

0800e3e0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b082      	sub	sp, #8
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	4603      	mov	r3, r0
 800e3e8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 800e3ea:	4b0b      	ldr	r3, [pc, #44]	; (800e418 <SD_initialize+0x38>)
 800e3ec:	2201      	movs	r2, #1
 800e3ee:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800e3f0:	f7fd fdf0 	bl	800bfd4 <BSP_SD_Init>
 800e3f4:	4603      	mov	r3, r0
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d107      	bne.n	800e40a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800e3fa:	79fb      	ldrb	r3, [r7, #7]
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	f7ff ffd1 	bl	800e3a4 <SD_CheckStatus>
 800e402:	4603      	mov	r3, r0
 800e404:	461a      	mov	r2, r3
 800e406:	4b04      	ldr	r3, [pc, #16]	; (800e418 <SD_initialize+0x38>)
 800e408:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 800e40a:	4b03      	ldr	r3, [pc, #12]	; (800e418 <SD_initialize+0x38>)
 800e40c:	781b      	ldrb	r3, [r3, #0]
 800e40e:	b2db      	uxtb	r3, r3
}
 800e410:	4618      	mov	r0, r3
 800e412:	3708      	adds	r7, #8
 800e414:	46bd      	mov	sp, r7
 800e416:	bd80      	pop	{r7, pc}
 800e418:	20000044 	.word	0x20000044

0800e41c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b082      	sub	sp, #8
 800e420:	af00      	add	r7, sp, #0
 800e422:	4603      	mov	r3, r0
 800e424:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800e426:	79fb      	ldrb	r3, [r7, #7]
 800e428:	4618      	mov	r0, r3
 800e42a:	f7ff ffbb 	bl	800e3a4 <SD_CheckStatus>
 800e42e:	4603      	mov	r3, r0
}
 800e430:	4618      	mov	r0, r3
 800e432:	3708      	adds	r7, #8
 800e434:	46bd      	mov	sp, r7
 800e436:	bd80      	pop	{r7, pc}

0800e438 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b086      	sub	sp, #24
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	60b9      	str	r1, [r7, #8]
 800e440:	607a      	str	r2, [r7, #4]
 800e442:	603b      	str	r3, [r7, #0]
 800e444:	4603      	mov	r3, r0
 800e446:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e448:	2301      	movs	r3, #1
 800e44a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800e44c:	f04f 33ff 	mov.w	r3, #4294967295
 800e450:	683a      	ldr	r2, [r7, #0]
 800e452:	6879      	ldr	r1, [r7, #4]
 800e454:	68b8      	ldr	r0, [r7, #8]
 800e456:	f7fd fde3 	bl	800c020 <BSP_SD_ReadBlocks>
 800e45a:	4603      	mov	r3, r0
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d107      	bne.n	800e470 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800e460:	bf00      	nop
 800e462:	f7fd fe19 	bl	800c098 <BSP_SD_GetCardState>
 800e466:	4603      	mov	r3, r0
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d1fa      	bne.n	800e462 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800e46c:	2300      	movs	r3, #0
 800e46e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800e470:	7dfb      	ldrb	r3, [r7, #23]
}
 800e472:	4618      	mov	r0, r3
 800e474:	3718      	adds	r7, #24
 800e476:	46bd      	mov	sp, r7
 800e478:	bd80      	pop	{r7, pc}

0800e47a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800e47a:	b580      	push	{r7, lr}
 800e47c:	b086      	sub	sp, #24
 800e47e:	af00      	add	r7, sp, #0
 800e480:	60b9      	str	r1, [r7, #8]
 800e482:	607a      	str	r2, [r7, #4]
 800e484:	603b      	str	r3, [r7, #0]
 800e486:	4603      	mov	r3, r0
 800e488:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e48a:	2301      	movs	r3, #1
 800e48c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800e48e:	f04f 33ff 	mov.w	r3, #4294967295
 800e492:	683a      	ldr	r2, [r7, #0]
 800e494:	6879      	ldr	r1, [r7, #4]
 800e496:	68b8      	ldr	r0, [r7, #8]
 800e498:	f7fd fde0 	bl	800c05c <BSP_SD_WriteBlocks>
 800e49c:	4603      	mov	r3, r0
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d107      	bne.n	800e4b2 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800e4a2:	bf00      	nop
 800e4a4:	f7fd fdf8 	bl	800c098 <BSP_SD_GetCardState>
 800e4a8:	4603      	mov	r3, r0
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d1fa      	bne.n	800e4a4 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800e4b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	3718      	adds	r7, #24
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	bd80      	pop	{r7, pc}

0800e4bc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b08c      	sub	sp, #48	; 0x30
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	4603      	mov	r3, r0
 800e4c4:	603a      	str	r2, [r7, #0]
 800e4c6:	71fb      	strb	r3, [r7, #7]
 800e4c8:	460b      	mov	r3, r1
 800e4ca:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800e4cc:	2301      	movs	r3, #1
 800e4ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e4d2:	4b25      	ldr	r3, [pc, #148]	; (800e568 <SD_ioctl+0xac>)
 800e4d4:	781b      	ldrb	r3, [r3, #0]
 800e4d6:	b2db      	uxtb	r3, r3
 800e4d8:	f003 0301 	and.w	r3, r3, #1
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d001      	beq.n	800e4e4 <SD_ioctl+0x28>
 800e4e0:	2303      	movs	r3, #3
 800e4e2:	e03c      	b.n	800e55e <SD_ioctl+0xa2>

  switch (cmd)
 800e4e4:	79bb      	ldrb	r3, [r7, #6]
 800e4e6:	2b03      	cmp	r3, #3
 800e4e8:	d834      	bhi.n	800e554 <SD_ioctl+0x98>
 800e4ea:	a201      	add	r2, pc, #4	; (adr r2, 800e4f0 <SD_ioctl+0x34>)
 800e4ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4f0:	0800e501 	.word	0x0800e501
 800e4f4:	0800e509 	.word	0x0800e509
 800e4f8:	0800e521 	.word	0x0800e521
 800e4fc:	0800e53b 	.word	0x0800e53b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800e500:	2300      	movs	r3, #0
 800e502:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e506:	e028      	b.n	800e55a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800e508:	f107 030c 	add.w	r3, r7, #12
 800e50c:	4618      	mov	r0, r3
 800e50e:	f7fd fdd3 	bl	800c0b8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e514:	683b      	ldr	r3, [r7, #0]
 800e516:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e518:	2300      	movs	r3, #0
 800e51a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e51e:	e01c      	b.n	800e55a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e520:	f107 030c 	add.w	r3, r7, #12
 800e524:	4618      	mov	r0, r3
 800e526:	f7fd fdc7 	bl	800c0b8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e52a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e52c:	b29a      	uxth	r2, r3
 800e52e:	683b      	ldr	r3, [r7, #0]
 800e530:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800e532:	2300      	movs	r3, #0
 800e534:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e538:	e00f      	b.n	800e55a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e53a:	f107 030c 	add.w	r3, r7, #12
 800e53e:	4618      	mov	r0, r3
 800e540:	f7fd fdba 	bl	800c0b8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800e544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e546:	0a5a      	lsrs	r2, r3, #9
 800e548:	683b      	ldr	r3, [r7, #0]
 800e54a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e54c:	2300      	movs	r3, #0
 800e54e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e552:	e002      	b.n	800e55a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800e554:	2304      	movs	r3, #4
 800e556:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800e55a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e55e:	4618      	mov	r0, r3
 800e560:	3730      	adds	r7, #48	; 0x30
 800e562:	46bd      	mov	sp, r7
 800e564:	bd80      	pop	{r7, pc}
 800e566:	bf00      	nop
 800e568:	20000044 	.word	0x20000044

0800e56c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800e56c:	b480      	push	{r7}
 800e56e:	b083      	sub	sp, #12
 800e570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800e572:	4b0f      	ldr	r3, [pc, #60]	; (800e5b0 <HAL_MspInit+0x44>)
 800e574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e576:	4a0e      	ldr	r2, [pc, #56]	; (800e5b0 <HAL_MspInit+0x44>)
 800e578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e57c:	6413      	str	r3, [r2, #64]	; 0x40
 800e57e:	4b0c      	ldr	r3, [pc, #48]	; (800e5b0 <HAL_MspInit+0x44>)
 800e580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e586:	607b      	str	r3, [r7, #4]
 800e588:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e58a:	4b09      	ldr	r3, [pc, #36]	; (800e5b0 <HAL_MspInit+0x44>)
 800e58c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e58e:	4a08      	ldr	r2, [pc, #32]	; (800e5b0 <HAL_MspInit+0x44>)
 800e590:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e594:	6453      	str	r3, [r2, #68]	; 0x44
 800e596:	4b06      	ldr	r3, [pc, #24]	; (800e5b0 <HAL_MspInit+0x44>)
 800e598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e59a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e59e:	603b      	str	r3, [r7, #0]
 800e5a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800e5a2:	bf00      	nop
 800e5a4:	370c      	adds	r7, #12
 800e5a6:	46bd      	mov	sp, r7
 800e5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ac:	4770      	bx	lr
 800e5ae:	bf00      	nop
 800e5b0:	40023800 	.word	0x40023800

0800e5b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b084      	sub	sp, #16
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	4a0d      	ldr	r2, [pc, #52]	; (800e5f8 <HAL_ADC_MspInit+0x44>)
 800e5c2:	4293      	cmp	r3, r2
 800e5c4:	d113      	bne.n	800e5ee <HAL_ADC_MspInit+0x3a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800e5c6:	4b0d      	ldr	r3, [pc, #52]	; (800e5fc <HAL_ADC_MspInit+0x48>)
 800e5c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5ca:	4a0c      	ldr	r2, [pc, #48]	; (800e5fc <HAL_ADC_MspInit+0x48>)
 800e5cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e5d0:	6453      	str	r3, [r2, #68]	; 0x44
 800e5d2:	4b0a      	ldr	r3, [pc, #40]	; (800e5fc <HAL_ADC_MspInit+0x48>)
 800e5d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e5da:	60fb      	str	r3, [r7, #12]
 800e5dc:	68fb      	ldr	r3, [r7, #12]
    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800e5de:	2200      	movs	r2, #0
 800e5e0:	2100      	movs	r1, #0
 800e5e2:	2012      	movs	r0, #18
 800e5e4:	f7f4 ff55 	bl	8003492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800e5e8:	2012      	movs	r0, #18
 800e5ea:	f7f4 ff6e 	bl	80034ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800e5ee:	bf00      	nop
 800e5f0:	3710      	adds	r7, #16
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	bd80      	pop	{r7, pc}
 800e5f6:	bf00      	nop
 800e5f8:	40012000 	.word	0x40012000
 800e5fc:	40023800 	.word	0x40023800

0800e600 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800e600:	b480      	push	{r7}
 800e602:	b085      	sub	sp, #20
 800e604:	af00      	add	r7, sp, #0
 800e606:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	4a0a      	ldr	r2, [pc, #40]	; (800e638 <HAL_DMA2D_MspInit+0x38>)
 800e60e:	4293      	cmp	r3, r2
 800e610:	d10b      	bne.n	800e62a <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800e612:	4b0a      	ldr	r3, [pc, #40]	; (800e63c <HAL_DMA2D_MspInit+0x3c>)
 800e614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e616:	4a09      	ldr	r2, [pc, #36]	; (800e63c <HAL_DMA2D_MspInit+0x3c>)
 800e618:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800e61c:	6313      	str	r3, [r2, #48]	; 0x30
 800e61e:	4b07      	ldr	r3, [pc, #28]	; (800e63c <HAL_DMA2D_MspInit+0x3c>)
 800e620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e622:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e626:	60fb      	str	r3, [r7, #12]
 800e628:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800e62a:	bf00      	nop
 800e62c:	3714      	adds	r7, #20
 800e62e:	46bd      	mov	sp, r7
 800e630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e634:	4770      	bx	lr
 800e636:	bf00      	nop
 800e638:	4002b000 	.word	0x4002b000
 800e63c:	40023800 	.word	0x40023800

0800e640 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 800e640:	b580      	push	{r7, lr}
 800e642:	b08a      	sub	sp, #40	; 0x28
 800e644:	af00      	add	r7, sp, #0
 800e646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e648:	f107 0314 	add.w	r3, r7, #20
 800e64c:	2200      	movs	r2, #0
 800e64e:	601a      	str	r2, [r3, #0]
 800e650:	605a      	str	r2, [r3, #4]
 800e652:	609a      	str	r2, [r3, #8]
 800e654:	60da      	str	r2, [r3, #12]
 800e656:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	4a17      	ldr	r2, [pc, #92]	; (800e6bc <HAL_DSI_MspInit+0x7c>)
 800e65e:	4293      	cmp	r3, r2
 800e660:	d127      	bne.n	800e6b2 <HAL_DSI_MspInit+0x72>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 800e662:	4b17      	ldr	r3, [pc, #92]	; (800e6c0 <HAL_DSI_MspInit+0x80>)
 800e664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e666:	4a16      	ldr	r2, [pc, #88]	; (800e6c0 <HAL_DSI_MspInit+0x80>)
 800e668:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e66c:	6453      	str	r3, [r2, #68]	; 0x44
 800e66e:	4b14      	ldr	r3, [pc, #80]	; (800e6c0 <HAL_DSI_MspInit+0x80>)
 800e670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e672:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e676:	613b      	str	r3, [r7, #16]
 800e678:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800e67a:	4b11      	ldr	r3, [pc, #68]	; (800e6c0 <HAL_DSI_MspInit+0x80>)
 800e67c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e67e:	4a10      	ldr	r2, [pc, #64]	; (800e6c0 <HAL_DSI_MspInit+0x80>)
 800e680:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e684:	6313      	str	r3, [r2, #48]	; 0x30
 800e686:	4b0e      	ldr	r3, [pc, #56]	; (800e6c0 <HAL_DSI_MspInit+0x80>)
 800e688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e68a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e68e:	60fb      	str	r3, [r7, #12]
 800e690:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration    
    PJ2     ------> DSIHOST_TE 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800e692:	2304      	movs	r3, #4
 800e694:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e696:	2302      	movs	r3, #2
 800e698:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e69a:	2300      	movs	r3, #0
 800e69c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e69e:	2300      	movs	r3, #0
 800e6a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 800e6a2:	230d      	movs	r3, #13
 800e6a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800e6a6:	f107 0314 	add.w	r3, r7, #20
 800e6aa:	4619      	mov	r1, r3
 800e6ac:	4805      	ldr	r0, [pc, #20]	; (800e6c4 <HAL_DSI_MspInit+0x84>)
 800e6ae:	f7f6 fbfb 	bl	8004ea8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 800e6b2:	bf00      	nop
 800e6b4:	3728      	adds	r7, #40	; 0x28
 800e6b6:	46bd      	mov	sp, r7
 800e6b8:	bd80      	pop	{r7, pc}
 800e6ba:	bf00      	nop
 800e6bc:	40016c00 	.word	0x40016c00
 800e6c0:	40023800 	.word	0x40023800
 800e6c4:	40022400 	.word	0x40022400

0800e6c8 <HAL_DSI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspDeInit(DSI_HandleTypeDef* hdsi)
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b082      	sub	sp, #8
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]
  if(hdsi->Instance==DSI)
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	4a08      	ldr	r2, [pc, #32]	; (800e6f8 <HAL_DSI_MspDeInit+0x30>)
 800e6d6:	4293      	cmp	r3, r2
 800e6d8:	d109      	bne.n	800e6ee <HAL_DSI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN DSI_MspDeInit 0 */

  /* USER CODE END DSI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DSI_CLK_DISABLE();
 800e6da:	4b08      	ldr	r3, [pc, #32]	; (800e6fc <HAL_DSI_MspDeInit+0x34>)
 800e6dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6de:	4a07      	ldr	r2, [pc, #28]	; (800e6fc <HAL_DSI_MspDeInit+0x34>)
 800e6e0:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800e6e4:	6453      	str	r3, [r2, #68]	; 0x44
  
    /**DSIHOST GPIO Configuration    
    PJ2     ------> DSIHOST_TE 
    */
    HAL_GPIO_DeInit(GPIOJ, GPIO_PIN_2);
 800e6e6:	2104      	movs	r1, #4
 800e6e8:	4805      	ldr	r0, [pc, #20]	; (800e700 <HAL_DSI_MspDeInit+0x38>)
 800e6ea:	f7f6 fd87 	bl	80051fc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN DSI_MspDeInit 1 */

  /* USER CODE END DSI_MspDeInit 1 */
  }

}
 800e6ee:	bf00      	nop
 800e6f0:	3708      	adds	r7, #8
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	bd80      	pop	{r7, pc}
 800e6f6:	bf00      	nop
 800e6f8:	40016c00 	.word	0x40016c00
 800e6fc:	40023800 	.word	0x40023800
 800e700:	40022400 	.word	0x40022400

0800e704 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800e704:	b480      	push	{r7}
 800e706:	b085      	sub	sp, #20
 800e708:	af00      	add	r7, sp, #0
 800e70a:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	4a0a      	ldr	r2, [pc, #40]	; (800e73c <HAL_LTDC_MspInit+0x38>)
 800e712:	4293      	cmp	r3, r2
 800e714:	d10b      	bne.n	800e72e <HAL_LTDC_MspInit+0x2a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800e716:	4b0a      	ldr	r3, [pc, #40]	; (800e740 <HAL_LTDC_MspInit+0x3c>)
 800e718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e71a:	4a09      	ldr	r2, [pc, #36]	; (800e740 <HAL_LTDC_MspInit+0x3c>)
 800e71c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e720:	6453      	str	r3, [r2, #68]	; 0x44
 800e722:	4b07      	ldr	r3, [pc, #28]	; (800e740 <HAL_LTDC_MspInit+0x3c>)
 800e724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e726:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e72a:	60fb      	str	r3, [r7, #12]
 800e72c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800e72e:	bf00      	nop
 800e730:	3714      	adds	r7, #20
 800e732:	46bd      	mov	sp, r7
 800e734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e738:	4770      	bx	lr
 800e73a:	bf00      	nop
 800e73c:	40016800 	.word	0x40016800
 800e740:	40023800 	.word	0x40023800

0800e744 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800e744:	b580      	push	{r7, lr}
 800e746:	b08c      	sub	sp, #48	; 0x30
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e74c:	f107 031c 	add.w	r3, r7, #28
 800e750:	2200      	movs	r2, #0
 800e752:	601a      	str	r2, [r3, #0]
 800e754:	605a      	str	r2, [r3, #4]
 800e756:	609a      	str	r2, [r3, #8]
 800e758:	60da      	str	r2, [r3, #12]
 800e75a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC2)
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	4a33      	ldr	r2, [pc, #204]	; (800e830 <HAL_SD_MspInit+0xec>)
 800e762:	4293      	cmp	r3, r2
 800e764:	d160      	bne.n	800e828 <HAL_SD_MspInit+0xe4>
  {
  /* USER CODE BEGIN SDMMC2_MspInit 0 */

  /* USER CODE END SDMMC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 800e766:	4b33      	ldr	r3, [pc, #204]	; (800e834 <HAL_SD_MspInit+0xf0>)
 800e768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e76a:	4a32      	ldr	r2, [pc, #200]	; (800e834 <HAL_SD_MspInit+0xf0>)
 800e76c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e770:	6453      	str	r3, [r2, #68]	; 0x44
 800e772:	4b30      	ldr	r3, [pc, #192]	; (800e834 <HAL_SD_MspInit+0xf0>)
 800e774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e77a:	61bb      	str	r3, [r7, #24]
 800e77c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e77e:	4b2d      	ldr	r3, [pc, #180]	; (800e834 <HAL_SD_MspInit+0xf0>)
 800e780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e782:	4a2c      	ldr	r2, [pc, #176]	; (800e834 <HAL_SD_MspInit+0xf0>)
 800e784:	f043 0302 	orr.w	r3, r3, #2
 800e788:	6313      	str	r3, [r2, #48]	; 0x30
 800e78a:	4b2a      	ldr	r3, [pc, #168]	; (800e834 <HAL_SD_MspInit+0xf0>)
 800e78c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e78e:	f003 0302 	and.w	r3, r3, #2
 800e792:	617b      	str	r3, [r7, #20]
 800e794:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800e796:	4b27      	ldr	r3, [pc, #156]	; (800e834 <HAL_SD_MspInit+0xf0>)
 800e798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e79a:	4a26      	ldr	r2, [pc, #152]	; (800e834 <HAL_SD_MspInit+0xf0>)
 800e79c:	f043 0308 	orr.w	r3, r3, #8
 800e7a0:	6313      	str	r3, [r2, #48]	; 0x30
 800e7a2:	4b24      	ldr	r3, [pc, #144]	; (800e834 <HAL_SD_MspInit+0xf0>)
 800e7a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7a6:	f003 0308 	and.w	r3, r3, #8
 800e7aa:	613b      	str	r3, [r7, #16]
 800e7ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800e7ae:	4b21      	ldr	r3, [pc, #132]	; (800e834 <HAL_SD_MspInit+0xf0>)
 800e7b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7b2:	4a20      	ldr	r2, [pc, #128]	; (800e834 <HAL_SD_MspInit+0xf0>)
 800e7b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e7b8:	6313      	str	r3, [r2, #48]	; 0x30
 800e7ba:	4b1e      	ldr	r3, [pc, #120]	; (800e834 <HAL_SD_MspInit+0xf0>)
 800e7bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7c2:	60fb      	str	r3, [r7, #12]
 800e7c4:	68fb      	ldr	r3, [r7, #12]
    PD7     ------> SDMMC2_CMD
    PD6     ------> SDMMC2_CK
    PG10     ------> SDMMC2_D1
    PG9     ------> SDMMC2_D0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 800e7c6:	2318      	movs	r3, #24
 800e7c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e7ca:	2302      	movs	r3, #2
 800e7cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e7d2:	2303      	movs	r3, #3
 800e7d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 800e7d6:	230a      	movs	r3, #10
 800e7d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e7da:	f107 031c 	add.w	r3, r7, #28
 800e7de:	4619      	mov	r1, r3
 800e7e0:	4815      	ldr	r0, [pc, #84]	; (800e838 <HAL_SD_MspInit+0xf4>)
 800e7e2:	f7f6 fb61 	bl	8004ea8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800e7e6:	23c0      	movs	r3, #192	; 0xc0
 800e7e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e7ea:	2302      	movs	r3, #2
 800e7ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e7f2:	2303      	movs	r3, #3
 800e7f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800e7f6:	230b      	movs	r3, #11
 800e7f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800e7fa:	f107 031c 	add.w	r3, r7, #28
 800e7fe:	4619      	mov	r1, r3
 800e800:	480e      	ldr	r0, [pc, #56]	; (800e83c <HAL_SD_MspInit+0xf8>)
 800e802:	f7f6 fb51 	bl	8004ea8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 800e806:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800e80a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e80c:	2302      	movs	r3, #2
 800e80e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e810:	2300      	movs	r3, #0
 800e812:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e814:	2303      	movs	r3, #3
 800e816:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800e818:	230b      	movs	r3, #11
 800e81a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800e81c:	f107 031c 	add.w	r3, r7, #28
 800e820:	4619      	mov	r1, r3
 800e822:	4807      	ldr	r0, [pc, #28]	; (800e840 <HAL_SD_MspInit+0xfc>)
 800e824:	f7f6 fb40 	bl	8004ea8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 800e828:	bf00      	nop
 800e82a:	3730      	adds	r7, #48	; 0x30
 800e82c:	46bd      	mov	sp, r7
 800e82e:	bd80      	pop	{r7, pc}
 800e830:	40011c00 	.word	0x40011c00
 800e834:	40023800 	.word	0x40023800
 800e838:	40020400 	.word	0x40020400
 800e83c:	40020c00 	.word	0x40020c00
 800e840:	40021800 	.word	0x40021800

0800e844 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800e844:	b580      	push	{r7, lr}
 800e846:	b084      	sub	sp, #16
 800e848:	af00      	add	r7, sp, #0
 800e84a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	4a1a      	ldr	r2, [pc, #104]	; (800e8bc <HAL_TIM_Base_MspInit+0x78>)
 800e852:	4293      	cmp	r3, r2
 800e854:	d114      	bne.n	800e880 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800e856:	4b1a      	ldr	r3, [pc, #104]	; (800e8c0 <HAL_TIM_Base_MspInit+0x7c>)
 800e858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e85a:	4a19      	ldr	r2, [pc, #100]	; (800e8c0 <HAL_TIM_Base_MspInit+0x7c>)
 800e85c:	f043 0310 	orr.w	r3, r3, #16
 800e860:	6413      	str	r3, [r2, #64]	; 0x40
 800e862:	4b17      	ldr	r3, [pc, #92]	; (800e8c0 <HAL_TIM_Base_MspInit+0x7c>)
 800e864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e866:	f003 0310 	and.w	r3, r3, #16
 800e86a:	60fb      	str	r3, [r7, #12]
 800e86c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800e86e:	2200      	movs	r2, #0
 800e870:	2100      	movs	r1, #0
 800e872:	2036      	movs	r0, #54	; 0x36
 800e874:	f7f4 fe0d 	bl	8003492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800e878:	2036      	movs	r0, #54	; 0x36
 800e87a:	f7f4 fe26 	bl	80034ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800e87e:	e018      	b.n	800e8b2 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	4a0f      	ldr	r2, [pc, #60]	; (800e8c4 <HAL_TIM_Base_MspInit+0x80>)
 800e886:	4293      	cmp	r3, r2
 800e888:	d113      	bne.n	800e8b2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800e88a:	4b0d      	ldr	r3, [pc, #52]	; (800e8c0 <HAL_TIM_Base_MspInit+0x7c>)
 800e88c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e88e:	4a0c      	ldr	r2, [pc, #48]	; (800e8c0 <HAL_TIM_Base_MspInit+0x7c>)
 800e890:	f043 0320 	orr.w	r3, r3, #32
 800e894:	6413      	str	r3, [r2, #64]	; 0x40
 800e896:	4b0a      	ldr	r3, [pc, #40]	; (800e8c0 <HAL_TIM_Base_MspInit+0x7c>)
 800e898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e89a:	f003 0320 	and.w	r3, r3, #32
 800e89e:	60bb      	str	r3, [r7, #8]
 800e8a0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	2100      	movs	r1, #0
 800e8a6:	2037      	movs	r0, #55	; 0x37
 800e8a8:	f7f4 fdf3 	bl	8003492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800e8ac:	2037      	movs	r0, #55	; 0x37
 800e8ae:	f7f4 fe0c 	bl	80034ca <HAL_NVIC_EnableIRQ>
}
 800e8b2:	bf00      	nop
 800e8b4:	3710      	adds	r7, #16
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	bd80      	pop	{r7, pc}
 800e8ba:	bf00      	nop
 800e8bc:	40001000 	.word	0x40001000
 800e8c0:	40023800 	.word	0x40023800
 800e8c4:	40001400 	.word	0x40001400

0800e8c8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b086      	sub	sp, #24
 800e8cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800e8ce:	1d3b      	adds	r3, r7, #4
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	601a      	str	r2, [r3, #0]
 800e8d4:	605a      	str	r2, [r3, #4]
 800e8d6:	609a      	str	r2, [r3, #8]
 800e8d8:	60da      	str	r2, [r3, #12]
 800e8da:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800e8dc:	4b43      	ldr	r3, [pc, #268]	; (800e9ec <HAL_FMC_MspInit+0x124>)
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d17e      	bne.n	800e9e2 <HAL_FMC_MspInit+0x11a>
    return;
  }
  FMC_Initialized = 1;
 800e8e4:	4b41      	ldr	r3, [pc, #260]	; (800e9ec <HAL_FMC_MspInit+0x124>)
 800e8e6:	2201      	movs	r2, #1
 800e8e8:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800e8ea:	4b41      	ldr	r3, [pc, #260]	; (800e9f0 <HAL_FMC_MspInit+0x128>)
 800e8ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8ee:	4a40      	ldr	r2, [pc, #256]	; (800e9f0 <HAL_FMC_MspInit+0x128>)
 800e8f0:	f043 0301 	orr.w	r3, r3, #1
 800e8f4:	6393      	str	r3, [r2, #56]	; 0x38
 800e8f6:	4b3e      	ldr	r3, [pc, #248]	; (800e9f0 <HAL_FMC_MspInit+0x128>)
 800e8f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8fa:	f003 0301 	and.w	r3, r3, #1
 800e8fe:	603b      	str	r3, [r7, #0]
 800e900:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800e902:	2360      	movs	r3, #96	; 0x60
 800e904:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e906:	2302      	movs	r3, #2
 800e908:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e90a:	2300      	movs	r3, #0
 800e90c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e90e:	2303      	movs	r3, #3
 800e910:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800e912:	230c      	movs	r3, #12
 800e914:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e916:	1d3b      	adds	r3, r7, #4
 800e918:	4619      	mov	r1, r3
 800e91a:	4836      	ldr	r0, [pc, #216]	; (800e9f4 <HAL_FMC_MspInit+0x12c>)
 800e91c:	f7f6 fac4 	bl	8004ea8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_2 
 800e920:	f248 1337 	movw	r3, #33079	; 0x8137
 800e924:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e926:	2302      	movs	r3, #2
 800e928:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e92a:	2300      	movs	r3, #0
 800e92c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e92e:	2303      	movs	r3, #3
 800e930:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800e932:	230c      	movs	r3, #12
 800e934:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800e936:	1d3b      	adds	r3, r7, #4
 800e938:	4619      	mov	r1, r3
 800e93a:	482f      	ldr	r0, [pc, #188]	; (800e9f8 <HAL_FMC_MspInit+0x130>)
 800e93c:	f7f6 fab4 	bl	8004ea8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10 
 800e940:	f24c 7303 	movw	r3, #50947	; 0xc703
 800e944:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e946:	2302      	movs	r3, #2
 800e948:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e94a:	2300      	movs	r3, #0
 800e94c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e94e:	2303      	movs	r3, #3
 800e950:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800e952:	230c      	movs	r3, #12
 800e954:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800e956:	1d3b      	adds	r3, r7, #4
 800e958:	4619      	mov	r1, r3
 800e95a:	4828      	ldr	r0, [pc, #160]	; (800e9fc <HAL_FMC_MspInit+0x134>)
 800e95c:	f7f6 faa4 	bl	8004ea8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_7|GPIO_PIN_10 
 800e960:	f240 63cf 	movw	r3, #1743	; 0x6cf
 800e964:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_6|GPIO_PIN_1|GPIO_PIN_9|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e966:	2302      	movs	r3, #2
 800e968:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e96a:	2300      	movs	r3, #0
 800e96c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e96e:	2303      	movs	r3, #3
 800e970:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800e972:	230c      	movs	r3, #12
 800e974:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800e976:	1d3b      	adds	r3, r7, #4
 800e978:	4619      	mov	r1, r3
 800e97a:	4821      	ldr	r0, [pc, #132]	; (800ea00 <HAL_FMC_MspInit+0x138>)
 800e97c:	f7f6 fa94 	bl	8004ea8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800e980:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800e984:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e986:	2302      	movs	r3, #2
 800e988:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e98a:	2300      	movs	r3, #0
 800e98c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e98e:	2303      	movs	r3, #3
 800e990:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800e992:	230c      	movs	r3, #12
 800e994:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800e996:	1d3b      	adds	r3, r7, #4
 800e998:	4619      	mov	r1, r3
 800e99a:	481a      	ldr	r0, [pc, #104]	; (800ea04 <HAL_FMC_MspInit+0x13c>)
 800e99c:	f7f6 fa84 	bl	8004ea8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_5 
 800e9a0:	f64f 7320 	movw	r3, #65312	; 0xff20
 800e9a4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_8 
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e9a6:	2302      	movs	r3, #2
 800e9a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e9ae:	2303      	movs	r3, #3
 800e9b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800e9b2:	230c      	movs	r3, #12
 800e9b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800e9b6:	1d3b      	adds	r3, r7, #4
 800e9b8:	4619      	mov	r1, r3
 800e9ba:	4813      	ldr	r0, [pc, #76]	; (800ea08 <HAL_FMC_MspInit+0x140>)
 800e9bc:	f7f6 fa74 	bl	8004ea8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14 
 800e9c0:	f64f 7380 	movw	r3, #65408	; 0xff80
 800e9c4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15 
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e9c6:	2302      	movs	r3, #2
 800e9c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e9ce:	2303      	movs	r3, #3
 800e9d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800e9d2:	230c      	movs	r3, #12
 800e9d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800e9d6:	1d3b      	adds	r3, r7, #4
 800e9d8:	4619      	mov	r1, r3
 800e9da:	480c      	ldr	r0, [pc, #48]	; (800ea0c <HAL_FMC_MspInit+0x144>)
 800e9dc:	f7f6 fa64 	bl	8004ea8 <HAL_GPIO_Init>
 800e9e0:	e000      	b.n	800e9e4 <HAL_FMC_MspInit+0x11c>
    return;
 800e9e2:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800e9e4:	3718      	adds	r7, #24
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	bd80      	pop	{r7, pc}
 800e9ea:	bf00      	nop
 800e9ec:	2000031c 	.word	0x2000031c
 800e9f0:	40023800 	.word	0x40023800
 800e9f4:	40020400 	.word	0x40020400
 800e9f8:	40021800 	.word	0x40021800
 800e9fc:	40020c00 	.word	0x40020c00
 800ea00:	40022000 	.word	0x40022000
 800ea04:	40021400 	.word	0x40021400
 800ea08:	40021c00 	.word	0x40021c00
 800ea0c:	40021000 	.word	0x40021000

0800ea10 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800ea10:	b580      	push	{r7, lr}
 800ea12:	b082      	sub	sp, #8
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800ea18:	f7ff ff56 	bl	800e8c8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800ea1c:	bf00      	nop
 800ea1e:	3708      	adds	r7, #8
 800ea20:	46bd      	mov	sp, r7
 800ea22:	bd80      	pop	{r7, pc}

0800ea24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ea24:	b480      	push	{r7}
 800ea26:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800ea28:	bf00      	nop
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea30:	4770      	bx	lr

0800ea32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ea32:	b480      	push	{r7}
 800ea34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ea36:	e7fe      	b.n	800ea36 <HardFault_Handler+0x4>

0800ea38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ea38:	b480      	push	{r7}
 800ea3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ea3c:	e7fe      	b.n	800ea3c <MemManage_Handler+0x4>

0800ea3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ea3e:	b480      	push	{r7}
 800ea40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ea42:	e7fe      	b.n	800ea42 <BusFault_Handler+0x4>

0800ea44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ea44:	b480      	push	{r7}
 800ea46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ea48:	e7fe      	b.n	800ea48 <UsageFault_Handler+0x4>

0800ea4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800ea4a:	b480      	push	{r7}
 800ea4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800ea4e:	bf00      	nop
 800ea50:	46bd      	mov	sp, r7
 800ea52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea56:	4770      	bx	lr

0800ea58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ea58:	b480      	push	{r7}
 800ea5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ea5c:	bf00      	nop
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea64:	4770      	bx	lr

0800ea66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800ea66:	b480      	push	{r7}
 800ea68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800ea6a:	bf00      	nop
 800ea6c:	46bd      	mov	sp, r7
 800ea6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea72:	4770      	bx	lr

0800ea74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800ea74:	b580      	push	{r7, lr}
 800ea76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800ea78:	f7f3 ff46 	bl	8002908 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ea7c:	bf00      	nop
 800ea7e:	bd80      	pop	{r7, pc}

0800ea80 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800ea80:	b580      	push	{r7, lr}
 800ea82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800ea84:	2001      	movs	r0, #1
 800ea86:	f7f6 fcf5 	bl	8005474 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800ea8a:	bf00      	nop
 800ea8c:	bd80      	pop	{r7, pc}
	...

0800ea90 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800ea90:	b580      	push	{r7, lr}
 800ea92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800ea94:	4802      	ldr	r0, [pc, #8]	; (800eaa0 <ADC_IRQHandler+0x10>)
 800ea96:	f7f4 f887 	bl	8002ba8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800ea9a:	bf00      	nop
 800ea9c:	bd80      	pop	{r7, pc}
 800ea9e:	bf00      	nop
 800eaa0:	20000a98 	.word	0x20000a98

0800eaa4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800eaa8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800eaac:	f7f6 fce2 	bl	8005474 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800eab0:	bf00      	nop
 800eab2:	bd80      	pop	{r7, pc}

0800eab4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800eab4:	b580      	push	{r7, lr}
 800eab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800eab8:	4802      	ldr	r0, [pc, #8]	; (800eac4 <TIM6_DAC_IRQHandler+0x10>)
 800eaba:	f7f9 ffed 	bl	8008a98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800eabe:	bf00      	nop
 800eac0:	bd80      	pop	{r7, pc}
 800eac2:	bf00      	nop
 800eac4:	20000ae4 	.word	0x20000ae4

0800eac8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800eacc:	4802      	ldr	r0, [pc, #8]	; (800ead8 <TIM7_IRQHandler+0x10>)
 800eace:	f7f9 ffe3 	bl	8008a98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800ead2:	bf00      	nop
 800ead4:	bd80      	pop	{r7, pc}
 800ead6:	bf00      	nop
 800ead8:	20000bc0 	.word	0x20000bc0

0800eadc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800eadc:	b580      	push	{r7, lr}
 800eade:	b084      	sub	sp, #16
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800eae4:	4b11      	ldr	r3, [pc, #68]	; (800eb2c <_sbrk+0x50>)
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d102      	bne.n	800eaf2 <_sbrk+0x16>
		heap_end = &end;
 800eaec:	4b0f      	ldr	r3, [pc, #60]	; (800eb2c <_sbrk+0x50>)
 800eaee:	4a10      	ldr	r2, [pc, #64]	; (800eb30 <_sbrk+0x54>)
 800eaf0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800eaf2:	4b0e      	ldr	r3, [pc, #56]	; (800eb2c <_sbrk+0x50>)
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800eaf8:	4b0c      	ldr	r3, [pc, #48]	; (800eb2c <_sbrk+0x50>)
 800eafa:	681a      	ldr	r2, [r3, #0]
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	4413      	add	r3, r2
 800eb00:	466a      	mov	r2, sp
 800eb02:	4293      	cmp	r3, r2
 800eb04:	d907      	bls.n	800eb16 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800eb06:	f000 f875 	bl	800ebf4 <__errno>
 800eb0a:	4602      	mov	r2, r0
 800eb0c:	230c      	movs	r3, #12
 800eb0e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800eb10:	f04f 33ff 	mov.w	r3, #4294967295
 800eb14:	e006      	b.n	800eb24 <_sbrk+0x48>
	}

	heap_end += incr;
 800eb16:	4b05      	ldr	r3, [pc, #20]	; (800eb2c <_sbrk+0x50>)
 800eb18:	681a      	ldr	r2, [r3, #0]
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	4413      	add	r3, r2
 800eb1e:	4a03      	ldr	r2, [pc, #12]	; (800eb2c <_sbrk+0x50>)
 800eb20:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800eb22:	68fb      	ldr	r3, [r7, #12]
}
 800eb24:	4618      	mov	r0, r3
 800eb26:	3710      	adds	r7, #16
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	bd80      	pop	{r7, pc}
 800eb2c:	20000320 	.word	0x20000320
 800eb30:	20000c08 	.word	0x20000c08

0800eb34 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800eb34:	b480      	push	{r7}
 800eb36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800eb38:	4b15      	ldr	r3, [pc, #84]	; (800eb90 <SystemInit+0x5c>)
 800eb3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eb3e:	4a14      	ldr	r2, [pc, #80]	; (800eb90 <SystemInit+0x5c>)
 800eb40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800eb44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800eb48:	4b12      	ldr	r3, [pc, #72]	; (800eb94 <SystemInit+0x60>)
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	4a11      	ldr	r2, [pc, #68]	; (800eb94 <SystemInit+0x60>)
 800eb4e:	f043 0301 	orr.w	r3, r3, #1
 800eb52:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800eb54:	4b0f      	ldr	r3, [pc, #60]	; (800eb94 <SystemInit+0x60>)
 800eb56:	2200      	movs	r2, #0
 800eb58:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800eb5a:	4b0e      	ldr	r3, [pc, #56]	; (800eb94 <SystemInit+0x60>)
 800eb5c:	681a      	ldr	r2, [r3, #0]
 800eb5e:	490d      	ldr	r1, [pc, #52]	; (800eb94 <SystemInit+0x60>)
 800eb60:	4b0d      	ldr	r3, [pc, #52]	; (800eb98 <SystemInit+0x64>)
 800eb62:	4013      	ands	r3, r2
 800eb64:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800eb66:	4b0b      	ldr	r3, [pc, #44]	; (800eb94 <SystemInit+0x60>)
 800eb68:	4a0c      	ldr	r2, [pc, #48]	; (800eb9c <SystemInit+0x68>)
 800eb6a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800eb6c:	4b09      	ldr	r3, [pc, #36]	; (800eb94 <SystemInit+0x60>)
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	4a08      	ldr	r2, [pc, #32]	; (800eb94 <SystemInit+0x60>)
 800eb72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800eb76:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800eb78:	4b06      	ldr	r3, [pc, #24]	; (800eb94 <SystemInit+0x60>)
 800eb7a:	2200      	movs	r2, #0
 800eb7c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800eb7e:	4b04      	ldr	r3, [pc, #16]	; (800eb90 <SystemInit+0x5c>)
 800eb80:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800eb84:	609a      	str	r2, [r3, #8]
#endif
}
 800eb86:	bf00      	nop
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb8e:	4770      	bx	lr
 800eb90:	e000ed00 	.word	0xe000ed00
 800eb94:	40023800 	.word	0x40023800
 800eb98:	fef6ffff 	.word	0xfef6ffff
 800eb9c:	24003010 	.word	0x24003010

0800eba0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800eba0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ebd8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800eba4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800eba6:	e003      	b.n	800ebb0 <LoopCopyDataInit>

0800eba8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800eba8:	4b0c      	ldr	r3, [pc, #48]	; (800ebdc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800ebaa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800ebac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800ebae:	3104      	adds	r1, #4

0800ebb0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800ebb0:	480b      	ldr	r0, [pc, #44]	; (800ebe0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800ebb2:	4b0c      	ldr	r3, [pc, #48]	; (800ebe4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800ebb4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800ebb6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800ebb8:	d3f6      	bcc.n	800eba8 <CopyDataInit>
  ldr  r2, =_sbss
 800ebba:	4a0b      	ldr	r2, [pc, #44]	; (800ebe8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800ebbc:	e002      	b.n	800ebc4 <LoopFillZerobss>

0800ebbe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800ebbe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800ebc0:	f842 3b04 	str.w	r3, [r2], #4

0800ebc4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800ebc4:	4b09      	ldr	r3, [pc, #36]	; (800ebec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800ebc6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800ebc8:	d3f9      	bcc.n	800ebbe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800ebca:	f7ff ffb3 	bl	800eb34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800ebce:	f000 f817 	bl	800ec00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ebd2:	f7fe fd77 	bl	800d6c4 <main>
  bx  lr    
 800ebd6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800ebd8:	2007ffff 	.word	0x2007ffff
  ldr  r3, =_sidata
 800ebdc:	0812a84c 	.word	0x0812a84c
  ldr  r0, =_sdata
 800ebe0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800ebe4:	200000b0 	.word	0x200000b0
  ldr  r2, =_sbss
 800ebe8:	200000b0 	.word	0x200000b0
  ldr  r3, = _ebss
 800ebec:	20000c04 	.word	0x20000c04

0800ebf0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ebf0:	e7fe      	b.n	800ebf0 <CAN1_RX0_IRQHandler>
	...

0800ebf4 <__errno>:
 800ebf4:	4b01      	ldr	r3, [pc, #4]	; (800ebfc <__errno+0x8>)
 800ebf6:	6818      	ldr	r0, [r3, #0]
 800ebf8:	4770      	bx	lr
 800ebfa:	bf00      	nop
 800ebfc:	2000004c 	.word	0x2000004c

0800ec00 <__libc_init_array>:
 800ec00:	b570      	push	{r4, r5, r6, lr}
 800ec02:	4e0d      	ldr	r6, [pc, #52]	; (800ec38 <__libc_init_array+0x38>)
 800ec04:	4c0d      	ldr	r4, [pc, #52]	; (800ec3c <__libc_init_array+0x3c>)
 800ec06:	1ba4      	subs	r4, r4, r6
 800ec08:	10a4      	asrs	r4, r4, #2
 800ec0a:	2500      	movs	r5, #0
 800ec0c:	42a5      	cmp	r5, r4
 800ec0e:	d109      	bne.n	800ec24 <__libc_init_array+0x24>
 800ec10:	4e0b      	ldr	r6, [pc, #44]	; (800ec40 <__libc_init_array+0x40>)
 800ec12:	4c0c      	ldr	r4, [pc, #48]	; (800ec44 <__libc_init_array+0x44>)
 800ec14:	f000 fc26 	bl	800f464 <_init>
 800ec18:	1ba4      	subs	r4, r4, r6
 800ec1a:	10a4      	asrs	r4, r4, #2
 800ec1c:	2500      	movs	r5, #0
 800ec1e:	42a5      	cmp	r5, r4
 800ec20:	d105      	bne.n	800ec2e <__libc_init_array+0x2e>
 800ec22:	bd70      	pop	{r4, r5, r6, pc}
 800ec24:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ec28:	4798      	blx	r3
 800ec2a:	3501      	adds	r5, #1
 800ec2c:	e7ee      	b.n	800ec0c <__libc_init_array+0xc>
 800ec2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ec32:	4798      	blx	r3
 800ec34:	3501      	adds	r5, #1
 800ec36:	e7f2      	b.n	800ec1e <__libc_init_array+0x1e>
 800ec38:	0812a844 	.word	0x0812a844
 800ec3c:	0812a844 	.word	0x0812a844
 800ec40:	0812a844 	.word	0x0812a844
 800ec44:	0812a848 	.word	0x0812a848

0800ec48 <memset>:
 800ec48:	4402      	add	r2, r0
 800ec4a:	4603      	mov	r3, r0
 800ec4c:	4293      	cmp	r3, r2
 800ec4e:	d100      	bne.n	800ec52 <memset+0xa>
 800ec50:	4770      	bx	lr
 800ec52:	f803 1b01 	strb.w	r1, [r3], #1
 800ec56:	e7f9      	b.n	800ec4c <memset+0x4>

0800ec58 <siprintf>:
 800ec58:	b40e      	push	{r1, r2, r3}
 800ec5a:	b500      	push	{lr}
 800ec5c:	b09c      	sub	sp, #112	; 0x70
 800ec5e:	ab1d      	add	r3, sp, #116	; 0x74
 800ec60:	9002      	str	r0, [sp, #8]
 800ec62:	9006      	str	r0, [sp, #24]
 800ec64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ec68:	4809      	ldr	r0, [pc, #36]	; (800ec90 <siprintf+0x38>)
 800ec6a:	9107      	str	r1, [sp, #28]
 800ec6c:	9104      	str	r1, [sp, #16]
 800ec6e:	4909      	ldr	r1, [pc, #36]	; (800ec94 <siprintf+0x3c>)
 800ec70:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec74:	9105      	str	r1, [sp, #20]
 800ec76:	6800      	ldr	r0, [r0, #0]
 800ec78:	9301      	str	r3, [sp, #4]
 800ec7a:	a902      	add	r1, sp, #8
 800ec7c:	f000 f866 	bl	800ed4c <_svfiprintf_r>
 800ec80:	9b02      	ldr	r3, [sp, #8]
 800ec82:	2200      	movs	r2, #0
 800ec84:	701a      	strb	r2, [r3, #0]
 800ec86:	b01c      	add	sp, #112	; 0x70
 800ec88:	f85d eb04 	ldr.w	lr, [sp], #4
 800ec8c:	b003      	add	sp, #12
 800ec8e:	4770      	bx	lr
 800ec90:	2000004c 	.word	0x2000004c
 800ec94:	ffff0208 	.word	0xffff0208

0800ec98 <__ssputs_r>:
 800ec98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec9c:	688e      	ldr	r6, [r1, #8]
 800ec9e:	429e      	cmp	r6, r3
 800eca0:	4682      	mov	sl, r0
 800eca2:	460c      	mov	r4, r1
 800eca4:	4690      	mov	r8, r2
 800eca6:	4699      	mov	r9, r3
 800eca8:	d837      	bhi.n	800ed1a <__ssputs_r+0x82>
 800ecaa:	898a      	ldrh	r2, [r1, #12]
 800ecac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ecb0:	d031      	beq.n	800ed16 <__ssputs_r+0x7e>
 800ecb2:	6825      	ldr	r5, [r4, #0]
 800ecb4:	6909      	ldr	r1, [r1, #16]
 800ecb6:	1a6f      	subs	r7, r5, r1
 800ecb8:	6965      	ldr	r5, [r4, #20]
 800ecba:	2302      	movs	r3, #2
 800ecbc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ecc0:	fb95 f5f3 	sdiv	r5, r5, r3
 800ecc4:	f109 0301 	add.w	r3, r9, #1
 800ecc8:	443b      	add	r3, r7
 800ecca:	429d      	cmp	r5, r3
 800eccc:	bf38      	it	cc
 800ecce:	461d      	movcc	r5, r3
 800ecd0:	0553      	lsls	r3, r2, #21
 800ecd2:	d530      	bpl.n	800ed36 <__ssputs_r+0x9e>
 800ecd4:	4629      	mov	r1, r5
 800ecd6:	f000 fb2b 	bl	800f330 <_malloc_r>
 800ecda:	4606      	mov	r6, r0
 800ecdc:	b950      	cbnz	r0, 800ecf4 <__ssputs_r+0x5c>
 800ecde:	230c      	movs	r3, #12
 800ece0:	f8ca 3000 	str.w	r3, [sl]
 800ece4:	89a3      	ldrh	r3, [r4, #12]
 800ece6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ecea:	81a3      	strh	r3, [r4, #12]
 800ecec:	f04f 30ff 	mov.w	r0, #4294967295
 800ecf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecf4:	463a      	mov	r2, r7
 800ecf6:	6921      	ldr	r1, [r4, #16]
 800ecf8:	f000 faa8 	bl	800f24c <memcpy>
 800ecfc:	89a3      	ldrh	r3, [r4, #12]
 800ecfe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ed02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed06:	81a3      	strh	r3, [r4, #12]
 800ed08:	6126      	str	r6, [r4, #16]
 800ed0a:	6165      	str	r5, [r4, #20]
 800ed0c:	443e      	add	r6, r7
 800ed0e:	1bed      	subs	r5, r5, r7
 800ed10:	6026      	str	r6, [r4, #0]
 800ed12:	60a5      	str	r5, [r4, #8]
 800ed14:	464e      	mov	r6, r9
 800ed16:	454e      	cmp	r6, r9
 800ed18:	d900      	bls.n	800ed1c <__ssputs_r+0x84>
 800ed1a:	464e      	mov	r6, r9
 800ed1c:	4632      	mov	r2, r6
 800ed1e:	4641      	mov	r1, r8
 800ed20:	6820      	ldr	r0, [r4, #0]
 800ed22:	f000 fa9e 	bl	800f262 <memmove>
 800ed26:	68a3      	ldr	r3, [r4, #8]
 800ed28:	1b9b      	subs	r3, r3, r6
 800ed2a:	60a3      	str	r3, [r4, #8]
 800ed2c:	6823      	ldr	r3, [r4, #0]
 800ed2e:	441e      	add	r6, r3
 800ed30:	6026      	str	r6, [r4, #0]
 800ed32:	2000      	movs	r0, #0
 800ed34:	e7dc      	b.n	800ecf0 <__ssputs_r+0x58>
 800ed36:	462a      	mov	r2, r5
 800ed38:	f000 fb54 	bl	800f3e4 <_realloc_r>
 800ed3c:	4606      	mov	r6, r0
 800ed3e:	2800      	cmp	r0, #0
 800ed40:	d1e2      	bne.n	800ed08 <__ssputs_r+0x70>
 800ed42:	6921      	ldr	r1, [r4, #16]
 800ed44:	4650      	mov	r0, sl
 800ed46:	f000 faa5 	bl	800f294 <_free_r>
 800ed4a:	e7c8      	b.n	800ecde <__ssputs_r+0x46>

0800ed4c <_svfiprintf_r>:
 800ed4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed50:	461d      	mov	r5, r3
 800ed52:	898b      	ldrh	r3, [r1, #12]
 800ed54:	061f      	lsls	r7, r3, #24
 800ed56:	b09d      	sub	sp, #116	; 0x74
 800ed58:	4680      	mov	r8, r0
 800ed5a:	460c      	mov	r4, r1
 800ed5c:	4616      	mov	r6, r2
 800ed5e:	d50f      	bpl.n	800ed80 <_svfiprintf_r+0x34>
 800ed60:	690b      	ldr	r3, [r1, #16]
 800ed62:	b96b      	cbnz	r3, 800ed80 <_svfiprintf_r+0x34>
 800ed64:	2140      	movs	r1, #64	; 0x40
 800ed66:	f000 fae3 	bl	800f330 <_malloc_r>
 800ed6a:	6020      	str	r0, [r4, #0]
 800ed6c:	6120      	str	r0, [r4, #16]
 800ed6e:	b928      	cbnz	r0, 800ed7c <_svfiprintf_r+0x30>
 800ed70:	230c      	movs	r3, #12
 800ed72:	f8c8 3000 	str.w	r3, [r8]
 800ed76:	f04f 30ff 	mov.w	r0, #4294967295
 800ed7a:	e0c8      	b.n	800ef0e <_svfiprintf_r+0x1c2>
 800ed7c:	2340      	movs	r3, #64	; 0x40
 800ed7e:	6163      	str	r3, [r4, #20]
 800ed80:	2300      	movs	r3, #0
 800ed82:	9309      	str	r3, [sp, #36]	; 0x24
 800ed84:	2320      	movs	r3, #32
 800ed86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ed8a:	2330      	movs	r3, #48	; 0x30
 800ed8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ed90:	9503      	str	r5, [sp, #12]
 800ed92:	f04f 0b01 	mov.w	fp, #1
 800ed96:	4637      	mov	r7, r6
 800ed98:	463d      	mov	r5, r7
 800ed9a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ed9e:	b10b      	cbz	r3, 800eda4 <_svfiprintf_r+0x58>
 800eda0:	2b25      	cmp	r3, #37	; 0x25
 800eda2:	d13e      	bne.n	800ee22 <_svfiprintf_r+0xd6>
 800eda4:	ebb7 0a06 	subs.w	sl, r7, r6
 800eda8:	d00b      	beq.n	800edc2 <_svfiprintf_r+0x76>
 800edaa:	4653      	mov	r3, sl
 800edac:	4632      	mov	r2, r6
 800edae:	4621      	mov	r1, r4
 800edb0:	4640      	mov	r0, r8
 800edb2:	f7ff ff71 	bl	800ec98 <__ssputs_r>
 800edb6:	3001      	adds	r0, #1
 800edb8:	f000 80a4 	beq.w	800ef04 <_svfiprintf_r+0x1b8>
 800edbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800edbe:	4453      	add	r3, sl
 800edc0:	9309      	str	r3, [sp, #36]	; 0x24
 800edc2:	783b      	ldrb	r3, [r7, #0]
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	f000 809d 	beq.w	800ef04 <_svfiprintf_r+0x1b8>
 800edca:	2300      	movs	r3, #0
 800edcc:	f04f 32ff 	mov.w	r2, #4294967295
 800edd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800edd4:	9304      	str	r3, [sp, #16]
 800edd6:	9307      	str	r3, [sp, #28]
 800edd8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eddc:	931a      	str	r3, [sp, #104]	; 0x68
 800edde:	462f      	mov	r7, r5
 800ede0:	2205      	movs	r2, #5
 800ede2:	f817 1b01 	ldrb.w	r1, [r7], #1
 800ede6:	4850      	ldr	r0, [pc, #320]	; (800ef28 <_svfiprintf_r+0x1dc>)
 800ede8:	f7f1 fa32 	bl	8000250 <memchr>
 800edec:	9b04      	ldr	r3, [sp, #16]
 800edee:	b9d0      	cbnz	r0, 800ee26 <_svfiprintf_r+0xda>
 800edf0:	06d9      	lsls	r1, r3, #27
 800edf2:	bf44      	itt	mi
 800edf4:	2220      	movmi	r2, #32
 800edf6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800edfa:	071a      	lsls	r2, r3, #28
 800edfc:	bf44      	itt	mi
 800edfe:	222b      	movmi	r2, #43	; 0x2b
 800ee00:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ee04:	782a      	ldrb	r2, [r5, #0]
 800ee06:	2a2a      	cmp	r2, #42	; 0x2a
 800ee08:	d015      	beq.n	800ee36 <_svfiprintf_r+0xea>
 800ee0a:	9a07      	ldr	r2, [sp, #28]
 800ee0c:	462f      	mov	r7, r5
 800ee0e:	2000      	movs	r0, #0
 800ee10:	250a      	movs	r5, #10
 800ee12:	4639      	mov	r1, r7
 800ee14:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ee18:	3b30      	subs	r3, #48	; 0x30
 800ee1a:	2b09      	cmp	r3, #9
 800ee1c:	d94d      	bls.n	800eeba <_svfiprintf_r+0x16e>
 800ee1e:	b1b8      	cbz	r0, 800ee50 <_svfiprintf_r+0x104>
 800ee20:	e00f      	b.n	800ee42 <_svfiprintf_r+0xf6>
 800ee22:	462f      	mov	r7, r5
 800ee24:	e7b8      	b.n	800ed98 <_svfiprintf_r+0x4c>
 800ee26:	4a40      	ldr	r2, [pc, #256]	; (800ef28 <_svfiprintf_r+0x1dc>)
 800ee28:	1a80      	subs	r0, r0, r2
 800ee2a:	fa0b f000 	lsl.w	r0, fp, r0
 800ee2e:	4318      	orrs	r0, r3
 800ee30:	9004      	str	r0, [sp, #16]
 800ee32:	463d      	mov	r5, r7
 800ee34:	e7d3      	b.n	800edde <_svfiprintf_r+0x92>
 800ee36:	9a03      	ldr	r2, [sp, #12]
 800ee38:	1d11      	adds	r1, r2, #4
 800ee3a:	6812      	ldr	r2, [r2, #0]
 800ee3c:	9103      	str	r1, [sp, #12]
 800ee3e:	2a00      	cmp	r2, #0
 800ee40:	db01      	blt.n	800ee46 <_svfiprintf_r+0xfa>
 800ee42:	9207      	str	r2, [sp, #28]
 800ee44:	e004      	b.n	800ee50 <_svfiprintf_r+0x104>
 800ee46:	4252      	negs	r2, r2
 800ee48:	f043 0302 	orr.w	r3, r3, #2
 800ee4c:	9207      	str	r2, [sp, #28]
 800ee4e:	9304      	str	r3, [sp, #16]
 800ee50:	783b      	ldrb	r3, [r7, #0]
 800ee52:	2b2e      	cmp	r3, #46	; 0x2e
 800ee54:	d10c      	bne.n	800ee70 <_svfiprintf_r+0x124>
 800ee56:	787b      	ldrb	r3, [r7, #1]
 800ee58:	2b2a      	cmp	r3, #42	; 0x2a
 800ee5a:	d133      	bne.n	800eec4 <_svfiprintf_r+0x178>
 800ee5c:	9b03      	ldr	r3, [sp, #12]
 800ee5e:	1d1a      	adds	r2, r3, #4
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	9203      	str	r2, [sp, #12]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	bfb8      	it	lt
 800ee68:	f04f 33ff 	movlt.w	r3, #4294967295
 800ee6c:	3702      	adds	r7, #2
 800ee6e:	9305      	str	r3, [sp, #20]
 800ee70:	4d2e      	ldr	r5, [pc, #184]	; (800ef2c <_svfiprintf_r+0x1e0>)
 800ee72:	7839      	ldrb	r1, [r7, #0]
 800ee74:	2203      	movs	r2, #3
 800ee76:	4628      	mov	r0, r5
 800ee78:	f7f1 f9ea 	bl	8000250 <memchr>
 800ee7c:	b138      	cbz	r0, 800ee8e <_svfiprintf_r+0x142>
 800ee7e:	2340      	movs	r3, #64	; 0x40
 800ee80:	1b40      	subs	r0, r0, r5
 800ee82:	fa03 f000 	lsl.w	r0, r3, r0
 800ee86:	9b04      	ldr	r3, [sp, #16]
 800ee88:	4303      	orrs	r3, r0
 800ee8a:	3701      	adds	r7, #1
 800ee8c:	9304      	str	r3, [sp, #16]
 800ee8e:	7839      	ldrb	r1, [r7, #0]
 800ee90:	4827      	ldr	r0, [pc, #156]	; (800ef30 <_svfiprintf_r+0x1e4>)
 800ee92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ee96:	2206      	movs	r2, #6
 800ee98:	1c7e      	adds	r6, r7, #1
 800ee9a:	f7f1 f9d9 	bl	8000250 <memchr>
 800ee9e:	2800      	cmp	r0, #0
 800eea0:	d038      	beq.n	800ef14 <_svfiprintf_r+0x1c8>
 800eea2:	4b24      	ldr	r3, [pc, #144]	; (800ef34 <_svfiprintf_r+0x1e8>)
 800eea4:	bb13      	cbnz	r3, 800eeec <_svfiprintf_r+0x1a0>
 800eea6:	9b03      	ldr	r3, [sp, #12]
 800eea8:	3307      	adds	r3, #7
 800eeaa:	f023 0307 	bic.w	r3, r3, #7
 800eeae:	3308      	adds	r3, #8
 800eeb0:	9303      	str	r3, [sp, #12]
 800eeb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eeb4:	444b      	add	r3, r9
 800eeb6:	9309      	str	r3, [sp, #36]	; 0x24
 800eeb8:	e76d      	b.n	800ed96 <_svfiprintf_r+0x4a>
 800eeba:	fb05 3202 	mla	r2, r5, r2, r3
 800eebe:	2001      	movs	r0, #1
 800eec0:	460f      	mov	r7, r1
 800eec2:	e7a6      	b.n	800ee12 <_svfiprintf_r+0xc6>
 800eec4:	2300      	movs	r3, #0
 800eec6:	3701      	adds	r7, #1
 800eec8:	9305      	str	r3, [sp, #20]
 800eeca:	4619      	mov	r1, r3
 800eecc:	250a      	movs	r5, #10
 800eece:	4638      	mov	r0, r7
 800eed0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eed4:	3a30      	subs	r2, #48	; 0x30
 800eed6:	2a09      	cmp	r2, #9
 800eed8:	d903      	bls.n	800eee2 <_svfiprintf_r+0x196>
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d0c8      	beq.n	800ee70 <_svfiprintf_r+0x124>
 800eede:	9105      	str	r1, [sp, #20]
 800eee0:	e7c6      	b.n	800ee70 <_svfiprintf_r+0x124>
 800eee2:	fb05 2101 	mla	r1, r5, r1, r2
 800eee6:	2301      	movs	r3, #1
 800eee8:	4607      	mov	r7, r0
 800eeea:	e7f0      	b.n	800eece <_svfiprintf_r+0x182>
 800eeec:	ab03      	add	r3, sp, #12
 800eeee:	9300      	str	r3, [sp, #0]
 800eef0:	4622      	mov	r2, r4
 800eef2:	4b11      	ldr	r3, [pc, #68]	; (800ef38 <_svfiprintf_r+0x1ec>)
 800eef4:	a904      	add	r1, sp, #16
 800eef6:	4640      	mov	r0, r8
 800eef8:	f3af 8000 	nop.w
 800eefc:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ef00:	4681      	mov	r9, r0
 800ef02:	d1d6      	bne.n	800eeb2 <_svfiprintf_r+0x166>
 800ef04:	89a3      	ldrh	r3, [r4, #12]
 800ef06:	065b      	lsls	r3, r3, #25
 800ef08:	f53f af35 	bmi.w	800ed76 <_svfiprintf_r+0x2a>
 800ef0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ef0e:	b01d      	add	sp, #116	; 0x74
 800ef10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef14:	ab03      	add	r3, sp, #12
 800ef16:	9300      	str	r3, [sp, #0]
 800ef18:	4622      	mov	r2, r4
 800ef1a:	4b07      	ldr	r3, [pc, #28]	; (800ef38 <_svfiprintf_r+0x1ec>)
 800ef1c:	a904      	add	r1, sp, #16
 800ef1e:	4640      	mov	r0, r8
 800ef20:	f000 f882 	bl	800f028 <_printf_i>
 800ef24:	e7ea      	b.n	800eefc <_svfiprintf_r+0x1b0>
 800ef26:	bf00      	nop
 800ef28:	0812a808 	.word	0x0812a808
 800ef2c:	0812a80e 	.word	0x0812a80e
 800ef30:	0812a812 	.word	0x0812a812
 800ef34:	00000000 	.word	0x00000000
 800ef38:	0800ec99 	.word	0x0800ec99

0800ef3c <_printf_common>:
 800ef3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef40:	4691      	mov	r9, r2
 800ef42:	461f      	mov	r7, r3
 800ef44:	688a      	ldr	r2, [r1, #8]
 800ef46:	690b      	ldr	r3, [r1, #16]
 800ef48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ef4c:	4293      	cmp	r3, r2
 800ef4e:	bfb8      	it	lt
 800ef50:	4613      	movlt	r3, r2
 800ef52:	f8c9 3000 	str.w	r3, [r9]
 800ef56:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ef5a:	4606      	mov	r6, r0
 800ef5c:	460c      	mov	r4, r1
 800ef5e:	b112      	cbz	r2, 800ef66 <_printf_common+0x2a>
 800ef60:	3301      	adds	r3, #1
 800ef62:	f8c9 3000 	str.w	r3, [r9]
 800ef66:	6823      	ldr	r3, [r4, #0]
 800ef68:	0699      	lsls	r1, r3, #26
 800ef6a:	bf42      	ittt	mi
 800ef6c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800ef70:	3302      	addmi	r3, #2
 800ef72:	f8c9 3000 	strmi.w	r3, [r9]
 800ef76:	6825      	ldr	r5, [r4, #0]
 800ef78:	f015 0506 	ands.w	r5, r5, #6
 800ef7c:	d107      	bne.n	800ef8e <_printf_common+0x52>
 800ef7e:	f104 0a19 	add.w	sl, r4, #25
 800ef82:	68e3      	ldr	r3, [r4, #12]
 800ef84:	f8d9 2000 	ldr.w	r2, [r9]
 800ef88:	1a9b      	subs	r3, r3, r2
 800ef8a:	42ab      	cmp	r3, r5
 800ef8c:	dc28      	bgt.n	800efe0 <_printf_common+0xa4>
 800ef8e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ef92:	6822      	ldr	r2, [r4, #0]
 800ef94:	3300      	adds	r3, #0
 800ef96:	bf18      	it	ne
 800ef98:	2301      	movne	r3, #1
 800ef9a:	0692      	lsls	r2, r2, #26
 800ef9c:	d42d      	bmi.n	800effa <_printf_common+0xbe>
 800ef9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800efa2:	4639      	mov	r1, r7
 800efa4:	4630      	mov	r0, r6
 800efa6:	47c0      	blx	r8
 800efa8:	3001      	adds	r0, #1
 800efaa:	d020      	beq.n	800efee <_printf_common+0xb2>
 800efac:	6823      	ldr	r3, [r4, #0]
 800efae:	68e5      	ldr	r5, [r4, #12]
 800efb0:	f8d9 2000 	ldr.w	r2, [r9]
 800efb4:	f003 0306 	and.w	r3, r3, #6
 800efb8:	2b04      	cmp	r3, #4
 800efba:	bf08      	it	eq
 800efbc:	1aad      	subeq	r5, r5, r2
 800efbe:	68a3      	ldr	r3, [r4, #8]
 800efc0:	6922      	ldr	r2, [r4, #16]
 800efc2:	bf0c      	ite	eq
 800efc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800efc8:	2500      	movne	r5, #0
 800efca:	4293      	cmp	r3, r2
 800efcc:	bfc4      	itt	gt
 800efce:	1a9b      	subgt	r3, r3, r2
 800efd0:	18ed      	addgt	r5, r5, r3
 800efd2:	f04f 0900 	mov.w	r9, #0
 800efd6:	341a      	adds	r4, #26
 800efd8:	454d      	cmp	r5, r9
 800efda:	d11a      	bne.n	800f012 <_printf_common+0xd6>
 800efdc:	2000      	movs	r0, #0
 800efde:	e008      	b.n	800eff2 <_printf_common+0xb6>
 800efe0:	2301      	movs	r3, #1
 800efe2:	4652      	mov	r2, sl
 800efe4:	4639      	mov	r1, r7
 800efe6:	4630      	mov	r0, r6
 800efe8:	47c0      	blx	r8
 800efea:	3001      	adds	r0, #1
 800efec:	d103      	bne.n	800eff6 <_printf_common+0xba>
 800efee:	f04f 30ff 	mov.w	r0, #4294967295
 800eff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eff6:	3501      	adds	r5, #1
 800eff8:	e7c3      	b.n	800ef82 <_printf_common+0x46>
 800effa:	18e1      	adds	r1, r4, r3
 800effc:	1c5a      	adds	r2, r3, #1
 800effe:	2030      	movs	r0, #48	; 0x30
 800f000:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f004:	4422      	add	r2, r4
 800f006:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f00a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f00e:	3302      	adds	r3, #2
 800f010:	e7c5      	b.n	800ef9e <_printf_common+0x62>
 800f012:	2301      	movs	r3, #1
 800f014:	4622      	mov	r2, r4
 800f016:	4639      	mov	r1, r7
 800f018:	4630      	mov	r0, r6
 800f01a:	47c0      	blx	r8
 800f01c:	3001      	adds	r0, #1
 800f01e:	d0e6      	beq.n	800efee <_printf_common+0xb2>
 800f020:	f109 0901 	add.w	r9, r9, #1
 800f024:	e7d8      	b.n	800efd8 <_printf_common+0x9c>
	...

0800f028 <_printf_i>:
 800f028:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f02c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800f030:	460c      	mov	r4, r1
 800f032:	7e09      	ldrb	r1, [r1, #24]
 800f034:	b085      	sub	sp, #20
 800f036:	296e      	cmp	r1, #110	; 0x6e
 800f038:	4617      	mov	r7, r2
 800f03a:	4606      	mov	r6, r0
 800f03c:	4698      	mov	r8, r3
 800f03e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f040:	f000 80b3 	beq.w	800f1aa <_printf_i+0x182>
 800f044:	d822      	bhi.n	800f08c <_printf_i+0x64>
 800f046:	2963      	cmp	r1, #99	; 0x63
 800f048:	d036      	beq.n	800f0b8 <_printf_i+0x90>
 800f04a:	d80a      	bhi.n	800f062 <_printf_i+0x3a>
 800f04c:	2900      	cmp	r1, #0
 800f04e:	f000 80b9 	beq.w	800f1c4 <_printf_i+0x19c>
 800f052:	2958      	cmp	r1, #88	; 0x58
 800f054:	f000 8083 	beq.w	800f15e <_printf_i+0x136>
 800f058:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f05c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800f060:	e032      	b.n	800f0c8 <_printf_i+0xa0>
 800f062:	2964      	cmp	r1, #100	; 0x64
 800f064:	d001      	beq.n	800f06a <_printf_i+0x42>
 800f066:	2969      	cmp	r1, #105	; 0x69
 800f068:	d1f6      	bne.n	800f058 <_printf_i+0x30>
 800f06a:	6820      	ldr	r0, [r4, #0]
 800f06c:	6813      	ldr	r3, [r2, #0]
 800f06e:	0605      	lsls	r5, r0, #24
 800f070:	f103 0104 	add.w	r1, r3, #4
 800f074:	d52a      	bpl.n	800f0cc <_printf_i+0xa4>
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	6011      	str	r1, [r2, #0]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	da03      	bge.n	800f086 <_printf_i+0x5e>
 800f07e:	222d      	movs	r2, #45	; 0x2d
 800f080:	425b      	negs	r3, r3
 800f082:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800f086:	486f      	ldr	r0, [pc, #444]	; (800f244 <_printf_i+0x21c>)
 800f088:	220a      	movs	r2, #10
 800f08a:	e039      	b.n	800f100 <_printf_i+0xd8>
 800f08c:	2973      	cmp	r1, #115	; 0x73
 800f08e:	f000 809d 	beq.w	800f1cc <_printf_i+0x1a4>
 800f092:	d808      	bhi.n	800f0a6 <_printf_i+0x7e>
 800f094:	296f      	cmp	r1, #111	; 0x6f
 800f096:	d020      	beq.n	800f0da <_printf_i+0xb2>
 800f098:	2970      	cmp	r1, #112	; 0x70
 800f09a:	d1dd      	bne.n	800f058 <_printf_i+0x30>
 800f09c:	6823      	ldr	r3, [r4, #0]
 800f09e:	f043 0320 	orr.w	r3, r3, #32
 800f0a2:	6023      	str	r3, [r4, #0]
 800f0a4:	e003      	b.n	800f0ae <_printf_i+0x86>
 800f0a6:	2975      	cmp	r1, #117	; 0x75
 800f0a8:	d017      	beq.n	800f0da <_printf_i+0xb2>
 800f0aa:	2978      	cmp	r1, #120	; 0x78
 800f0ac:	d1d4      	bne.n	800f058 <_printf_i+0x30>
 800f0ae:	2378      	movs	r3, #120	; 0x78
 800f0b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f0b4:	4864      	ldr	r0, [pc, #400]	; (800f248 <_printf_i+0x220>)
 800f0b6:	e055      	b.n	800f164 <_printf_i+0x13c>
 800f0b8:	6813      	ldr	r3, [r2, #0]
 800f0ba:	1d19      	adds	r1, r3, #4
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	6011      	str	r1, [r2, #0]
 800f0c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f0c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f0c8:	2301      	movs	r3, #1
 800f0ca:	e08c      	b.n	800f1e6 <_printf_i+0x1be>
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	6011      	str	r1, [r2, #0]
 800f0d0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f0d4:	bf18      	it	ne
 800f0d6:	b21b      	sxthne	r3, r3
 800f0d8:	e7cf      	b.n	800f07a <_printf_i+0x52>
 800f0da:	6813      	ldr	r3, [r2, #0]
 800f0dc:	6825      	ldr	r5, [r4, #0]
 800f0de:	1d18      	adds	r0, r3, #4
 800f0e0:	6010      	str	r0, [r2, #0]
 800f0e2:	0628      	lsls	r0, r5, #24
 800f0e4:	d501      	bpl.n	800f0ea <_printf_i+0xc2>
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	e002      	b.n	800f0f0 <_printf_i+0xc8>
 800f0ea:	0668      	lsls	r0, r5, #25
 800f0ec:	d5fb      	bpl.n	800f0e6 <_printf_i+0xbe>
 800f0ee:	881b      	ldrh	r3, [r3, #0]
 800f0f0:	4854      	ldr	r0, [pc, #336]	; (800f244 <_printf_i+0x21c>)
 800f0f2:	296f      	cmp	r1, #111	; 0x6f
 800f0f4:	bf14      	ite	ne
 800f0f6:	220a      	movne	r2, #10
 800f0f8:	2208      	moveq	r2, #8
 800f0fa:	2100      	movs	r1, #0
 800f0fc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f100:	6865      	ldr	r5, [r4, #4]
 800f102:	60a5      	str	r5, [r4, #8]
 800f104:	2d00      	cmp	r5, #0
 800f106:	f2c0 8095 	blt.w	800f234 <_printf_i+0x20c>
 800f10a:	6821      	ldr	r1, [r4, #0]
 800f10c:	f021 0104 	bic.w	r1, r1, #4
 800f110:	6021      	str	r1, [r4, #0]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d13d      	bne.n	800f192 <_printf_i+0x16a>
 800f116:	2d00      	cmp	r5, #0
 800f118:	f040 808e 	bne.w	800f238 <_printf_i+0x210>
 800f11c:	4665      	mov	r5, ip
 800f11e:	2a08      	cmp	r2, #8
 800f120:	d10b      	bne.n	800f13a <_printf_i+0x112>
 800f122:	6823      	ldr	r3, [r4, #0]
 800f124:	07db      	lsls	r3, r3, #31
 800f126:	d508      	bpl.n	800f13a <_printf_i+0x112>
 800f128:	6923      	ldr	r3, [r4, #16]
 800f12a:	6862      	ldr	r2, [r4, #4]
 800f12c:	429a      	cmp	r2, r3
 800f12e:	bfde      	ittt	le
 800f130:	2330      	movle	r3, #48	; 0x30
 800f132:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f136:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f13a:	ebac 0305 	sub.w	r3, ip, r5
 800f13e:	6123      	str	r3, [r4, #16]
 800f140:	f8cd 8000 	str.w	r8, [sp]
 800f144:	463b      	mov	r3, r7
 800f146:	aa03      	add	r2, sp, #12
 800f148:	4621      	mov	r1, r4
 800f14a:	4630      	mov	r0, r6
 800f14c:	f7ff fef6 	bl	800ef3c <_printf_common>
 800f150:	3001      	adds	r0, #1
 800f152:	d14d      	bne.n	800f1f0 <_printf_i+0x1c8>
 800f154:	f04f 30ff 	mov.w	r0, #4294967295
 800f158:	b005      	add	sp, #20
 800f15a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f15e:	4839      	ldr	r0, [pc, #228]	; (800f244 <_printf_i+0x21c>)
 800f160:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800f164:	6813      	ldr	r3, [r2, #0]
 800f166:	6821      	ldr	r1, [r4, #0]
 800f168:	1d1d      	adds	r5, r3, #4
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	6015      	str	r5, [r2, #0]
 800f16e:	060a      	lsls	r2, r1, #24
 800f170:	d50b      	bpl.n	800f18a <_printf_i+0x162>
 800f172:	07ca      	lsls	r2, r1, #31
 800f174:	bf44      	itt	mi
 800f176:	f041 0120 	orrmi.w	r1, r1, #32
 800f17a:	6021      	strmi	r1, [r4, #0]
 800f17c:	b91b      	cbnz	r3, 800f186 <_printf_i+0x15e>
 800f17e:	6822      	ldr	r2, [r4, #0]
 800f180:	f022 0220 	bic.w	r2, r2, #32
 800f184:	6022      	str	r2, [r4, #0]
 800f186:	2210      	movs	r2, #16
 800f188:	e7b7      	b.n	800f0fa <_printf_i+0xd2>
 800f18a:	064d      	lsls	r5, r1, #25
 800f18c:	bf48      	it	mi
 800f18e:	b29b      	uxthmi	r3, r3
 800f190:	e7ef      	b.n	800f172 <_printf_i+0x14a>
 800f192:	4665      	mov	r5, ip
 800f194:	fbb3 f1f2 	udiv	r1, r3, r2
 800f198:	fb02 3311 	mls	r3, r2, r1, r3
 800f19c:	5cc3      	ldrb	r3, [r0, r3]
 800f19e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800f1a2:	460b      	mov	r3, r1
 800f1a4:	2900      	cmp	r1, #0
 800f1a6:	d1f5      	bne.n	800f194 <_printf_i+0x16c>
 800f1a8:	e7b9      	b.n	800f11e <_printf_i+0xf6>
 800f1aa:	6813      	ldr	r3, [r2, #0]
 800f1ac:	6825      	ldr	r5, [r4, #0]
 800f1ae:	6961      	ldr	r1, [r4, #20]
 800f1b0:	1d18      	adds	r0, r3, #4
 800f1b2:	6010      	str	r0, [r2, #0]
 800f1b4:	0628      	lsls	r0, r5, #24
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	d501      	bpl.n	800f1be <_printf_i+0x196>
 800f1ba:	6019      	str	r1, [r3, #0]
 800f1bc:	e002      	b.n	800f1c4 <_printf_i+0x19c>
 800f1be:	066a      	lsls	r2, r5, #25
 800f1c0:	d5fb      	bpl.n	800f1ba <_printf_i+0x192>
 800f1c2:	8019      	strh	r1, [r3, #0]
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	6123      	str	r3, [r4, #16]
 800f1c8:	4665      	mov	r5, ip
 800f1ca:	e7b9      	b.n	800f140 <_printf_i+0x118>
 800f1cc:	6813      	ldr	r3, [r2, #0]
 800f1ce:	1d19      	adds	r1, r3, #4
 800f1d0:	6011      	str	r1, [r2, #0]
 800f1d2:	681d      	ldr	r5, [r3, #0]
 800f1d4:	6862      	ldr	r2, [r4, #4]
 800f1d6:	2100      	movs	r1, #0
 800f1d8:	4628      	mov	r0, r5
 800f1da:	f7f1 f839 	bl	8000250 <memchr>
 800f1de:	b108      	cbz	r0, 800f1e4 <_printf_i+0x1bc>
 800f1e0:	1b40      	subs	r0, r0, r5
 800f1e2:	6060      	str	r0, [r4, #4]
 800f1e4:	6863      	ldr	r3, [r4, #4]
 800f1e6:	6123      	str	r3, [r4, #16]
 800f1e8:	2300      	movs	r3, #0
 800f1ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f1ee:	e7a7      	b.n	800f140 <_printf_i+0x118>
 800f1f0:	6923      	ldr	r3, [r4, #16]
 800f1f2:	462a      	mov	r2, r5
 800f1f4:	4639      	mov	r1, r7
 800f1f6:	4630      	mov	r0, r6
 800f1f8:	47c0      	blx	r8
 800f1fa:	3001      	adds	r0, #1
 800f1fc:	d0aa      	beq.n	800f154 <_printf_i+0x12c>
 800f1fe:	6823      	ldr	r3, [r4, #0]
 800f200:	079b      	lsls	r3, r3, #30
 800f202:	d413      	bmi.n	800f22c <_printf_i+0x204>
 800f204:	68e0      	ldr	r0, [r4, #12]
 800f206:	9b03      	ldr	r3, [sp, #12]
 800f208:	4298      	cmp	r0, r3
 800f20a:	bfb8      	it	lt
 800f20c:	4618      	movlt	r0, r3
 800f20e:	e7a3      	b.n	800f158 <_printf_i+0x130>
 800f210:	2301      	movs	r3, #1
 800f212:	464a      	mov	r2, r9
 800f214:	4639      	mov	r1, r7
 800f216:	4630      	mov	r0, r6
 800f218:	47c0      	blx	r8
 800f21a:	3001      	adds	r0, #1
 800f21c:	d09a      	beq.n	800f154 <_printf_i+0x12c>
 800f21e:	3501      	adds	r5, #1
 800f220:	68e3      	ldr	r3, [r4, #12]
 800f222:	9a03      	ldr	r2, [sp, #12]
 800f224:	1a9b      	subs	r3, r3, r2
 800f226:	42ab      	cmp	r3, r5
 800f228:	dcf2      	bgt.n	800f210 <_printf_i+0x1e8>
 800f22a:	e7eb      	b.n	800f204 <_printf_i+0x1dc>
 800f22c:	2500      	movs	r5, #0
 800f22e:	f104 0919 	add.w	r9, r4, #25
 800f232:	e7f5      	b.n	800f220 <_printf_i+0x1f8>
 800f234:	2b00      	cmp	r3, #0
 800f236:	d1ac      	bne.n	800f192 <_printf_i+0x16a>
 800f238:	7803      	ldrb	r3, [r0, #0]
 800f23a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f23e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f242:	e76c      	b.n	800f11e <_printf_i+0xf6>
 800f244:	0812a819 	.word	0x0812a819
 800f248:	0812a82a 	.word	0x0812a82a

0800f24c <memcpy>:
 800f24c:	b510      	push	{r4, lr}
 800f24e:	1e43      	subs	r3, r0, #1
 800f250:	440a      	add	r2, r1
 800f252:	4291      	cmp	r1, r2
 800f254:	d100      	bne.n	800f258 <memcpy+0xc>
 800f256:	bd10      	pop	{r4, pc}
 800f258:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f25c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f260:	e7f7      	b.n	800f252 <memcpy+0x6>

0800f262 <memmove>:
 800f262:	4288      	cmp	r0, r1
 800f264:	b510      	push	{r4, lr}
 800f266:	eb01 0302 	add.w	r3, r1, r2
 800f26a:	d807      	bhi.n	800f27c <memmove+0x1a>
 800f26c:	1e42      	subs	r2, r0, #1
 800f26e:	4299      	cmp	r1, r3
 800f270:	d00a      	beq.n	800f288 <memmove+0x26>
 800f272:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f276:	f802 4f01 	strb.w	r4, [r2, #1]!
 800f27a:	e7f8      	b.n	800f26e <memmove+0xc>
 800f27c:	4283      	cmp	r3, r0
 800f27e:	d9f5      	bls.n	800f26c <memmove+0xa>
 800f280:	1881      	adds	r1, r0, r2
 800f282:	1ad2      	subs	r2, r2, r3
 800f284:	42d3      	cmn	r3, r2
 800f286:	d100      	bne.n	800f28a <memmove+0x28>
 800f288:	bd10      	pop	{r4, pc}
 800f28a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f28e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800f292:	e7f7      	b.n	800f284 <memmove+0x22>

0800f294 <_free_r>:
 800f294:	b538      	push	{r3, r4, r5, lr}
 800f296:	4605      	mov	r5, r0
 800f298:	2900      	cmp	r1, #0
 800f29a:	d045      	beq.n	800f328 <_free_r+0x94>
 800f29c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f2a0:	1f0c      	subs	r4, r1, #4
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	bfb8      	it	lt
 800f2a6:	18e4      	addlt	r4, r4, r3
 800f2a8:	f000 f8d2 	bl	800f450 <__malloc_lock>
 800f2ac:	4a1f      	ldr	r2, [pc, #124]	; (800f32c <_free_r+0x98>)
 800f2ae:	6813      	ldr	r3, [r2, #0]
 800f2b0:	4610      	mov	r0, r2
 800f2b2:	b933      	cbnz	r3, 800f2c2 <_free_r+0x2e>
 800f2b4:	6063      	str	r3, [r4, #4]
 800f2b6:	6014      	str	r4, [r2, #0]
 800f2b8:	4628      	mov	r0, r5
 800f2ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f2be:	f000 b8c8 	b.w	800f452 <__malloc_unlock>
 800f2c2:	42a3      	cmp	r3, r4
 800f2c4:	d90c      	bls.n	800f2e0 <_free_r+0x4c>
 800f2c6:	6821      	ldr	r1, [r4, #0]
 800f2c8:	1862      	adds	r2, r4, r1
 800f2ca:	4293      	cmp	r3, r2
 800f2cc:	bf04      	itt	eq
 800f2ce:	681a      	ldreq	r2, [r3, #0]
 800f2d0:	685b      	ldreq	r3, [r3, #4]
 800f2d2:	6063      	str	r3, [r4, #4]
 800f2d4:	bf04      	itt	eq
 800f2d6:	1852      	addeq	r2, r2, r1
 800f2d8:	6022      	streq	r2, [r4, #0]
 800f2da:	6004      	str	r4, [r0, #0]
 800f2dc:	e7ec      	b.n	800f2b8 <_free_r+0x24>
 800f2de:	4613      	mov	r3, r2
 800f2e0:	685a      	ldr	r2, [r3, #4]
 800f2e2:	b10a      	cbz	r2, 800f2e8 <_free_r+0x54>
 800f2e4:	42a2      	cmp	r2, r4
 800f2e6:	d9fa      	bls.n	800f2de <_free_r+0x4a>
 800f2e8:	6819      	ldr	r1, [r3, #0]
 800f2ea:	1858      	adds	r0, r3, r1
 800f2ec:	42a0      	cmp	r0, r4
 800f2ee:	d10b      	bne.n	800f308 <_free_r+0x74>
 800f2f0:	6820      	ldr	r0, [r4, #0]
 800f2f2:	4401      	add	r1, r0
 800f2f4:	1858      	adds	r0, r3, r1
 800f2f6:	4282      	cmp	r2, r0
 800f2f8:	6019      	str	r1, [r3, #0]
 800f2fa:	d1dd      	bne.n	800f2b8 <_free_r+0x24>
 800f2fc:	6810      	ldr	r0, [r2, #0]
 800f2fe:	6852      	ldr	r2, [r2, #4]
 800f300:	605a      	str	r2, [r3, #4]
 800f302:	4401      	add	r1, r0
 800f304:	6019      	str	r1, [r3, #0]
 800f306:	e7d7      	b.n	800f2b8 <_free_r+0x24>
 800f308:	d902      	bls.n	800f310 <_free_r+0x7c>
 800f30a:	230c      	movs	r3, #12
 800f30c:	602b      	str	r3, [r5, #0]
 800f30e:	e7d3      	b.n	800f2b8 <_free_r+0x24>
 800f310:	6820      	ldr	r0, [r4, #0]
 800f312:	1821      	adds	r1, r4, r0
 800f314:	428a      	cmp	r2, r1
 800f316:	bf04      	itt	eq
 800f318:	6811      	ldreq	r1, [r2, #0]
 800f31a:	6852      	ldreq	r2, [r2, #4]
 800f31c:	6062      	str	r2, [r4, #4]
 800f31e:	bf04      	itt	eq
 800f320:	1809      	addeq	r1, r1, r0
 800f322:	6021      	streq	r1, [r4, #0]
 800f324:	605c      	str	r4, [r3, #4]
 800f326:	e7c7      	b.n	800f2b8 <_free_r+0x24>
 800f328:	bd38      	pop	{r3, r4, r5, pc}
 800f32a:	bf00      	nop
 800f32c:	20000324 	.word	0x20000324

0800f330 <_malloc_r>:
 800f330:	b570      	push	{r4, r5, r6, lr}
 800f332:	1ccd      	adds	r5, r1, #3
 800f334:	f025 0503 	bic.w	r5, r5, #3
 800f338:	3508      	adds	r5, #8
 800f33a:	2d0c      	cmp	r5, #12
 800f33c:	bf38      	it	cc
 800f33e:	250c      	movcc	r5, #12
 800f340:	2d00      	cmp	r5, #0
 800f342:	4606      	mov	r6, r0
 800f344:	db01      	blt.n	800f34a <_malloc_r+0x1a>
 800f346:	42a9      	cmp	r1, r5
 800f348:	d903      	bls.n	800f352 <_malloc_r+0x22>
 800f34a:	230c      	movs	r3, #12
 800f34c:	6033      	str	r3, [r6, #0]
 800f34e:	2000      	movs	r0, #0
 800f350:	bd70      	pop	{r4, r5, r6, pc}
 800f352:	f000 f87d 	bl	800f450 <__malloc_lock>
 800f356:	4a21      	ldr	r2, [pc, #132]	; (800f3dc <_malloc_r+0xac>)
 800f358:	6814      	ldr	r4, [r2, #0]
 800f35a:	4621      	mov	r1, r4
 800f35c:	b991      	cbnz	r1, 800f384 <_malloc_r+0x54>
 800f35e:	4c20      	ldr	r4, [pc, #128]	; (800f3e0 <_malloc_r+0xb0>)
 800f360:	6823      	ldr	r3, [r4, #0]
 800f362:	b91b      	cbnz	r3, 800f36c <_malloc_r+0x3c>
 800f364:	4630      	mov	r0, r6
 800f366:	f000 f863 	bl	800f430 <_sbrk_r>
 800f36a:	6020      	str	r0, [r4, #0]
 800f36c:	4629      	mov	r1, r5
 800f36e:	4630      	mov	r0, r6
 800f370:	f000 f85e 	bl	800f430 <_sbrk_r>
 800f374:	1c43      	adds	r3, r0, #1
 800f376:	d124      	bne.n	800f3c2 <_malloc_r+0x92>
 800f378:	230c      	movs	r3, #12
 800f37a:	6033      	str	r3, [r6, #0]
 800f37c:	4630      	mov	r0, r6
 800f37e:	f000 f868 	bl	800f452 <__malloc_unlock>
 800f382:	e7e4      	b.n	800f34e <_malloc_r+0x1e>
 800f384:	680b      	ldr	r3, [r1, #0]
 800f386:	1b5b      	subs	r3, r3, r5
 800f388:	d418      	bmi.n	800f3bc <_malloc_r+0x8c>
 800f38a:	2b0b      	cmp	r3, #11
 800f38c:	d90f      	bls.n	800f3ae <_malloc_r+0x7e>
 800f38e:	600b      	str	r3, [r1, #0]
 800f390:	50cd      	str	r5, [r1, r3]
 800f392:	18cc      	adds	r4, r1, r3
 800f394:	4630      	mov	r0, r6
 800f396:	f000 f85c 	bl	800f452 <__malloc_unlock>
 800f39a:	f104 000b 	add.w	r0, r4, #11
 800f39e:	1d23      	adds	r3, r4, #4
 800f3a0:	f020 0007 	bic.w	r0, r0, #7
 800f3a4:	1ac3      	subs	r3, r0, r3
 800f3a6:	d0d3      	beq.n	800f350 <_malloc_r+0x20>
 800f3a8:	425a      	negs	r2, r3
 800f3aa:	50e2      	str	r2, [r4, r3]
 800f3ac:	e7d0      	b.n	800f350 <_malloc_r+0x20>
 800f3ae:	428c      	cmp	r4, r1
 800f3b0:	684b      	ldr	r3, [r1, #4]
 800f3b2:	bf16      	itet	ne
 800f3b4:	6063      	strne	r3, [r4, #4]
 800f3b6:	6013      	streq	r3, [r2, #0]
 800f3b8:	460c      	movne	r4, r1
 800f3ba:	e7eb      	b.n	800f394 <_malloc_r+0x64>
 800f3bc:	460c      	mov	r4, r1
 800f3be:	6849      	ldr	r1, [r1, #4]
 800f3c0:	e7cc      	b.n	800f35c <_malloc_r+0x2c>
 800f3c2:	1cc4      	adds	r4, r0, #3
 800f3c4:	f024 0403 	bic.w	r4, r4, #3
 800f3c8:	42a0      	cmp	r0, r4
 800f3ca:	d005      	beq.n	800f3d8 <_malloc_r+0xa8>
 800f3cc:	1a21      	subs	r1, r4, r0
 800f3ce:	4630      	mov	r0, r6
 800f3d0:	f000 f82e 	bl	800f430 <_sbrk_r>
 800f3d4:	3001      	adds	r0, #1
 800f3d6:	d0cf      	beq.n	800f378 <_malloc_r+0x48>
 800f3d8:	6025      	str	r5, [r4, #0]
 800f3da:	e7db      	b.n	800f394 <_malloc_r+0x64>
 800f3dc:	20000324 	.word	0x20000324
 800f3e0:	20000328 	.word	0x20000328

0800f3e4 <_realloc_r>:
 800f3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3e6:	4607      	mov	r7, r0
 800f3e8:	4614      	mov	r4, r2
 800f3ea:	460e      	mov	r6, r1
 800f3ec:	b921      	cbnz	r1, 800f3f8 <_realloc_r+0x14>
 800f3ee:	4611      	mov	r1, r2
 800f3f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f3f4:	f7ff bf9c 	b.w	800f330 <_malloc_r>
 800f3f8:	b922      	cbnz	r2, 800f404 <_realloc_r+0x20>
 800f3fa:	f7ff ff4b 	bl	800f294 <_free_r>
 800f3fe:	4625      	mov	r5, r4
 800f400:	4628      	mov	r0, r5
 800f402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f404:	f000 f826 	bl	800f454 <_malloc_usable_size_r>
 800f408:	42a0      	cmp	r0, r4
 800f40a:	d20f      	bcs.n	800f42c <_realloc_r+0x48>
 800f40c:	4621      	mov	r1, r4
 800f40e:	4638      	mov	r0, r7
 800f410:	f7ff ff8e 	bl	800f330 <_malloc_r>
 800f414:	4605      	mov	r5, r0
 800f416:	2800      	cmp	r0, #0
 800f418:	d0f2      	beq.n	800f400 <_realloc_r+0x1c>
 800f41a:	4631      	mov	r1, r6
 800f41c:	4622      	mov	r2, r4
 800f41e:	f7ff ff15 	bl	800f24c <memcpy>
 800f422:	4631      	mov	r1, r6
 800f424:	4638      	mov	r0, r7
 800f426:	f7ff ff35 	bl	800f294 <_free_r>
 800f42a:	e7e9      	b.n	800f400 <_realloc_r+0x1c>
 800f42c:	4635      	mov	r5, r6
 800f42e:	e7e7      	b.n	800f400 <_realloc_r+0x1c>

0800f430 <_sbrk_r>:
 800f430:	b538      	push	{r3, r4, r5, lr}
 800f432:	4c06      	ldr	r4, [pc, #24]	; (800f44c <_sbrk_r+0x1c>)
 800f434:	2300      	movs	r3, #0
 800f436:	4605      	mov	r5, r0
 800f438:	4608      	mov	r0, r1
 800f43a:	6023      	str	r3, [r4, #0]
 800f43c:	f7ff fb4e 	bl	800eadc <_sbrk>
 800f440:	1c43      	adds	r3, r0, #1
 800f442:	d102      	bne.n	800f44a <_sbrk_r+0x1a>
 800f444:	6823      	ldr	r3, [r4, #0]
 800f446:	b103      	cbz	r3, 800f44a <_sbrk_r+0x1a>
 800f448:	602b      	str	r3, [r5, #0]
 800f44a:	bd38      	pop	{r3, r4, r5, pc}
 800f44c:	20000c00 	.word	0x20000c00

0800f450 <__malloc_lock>:
 800f450:	4770      	bx	lr

0800f452 <__malloc_unlock>:
 800f452:	4770      	bx	lr

0800f454 <_malloc_usable_size_r>:
 800f454:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f458:	1f18      	subs	r0, r3, #4
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	bfbc      	itt	lt
 800f45e:	580b      	ldrlt	r3, [r1, r0]
 800f460:	18c0      	addlt	r0, r0, r3
 800f462:	4770      	bx	lr

0800f464 <_init>:
 800f464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f466:	bf00      	nop
 800f468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f46a:	bc08      	pop	{r3}
 800f46c:	469e      	mov	lr, r3
 800f46e:	4770      	bx	lr

0800f470 <_fini>:
 800f470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f472:	bf00      	nop
 800f474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f476:	bc08      	pop	{r3}
 800f478:	469e      	mov	lr, r3
 800f47a:	4770      	bx	lr
