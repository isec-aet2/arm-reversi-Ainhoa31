
Reversi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a894  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e3c  0800aa94  0800aa94  0001aa94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c8d0  0800c8d0  000200ac  2**0
                  CONTENTS
  4 .ARM          00000008  0800c8d0  0800c8d0  0001c8d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c8d8  0800c8d8  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c8d8  0800c8d8  0001c8d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c8dc  0800c8dc  0001c8dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  0800c8e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000630  200000ac  0800c98c  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006dc  0800c98c  000206dc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021718  00000000  00000000  000200da  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003e21  00000000  00000000  000417f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000019f0  00000000  00000000  00045618  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001808  00000000  00000000  00047008  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002ff5a  00000000  00000000  00048810  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000160e2  00000000  00000000  0007876a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00123869  00000000  00000000  0008e84c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b20b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070cc  00000000  00000000  001b2130  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000ac 	.word	0x200000ac
 800021c:	00000000 	.word	0x00000000
 8000220:	0800aa7c 	.word	0x0800aa7c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000b0 	.word	0x200000b0
 800023c:	0800aa7c 	.word	0x0800aa7c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <ft6x06_Init>:
  *         from MCU to FT6206 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Init(uint16_t DeviceAddr)
{  
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = ft6x06_GetInstance(DeviceAddr);
 80005ea:	88fb      	ldrh	r3, [r7, #6]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 f90d 	bl	800080c <ft6x06_GetInstance>
 80005f2:	4603      	mov	r3, r0
 80005f4:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 80005f6:	7bfb      	ldrb	r3, [r7, #15]
 80005f8:	2bff      	cmp	r3, #255	; 0xff
 80005fa:	d10e      	bne.n	800061a <ft6x06_Init+0x3a>
  {
    /* Look for empty instance */
    empty = ft6x06_GetInstance(0);
 80005fc:	2000      	movs	r0, #0
 80005fe:	f000 f905 	bl	800080c <ft6x06_GetInstance>
 8000602:	4603      	mov	r3, r0
 8000604:	73bb      	strb	r3, [r7, #14]
    
    if(empty < FT6x06_MAX_INSTANCE)
 8000606:	7bbb      	ldrb	r3, [r7, #14]
 8000608:	2b01      	cmp	r3, #1
 800060a:	d806      	bhi.n	800061a <ft6x06_Init+0x3a>
    {
      /* Register the current device instance */
      ft6x06[empty] = DeviceAddr;
 800060c:	7bbb      	ldrb	r3, [r7, #14]
 800060e:	88fa      	ldrh	r2, [r7, #6]
 8000610:	b2d1      	uxtb	r1, r2
 8000612:	4a04      	ldr	r2, [pc, #16]	; (8000624 <ft6x06_Init+0x44>)
 8000614:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      TS_IO_Init(); 
 8000616:	f000 fcd5 	bl	8000fc4 <TS_IO_Init>
    }
  }
}
 800061a:	bf00      	nop
 800061c:	3710      	adds	r7, #16
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	200000c8 	.word	0x200000c8

08000628 <ft6x06_Reset>:
  *         @note : Not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 8000632:	bf00      	nop
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr

0800063e <ft6x06_ReadID>:
  *         able to read the FT6206 device ID, and verify this is a FT6206.
  * @param  DeviceAddr: I2C FT6x06 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft6x06_ReadID(uint16_t DeviceAddr)
{
 800063e:	b580      	push	{r7, lr}
 8000640:	b082      	sub	sp, #8
 8000642:	af00      	add	r7, sp, #0
 8000644:	4603      	mov	r3, r0
 8000646:	80fb      	strh	r3, [r7, #6]
  /* Initialize I2C link if needed */
  TS_IO_Init();
 8000648:	f000 fcbc 	bl	8000fc4 <TS_IO_Init>
  
  /* Return the device ID value */
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 800064c:	88fb      	ldrh	r3, [r7, #6]
 800064e:	b2db      	uxtb	r3, r3
 8000650:	21a8      	movs	r1, #168	; 0xa8
 8000652:	4618      	mov	r0, r3
 8000654:	f000 fcda 	bl	800100c <TS_IO_Read>
 8000658:	4603      	mov	r3, r0
 800065a:	b29b      	uxth	r3, r3
}
 800065c:	4618      	mov	r0, r3
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}

08000664 <ft6x06_TS_Start>:
  *         the touch screen).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft6x06_TS_Start(uint16_t DeviceAddr)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	80fb      	strh	r3, [r7, #6]
  /* Hw Calibration sequence start : should be done once after each power up */
  /* This is called internal calibration of the touch screen                 */
  ft6x06_TS_Calibration(DeviceAddr);
#endif
  /* Minimum static configuration of FT6206 */
  ft6x06_TS_Configure(DeviceAddr);
 800066e:	88fb      	ldrh	r3, [r7, #6]
 8000670:	4618      	mov	r0, r3
 8000672:	f000 f8bc 	bl	80007ee <ft6x06_TS_Configure>

  /* By default set FT6206 IC in Polling mode : no INT generation on FT6206 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft6x06_TS_DisableIT(DeviceAddr);
 8000676:	88fb      	ldrh	r3, [r7, #6]
 8000678:	4618      	mov	r0, r3
 800067a:	f000 f88d 	bl	8000798 <ft6x06_TS_DisableIT>
}
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
	...

08000688 <ft6x06_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft6x06_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	73fb      	strb	r3, [r7, #15]

  /* Read register FT6206_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 8000696:	88fb      	ldrh	r3, [r7, #6]
 8000698:	b2db      	uxtb	r3, r3
 800069a:	2102      	movs	r1, #2
 800069c:	4618      	mov	r0, r3
 800069e:	f000 fcb5 	bl	800100c <TS_IO_Read>
 80006a2:	4603      	mov	r3, r0
 80006a4:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT6206_TD_STAT_MASK;
 80006a6:	7bfb      	ldrb	r3, [r7, #15]
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	f003 030f 	and.w	r3, r3, #15
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 80006b2:	7bfb      	ldrb	r3, [r7, #15]
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	2b02      	cmp	r3, #2
 80006b8:	d901      	bls.n	80006be <ft6x06_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft6x06 driver internal global : current number of active touches */
  ft6x06_handle.currActiveTouchNb = nbTouch;
 80006be:	7bfb      	ldrb	r3, [r7, #15]
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <ft6x06_TS_DetectTouch+0x50>)
 80006c4:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft6x06_handle.currActiveTouchIdx = 0;
 80006c6:	4b04      	ldr	r3, [pc, #16]	; (80006d8 <ft6x06_TS_DetectTouch+0x50>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80006cc:	7bfb      	ldrb	r3, [r7, #15]
 80006ce:	b2db      	uxtb	r3, r3
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	3710      	adds	r7, #16
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	200000cc 	.word	0x200000cc

080006dc <ft6x06_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft6x06_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
 80006e8:	81fb      	strh	r3, [r7, #14]
  uint8_t regAddress = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	75fb      	strb	r3, [r7, #23]
  uint8_t  dataxy[4];
  
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 80006ee:	4b1f      	ldr	r3, [pc, #124]	; (800076c <ft6x06_TS_GetXY+0x90>)
 80006f0:	789a      	ldrb	r2, [r3, #2]
 80006f2:	4b1e      	ldr	r3, [pc, #120]	; (800076c <ft6x06_TS_GetXY+0x90>)
 80006f4:	785b      	ldrb	r3, [r3, #1]
 80006f6:	429a      	cmp	r2, r3
 80006f8:	d234      	bcs.n	8000764 <ft6x06_TS_GetXY+0x88>
  {
    switch(ft6x06_handle.currActiveTouchIdx)
 80006fa:	4b1c      	ldr	r3, [pc, #112]	; (800076c <ft6x06_TS_GetXY+0x90>)
 80006fc:	789b      	ldrb	r3, [r3, #2]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d002      	beq.n	8000708 <ft6x06_TS_GetXY+0x2c>
 8000702:	2b01      	cmp	r3, #1
 8000704:	d003      	beq.n	800070e <ft6x06_TS_GetXY+0x32>
    case 1 :
      regAddress = FT6206_P2_XH_REG; 
      break;

    default :
      break;
 8000706:	e005      	b.n	8000714 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P1_XH_REG; 
 8000708:	2303      	movs	r3, #3
 800070a:	75fb      	strb	r3, [r7, #23]
      break;
 800070c:	e002      	b.n	8000714 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P2_XH_REG; 
 800070e:	2309      	movs	r3, #9
 8000710:	75fb      	strb	r3, [r7, #23]
      break;
 8000712:	bf00      	nop
    }
    
    /* Read X and Y positions */
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 8000714:	89fb      	ldrh	r3, [r7, #14]
 8000716:	b2d8      	uxtb	r0, r3
 8000718:	f107 0210 	add.w	r2, r7, #16
 800071c:	7df9      	ldrb	r1, [r7, #23]
 800071e:	2304      	movs	r3, #4
 8000720:	f000 fc92 	bl	8001048 <TS_IO_ReadMultiple>

    /* Send back ready X position to caller */
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 8000724:	7c3b      	ldrb	r3, [r7, #16]
 8000726:	021b      	lsls	r3, r3, #8
 8000728:	b21b      	sxth	r3, r3
 800072a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800072e:	b21a      	sxth	r2, r3
 8000730:	7c7b      	ldrb	r3, [r7, #17]
 8000732:	b21b      	sxth	r3, r3
 8000734:	4313      	orrs	r3, r2
 8000736:	b21b      	sxth	r3, r3
 8000738:	b29a      	uxth	r2, r3
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	801a      	strh	r2, [r3, #0]
    
    /* Send back ready Y position to caller */
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 800073e:	7cbb      	ldrb	r3, [r7, #18]
 8000740:	021b      	lsls	r3, r3, #8
 8000742:	b21b      	sxth	r3, r3
 8000744:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000748:	b21a      	sxth	r2, r3
 800074a:	7cfb      	ldrb	r3, [r7, #19]
 800074c:	b21b      	sxth	r3, r3
 800074e:	4313      	orrs	r3, r2
 8000750:	b21b      	sxth	r3, r3
 8000752:	b29a      	uxth	r2, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	801a      	strh	r2, [r3, #0]
    
    ft6x06_handle.currActiveTouchIdx++;
 8000758:	4b04      	ldr	r3, [pc, #16]	; (800076c <ft6x06_TS_GetXY+0x90>)
 800075a:	789b      	ldrb	r3, [r3, #2]
 800075c:	3301      	adds	r3, #1
 800075e:	b2da      	uxtb	r2, r3
 8000760:	4b02      	ldr	r3, [pc, #8]	; (800076c <ft6x06_TS_GetXY+0x90>)
 8000762:	709a      	strb	r2, [r3, #2]
  }
}
 8000764:	bf00      	nop
 8000766:	3718      	adds	r7, #24
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	200000cc 	.word	0x200000cc

08000770 <ft6x06_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_EnableIT(uint16_t DeviceAddr)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_TRIGGER & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 800077e:	2301      	movs	r3, #1
 8000780:	73fb      	strb	r3, [r7, #15]
  
  /* Set interrupt trigger mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8000782:	88fb      	ldrh	r3, [r7, #6]
 8000784:	b2db      	uxtb	r3, r3
 8000786:	7bfa      	ldrb	r2, [r7, #15]
 8000788:	21a4      	movs	r1, #164	; 0xa4
 800078a:	4618      	mov	r0, r3
 800078c:	f000 fc24 	bl	8000fd8 <TS_IO_Write>
}
 8000790:	bf00      	nop
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <ft6x06_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_DisableIT(uint16_t DeviceAddr)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_POLLING & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 80007a6:	2300      	movs	r3, #0
 80007a8:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 80007aa:	88fb      	ldrh	r3, [r7, #6]
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	7bfa      	ldrb	r2, [r7, #15]
 80007b0:	21a4      	movs	r1, #164	; 0xa4
 80007b2:	4618      	mov	r0, r3
 80007b4:	f000 fc10 	bl	8000fd8 <TS_IO_Write>
}
 80007b8:	bf00      	nop
 80007ba:	3710      	adds	r7, #16
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <ft6x06_TS_ITStatus>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
 80007ca:	2300      	movs	r3, #0
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	370c      	adds	r7, #12
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr

080007d8 <ft6x06_TS_ClearIT>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_TS_ClearIT(uint16_t DeviceAddr)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT6206 */
}
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr

080007ee <ft6x06_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT6206 Device address for communication on I2C Bus.
  * @retval Status FT6206_STATUS_OK or FT6206_STATUS_NOT_OK.
  */
static uint32_t ft6x06_TS_Configure(uint16_t DeviceAddr)
{
 80007ee:	b480      	push	{r7}
 80007f0:	b085      	sub	sp, #20
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	4603      	mov	r3, r0
 80007f6:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT6206_STATUS_OK;
 80007f8:	2300      	movs	r3, #0
 80007fa:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT6206 */

  return(status);
 80007fc:	68fb      	ldr	r3, [r7, #12]
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3714      	adds	r7, #20
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
	...

0800080c <ft6x06_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t ft6x06_GetInstance(uint16_t DeviceAddr)
{
 800080c:	b480      	push	{r7}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 800081a:	2300      	movs	r3, #0
 800081c:	73fb      	strb	r3, [r7, #15]
 800081e:	e00b      	b.n	8000838 <ft6x06_GetInstance+0x2c>
  {
    if(ft6x06[idx] == DeviceAddr)
 8000820:	7bfb      	ldrb	r3, [r7, #15]
 8000822:	4a0a      	ldr	r2, [pc, #40]	; (800084c <ft6x06_GetInstance+0x40>)
 8000824:	5cd3      	ldrb	r3, [r2, r3]
 8000826:	b29b      	uxth	r3, r3
 8000828:	88fa      	ldrh	r2, [r7, #6]
 800082a:	429a      	cmp	r2, r3
 800082c:	d101      	bne.n	8000832 <ft6x06_GetInstance+0x26>
    {
      return idx; 
 800082e:	7bfb      	ldrb	r3, [r7, #15]
 8000830:	e006      	b.n	8000840 <ft6x06_GetInstance+0x34>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 8000832:	7bfb      	ldrb	r3, [r7, #15]
 8000834:	3301      	adds	r3, #1
 8000836:	73fb      	strb	r3, [r7, #15]
 8000838:	7bfb      	ldrb	r3, [r7, #15]
 800083a:	2b01      	cmp	r3, #1
 800083c:	d9f0      	bls.n	8000820 <ft6x06_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 800083e:	23ff      	movs	r3, #255	; 0xff
}
 8000840:	4618      	mov	r0, r3
 8000842:	3714      	adds	r7, #20
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr
 800084c:	200000c8 	.word	0x200000c8

08000850 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800085a:	49be      	ldr	r1, [pc, #760]	; (8000b54 <OTM8009A_Init+0x304>)
 800085c:	2000      	movs	r0, #0
 800085e:	f001 f9d3 	bl	8001c08 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 8000862:	49bd      	ldr	r1, [pc, #756]	; (8000b58 <OTM8009A_Init+0x308>)
 8000864:	2003      	movs	r0, #3
 8000866:	f001 f9cf 	bl	8001c08 <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 800086a:	49bc      	ldr	r1, [pc, #752]	; (8000b5c <OTM8009A_Init+0x30c>)
 800086c:	2000      	movs	r0, #0
 800086e:	f001 f9cb 	bl	8001c08 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8000872:	49bb      	ldr	r1, [pc, #748]	; (8000b60 <OTM8009A_Init+0x310>)
 8000874:	2002      	movs	r0, #2
 8000876:	f001 f9c7 	bl	8001c08 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800087a:	49b8      	ldr	r1, [pc, #736]	; (8000b5c <OTM8009A_Init+0x30c>)
 800087c:	2000      	movs	r0, #0
 800087e:	f001 f9c3 	bl	8001c08 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 8000882:	49b8      	ldr	r1, [pc, #736]	; (8000b64 <OTM8009A_Init+0x314>)
 8000884:	2000      	movs	r0, #0
 8000886:	f001 f9bf 	bl	8001c08 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 800088a:	200a      	movs	r0, #10
 800088c:	f000 fbfa 	bl	8001084 <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 8000890:	49b5      	ldr	r1, [pc, #724]	; (8000b68 <OTM8009A_Init+0x318>)
 8000892:	2000      	movs	r0, #0
 8000894:	f001 f9b8 	bl	8001c08 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 8000898:	49b4      	ldr	r1, [pc, #720]	; (8000b6c <OTM8009A_Init+0x31c>)
 800089a:	2000      	movs	r0, #0
 800089c:	f001 f9b4 	bl	8001c08 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 80008a0:	200a      	movs	r0, #10
 80008a2:	f000 fbef 	bl	8001084 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 80008a6:	49b2      	ldr	r1, [pc, #712]	; (8000b70 <OTM8009A_Init+0x320>)
 80008a8:	2000      	movs	r0, #0
 80008aa:	f001 f9ad 	bl	8001c08 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 80008ae:	49b1      	ldr	r1, [pc, #708]	; (8000b74 <OTM8009A_Init+0x324>)
 80008b0:	2000      	movs	r0, #0
 80008b2:	f001 f9a9 	bl	8001c08 <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 80008b6:	49b0      	ldr	r1, [pc, #704]	; (8000b78 <OTM8009A_Init+0x328>)
 80008b8:	2000      	movs	r0, #0
 80008ba:	f001 f9a5 	bl	8001c08 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 80008be:	49af      	ldr	r1, [pc, #700]	; (8000b7c <OTM8009A_Init+0x32c>)
 80008c0:	2000      	movs	r0, #0
 80008c2:	f001 f9a1 	bl	8001c08 <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 80008c6:	49ae      	ldr	r1, [pc, #696]	; (8000b80 <OTM8009A_Init+0x330>)
 80008c8:	2000      	movs	r0, #0
 80008ca:	f001 f99d 	bl	8001c08 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 80008ce:	49ad      	ldr	r1, [pc, #692]	; (8000b84 <OTM8009A_Init+0x334>)
 80008d0:	2000      	movs	r0, #0
 80008d2:	f001 f999 	bl	8001c08 <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80008d6:	499f      	ldr	r1, [pc, #636]	; (8000b54 <OTM8009A_Init+0x304>)
 80008d8:	2000      	movs	r0, #0
 80008da:	f001 f995 	bl	8001c08 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 80008de:	49aa      	ldr	r1, [pc, #680]	; (8000b88 <OTM8009A_Init+0x338>)
 80008e0:	2000      	movs	r0, #0
 80008e2:	f001 f991 	bl	8001c08 <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80008e6:	49a9      	ldr	r1, [pc, #676]	; (8000b8c <OTM8009A_Init+0x33c>)
 80008e8:	2000      	movs	r0, #0
 80008ea:	f001 f98d 	bl	8001c08 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 80008ee:	49a8      	ldr	r1, [pc, #672]	; (8000b90 <OTM8009A_Init+0x340>)
 80008f0:	2000      	movs	r0, #0
 80008f2:	f001 f989 	bl	8001c08 <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 80008f6:	49a7      	ldr	r1, [pc, #668]	; (8000b94 <OTM8009A_Init+0x344>)
 80008f8:	2000      	movs	r0, #0
 80008fa:	f001 f985 	bl	8001c08 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 80008fe:	49a6      	ldr	r1, [pc, #664]	; (8000b98 <OTM8009A_Init+0x348>)
 8000900:	2000      	movs	r0, #0
 8000902:	f001 f981 	bl	8001c08 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 8000906:	49a5      	ldr	r1, [pc, #660]	; (8000b9c <OTM8009A_Init+0x34c>)
 8000908:	2000      	movs	r0, #0
 800090a:	f001 f97d 	bl	8001c08 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 800090e:	49a4      	ldr	r1, [pc, #656]	; (8000ba0 <OTM8009A_Init+0x350>)
 8000910:	2000      	movs	r0, #0
 8000912:	f001 f979 	bl	8001c08 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 8000916:	49a3      	ldr	r1, [pc, #652]	; (8000ba4 <OTM8009A_Init+0x354>)
 8000918:	2000      	movs	r0, #0
 800091a:	f001 f975 	bl	8001c08 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 800091e:	4997      	ldr	r1, [pc, #604]	; (8000b7c <OTM8009A_Init+0x32c>)
 8000920:	2000      	movs	r0, #0
 8000922:	f001 f971 	bl	8001c08 <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000926:	498b      	ldr	r1, [pc, #556]	; (8000b54 <OTM8009A_Init+0x304>)
 8000928:	2000      	movs	r0, #0
 800092a:	f001 f96d 	bl	8001c08 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 800092e:	499e      	ldr	r1, [pc, #632]	; (8000ba8 <OTM8009A_Init+0x358>)
 8000930:	2002      	movs	r0, #2
 8000932:	f001 f969 	bl	8001c08 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 8000936:	499d      	ldr	r1, [pc, #628]	; (8000bac <OTM8009A_Init+0x35c>)
 8000938:	2000      	movs	r0, #0
 800093a:	f001 f965 	bl	8001c08 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 800093e:	499c      	ldr	r1, [pc, #624]	; (8000bb0 <OTM8009A_Init+0x360>)
 8000940:	2000      	movs	r0, #0
 8000942:	f001 f961 	bl	8001c08 <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 8000946:	499b      	ldr	r1, [pc, #620]	; (8000bb4 <OTM8009A_Init+0x364>)
 8000948:	2000      	movs	r0, #0
 800094a:	f001 f95d 	bl	8001c08 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 800094e:	499a      	ldr	r1, [pc, #616]	; (8000bb8 <OTM8009A_Init+0x368>)
 8000950:	2000      	movs	r0, #0
 8000952:	f001 f959 	bl	8001c08 <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 8000956:	4999      	ldr	r1, [pc, #612]	; (8000bbc <OTM8009A_Init+0x36c>)
 8000958:	2000      	movs	r0, #0
 800095a:	f001 f955 	bl	8001c08 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 800095e:	4998      	ldr	r1, [pc, #608]	; (8000bc0 <OTM8009A_Init+0x370>)
 8000960:	2000      	movs	r0, #0
 8000962:	f001 f951 	bl	8001c08 <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8000966:	4989      	ldr	r1, [pc, #548]	; (8000b8c <OTM8009A_Init+0x33c>)
 8000968:	2000      	movs	r0, #0
 800096a:	f001 f94d 	bl	8001c08 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 800096e:	4995      	ldr	r1, [pc, #596]	; (8000bc4 <OTM8009A_Init+0x374>)
 8000970:	2000      	movs	r0, #0
 8000972:	f001 f949 	bl	8001c08 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8000976:	4987      	ldr	r1, [pc, #540]	; (8000b94 <OTM8009A_Init+0x344>)
 8000978:	2000      	movs	r0, #0
 800097a:	f001 f945 	bl	8001c08 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 800097e:	4992      	ldr	r1, [pc, #584]	; (8000bc8 <OTM8009A_Init+0x378>)
 8000980:	2000      	movs	r0, #0
 8000982:	f001 f941 	bl	8001c08 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 8000986:	4991      	ldr	r1, [pc, #580]	; (8000bcc <OTM8009A_Init+0x37c>)
 8000988:	2000      	movs	r0, #0
 800098a:	f001 f93d 	bl	8001c08 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 800098e:	4990      	ldr	r1, [pc, #576]	; (8000bd0 <OTM8009A_Init+0x380>)
 8000990:	2002      	movs	r0, #2
 8000992:	f001 f939 	bl	8001c08 <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8000996:	4971      	ldr	r1, [pc, #452]	; (8000b5c <OTM8009A_Init+0x30c>)
 8000998:	2000      	movs	r0, #0
 800099a:	f001 f935 	bl	8001c08 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 800099e:	498d      	ldr	r1, [pc, #564]	; (8000bd4 <OTM8009A_Init+0x384>)
 80009a0:	2006      	movs	r0, #6
 80009a2:	f001 f931 	bl	8001c08 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80009a6:	498c      	ldr	r1, [pc, #560]	; (8000bd8 <OTM8009A_Init+0x388>)
 80009a8:	2000      	movs	r0, #0
 80009aa:	f001 f92d 	bl	8001c08 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 80009ae:	498b      	ldr	r1, [pc, #556]	; (8000bdc <OTM8009A_Init+0x38c>)
 80009b0:	200e      	movs	r0, #14
 80009b2:	f001 f929 	bl	8001c08 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80009b6:	498a      	ldr	r1, [pc, #552]	; (8000be0 <OTM8009A_Init+0x390>)
 80009b8:	2000      	movs	r0, #0
 80009ba:	f001 f925 	bl	8001c08 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 80009be:	4989      	ldr	r1, [pc, #548]	; (8000be4 <OTM8009A_Init+0x394>)
 80009c0:	200e      	movs	r0, #14
 80009c2:	f001 f921 	bl	8001c08 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80009c6:	4988      	ldr	r1, [pc, #544]	; (8000be8 <OTM8009A_Init+0x398>)
 80009c8:	2000      	movs	r0, #0
 80009ca:	f001 f91d 	bl	8001c08 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 80009ce:	4987      	ldr	r1, [pc, #540]	; (8000bec <OTM8009A_Init+0x39c>)
 80009d0:	200a      	movs	r0, #10
 80009d2:	f001 f919 	bl	8001c08 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80009d6:	4986      	ldr	r1, [pc, #536]	; (8000bf0 <OTM8009A_Init+0x3a0>)
 80009d8:	2000      	movs	r0, #0
 80009da:	f001 f915 	bl	8001c08 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 80009de:	4985      	ldr	r1, [pc, #532]	; (8000bf4 <OTM8009A_Init+0x3a4>)
 80009e0:	2000      	movs	r0, #0
 80009e2:	f001 f911 	bl	8001c08 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80009e6:	495d      	ldr	r1, [pc, #372]	; (8000b5c <OTM8009A_Init+0x30c>)
 80009e8:	2000      	movs	r0, #0
 80009ea:	f001 f90d 	bl	8001c08 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 80009ee:	4982      	ldr	r1, [pc, #520]	; (8000bf8 <OTM8009A_Init+0x3a8>)
 80009f0:	200a      	movs	r0, #10
 80009f2:	f001 f909 	bl	8001c08 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 80009f6:	4981      	ldr	r1, [pc, #516]	; (8000bfc <OTM8009A_Init+0x3ac>)
 80009f8:	2000      	movs	r0, #0
 80009fa:	f001 f905 	bl	8001c08 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 80009fe:	4980      	ldr	r1, [pc, #512]	; (8000c00 <OTM8009A_Init+0x3b0>)
 8000a00:	200f      	movs	r0, #15
 8000a02:	f001 f901 	bl	8001c08 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8000a06:	4974      	ldr	r1, [pc, #464]	; (8000bd8 <OTM8009A_Init+0x388>)
 8000a08:	2000      	movs	r0, #0
 8000a0a:	f001 f8fd 	bl	8001c08 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 8000a0e:	497d      	ldr	r1, [pc, #500]	; (8000c04 <OTM8009A_Init+0x3b4>)
 8000a10:	200f      	movs	r0, #15
 8000a12:	f001 f8f9 	bl	8001c08 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8000a16:	4972      	ldr	r1, [pc, #456]	; (8000be0 <OTM8009A_Init+0x390>)
 8000a18:	2000      	movs	r0, #0
 8000a1a:	f001 f8f5 	bl	8001c08 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 8000a1e:	497a      	ldr	r1, [pc, #488]	; (8000c08 <OTM8009A_Init+0x3b8>)
 8000a20:	200a      	movs	r0, #10
 8000a22:	f001 f8f1 	bl	8001c08 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8000a26:	4970      	ldr	r1, [pc, #448]	; (8000be8 <OTM8009A_Init+0x398>)
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f001 f8ed 	bl	8001c08 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 8000a2e:	4977      	ldr	r1, [pc, #476]	; (8000c0c <OTM8009A_Init+0x3bc>)
 8000a30:	200f      	movs	r0, #15
 8000a32:	f001 f8e9 	bl	8001c08 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8000a36:	496e      	ldr	r1, [pc, #440]	; (8000bf0 <OTM8009A_Init+0x3a0>)
 8000a38:	2000      	movs	r0, #0
 8000a3a:	f001 f8e5 	bl	8001c08 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 8000a3e:	4974      	ldr	r1, [pc, #464]	; (8000c10 <OTM8009A_Init+0x3c0>)
 8000a40:	200f      	movs	r0, #15
 8000a42:	f001 f8e1 	bl	8001c08 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 8000a46:	4973      	ldr	r1, [pc, #460]	; (8000c14 <OTM8009A_Init+0x3c4>)
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f001 f8dd 	bl	8001c08 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 8000a4e:	4972      	ldr	r1, [pc, #456]	; (8000c18 <OTM8009A_Init+0x3c8>)
 8000a50:	200a      	movs	r0, #10
 8000a52:	f001 f8d9 	bl	8001c08 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 8000a56:	4971      	ldr	r1, [pc, #452]	; (8000c1c <OTM8009A_Init+0x3cc>)
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f001 f8d5 	bl	8001c08 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 8000a5e:	4970      	ldr	r1, [pc, #448]	; (8000c20 <OTM8009A_Init+0x3d0>)
 8000a60:	200a      	movs	r0, #10
 8000a62:	f001 f8d1 	bl	8001c08 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8000a66:	493d      	ldr	r1, [pc, #244]	; (8000b5c <OTM8009A_Init+0x30c>)
 8000a68:	2000      	movs	r0, #0
 8000a6a:	f001 f8cd 	bl	8001c08 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 8000a6e:	496d      	ldr	r1, [pc, #436]	; (8000c24 <OTM8009A_Init+0x3d4>)
 8000a70:	200a      	movs	r0, #10
 8000a72:	f001 f8c9 	bl	8001c08 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8000a76:	4961      	ldr	r1, [pc, #388]	; (8000bfc <OTM8009A_Init+0x3ac>)
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f001 f8c5 	bl	8001c08 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 8000a7e:	496a      	ldr	r1, [pc, #424]	; (8000c28 <OTM8009A_Init+0x3d8>)
 8000a80:	200f      	movs	r0, #15
 8000a82:	f001 f8c1 	bl	8001c08 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8000a86:	4954      	ldr	r1, [pc, #336]	; (8000bd8 <OTM8009A_Init+0x388>)
 8000a88:	2000      	movs	r0, #0
 8000a8a:	f001 f8bd 	bl	8001c08 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 8000a8e:	4967      	ldr	r1, [pc, #412]	; (8000c2c <OTM8009A_Init+0x3dc>)
 8000a90:	200f      	movs	r0, #15
 8000a92:	f001 f8b9 	bl	8001c08 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8000a96:	4952      	ldr	r1, [pc, #328]	; (8000be0 <OTM8009A_Init+0x390>)
 8000a98:	2000      	movs	r0, #0
 8000a9a:	f001 f8b5 	bl	8001c08 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 8000a9e:	4964      	ldr	r1, [pc, #400]	; (8000c30 <OTM8009A_Init+0x3e0>)
 8000aa0:	200a      	movs	r0, #10
 8000aa2:	f001 f8b1 	bl	8001c08 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8000aa6:	4950      	ldr	r1, [pc, #320]	; (8000be8 <OTM8009A_Init+0x398>)
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	f001 f8ad 	bl	8001c08 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 8000aae:	4961      	ldr	r1, [pc, #388]	; (8000c34 <OTM8009A_Init+0x3e4>)
 8000ab0:	200f      	movs	r0, #15
 8000ab2:	f001 f8a9 	bl	8001c08 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8000ab6:	494e      	ldr	r1, [pc, #312]	; (8000bf0 <OTM8009A_Init+0x3a0>)
 8000ab8:	2000      	movs	r0, #0
 8000aba:	f001 f8a5 	bl	8001c08 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 8000abe:	495e      	ldr	r1, [pc, #376]	; (8000c38 <OTM8009A_Init+0x3e8>)
 8000ac0:	200f      	movs	r0, #15
 8000ac2:	f001 f8a1 	bl	8001c08 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8000ac6:	4931      	ldr	r1, [pc, #196]	; (8000b8c <OTM8009A_Init+0x33c>)
 8000ac8:	2000      	movs	r0, #0
 8000aca:	f001 f89d 	bl	8001c08 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 8000ace:	495b      	ldr	r1, [pc, #364]	; (8000c3c <OTM8009A_Init+0x3ec>)
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	f001 f899 	bl	8001c08 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 8000ad6:	495a      	ldr	r1, [pc, #360]	; (8000c40 <OTM8009A_Init+0x3f0>)
 8000ad8:	2000      	movs	r0, #0
 8000ada:	f001 f895 	bl	8001c08 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 8000ade:	4959      	ldr	r1, [pc, #356]	; (8000c44 <OTM8009A_Init+0x3f4>)
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f001 f891 	bl	8001c08 <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 8000ae6:	4958      	ldr	r1, [pc, #352]	; (8000c48 <OTM8009A_Init+0x3f8>)
 8000ae8:	2000      	movs	r0, #0
 8000aea:	f001 f88d 	bl	8001c08 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 8000aee:	4957      	ldr	r1, [pc, #348]	; (8000c4c <OTM8009A_Init+0x3fc>)
 8000af0:	2000      	movs	r0, #0
 8000af2:	f001 f889 	bl	8001c08 <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000af6:	4917      	ldr	r1, [pc, #92]	; (8000b54 <OTM8009A_Init+0x304>)
 8000af8:	2000      	movs	r0, #0
 8000afa:	f001 f885 	bl	8001c08 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 8000afe:	4954      	ldr	r1, [pc, #336]	; (8000c50 <OTM8009A_Init+0x400>)
 8000b00:	2003      	movs	r0, #3
 8000b02:	f001 f881 	bl	8001c08 <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000b06:	4913      	ldr	r1, [pc, #76]	; (8000b54 <OTM8009A_Init+0x304>)
 8000b08:	2000      	movs	r0, #0
 8000b0a:	f001 f87d 	bl	8001c08 <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000b0e:	4911      	ldr	r1, [pc, #68]	; (8000b54 <OTM8009A_Init+0x304>)
 8000b10:	2000      	movs	r0, #0
 8000b12:	f001 f879 	bl	8001c08 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 8000b16:	494f      	ldr	r1, [pc, #316]	; (8000c54 <OTM8009A_Init+0x404>)
 8000b18:	2010      	movs	r0, #16
 8000b1a:	f001 f875 	bl	8001c08 <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000b1e:	490d      	ldr	r1, [pc, #52]	; (8000b54 <OTM8009A_Init+0x304>)
 8000b20:	2000      	movs	r0, #0
 8000b22:	f001 f871 	bl	8001c08 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 8000b26:	494c      	ldr	r1, [pc, #304]	; (8000c58 <OTM8009A_Init+0x408>)
 8000b28:	2010      	movs	r0, #16
 8000b2a:	f001 f86d 	bl	8001c08 <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 8000b2e:	494b      	ldr	r1, [pc, #300]	; (8000c5c <OTM8009A_Init+0x40c>)
 8000b30:	2000      	movs	r0, #0
 8000b32:	f001 f869 	bl	8001c08 <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 8000b36:	2078      	movs	r0, #120	; 0x78
 8000b38:	f000 faa4 	bl	8001084 <OTM8009A_IO_Delay>

  switch(ColorCoding)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	f000 8090 	beq.w	8000c64 <OTM8009A_Init+0x414>
 8000b44:	2b02      	cmp	r3, #2
 8000b46:	d000      	beq.n	8000b4a <OTM8009A_Init+0x2fa>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
    break;
  default :
    break;
 8000b48:	e091      	b.n	8000c6e <OTM8009A_Init+0x41e>
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 8000b4a:	4945      	ldr	r1, [pc, #276]	; (8000c60 <OTM8009A_Init+0x410>)
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	f001 f85b 	bl	8001c08 <DSI_IO_WriteCmd>
    break;
 8000b52:	e08c      	b.n	8000c6e <OTM8009A_Init+0x41e>
 8000b54:	0800ad00 	.word	0x0800ad00
 8000b58:	0800abb8 	.word	0x0800abb8
 8000b5c:	0800ad04 	.word	0x0800ad04
 8000b60:	0800abbc 	.word	0x0800abbc
 8000b64:	0800ad08 	.word	0x0800ad08
 8000b68:	0800ad0c 	.word	0x0800ad0c
 8000b6c:	0800ad10 	.word	0x0800ad10
 8000b70:	0800ad14 	.word	0x0800ad14
 8000b74:	0800ad18 	.word	0x0800ad18
 8000b78:	0800ad1c 	.word	0x0800ad1c
 8000b7c:	0800ad20 	.word	0x0800ad20
 8000b80:	0800ad24 	.word	0x0800ad24
 8000b84:	0800ad28 	.word	0x0800ad28
 8000b88:	0800ad2c 	.word	0x0800ad2c
 8000b8c:	0800ad30 	.word	0x0800ad30
 8000b90:	0800ad34 	.word	0x0800ad34
 8000b94:	0800ad38 	.word	0x0800ad38
 8000b98:	0800ad3c 	.word	0x0800ad3c
 8000b9c:	0800ad40 	.word	0x0800ad40
 8000ba0:	0800ad44 	.word	0x0800ad44
 8000ba4:	0800ad48 	.word	0x0800ad48
 8000ba8:	0800abe8 	.word	0x0800abe8
 8000bac:	0800ad4c 	.word	0x0800ad4c
 8000bb0:	0800ad50 	.word	0x0800ad50
 8000bb4:	0800ad54 	.word	0x0800ad54
 8000bb8:	0800ad58 	.word	0x0800ad58
 8000bbc:	0800ad5c 	.word	0x0800ad5c
 8000bc0:	0800ad60 	.word	0x0800ad60
 8000bc4:	0800ad64 	.word	0x0800ad64
 8000bc8:	0800ad68 	.word	0x0800ad68
 8000bcc:	0800ad6c 	.word	0x0800ad6c
 8000bd0:	0800abec 	.word	0x0800abec
 8000bd4:	0800abf0 	.word	0x0800abf0
 8000bd8:	0800ad70 	.word	0x0800ad70
 8000bdc:	0800abf8 	.word	0x0800abf8
 8000be0:	0800ad74 	.word	0x0800ad74
 8000be4:	0800ac08 	.word	0x0800ac08
 8000be8:	0800ad78 	.word	0x0800ad78
 8000bec:	0800ac18 	.word	0x0800ac18
 8000bf0:	0800ad7c 	.word	0x0800ad7c
 8000bf4:	0800adb4 	.word	0x0800adb4
 8000bf8:	0800ac24 	.word	0x0800ac24
 8000bfc:	0800ad80 	.word	0x0800ad80
 8000c00:	0800ac30 	.word	0x0800ac30
 8000c04:	0800ac40 	.word	0x0800ac40
 8000c08:	0800ac50 	.word	0x0800ac50
 8000c0c:	0800ac5c 	.word	0x0800ac5c
 8000c10:	0800ac6c 	.word	0x0800ac6c
 8000c14:	0800ad84 	.word	0x0800ad84
 8000c18:	0800ac7c 	.word	0x0800ac7c
 8000c1c:	0800ad88 	.word	0x0800ad88
 8000c20:	0800ac88 	.word	0x0800ac88
 8000c24:	0800ac94 	.word	0x0800ac94
 8000c28:	0800aca0 	.word	0x0800aca0
 8000c2c:	0800acb0 	.word	0x0800acb0
 8000c30:	0800acc0 	.word	0x0800acc0
 8000c34:	0800accc 	.word	0x0800accc
 8000c38:	0800acdc 	.word	0x0800acdc
 8000c3c:	0800adb8 	.word	0x0800adb8
 8000c40:	0800adbc 	.word	0x0800adbc
 8000c44:	0800adc0 	.word	0x0800adc0
 8000c48:	0800adc4 	.word	0x0800adc4
 8000c4c:	0800adc8 	.word	0x0800adc8
 8000c50:	0800acec 	.word	0x0800acec
 8000c54:	0800abc0 	.word	0x0800abc0
 8000c58:	0800abd4 	.word	0x0800abd4
 8000c5c:	0800ad8c 	.word	0x0800ad8c
 8000c60:	0800ad90 	.word	0x0800ad90
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8000c64:	491a      	ldr	r1, [pc, #104]	; (8000cd0 <OTM8009A_Init+0x480>)
 8000c66:	2000      	movs	r0, #0
 8000c68:	f000 ffce 	bl	8001c08 <DSI_IO_WriteCmd>
    break;
 8000c6c:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d10b      	bne.n	8000c8c <OTM8009A_Init+0x43c>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8000c74:	4917      	ldr	r1, [pc, #92]	; (8000cd4 <OTM8009A_Init+0x484>)
 8000c76:	2000      	movs	r0, #0
 8000c78:	f000 ffc6 	bl	8001c08 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 8000c7c:	4916      	ldr	r1, [pc, #88]	; (8000cd8 <OTM8009A_Init+0x488>)
 8000c7e:	2004      	movs	r0, #4
 8000c80:	f000 ffc2 	bl	8001c08 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8000c84:	4915      	ldr	r1, [pc, #84]	; (8000cdc <OTM8009A_Init+0x48c>)
 8000c86:	2004      	movs	r0, #4
 8000c88:	f000 ffbe 	bl	8001c08 <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 8000c8c:	4914      	ldr	r1, [pc, #80]	; (8000ce0 <OTM8009A_Init+0x490>)
 8000c8e:	2000      	movs	r0, #0
 8000c90:	f000 ffba 	bl	8001c08 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8000c94:	4913      	ldr	r1, [pc, #76]	; (8000ce4 <OTM8009A_Init+0x494>)
 8000c96:	2000      	movs	r0, #0
 8000c98:	f000 ffb6 	bl	8001c08 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 8000c9c:	4912      	ldr	r1, [pc, #72]	; (8000ce8 <OTM8009A_Init+0x498>)
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f000 ffb2 	bl	8001c08 <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8000ca4:	4911      	ldr	r1, [pc, #68]	; (8000cec <OTM8009A_Init+0x49c>)
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f000 ffae 	bl	8001c08 <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 8000cac:	4910      	ldr	r1, [pc, #64]	; (8000cf0 <OTM8009A_Init+0x4a0>)
 8000cae:	2000      	movs	r0, #0
 8000cb0:	f000 ffaa 	bl	8001c08 <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000cb4:	490f      	ldr	r1, [pc, #60]	; (8000cf4 <OTM8009A_Init+0x4a4>)
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	f000 ffa6 	bl	8001c08 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 8000cbc:	490e      	ldr	r1, [pc, #56]	; (8000cf8 <OTM8009A_Init+0x4a8>)
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	f000 ffa2 	bl	8001c08 <DSI_IO_WriteCmd>

  return 0;
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	0800ad94 	.word	0x0800ad94
 8000cd4:	0800ad98 	.word	0x0800ad98
 8000cd8:	0800acf0 	.word	0x0800acf0
 8000cdc:	0800acf8 	.word	0x0800acf8
 8000ce0:	0800ad9c 	.word	0x0800ad9c
 8000ce4:	0800ada0 	.word	0x0800ada0
 8000ce8:	0800ada4 	.word	0x0800ada4
 8000cec:	0800ada8 	.word	0x0800ada8
 8000cf0:	0800adac 	.word	0x0800adac
 8000cf4:	0800ad00 	.word	0x0800ad00
 8000cf8:	0800adb0 	.word	0x0800adb0

08000cfc <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08c      	sub	sp, #48	; 0x30
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4a58      	ldr	r2, [pc, #352]	; (8000e68 <I2Cx_MspInit+0x16c>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d15b      	bne.n	8000dc4 <I2Cx_MspInit+0xc8>
  {
  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_AUDIO_I2Cx_SCL_GPIO_CLK_ENABLE();
 8000d0c:	4b57      	ldr	r3, [pc, #348]	; (8000e6c <I2Cx_MspInit+0x170>)
 8000d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d10:	4a56      	ldr	r2, [pc, #344]	; (8000e6c <I2Cx_MspInit+0x170>)
 8000d12:	f043 0308 	orr.w	r3, r3, #8
 8000d16:	6313      	str	r3, [r2, #48]	; 0x30
 8000d18:	4b54      	ldr	r3, [pc, #336]	; (8000e6c <I2Cx_MspInit+0x170>)
 8000d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1c:	f003 0308 	and.w	r3, r3, #8
 8000d20:	61bb      	str	r3, [r7, #24]
 8000d22:	69bb      	ldr	r3, [r7, #24]
  DISCOVERY_AUDIO_I2Cx_SDA_GPIO_CLK_ENABLE();
 8000d24:	4b51      	ldr	r3, [pc, #324]	; (8000e6c <I2Cx_MspInit+0x170>)
 8000d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d28:	4a50      	ldr	r2, [pc, #320]	; (8000e6c <I2Cx_MspInit+0x170>)
 8000d2a:	f043 0302 	orr.w	r3, r3, #2
 8000d2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d30:	4b4e      	ldr	r3, [pc, #312]	; (8000e6c <I2Cx_MspInit+0x170>)
 8000d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d34:	f003 0302 	and.w	r3, r3, #2
 8000d38:	617b      	str	r3, [r7, #20]
 8000d3a:	697b      	ldr	r3, [r7, #20]
  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8000d3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d40:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000d42:	2312      	movs	r3, #18
 8000d44:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_AF;
 8000d4e:	2304      	movs	r3, #4
 8000d50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_GPIO_PORT, &gpio_init_structure);
 8000d52:	f107 031c 	add.w	r3, r7, #28
 8000d56:	4619      	mov	r1, r3
 8000d58:	4845      	ldr	r0, [pc, #276]	; (8000e70 <I2Cx_MspInit+0x174>)
 8000d5a:	f003 ffa9 	bl	8004cb0 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8000d5e:	2380      	movs	r3, #128	; 0x80
 8000d60:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SDA_AF;
 8000d62:	230b      	movs	r3, #11
 8000d64:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SDA_GPIO_PORT, &gpio_init_structure);
 8000d66:	f107 031c 	add.w	r3, r7, #28
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4841      	ldr	r0, [pc, #260]	; (8000e74 <I2Cx_MspInit+0x178>)
 8000d6e:	f003 ff9f 	bl	8004cb0 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8000d72:	4b3e      	ldr	r3, [pc, #248]	; (8000e6c <I2Cx_MspInit+0x170>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d76:	4a3d      	ldr	r2, [pc, #244]	; (8000e6c <I2Cx_MspInit+0x170>)
 8000d78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d7e:	4b3b      	ldr	r3, [pc, #236]	; (8000e6c <I2Cx_MspInit+0x170>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000d86:	613b      	str	r3, [r7, #16]
 8000d88:	693b      	ldr	r3, [r7, #16]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8000d8a:	4b38      	ldr	r3, [pc, #224]	; (8000e6c <I2Cx_MspInit+0x170>)
 8000d8c:	6a1b      	ldr	r3, [r3, #32]
 8000d8e:	4a37      	ldr	r2, [pc, #220]	; (8000e6c <I2Cx_MspInit+0x170>)
 8000d90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d94:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8000d96:	4b35      	ldr	r3, [pc, #212]	; (8000e6c <I2Cx_MspInit+0x170>)
 8000d98:	6a1b      	ldr	r3, [r3, #32]
 8000d9a:	4a34      	ldr	r2, [pc, #208]	; (8000e6c <I2Cx_MspInit+0x170>)
 8000d9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000da0:	6213      	str	r3, [r2, #32]

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000da2:	2200      	movs	r2, #0
 8000da4:	210f      	movs	r1, #15
 8000da6:	205f      	movs	r0, #95	; 0x5f
 8000da8:	f002 fa77 	bl	800329a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8000dac:	205f      	movs	r0, #95	; 0x5f
 8000dae:	f002 fa90 	bl	80032d2 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8000db2:	2200      	movs	r2, #0
 8000db4:	210f      	movs	r1, #15
 8000db6:	2060      	movs	r0, #96	; 0x60
 8000db8:	f002 fa6f 	bl	800329a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);    
 8000dbc:	2060      	movs	r0, #96	; 0x60
 8000dbe:	f002 fa88 	bl	80032d2 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8000dc2:	e04d      	b.n	8000e60 <I2Cx_MspInit+0x164>
  DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000dc4:	4b29      	ldr	r3, [pc, #164]	; (8000e6c <I2Cx_MspInit+0x170>)
 8000dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc8:	4a28      	ldr	r2, [pc, #160]	; (8000e6c <I2Cx_MspInit+0x170>)
 8000dca:	f043 0302 	orr.w	r3, r3, #2
 8000dce:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd0:	4b26      	ldr	r3, [pc, #152]	; (8000e6c <I2Cx_MspInit+0x170>)
 8000dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd4:	f003 0302 	and.w	r3, r3, #2
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	68fb      	ldr	r3, [r7, #12]
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8000ddc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000de0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000de2:	2312      	movs	r3, #18
 8000de4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000dea:	2302      	movs	r3, #2
 8000dec:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8000dee:	2304      	movs	r3, #4
 8000df0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000df2:	f107 031c 	add.w	r3, r7, #28
 8000df6:	4619      	mov	r1, r3
 8000df8:	481e      	ldr	r0, [pc, #120]	; (8000e74 <I2Cx_MspInit+0x178>)
 8000dfa:	f003 ff59 	bl	8004cb0 <HAL_GPIO_Init>
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8000dfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000e04:	f107 031c 	add.w	r3, r7, #28
 8000e08:	4619      	mov	r1, r3
 8000e0a:	481a      	ldr	r0, [pc, #104]	; (8000e74 <I2Cx_MspInit+0x178>)
 8000e0c:	f003 ff50 	bl	8004cb0 <HAL_GPIO_Init>
  DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8000e10:	4b16      	ldr	r3, [pc, #88]	; (8000e6c <I2Cx_MspInit+0x170>)
 8000e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e14:	4a15      	ldr	r2, [pc, #84]	; (8000e6c <I2Cx_MspInit+0x170>)
 8000e16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e1c:	4b13      	ldr	r3, [pc, #76]	; (8000e6c <I2Cx_MspInit+0x170>)
 8000e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e24:	60bb      	str	r3, [r7, #8]
 8000e26:	68bb      	ldr	r3, [r7, #8]
  DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8000e28:	4b10      	ldr	r3, [pc, #64]	; (8000e6c <I2Cx_MspInit+0x170>)
 8000e2a:	6a1b      	ldr	r3, [r3, #32]
 8000e2c:	4a0f      	ldr	r2, [pc, #60]	; (8000e6c <I2Cx_MspInit+0x170>)
 8000e2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e32:	6213      	str	r3, [r2, #32]
  DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8000e34:	4b0d      	ldr	r3, [pc, #52]	; (8000e6c <I2Cx_MspInit+0x170>)
 8000e36:	6a1b      	ldr	r3, [r3, #32]
 8000e38:	4a0c      	ldr	r2, [pc, #48]	; (8000e6c <I2Cx_MspInit+0x170>)
 8000e3a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000e3e:	6213      	str	r3, [r2, #32]
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8000e40:	2200      	movs	r2, #0
 8000e42:	210f      	movs	r1, #15
 8000e44:	201f      	movs	r0, #31
 8000e46:	f002 fa28 	bl	800329a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8000e4a:	201f      	movs	r0, #31
 8000e4c:	f002 fa41 	bl	80032d2 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8000e50:	2200      	movs	r2, #0
 8000e52:	210f      	movs	r1, #15
 8000e54:	2020      	movs	r0, #32
 8000e56:	f002 fa20 	bl	800329a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8000e5a:	2020      	movs	r0, #32
 8000e5c:	f002 fa39 	bl	80032d2 <HAL_NVIC_EnableIRQ>
}
 8000e60:	bf00      	nop
 8000e62:	3730      	adds	r7, #48	; 0x30
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	200000d0 	.word	0x200000d0
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	40020c00 	.word	0x40020c00
 8000e74:	40020400 	.word	0x40020400

08000e78 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f004 fcfd 	bl	8005880 <HAL_I2C_GetState>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d125      	bne.n	8000ed8 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a14      	ldr	r2, [pc, #80]	; (8000ee0 <I2Cx_Init+0x68>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d103      	bne.n	8000e9c <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4a13      	ldr	r2, [pc, #76]	; (8000ee4 <I2Cx_Init+0x6c>)
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	e002      	b.n	8000ea2 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4a12      	ldr	r2, [pc, #72]	; (8000ee8 <I2Cx_Init+0x70>)
 8000ea0:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a11      	ldr	r2, [pc, #68]	; (8000eec <I2Cx_Init+0x74>)
 8000ea6:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f7ff ff15 	bl	8000cfc <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f004 f9d2 	bl	800527c <HAL_I2C_Init>
  }
}
 8000ed8:	bf00      	nop
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	200000d0 	.word	0x200000d0
 8000ee4:	40006000 	.word	0x40006000
 8000ee8:	40005400 	.word	0x40005400
 8000eec:	40912732 	.word	0x40912732

08000ef0 <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08a      	sub	sp, #40	; 0x28
 8000ef4:	af04      	add	r7, sp, #16
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	4608      	mov	r0, r1
 8000efa:	4611      	mov	r1, r2
 8000efc:	461a      	mov	r2, r3
 8000efe:	4603      	mov	r3, r0
 8000f00:	72fb      	strb	r3, [r7, #11]
 8000f02:	460b      	mov	r3, r1
 8000f04:	813b      	strh	r3, [r7, #8]
 8000f06:	4613      	mov	r3, r2
 8000f08:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000f0e:	7afb      	ldrb	r3, [r7, #11]
 8000f10:	b299      	uxth	r1, r3
 8000f12:	88f8      	ldrh	r0, [r7, #6]
 8000f14:	893a      	ldrh	r2, [r7, #8]
 8000f16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f1a:	9302      	str	r3, [sp, #8]
 8000f1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f1e:	9301      	str	r3, [sp, #4]
 8000f20:	6a3b      	ldr	r3, [r7, #32]
 8000f22:	9300      	str	r3, [sp, #0]
 8000f24:	4603      	mov	r3, r0
 8000f26:	68f8      	ldr	r0, [r7, #12]
 8000f28:	f004 fb90 	bl	800564c <HAL_I2C_Mem_Read>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8000f30:	7dfb      	ldrb	r3, [r7, #23]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d004      	beq.n	8000f40 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8000f36:	7afb      	ldrb	r3, [r7, #11]
 8000f38:	4619      	mov	r1, r3
 8000f3a:	68f8      	ldr	r0, [r7, #12]
 8000f3c:	f000 f832 	bl	8000fa4 <I2Cx_Error>
  }
  return status;
 8000f40:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3718      	adds	r7, #24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b08a      	sub	sp, #40	; 0x28
 8000f4e:	af04      	add	r7, sp, #16
 8000f50:	60f8      	str	r0, [r7, #12]
 8000f52:	4608      	mov	r0, r1
 8000f54:	4611      	mov	r1, r2
 8000f56:	461a      	mov	r2, r3
 8000f58:	4603      	mov	r3, r0
 8000f5a:	72fb      	strb	r3, [r7, #11]
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	813b      	strh	r3, [r7, #8]
 8000f60:	4613      	mov	r3, r2
 8000f62:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000f64:	2300      	movs	r3, #0
 8000f66:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000f68:	7afb      	ldrb	r3, [r7, #11]
 8000f6a:	b299      	uxth	r1, r3
 8000f6c:	88f8      	ldrh	r0, [r7, #6]
 8000f6e:	893a      	ldrh	r2, [r7, #8]
 8000f70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f74:	9302      	str	r3, [sp, #8]
 8000f76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f78:	9301      	str	r3, [sp, #4]
 8000f7a:	6a3b      	ldr	r3, [r7, #32]
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	4603      	mov	r3, r0
 8000f80:	68f8      	ldr	r0, [r7, #12]
 8000f82:	f004 fa4f 	bl	8005424 <HAL_I2C_Mem_Write>
 8000f86:	4603      	mov	r3, r0
 8000f88:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8000f8a:	7dfb      	ldrb	r3, [r7, #23]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d004      	beq.n	8000f9a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8000f90:	7afb      	ldrb	r3, [r7, #11]
 8000f92:	4619      	mov	r1, r3
 8000f94:	68f8      	ldr	r0, [r7, #12]
 8000f96:	f000 f805 	bl	8000fa4 <I2Cx_Error>
  }
  return status;
 8000f9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3718      	adds	r7, #24
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	460b      	mov	r3, r1
 8000fae:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f004 f9f3 	bl	800539c <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f7ff ff5e 	bl	8000e78 <I2Cx_Init>
}
 8000fbc:	bf00      	nop
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8000fc8:	4802      	ldr	r0, [pc, #8]	; (8000fd4 <TS_IO_Init+0x10>)
 8000fca:	f7ff ff55 	bl	8000e78 <I2Cx_Init>
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	200000d0 	.word	0x200000d0

08000fd8 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af02      	add	r7, sp, #8
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	71bb      	strb	r3, [r7, #6]
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8000fea:	79bb      	ldrb	r3, [r7, #6]
 8000fec:	b29a      	uxth	r2, r3
 8000fee:	79f9      	ldrb	r1, [r7, #7]
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	9301      	str	r3, [sp, #4]
 8000ff4:	1d7b      	adds	r3, r7, #5
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	4803      	ldr	r0, [pc, #12]	; (8001008 <TS_IO_Write+0x30>)
 8000ffc:	f7ff ffa5 	bl	8000f4a <I2Cx_WriteMultiple>
}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	200000d0 	.word	0x200000d0

0800100c <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af02      	add	r7, sp, #8
 8001012:	4603      	mov	r3, r0
 8001014:	460a      	mov	r2, r1
 8001016:	71fb      	strb	r3, [r7, #7]
 8001018:	4613      	mov	r3, r2
 800101a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001020:	79bb      	ldrb	r3, [r7, #6]
 8001022:	b29a      	uxth	r2, r3
 8001024:	79f9      	ldrb	r1, [r7, #7]
 8001026:	2301      	movs	r3, #1
 8001028:	9301      	str	r3, [sp, #4]
 800102a:	f107 030f 	add.w	r3, r7, #15
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	2301      	movs	r3, #1
 8001032:	4804      	ldr	r0, [pc, #16]	; (8001044 <TS_IO_Read+0x38>)
 8001034:	f7ff ff5c 	bl	8000ef0 <I2Cx_ReadMultiple>

  return read_value;
 8001038:	7bfb      	ldrb	r3, [r7, #15]
}
 800103a:	4618      	mov	r0, r3
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	200000d0 	.word	0x200000d0

08001048 <TS_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af02      	add	r7, sp, #8
 800104e:	603a      	str	r2, [r7, #0]
 8001050:	461a      	mov	r2, r3
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
 8001056:	460b      	mov	r3, r1
 8001058:	71bb      	strb	r3, [r7, #6]
 800105a:	4613      	mov	r3, r2
 800105c:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800105e:	79bb      	ldrb	r3, [r7, #6]
 8001060:	b29a      	uxth	r2, r3
 8001062:	79f9      	ldrb	r1, [r7, #7]
 8001064:	88bb      	ldrh	r3, [r7, #4]
 8001066:	9301      	str	r3, [sp, #4]
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2301      	movs	r3, #1
 800106e:	4804      	ldr	r0, [pc, #16]	; (8001080 <TS_IO_ReadMultiple+0x38>)
 8001070:	f7ff ff3e 	bl	8000ef0 <I2Cx_ReadMultiple>
 8001074:	4603      	mov	r3, r0
 8001076:	b29b      	uxth	r3, r3
}
 8001078:	4618      	mov	r0, r3
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	200000d0 	.word	0x200000d0

08001084 <OTM8009A_IO_Delay>:
/**
  * @brief  OTM8009A delay
  * @param  Delay: Delay in ms
  */
void OTM8009A_IO_Delay(uint32_t Delay)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f001 fb5f 	bl	8002750 <HAL_Delay>
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <BSP_LCD_Init>:
/**
  * @brief  Initializes the DSI LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 800109e:	2001      	movs	r0, #1
 80010a0:	f000 f804 	bl	80010ac <BSP_LCD_InitEx>
 80010a4:	4603      	mov	r3, r0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	bd80      	pop	{r7, pc}
	...

080010ac <BSP_LCD_InitEx>:
  *     - OTM8009A LCD Display IC Driver ititialization
  * @param  orientation: LCD orientation, can be LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(LCD_OrientationTypeDef orientation)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b090      	sub	sp, #64	; 0x40
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
  DSI_PLLInitTypeDef dsiPllInit;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  uint32_t LcdClock  = 27429; /*!< LcdClk = 27429 kHz */
 80010b6:	f646 3325 	movw	r3, #27429	; 0x6b25
 80010ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t read_id = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	877b      	strh	r3, [r7, #58]	; 0x3a

  uint32_t laneByteClk_kHz = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t                   HFP; /*!< Horizontal Front Porch time in units of lcdClk */
  uint32_t                   HACT; /*!< Horizontal Active time in units of lcdClk = imageSize X in pixels to display */

  /* Toggle Hardware Reset of the DSI LCD using
  * its XRES signal (active low) */
  BSP_LCD_Reset();
 80010c4:	f000 f936 	bl	8001334 <BSP_LCD_Reset>

  /* Check the connected monitor */
  read_id = LCD_IO_GetID();
 80010c8:	f000 fdc8 	bl	8001c5c <LCD_IO_GetID>
 80010cc:	4603      	mov	r3, r0
 80010ce:	877b      	strh	r3, [r7, #58]	; 0x3a
  else if(read_id != LCD_DSI_ID)
  {
    return LCD_ERROR;  
  }
#else
  if(read_id != LCD_DSI_ID)
 80010d0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80010d2:	2b11      	cmp	r3, #17
 80010d4:	d001      	beq.n	80010da <BSP_LCD_InitEx+0x2e>
  {
    return LCD_ERROR;  
 80010d6:	2301      	movs	r3, #1
 80010d8:	e113      	b.n	8001302 <BSP_LCD_InitEx+0x256>
  * This will set IP blocks LTDC, DSI and DMA2D
  * - out of reset
  * - clocked
  * - NVIC IRQ related to IP blocks enabled
  */
  BSP_LCD_MspInit();
 80010da:	f000 fdc7 	bl	8001c6c <BSP_LCD_MspInit>

/*************************DSI Initialization***********************************/  

  /* Base address of DSI Host/Wrapper registers to be set before calling De-Init */
  hdsi_discovery.Instance = DSI;
 80010de:	4b8b      	ldr	r3, [pc, #556]	; (800130c <BSP_LCD_InitEx+0x260>)
 80010e0:	4a8b      	ldr	r2, [pc, #556]	; (8001310 <BSP_LCD_InitEx+0x264>)
 80010e2:	601a      	str	r2, [r3, #0]

  HAL_DSI_DeInit(&(hdsi_discovery));
 80010e4:	4889      	ldr	r0, [pc, #548]	; (800130c <BSP_LCD_InitEx+0x260>)
 80010e6:	f002 fed5 	bl	8003e94 <HAL_DSI_DeInit>

  dsiPllInit.PLLNDIV  = 100;
 80010ea:	2364      	movs	r3, #100	; 0x64
 80010ec:	60bb      	str	r3, [r7, #8]
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
 80010ee:	2305      	movs	r3, #5
 80010f0:	60fb      	str	r3, [r7, #12]
  dsiPllInit.PLLODF  = DSI_PLL_OUT_DIV1;
 80010f2:	2300      	movs	r3, #0
 80010f4:	613b      	str	r3, [r7, #16]
  laneByteClk_kHz = 62500; /* 500 MHz / 8 = 62.5 MHz = 62500 kHz */
 80010f6:	f24f 4324 	movw	r3, #62500	; 0xf424
 80010fa:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set number of Lanes */
  hdsi_discovery.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 80010fc:	4b83      	ldr	r3, [pc, #524]	; (800130c <BSP_LCD_InitEx+0x260>)
 80010fe:	2201      	movs	r2, #1
 8001100:	60da      	str	r2, [r3, #12]

  /* TXEscapeCkdiv = f(LaneByteClk)/15.62 = 4 */
  hdsi_discovery.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 8001102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001104:	089b      	lsrs	r3, r3, #2
 8001106:	4a83      	ldr	r2, [pc, #524]	; (8001314 <BSP_LCD_InitEx+0x268>)
 8001108:	fba2 2303 	umull	r2, r3, r2, r3
 800110c:	0a9b      	lsrs	r3, r3, #10
 800110e:	4a7f      	ldr	r2, [pc, #508]	; (800130c <BSP_LCD_InitEx+0x260>)
 8001110:	6093      	str	r3, [r2, #8]

  HAL_DSI_Init(&(hdsi_discovery), &(dsiPllInit));
 8001112:	f107 0308 	add.w	r3, r7, #8
 8001116:	4619      	mov	r1, r3
 8001118:	487c      	ldr	r0, [pc, #496]	; (800130c <BSP_LCD_InitEx+0x260>)
 800111a:	f002 fda1 	bl	8003c60 <HAL_DSI_Init>

  /* Timing parameters for all Video modes
  * Set Timing parameters of LTDC depending on its chosen orientation
  */
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d108      	bne.n	8001136 <BSP_LCD_InitEx+0x8a>
  {
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 8001124:	4b7c      	ldr	r3, [pc, #496]	; (8001318 <BSP_LCD_InitEx+0x26c>)
 8001126:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800112a:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 800112c:	4b7b      	ldr	r3, [pc, #492]	; (800131c <BSP_LCD_InitEx+0x270>)
 800112e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	e007      	b.n	8001146 <BSP_LCD_InitEx+0x9a>
  }
  else
  {
    /* lcd_orientation == LCD_ORIENTATION_LANDSCAPE */
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 8001136:	4b78      	ldr	r3, [pc, #480]	; (8001318 <BSP_LCD_InitEx+0x26c>)
 8001138:	f44f 7248 	mov.w	r2, #800	; 0x320
 800113c:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 800113e:	4b77      	ldr	r3, [pc, #476]	; (800131c <BSP_LCD_InitEx+0x270>)
 8001140:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001144:	601a      	str	r2, [r3, #0]
  }

  HACT = lcd_x_size;
 8001146:	4b74      	ldr	r3, [pc, #464]	; (8001318 <BSP_LCD_InitEx+0x26c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	633b      	str	r3, [r7, #48]	; 0x30
  VACT = lcd_y_size;
 800114c:	4b73      	ldr	r3, [pc, #460]	; (800131c <BSP_LCD_InitEx+0x270>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* The following values are same for portrait and landscape orientations */
  VSA  = OTM8009A_480X800_VSYNC;        /* 12  */
 8001152:	2301      	movs	r3, #1
 8001154:	62bb      	str	r3, [r7, #40]	; 0x28
  VBP  = OTM8009A_480X800_VBP;          /* 12  */
 8001156:	230f      	movs	r3, #15
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
  VFP  = OTM8009A_480X800_VFP;          /* 12  */
 800115a:	2310      	movs	r3, #16
 800115c:	623b      	str	r3, [r7, #32]
  HSA  = OTM8009A_480X800_HSYNC;        /* 63  */
 800115e:	2302      	movs	r3, #2
 8001160:	61fb      	str	r3, [r7, #28]
  HBP  = OTM8009A_480X800_HBP;          /* 120 */
 8001162:	2322      	movs	r3, #34	; 0x22
 8001164:	61bb      	str	r3, [r7, #24]
  HFP  = OTM8009A_480X800_HFP;          /* 120 */   
 8001166:	2322      	movs	r3, #34	; 0x22
 8001168:	617b      	str	r3, [r7, #20]

  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 800116a:	4b6d      	ldr	r3, [pc, #436]	; (8001320 <BSP_LCD_InitEx+0x274>)
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 8001170:	4b6b      	ldr	r3, [pc, #428]	; (8001320 <BSP_LCD_InitEx+0x274>)
 8001172:	2205      	movs	r2, #5
 8001174:	605a      	str	r2, [r3, #4]
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8001176:	4b6a      	ldr	r3, [pc, #424]	; (8001320 <BSP_LCD_InitEx+0x274>)
 8001178:	2200      	movs	r2, #0
 800117a:	621a      	str	r2, [r3, #32]
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 800117c:	4b68      	ldr	r3, [pc, #416]	; (8001320 <BSP_LCD_InitEx+0x274>)
 800117e:	2200      	movs	r2, #0
 8001180:	61da      	str	r2, [r3, #28]
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 8001182:	4b67      	ldr	r3, [pc, #412]	; (8001320 <BSP_LCD_InitEx+0x274>)
 8001184:	2200      	movs	r2, #0
 8001186:	625a      	str	r2, [r3, #36]	; 0x24
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 8001188:	4b65      	ldr	r3, [pc, #404]	; (8001320 <BSP_LCD_InitEx+0x274>)
 800118a:	2202      	movs	r2, #2
 800118c:	60da      	str	r2, [r3, #12]
  hdsivideo_handle.NullPacketSize = 0xFFF;
 800118e:	4b64      	ldr	r3, [pc, #400]	; (8001320 <BSP_LCD_InitEx+0x274>)
 8001190:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001194:	619a      	str	r2, [r3, #24]
  hdsivideo_handle.NumberOfChunks = 0;
 8001196:	4b62      	ldr	r3, [pc, #392]	; (8001320 <BSP_LCD_InitEx+0x274>)
 8001198:	2200      	movs	r2, #0
 800119a:	615a      	str	r2, [r3, #20]
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 800119c:	4a60      	ldr	r2, [pc, #384]	; (8001320 <BSP_LCD_InitEx+0x274>)
 800119e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011a0:	6113      	str	r3, [r2, #16]
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz)/LcdClock;
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80011a6:	fb02 f203 	mul.w	r2, r2, r3
 80011aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b0:	4a5b      	ldr	r2, [pc, #364]	; (8001320 <BSP_LCD_InitEx+0x274>)
 80011b2:	6293      	str	r3, [r2, #40]	; 0x28
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz)/LcdClock;
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80011b8:	fb02 f203 	mul.w	r2, r2, r3
 80011bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011be:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c2:	4a57      	ldr	r2, [pc, #348]	; (8001320 <BSP_LCD_InitEx+0x274>)
 80011c4:	62d3      	str	r3, [r2, #44]	; 0x2c
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz)/LcdClock; /* Value depending on display orientation choice portrait/landscape */
 80011c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	441a      	add	r2, r3
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	441a      	add	r2, r3
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	4413      	add	r3, r2
 80011d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80011d6:	fb02 f203 	mul.w	r2, r2, r3
 80011da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80011e0:	4a4f      	ldr	r2, [pc, #316]	; (8001320 <BSP_LCD_InitEx+0x274>)
 80011e2:	6313      	str	r3, [r2, #48]	; 0x30
  hdsivideo_handle.VerticalSyncActive        = VSA;
 80011e4:	4a4e      	ldr	r2, [pc, #312]	; (8001320 <BSP_LCD_InitEx+0x274>)
 80011e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011e8:	6353      	str	r3, [r2, #52]	; 0x34
  hdsivideo_handle.VerticalBackPorch         = VBP;
 80011ea:	4a4d      	ldr	r2, [pc, #308]	; (8001320 <BSP_LCD_InitEx+0x274>)
 80011ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ee:	6393      	str	r3, [r2, #56]	; 0x38
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 80011f0:	4a4b      	ldr	r2, [pc, #300]	; (8001320 <BSP_LCD_InitEx+0x274>)
 80011f2:	6a3b      	ldr	r3, [r7, #32]
 80011f4:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 80011f6:	4a4a      	ldr	r2, [pc, #296]	; (8001320 <BSP_LCD_InitEx+0x274>)
 80011f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011fa:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable or disable sending LP command while streaming is active in video mode */
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 80011fc:	4b48      	ldr	r3, [pc, #288]	; (8001320 <BSP_LCD_InitEx+0x274>)
 80011fe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001202:	645a      	str	r2, [r3, #68]	; 0x44

  /* Largest packet size possible to transmit in LP mode in VSA, VBP, VFP regions */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPLargestPacketSize = 16;
 8001204:	4b46      	ldr	r3, [pc, #280]	; (8001320 <BSP_LCD_InitEx+0x274>)
 8001206:	2210      	movs	r2, #16
 8001208:	649a      	str	r2, [r3, #72]	; 0x48

  /* Largest packet size possible to transmit in LP mode in HFP region during VACT period */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 800120a:	4b45      	ldr	r3, [pc, #276]	; (8001320 <BSP_LCD_InitEx+0x274>)
 800120c:	2200      	movs	r2, #0
 800120e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Specify for each region of the video frame, if the transmission of command in LP mode is allowed in this region */
  /* while streaming is active in video mode                                                                         */
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 8001210:	4b43      	ldr	r3, [pc, #268]	; (8001320 <BSP_LCD_InitEx+0x274>)
 8001212:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001216:	651a      	str	r2, [r3, #80]	; 0x50
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 8001218:	4b41      	ldr	r3, [pc, #260]	; (8001320 <BSP_LCD_InitEx+0x274>)
 800121a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800121e:	655a      	str	r2, [r3, #84]	; 0x54
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 8001220:	4b3f      	ldr	r3, [pc, #252]	; (8001320 <BSP_LCD_InitEx+0x274>)
 8001222:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001226:	659a      	str	r2, [r3, #88]	; 0x58
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 8001228:	4b3d      	ldr	r3, [pc, #244]	; (8001320 <BSP_LCD_InitEx+0x274>)
 800122a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800122e:	65da      	str	r2, [r3, #92]	; 0x5c
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 8001230:	4b3b      	ldr	r3, [pc, #236]	; (8001320 <BSP_LCD_InitEx+0x274>)
 8001232:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001236:	661a      	str	r2, [r3, #96]	; 0x60
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 8001238:	4b39      	ldr	r3, [pc, #228]	; (8001320 <BSP_LCD_InitEx+0x274>)
 800123a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800123e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure DSI Video mode timings with settings set above */
  HAL_DSI_ConfigVideoMode(&(hdsi_discovery), &(hdsivideo_handle));
 8001240:	4937      	ldr	r1, [pc, #220]	; (8001320 <BSP_LCD_InitEx+0x274>)
 8001242:	4832      	ldr	r0, [pc, #200]	; (800130c <BSP_LCD_InitEx+0x260>)
 8001244:	f002 ff7e 	bl	8004144 <HAL_DSI_ConfigVideoMode>
  
  
/************************LTDC Initialization***********************************/  

  /* Timing Configuration */    
  hltdc_discovery.Init.HorizontalSync = (HSA - 1);
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	3b01      	subs	r3, #1
 800124c:	4a35      	ldr	r2, [pc, #212]	; (8001324 <BSP_LCD_InitEx+0x278>)
 800124e:	6153      	str	r3, [r2, #20]
  hltdc_discovery.Init.AccumulatedHBP = (HSA + HBP - 1);
 8001250:	69fa      	ldr	r2, [r7, #28]
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	4413      	add	r3, r2
 8001256:	3b01      	subs	r3, #1
 8001258:	4a32      	ldr	r2, [pc, #200]	; (8001324 <BSP_LCD_InitEx+0x278>)
 800125a:	61d3      	str	r3, [r2, #28]
  hltdc_discovery.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 800125c:	4b2e      	ldr	r3, [pc, #184]	; (8001318 <BSP_LCD_InitEx+0x26c>)
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	441a      	add	r2, r3
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	4413      	add	r3, r2
 8001268:	3b01      	subs	r3, #1
 800126a:	4a2e      	ldr	r2, [pc, #184]	; (8001324 <BSP_LCD_InitEx+0x278>)
 800126c:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc_discovery.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 800126e:	4b2a      	ldr	r3, [pc, #168]	; (8001318 <BSP_LCD_InitEx+0x26c>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	441a      	add	r2, r3
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	441a      	add	r2, r3
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	4413      	add	r3, r2
 800127e:	3b01      	subs	r3, #1
 8001280:	4a28      	ldr	r2, [pc, #160]	; (8001324 <BSP_LCD_InitEx+0x278>)
 8001282:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Initialize the LCD pixel width and pixel height */
  hltdc_discovery.LayerCfg->ImageWidth  = lcd_x_size;
 8001284:	4b24      	ldr	r3, [pc, #144]	; (8001318 <BSP_LCD_InitEx+0x26c>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a26      	ldr	r2, [pc, #152]	; (8001324 <BSP_LCD_InitEx+0x278>)
 800128a:	6613      	str	r3, [r2, #96]	; 0x60
  hltdc_discovery.LayerCfg->ImageHeight = lcd_y_size;   
 800128c:	4b23      	ldr	r3, [pc, #140]	; (800131c <BSP_LCD_InitEx+0x270>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a24      	ldr	r2, [pc, #144]	; (8001324 <BSP_LCD_InitEx+0x278>)
 8001292:	6653      	str	r3, [r2, #100]	; 0x64
    * PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz 
    * PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 384 Mhz 
    * PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 384 MHz / 7 = 54.85 MHz 
    * LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_2 = 54.85 MHz / 2 = 27.429 MHz 
    */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001294:	4b24      	ldr	r3, [pc, #144]	; (8001328 <BSP_LCD_InitEx+0x27c>)
 8001296:	2208      	movs	r2, #8
 8001298:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800129a:	4b23      	ldr	r3, [pc, #140]	; (8001328 <BSP_LCD_InitEx+0x27c>)
 800129c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80012a0:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 80012a2:	4b21      	ldr	r3, [pc, #132]	; (8001328 <BSP_LCD_InitEx+0x27c>)
 80012a4:	2207      	movs	r2, #7
 80012a6:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80012a8:	4b1f      	ldr	r3, [pc, #124]	; (8001328 <BSP_LCD_InitEx+0x27c>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80012ae:	481e      	ldr	r0, [pc, #120]	; (8001328 <BSP_LCD_InitEx+0x27c>)
 80012b0:	f005 fc64 	bl	8006b7c <HAL_RCCEx_PeriphCLKConfig>

  /* Background value */
  hltdc_discovery.Init.Backcolor.Blue = 0;
 80012b4:	4b1b      	ldr	r3, [pc, #108]	; (8001324 <BSP_LCD_InitEx+0x278>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc_discovery.Init.Backcolor.Green = 0;
 80012bc:	4b19      	ldr	r3, [pc, #100]	; (8001324 <BSP_LCD_InitEx+0x278>)
 80012be:	2200      	movs	r2, #0
 80012c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc_discovery.Init.Backcolor.Red = 0;
 80012c4:	4b17      	ldr	r3, [pc, #92]	; (8001324 <BSP_LCD_InitEx+0x278>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  hltdc_discovery.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80012cc:	4b15      	ldr	r3, [pc, #84]	; (8001324 <BSP_LCD_InitEx+0x278>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	611a      	str	r2, [r3, #16]
  hltdc_discovery.Instance = LTDC;
 80012d2:	4b14      	ldr	r3, [pc, #80]	; (8001324 <BSP_LCD_InitEx+0x278>)
 80012d4:	4a15      	ldr	r2, [pc, #84]	; (800132c <BSP_LCD_InitEx+0x280>)
 80012d6:	601a      	str	r2, [r3, #0]

  /* Get LTDC Configuration from DSI Configuration */
  HAL_LTDC_StructInitFromVideoConfig(&(hltdc_discovery), &(hdsivideo_handle));
 80012d8:	4911      	ldr	r1, [pc, #68]	; (8001320 <BSP_LCD_InitEx+0x274>)
 80012da:	4812      	ldr	r0, [pc, #72]	; (8001324 <BSP_LCD_InitEx+0x278>)
 80012dc:	f004 ffa2 	bl	8006224 <HAL_LTDCEx_StructInitFromVideoConfig>

  /* Initialize the LTDC */  
  HAL_LTDC_Init(&hltdc_discovery);
 80012e0:	4810      	ldr	r0, [pc, #64]	; (8001324 <BSP_LCD_InitEx+0x278>)
 80012e2:	f004 fcf7 	bl	8005cd4 <HAL_LTDC_Init>

  /* Enable the DSI host and wrapper after the LTDC initialization
     To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
  HAL_DSI_Start(&hdsi_discovery);
 80012e6:	4809      	ldr	r0, [pc, #36]	; (800130c <BSP_LCD_InitEx+0x260>)
 80012e8:	f003 fbbe 	bl	8004a68 <HAL_DSI_Start>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80012ec:	f000 fe3e 	bl	8001f6c <BSP_SDRAM_Init>
#endif /* DATA_IN_ExtSDRAM */

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80012f0:	480f      	ldr	r0, [pc, #60]	; (8001330 <BSP_LCD_InitEx+0x284>)
 80012f2:	f000 f901 	bl	80014f8 <BSP_LCD_SetFont>
/***********************OTM8009A Initialization********************************/ 

  /* Initialize the OTM8009A LCD Display IC Driver (KoD LCD IC Driver)
  *  depending on configuration set in 'hdsivideo_handle'.
  */
  OTM8009A_Init(OTM8009A_FORMAT_RGB888, orientation);
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	4619      	mov	r1, r3
 80012fa:	2000      	movs	r0, #0
 80012fc:	f7ff faa8 	bl	8000850 <OTM8009A_Init>

/***********************End OTM8009A Initialization****************************/ 

  return LCD_OK; 
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3740      	adds	r7, #64	; 0x40
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	200003f0 	.word	0x200003f0
 8001310:	40016c00 	.word	0x40016c00
 8001314:	43215e57 	.word	0x43215e57
 8001318:	20000030 	.word	0x20000030
 800131c:	20000034 	.word	0x20000034
 8001320:	2000011c 	.word	0x2000011c
 8001324:	20000348 	.word	0x20000348
 8001328:	200001a4 	.word	0x200001a4
 800132c:	40016800 	.word	0x40016800
 8001330:	20000028 	.word	0x20000028

08001334 <BSP_LCD_Reset>:
  * @brief  BSP LCD Reset
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and desactivating it later.
  */
void BSP_LCD_Reset(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800133a:	4b18      	ldr	r3, [pc, #96]	; (800139c <BSP_LCD_Reset+0x68>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	4a17      	ldr	r2, [pc, #92]	; (800139c <BSP_LCD_Reset+0x68>)
 8001340:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001344:	6313      	str	r3, [r2, #48]	; 0x30
 8001346:	4b15      	ldr	r3, [pc, #84]	; (800139c <BSP_LCD_Reset+0x68>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800134e:	603b      	str	r3, [r7, #0]
 8001350:	683b      	ldr	r3, [r7, #0]

    /* Configure the GPIO on PJ15 */
    gpio_init_structure.Pin   = GPIO_PIN_15;
 8001352:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001356:	607b      	str	r3, [r7, #4]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001358:	2301      	movs	r3, #1
 800135a:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 800135c:	2301      	movs	r3, #1
 800135e:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001360:	2303      	movs	r3, #3
 8001362:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8001364:	1d3b      	adds	r3, r7, #4
 8001366:	4619      	mov	r1, r3
 8001368:	480d      	ldr	r0, [pc, #52]	; (80013a0 <BSP_LCD_Reset+0x6c>)
 800136a:	f003 fca1 	bl	8004cb0 <HAL_GPIO_Init>

    /* Activate XRES active low */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_RESET);
 800136e:	2200      	movs	r2, #0
 8001370:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001374:	480a      	ldr	r0, [pc, #40]	; (80013a0 <BSP_LCD_Reset+0x6c>)
 8001376:	f003 ff4f 	bl	8005218 <HAL_GPIO_WritePin>

    HAL_Delay(20); /* wait 20 ms */
 800137a:	2014      	movs	r0, #20
 800137c:	f001 f9e8 	bl	8002750 <HAL_Delay>

    /* Desactivate XRES */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_SET);
 8001380:	2201      	movs	r2, #1
 8001382:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001386:	4806      	ldr	r0, [pc, #24]	; (80013a0 <BSP_LCD_Reset+0x6c>)
 8001388:	f003 ff46 	bl	8005218 <HAL_GPIO_WritePin>
    
    /* Wait for 10ms after releasing XRES before sending commands */
    HAL_Delay(10);
 800138c:	200a      	movs	r0, #10
 800138e:	f001 f9df 	bl	8002750 <HAL_Delay>
}
 8001392:	bf00      	nop
 8001394:	3718      	adds	r7, #24
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40023800 	.word	0x40023800
 80013a0:	40022400 	.word	0x40022400

080013a4 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  return (lcd_x_size);
 80013a8:	4b03      	ldr	r3, [pc, #12]	; (80013b8 <BSP_LCD_GetXSize+0x14>)
 80013aa:	681b      	ldr	r3, [r3, #0]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	20000030 	.word	0x20000030

080013bc <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  return (lcd_y_size);
 80013c0:	4b03      	ldr	r3, [pc, #12]	; (80013d0 <BSP_LCD_GetYSize+0x14>)
 80013c2:	681b      	ldr	r3, [r3, #0]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	20000034 	.word	0x20000034

080013d4 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b090      	sub	sp, #64	; 0x40
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	6039      	str	r1, [r7, #0]
 80013de:	80fb      	strh	r3, [r7, #6]
    LCD_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80013e4:	f7ff ffde 	bl	80013a4 <BSP_LCD_GetXSize>
 80013e8:	4603      	mov	r3, r0
 80013ea:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 80013f0:	f7ff ffe4 	bl	80013bc <BSP_LCD_GetYSize>
 80013f4:	4603      	mov	r3, r0
 80013f6:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80013f8:	2300      	movs	r3, #0
 80013fa:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8001400:	23ff      	movs	r3, #255	; 0xff
 8001402:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800141a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800141e:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001420:	2307      	movs	r3, #7
 8001422:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8001424:	f7ff ffbe 	bl	80013a4 <BSP_LCD_GetXSize>
 8001428:	4603      	mov	r3, r0
 800142a:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 800142c:	f7ff ffc6 	bl	80013bc <BSP_LCD_GetYSize>
 8001430:	4603      	mov	r3, r0
 8001432:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hltdc_discovery, &Layercfg, LayerIndex); 
 8001434:	88fa      	ldrh	r2, [r7, #6]
 8001436:	f107 030c 	add.w	r3, r7, #12
 800143a:	4619      	mov	r1, r3
 800143c:	4812      	ldr	r0, [pc, #72]	; (8001488 <BSP_LCD_LayerDefaultInit+0xb4>)
 800143e:	f004 fd19 	bl	8005e74 <HAL_LTDC_ConfigLayer>
  
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8001442:	88fa      	ldrh	r2, [r7, #6]
 8001444:	4911      	ldr	r1, [pc, #68]	; (800148c <BSP_LCD_LayerDefaultInit+0xb8>)
 8001446:	4613      	mov	r3, r2
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	4413      	add	r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	440b      	add	r3, r1
 8001450:	3304      	adds	r3, #4
 8001452:	f04f 32ff 	mov.w	r2, #4294967295
 8001456:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8001458:	88fa      	ldrh	r2, [r7, #6]
 800145a:	490c      	ldr	r1, [pc, #48]	; (800148c <BSP_LCD_LayerDefaultInit+0xb8>)
 800145c:	4613      	mov	r3, r2
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	4413      	add	r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	440b      	add	r3, r1
 8001466:	3308      	adds	r3, #8
 8001468:	4a09      	ldr	r2, [pc, #36]	; (8001490 <BSP_LCD_LayerDefaultInit+0xbc>)
 800146a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 800146c:	88fa      	ldrh	r2, [r7, #6]
 800146e:	4907      	ldr	r1, [pc, #28]	; (800148c <BSP_LCD_LayerDefaultInit+0xb8>)
 8001470:	4613      	mov	r3, r2
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	4413      	add	r3, r2
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	440b      	add	r3, r1
 800147a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800147e:	601a      	str	r2, [r3, #0]
}
 8001480:	bf00      	nop
 8001482:	3740      	adds	r7, #64	; 0x40
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20000348 	.word	0x20000348
 800148c:	2000018c 	.word	0x2000018c
 8001490:	20000028 	.word	0x20000028

08001494 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 800149c:	4b07      	ldr	r3, [pc, #28]	; (80014bc <BSP_LCD_SetTextColor+0x28>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	4907      	ldr	r1, [pc, #28]	; (80014c0 <BSP_LCD_SetTextColor+0x2c>)
 80014a2:	4613      	mov	r3, r2
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	4413      	add	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	440b      	add	r3, r1
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	601a      	str	r2, [r3, #0]
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	20000188 	.word	0x20000188
 80014c0:	2000018c 	.word	0x2000018c

080014c4 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80014cc:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <BSP_LCD_SetBackColor+0x2c>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	4908      	ldr	r1, [pc, #32]	; (80014f4 <BSP_LCD_SetBackColor+0x30>)
 80014d2:	4613      	mov	r3, r2
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	4413      	add	r3, r2
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	440b      	add	r3, r1
 80014dc:	3304      	adds	r3, #4
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	601a      	str	r2, [r3, #0]
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	20000188 	.word	0x20000188
 80014f4:	2000018c 	.word	0x2000018c

080014f8 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8001500:	4b08      	ldr	r3, [pc, #32]	; (8001524 <BSP_LCD_SetFont+0x2c>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	4908      	ldr	r1, [pc, #32]	; (8001528 <BSP_LCD_SetFont+0x30>)
 8001506:	4613      	mov	r3, r2
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	4413      	add	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	440b      	add	r3, r1
 8001510:	3308      	adds	r3, #8
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	601a      	str	r2, [r3, #0]
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	20000188 	.word	0x20000188
 8001528:	2000018c 	.word	0x2000018c

0800152c <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8001530:	4b07      	ldr	r3, [pc, #28]	; (8001550 <BSP_LCD_GetFont+0x24>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	4907      	ldr	r1, [pc, #28]	; (8001554 <BSP_LCD_GetFont+0x28>)
 8001536:	4613      	mov	r3, r2
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	4413      	add	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	440b      	add	r3, r1
 8001540:	3308      	adds	r3, #8
 8001542:	681b      	ldr	r3, [r3, #0]
}
 8001544:	4618      	mov	r0, r3
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	20000188 	.word	0x20000188
 8001554:	2000018c 	.word	0x2000018c

08001558 <BSP_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 8001558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800155a:	b085      	sub	sp, #20
 800155c:	af02      	add	r7, sp, #8
 800155e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001560:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <BSP_LCD_Clear+0x48>)
 8001562:	681c      	ldr	r4, [r3, #0]
 8001564:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <BSP_LCD_Clear+0x48>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a0e      	ldr	r2, [pc, #56]	; (80015a4 <BSP_LCD_Clear+0x4c>)
 800156a:	2134      	movs	r1, #52	; 0x34
 800156c:	fb01 f303 	mul.w	r3, r1, r3
 8001570:	4413      	add	r3, r2
 8001572:	335c      	adds	r3, #92	; 0x5c
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	461d      	mov	r5, r3
 8001578:	f7ff ff14 	bl	80013a4 <BSP_LCD_GetXSize>
 800157c:	4606      	mov	r6, r0
 800157e:	f7ff ff1d 	bl	80013bc <BSP_LCD_GetYSize>
 8001582:	4602      	mov	r2, r0
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	9301      	str	r3, [sp, #4]
 8001588:	2300      	movs	r3, #0
 800158a:	9300      	str	r3, [sp, #0]
 800158c:	4613      	mov	r3, r2
 800158e:	4632      	mov	r2, r6
 8001590:	4629      	mov	r1, r5
 8001592:	4620      	mov	r0, r4
 8001594:	f000 fcb2 	bl	8001efc <LL_FillBuffer>
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015a0:	20000188 	.word	0x20000188
 80015a4:	20000348 	.word	0x20000348

080015a8 <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80015a8:	b590      	push	{r4, r7, lr}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	80fb      	strh	r3, [r7, #6]
 80015b2:	460b      	mov	r3, r1
 80015b4:	80bb      	strh	r3, [r7, #4]
 80015b6:	4613      	mov	r3, r2
 80015b8:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80015ba:	4b1b      	ldr	r3, [pc, #108]	; (8001628 <BSP_LCD_DisplayChar+0x80>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	491b      	ldr	r1, [pc, #108]	; (800162c <BSP_LCD_DisplayChar+0x84>)
 80015c0:	4613      	mov	r3, r2
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	4413      	add	r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	440b      	add	r3, r1
 80015ca:	3308      	adds	r3, #8
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	6819      	ldr	r1, [r3, #0]
 80015d0:	78fb      	ldrb	r3, [r7, #3]
 80015d2:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80015d6:	4b14      	ldr	r3, [pc, #80]	; (8001628 <BSP_LCD_DisplayChar+0x80>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	4c14      	ldr	r4, [pc, #80]	; (800162c <BSP_LCD_DisplayChar+0x84>)
 80015dc:	4613      	mov	r3, r2
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	4413      	add	r3, r2
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	4423      	add	r3, r4
 80015e6:	3308      	adds	r3, #8
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80015ec:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80015f0:	4b0d      	ldr	r3, [pc, #52]	; (8001628 <BSP_LCD_DisplayChar+0x80>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	4c0d      	ldr	r4, [pc, #52]	; (800162c <BSP_LCD_DisplayChar+0x84>)
 80015f6:	4613      	mov	r3, r2
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	4413      	add	r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	4423      	add	r3, r4
 8001600:	3308      	adds	r3, #8
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	889b      	ldrh	r3, [r3, #4]
 8001606:	3307      	adds	r3, #7
 8001608:	2b00      	cmp	r3, #0
 800160a:	da00      	bge.n	800160e <BSP_LCD_DisplayChar+0x66>
 800160c:	3307      	adds	r3, #7
 800160e:	10db      	asrs	r3, r3, #3
 8001610:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001614:	18ca      	adds	r2, r1, r3
 8001616:	88b9      	ldrh	r1, [r7, #4]
 8001618:	88fb      	ldrh	r3, [r7, #6]
 800161a:	4618      	mov	r0, r3
 800161c:	f000 fbb6 	bl	8001d8c <DrawChar>
}
 8001620:	bf00      	nop
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	bd90      	pop	{r4, r7, pc}
 8001628:	20000188 	.word	0x20000188
 800162c:	2000018c 	.word	0x2000018c

08001630 <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8001630:	b5b0      	push	{r4, r5, r7, lr}
 8001632:	b088      	sub	sp, #32
 8001634:	af00      	add	r7, sp, #0
 8001636:	60ba      	str	r2, [r7, #8]
 8001638:	461a      	mov	r2, r3
 800163a:	4603      	mov	r3, r0
 800163c:	81fb      	strh	r3, [r7, #14]
 800163e:	460b      	mov	r3, r1
 8001640:	81bb      	strh	r3, [r7, #12]
 8001642:	4613      	mov	r3, r2
 8001644:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8001646:	2301      	movs	r3, #1
 8001648:	83fb      	strh	r3, [r7, #30]
 800164a:	2300      	movs	r3, #0
 800164c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 800164e:	2300      	movs	r3, #0
 8001650:	61bb      	str	r3, [r7, #24]
 8001652:	2300      	movs	r3, #0
 8001654:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) size ++ ;
 800165a:	e002      	b.n	8001662 <BSP_LCD_DisplayStringAt+0x32>
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	3301      	adds	r3, #1
 8001660:	61bb      	str	r3, [r7, #24]
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	1c5a      	adds	r2, r3, #1
 8001666:	617a      	str	r2, [r7, #20]
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1f6      	bne.n	800165c <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800166e:	f7ff fe99 	bl	80013a4 <BSP_LCD_GetXSize>
 8001672:	4b4f      	ldr	r3, [pc, #316]	; (80017b0 <BSP_LCD_DisplayStringAt+0x180>)
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	494f      	ldr	r1, [pc, #316]	; (80017b4 <BSP_LCD_DisplayStringAt+0x184>)
 8001678:	4613      	mov	r3, r2
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	4413      	add	r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	440b      	add	r3, r1
 8001682:	3308      	adds	r3, #8
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	889b      	ldrh	r3, [r3, #4]
 8001688:	fbb0 f3f3 	udiv	r3, r0, r3
 800168c:	613b      	str	r3, [r7, #16]

  switch (Mode)
 800168e:	79fb      	ldrb	r3, [r7, #7]
 8001690:	2b02      	cmp	r3, #2
 8001692:	d01c      	beq.n	80016ce <BSP_LCD_DisplayStringAt+0x9e>
 8001694:	2b03      	cmp	r3, #3
 8001696:	d017      	beq.n	80016c8 <BSP_LCD_DisplayStringAt+0x98>
 8001698:	2b01      	cmp	r3, #1
 800169a:	d12e      	bne.n	80016fa <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	1ad1      	subs	r1, r2, r3
 80016a2:	4b43      	ldr	r3, [pc, #268]	; (80017b0 <BSP_LCD_DisplayStringAt+0x180>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	4843      	ldr	r0, [pc, #268]	; (80017b4 <BSP_LCD_DisplayStringAt+0x184>)
 80016a8:	4613      	mov	r3, r2
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	4413      	add	r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4403      	add	r3, r0
 80016b2:	3308      	adds	r3, #8
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	889b      	ldrh	r3, [r3, #4]
 80016b8:	fb03 f301 	mul.w	r3, r3, r1
 80016bc:	085b      	lsrs	r3, r3, #1
 80016be:	b29a      	uxth	r2, r3
 80016c0:	89fb      	ldrh	r3, [r7, #14]
 80016c2:	4413      	add	r3, r2
 80016c4:	83fb      	strh	r3, [r7, #30]
      break;
 80016c6:	e01b      	b.n	8001700 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 80016c8:	89fb      	ldrh	r3, [r7, #14]
 80016ca:	83fb      	strh	r3, [r7, #30]
      break;
 80016cc:	e018      	b.n	8001700 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	b299      	uxth	r1, r3
 80016d6:	4b36      	ldr	r3, [pc, #216]	; (80017b0 <BSP_LCD_DisplayStringAt+0x180>)
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	4836      	ldr	r0, [pc, #216]	; (80017b4 <BSP_LCD_DisplayStringAt+0x184>)
 80016dc:	4613      	mov	r3, r2
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	4413      	add	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	4403      	add	r3, r0
 80016e6:	3308      	adds	r3, #8
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	889b      	ldrh	r3, [r3, #4]
 80016ec:	fb11 f303 	smulbb	r3, r1, r3
 80016f0:	b29a      	uxth	r2, r3
 80016f2:	89fb      	ldrh	r3, [r7, #14]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	83fb      	strh	r3, [r7, #30]
      break;
 80016f8:	e002      	b.n	8001700 <BSP_LCD_DisplayStringAt+0xd0>
    }
  default:
    {
      refcolumn = Xpos;
 80016fa:	89fb      	ldrh	r3, [r7, #14]
 80016fc:	83fb      	strh	r3, [r7, #30]
      break;
 80016fe:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8001700:	8bfb      	ldrh	r3, [r7, #30]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <BSP_LCD_DisplayStringAt+0xde>
 8001706:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800170a:	2b00      	cmp	r3, #0
 800170c:	da1d      	bge.n	800174a <BSP_LCD_DisplayStringAt+0x11a>
  {
    refcolumn = 1;
 800170e:	2301      	movs	r3, #1
 8001710:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001712:	e01a      	b.n	800174a <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	781a      	ldrb	r2, [r3, #0]
 8001718:	89b9      	ldrh	r1, [r7, #12]
 800171a:	8bfb      	ldrh	r3, [r7, #30]
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff ff43 	bl	80015a8 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8001722:	4b23      	ldr	r3, [pc, #140]	; (80017b0 <BSP_LCD_DisplayStringAt+0x180>)
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	4923      	ldr	r1, [pc, #140]	; (80017b4 <BSP_LCD_DisplayStringAt+0x184>)
 8001728:	4613      	mov	r3, r2
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	4413      	add	r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	440b      	add	r3, r1
 8001732:	3308      	adds	r3, #8
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	889a      	ldrh	r2, [r3, #4]
 8001738:	8bfb      	ldrh	r3, [r7, #30]
 800173a:	4413      	add	r3, r2
 800173c:	83fb      	strh	r3, [r7, #30]

    /* Point on the next character */
    Text++;
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	3301      	adds	r3, #1
 8001742:	60bb      	str	r3, [r7, #8]
    i++;
 8001744:	8bbb      	ldrh	r3, [r7, #28]
 8001746:	3301      	adds	r3, #1
 8001748:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b00      	cmp	r3, #0
 8001750:	bf14      	ite	ne
 8001752:	2301      	movne	r3, #1
 8001754:	2300      	moveq	r3, #0
 8001756:	b2dc      	uxtb	r4, r3
 8001758:	f7ff fe24 	bl	80013a4 <BSP_LCD_GetXSize>
 800175c:	4605      	mov	r5, r0
 800175e:	8bb9      	ldrh	r1, [r7, #28]
 8001760:	4b13      	ldr	r3, [pc, #76]	; (80017b0 <BSP_LCD_DisplayStringAt+0x180>)
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	4813      	ldr	r0, [pc, #76]	; (80017b4 <BSP_LCD_DisplayStringAt+0x184>)
 8001766:	4613      	mov	r3, r2
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	4413      	add	r3, r2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	4403      	add	r3, r0
 8001770:	3308      	adds	r3, #8
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	889b      	ldrh	r3, [r3, #4]
 8001776:	fb03 f301 	mul.w	r3, r3, r1
 800177a:	1aeb      	subs	r3, r5, r3
 800177c:	b299      	uxth	r1, r3
 800177e:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <BSP_LCD_DisplayStringAt+0x180>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	480c      	ldr	r0, [pc, #48]	; (80017b4 <BSP_LCD_DisplayStringAt+0x184>)
 8001784:	4613      	mov	r3, r2
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	4413      	add	r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4403      	add	r3, r0
 800178e:	3308      	adds	r3, #8
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	889b      	ldrh	r3, [r3, #4]
 8001794:	4299      	cmp	r1, r3
 8001796:	bf2c      	ite	cs
 8001798:	2301      	movcs	r3, #1
 800179a:	2300      	movcc	r3, #0
 800179c:	b2db      	uxtb	r3, r3
 800179e:	4023      	ands	r3, r4
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d1b6      	bne.n	8001714 <BSP_LCD_DisplayStringAt+0xe4>
  }

}
 80017a6:	bf00      	nop
 80017a8:	3720      	adds	r7, #32
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bdb0      	pop	{r4, r5, r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000188 	.word	0x20000188
 80017b4:	2000018c 	.word	0x2000018c

080017b8 <BSP_LCD_DrawHLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80017b8:	b5b0      	push	{r4, r5, r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af02      	add	r7, sp, #8
 80017be:	4603      	mov	r3, r0
 80017c0:	80fb      	strh	r3, [r7, #6]
 80017c2:	460b      	mov	r3, r1
 80017c4:	80bb      	strh	r3, [r7, #4]
 80017c6:	4613      	mov	r3, r2
 80017c8:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 80017ca:	2300      	movs	r3, #0
 80017cc:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80017ce:	4b16      	ldr	r3, [pc, #88]	; (8001828 <BSP_LCD_DrawHLine+0x70>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a16      	ldr	r2, [pc, #88]	; (800182c <BSP_LCD_DrawHLine+0x74>)
 80017d4:	2134      	movs	r1, #52	; 0x34
 80017d6:	fb01 f303 	mul.w	r3, r1, r3
 80017da:	4413      	add	r3, r2
 80017dc:	335c      	adds	r3, #92	; 0x5c
 80017de:	681c      	ldr	r4, [r3, #0]
 80017e0:	f7ff fde0 	bl	80013a4 <BSP_LCD_GetXSize>
 80017e4:	4602      	mov	r2, r0
 80017e6:	88bb      	ldrh	r3, [r7, #4]
 80017e8:	fb03 f202 	mul.w	r2, r3, r2
 80017ec:	88fb      	ldrh	r3, [r7, #6]
 80017ee:	4413      	add	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	4423      	add	r3, r4
 80017f4:	60fb      	str	r3, [r7, #12]

  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80017f6:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <BSP_LCD_DrawHLine+0x70>)
 80017f8:	6818      	ldr	r0, [r3, #0]
 80017fa:	68fc      	ldr	r4, [r7, #12]
 80017fc:	887d      	ldrh	r5, [r7, #2]
 80017fe:	4b0a      	ldr	r3, [pc, #40]	; (8001828 <BSP_LCD_DrawHLine+0x70>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	490b      	ldr	r1, [pc, #44]	; (8001830 <BSP_LCD_DrawHLine+0x78>)
 8001804:	4613      	mov	r3, r2
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	4413      	add	r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	440b      	add	r3, r1
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	9301      	str	r3, [sp, #4]
 8001812:	2300      	movs	r3, #0
 8001814:	9300      	str	r3, [sp, #0]
 8001816:	2301      	movs	r3, #1
 8001818:	462a      	mov	r2, r5
 800181a:	4621      	mov	r1, r4
 800181c:	f000 fb6e 	bl	8001efc <LL_FillBuffer>
}
 8001820:	bf00      	nop
 8001822:	3710      	adds	r7, #16
 8001824:	46bd      	mov	sp, r7
 8001826:	bdb0      	pop	{r4, r5, r7, pc}
 8001828:	20000188 	.word	0x20000188
 800182c:	20000348 	.word	0x20000348
 8001830:	2000018c 	.word	0x2000018c

08001834 <BSP_LCD_DrawCircle>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8001834:	b590      	push	{r4, r7, lr}
 8001836:	b087      	sub	sp, #28
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	80fb      	strh	r3, [r7, #6]
 800183e:	460b      	mov	r3, r1
 8001840:	80bb      	strh	r3, [r7, #4]
 8001842:	4613      	mov	r3, r2
 8001844:	807b      	strh	r3, [r7, #2]
  int32_t   D;    /* Decision Variable */
  uint32_t  CurX; /* Current X Value */
  uint32_t  CurY; /* Current Y Value */

  D = 3 - (Radius << 1);
 8001846:	887b      	ldrh	r3, [r7, #2]
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	f1c3 0303 	rsb	r3, r3, #3
 800184e:	617b      	str	r3, [r7, #20]
  CurX = 0;
 8001850:	2300      	movs	r3, #0
 8001852:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 8001854:	887b      	ldrh	r3, [r7, #2]
 8001856:	60fb      	str	r3, [r7, #12]

  while (CurX <= CurY)
 8001858:	e0cf      	b.n	80019fa <BSP_LCD_DrawCircle+0x1c6>
  {
    BSP_LCD_DrawPixel((Xpos + CurX), (Ypos - CurY), DrawProp[ActiveLayer].TextColor);
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	b29a      	uxth	r2, r3
 800185e:	88fb      	ldrh	r3, [r7, #6]
 8001860:	4413      	add	r3, r2
 8001862:	b298      	uxth	r0, r3
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	b29b      	uxth	r3, r3
 8001868:	88ba      	ldrh	r2, [r7, #4]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	b29c      	uxth	r4, r3
 800186e:	4b67      	ldr	r3, [pc, #412]	; (8001a0c <BSP_LCD_DrawCircle+0x1d8>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	4967      	ldr	r1, [pc, #412]	; (8001a10 <BSP_LCD_DrawCircle+0x1dc>)
 8001874:	4613      	mov	r3, r2
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	4413      	add	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	440b      	add	r3, r1
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	461a      	mov	r2, r3
 8001882:	4621      	mov	r1, r4
 8001884:	f000 fa5c 	bl	8001d40 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurX), (Ypos - CurY), DrawProp[ActiveLayer].TextColor);
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	b29b      	uxth	r3, r3
 800188c:	88fa      	ldrh	r2, [r7, #6]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	b298      	uxth	r0, r3
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	b29b      	uxth	r3, r3
 8001896:	88ba      	ldrh	r2, [r7, #4]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	b29c      	uxth	r4, r3
 800189c:	4b5b      	ldr	r3, [pc, #364]	; (8001a0c <BSP_LCD_DrawCircle+0x1d8>)
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	495b      	ldr	r1, [pc, #364]	; (8001a10 <BSP_LCD_DrawCircle+0x1dc>)
 80018a2:	4613      	mov	r3, r2
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	4413      	add	r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	440b      	add	r3, r1
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	461a      	mov	r2, r3
 80018b0:	4621      	mov	r1, r4
 80018b2:	f000 fa45 	bl	8001d40 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + CurY), (Ypos - CurX), DrawProp[ActiveLayer].TextColor);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	88fb      	ldrh	r3, [r7, #6]
 80018bc:	4413      	add	r3, r2
 80018be:	b298      	uxth	r0, r3
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	88ba      	ldrh	r2, [r7, #4]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	b29c      	uxth	r4, r3
 80018ca:	4b50      	ldr	r3, [pc, #320]	; (8001a0c <BSP_LCD_DrawCircle+0x1d8>)
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	4950      	ldr	r1, [pc, #320]	; (8001a10 <BSP_LCD_DrawCircle+0x1dc>)
 80018d0:	4613      	mov	r3, r2
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	4413      	add	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	440b      	add	r3, r1
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	461a      	mov	r2, r3
 80018de:	4621      	mov	r1, r4
 80018e0:	f000 fa2e 	bl	8001d40 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurY), (Ypos - CurX), DrawProp[ActiveLayer].TextColor);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	88fa      	ldrh	r2, [r7, #6]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	b298      	uxth	r0, r3
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	88ba      	ldrh	r2, [r7, #4]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	b29c      	uxth	r4, r3
 80018f8:	4b44      	ldr	r3, [pc, #272]	; (8001a0c <BSP_LCD_DrawCircle+0x1d8>)
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	4944      	ldr	r1, [pc, #272]	; (8001a10 <BSP_LCD_DrawCircle+0x1dc>)
 80018fe:	4613      	mov	r3, r2
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	4413      	add	r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	440b      	add	r3, r1
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	461a      	mov	r2, r3
 800190c:	4621      	mov	r1, r4
 800190e:	f000 fa17 	bl	8001d40 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + CurX), (Ypos + CurY), DrawProp[ActiveLayer].TextColor);
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	b29a      	uxth	r2, r3
 8001916:	88fb      	ldrh	r3, [r7, #6]
 8001918:	4413      	add	r3, r2
 800191a:	b298      	uxth	r0, r3
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	b29a      	uxth	r2, r3
 8001920:	88bb      	ldrh	r3, [r7, #4]
 8001922:	4413      	add	r3, r2
 8001924:	b29c      	uxth	r4, r3
 8001926:	4b39      	ldr	r3, [pc, #228]	; (8001a0c <BSP_LCD_DrawCircle+0x1d8>)
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	4939      	ldr	r1, [pc, #228]	; (8001a10 <BSP_LCD_DrawCircle+0x1dc>)
 800192c:	4613      	mov	r3, r2
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	4413      	add	r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	440b      	add	r3, r1
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	461a      	mov	r2, r3
 800193a:	4621      	mov	r1, r4
 800193c:	f000 fa00 	bl	8001d40 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurX), (Ypos + CurY), DrawProp[ActiveLayer].TextColor);
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	b29b      	uxth	r3, r3
 8001944:	88fa      	ldrh	r2, [r7, #6]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	b298      	uxth	r0, r3
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	b29a      	uxth	r2, r3
 800194e:	88bb      	ldrh	r3, [r7, #4]
 8001950:	4413      	add	r3, r2
 8001952:	b29c      	uxth	r4, r3
 8001954:	4b2d      	ldr	r3, [pc, #180]	; (8001a0c <BSP_LCD_DrawCircle+0x1d8>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	492d      	ldr	r1, [pc, #180]	; (8001a10 <BSP_LCD_DrawCircle+0x1dc>)
 800195a:	4613      	mov	r3, r2
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	4413      	add	r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	440b      	add	r3, r1
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	461a      	mov	r2, r3
 8001968:	4621      	mov	r1, r4
 800196a:	f000 f9e9 	bl	8001d40 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + CurY), (Ypos + CurX), DrawProp[ActiveLayer].TextColor);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	b29a      	uxth	r2, r3
 8001972:	88fb      	ldrh	r3, [r7, #6]
 8001974:	4413      	add	r3, r2
 8001976:	b298      	uxth	r0, r3
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	b29a      	uxth	r2, r3
 800197c:	88bb      	ldrh	r3, [r7, #4]
 800197e:	4413      	add	r3, r2
 8001980:	b29c      	uxth	r4, r3
 8001982:	4b22      	ldr	r3, [pc, #136]	; (8001a0c <BSP_LCD_DrawCircle+0x1d8>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	4922      	ldr	r1, [pc, #136]	; (8001a10 <BSP_LCD_DrawCircle+0x1dc>)
 8001988:	4613      	mov	r3, r2
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	4413      	add	r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	440b      	add	r3, r1
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	461a      	mov	r2, r3
 8001996:	4621      	mov	r1, r4
 8001998:	f000 f9d2 	bl	8001d40 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurY), (Ypos + CurX), DrawProp[ActiveLayer].TextColor);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	b29b      	uxth	r3, r3
 80019a0:	88fa      	ldrh	r2, [r7, #6]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	b298      	uxth	r0, r3
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	88bb      	ldrh	r3, [r7, #4]
 80019ac:	4413      	add	r3, r2
 80019ae:	b29c      	uxth	r4, r3
 80019b0:	4b16      	ldr	r3, [pc, #88]	; (8001a0c <BSP_LCD_DrawCircle+0x1d8>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	4916      	ldr	r1, [pc, #88]	; (8001a10 <BSP_LCD_DrawCircle+0x1dc>)
 80019b6:	4613      	mov	r3, r2
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	4413      	add	r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	440b      	add	r3, r1
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	461a      	mov	r2, r3
 80019c4:	4621      	mov	r1, r4
 80019c6:	f000 f9bb 	bl	8001d40 <BSP_LCD_DrawPixel>

    if (D < 0)
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	da06      	bge.n	80019de <BSP_LCD_DrawCircle+0x1aa>
    {
      D += (CurX << 2) + 6;
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	009a      	lsls	r2, r3, #2
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	4413      	add	r3, r2
 80019d8:	3306      	adds	r3, #6
 80019da:	617b      	str	r3, [r7, #20]
 80019dc:	e00a      	b.n	80019f4 <BSP_LCD_DrawCircle+0x1c0>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	009a      	lsls	r2, r3, #2
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	4413      	add	r3, r2
 80019ea:	330a      	adds	r3, #10
 80019ec:	617b      	str	r3, [r7, #20]
      CurY--;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	3b01      	subs	r3, #1
 80019f2:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	3301      	adds	r3, #1
 80019f8:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	f67f af2b 	bls.w	800185a <BSP_LCD_DrawCircle+0x26>
  }
}
 8001a04:	bf00      	nop
 8001a06:	371c      	adds	r7, #28
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd90      	pop	{r4, r7, pc}
 8001a0c:	20000188 	.word	0x20000188
 8001a10:	2000018c 	.word	0x2000018c

08001a14 <BSP_LCD_FillRect>:
  * @param  Ypos: Y position
  * @param  Width: Rectangle width
  * @param  Height: Rectangle height
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a18:	b086      	sub	sp, #24
 8001a1a:	af02      	add	r7, sp, #8
 8001a1c:	4604      	mov	r4, r0
 8001a1e:	4608      	mov	r0, r1
 8001a20:	4611      	mov	r1, r2
 8001a22:	461a      	mov	r2, r3
 8001a24:	4623      	mov	r3, r4
 8001a26:	80fb      	strh	r3, [r7, #6]
 8001a28:	4603      	mov	r3, r0
 8001a2a:	80bb      	strh	r3, [r7, #4]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	807b      	strh	r3, [r7, #2]
 8001a30:	4613      	mov	r3, r2
 8001a32:	803b      	strh	r3, [r7, #0]
  uint32_t  Xaddress = 0;
 8001a34:	2300      	movs	r3, #0
 8001a36:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001a38:	4b20      	ldr	r3, [pc, #128]	; (8001abc <BSP_LCD_FillRect+0xa8>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4920      	ldr	r1, [pc, #128]	; (8001ac0 <BSP_LCD_FillRect+0xac>)
 8001a3e:	4613      	mov	r3, r2
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	4413      	add	r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	440b      	add	r3, r1
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff fd22 	bl	8001494 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001a50:	4b1a      	ldr	r3, [pc, #104]	; (8001abc <BSP_LCD_FillRect+0xa8>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a1b      	ldr	r2, [pc, #108]	; (8001ac4 <BSP_LCD_FillRect+0xb0>)
 8001a56:	2134      	movs	r1, #52	; 0x34
 8001a58:	fb01 f303 	mul.w	r3, r1, r3
 8001a5c:	4413      	add	r3, r2
 8001a5e:	335c      	adds	r3, #92	; 0x5c
 8001a60:	681c      	ldr	r4, [r3, #0]
 8001a62:	f7ff fc9f 	bl	80013a4 <BSP_LCD_GetXSize>
 8001a66:	4602      	mov	r2, r0
 8001a68:	88bb      	ldrh	r3, [r7, #4]
 8001a6a:	fb03 f202 	mul.w	r2, r3, r2
 8001a6e:	88fb      	ldrh	r3, [r7, #6]
 8001a70:	4413      	add	r3, r2
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	4423      	add	r3, r4
 8001a76:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001a78:	4b10      	ldr	r3, [pc, #64]	; (8001abc <BSP_LCD_FillRect+0xa8>)
 8001a7a:	681c      	ldr	r4, [r3, #0]
 8001a7c:	68fd      	ldr	r5, [r7, #12]
 8001a7e:	887e      	ldrh	r6, [r7, #2]
 8001a80:	f8b7 8000 	ldrh.w	r8, [r7]
 8001a84:	f7ff fc8e 	bl	80013a4 <BSP_LCD_GetXSize>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	887b      	ldrh	r3, [r7, #2]
 8001a8c:	1ad1      	subs	r1, r2, r3
 8001a8e:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <BSP_LCD_FillRect+0xa8>)
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	480b      	ldr	r0, [pc, #44]	; (8001ac0 <BSP_LCD_FillRect+0xac>)
 8001a94:	4613      	mov	r3, r2
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	4413      	add	r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	4403      	add	r3, r0
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	9301      	str	r3, [sp, #4]
 8001aa2:	9100      	str	r1, [sp, #0]
 8001aa4:	4643      	mov	r3, r8
 8001aa6:	4632      	mov	r2, r6
 8001aa8:	4629      	mov	r1, r5
 8001aaa:	4620      	mov	r0, r4
 8001aac:	f000 fa26 	bl	8001efc <LL_FillBuffer>
}
 8001ab0:	bf00      	nop
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001aba:	bf00      	nop
 8001abc:	20000188 	.word	0x20000188
 8001ac0:	2000018c 	.word	0x2000018c
 8001ac4:	20000348 	.word	0x20000348

08001ac8 <BSP_LCD_FillCircle>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	80fb      	strh	r3, [r7, #6]
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	80bb      	strh	r3, [r7, #4]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	807b      	strh	r3, [r7, #2]
  int32_t  D;     /* Decision Variable */
  uint32_t  CurX; /* Current X Value */
  uint32_t  CurY; /* Current Y Value */

  D = 3 - (Radius << 1);
 8001ada:	887b      	ldrh	r3, [r7, #2]
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	f1c3 0303 	rsb	r3, r3, #3
 8001ae2:	617b      	str	r3, [r7, #20]

  CurX = 0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 8001ae8:	887b      	ldrh	r3, [r7, #2]
 8001aea:	60fb      	str	r3, [r7, #12]

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001aec:	4b44      	ldr	r3, [pc, #272]	; (8001c00 <BSP_LCD_FillCircle+0x138>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	4944      	ldr	r1, [pc, #272]	; (8001c04 <BSP_LCD_FillCircle+0x13c>)
 8001af2:	4613      	mov	r3, r2
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	4413      	add	r3, r2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	440b      	add	r3, r1
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff fcc8 	bl	8001494 <BSP_LCD_SetTextColor>

  while (CurX <= CurY)
 8001b04:	e061      	b.n	8001bca <BSP_LCD_FillCircle+0x102>
  {
    if(CurY > 0)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d021      	beq.n	8001b50 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - CurY, Ypos + CurX, 2*CurY);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	88fa      	ldrh	r2, [r7, #6]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	b298      	uxth	r0, r3
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	b29a      	uxth	r2, r3
 8001b1a:	88bb      	ldrh	r3, [r7, #4]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	b299      	uxth	r1, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	461a      	mov	r2, r3
 8001b2a:	f7ff fe45 	bl	80017b8 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - CurY, Ypos - CurX, 2*CurY);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	88fa      	ldrh	r2, [r7, #6]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	b298      	uxth	r0, r3
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	88ba      	ldrh	r2, [r7, #4]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	b299      	uxth	r1, r3
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	f7ff fe34 	bl	80017b8 <BSP_LCD_DrawHLine>
    }

    if(CurX > 0)
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d021      	beq.n	8001b9a <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - CurX, Ypos - CurY, 2*CurX);
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	88fa      	ldrh	r2, [r7, #6]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	b298      	uxth	r0, r3
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	88ba      	ldrh	r2, [r7, #4]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	b299      	uxth	r1, r3
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	461a      	mov	r2, r3
 8001b74:	f7ff fe20 	bl	80017b8 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - CurX, Ypos + CurY, 2*CurX);
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	88fa      	ldrh	r2, [r7, #6]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	b298      	uxth	r0, r3
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	b29a      	uxth	r2, r3
 8001b86:	88bb      	ldrh	r3, [r7, #4]
 8001b88:	4413      	add	r3, r2
 8001b8a:	b299      	uxth	r1, r3
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	461a      	mov	r2, r3
 8001b96:	f7ff fe0f 	bl	80017b8 <BSP_LCD_DrawHLine>
    }
    if (D < 0)
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	da06      	bge.n	8001bae <BSP_LCD_FillCircle+0xe6>
    {
      D += (CurX << 2) + 6;
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	009a      	lsls	r2, r3, #2
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	3306      	adds	r3, #6
 8001baa:	617b      	str	r3, [r7, #20]
 8001bac:	e00a      	b.n	8001bc4 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	009a      	lsls	r2, r3, #2
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	4413      	add	r3, r2
 8001bba:	330a      	adds	r3, #10
 8001bbc:	617b      	str	r3, [r7, #20]
      CurY--;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	3b01      	subs	r3, #1
 8001bc2:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d999      	bls.n	8001b06 <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001bd2:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <BSP_LCD_FillCircle+0x138>)
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	490b      	ldr	r1, [pc, #44]	; (8001c04 <BSP_LCD_FillCircle+0x13c>)
 8001bd8:	4613      	mov	r3, r2
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	4413      	add	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	440b      	add	r3, r1
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff fc55 	bl	8001494 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8001bea:	887a      	ldrh	r2, [r7, #2]
 8001bec:	88b9      	ldrh	r1, [r7, #4]
 8001bee:	88fb      	ldrh	r3, [r7, #6]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff fe1f 	bl	8001834 <BSP_LCD_DrawCircle>
}
 8001bf6:	bf00      	nop
 8001bf8:	3718      	adds	r7, #24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000188 	.word	0x20000188
 8001c04:	2000018c 	.word	0x2000018c

08001c08 <DSI_IO_WriteCmd>:
  *                 If inferior to 2, a long write command is performed else short.
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af02      	add	r7, sp, #8
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d80d      	bhi.n	8001c34 <DSI_IO_WriteCmd+0x2c>
  {
   HAL_DSI_ShortWrite(&hdsi_discovery, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	3301      	adds	r3, #1
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	9300      	str	r3, [sp, #0]
 8001c26:	4613      	mov	r3, r2
 8001c28:	2215      	movs	r2, #21
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	480a      	ldr	r0, [pc, #40]	; (8001c58 <DSI_IO_WriteCmd+0x50>)
 8001c2e:	f002 ff57 	bl	8004ae0 <HAL_DSI_ShortWrite>
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  } 
}
 8001c32:	e00d      	b.n	8001c50 <DSI_IO_WriteCmd+0x48>
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4413      	add	r3, r2
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	9301      	str	r3, [sp, #4]
 8001c42:	9200      	str	r2, [sp, #0]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2239      	movs	r2, #57	; 0x39
 8001c48:	2100      	movs	r1, #0
 8001c4a:	4803      	ldr	r0, [pc, #12]	; (8001c58 <DSI_IO_WriteCmd+0x50>)
 8001c4c:	f002 ff6a 	bl	8004b24 <HAL_DSI_LongWrite>
}
 8001c50:	bf00      	nop
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	200003f0 	.word	0x200003f0

08001c5c <LCD_IO_GetID>:
  * @brief  Returns the ID of connected screen by checking the HDMI
  *        (adv7533 component) ID or LCD DSI (via TS ID) ID.
  * @retval LCD ID
  */
static uint16_t LCD_IO_GetID(void)
{ 
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  else
  {
    return 0;
  }
#else 
  return LCD_DSI_ID; 
 8001c60:	2311      	movs	r3, #17
#endif /* USE_LCD_HDMI */
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <BSP_LCD_MspInit>:
/**
  * @brief  Initialize the BSP LCD Msp.
  * Application can surcharge if needed this function implementation
  */
__weak void BSP_LCD_MspInit(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001c72:	4b32      	ldr	r3, [pc, #200]	; (8001d3c <BSP_LCD_MspInit+0xd0>)
 8001c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c76:	4a31      	ldr	r2, [pc, #196]	; (8001d3c <BSP_LCD_MspInit+0xd0>)
 8001c78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001c7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c7e:	4b2f      	ldr	r3, [pc, #188]	; (8001d3c <BSP_LCD_MspInit+0xd0>)
 8001c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c82:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	68fb      	ldr	r3, [r7, #12]

  /** @brief Toggle Sw reset of LTDC IP */
  __HAL_RCC_LTDC_FORCE_RESET();
 8001c8a:	4b2c      	ldr	r3, [pc, #176]	; (8001d3c <BSP_LCD_MspInit+0xd0>)
 8001c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8e:	4a2b      	ldr	r2, [pc, #172]	; (8001d3c <BSP_LCD_MspInit+0xd0>)
 8001c90:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001c94:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 8001c96:	4b29      	ldr	r3, [pc, #164]	; (8001d3c <BSP_LCD_MspInit+0xd0>)
 8001c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9a:	4a28      	ldr	r2, [pc, #160]	; (8001d3c <BSP_LCD_MspInit+0xd0>)
 8001c9c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001ca0:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief Enable the DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8001ca2:	4b26      	ldr	r3, [pc, #152]	; (8001d3c <BSP_LCD_MspInit+0xd0>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	4a25      	ldr	r2, [pc, #148]	; (8001d3c <BSP_LCD_MspInit+0xd0>)
 8001ca8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001cac:	6313      	str	r3, [r2, #48]	; 0x30
 8001cae:	4b23      	ldr	r3, [pc, #140]	; (8001d3c <BSP_LCD_MspInit+0xd0>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001cb6:	60bb      	str	r3, [r7, #8]
 8001cb8:	68bb      	ldr	r3, [r7, #8]

  /** @brief Toggle Sw reset of DMA2D IP */
  __HAL_RCC_DMA2D_FORCE_RESET();
 8001cba:	4b20      	ldr	r3, [pc, #128]	; (8001d3c <BSP_LCD_MspInit+0xd0>)
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	4a1f      	ldr	r2, [pc, #124]	; (8001d3c <BSP_LCD_MspInit+0xd0>)
 8001cc0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001cc4:	6113      	str	r3, [r2, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 8001cc6:	4b1d      	ldr	r3, [pc, #116]	; (8001d3c <BSP_LCD_MspInit+0xd0>)
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	4a1c      	ldr	r2, [pc, #112]	; (8001d3c <BSP_LCD_MspInit+0xd0>)
 8001ccc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001cd0:	6113      	str	r3, [r2, #16]

  /** @brief Enable DSI Host and wrapper clocks */
  __HAL_RCC_DSI_CLK_ENABLE();
 8001cd2:	4b1a      	ldr	r3, [pc, #104]	; (8001d3c <BSP_LCD_MspInit+0xd0>)
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd6:	4a19      	ldr	r2, [pc, #100]	; (8001d3c <BSP_LCD_MspInit+0xd0>)
 8001cd8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cde:	4b17      	ldr	r3, [pc, #92]	; (8001d3c <BSP_LCD_MspInit+0xd0>)
 8001ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ce6:	607b      	str	r3, [r7, #4]
 8001ce8:	687b      	ldr	r3, [r7, #4]

  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
 8001cea:	4b14      	ldr	r3, [pc, #80]	; (8001d3c <BSP_LCD_MspInit+0xd0>)
 8001cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cee:	4a13      	ldr	r2, [pc, #76]	; (8001d3c <BSP_LCD_MspInit+0xd0>)
 8001cf0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001cf4:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 8001cf6:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <BSP_LCD_MspInit+0xd0>)
 8001cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfa:	4a10      	ldr	r2, [pc, #64]	; (8001d3c <BSP_LCD_MspInit+0xd0>)
 8001cfc:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8001d00:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8001d02:	2200      	movs	r2, #0
 8001d04:	2103      	movs	r1, #3
 8001d06:	2058      	movs	r0, #88	; 0x58
 8001d08:	f001 fac7 	bl	800329a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001d0c:	2058      	movs	r0, #88	; 0x58
 8001d0e:	f001 fae0 	bl	80032d2 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 8001d12:	2200      	movs	r2, #0
 8001d14:	2103      	movs	r1, #3
 8001d16:	205a      	movs	r0, #90	; 0x5a
 8001d18:	f001 fabf 	bl	800329a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001d1c:	205a      	movs	r0, #90	; 0x5a
 8001d1e:	f001 fad8 	bl	80032d2 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 8001d22:	2200      	movs	r2, #0
 8001d24:	2103      	movs	r1, #3
 8001d26:	2062      	movs	r0, #98	; 0x62
 8001d28:	f001 fab7 	bl	800329a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001d2c:	2062      	movs	r0, #98	; 0x62
 8001d2e:	f001 fad0 	bl	80032d2 <HAL_NVIC_EnableIRQ>
}
 8001d32:	bf00      	nop
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40023800 	.word	0x40023800

08001d40 <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8001d40:	b5b0      	push	{r4, r5, r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	603a      	str	r2, [r7, #0]
 8001d4a:	80fb      	strh	r3, [r7, #6]
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001d50:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <BSP_LCD_DrawPixel+0x44>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a0c      	ldr	r2, [pc, #48]	; (8001d88 <BSP_LCD_DrawPixel+0x48>)
 8001d56:	2134      	movs	r1, #52	; 0x34
 8001d58:	fb01 f303 	mul.w	r3, r1, r3
 8001d5c:	4413      	add	r3, r2
 8001d5e:	335c      	adds	r3, #92	; 0x5c
 8001d60:	681c      	ldr	r4, [r3, #0]
 8001d62:	88bd      	ldrh	r5, [r7, #4]
 8001d64:	f7ff fb1e 	bl	80013a4 <BSP_LCD_GetXSize>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	fb03 f205 	mul.w	r2, r3, r5
 8001d6e:	88fb      	ldrh	r3, [r7, #6]
 8001d70:	4413      	add	r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	4423      	add	r3, r4
 8001d76:	461a      	mov	r2, r3
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	6013      	str	r3, [r2, #0]
}
 8001d7c:	bf00      	nop
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bdb0      	pop	{r4, r5, r7, pc}
 8001d84:	20000188 	.word	0x20000188
 8001d88:	20000348 	.word	0x20000348

08001d8c <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b088      	sub	sp, #32
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	603a      	str	r2, [r7, #0]
 8001d96:	80fb      	strh	r3, [r7, #6]
 8001d98:	460b      	mov	r3, r1
 8001d9a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	61fb      	str	r3, [r7, #28]
 8001da0:	2300      	movs	r3, #0
 8001da2:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[ActiveLayer].pFont->Height;
 8001da4:	4b53      	ldr	r3, [pc, #332]	; (8001ef4 <DrawChar+0x168>)
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	4953      	ldr	r1, [pc, #332]	; (8001ef8 <DrawChar+0x16c>)
 8001daa:	4613      	mov	r3, r2
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	4413      	add	r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	440b      	add	r3, r1
 8001db4:	3308      	adds	r3, #8
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	88db      	ldrh	r3, [r3, #6]
 8001dba:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8001dbc:	4b4d      	ldr	r3, [pc, #308]	; (8001ef4 <DrawChar+0x168>)
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	494d      	ldr	r1, [pc, #308]	; (8001ef8 <DrawChar+0x16c>)
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	4413      	add	r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	440b      	add	r3, r1
 8001dcc:	3308      	adds	r3, #8
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	889b      	ldrh	r3, [r3, #4]
 8001dd2:	823b      	strh	r3, [r7, #16]

  offset =  8 *((width + 7)/8) -  width ;
 8001dd4:	8a3b      	ldrh	r3, [r7, #16]
 8001dd6:	3307      	adds	r3, #7
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	da00      	bge.n	8001dde <DrawChar+0x52>
 8001ddc:	3307      	adds	r3, #7
 8001dde:	10db      	asrs	r3, r3, #3
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	b2da      	uxtb	r2, r3
 8001de6:	8a3b      	ldrh	r3, [r7, #16]
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8001dee:	2300      	movs	r3, #0
 8001df0:	61fb      	str	r3, [r7, #28]
 8001df2:	e076      	b.n	8001ee2 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8001df4:	8a3b      	ldrh	r3, [r7, #16]
 8001df6:	3307      	adds	r3, #7
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	da00      	bge.n	8001dfe <DrawChar+0x72>
 8001dfc:	3307      	adds	r3, #7
 8001dfe:	10db      	asrs	r3, r3, #3
 8001e00:	461a      	mov	r2, r3
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	fb03 f302 	mul.w	r3, r3, r2
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8001e0e:	8a3b      	ldrh	r3, [r7, #16]
 8001e10:	3307      	adds	r3, #7
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	da00      	bge.n	8001e18 <DrawChar+0x8c>
 8001e16:	3307      	adds	r3, #7
 8001e18:	10db      	asrs	r3, r3, #3
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d002      	beq.n	8001e24 <DrawChar+0x98>
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d004      	beq.n	8001e2c <DrawChar+0xa0>
 8001e22:	e00c      	b.n	8001e3e <DrawChar+0xb2>
    {

    case 1:
      line =  pchar[0];
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	617b      	str	r3, [r7, #20]
      break;
 8001e2a:	e016      	b.n	8001e5a <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	021b      	lsls	r3, r3, #8
 8001e32:	68ba      	ldr	r2, [r7, #8]
 8001e34:	3201      	adds	r2, #1
 8001e36:	7812      	ldrb	r2, [r2, #0]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	617b      	str	r3, [r7, #20]
      break;
 8001e3c:	e00d      	b.n	8001e5a <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	041a      	lsls	r2, r3, #16
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	3301      	adds	r3, #1
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	021b      	lsls	r3, r3, #8
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	68ba      	ldr	r2, [r7, #8]
 8001e50:	3202      	adds	r2, #2
 8001e52:	7812      	ldrb	r2, [r2, #0]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	617b      	str	r3, [r7, #20]
      break;
 8001e58:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61bb      	str	r3, [r7, #24]
 8001e5e:	e036      	b.n	8001ece <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1)))
 8001e60:	8a3a      	ldrh	r2, [r7, #16]
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	1ad2      	subs	r2, r2, r3
 8001e66:	7bfb      	ldrb	r3, [r7, #15]
 8001e68:	4413      	add	r3, r2
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	461a      	mov	r2, r3
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	4013      	ands	r3, r2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d012      	beq.n	8001ea2 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	88fb      	ldrh	r3, [r7, #6]
 8001e82:	4413      	add	r3, r2
 8001e84:	b298      	uxth	r0, r3
 8001e86:	4b1b      	ldr	r3, [pc, #108]	; (8001ef4 <DrawChar+0x168>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	491b      	ldr	r1, [pc, #108]	; (8001ef8 <DrawChar+0x16c>)
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	4413      	add	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	440b      	add	r3, r1
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	88bb      	ldrh	r3, [r7, #4]
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	f7ff ff50 	bl	8001d40 <BSP_LCD_DrawPixel>
 8001ea0:	e012      	b.n	8001ec8 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	88fb      	ldrh	r3, [r7, #6]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	b298      	uxth	r0, r3
 8001eac:	4b11      	ldr	r3, [pc, #68]	; (8001ef4 <DrawChar+0x168>)
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	4911      	ldr	r1, [pc, #68]	; (8001ef8 <DrawChar+0x16c>)
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	4413      	add	r3, r2
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	440b      	add	r3, r1
 8001ebc:	3304      	adds	r3, #4
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	88bb      	ldrh	r3, [r7, #4]
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	f7ff ff3c 	bl	8001d40 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	61bb      	str	r3, [r7, #24]
 8001ece:	8a3b      	ldrh	r3, [r7, #16]
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d3c4      	bcc.n	8001e60 <DrawChar+0xd4>
      }
    }
    Ypos++;
 8001ed6:	88bb      	ldrh	r3, [r7, #4]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	61fb      	str	r3, [r7, #28]
 8001ee2:	8a7b      	ldrh	r3, [r7, #18]
 8001ee4:	69fa      	ldr	r2, [r7, #28]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d384      	bcc.n	8001df4 <DrawChar+0x68>
  }
}
 8001eea:	bf00      	nop
 8001eec:	3720      	adds	r7, #32
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	20000188 	.word	0x20000188
 8001ef8:	2000018c 	.word	0x2000018c

08001efc <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af02      	add	r7, sp, #8
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
 8001f08:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_discovery.Init.Mode         = DMA2D_R2M;
 8001f0a:	4b16      	ldr	r3, [pc, #88]	; (8001f64 <LL_FillBuffer+0x68>)
 8001f0c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001f10:	605a      	str	r2, [r3, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 8001f12:	4b14      	ldr	r3, [pc, #80]	; (8001f64 <LL_FillBuffer+0x68>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	609a      	str	r2, [r3, #8]
  hdma2d_discovery.Init.OutputOffset = OffLine;
 8001f18:	4a12      	ldr	r2, [pc, #72]	; (8001f64 <LL_FillBuffer+0x68>)
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	60d3      	str	r3, [r2, #12]

  hdma2d_discovery.Instance = DMA2D;
 8001f1e:	4b11      	ldr	r3, [pc, #68]	; (8001f64 <LL_FillBuffer+0x68>)
 8001f20:	4a11      	ldr	r2, [pc, #68]	; (8001f68 <LL_FillBuffer+0x6c>)
 8001f22:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 8001f24:	480f      	ldr	r0, [pc, #60]	; (8001f64 <LL_FillBuffer+0x68>)
 8001f26:	f001 fbab 	bl	8003680 <HAL_DMA2D_Init>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d115      	bne.n	8001f5c <LL_FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, LayerIndex) == HAL_OK)
 8001f30:	68f9      	ldr	r1, [r7, #12]
 8001f32:	480c      	ldr	r0, [pc, #48]	; (8001f64 <LL_FillBuffer+0x68>)
 8001f34:	f001 fd12 	bl	800395c <HAL_DMA2D_ConfigLayer>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d10e      	bne.n	8001f5c <LL_FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&hdma2d_discovery, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8001f3e:	68ba      	ldr	r2, [r7, #8]
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	9300      	str	r3, [sp, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	69f9      	ldr	r1, [r7, #28]
 8001f48:	4806      	ldr	r0, [pc, #24]	; (8001f64 <LL_FillBuffer+0x68>)
 8001f4a:	f001 fbf3 	bl	8003734 <HAL_DMA2D_Start>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d103      	bne.n	8001f5c <LL_FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 8001f54:	210a      	movs	r1, #10
 8001f56:	4803      	ldr	r0, [pc, #12]	; (8001f64 <LL_FillBuffer+0x68>)
 8001f58:	f001 fc17 	bl	800378a <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8001f5c:	bf00      	nop
 8001f5e:	3710      	adds	r7, #16
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	200002f0 	.word	0x200002f0
 8001f68:	4002b000 	.word	0x4002b000

08001f6c <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001f70:	4b29      	ldr	r3, [pc, #164]	; (8002018 <BSP_SDRAM_Init+0xac>)
 8001f72:	4a2a      	ldr	r2, [pc, #168]	; (800201c <BSP_SDRAM_Init+0xb0>)
 8001f74:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8001f76:	4b2a      	ldr	r3, [pc, #168]	; (8002020 <BSP_SDRAM_Init+0xb4>)
 8001f78:	2202      	movs	r2, #2
 8001f7a:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8001f7c:	4b28      	ldr	r3, [pc, #160]	; (8002020 <BSP_SDRAM_Init+0xb4>)
 8001f7e:	2207      	movs	r2, #7
 8001f80:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8001f82:	4b27      	ldr	r3, [pc, #156]	; (8002020 <BSP_SDRAM_Init+0xb4>)
 8001f84:	2204      	movs	r2, #4
 8001f86:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8001f88:	4b25      	ldr	r3, [pc, #148]	; (8002020 <BSP_SDRAM_Init+0xb4>)
 8001f8a:	2207      	movs	r2, #7
 8001f8c:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8001f8e:	4b24      	ldr	r3, [pc, #144]	; (8002020 <BSP_SDRAM_Init+0xb4>)
 8001f90:	2202      	movs	r2, #2
 8001f92:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8001f94:	4b22      	ldr	r3, [pc, #136]	; (8002020 <BSP_SDRAM_Init+0xb4>)
 8001f96:	2202      	movs	r2, #2
 8001f98:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8001f9a:	4b21      	ldr	r3, [pc, #132]	; (8002020 <BSP_SDRAM_Init+0xb4>)
 8001f9c:	2202      	movs	r2, #2
 8001f9e:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8001fa0:	4b1d      	ldr	r3, [pc, #116]	; (8002018 <BSP_SDRAM_Init+0xac>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001fa6:	4b1c      	ldr	r3, [pc, #112]	; (8002018 <BSP_SDRAM_Init+0xac>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8001fac:	4b1a      	ldr	r3, [pc, #104]	; (8002018 <BSP_SDRAM_Init+0xac>)
 8001fae:	2204      	movs	r2, #4
 8001fb0:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8001fb2:	4b19      	ldr	r3, [pc, #100]	; (8002018 <BSP_SDRAM_Init+0xac>)
 8001fb4:	2220      	movs	r2, #32
 8001fb6:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001fb8:	4b17      	ldr	r3, [pc, #92]	; (8002018 <BSP_SDRAM_Init+0xac>)
 8001fba:	2240      	movs	r2, #64	; 0x40
 8001fbc:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8001fbe:	4b16      	ldr	r3, [pc, #88]	; (8002018 <BSP_SDRAM_Init+0xac>)
 8001fc0:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001fc4:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001fc6:	4b14      	ldr	r3, [pc, #80]	; (8002018 <BSP_SDRAM_Init+0xac>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8001fcc:	4b12      	ldr	r3, [pc, #72]	; (8002018 <BSP_SDRAM_Init+0xac>)
 8001fce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fd2:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8001fd4:	4b10      	ldr	r3, [pc, #64]	; (8002018 <BSP_SDRAM_Init+0xac>)
 8001fd6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001fda:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8001fdc:	4b0e      	ldr	r3, [pc, #56]	; (8002018 <BSP_SDRAM_Init+0xac>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	480c      	ldr	r0, [pc, #48]	; (8002018 <BSP_SDRAM_Init+0xac>)
 8001fe6:	f000 f87f 	bl	80020e8 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8001fea:	490d      	ldr	r1, [pc, #52]	; (8002020 <BSP_SDRAM_Init+0xb4>)
 8001fec:	480a      	ldr	r0, [pc, #40]	; (8002018 <BSP_SDRAM_Init+0xac>)
 8001fee:	f005 f9eb 	bl	80073c8 <HAL_SDRAM_Init>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d003      	beq.n	8002000 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8001ff8:	4b0a      	ldr	r3, [pc, #40]	; (8002024 <BSP_SDRAM_Init+0xb8>)
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	701a      	strb	r2, [r3, #0]
 8001ffe:	e002      	b.n	8002006 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002000:	4b08      	ldr	r3, [pc, #32]	; (8002024 <BSP_SDRAM_Init+0xb8>)
 8002002:	2200      	movs	r2, #0
 8002004:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002006:	f240 6003 	movw	r0, #1539	; 0x603
 800200a:	f000 f80d 	bl	8002028 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800200e:	4b05      	ldr	r3, [pc, #20]	; (8002024 <BSP_SDRAM_Init+0xb8>)
 8002010:	781b      	ldrb	r3, [r3, #0]
}
 8002012:	4618      	mov	r0, r3
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	2000040c 	.word	0x2000040c
 800201c:	a0000140 	.word	0xa0000140
 8002020:	20000234 	.word	0x20000234
 8002024:	20000038 	.word	0x20000038

08002028 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8002030:	2300      	movs	r3, #0
 8002032:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8002034:	4b2a      	ldr	r3, [pc, #168]	; (80020e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002036:	2201      	movs	r2, #1
 8002038:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800203a:	4b29      	ldr	r3, [pc, #164]	; (80020e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800203c:	2210      	movs	r2, #16
 800203e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002040:	4b27      	ldr	r3, [pc, #156]	; (80020e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002042:	2201      	movs	r2, #1
 8002044:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002046:	4b26      	ldr	r3, [pc, #152]	; (80020e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002048:	2200      	movs	r2, #0
 800204a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800204c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002050:	4923      	ldr	r1, [pc, #140]	; (80020e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002052:	4824      	ldr	r0, [pc, #144]	; (80020e4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002054:	f005 f9ec 	bl	8007430 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002058:	2001      	movs	r0, #1
 800205a:	f000 fb79 	bl	8002750 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800205e:	4b20      	ldr	r3, [pc, #128]	; (80020e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002060:	2202      	movs	r2, #2
 8002062:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002064:	4b1e      	ldr	r3, [pc, #120]	; (80020e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002066:	2210      	movs	r2, #16
 8002068:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800206a:	4b1d      	ldr	r3, [pc, #116]	; (80020e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800206c:	2201      	movs	r2, #1
 800206e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002070:	4b1b      	ldr	r3, [pc, #108]	; (80020e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002072:	2200      	movs	r2, #0
 8002074:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8002076:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800207a:	4919      	ldr	r1, [pc, #100]	; (80020e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800207c:	4819      	ldr	r0, [pc, #100]	; (80020e4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800207e:	f005 f9d7 	bl	8007430 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002082:	4b17      	ldr	r3, [pc, #92]	; (80020e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002084:	2203      	movs	r2, #3
 8002086:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002088:	4b15      	ldr	r3, [pc, #84]	; (80020e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800208a:	2210      	movs	r2, #16
 800208c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800208e:	4b14      	ldr	r3, [pc, #80]	; (80020e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002090:	2208      	movs	r2, #8
 8002092:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002094:	4b12      	ldr	r3, [pc, #72]	; (80020e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002096:	2200      	movs	r2, #0
 8002098:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800209a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800209e:	4910      	ldr	r1, [pc, #64]	; (80020e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80020a0:	4810      	ldr	r0, [pc, #64]	; (80020e4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80020a2:	f005 f9c5 	bl	8007430 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80020a6:	f44f 730c 	mov.w	r3, #560	; 0x230
 80020aa:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80020ac:	4b0c      	ldr	r3, [pc, #48]	; (80020e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80020ae:	2204      	movs	r2, #4
 80020b0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80020b2:	4b0b      	ldr	r3, [pc, #44]	; (80020e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80020b4:	2210      	movs	r2, #16
 80020b6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80020b8:	4b09      	ldr	r3, [pc, #36]	; (80020e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80020ba:	2201      	movs	r2, #1
 80020bc:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	4a07      	ldr	r2, [pc, #28]	; (80020e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80020c2:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80020c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020c8:	4905      	ldr	r1, [pc, #20]	; (80020e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80020ca:	4806      	ldr	r0, [pc, #24]	; (80020e4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80020cc:	f005 f9b0 	bl	8007430 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80020d0:	6879      	ldr	r1, [r7, #4]
 80020d2:	4804      	ldr	r0, [pc, #16]	; (80020e4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80020d4:	f005 f9d7 	bl	8007486 <HAL_SDRAM_ProgramRefreshRate>
}
 80020d8:	bf00      	nop
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	20000250 	.word	0x20000250
 80020e4:	2000040c 	.word	0x2000040c

080020e8 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params  
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b090      	sub	sp, #64	; 0x40
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80020f2:	4b71      	ldr	r3, [pc, #452]	; (80022b8 <BSP_SDRAM_MspInit+0x1d0>)
 80020f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f6:	4a70      	ldr	r2, [pc, #448]	; (80022b8 <BSP_SDRAM_MspInit+0x1d0>)
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	6393      	str	r3, [r2, #56]	; 0x38
 80020fe:	4b6e      	ldr	r3, [pc, #440]	; (80022b8 <BSP_SDRAM_MspInit+0x1d0>)
 8002100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	62bb      	str	r3, [r7, #40]	; 0x28
 8002108:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800210a:	4b6b      	ldr	r3, [pc, #428]	; (80022b8 <BSP_SDRAM_MspInit+0x1d0>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	4a6a      	ldr	r2, [pc, #424]	; (80022b8 <BSP_SDRAM_MspInit+0x1d0>)
 8002110:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002114:	6313      	str	r3, [r2, #48]	; 0x30
 8002116:	4b68      	ldr	r3, [pc, #416]	; (80022b8 <BSP_SDRAM_MspInit+0x1d0>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800211e:	627b      	str	r3, [r7, #36]	; 0x24
 8002120:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002122:	4b65      	ldr	r3, [pc, #404]	; (80022b8 <BSP_SDRAM_MspInit+0x1d0>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	4a64      	ldr	r2, [pc, #400]	; (80022b8 <BSP_SDRAM_MspInit+0x1d0>)
 8002128:	f043 0308 	orr.w	r3, r3, #8
 800212c:	6313      	str	r3, [r2, #48]	; 0x30
 800212e:	4b62      	ldr	r3, [pc, #392]	; (80022b8 <BSP_SDRAM_MspInit+0x1d0>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	f003 0308 	and.w	r3, r3, #8
 8002136:	623b      	str	r3, [r7, #32]
 8002138:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800213a:	4b5f      	ldr	r3, [pc, #380]	; (80022b8 <BSP_SDRAM_MspInit+0x1d0>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	4a5e      	ldr	r2, [pc, #376]	; (80022b8 <BSP_SDRAM_MspInit+0x1d0>)
 8002140:	f043 0310 	orr.w	r3, r3, #16
 8002144:	6313      	str	r3, [r2, #48]	; 0x30
 8002146:	4b5c      	ldr	r3, [pc, #368]	; (80022b8 <BSP_SDRAM_MspInit+0x1d0>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	f003 0310 	and.w	r3, r3, #16
 800214e:	61fb      	str	r3, [r7, #28]
 8002150:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002152:	4b59      	ldr	r3, [pc, #356]	; (80022b8 <BSP_SDRAM_MspInit+0x1d0>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	4a58      	ldr	r2, [pc, #352]	; (80022b8 <BSP_SDRAM_MspInit+0x1d0>)
 8002158:	f043 0320 	orr.w	r3, r3, #32
 800215c:	6313      	str	r3, [r2, #48]	; 0x30
 800215e:	4b56      	ldr	r3, [pc, #344]	; (80022b8 <BSP_SDRAM_MspInit+0x1d0>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	f003 0320 	and.w	r3, r3, #32
 8002166:	61bb      	str	r3, [r7, #24]
 8002168:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800216a:	4b53      	ldr	r3, [pc, #332]	; (80022b8 <BSP_SDRAM_MspInit+0x1d0>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	4a52      	ldr	r2, [pc, #328]	; (80022b8 <BSP_SDRAM_MspInit+0x1d0>)
 8002170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002174:	6313      	str	r3, [r2, #48]	; 0x30
 8002176:	4b50      	ldr	r3, [pc, #320]	; (80022b8 <BSP_SDRAM_MspInit+0x1d0>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800217e:	617b      	str	r3, [r7, #20]
 8002180:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002182:	4b4d      	ldr	r3, [pc, #308]	; (80022b8 <BSP_SDRAM_MspInit+0x1d0>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	4a4c      	ldr	r2, [pc, #304]	; (80022b8 <BSP_SDRAM_MspInit+0x1d0>)
 8002188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800218c:	6313      	str	r3, [r2, #48]	; 0x30
 800218e:	4b4a      	ldr	r3, [pc, #296]	; (80022b8 <BSP_SDRAM_MspInit+0x1d0>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002196:	613b      	str	r3, [r7, #16]
 8002198:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800219a:	4b47      	ldr	r3, [pc, #284]	; (80022b8 <BSP_SDRAM_MspInit+0x1d0>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	4a46      	ldr	r2, [pc, #280]	; (80022b8 <BSP_SDRAM_MspInit+0x1d0>)
 80021a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021a4:	6313      	str	r3, [r2, #48]	; 0x30
 80021a6:	4b44      	ldr	r3, [pc, #272]	; (80022b8 <BSP_SDRAM_MspInit+0x1d0>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80021b2:	2302      	movs	r3, #2
 80021b4:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80021b6:	2301      	movs	r3, #1
 80021b8:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80021ba:	2303      	movs	r3, #3
 80021bc:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80021be:	230c      	movs	r3, #12
 80021c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 80021c2:	f24c 7303 	movw	r3, #50947	; 0xc703
 80021c6:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_14 | GPIO_PIN_15;
 
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80021c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021cc:	4619      	mov	r1, r3
 80021ce:	483b      	ldr	r0, [pc, #236]	; (80022bc <BSP_SDRAM_MspInit+0x1d4>)
 80021d0:	f002 fd6e 	bl	8004cb0 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80021d4:	f64f 7383 	movw	r3, #65411	; 0xff83
 80021d8:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
      
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80021da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021de:	4619      	mov	r1, r3
 80021e0:	4837      	ldr	r0, [pc, #220]	; (80022c0 <BSP_SDRAM_MspInit+0x1d8>)
 80021e2:	f002 fd65 	bl	8004cb0 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80021e6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80021ea:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
    
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80021ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021f0:	4619      	mov	r1, r3
 80021f2:	4834      	ldr	r0, [pc, #208]	; (80022c4 <BSP_SDRAM_MspInit+0x1dc>)
 80021f4:	f002 fd5c 	bl	8004cb0 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4|\
 80021f8:	f248 1337 	movw	r3, #33079	; 0x8137
 80021fc:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80021fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002202:	4619      	mov	r1, r3
 8002204:	4830      	ldr	r0, [pc, #192]	; (80022c8 <BSP_SDRAM_MspInit+0x1e0>)
 8002206:	f002 fd53 	bl	8004cb0 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 |\
 800220a:	f64f 732c 	movw	r3, #65324	; 0xff2c
 800220e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8002210:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002214:	4619      	mov	r1, r3
 8002216:	482d      	ldr	r0, [pc, #180]	; (80022cc <BSP_SDRAM_MspInit+0x1e4>)
 8002218:	f002 fd4a 	bl	8004cb0 <HAL_GPIO_Init>
  
  /* GPIOI configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 800221c:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8002220:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
 8002222:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002226:	4619      	mov	r1, r3
 8002228:	4829      	ldr	r0, [pc, #164]	; (80022d0 <BSP_SDRAM_MspInit+0x1e8>)
 800222a:	f002 fd41 	bl	8004cb0 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800222e:	4b29      	ldr	r3, [pc, #164]	; (80022d4 <BSP_SDRAM_MspInit+0x1ec>)
 8002230:	2200      	movs	r2, #0
 8002232:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002234:	4b27      	ldr	r3, [pc, #156]	; (80022d4 <BSP_SDRAM_MspInit+0x1ec>)
 8002236:	2280      	movs	r2, #128	; 0x80
 8002238:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800223a:	4b26      	ldr	r3, [pc, #152]	; (80022d4 <BSP_SDRAM_MspInit+0x1ec>)
 800223c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002240:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8002242:	4b24      	ldr	r3, [pc, #144]	; (80022d4 <BSP_SDRAM_MspInit+0x1ec>)
 8002244:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002248:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800224a:	4b22      	ldr	r3, [pc, #136]	; (80022d4 <BSP_SDRAM_MspInit+0x1ec>)
 800224c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002250:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002252:	4b20      	ldr	r3, [pc, #128]	; (80022d4 <BSP_SDRAM_MspInit+0x1ec>)
 8002254:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002258:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 800225a:	4b1e      	ldr	r3, [pc, #120]	; (80022d4 <BSP_SDRAM_MspInit+0x1ec>)
 800225c:	2200      	movs	r2, #0
 800225e:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002260:	4b1c      	ldr	r3, [pc, #112]	; (80022d4 <BSP_SDRAM_MspInit+0x1ec>)
 8002262:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002266:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8002268:	4b1a      	ldr	r3, [pc, #104]	; (80022d4 <BSP_SDRAM_MspInit+0x1ec>)
 800226a:	2200      	movs	r2, #0
 800226c:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800226e:	4b19      	ldr	r3, [pc, #100]	; (80022d4 <BSP_SDRAM_MspInit+0x1ec>)
 8002270:	2203      	movs	r2, #3
 8002272:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002274:	4b17      	ldr	r3, [pc, #92]	; (80022d4 <BSP_SDRAM_MspInit+0x1ec>)
 8002276:	2200      	movs	r2, #0
 8002278:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800227a:	4b16      	ldr	r3, [pc, #88]	; (80022d4 <BSP_SDRAM_MspInit+0x1ec>)
 800227c:	2200      	movs	r2, #0
 800227e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8002280:	4b14      	ldr	r3, [pc, #80]	; (80022d4 <BSP_SDRAM_MspInit+0x1ec>)
 8002282:	4a15      	ldr	r2, [pc, #84]	; (80022d8 <BSP_SDRAM_MspInit+0x1f0>)
 8002284:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a12      	ldr	r2, [pc, #72]	; (80022d4 <BSP_SDRAM_MspInit+0x1ec>)
 800228a:	631a      	str	r2, [r3, #48]	; 0x30
 800228c:	4a11      	ldr	r2, [pc, #68]	; (80022d4 <BSP_SDRAM_MspInit+0x1ec>)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8002292:	4810      	ldr	r0, [pc, #64]	; (80022d4 <BSP_SDRAM_MspInit+0x1ec>)
 8002294:	f001 f8e6 	bl	8003464 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8002298:	480e      	ldr	r0, [pc, #56]	; (80022d4 <BSP_SDRAM_MspInit+0x1ec>)
 800229a:	f001 f835 	bl	8003308 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800229e:	2200      	movs	r2, #0
 80022a0:	210f      	movs	r1, #15
 80022a2:	2038      	movs	r0, #56	; 0x38
 80022a4:	f000 fff9 	bl	800329a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80022a8:	2038      	movs	r0, #56	; 0x38
 80022aa:	f001 f812 	bl	80032d2 <HAL_NVIC_EnableIRQ>
}
 80022ae:	bf00      	nop
 80022b0:	3740      	adds	r7, #64	; 0x40
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40023800 	.word	0x40023800
 80022bc:	40020c00 	.word	0x40020c00
 80022c0:	40021000 	.word	0x40021000
 80022c4:	40021400 	.word	0x40021400
 80022c8:	40021800 	.word	0x40021800
 80022cc:	40021c00 	.word	0x40021c00
 80022d0:	40022000 	.word	0x40022000
 80022d4:	20000260 	.word	0x20000260
 80022d8:	40026410 	.word	0x40026410

080022dc <BSP_TS_Init>:
  * @param  ts_SizeX : Maximum X size of the TS area on LCD
  * @param  ts_SizeY : Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	460a      	mov	r2, r1
 80022e6:	80fb      	strh	r3, [r7, #6]
 80022e8:	4613      	mov	r3, r2
 80022ea:	80bb      	strh	r3, [r7, #4]
  uint8_t ts_status = TS_OK;
 80022ec:	2300      	movs	r3, #0
 80022ee:	73fb      	strb	r3, [r7, #15]
  uint8_t ts_id1, ts_id2 = 0;
 80022f0:	2300      	movs	r3, #0
 80022f2:	73bb      	strb	r3, [r7, #14]
  /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
  /* but the prototype of Init() is like that in template and should be respected       */

  /* Initialize the communication channel to sensor (I2C) if necessary */
  /* that is initialization is done only once after a power up         */
  ft6x06_ts_drv.Init(I2C_Address);
 80022f4:	4b25      	ldr	r3, [pc, #148]	; (800238c <BSP_TS_Init+0xb0>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a25      	ldr	r2, [pc, #148]	; (8002390 <BSP_TS_Init+0xb4>)
 80022fa:	7812      	ldrb	r2, [r2, #0]
 80022fc:	b292      	uxth	r2, r2
 80022fe:	4610      	mov	r0, r2
 8002300:	4798      	blx	r3

  ts_id1 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 8002302:	4b22      	ldr	r3, [pc, #136]	; (800238c <BSP_TS_Init+0xb0>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	2054      	movs	r0, #84	; 0x54
 8002308:	4798      	blx	r3
 800230a:	4603      	mov	r3, r0
 800230c:	737b      	strb	r3, [r7, #13]
  if(ts_id1 != FT6206_ID_VALUE)
 800230e:	7b7b      	ldrb	r3, [r7, #13]
 8002310:	2b11      	cmp	r3, #17
 8002312:	d009      	beq.n	8002328 <BSP_TS_Init+0x4c>
  {
    ts_id2 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS_A02);
 8002314:	4b1d      	ldr	r3, [pc, #116]	; (800238c <BSP_TS_Init+0xb0>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	2070      	movs	r0, #112	; 0x70
 800231a:	4798      	blx	r3
 800231c:	4603      	mov	r3, r0
 800231e:	73bb      	strb	r3, [r7, #14]
    I2C_Address    = TS_I2C_ADDRESS_A02;    
 8002320:	4b1b      	ldr	r3, [pc, #108]	; (8002390 <BSP_TS_Init+0xb4>)
 8002322:	2270      	movs	r2, #112	; 0x70
 8002324:	701a      	strb	r2, [r3, #0]
 8002326:	e002      	b.n	800232e <BSP_TS_Init+0x52>
  }
  else
  {
    I2C_Address    = TS_I2C_ADDRESS;    
 8002328:	4b19      	ldr	r3, [pc, #100]	; (8002390 <BSP_TS_Init+0xb4>)
 800232a:	2254      	movs	r2, #84	; 0x54
 800232c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Scan FT6xx6 TouchScreen IC controller ID register by I2C Read       */
  /* Verify this is a FT6206 or FT6336G, otherwise this is an error case */
  if((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 800232e:	7b7b      	ldrb	r3, [r7, #13]
 8002330:	2b11      	cmp	r3, #17
 8002332:	d002      	beq.n	800233a <BSP_TS_Init+0x5e>
 8002334:	7bbb      	ldrb	r3, [r7, #14]
 8002336:	2b11      	cmp	r3, #17
 8002338:	d121      	bne.n	800237e <BSP_TS_Init+0xa2>
  {
    /* Found FT6206 : Initialize the TS driver structure */
    ts_driver = &ft6x06_ts_drv;
 800233a:	4b16      	ldr	r3, [pc, #88]	; (8002394 <BSP_TS_Init+0xb8>)
 800233c:	4a13      	ldr	r2, [pc, #76]	; (800238c <BSP_TS_Init+0xb0>)
 800233e:	601a      	str	r2, [r3, #0]

    /* Get LCD chosen orientation */
    if(ts_SizeX < ts_SizeY)
 8002340:	88fa      	ldrh	r2, [r7, #6]
 8002342:	88bb      	ldrh	r3, [r7, #4]
 8002344:	429a      	cmp	r2, r3
 8002346:	d203      	bcs.n	8002350 <BSP_TS_Init+0x74>
    {
      ts_orientation = TS_SWAP_NONE;                
 8002348:	4b13      	ldr	r3, [pc, #76]	; (8002398 <BSP_TS_Init+0xbc>)
 800234a:	2201      	movs	r2, #1
 800234c:	701a      	strb	r2, [r3, #0]
 800234e:	e002      	b.n	8002356 <BSP_TS_Init+0x7a>
    }
    else
    {
      ts_orientation = TS_SWAP_XY | TS_SWAP_Y;                 
 8002350:	4b11      	ldr	r3, [pc, #68]	; (8002398 <BSP_TS_Init+0xbc>)
 8002352:	220c      	movs	r2, #12
 8002354:	701a      	strb	r2, [r3, #0]
    }

    if(ts_status == TS_OK)
 8002356:	7bfb      	ldrb	r3, [r7, #15]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d112      	bne.n	8002382 <BSP_TS_Init+0xa6>
    {
      /* Software reset the TouchScreen */
      ts_driver->Reset(I2C_Address);
 800235c:	4b0d      	ldr	r3, [pc, #52]	; (8002394 <BSP_TS_Init+0xb8>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	4a0b      	ldr	r2, [pc, #44]	; (8002390 <BSP_TS_Init+0xb4>)
 8002364:	7812      	ldrb	r2, [r2, #0]
 8002366:	b292      	uxth	r2, r2
 8002368:	4610      	mov	r0, r2
 800236a:	4798      	blx	r3

      /* Calibrate, Configure and Start the TouchScreen driver */
      ts_driver->Start(I2C_Address);
 800236c:	4b09      	ldr	r3, [pc, #36]	; (8002394 <BSP_TS_Init+0xb8>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	4a07      	ldr	r2, [pc, #28]	; (8002390 <BSP_TS_Init+0xb4>)
 8002374:	7812      	ldrb	r2, [r2, #0]
 8002376:	b292      	uxth	r2, r2
 8002378:	4610      	mov	r0, r2
 800237a:	4798      	blx	r3
    if(ts_status == TS_OK)
 800237c:	e001      	b.n	8002382 <BSP_TS_Init+0xa6>

    } /* of if(ts_status == TS_OK) */
  }
  else
  {
    ts_status = TS_DEVICE_NOT_FOUND;
 800237e:	2303      	movs	r3, #3
 8002380:	73fb      	strb	r3, [r7, #15]
  }

  return (ts_status);
 8002382:	7bfb      	ldrb	r3, [r7, #15]
}
 8002384:	4618      	mov	r0, r3
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	20000000 	.word	0x20000000
 8002390:	200002c5 	.word	0x200002c5
 8002394:	200002c0 	.word	0x200002c0
 8002398:	200002c4 	.word	0x200002c4

0800239c <BSP_TS_ITConfig>:
/**
  * @brief  Configures and enables the touch screen interrupts.
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_ITConfig(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
  uint8_t ts_status = TS_OK;
 80023a2:	2300      	movs	r3, #0
 80023a4:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef gpio_init_structure;

  /* Msp Init of GPIO used for TS_INT pin coming from TouchScreen driver IC FT6x06 */
  /* When touchscreen is operated in interrupt mode */
  BSP_TS_INT_MspInit();
 80023a6:	f000 f94f 	bl	8002648 <BSP_TS_INT_MspInit>

  /* Configure Interrupt mode for TS_INT pin falling edge : when a new touch is available */
  /* TS_INT pin is active on low level on new touch available */
  gpio_init_structure.Pin = TS_INT_PIN;
 80023aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023ae:	603b      	str	r3, [r7, #0]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80023b0:	2301      	movs	r3, #1
 80023b2:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80023b4:	2302      	movs	r3, #2
 80023b6:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 80023b8:	4b0d      	ldr	r3, [pc, #52]	; (80023f0 <BSP_TS_ITConfig+0x54>)
 80023ba:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 80023bc:	463b      	mov	r3, r7
 80023be:	4619      	mov	r1, r3
 80023c0:	480c      	ldr	r0, [pc, #48]	; (80023f4 <BSP_TS_ITConfig+0x58>)
 80023c2:	f002 fc75 	bl	8004cb0 <HAL_GPIO_Init>

  /* Enable and set the TS_INT EXTI Interrupt to an intermediate priority */
  HAL_NVIC_SetPriority((IRQn_Type)(TS_INT_EXTI_IRQn), 0x0F, 0x00);
 80023c6:	2200      	movs	r2, #0
 80023c8:	210f      	movs	r1, #15
 80023ca:	2028      	movs	r0, #40	; 0x28
 80023cc:	f000 ff65 	bl	800329a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(TS_INT_EXTI_IRQn));
 80023d0:	2028      	movs	r0, #40	; 0x28
 80023d2:	f000 ff7e 	bl	80032d2 <HAL_NVIC_EnableIRQ>

  /* Enable the TS in interrupt mode */
  /* In that case the INT output of FT6206 when new touch is available */
  /* is active on low level and directed on EXTI */
  ts_driver->EnableIT(I2C_Address);
 80023d6:	4b08      	ldr	r3, [pc, #32]	; (80023f8 <BSP_TS_ITConfig+0x5c>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	4a07      	ldr	r2, [pc, #28]	; (80023fc <BSP_TS_ITConfig+0x60>)
 80023de:	7812      	ldrb	r2, [r2, #0]
 80023e0:	b292      	uxth	r2, r2
 80023e2:	4610      	mov	r0, r2
 80023e4:	4798      	blx	r3

  return (ts_status);
 80023e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3718      	adds	r7, #24
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	10210000 	.word	0x10210000
 80023f4:	40022000 	.word	0x40022000
 80023f8:	200002c0 	.word	0x200002c0
 80023fc:	200002c5 	.word	0x200002c5

08002400 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8002400:	b590      	push	{r4, r7, lr}
 8002402:	b089      	sub	sp, #36	; 0x24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8002408:	2300      	movs	r3, #0
 800240a:	76fb      	strb	r3, [r7, #27]
  uint32_t area = 0;
  uint32_t event = 0;
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = ts_driver->DetectTouch(I2C_Address);
 800240c:	4b89      	ldr	r3, [pc, #548]	; (8002634 <BSP_TS_GetState+0x234>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	4a89      	ldr	r2, [pc, #548]	; (8002638 <BSP_TS_GetState+0x238>)
 8002414:	7812      	ldrb	r2, [r2, #0]
 8002416:	b292      	uxth	r2, r2
 8002418:	4610      	mov	r0, r2
 800241a:	4798      	blx	r3
 800241c:	4603      	mov	r3, r0
 800241e:	461a      	mov	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	701a      	strb	r2, [r3, #0]
  if(TS_State->touchDetected)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	2b00      	cmp	r3, #0
 800242a:	f000 80fe 	beq.w	800262a <BSP_TS_GetState+0x22a>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 800242e:	2300      	movs	r3, #0
 8002430:	61fb      	str	r3, [r7, #28]
 8002432:	e0f3      	b.n	800261c <BSP_TS_GetState+0x21c>
    {
      /* Get each touch coordinates */
      ts_driver->GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 8002434:	4b7f      	ldr	r3, [pc, #508]	; (8002634 <BSP_TS_GetState+0x234>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	4a7f      	ldr	r2, [pc, #508]	; (8002638 <BSP_TS_GetState+0x238>)
 800243c:	7812      	ldrb	r2, [r2, #0]
 800243e:	b290      	uxth	r0, r2
 8002440:	f107 0110 	add.w	r1, r7, #16
 8002444:	69fa      	ldr	r2, [r7, #28]
 8002446:	0052      	lsls	r2, r2, #1
 8002448:	188c      	adds	r4, r1, r2
 800244a:	f107 010c 	add.w	r1, r7, #12
 800244e:	69fa      	ldr	r2, [r7, #28]
 8002450:	0052      	lsls	r2, r2, #1
 8002452:	440a      	add	r2, r1
 8002454:	4621      	mov	r1, r4
 8002456:	4798      	blx	r3

      if(ts_orientation & TS_SWAP_XY)
 8002458:	4b78      	ldr	r3, [pc, #480]	; (800263c <BSP_TS_GetState+0x23c>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	f003 0308 	and.w	r3, r3, #8
 8002460:	2b00      	cmp	r3, #0
 8002462:	d01d      	beq.n	80024a0 <BSP_TS_GetState+0xa0>
      {
        tmp = Raw_x[index];
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	f107 0220 	add.w	r2, r7, #32
 800246c:	4413      	add	r3, r2
 800246e:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8002472:	833b      	strh	r3, [r7, #24]
        Raw_x[index] = Raw_y[index]; 
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	f107 0220 	add.w	r2, r7, #32
 800247c:	4413      	add	r3, r2
 800247e:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	f107 0120 	add.w	r1, r7, #32
 800248a:	440b      	add	r3, r1
 800248c:	f823 2c10 	strh.w	r2, [r3, #-16]
        Raw_y[index] = tmp;
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	f107 0220 	add.w	r2, r7, #32
 8002498:	4413      	add	r3, r2
 800249a:	8b3a      	ldrh	r2, [r7, #24]
 800249c:	f823 2c14 	strh.w	r2, [r3, #-20]
      }
      
      if(ts_orientation & TS_SWAP_X)
 80024a0:	4b66      	ldr	r3, [pc, #408]	; (800263c <BSP_TS_GetState+0x23c>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d011      	beq.n	80024d0 <BSP_TS_GetState+0xd0>
      {
        Raw_x[index] = FT_6206_MAX_WIDTH - 1 - Raw_x[index];
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	f107 0220 	add.w	r2, r7, #32
 80024b4:	4413      	add	r3, r2
 80024b6:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 80024ba:	f240 331f 	movw	r3, #799	; 0x31f
 80024be:	1a9b      	subs	r3, r3, r2
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	f107 0120 	add.w	r1, r7, #32
 80024ca:	440b      	add	r3, r1
 80024cc:	f823 2c10 	strh.w	r2, [r3, #-16]
      }

      if(ts_orientation & TS_SWAP_Y)
 80024d0:	4b5a      	ldr	r3, [pc, #360]	; (800263c <BSP_TS_GetState+0x23c>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	f003 0304 	and.w	r3, r3, #4
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d011      	beq.n	8002500 <BSP_TS_GetState+0x100>
      {
        Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	f107 0220 	add.w	r2, r7, #32
 80024e4:	4413      	add	r3, r2
 80024e6:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 80024ea:	f240 13df 	movw	r3, #479	; 0x1df
 80024ee:	1a9b      	subs	r3, r3, r2
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	f107 0120 	add.w	r1, r7, #32
 80024fa:	440b      	add	r3, r1
 80024fc:	f823 2c14 	strh.w	r2, [r3, #-20]
      }
            
      xDiff = Raw_x[index] > _x[index]? (Raw_x[index] - _x[index]): (_x[index] - Raw_x[index]);
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	f107 0220 	add.w	r2, r7, #32
 8002508:	4413      	add	r3, r2
 800250a:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800250e:	4619      	mov	r1, r3
 8002510:	4a4b      	ldr	r2, [pc, #300]	; (8002640 <BSP_TS_GetState+0x240>)
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002518:	4299      	cmp	r1, r3
 800251a:	d90e      	bls.n	800253a <BSP_TS_GetState+0x13a>
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	f107 0220 	add.w	r2, r7, #32
 8002524:	4413      	add	r3, r2
 8002526:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 800252a:	4945      	ldr	r1, [pc, #276]	; (8002640 <BSP_TS_GetState+0x240>)
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002532:	b29b      	uxth	r3, r3
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	b29b      	uxth	r3, r3
 8002538:	e00d      	b.n	8002556 <BSP_TS_GetState+0x156>
 800253a:	4a41      	ldr	r2, [pc, #260]	; (8002640 <BSP_TS_GetState+0x240>)
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002542:	b29a      	uxth	r2, r3
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	f107 0120 	add.w	r1, r7, #32
 800254c:	440b      	add	r3, r1
 800254e:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	b29b      	uxth	r3, r3
 8002556:	82fb      	strh	r3, [r7, #22]
      yDiff = Raw_y[index] > _y[index]? (Raw_y[index] - _y[index]): (_y[index] - Raw_y[index]);
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	f107 0220 	add.w	r2, r7, #32
 8002560:	4413      	add	r3, r2
 8002562:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002566:	4619      	mov	r1, r3
 8002568:	4a36      	ldr	r2, [pc, #216]	; (8002644 <BSP_TS_GetState+0x244>)
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002570:	4299      	cmp	r1, r3
 8002572:	d90e      	bls.n	8002592 <BSP_TS_GetState+0x192>
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	f107 0220 	add.w	r2, r7, #32
 800257c:	4413      	add	r3, r2
 800257e:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8002582:	4930      	ldr	r1, [pc, #192]	; (8002644 <BSP_TS_GetState+0x244>)
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800258a:	b29b      	uxth	r3, r3
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	b29b      	uxth	r3, r3
 8002590:	e00d      	b.n	80025ae <BSP_TS_GetState+0x1ae>
 8002592:	4a2c      	ldr	r2, [pc, #176]	; (8002644 <BSP_TS_GetState+0x244>)
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800259a:	b29a      	uxth	r2, r3
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	f107 0120 	add.w	r1, r7, #32
 80025a4:	440b      	add	r3, r1
 80025a6:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	82bb      	strh	r3, [r7, #20]

      if ((xDiff + yDiff) > 5)
 80025b0:	8afa      	ldrh	r2, [r7, #22]
 80025b2:	8abb      	ldrh	r3, [r7, #20]
 80025b4:	4413      	add	r3, r2
 80025b6:	2b05      	cmp	r3, #5
 80025b8:	dd17      	ble.n	80025ea <BSP_TS_GetState+0x1ea>
      {
        _x[index] = Raw_x[index];
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	f107 0220 	add.w	r2, r7, #32
 80025c2:	4413      	add	r3, r2
 80025c4:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80025c8:	4619      	mov	r1, r3
 80025ca:	4a1d      	ldr	r2, [pc, #116]	; (8002640 <BSP_TS_GetState+0x240>)
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = Raw_y[index];
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	f107 0220 	add.w	r2, r7, #32
 80025da:	4413      	add	r3, r2
 80025dc:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80025e0:	4619      	mov	r1, r3
 80025e2:	4a18      	ldr	r2, [pc, #96]	; (8002644 <BSP_TS_GetState+0x244>)
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }


      TS_State->touchX[index] = _x[index];
 80025ea:	4a15      	ldr	r2, [pc, #84]	; (8002640 <BSP_TS_GetState+0x240>)
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025f2:	b299      	uxth	r1, r3
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	4413      	add	r3, r2
 80025fc:	460a      	mov	r2, r1
 80025fe:	805a      	strh	r2, [r3, #2]
      TS_State->touchY[index] = _y[index];
 8002600:	4a10      	ldr	r2, [pc, #64]	; (8002644 <BSP_TS_GetState+0x244>)
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002608:	b299      	uxth	r1, r3
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	4413      	add	r3, r2
 8002612:	460a      	mov	r2, r1
 8002614:	80da      	strh	r2, [r3, #6]
    for(index=0; index < TS_State->touchDetected; index++)
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	3301      	adds	r3, #1
 800261a:	61fb      	str	r3, [r7, #28]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	461a      	mov	r2, r3
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	4293      	cmp	r3, r2
 8002626:	f4ff af05 	bcc.w	8002434 <BSP_TS_GetState+0x34>
    ts_status = BSP_TS_Get_GestureId(TS_State);
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 800262a:	7efb      	ldrb	r3, [r7, #27]
}
 800262c:	4618      	mov	r0, r3
 800262e:	3724      	adds	r7, #36	; 0x24
 8002630:	46bd      	mov	sp, r7
 8002632:	bd90      	pop	{r4, r7, pc}
 8002634:	200002c0 	.word	0x200002c0
 8002638:	200002c5 	.word	0x200002c5
 800263c:	200002c4 	.word	0x200002c4
 8002640:	200002c8 	.word	0x200002c8
 8002644:	200002d0 	.word	0x200002d0

08002648 <BSP_TS_INT_MspInit>:
/**
  * @brief  Initializes the TS_INT pin MSP.
  * @retval None
  */
__weak void BSP_TS_INT_MspInit(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  TS_INT_GPIO_CLK_ENABLE();
 800264e:	4b0f      	ldr	r3, [pc, #60]	; (800268c <BSP_TS_INT_MspInit+0x44>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002652:	4a0e      	ldr	r2, [pc, #56]	; (800268c <BSP_TS_INT_MspInit+0x44>)
 8002654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002658:	6313      	str	r3, [r2, #48]	; 0x30
 800265a:	4b0c      	ldr	r3, [pc, #48]	; (800268c <BSP_TS_INT_MspInit+0x44>)
 800265c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002662:	603b      	str	r3, [r7, #0]
 8002664:	683b      	ldr	r3, [r7, #0]

  /* GPIO configuration in input for TouchScreen interrupt signal on TS_INT pin */
  gpio_init_structure.Pin       = TS_INT_PIN;
 8002666:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800266a:	607b      	str	r3, [r7, #4]

  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 800266c:	2300      	movs	r3, #0
 800266e:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002670:	2301      	movs	r3, #1
 8002672:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8002674:	2303      	movs	r3, #3
 8002676:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 8002678:	1d3b      	adds	r3, r7, #4
 800267a:	4619      	mov	r1, r3
 800267c:	4804      	ldr	r0, [pc, #16]	; (8002690 <BSP_TS_INT_MspInit+0x48>)
 800267e:	f002 fb17 	bl	8004cb0 <HAL_GPIO_Init>
}
 8002682:	bf00      	nop
 8002684:	3718      	adds	r7, #24
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40023800 	.word	0x40023800
 8002690:	40022000 	.word	0x40022000

08002694 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002698:	2003      	movs	r0, #3
 800269a:	f000 fdf3 	bl	8003284 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800269e:	2000      	movs	r0, #0
 80026a0:	f000 f806 	bl	80026b0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80026a4:	f007 faee 	bl	8009c84 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	bd80      	pop	{r7, pc}
	...

080026b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026b8:	4b12      	ldr	r3, [pc, #72]	; (8002704 <HAL_InitTick+0x54>)
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	4b12      	ldr	r3, [pc, #72]	; (8002708 <HAL_InitTick+0x58>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	4619      	mov	r1, r3
 80026c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80026ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ce:	4618      	mov	r0, r3
 80026d0:	f000 fe0d 	bl	80032ee <HAL_SYSTICK_Config>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e00e      	b.n	80026fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2b0f      	cmp	r3, #15
 80026e2:	d80a      	bhi.n	80026fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026e4:	2200      	movs	r2, #0
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	f04f 30ff 	mov.w	r0, #4294967295
 80026ec:	f000 fdd5 	bl	800329a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026f0:	4a06      	ldr	r2, [pc, #24]	; (800270c <HAL_InitTick+0x5c>)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
 80026f8:	e000      	b.n	80026fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	20000044 	.word	0x20000044
 8002708:	20000040 	.word	0x20000040
 800270c:	2000003c 	.word	0x2000003c

08002710 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002714:	4b06      	ldr	r3, [pc, #24]	; (8002730 <HAL_IncTick+0x20>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	461a      	mov	r2, r3
 800271a:	4b06      	ldr	r3, [pc, #24]	; (8002734 <HAL_IncTick+0x24>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4413      	add	r3, r2
 8002720:	4a04      	ldr	r2, [pc, #16]	; (8002734 <HAL_IncTick+0x24>)
 8002722:	6013      	str	r3, [r2, #0]
}
 8002724:	bf00      	nop
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	20000040 	.word	0x20000040
 8002734:	20000440 	.word	0x20000440

08002738 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  return uwTick;
 800273c:	4b03      	ldr	r3, [pc, #12]	; (800274c <HAL_GetTick+0x14>)
 800273e:	681b      	ldr	r3, [r3, #0]
}
 8002740:	4618      	mov	r0, r3
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	20000440 	.word	0x20000440

08002750 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002758:	f7ff ffee 	bl	8002738 <HAL_GetTick>
 800275c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002768:	d005      	beq.n	8002776 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800276a:	4b09      	ldr	r3, [pc, #36]	; (8002790 <HAL_Delay+0x40>)
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	461a      	mov	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	4413      	add	r3, r2
 8002774:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002776:	bf00      	nop
 8002778:	f7ff ffde 	bl	8002738 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	429a      	cmp	r2, r3
 8002786:	d8f7      	bhi.n	8002778 <HAL_Delay+0x28>
  {
  }
}
 8002788:	bf00      	nop
 800278a:	3710      	adds	r7, #16
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	20000040 	.word	0x20000040

08002794 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800279c:	2300      	movs	r3, #0
 800279e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e031      	b.n	800280e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d109      	bne.n	80027c6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f007 fa8a 	bl	8009ccc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	f003 0310 	and.w	r3, r3, #16
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d116      	bne.n	8002800 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027d6:	4b10      	ldr	r3, [pc, #64]	; (8002818 <HAL_ADC_Init+0x84>)
 80027d8:	4013      	ands	r3, r2
 80027da:	f043 0202 	orr.w	r2, r3, #2
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 fb7a 	bl	8002edc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	f023 0303 	bic.w	r3, r3, #3
 80027f6:	f043 0201 	orr.w	r2, r3, #1
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	641a      	str	r2, [r3, #64]	; 0x40
 80027fe:	e001      	b.n	8002804 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800280c:	7bfb      	ldrb	r3, [r7, #15]
}
 800280e:	4618      	mov	r0, r3
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	ffffeefd 	.word	0xffffeefd

0800281c <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002824:	2300      	movs	r3, #0
 8002826:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800282e:	2b01      	cmp	r3, #1
 8002830:	d101      	bne.n	8002836 <HAL_ADC_Start_IT+0x1a>
 8002832:	2302      	movs	r3, #2
 8002834:	e0a8      	b.n	8002988 <HAL_ADC_Start_IT+0x16c>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	2b01      	cmp	r3, #1
 800284a:	d018      	beq.n	800287e <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689a      	ldr	r2, [r3, #8]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f042 0201 	orr.w	r2, r2, #1
 800285a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800285c:	4b4d      	ldr	r3, [pc, #308]	; (8002994 <HAL_ADC_Start_IT+0x178>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a4d      	ldr	r2, [pc, #308]	; (8002998 <HAL_ADC_Start_IT+0x17c>)
 8002862:	fba2 2303 	umull	r2, r3, r2, r3
 8002866:	0c9a      	lsrs	r2, r3, #18
 8002868:	4613      	mov	r3, r2
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	4413      	add	r3, r2
 800286e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002870:	e002      	b.n	8002878 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	3b01      	subs	r3, #1
 8002876:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1f9      	bne.n	8002872 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	2b01      	cmp	r3, #1
 800288a:	d17c      	bne.n	8002986 <HAL_ADC_Start_IT+0x16a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002890:	4b42      	ldr	r3, [pc, #264]	; (800299c <HAL_ADC_Start_IT+0x180>)
 8002892:	4013      	ands	r3, r2
 8002894:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d007      	beq.n	80028ba <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80028b2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028c6:	d106      	bne.n	80028d6 <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028cc:	f023 0206 	bic.w	r2, r3, #6
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	645a      	str	r2, [r3, #68]	; 0x44
 80028d4:	e002      	b.n	80028dc <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80028ec:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6859      	ldr	r1, [r3, #4]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	4b29      	ldr	r3, [pc, #164]	; (80029a0 <HAL_ADC_Start_IT+0x184>)
 80028fa:	430b      	orrs	r3, r1
 80028fc:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80028fe:	4b29      	ldr	r3, [pc, #164]	; (80029a4 <HAL_ADC_Start_IT+0x188>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f003 031f 	and.w	r3, r3, #31
 8002906:	2b00      	cmp	r3, #0
 8002908:	d10f      	bne.n	800292a <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d136      	bne.n	8002986 <HAL_ADC_Start_IT+0x16a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689a      	ldr	r2, [r3, #8]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002926:	609a      	str	r2, [r3, #8]
 8002928:	e02d      	b.n	8002986 <HAL_ADC_Start_IT+0x16a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a1e      	ldr	r2, [pc, #120]	; (80029a8 <HAL_ADC_Start_IT+0x18c>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d10e      	bne.n	8002952 <HAL_ADC_Start_IT+0x136>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d107      	bne.n	8002952 <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002950:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002952:	4b14      	ldr	r3, [pc, #80]	; (80029a4 <HAL_ADC_Start_IT+0x188>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f003 0310 	and.w	r3, r3, #16
 800295a:	2b00      	cmp	r3, #0
 800295c:	d113      	bne.n	8002986 <HAL_ADC_Start_IT+0x16a>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a12      	ldr	r2, [pc, #72]	; (80029ac <HAL_ADC_Start_IT+0x190>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d10e      	bne.n	8002986 <HAL_ADC_Start_IT+0x16a>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d107      	bne.n	8002986 <HAL_ADC_Start_IT+0x16a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002984:	609a      	str	r2, [r3, #8]
      } 
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	3714      	adds	r7, #20
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	20000044 	.word	0x20000044
 8002998:	431bde83 	.word	0x431bde83
 800299c:	fffff8fe 	.word	0xfffff8fe
 80029a0:	04000020 	.word	0x04000020
 80029a4:	40012300 	.word	0x40012300
 80029a8:	40012000 	.word	0x40012000
 80029ac:	40012200 	.word	0x40012200

080029b0 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 80029b8:	2300      	movs	r3, #0
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	2300      	movs	r3, #0
 80029be:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	bf0c      	ite	eq
 80029ce:	2301      	moveq	r3, #1
 80029d0:	2300      	movne	r3, #0
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f003 0320 	and.w	r3, r3, #32
 80029e0:	2b20      	cmp	r3, #32
 80029e2:	bf0c      	ite	eq
 80029e4:	2301      	moveq	r3, #1
 80029e6:	2300      	movne	r3, #0
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d049      	beq.n	8002a86 <HAL_ADC_IRQHandler+0xd6>
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d046      	beq.n	8002a86 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fc:	f003 0310 	and.w	r3, r3, #16
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d105      	bne.n	8002a10 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a08:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d12b      	bne.n	8002a76 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d127      	bne.n	8002a76 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d006      	beq.n	8002a42 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d119      	bne.n	8002a76 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f022 0220 	bic.w	r2, r2, #32
 8002a50:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d105      	bne.n	8002a76 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	f043 0201 	orr.w	r2, r3, #1
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f006 f852 	bl	8008b20 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f06f 0212 	mvn.w	r2, #18
 8002a84:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0304 	and.w	r3, r3, #4
 8002a90:	2b04      	cmp	r3, #4
 8002a92:	bf0c      	ite	eq
 8002a94:	2301      	moveq	r3, #1
 8002a96:	2300      	movne	r3, #0
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aa6:	2b80      	cmp	r3, #128	; 0x80
 8002aa8:	bf0c      	ite	eq
 8002aaa:	2301      	moveq	r3, #1
 8002aac:	2300      	movne	r3, #0
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d057      	beq.n	8002b68 <HAL_ADC_IRQHandler+0x1b8>
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d054      	beq.n	8002b68 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	f003 0310 	and.w	r3, r3, #16
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d105      	bne.n	8002ad6 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ace:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d139      	bne.n	8002b58 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aea:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d006      	beq.n	8002b00 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d12b      	bne.n	8002b58 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d124      	bne.n	8002b58 <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d11d      	bne.n	8002b58 <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d119      	bne.n	8002b58 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	685a      	ldr	r2, [r3, #4]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b32:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b38:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d105      	bne.n	8002b58 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b50:	f043 0201 	orr.w	r2, r3, #1
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f000 fab9 	bl	80030d0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f06f 020c 	mvn.w	r2, #12
 8002b66:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	bf0c      	ite	eq
 8002b76:	2301      	moveq	r3, #1
 8002b78:	2300      	movne	r3, #0
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b88:	2b40      	cmp	r3, #64	; 0x40
 8002b8a:	bf0c      	ite	eq
 8002b8c:	2301      	moveq	r3, #1
 8002b8e:	2300      	movne	r3, #0
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d017      	beq.n	8002bca <HAL_ADC_IRQHandler+0x21a>
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d014      	beq.n	8002bca <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d10d      	bne.n	8002bca <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 f846 	bl	8002c4c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f06f 0201 	mvn.w	r2, #1
 8002bc8:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0320 	and.w	r3, r3, #32
 8002bd4:	2b20      	cmp	r3, #32
 8002bd6:	bf0c      	ite	eq
 8002bd8:	2301      	moveq	r3, #1
 8002bda:	2300      	movne	r3, #0
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002bea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bee:	bf0c      	ite	eq
 8002bf0:	2301      	moveq	r3, #1
 8002bf2:	2300      	movne	r3, #0
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d015      	beq.n	8002c2a <HAL_ADC_IRQHandler+0x27a>
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d012      	beq.n	8002c2a <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c08:	f043 0202 	orr.w	r2, r3, #2
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f06f 0220 	mvn.w	r2, #32
 8002c18:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 f820 	bl	8002c60 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f06f 0220 	mvn.w	r2, #32
 8002c28:	601a      	str	r2, [r3, #0]
  }
}
 8002c2a:	bf00      	nop
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d101      	bne.n	8002c90 <HAL_ADC_ConfigChannel+0x1c>
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	e115      	b.n	8002ebc <HAL_ADC_ConfigChannel+0x248>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2b09      	cmp	r3, #9
 8002c9e:	d935      	bls.n	8002d0c <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68d9      	ldr	r1, [r3, #12]
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	461a      	mov	r2, r3
 8002cae:	4613      	mov	r3, r2
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	4413      	add	r3, r2
 8002cb4:	3b1e      	subs	r3, #30
 8002cb6:	2207      	movs	r2, #7
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	43da      	mvns	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	400a      	ands	r2, r1
 8002cc4:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a7f      	ldr	r2, [pc, #508]	; (8002ec8 <HAL_ADC_ConfigChannel+0x254>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d10a      	bne.n	8002ce6 <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68d9      	ldr	r1, [r3, #12]
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	061a      	lsls	r2, r3, #24
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	60da      	str	r2, [r3, #12]
 8002ce4:	e035      	b.n	8002d52 <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68d9      	ldr	r1, [r3, #12]
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	4403      	add	r3, r0
 8002cfe:	3b1e      	subs	r3, #30
 8002d00:	409a      	lsls	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	430a      	orrs	r2, r1
 8002d08:	60da      	str	r2, [r3, #12]
 8002d0a:	e022      	b.n	8002d52 <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	6919      	ldr	r1, [r3, #16]
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	461a      	mov	r2, r3
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	4413      	add	r3, r2
 8002d20:	2207      	movs	r2, #7
 8002d22:	fa02 f303 	lsl.w	r3, r2, r3
 8002d26:	43da      	mvns	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	400a      	ands	r2, r1
 8002d2e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6919      	ldr	r1, [r3, #16]
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	689a      	ldr	r2, [r3, #8]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	4618      	mov	r0, r3
 8002d42:	4603      	mov	r3, r0
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	4403      	add	r3, r0
 8002d48:	409a      	lsls	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	2b06      	cmp	r3, #6
 8002d58:	d824      	bhi.n	8002da4 <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685a      	ldr	r2, [r3, #4]
 8002d64:	4613      	mov	r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	4413      	add	r3, r2
 8002d6a:	3b05      	subs	r3, #5
 8002d6c:	221f      	movs	r2, #31
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	43da      	mvns	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	400a      	ands	r2, r1
 8002d7a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	4618      	mov	r0, r3
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685a      	ldr	r2, [r3, #4]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	4413      	add	r3, r2
 8002d94:	3b05      	subs	r3, #5
 8002d96:	fa00 f203 	lsl.w	r2, r0, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	635a      	str	r2, [r3, #52]	; 0x34
 8002da2:	e04c      	b.n	8002e3e <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	2b0c      	cmp	r3, #12
 8002daa:	d824      	bhi.n	8002df6 <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685a      	ldr	r2, [r3, #4]
 8002db6:	4613      	mov	r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	4413      	add	r3, r2
 8002dbc:	3b23      	subs	r3, #35	; 0x23
 8002dbe:	221f      	movs	r2, #31
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	43da      	mvns	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	400a      	ands	r2, r1
 8002dcc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	4618      	mov	r0, r3
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	4613      	mov	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4413      	add	r3, r2
 8002de6:	3b23      	subs	r3, #35	; 0x23
 8002de8:	fa00 f203 	lsl.w	r2, r0, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	430a      	orrs	r2, r1
 8002df2:	631a      	str	r2, [r3, #48]	; 0x30
 8002df4:	e023      	b.n	8002e3e <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685a      	ldr	r2, [r3, #4]
 8002e00:	4613      	mov	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4413      	add	r3, r2
 8002e06:	3b41      	subs	r3, #65	; 0x41
 8002e08:	221f      	movs	r2, #31
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	43da      	mvns	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	400a      	ands	r2, r1
 8002e16:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	4618      	mov	r0, r3
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	685a      	ldr	r2, [r3, #4]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4413      	add	r3, r2
 8002e30:	3b41      	subs	r3, #65	; 0x41
 8002e32:	fa00 f203 	lsl.w	r2, r0, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a22      	ldr	r2, [pc, #136]	; (8002ecc <HAL_ADC_ConfigChannel+0x258>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d109      	bne.n	8002e5c <HAL_ADC_ConfigChannel+0x1e8>
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2b12      	cmp	r3, #18
 8002e4e:	d105      	bne.n	8002e5c <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002e50:	4b1f      	ldr	r3, [pc, #124]	; (8002ed0 <HAL_ADC_ConfigChannel+0x25c>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	4a1e      	ldr	r2, [pc, #120]	; (8002ed0 <HAL_ADC_ConfigChannel+0x25c>)
 8002e56:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e5a:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a1a      	ldr	r2, [pc, #104]	; (8002ecc <HAL_ADC_ConfigChannel+0x258>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d125      	bne.n	8002eb2 <HAL_ADC_ConfigChannel+0x23e>
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a17      	ldr	r2, [pc, #92]	; (8002ec8 <HAL_ADC_ConfigChannel+0x254>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d003      	beq.n	8002e78 <HAL_ADC_ConfigChannel+0x204>
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2b11      	cmp	r3, #17
 8002e76:	d11c      	bne.n	8002eb2 <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002e78:	4b15      	ldr	r3, [pc, #84]	; (8002ed0 <HAL_ADC_ConfigChannel+0x25c>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	4a14      	ldr	r2, [pc, #80]	; (8002ed0 <HAL_ADC_ConfigChannel+0x25c>)
 8002e7e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e82:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a0f      	ldr	r2, [pc, #60]	; (8002ec8 <HAL_ADC_ConfigChannel+0x254>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d111      	bne.n	8002eb2 <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002e8e:	4b11      	ldr	r3, [pc, #68]	; (8002ed4 <HAL_ADC_ConfigChannel+0x260>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a11      	ldr	r2, [pc, #68]	; (8002ed8 <HAL_ADC_ConfigChannel+0x264>)
 8002e94:	fba2 2303 	umull	r2, r3, r2, r3
 8002e98:	0c9a      	lsrs	r2, r3, #18
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	4413      	add	r3, r2
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002ea4:	e002      	b.n	8002eac <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1f9      	bne.n	8002ea6 <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3714      	adds	r7, #20
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr
 8002ec8:	10000012 	.word	0x10000012
 8002ecc:	40012000 	.word	0x40012000
 8002ed0:	40012300 	.word	0x40012300
 8002ed4:	20000044 	.word	0x20000044
 8002ed8:	431bde83 	.word	0x431bde83

08002edc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002ee4:	4b78      	ldr	r3, [pc, #480]	; (80030c8 <ADC_Init+0x1ec>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	4a77      	ldr	r2, [pc, #476]	; (80030c8 <ADC_Init+0x1ec>)
 8002eea:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002eee:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002ef0:	4b75      	ldr	r3, [pc, #468]	; (80030c8 <ADC_Init+0x1ec>)
 8002ef2:	685a      	ldr	r2, [r3, #4]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	4973      	ldr	r1, [pc, #460]	; (80030c8 <ADC_Init+0x1ec>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	6859      	ldr	r1, [r3, #4]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	021a      	lsls	r2, r3, #8
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	685a      	ldr	r2, [r3, #4]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002f30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	6859      	ldr	r1, [r3, #4]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689a      	ldr	r2, [r3, #8]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689a      	ldr	r2, [r3, #8]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6899      	ldr	r1, [r3, #8]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	68da      	ldr	r2, [r3, #12]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	430a      	orrs	r2, r1
 8002f64:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6a:	4a58      	ldr	r2, [pc, #352]	; (80030cc <ADC_Init+0x1f0>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d022      	beq.n	8002fb6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	689a      	ldr	r2, [r3, #8]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f7e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6899      	ldr	r1, [r3, #8]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	689a      	ldr	r2, [r3, #8]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002fa0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	6899      	ldr	r1, [r3, #8]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	609a      	str	r2, [r3, #8]
 8002fb4:	e00f      	b.n	8002fd6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689a      	ldr	r2, [r3, #8]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fc4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	689a      	ldr	r2, [r3, #8]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002fd4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	689a      	ldr	r2, [r3, #8]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 0202 	bic.w	r2, r2, #2
 8002fe4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	6899      	ldr	r1, [r3, #8]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	005a      	lsls	r2, r3, #1
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d01b      	beq.n	800303c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	685a      	ldr	r2, [r3, #4]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003012:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	685a      	ldr	r2, [r3, #4]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003022:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6859      	ldr	r1, [r3, #4]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302e:	3b01      	subs	r3, #1
 8003030:	035a      	lsls	r2, r3, #13
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	430a      	orrs	r2, r1
 8003038:	605a      	str	r2, [r3, #4]
 800303a:	e007      	b.n	800304c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800304a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800305a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	69db      	ldr	r3, [r3, #28]
 8003066:	3b01      	subs	r3, #1
 8003068:	051a      	lsls	r2, r3, #20
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	430a      	orrs	r2, r1
 8003070:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	689a      	ldr	r2, [r3, #8]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003080:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6899      	ldr	r1, [r3, #8]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800308e:	025a      	lsls	r2, r3, #9
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	430a      	orrs	r2, r1
 8003096:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689a      	ldr	r2, [r3, #8]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	6899      	ldr	r1, [r3, #8]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	029a      	lsls	r2, r3, #10
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	430a      	orrs	r2, r1
 80030ba:	609a      	str	r2, [r3, #8]
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr
 80030c8:	40012300 	.word	0x40012300
 80030cc:	0f000001 	.word	0x0f000001

080030d0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f003 0307 	and.w	r3, r3, #7
 80030f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030f4:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <__NVIC_SetPriorityGrouping+0x40>)
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030fa:	68ba      	ldr	r2, [r7, #8]
 80030fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003100:	4013      	ands	r3, r2
 8003102:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800310c:	4b06      	ldr	r3, [pc, #24]	; (8003128 <__NVIC_SetPriorityGrouping+0x44>)
 800310e:	4313      	orrs	r3, r2
 8003110:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003112:	4a04      	ldr	r2, [pc, #16]	; (8003124 <__NVIC_SetPriorityGrouping+0x40>)
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	60d3      	str	r3, [r2, #12]
}
 8003118:	bf00      	nop
 800311a:	3714      	adds	r7, #20
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr
 8003124:	e000ed00 	.word	0xe000ed00
 8003128:	05fa0000 	.word	0x05fa0000

0800312c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003130:	4b04      	ldr	r3, [pc, #16]	; (8003144 <__NVIC_GetPriorityGrouping+0x18>)
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	0a1b      	lsrs	r3, r3, #8
 8003136:	f003 0307 	and.w	r3, r3, #7
}
 800313a:	4618      	mov	r0, r3
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr
 8003144:	e000ed00 	.word	0xe000ed00

08003148 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	4603      	mov	r3, r0
 8003150:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003156:	2b00      	cmp	r3, #0
 8003158:	db0b      	blt.n	8003172 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800315a:	79fb      	ldrb	r3, [r7, #7]
 800315c:	f003 021f 	and.w	r2, r3, #31
 8003160:	4907      	ldr	r1, [pc, #28]	; (8003180 <__NVIC_EnableIRQ+0x38>)
 8003162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003166:	095b      	lsrs	r3, r3, #5
 8003168:	2001      	movs	r0, #1
 800316a:	fa00 f202 	lsl.w	r2, r0, r2
 800316e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003172:	bf00      	nop
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	e000e100 	.word	0xe000e100

08003184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	4603      	mov	r3, r0
 800318c:	6039      	str	r1, [r7, #0]
 800318e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003194:	2b00      	cmp	r3, #0
 8003196:	db0a      	blt.n	80031ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	b2da      	uxtb	r2, r3
 800319c:	490c      	ldr	r1, [pc, #48]	; (80031d0 <__NVIC_SetPriority+0x4c>)
 800319e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a2:	0112      	lsls	r2, r2, #4
 80031a4:	b2d2      	uxtb	r2, r2
 80031a6:	440b      	add	r3, r1
 80031a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031ac:	e00a      	b.n	80031c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	b2da      	uxtb	r2, r3
 80031b2:	4908      	ldr	r1, [pc, #32]	; (80031d4 <__NVIC_SetPriority+0x50>)
 80031b4:	79fb      	ldrb	r3, [r7, #7]
 80031b6:	f003 030f 	and.w	r3, r3, #15
 80031ba:	3b04      	subs	r3, #4
 80031bc:	0112      	lsls	r2, r2, #4
 80031be:	b2d2      	uxtb	r2, r2
 80031c0:	440b      	add	r3, r1
 80031c2:	761a      	strb	r2, [r3, #24]
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr
 80031d0:	e000e100 	.word	0xe000e100
 80031d4:	e000ed00 	.word	0xe000ed00

080031d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031d8:	b480      	push	{r7}
 80031da:	b089      	sub	sp, #36	; 0x24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f003 0307 	and.w	r3, r3, #7
 80031ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	f1c3 0307 	rsb	r3, r3, #7
 80031f2:	2b04      	cmp	r3, #4
 80031f4:	bf28      	it	cs
 80031f6:	2304      	movcs	r3, #4
 80031f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	3304      	adds	r3, #4
 80031fe:	2b06      	cmp	r3, #6
 8003200:	d902      	bls.n	8003208 <NVIC_EncodePriority+0x30>
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	3b03      	subs	r3, #3
 8003206:	e000      	b.n	800320a <NVIC_EncodePriority+0x32>
 8003208:	2300      	movs	r3, #0
 800320a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800320c:	f04f 32ff 	mov.w	r2, #4294967295
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	fa02 f303 	lsl.w	r3, r2, r3
 8003216:	43da      	mvns	r2, r3
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	401a      	ands	r2, r3
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003220:	f04f 31ff 	mov.w	r1, #4294967295
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	fa01 f303 	lsl.w	r3, r1, r3
 800322a:	43d9      	mvns	r1, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003230:	4313      	orrs	r3, r2
         );
}
 8003232:	4618      	mov	r0, r3
 8003234:	3724      	adds	r7, #36	; 0x24
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
	...

08003240 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	3b01      	subs	r3, #1
 800324c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003250:	d301      	bcc.n	8003256 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003252:	2301      	movs	r3, #1
 8003254:	e00f      	b.n	8003276 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003256:	4a0a      	ldr	r2, [pc, #40]	; (8003280 <SysTick_Config+0x40>)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	3b01      	subs	r3, #1
 800325c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800325e:	210f      	movs	r1, #15
 8003260:	f04f 30ff 	mov.w	r0, #4294967295
 8003264:	f7ff ff8e 	bl	8003184 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003268:	4b05      	ldr	r3, [pc, #20]	; (8003280 <SysTick_Config+0x40>)
 800326a:	2200      	movs	r2, #0
 800326c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800326e:	4b04      	ldr	r3, [pc, #16]	; (8003280 <SysTick_Config+0x40>)
 8003270:	2207      	movs	r2, #7
 8003272:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	e000e010 	.word	0xe000e010

08003284 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f7ff ff29 	bl	80030e4 <__NVIC_SetPriorityGrouping>
}
 8003292:	bf00      	nop
 8003294:	3708      	adds	r7, #8
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800329a:	b580      	push	{r7, lr}
 800329c:	b086      	sub	sp, #24
 800329e:	af00      	add	r7, sp, #0
 80032a0:	4603      	mov	r3, r0
 80032a2:	60b9      	str	r1, [r7, #8]
 80032a4:	607a      	str	r2, [r7, #4]
 80032a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80032a8:	2300      	movs	r3, #0
 80032aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032ac:	f7ff ff3e 	bl	800312c <__NVIC_GetPriorityGrouping>
 80032b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	68b9      	ldr	r1, [r7, #8]
 80032b6:	6978      	ldr	r0, [r7, #20]
 80032b8:	f7ff ff8e 	bl	80031d8 <NVIC_EncodePriority>
 80032bc:	4602      	mov	r2, r0
 80032be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032c2:	4611      	mov	r1, r2
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff ff5d 	bl	8003184 <__NVIC_SetPriority>
}
 80032ca:	bf00      	nop
 80032cc:	3718      	adds	r7, #24
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b082      	sub	sp, #8
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	4603      	mov	r3, r0
 80032da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7ff ff31 	bl	8003148 <__NVIC_EnableIRQ>
}
 80032e6:	bf00      	nop
 80032e8:	3708      	adds	r7, #8
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b082      	sub	sp, #8
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f7ff ffa2 	bl	8003240 <SysTick_Config>
 80032fc:	4603      	mov	r3, r0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
	...

08003308 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003310:	2300      	movs	r3, #0
 8003312:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003314:	f7ff fa10 	bl	8002738 <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d101      	bne.n	8003324 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e099      	b.n	8003458 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2202      	movs	r2, #2
 8003330:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f022 0201 	bic.w	r2, r2, #1
 8003342:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003344:	e00f      	b.n	8003366 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003346:	f7ff f9f7 	bl	8002738 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	2b05      	cmp	r3, #5
 8003352:	d908      	bls.n	8003366 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2220      	movs	r2, #32
 8003358:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2203      	movs	r2, #3
 800335e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e078      	b.n	8003458 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0301 	and.w	r3, r3, #1
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1e8      	bne.n	8003346 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800337c:	697a      	ldr	r2, [r7, #20]
 800337e:	4b38      	ldr	r3, [pc, #224]	; (8003460 <HAL_DMA_Init+0x158>)
 8003380:	4013      	ands	r3, r2
 8003382:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685a      	ldr	r2, [r3, #4]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003392:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800339e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a1b      	ldr	r3, [r3, #32]
 80033b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033bc:	2b04      	cmp	r3, #4
 80033be:	d107      	bne.n	80033d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c8:	4313      	orrs	r3, r2
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	697a      	ldr	r2, [r7, #20]
 80033d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	f023 0307 	bic.w	r3, r3, #7
 80033e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ec:	697a      	ldr	r2, [r7, #20]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f6:	2b04      	cmp	r3, #4
 80033f8:	d117      	bne.n	800342a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	4313      	orrs	r3, r2
 8003402:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00e      	beq.n	800342a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 f8bd 	bl	800358c <DMA_CheckFifoParam>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d008      	beq.n	800342a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2240      	movs	r2, #64	; 0x40
 800341c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003426:	2301      	movs	r3, #1
 8003428:	e016      	b.n	8003458 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	697a      	ldr	r2, [r7, #20]
 8003430:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 f874 	bl	8003520 <DMA_CalcBaseAndBitshift>
 8003438:	4603      	mov	r3, r0
 800343a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003440:	223f      	movs	r2, #63	; 0x3f
 8003442:	409a      	lsls	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3718      	adds	r7, #24
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	e010803f 	.word	0xe010803f

08003464 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e050      	b.n	8003518 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d101      	bne.n	8003486 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003482:	2302      	movs	r3, #2
 8003484:	e048      	b.n	8003518 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 0201 	bic.w	r2, r2, #1
 8003494:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2200      	movs	r2, #0
 800349c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2200      	movs	r2, #0
 80034a4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2200      	movs	r2, #0
 80034ac:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2200      	movs	r2, #0
 80034b4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2200      	movs	r2, #0
 80034bc:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2221      	movs	r2, #33	; 0x21
 80034c4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 f82a 	bl	8003520 <DMA_CalcBaseAndBitshift>
 80034cc:	4603      	mov	r3, r0
 80034ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d4:	223f      	movs	r2, #63	; 0x3f
 80034d6:	409a      	lsls	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	b2db      	uxtb	r3, r3
 800352e:	3b10      	subs	r3, #16
 8003530:	4a13      	ldr	r2, [pc, #76]	; (8003580 <DMA_CalcBaseAndBitshift+0x60>)
 8003532:	fba2 2303 	umull	r2, r3, r2, r3
 8003536:	091b      	lsrs	r3, r3, #4
 8003538:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800353a:	4a12      	ldr	r2, [pc, #72]	; (8003584 <DMA_CalcBaseAndBitshift+0x64>)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	4413      	add	r3, r2
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	461a      	mov	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2b03      	cmp	r3, #3
 800354c:	d908      	bls.n	8003560 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	461a      	mov	r2, r3
 8003554:	4b0c      	ldr	r3, [pc, #48]	; (8003588 <DMA_CalcBaseAndBitshift+0x68>)
 8003556:	4013      	ands	r3, r2
 8003558:	1d1a      	adds	r2, r3, #4
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	659a      	str	r2, [r3, #88]	; 0x58
 800355e:	e006      	b.n	800356e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	461a      	mov	r2, r3
 8003566:	4b08      	ldr	r3, [pc, #32]	; (8003588 <DMA_CalcBaseAndBitshift+0x68>)
 8003568:	4013      	ands	r3, r2
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003572:	4618      	mov	r0, r3
 8003574:	3714      	adds	r7, #20
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	aaaaaaab 	.word	0xaaaaaaab
 8003584:	0800c884 	.word	0x0800c884
 8003588:	fffffc00 	.word	0xfffffc00

0800358c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003594:	2300      	movs	r3, #0
 8003596:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d11f      	bne.n	80035e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	2b03      	cmp	r3, #3
 80035aa:	d855      	bhi.n	8003658 <DMA_CheckFifoParam+0xcc>
 80035ac:	a201      	add	r2, pc, #4	; (adr r2, 80035b4 <DMA_CheckFifoParam+0x28>)
 80035ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b2:	bf00      	nop
 80035b4:	080035c5 	.word	0x080035c5
 80035b8:	080035d7 	.word	0x080035d7
 80035bc:	080035c5 	.word	0x080035c5
 80035c0:	08003659 	.word	0x08003659
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d045      	beq.n	800365c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035d4:	e042      	b.n	800365c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80035de:	d13f      	bne.n	8003660 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035e4:	e03c      	b.n	8003660 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035ee:	d121      	bne.n	8003634 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	2b03      	cmp	r3, #3
 80035f4:	d836      	bhi.n	8003664 <DMA_CheckFifoParam+0xd8>
 80035f6:	a201      	add	r2, pc, #4	; (adr r2, 80035fc <DMA_CheckFifoParam+0x70>)
 80035f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035fc:	0800360d 	.word	0x0800360d
 8003600:	08003613 	.word	0x08003613
 8003604:	0800360d 	.word	0x0800360d
 8003608:	08003625 	.word	0x08003625
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	73fb      	strb	r3, [r7, #15]
      break;
 8003610:	e02f      	b.n	8003672 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003616:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d024      	beq.n	8003668 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003622:	e021      	b.n	8003668 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003628:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800362c:	d11e      	bne.n	800366c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003632:	e01b      	b.n	800366c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	2b02      	cmp	r3, #2
 8003638:	d902      	bls.n	8003640 <DMA_CheckFifoParam+0xb4>
 800363a:	2b03      	cmp	r3, #3
 800363c:	d003      	beq.n	8003646 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800363e:	e018      	b.n	8003672 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	73fb      	strb	r3, [r7, #15]
      break;
 8003644:	e015      	b.n	8003672 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00e      	beq.n	8003670 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	73fb      	strb	r3, [r7, #15]
      break;
 8003656:	e00b      	b.n	8003670 <DMA_CheckFifoParam+0xe4>
      break;
 8003658:	bf00      	nop
 800365a:	e00a      	b.n	8003672 <DMA_CheckFifoParam+0xe6>
      break;
 800365c:	bf00      	nop
 800365e:	e008      	b.n	8003672 <DMA_CheckFifoParam+0xe6>
      break;
 8003660:	bf00      	nop
 8003662:	e006      	b.n	8003672 <DMA_CheckFifoParam+0xe6>
      break;
 8003664:	bf00      	nop
 8003666:	e004      	b.n	8003672 <DMA_CheckFifoParam+0xe6>
      break;
 8003668:	bf00      	nop
 800366a:	e002      	b.n	8003672 <DMA_CheckFifoParam+0xe6>
      break;   
 800366c:	bf00      	nop
 800366e:	e000      	b.n	8003672 <DMA_CheckFifoParam+0xe6>
      break;
 8003670:	bf00      	nop
    }
  } 
  
  return status; 
 8003672:	7bfb      	ldrb	r3, [r7, #15]
}
 8003674:	4618      	mov	r0, r3
 8003676:	3714      	adds	r7, #20
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e049      	b.n	8003726 <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d106      	bne.n	80036ac <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f006 fb36 	bl	8009d18 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2202      	movs	r2, #2
 80036b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685a      	ldr	r2, [r3, #4]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	430a      	orrs	r2, r1
 80036c8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036d0:	f023 0107 	bic.w	r1, r3, #7
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	689a      	ldr	r2, [r3, #8]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	430a      	orrs	r2, r1
 80036de:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036e6:	4b12      	ldr	r3, [pc, #72]	; (8003730 <HAL_DMA2D_Init+0xb0>)
 80036e8:	4013      	ands	r3, r2
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	68d1      	ldr	r1, [r2, #12]
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	6812      	ldr	r2, [r2, #0]
 80036f2:	430b      	orrs	r3, r1
 80036f4:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036fc:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	051a      	lsls	r2, r3, #20
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	055b      	lsls	r3, r3, #21
 800370c:	431a      	orrs	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	430a      	orrs	r2, r1
 8003714:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	ffffc000 	.word	0xffffc000

08003734 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b086      	sub	sp, #24
 8003738:	af02      	add	r7, sp, #8
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]
 8003740:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003748:	2b01      	cmp	r3, #1
 800374a:	d101      	bne.n	8003750 <HAL_DMA2D_Start+0x1c>
 800374c:	2302      	movs	r3, #2
 800374e:	e018      	b.n	8003782 <HAL_DMA2D_Start+0x4e>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2202      	movs	r2, #2
 800375c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	9300      	str	r3, [sp, #0]
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	68b9      	ldr	r1, [r7, #8]
 800376a:	68f8      	ldr	r0, [r7, #12]
 800376c:	f000 f994 	bl	8003a98 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f042 0201 	orr.w	r2, r2, #1
 800377e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b086      	sub	sp, #24
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
 8003792:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003794:	2300      	movs	r3, #0
 8003796:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d056      	beq.n	8003854 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 80037a6:	f7fe ffc7 	bl	8002738 <HAL_GetTick>
 80037aa:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80037ac:	e04b      	b.n	8003846 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d023      	beq.n	8003808 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f003 0320 	and.w	r3, r3, #32
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d005      	beq.n	80037d6 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ce:	f043 0202 	orr.w	r2, r3, #2
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d005      	beq.n	80037ec <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e4:	f043 0201 	orr.w	r2, r3, #1
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2221      	movs	r2, #33	; 0x21
 80037f2:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2204      	movs	r2, #4
 80037f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e0a5      	b.n	8003954 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800380e:	d01a      	beq.n	8003846 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8003810:	f7fe ff92 	bl	8002738 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	683a      	ldr	r2, [r7, #0]
 800381c:	429a      	cmp	r2, r3
 800381e:	d302      	bcc.n	8003826 <HAL_DMA2D_PollForTransfer+0x9c>
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d10f      	bne.n	8003846 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800382a:	f043 0220 	orr.w	r2, r3, #32
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2203      	movs	r2, #3
 8003836:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e086      	b.n	8003954 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d0ac      	beq.n	80037ae <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	69db      	ldr	r3, [r3, #28]
 800385a:	f003 0320 	and.w	r3, r3, #32
 800385e:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003866:	f003 0320 	and.w	r3, r3, #32
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	4313      	orrs	r3, r2
 800386e:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d061      	beq.n	800393a <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003876:	f7fe ff5f 	bl	8002738 <HAL_GetTick>
 800387a:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800387c:	e056      	b.n	800392c <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f003 0329 	and.w	r3, r3, #41	; 0x29
 800388c:	2b00      	cmp	r3, #0
 800388e:	d02e      	beq.n	80038ee <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f003 0308 	and.w	r3, r3, #8
 8003896:	2b00      	cmp	r3, #0
 8003898:	d005      	beq.n	80038a6 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800389e:	f043 0204 	orr.w	r2, r3, #4
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f003 0320 	and.w	r3, r3, #32
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d005      	beq.n	80038bc <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b4:	f043 0202 	orr.w	r2, r3, #2
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d005      	beq.n	80038d2 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ca:	f043 0201 	orr.w	r2, r3, #1
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2229      	movs	r2, #41	; 0x29
 80038d8:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2204      	movs	r2, #4
 80038de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e032      	b.n	8003954 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f4:	d01a      	beq.n	800392c <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80038f6:	f7fe ff1f 	bl	8002738 <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	429a      	cmp	r2, r3
 8003904:	d302      	bcc.n	800390c <HAL_DMA2D_PollForTransfer+0x182>
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d10f      	bne.n	800392c <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003910:	f043 0220 	orr.w	r2, r3, #32
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2203      	movs	r2, #3
 800391c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e013      	b.n	8003954 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f003 0310 	and.w	r3, r3, #16
 8003936:	2b00      	cmp	r3, #0
 8003938:	d0a1      	beq.n	800387e <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2212      	movs	r2, #18
 8003940:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2201      	movs	r2, #1
 8003946:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	3718      	adds	r7, #24
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800395c:	b480      	push	{r7}
 800395e:	b087      	sub	sp, #28
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003974:	2b01      	cmp	r3, #1
 8003976:	d101      	bne.n	800397c <HAL_DMA2D_ConfigLayer+0x20>
 8003978:	2302      	movs	r3, #2
 800397a:	e084      	b.n	8003a86 <HAL_DMA2D_ConfigLayer+0x12a>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2202      	movs	r2, #2
 8003988:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800398c:	683a      	ldr	r2, [r7, #0]
 800398e:	4613      	mov	r3, r2
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	4413      	add	r3, r2
 8003994:	00db      	lsls	r3, r3, #3
 8003996:	3320      	adds	r3, #32
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	4413      	add	r3, r2
 800399c:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	685a      	ldr	r2, [r3, #4]
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	041b      	lsls	r3, r3, #16
 80039a8:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 80039b0:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 80039b8:	4313      	orrs	r3, r2
 80039ba:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 80039bc:	4b35      	ldr	r3, [pc, #212]	; (8003a94 <HAL_DMA2D_ConfigLayer+0x138>)
 80039be:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	2b0a      	cmp	r3, #10
 80039c6:	d003      	beq.n	80039d0 <HAL_DMA2D_ConfigLayer+0x74>
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	2b09      	cmp	r3, #9
 80039ce:	d107      	bne.n	80039e0 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	4313      	orrs	r3, r2
 80039dc:	617b      	str	r3, [r7, #20]
 80039de:	e005      	b.n	80039ec <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	061b      	lsls	r3, r3, #24
 80039e6:	697a      	ldr	r2, [r7, #20]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d120      	bne.n	8003a34 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	43db      	mvns	r3, r3
 80039fc:	ea02 0103 	and.w	r1, r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	697a      	ldr	r2, [r7, #20]
 8003a06:	430a      	orrs	r2, r1
 8003a08:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	6812      	ldr	r2, [r2, #0]
 8003a12:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	2b0a      	cmp	r3, #10
 8003a1a:	d003      	beq.n	8003a24 <HAL_DMA2D_ConfigLayer+0xc8>
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	2b09      	cmp	r3, #9
 8003a22:	d127      	bne.n	8003a74 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	68da      	ldr	r2, [r3, #12]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003a30:	629a      	str	r2, [r3, #40]	; 0x28
 8003a32:	e01f      	b.n	8003a74 <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	69da      	ldr	r2, [r3, #28]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	43db      	mvns	r3, r3
 8003a3e:	ea02 0103 	and.w	r1, r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	697a      	ldr	r2, [r7, #20]
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	6812      	ldr	r2, [r2, #0]
 8003a54:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	2b0a      	cmp	r3, #10
 8003a5c:	d003      	beq.n	8003a66 <HAL_DMA2D_ConfigLayer+0x10a>
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	2b09      	cmp	r3, #9
 8003a64:	d106      	bne.n	8003a74 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	68da      	ldr	r2, [r3, #12]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003a72:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	371c      	adds	r7, #28
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	ff33000f 	.word	0xff33000f

08003a98 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b08b      	sub	sp, #44	; 0x2c
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
 8003aa4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aac:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	041a      	lsls	r2, r3, #16
 8003ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	430a      	orrs	r2, r1
 8003abe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ad0:	d174      	bne.n	8003bbc <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003ad8:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003ae0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003ae8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d108      	bne.n	8003b0a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	431a      	orrs	r2, r3
 8003afe:	6a3b      	ldr	r3, [r7, #32]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	697a      	ldr	r2, [r7, #20]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	627b      	str	r3, [r7, #36]	; 0x24
 8003b08:	e053      	b.n	8003bb2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d106      	bne.n	8003b20 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003b12:	69ba      	ldr	r2, [r7, #24]
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b1e:	e048      	b.n	8003bb2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d111      	bne.n	8003b4c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	0cdb      	lsrs	r3, r3, #19
 8003b2c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	0a9b      	lsrs	r3, r3, #10
 8003b32:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	08db      	lsrs	r3, r3, #3
 8003b38:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	015a      	lsls	r2, r3, #5
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	02db      	lsls	r3, r3, #11
 8003b42:	4313      	orrs	r3, r2
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	627b      	str	r3, [r7, #36]	; 0x24
 8003b4a:	e032      	b.n	8003bb2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	2b03      	cmp	r3, #3
 8003b52:	d117      	bne.n	8003b84 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003b54:	6a3b      	ldr	r3, [r7, #32]
 8003b56:	0fdb      	lsrs	r3, r3, #31
 8003b58:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	0cdb      	lsrs	r3, r3, #19
 8003b5e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	0adb      	lsrs	r3, r3, #11
 8003b64:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	08db      	lsrs	r3, r3, #3
 8003b6a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	015a      	lsls	r2, r3, #5
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	029b      	lsls	r3, r3, #10
 8003b74:	431a      	orrs	r2, r3
 8003b76:	6a3b      	ldr	r3, [r7, #32]
 8003b78:	03db      	lsls	r3, r3, #15
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	627b      	str	r3, [r7, #36]	; 0x24
 8003b82:	e016      	b.n	8003bb2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003b84:	6a3b      	ldr	r3, [r7, #32]
 8003b86:	0f1b      	lsrs	r3, r3, #28
 8003b88:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	0d1b      	lsrs	r3, r3, #20
 8003b8e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	0b1b      	lsrs	r3, r3, #12
 8003b94:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	091b      	lsrs	r3, r3, #4
 8003b9a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	011a      	lsls	r2, r3, #4
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	021b      	lsls	r3, r3, #8
 8003ba4:	431a      	orrs	r2, r3
 8003ba6:	6a3b      	ldr	r3, [r7, #32]
 8003ba8:	031b      	lsls	r3, r3, #12
 8003baa:	4313      	orrs	r3, r2
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bb8:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003bba:	e003      	b.n	8003bc4 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68ba      	ldr	r2, [r7, #8]
 8003bc2:	60da      	str	r2, [r3, #12]
}
 8003bc4:	bf00      	nop
 8003bc6:	372c      	adds	r7, #44	; 0x2c
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]
 8003bdc:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	019a      	lsls	r2, r3, #6
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	431a      	orrs	r2, r3
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	021b      	lsls	r3, r3, #8
 8003bea:	431a      	orrs	r2, r3
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	041b      	lsls	r3, r3, #16
 8003bf0:	431a      	orrs	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8003bf6:	bf00      	nop
 8003bf8:	3714      	adds	r7, #20
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr

08003c02 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b086      	sub	sp, #24
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	60f8      	str	r0, [r7, #12]
 8003c0a:	60b9      	str	r1, [r7, #8]
 8003c0c:	607a      	str	r2, [r7, #4]
 8003c0e:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c10:	f7fe fd92 	bl	8002738 <HAL_GetTick>
 8003c14:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003c16:	e009      	b.n	8003c2c <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 8003c18:	f7fe fd8e 	bl	8002738 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c26:	d901      	bls.n	8003c2c <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e015      	b.n	8003c58 <DSI_ShortWrite+0x56>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d0ee      	beq.n	8003c18 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	019a      	lsls	r2, r3, #6
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	431a      	orrs	r2, r3
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	021b      	lsls	r3, r3, #8
 8003c46:	ea42 0103 	orr.w	r1, r2, r3
 8003c4a:	6a3b      	ldr	r3, [r7, #32]
 8003c4c:	041a      	lsls	r2, r3, #16
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	430a      	orrs	r2, r1
 8003c54:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3718      	adds	r7, #24
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b088      	sub	sp, #32
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d101      	bne.n	8003c74 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e106      	b.n	8003e82 <HAL_DSI_Init+0x222>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	7c5b      	ldrb	r3, [r3, #17]
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d102      	bne.n	8003c84 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f006 f86a 	bl	8009d58 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2203      	movs	r2, #3
 8003c88:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	613b      	str	r3, [r7, #16]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003c9e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003caa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cae:	613b      	str	r3, [r7, #16]
 8003cb0:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003cb2:	f7fe fd41 	bl	8002738 <HAL_GetTick>
 8003cb6:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003cb8:	e009      	b.n	8003cce <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003cba:	f7fe fd3d 	bl	8002738 <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003cc8:	d901      	bls.n	8003cce <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e0d9      	b.n	8003e82 <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003cd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d0ed      	beq.n	8003cba <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	4b68      	ldr	r3, [pc, #416]	; (8003e8c <HAL_DSI_Init+0x22c>)
 8003cec:	400b      	ands	r3, r1
 8003cee:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	009a      	lsls	r2, r3, #2
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	02db      	lsls	r3, r3, #11
 8003d06:	431a      	orrs	r2, r3
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	041b      	lsls	r3, r3, #16
 8003d0e:	431a      	orrs	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	430a      	orrs	r2, r1
 8003d16:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	60fb      	str	r3, [r7, #12]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f042 0201 	orr.w	r2, r2, #1
 8003d2e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	60fb      	str	r3, [r7, #12]
 8003d40:	68fb      	ldr	r3, [r7, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d42:	f7fe fcf9 	bl	8002738 <HAL_GetTick>
 8003d46:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003d48:	e009      	b.n	8003d5e <HAL_DSI_Init+0xfe>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003d4a:	f7fe fcf5 	bl	8002738 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d58:	d901      	bls.n	8003d5e <HAL_DSI_Init+0xfe>
    {
      return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e091      	b.n	8003e82 <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d0ed      	beq.n	8003d4a <HAL_DSI_Init+0xea>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f042 0206 	orr.w	r2, r2, #6
 8003d7e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f022 0203 	bic.w	r2, r2, #3
 8003d92:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	431a      	orrs	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f042 0201 	orr.w	r2, r2, #1
 8003dac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 0203 	bic.w	r2, r2, #3
 8003dc0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	68da      	ldr	r2, [r3, #12]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	689a      	ldr	r2, [r3, #8]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003de8:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	6899      	ldr	r1, [r3, #8]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689a      	ldr	r2, [r3, #8]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d002      	beq.n	8003e0a <HAL_DSI_Init+0x1aa>
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	e000      	b.n	8003e0c <HAL_DSI_Init+0x1ac>
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	4a1f      	ldr	r2, [pc, #124]	; (8003e90 <HAL_DSI_Init+0x230>)
 8003e12:	fb02 f203 	mul.w	r2, r2, r3
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f003 0303 	and.w	r3, r3, #3
 8003e1e:	409a      	lsls	r2, r3
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8003e28:	fb01 f303 	mul.w	r3, r1, r3
 8003e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e30:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003e42:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	697a      	ldr	r2, [r7, #20]
 8003e54:	430a      	orrs	r2, r1
 8003e56:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	619a      	str	r2, [r3, #24]

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3720      	adds	r7, #32
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	fffc8603 	.word	0xfffc8603
 8003e90:	003d0900 	.word	0x003d0900

08003e94 <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d101      	bne.n	8003ea6 <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e066      	b.n	8003f74 <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2203      	movs	r2, #3
 8003eaa:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8003eac:	2300      	movs	r3, #0
 8003eae:	617b      	str	r3, [r7, #20]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f022 0208 	bic.w	r2, r2, #8
 8003ec0:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003ecc:	f003 0308 	and.w	r3, r3, #8
 8003ed0:	617b      	str	r3, [r7, #20]
 8003ed2:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	613b      	str	r3, [r7, #16]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	685a      	ldr	r2, [r3, #4]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f022 0201 	bic.w	r2, r2, #1
 8003ee6:	605a      	str	r2, [r3, #4]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	613b      	str	r3, [r7, #16]
 8003ef4:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f022 0206 	bic.w	r2, r2, #6
 8003f06:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	60fb      	str	r3, [r7, #12]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f022 0201 	bic.w	r2, r2, #1
 8003f1e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	60fb      	str	r3, [r7, #12]
 8003f30:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 8003f32:	2300      	movs	r3, #0
 8003f34:	60bb      	str	r3, [r7, #8]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003f46:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003f52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f56:	60bb      	str	r3, [r7, #8]
 8003f58:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f005 ff40 	bl	8009de0 <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3718      	adds	r7, #24
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @ref DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	7c1b      	ldrb	r3, [r3, #16]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d101      	bne.n	8003f92 <HAL_DSI_ConfigErrorMonitor+0x16>
 8003f8e:	2302      	movs	r3, #2
 8003f90:	e0aa      	b.n	80040e8 <HAL_DSI_ConfigErrorMonitor+0x16c>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2201      	movs	r2, #1
 8003f96:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	f003 0301 	and.w	r3, r3, #1
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00a      	beq.n	8003fd2 <HAL_DSI_ConfigErrorMonitor+0x56>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003fcc:	430b      	orrs	r3, r1
 8003fce:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	f003 0302 	and.w	r3, r3, #2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d009      	beq.n	8003ff0 <HAL_DSI_ConfigErrorMonitor+0x74>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8003fec:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	f003 0304 	and.w	r3, r3, #4
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d009      	beq.n	800400e <HAL_DSI_ConfigErrorMonitor+0x92>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 0201 	orr.w	r2, r2, #1
 800400a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	f003 0308 	and.w	r3, r3, #8
 8004014:	2b00      	cmp	r3, #0
 8004016:	d009      	beq.n	800402c <HAL_DSI_ConfigErrorMonitor+0xb0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f042 0202 	orr.w	r2, r2, #2
 8004028:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	f003 0310 	and.w	r3, r3, #16
 8004032:	2b00      	cmp	r3, #0
 8004034:	d009      	beq.n	800404a <HAL_DSI_ConfigErrorMonitor+0xce>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f042 020c 	orr.w	r2, r2, #12
 8004046:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	f003 0320 	and.w	r3, r3, #32
 8004050:	2b00      	cmp	r3, #0
 8004052:	d009      	beq.n	8004068 <HAL_DSI_ConfigErrorMonitor+0xec>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f042 0210 	orr.w	r2, r2, #16
 8004064:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800406e:	2b00      	cmp	r3, #0
 8004070:	d009      	beq.n	8004086 <HAL_DSI_ConfigErrorMonitor+0x10a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f042 0220 	orr.w	r2, r2, #32
 8004082:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800408c:	2b00      	cmp	r3, #0
 800408e:	d009      	beq.n	80040a4 <HAL_DSI_ConfigErrorMonitor+0x128>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040a0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d009      	beq.n	80040c2 <HAL_DSI_ConfigErrorMonitor+0x146>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80040be:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d009      	beq.n	80040e0 <HAL_DSI_ConfigErrorMonitor+0x164>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 80040dc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	7c1b      	ldrb	r3, [r3, #16]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d101      	bne.n	800410a <HAL_DSI_SetGenericVCID+0x16>
 8004106:	2302      	movs	r3, #2
 8004108:	e016      	b.n	8004138 <HAL_DSI_SetGenericVCID+0x44>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2201      	movs	r2, #1
 800410e:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 0203 	bic.w	r2, r2, #3
 800411e:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	683a      	ldr	r2, [r7, #0]
 800412c:	430a      	orrs	r2, r1
 800412e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	7c1b      	ldrb	r3, [r3, #16]
 8004152:	2b01      	cmp	r3, #1
 8004154:	d101      	bne.n	800415a <HAL_DSI_ConfigVideoMode+0x16>
 8004156:	2302      	movs	r3, #2
 8004158:	e1ee      	b.n	8004538 <HAL_DSI_ConfigVideoMode+0x3f4>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2201      	movs	r2, #1
 800415e:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f022 0201 	bic.w	r2, r2, #1
 800416e:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f022 0201 	bic.w	r2, r2, #1
 8004180:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f022 0203 	bic.w	r2, r2, #3
 8004192:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	68da      	ldr	r2, [r3, #12]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	430a      	orrs	r2, r1
 80041a4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	4b8b      	ldr	r3, [pc, #556]	; (80043e0 <HAL_DSI_ConfigVideoMode+0x29c>)
 80041b2:	400b      	ands	r3, r1
 80041b4:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	691a      	ldr	r2, [r3, #16]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	430a      	orrs	r2, r1
 80041c6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	4b84      	ldr	r3, [pc, #528]	; (80043e4 <HAL_DSI_ConfigVideoMode+0x2a0>)
 80041d4:	400b      	ands	r3, r1
 80041d6:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	695a      	ldr	r2, [r3, #20]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	430a      	orrs	r2, r1
 80041e8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	4b7b      	ldr	r3, [pc, #492]	; (80043e4 <HAL_DSI_ConfigVideoMode+0x2a0>)
 80041f6:	400b      	ands	r3, r1
 80041f8:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	699a      	ldr	r2, [r3, #24]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	430a      	orrs	r2, r1
 800420a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68da      	ldr	r2, [r3, #12]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f022 0203 	bic.w	r2, r2, #3
 800421a:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68d9      	ldr	r1, [r3, #12]
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	430a      	orrs	r2, r1
 800422c:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	695a      	ldr	r2, [r3, #20]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f022 0207 	bic.w	r2, r2, #7
 800423c:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	6959      	ldr	r1, [r3, #20]
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	6a1b      	ldr	r3, [r3, #32]
 800424c:	431a      	orrs	r2, r3
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	69db      	ldr	r3, [r3, #28]
 8004252:	431a      	orrs	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	430a      	orrs	r2, r1
 800425a:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	691a      	ldr	r2, [r3, #16]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f022 020f 	bic.w	r2, r2, #15
 800426a:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	6919      	ldr	r1, [r3, #16]
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	685a      	ldr	r2, [r3, #4]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	430a      	orrs	r2, r1
 800427c:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f022 020e 	bic.w	r2, r2, #14
 800428e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	005a      	lsls	r2, r3, #1
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	430a      	orrs	r2, r1
 80042a6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	2b03      	cmp	r3, #3
 80042b0:	d110      	bne.n	80042d4 <HAL_DSI_ConfigVideoMode+0x190>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	691a      	ldr	r2, [r3, #16]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042c0:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	6919      	ldr	r1, [r3, #16]
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	689a      	ldr	r2, [r3, #8]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	430a      	orrs	r2, r1
 80042d2:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	4b42      	ldr	r3, [pc, #264]	; (80043e8 <HAL_DSI_ConfigVideoMode+0x2a4>)
 80042e0:	400b      	ands	r3, r1
 80042e2:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	430a      	orrs	r2, r1
 80042f4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	4b39      	ldr	r3, [pc, #228]	; (80043e8 <HAL_DSI_ConfigVideoMode+0x2a4>)
 8004302:	400b      	ands	r3, r1
 8004304:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	430a      	orrs	r2, r1
 8004316:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	4b32      	ldr	r3, [pc, #200]	; (80043ec <HAL_DSI_ConfigVideoMode+0x2a8>)
 8004324:	400b      	ands	r3, r1
 8004326:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	430a      	orrs	r2, r1
 8004338:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	4b2a      	ldr	r3, [pc, #168]	; (80043f0 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8004346:	400b      	ands	r3, r1
 8004348:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	430a      	orrs	r2, r1
 800435a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	4b22      	ldr	r3, [pc, #136]	; (80043f0 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8004368:	400b      	ands	r3, r1
 800436a:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	430a      	orrs	r2, r1
 800437c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	4b19      	ldr	r3, [pc, #100]	; (80043f0 <HAL_DSI_ConfigVideoMode+0x2ac>)
 800438a:	400b      	ands	r3, r1
 800438c:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	430a      	orrs	r2, r1
 800439e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	4b0d      	ldr	r3, [pc, #52]	; (80043e0 <HAL_DSI_ConfigVideoMode+0x29c>)
 80043ac:	400b      	ands	r3, r1
 80043ae:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	430a      	orrs	r2, r1
 80043c0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043d0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043dc:	e00a      	b.n	80043f4 <HAL_DSI_ConfigVideoMode+0x2b0>
 80043de:	bf00      	nop
 80043e0:	ffffc000 	.word	0xffffc000
 80043e4:	ffffe000 	.word	0xffffe000
 80043e8:	fffff000 	.word	0xfffff000
 80043ec:	ffff8000 	.word	0xffff8000
 80043f0:	fffffc00 	.word	0xfffffc00
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	430a      	orrs	r2, r1
 80043fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	699a      	ldr	r2, [r3, #24]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 800440a:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	6999      	ldr	r1, [r3, #24]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004416:	041a      	lsls	r2, r3, #16
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	430a      	orrs	r2, r1
 800441e:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	699a      	ldr	r2, [r3, #24]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800442e:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6999      	ldr	r1, [r3, #24]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	430a      	orrs	r2, r1
 8004440:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004450:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	430a      	orrs	r2, r1
 8004462:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004472:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	430a      	orrs	r2, r1
 8004484:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004494:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	430a      	orrs	r2, r1
 80044a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044b6:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	430a      	orrs	r2, r1
 80044c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80044d8:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	430a      	orrs	r2, r1
 80044ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044fa:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	430a      	orrs	r2, r1
 800450c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800451c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	430a      	orrs	r2, r1
 800452e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	7c1b      	ldrb	r3, [r3, #16]
 8004552:	2b01      	cmp	r3, #1
 8004554:	d101      	bne.n	800455a <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 8004556:	2302      	movs	r3, #2
 8004558:	e0c5      	b.n	80046e6 <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2201      	movs	r2, #1
 800455e:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f042 0201 	orr.w	r2, r2, #1
 800456e:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f022 0201 	bic.w	r2, r2, #1
 8004580:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f042 0201 	orr.w	r2, r2, #1
 8004594:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68da      	ldr	r2, [r3, #12]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f022 0203 	bic.w	r2, r2, #3
 80045a6:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68d9      	ldr	r1, [r3, #12]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	695a      	ldr	r2, [r3, #20]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f022 0207 	bic.w	r2, r2, #7
 80045c8:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	6959      	ldr	r1, [r3, #20]
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	69da      	ldr	r2, [r3, #28]
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	431a      	orrs	r2, r3
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	431a      	orrs	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	430a      	orrs	r2, r1
 80045e6:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	691a      	ldr	r2, [r3, #16]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f022 020f 	bic.w	r2, r2, #15
 80045f6:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	6919      	ldr	r1, [r3, #16]
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	685a      	ldr	r2, [r3, #4]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	430a      	orrs	r2, r1
 8004608:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f022 020e 	bic.w	r2, r2, #14
 800461a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	005a      	lsls	r2, r3, #1
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	430a      	orrs	r2, r1
 8004632:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	4b2c      	ldr	r3, [pc, #176]	; (80046f4 <HAL_DSI_ConfigAdaptedCommandMode+0x1b0>)
 8004642:	400b      	ands	r3, r1
 8004644:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	689a      	ldr	r2, [r3, #8]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	430a      	orrs	r2, r1
 8004656:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004668:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	68da      	ldr	r2, [r3, #12]
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	431a      	orrs	r2, r3
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004682:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8004688:	431a      	orrs	r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	430a      	orrs	r2, r1
 8004690:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f022 0201 	bic.w	r2, r2, #1
 80046a2:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	430a      	orrs	r2, r1
 80046b4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f042 0201 	orr.w	r2, r2, #1
 80046c6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f042 0202 	orr.w	r2, r2, #2
 80046da:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	370c      	adds	r7, #12
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	ffff0000 	.word	0xffff0000

080046f8 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	7c1b      	ldrb	r3, [r3, #16]
 8004706:	2b01      	cmp	r3, #1
 8004708:	d101      	bne.n	800470e <HAL_DSI_ConfigCommand+0x16>
 800470a:	2302      	movs	r3, #2
 800470c:	e049      	b.n	80047a2 <HAL_DSI_ConfigCommand+0xaa>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	4b24      	ldr	r3, [pc, #144]	; (80047b0 <HAL_DSI_ConfigCommand+0xb8>)
 8004720:	400b      	ands	r3, r1
 8004722:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004732:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8004738:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 800473e:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8004744:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 800474a:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 8004750:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 8004756:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 800475c:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 8004762:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 8004768:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 800476e:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	430a      	orrs	r2, r1
 8004776:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f022 0202 	bic.w	r2, r2, #2
 8004786:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	430a      	orrs	r2, r1
 8004798:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	370c      	adds	r7, #12
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	fef080ff 	.word	0xfef080ff

080047b4 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @ref DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	7c1b      	ldrb	r3, [r3, #16]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d101      	bne.n	80047ca <HAL_DSI_ConfigFlowControl+0x16>
 80047c6:	2302      	movs	r3, #2
 80047c8:	e016      	b.n	80047f8 <HAL_DSI_ConfigFlowControl+0x44>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2201      	movs	r2, #1
 80047ce:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f022 021f 	bic.w	r2, r2, #31
 80047de:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	683a      	ldr	r2, [r7, #0]
 80047ec:	430a      	orrs	r2, r1
 80047ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	7c1b      	ldrb	r3, [r3, #16]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d101      	bne.n	800481a <HAL_DSI_ConfigPhyTimer+0x16>
 8004816:	2302      	movs	r3, #2
 8004818:	e058      	b.n	80048cc <HAL_DSI_ConfigPhyTimer+0xc8>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2201      	movs	r2, #1
 800481e:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	4293      	cmp	r3, r2
 800482a:	bf38      	it	cc
 800482c:	4613      	movcc	r3, r2
 800482e:	60fb      	str	r3, [r7, #12]
     This timings are configured by the HS2LP_TIME and LP2HS_TIME in the DSI Host Clock Lane Timer Configuration Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8004840:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	041a      	lsls	r2, r3, #16
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	431a      	orrs	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	430a      	orrs	r2, r1
 800485a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800486e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	691a      	ldr	r2, [r3, #16]
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	041b      	lsls	r3, r3, #16
 8004884:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800488c:	431a      	orrs	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	430a      	orrs	r2, r1
 8004894:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80048a8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	695b      	ldr	r3, [r3, #20]
 80048b8:	021a      	lsls	r2, r3, #8
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	430a      	orrs	r2, r1
 80048c0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3714      	adds	r7, #20
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	7c1b      	ldrb	r3, [r3, #16]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d101      	bne.n	80048ee <HAL_DSI_ConfigHostTimeouts+0x16>
 80048ea:	2302      	movs	r3, #2
 80048ec:	e0b4      	b.n	8004a58 <HAL_DSI_ConfigHostTimeouts+0x180>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2201      	movs	r2, #1
 80048f2:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	689a      	ldr	r2, [r3, #8]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004902:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	6899      	ldr	r1, [r3, #8]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	021a      	lsls	r2, r3, #8
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	430a      	orrs	r2, r1
 8004916:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	b292      	uxth	r2, r2
 8004924:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	6f99      	ldr	r1, [r3, #120]	; 0x78
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	041a      	lsls	r2, r3, #16
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	430a      	orrs	r2, r1
 8004938:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	4b47      	ldr	r3, [pc, #284]	; (8004a64 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004946:	400b      	ands	r3, r1
 8004948:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	689a      	ldr	r2, [r3, #8]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	430a      	orrs	r2, r1
 800495a:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	4b3f      	ldr	r3, [pc, #252]	; (8004a64 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004968:	400b      	ands	r3, r1
 800496a:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	68da      	ldr	r2, [r3, #12]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	430a      	orrs	r2, r1
 800497c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	4b36      	ldr	r3, [pc, #216]	; (8004a64 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 800498c:	400b      	ands	r3, r1
 800498e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	691a      	ldr	r2, [r3, #16]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	430a      	orrs	r2, r1
 80049a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	4b2b      	ldr	r3, [pc, #172]	; (8004a64 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80049b6:	400b      	ands	r3, r1
 80049b8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	695a      	ldr	r2, [r3, #20]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	430a      	orrs	r2, r1
 80049ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80049e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	699a      	ldr	r2, [r3, #24]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	430a      	orrs	r2, r1
 80049f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	4b16      	ldr	r3, [pc, #88]	; (8004a64 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004a0a:	400b      	ands	r3, r1
 8004a0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	69da      	ldr	r2, [r3, #28]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	430a      	orrs	r2, r1
 8004a22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	4b0c      	ldr	r3, [pc, #48]	; (8004a64 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004a34:	400b      	ands	r3, r1
 8004a36:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	6a1a      	ldr	r2, [r3, #32]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr
 8004a64:	ffff0000 	.word	0xffff0000

08004a68 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	7c1b      	ldrb	r3, [r3, #16]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d101      	bne.n	8004a7c <HAL_DSI_Start+0x14>
 8004a78:	2302      	movs	r3, #2
 8004a7a:	e02b      	b.n	8004ad4 <HAL_DSI_Start+0x6c>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8004a82:	2300      	movs	r3, #0
 8004a84:	60fb      	str	r3, [r7, #12]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	685a      	ldr	r2, [r3, #4]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f042 0201 	orr.w	r2, r2, #1
 8004a94:	605a      	str	r2, [r3, #4]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f003 0301 	and.w	r3, r3, #1
 8004aa0:	60fb      	str	r3, [r7, #12]
 8004aa2:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	60bb      	str	r3, [r7, #8]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f042 0208 	orr.w	r2, r2, #8
 8004ab8:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004ac4:	f003 0308 	and.w	r3, r3, #8
 8004ac8:	60bb      	str	r3, [r7, #8]
 8004aca:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3714      	adds	r7, #20
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b088      	sub	sp, #32
 8004ae4:	af02      	add	r7, sp, #8
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	607a      	str	r2, [r7, #4]
 8004aec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	7c1b      	ldrb	r3, [r3, #16]
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d101      	bne.n	8004afa <HAL_DSI_ShortWrite+0x1a>
 8004af6:	2302      	movs	r3, #2
 8004af8:	e010      	b.n	8004b1c <HAL_DSI_ShortWrite+0x3c>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2201      	movs	r2, #1
 8004afe:	741a      	strb	r2, [r3, #16]

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8004b00:	6a3b      	ldr	r3, [r7, #32]
 8004b02:	9300      	str	r3, [sp, #0]
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	68b9      	ldr	r1, [r7, #8]
 8004b0a:	68f8      	ldr	r0, [r7, #12]
 8004b0c:	f7ff f879 	bl	8003c02 <DSI_ShortWrite>
 8004b10:	4603      	mov	r3, r0
 8004b12:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2200      	movs	r2, #0
 8004b18:	741a      	strb	r2, [r3, #16]

  return status;
 8004b1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3718      	adds	r7, #24
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b08c      	sub	sp, #48	; 0x30
 8004b28:	af02      	add	r7, sp, #8
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
 8004b30:	603b      	str	r3, [r7, #0]
  uint32_t uicounter, nbBytes, count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8004b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b34:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	7c1b      	ldrb	r3, [r3, #16]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d101      	bne.n	8004b42 <HAL_DSI_LongWrite+0x1e>
 8004b3e:	2302      	movs	r3, #2
 8004b40:	e084      	b.n	8004c4c <HAL_DSI_LongWrite+0x128>
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2201      	movs	r2, #1
 8004b46:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b48:	f7fd fdf6 	bl	8002738 <HAL_GetTick>
 8004b4c:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004b4e:	e00c      	b.n	8004b6a <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004b50:	f7fd fdf2 	bl	8002738 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b5e:	d904      	bls.n	8004b6a <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e070      	b.n	8004c4c <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b70:	f003 0301 	and.w	r3, r3, #1
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d0eb      	beq.n	8004b50 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8004b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b7a:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	2b03      	cmp	r3, #3
 8004b80:	bf28      	it	cs
 8004b82:	2303      	movcs	r3, #3
 8004b84:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8004b86:	2300      	movs	r3, #0
 8004b88:	623b      	str	r3, [r7, #32]
 8004b8a:	e00f      	b.n	8004bac <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8004b8c:	69ba      	ldr	r2, [r7, #24]
 8004b8e:	6a3b      	ldr	r3, [r7, #32]
 8004b90:	4413      	add	r3, r2
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	461a      	mov	r2, r3
 8004b96:	6a3b      	ldr	r3, [r7, #32]
 8004b98:	3301      	adds	r3, #1
 8004b9a:	00db      	lsls	r3, r3, #3
 8004b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba0:	69fa      	ldr	r2, [r7, #28]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8004ba6:	6a3b      	ldr	r3, [r7, #32]
 8004ba8:	3301      	adds	r3, #1
 8004baa:	623b      	str	r3, [r7, #32]
 8004bac:	6a3a      	ldr	r2, [r7, #32]
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d3eb      	bcc.n	8004b8c <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	69fa      	ldr	r2, [r7, #28]
 8004bba:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8004bbc:	683a      	ldr	r2, [r7, #0]
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8004bc4:	69ba      	ldr	r2, [r7, #24]
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	4413      	add	r3, r2
 8004bca:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8004bcc:	e028      	b.n	8004c20 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8004bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd0:	2b04      	cmp	r3, #4
 8004bd2:	bf28      	it	cs
 8004bd4:	2304      	movcs	r3, #4
 8004bd6:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8004bdc:	2300      	movs	r3, #0
 8004bde:	623b      	str	r3, [r7, #32]
 8004be0:	e00e      	b.n	8004c00 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8004be2:	69ba      	ldr	r2, [r7, #24]
 8004be4:	6a3b      	ldr	r3, [r7, #32]
 8004be6:	4413      	add	r3, r2
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	461a      	mov	r2, r3
 8004bec:	6a3b      	ldr	r3, [r7, #32]
 8004bee:	00db      	lsls	r3, r3, #3
 8004bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf4:	69fa      	ldr	r2, [r7, #28]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8004bfa:	6a3b      	ldr	r3, [r7, #32]
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	623b      	str	r3, [r7, #32]
 8004c00:	6a3a      	ldr	r2, [r7, #32]
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d3ec      	bcc.n	8004be2 <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	69fa      	ldr	r2, [r7, #28]
 8004c0e:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8004c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8004c18:	69ba      	ldr	r2, [r7, #24]
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8004c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d1d3      	bne.n	8004bce <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004c2e:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	3301      	adds	r3, #1
 8004c34:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	9300      	str	r3, [sp, #0]
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	68b9      	ldr	r1, [r7, #8]
 8004c40:	f7fe ffc6 	bl	8003bd0 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2200      	movs	r2, #0
 8004c48:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3728      	adds	r7, #40	; 0x28
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	7c1b      	ldrb	r3, [r3, #16]
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d101      	bne.n	8004c6a <HAL_DSI_SetLowPowerRXFilter+0x16>
 8004c66:	2302      	movs	r3, #2
 8004c68:	e01b      	b.n	8004ca2 <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8004c80:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	065a      	lsls	r2, r3, #25
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	430a      	orrs	r2, r1
 8004c96:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	370c      	adds	r7, #12
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
	...

08004cb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b089      	sub	sp, #36	; 0x24
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004cca:	2300      	movs	r3, #0
 8004ccc:	61fb      	str	r3, [r7, #28]
 8004cce:	e175      	b.n	8004fbc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	697a      	ldr	r2, [r7, #20]
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	f040 8164 	bne.w	8004fb6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d003      	beq.n	8004cfe <HAL_GPIO_Init+0x4e>
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	2b12      	cmp	r3, #18
 8004cfc:	d123      	bne.n	8004d46 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	08da      	lsrs	r2, r3, #3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	3208      	adds	r2, #8
 8004d06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	f003 0307 	and.w	r3, r3, #7
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	220f      	movs	r2, #15
 8004d16:	fa02 f303 	lsl.w	r3, r2, r3
 8004d1a:	43db      	mvns	r3, r3
 8004d1c:	69ba      	ldr	r2, [r7, #24]
 8004d1e:	4013      	ands	r3, r2
 8004d20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	691a      	ldr	r2, [r3, #16]
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	f003 0307 	and.w	r3, r3, #7
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d32:	69ba      	ldr	r2, [r7, #24]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	08da      	lsrs	r2, r3, #3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	3208      	adds	r2, #8
 8004d40:	69b9      	ldr	r1, [r7, #24]
 8004d42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	005b      	lsls	r3, r3, #1
 8004d50:	2203      	movs	r2, #3
 8004d52:	fa02 f303 	lsl.w	r3, r2, r3
 8004d56:	43db      	mvns	r3, r3
 8004d58:	69ba      	ldr	r2, [r7, #24]
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f003 0203 	and.w	r2, r3, #3
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	005b      	lsls	r3, r3, #1
 8004d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6e:	69ba      	ldr	r2, [r7, #24]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	69ba      	ldr	r2, [r7, #24]
 8004d78:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d00b      	beq.n	8004d9a <HAL_GPIO_Init+0xea>
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d007      	beq.n	8004d9a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004d8e:	2b11      	cmp	r3, #17
 8004d90:	d003      	beq.n	8004d9a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	2b12      	cmp	r3, #18
 8004d98:	d130      	bne.n	8004dfc <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	005b      	lsls	r3, r3, #1
 8004da4:	2203      	movs	r2, #3
 8004da6:	fa02 f303 	lsl.w	r3, r2, r3
 8004daa:	43db      	mvns	r3, r3
 8004dac:	69ba      	ldr	r2, [r7, #24]
 8004dae:	4013      	ands	r3, r2
 8004db0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	68da      	ldr	r2, [r3, #12]
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	005b      	lsls	r3, r3, #1
 8004dba:	fa02 f303 	lsl.w	r3, r2, r3
 8004dbe:	69ba      	ldr	r2, [r7, #24]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	69ba      	ldr	r2, [r7, #24]
 8004dc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd8:	43db      	mvns	r3, r3
 8004dda:	69ba      	ldr	r2, [r7, #24]
 8004ddc:	4013      	ands	r3, r2
 8004dde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	091b      	lsrs	r3, r3, #4
 8004de6:	f003 0201 	and.w	r2, r3, #1
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	fa02 f303 	lsl.w	r3, r2, r3
 8004df0:	69ba      	ldr	r2, [r7, #24]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	69ba      	ldr	r2, [r7, #24]
 8004dfa:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	005b      	lsls	r3, r3, #1
 8004e06:	2203      	movs	r2, #3
 8004e08:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0c:	43db      	mvns	r3, r3
 8004e0e:	69ba      	ldr	r2, [r7, #24]
 8004e10:	4013      	ands	r3, r2
 8004e12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	689a      	ldr	r2, [r3, #8]
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	005b      	lsls	r3, r3, #1
 8004e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e20:	69ba      	ldr	r2, [r7, #24]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	69ba      	ldr	r2, [r7, #24]
 8004e2a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f000 80be 	beq.w	8004fb6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e3a:	4b65      	ldr	r3, [pc, #404]	; (8004fd0 <HAL_GPIO_Init+0x320>)
 8004e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e3e:	4a64      	ldr	r2, [pc, #400]	; (8004fd0 <HAL_GPIO_Init+0x320>)
 8004e40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e44:	6453      	str	r3, [r2, #68]	; 0x44
 8004e46:	4b62      	ldr	r3, [pc, #392]	; (8004fd0 <HAL_GPIO_Init+0x320>)
 8004e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e4e:	60fb      	str	r3, [r7, #12]
 8004e50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004e52:	4a60      	ldr	r2, [pc, #384]	; (8004fd4 <HAL_GPIO_Init+0x324>)
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	089b      	lsrs	r3, r3, #2
 8004e58:	3302      	adds	r3, #2
 8004e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	f003 0303 	and.w	r3, r3, #3
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	220f      	movs	r2, #15
 8004e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6e:	43db      	mvns	r3, r3
 8004e70:	69ba      	ldr	r2, [r7, #24]
 8004e72:	4013      	ands	r3, r2
 8004e74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a57      	ldr	r2, [pc, #348]	; (8004fd8 <HAL_GPIO_Init+0x328>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d037      	beq.n	8004eee <HAL_GPIO_Init+0x23e>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a56      	ldr	r2, [pc, #344]	; (8004fdc <HAL_GPIO_Init+0x32c>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d031      	beq.n	8004eea <HAL_GPIO_Init+0x23a>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a55      	ldr	r2, [pc, #340]	; (8004fe0 <HAL_GPIO_Init+0x330>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d02b      	beq.n	8004ee6 <HAL_GPIO_Init+0x236>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a54      	ldr	r2, [pc, #336]	; (8004fe4 <HAL_GPIO_Init+0x334>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d025      	beq.n	8004ee2 <HAL_GPIO_Init+0x232>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a53      	ldr	r2, [pc, #332]	; (8004fe8 <HAL_GPIO_Init+0x338>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d01f      	beq.n	8004ede <HAL_GPIO_Init+0x22e>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a52      	ldr	r2, [pc, #328]	; (8004fec <HAL_GPIO_Init+0x33c>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d019      	beq.n	8004eda <HAL_GPIO_Init+0x22a>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a51      	ldr	r2, [pc, #324]	; (8004ff0 <HAL_GPIO_Init+0x340>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d013      	beq.n	8004ed6 <HAL_GPIO_Init+0x226>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a50      	ldr	r2, [pc, #320]	; (8004ff4 <HAL_GPIO_Init+0x344>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d00d      	beq.n	8004ed2 <HAL_GPIO_Init+0x222>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a4f      	ldr	r2, [pc, #316]	; (8004ff8 <HAL_GPIO_Init+0x348>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d007      	beq.n	8004ece <HAL_GPIO_Init+0x21e>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a4e      	ldr	r2, [pc, #312]	; (8004ffc <HAL_GPIO_Init+0x34c>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d101      	bne.n	8004eca <HAL_GPIO_Init+0x21a>
 8004ec6:	2309      	movs	r3, #9
 8004ec8:	e012      	b.n	8004ef0 <HAL_GPIO_Init+0x240>
 8004eca:	230a      	movs	r3, #10
 8004ecc:	e010      	b.n	8004ef0 <HAL_GPIO_Init+0x240>
 8004ece:	2308      	movs	r3, #8
 8004ed0:	e00e      	b.n	8004ef0 <HAL_GPIO_Init+0x240>
 8004ed2:	2307      	movs	r3, #7
 8004ed4:	e00c      	b.n	8004ef0 <HAL_GPIO_Init+0x240>
 8004ed6:	2306      	movs	r3, #6
 8004ed8:	e00a      	b.n	8004ef0 <HAL_GPIO_Init+0x240>
 8004eda:	2305      	movs	r3, #5
 8004edc:	e008      	b.n	8004ef0 <HAL_GPIO_Init+0x240>
 8004ede:	2304      	movs	r3, #4
 8004ee0:	e006      	b.n	8004ef0 <HAL_GPIO_Init+0x240>
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e004      	b.n	8004ef0 <HAL_GPIO_Init+0x240>
 8004ee6:	2302      	movs	r3, #2
 8004ee8:	e002      	b.n	8004ef0 <HAL_GPIO_Init+0x240>
 8004eea:	2301      	movs	r3, #1
 8004eec:	e000      	b.n	8004ef0 <HAL_GPIO_Init+0x240>
 8004eee:	2300      	movs	r3, #0
 8004ef0:	69fa      	ldr	r2, [r7, #28]
 8004ef2:	f002 0203 	and.w	r2, r2, #3
 8004ef6:	0092      	lsls	r2, r2, #2
 8004ef8:	4093      	lsls	r3, r2
 8004efa:	69ba      	ldr	r2, [r7, #24]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004f00:	4934      	ldr	r1, [pc, #208]	; (8004fd4 <HAL_GPIO_Init+0x324>)
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	089b      	lsrs	r3, r3, #2
 8004f06:	3302      	adds	r3, #2
 8004f08:	69ba      	ldr	r2, [r7, #24]
 8004f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f0e:	4b3c      	ldr	r3, [pc, #240]	; (8005000 <HAL_GPIO_Init+0x350>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	43db      	mvns	r3, r3
 8004f18:	69ba      	ldr	r2, [r7, #24]
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d003      	beq.n	8004f32 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004f2a:	69ba      	ldr	r2, [r7, #24]
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f32:	4a33      	ldr	r2, [pc, #204]	; (8005000 <HAL_GPIO_Init+0x350>)
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004f38:	4b31      	ldr	r3, [pc, #196]	; (8005000 <HAL_GPIO_Init+0x350>)
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	43db      	mvns	r3, r3
 8004f42:	69ba      	ldr	r2, [r7, #24]
 8004f44:	4013      	ands	r3, r2
 8004f46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d003      	beq.n	8004f5c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004f54:	69ba      	ldr	r2, [r7, #24]
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004f5c:	4a28      	ldr	r2, [pc, #160]	; (8005000 <HAL_GPIO_Init+0x350>)
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f62:	4b27      	ldr	r3, [pc, #156]	; (8005000 <HAL_GPIO_Init+0x350>)
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	43db      	mvns	r3, r3
 8004f6c:	69ba      	ldr	r2, [r7, #24]
 8004f6e:	4013      	ands	r3, r2
 8004f70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d003      	beq.n	8004f86 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004f7e:	69ba      	ldr	r2, [r7, #24]
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f86:	4a1e      	ldr	r2, [pc, #120]	; (8005000 <HAL_GPIO_Init+0x350>)
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f8c:	4b1c      	ldr	r3, [pc, #112]	; (8005000 <HAL_GPIO_Init+0x350>)
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	43db      	mvns	r3, r3
 8004f96:	69ba      	ldr	r2, [r7, #24]
 8004f98:	4013      	ands	r3, r2
 8004f9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d003      	beq.n	8004fb0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004fa8:	69ba      	ldr	r2, [r7, #24]
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004fb0:	4a13      	ldr	r2, [pc, #76]	; (8005000 <HAL_GPIO_Init+0x350>)
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	3301      	adds	r3, #1
 8004fba:	61fb      	str	r3, [r7, #28]
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	2b0f      	cmp	r3, #15
 8004fc0:	f67f ae86 	bls.w	8004cd0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004fc4:	bf00      	nop
 8004fc6:	3724      	adds	r7, #36	; 0x24
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr
 8004fd0:	40023800 	.word	0x40023800
 8004fd4:	40013800 	.word	0x40013800
 8004fd8:	40020000 	.word	0x40020000
 8004fdc:	40020400 	.word	0x40020400
 8004fe0:	40020800 	.word	0x40020800
 8004fe4:	40020c00 	.word	0x40020c00
 8004fe8:	40021000 	.word	0x40021000
 8004fec:	40021400 	.word	0x40021400
 8004ff0:	40021800 	.word	0x40021800
 8004ff4:	40021c00 	.word	0x40021c00
 8004ff8:	40022000 	.word	0x40022000
 8004ffc:	40022400 	.word	0x40022400
 8005000:	40013c00 	.word	0x40013c00

08005004 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005004:	b480      	push	{r7}
 8005006:	b087      	sub	sp, #28
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800500e:	2300      	movs	r3, #0
 8005010:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8005012:	2300      	movs	r3, #0
 8005014:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8005016:	2300      	movs	r3, #0
 8005018:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800501a:	2300      	movs	r3, #0
 800501c:	617b      	str	r3, [r7, #20]
 800501e:	e0d9      	b.n	80051d4 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005020:	2201      	movs	r2, #1
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	fa02 f303 	lsl.w	r3, r2, r3
 8005028:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800502a:	683a      	ldr	r2, [r7, #0]
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	4013      	ands	r3, r2
 8005030:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	429a      	cmp	r2, r3
 8005038:	f040 80c9 	bne.w	80051ce <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 800503c:	4a6a      	ldr	r2, [pc, #424]	; (80051e8 <HAL_GPIO_DeInit+0x1e4>)
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	089b      	lsrs	r3, r3, #2
 8005042:	3302      	adds	r3, #2
 8005044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005048:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	f003 0303 	and.w	r3, r3, #3
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	220f      	movs	r2, #15
 8005054:	fa02 f303 	lsl.w	r3, r2, r3
 8005058:	68ba      	ldr	r2, [r7, #8]
 800505a:	4013      	ands	r3, r2
 800505c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a62      	ldr	r2, [pc, #392]	; (80051ec <HAL_GPIO_DeInit+0x1e8>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d037      	beq.n	80050d6 <HAL_GPIO_DeInit+0xd2>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a61      	ldr	r2, [pc, #388]	; (80051f0 <HAL_GPIO_DeInit+0x1ec>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d031      	beq.n	80050d2 <HAL_GPIO_DeInit+0xce>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a60      	ldr	r2, [pc, #384]	; (80051f4 <HAL_GPIO_DeInit+0x1f0>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d02b      	beq.n	80050ce <HAL_GPIO_DeInit+0xca>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a5f      	ldr	r2, [pc, #380]	; (80051f8 <HAL_GPIO_DeInit+0x1f4>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d025      	beq.n	80050ca <HAL_GPIO_DeInit+0xc6>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a5e      	ldr	r2, [pc, #376]	; (80051fc <HAL_GPIO_DeInit+0x1f8>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d01f      	beq.n	80050c6 <HAL_GPIO_DeInit+0xc2>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a5d      	ldr	r2, [pc, #372]	; (8005200 <HAL_GPIO_DeInit+0x1fc>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d019      	beq.n	80050c2 <HAL_GPIO_DeInit+0xbe>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a5c      	ldr	r2, [pc, #368]	; (8005204 <HAL_GPIO_DeInit+0x200>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d013      	beq.n	80050be <HAL_GPIO_DeInit+0xba>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a5b      	ldr	r2, [pc, #364]	; (8005208 <HAL_GPIO_DeInit+0x204>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d00d      	beq.n	80050ba <HAL_GPIO_DeInit+0xb6>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a5a      	ldr	r2, [pc, #360]	; (800520c <HAL_GPIO_DeInit+0x208>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d007      	beq.n	80050b6 <HAL_GPIO_DeInit+0xb2>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a59      	ldr	r2, [pc, #356]	; (8005210 <HAL_GPIO_DeInit+0x20c>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d101      	bne.n	80050b2 <HAL_GPIO_DeInit+0xae>
 80050ae:	2309      	movs	r3, #9
 80050b0:	e012      	b.n	80050d8 <HAL_GPIO_DeInit+0xd4>
 80050b2:	230a      	movs	r3, #10
 80050b4:	e010      	b.n	80050d8 <HAL_GPIO_DeInit+0xd4>
 80050b6:	2308      	movs	r3, #8
 80050b8:	e00e      	b.n	80050d8 <HAL_GPIO_DeInit+0xd4>
 80050ba:	2307      	movs	r3, #7
 80050bc:	e00c      	b.n	80050d8 <HAL_GPIO_DeInit+0xd4>
 80050be:	2306      	movs	r3, #6
 80050c0:	e00a      	b.n	80050d8 <HAL_GPIO_DeInit+0xd4>
 80050c2:	2305      	movs	r3, #5
 80050c4:	e008      	b.n	80050d8 <HAL_GPIO_DeInit+0xd4>
 80050c6:	2304      	movs	r3, #4
 80050c8:	e006      	b.n	80050d8 <HAL_GPIO_DeInit+0xd4>
 80050ca:	2303      	movs	r3, #3
 80050cc:	e004      	b.n	80050d8 <HAL_GPIO_DeInit+0xd4>
 80050ce:	2302      	movs	r3, #2
 80050d0:	e002      	b.n	80050d8 <HAL_GPIO_DeInit+0xd4>
 80050d2:	2301      	movs	r3, #1
 80050d4:	e000      	b.n	80050d8 <HAL_GPIO_DeInit+0xd4>
 80050d6:	2300      	movs	r3, #0
 80050d8:	697a      	ldr	r2, [r7, #20]
 80050da:	f002 0203 	and.w	r2, r2, #3
 80050de:	0092      	lsls	r2, r2, #2
 80050e0:	4093      	lsls	r3, r2
 80050e2:	68ba      	ldr	r2, [r7, #8]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d132      	bne.n	800514e <HAL_GPIO_DeInit+0x14a>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	f003 0303 	and.w	r3, r3, #3
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	220f      	movs	r2, #15
 80050f2:	fa02 f303 	lsl.w	r3, r2, r3
 80050f6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80050f8:	4a3b      	ldr	r2, [pc, #236]	; (80051e8 <HAL_GPIO_DeInit+0x1e4>)
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	089b      	lsrs	r3, r3, #2
 80050fe:	3302      	adds	r3, #2
 8005100:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	43da      	mvns	r2, r3
 8005108:	4837      	ldr	r0, [pc, #220]	; (80051e8 <HAL_GPIO_DeInit+0x1e4>)
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	089b      	lsrs	r3, r3, #2
 800510e:	400a      	ands	r2, r1
 8005110:	3302      	adds	r3, #2
 8005112:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005116:	4b3f      	ldr	r3, [pc, #252]	; (8005214 <HAL_GPIO_DeInit+0x210>)
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	43db      	mvns	r3, r3
 800511e:	493d      	ldr	r1, [pc, #244]	; (8005214 <HAL_GPIO_DeInit+0x210>)
 8005120:	4013      	ands	r3, r2
 8005122:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005124:	4b3b      	ldr	r3, [pc, #236]	; (8005214 <HAL_GPIO_DeInit+0x210>)
 8005126:	685a      	ldr	r2, [r3, #4]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	43db      	mvns	r3, r3
 800512c:	4939      	ldr	r1, [pc, #228]	; (8005214 <HAL_GPIO_DeInit+0x210>)
 800512e:	4013      	ands	r3, r2
 8005130:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005132:	4b38      	ldr	r3, [pc, #224]	; (8005214 <HAL_GPIO_DeInit+0x210>)
 8005134:	689a      	ldr	r2, [r3, #8]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	43db      	mvns	r3, r3
 800513a:	4936      	ldr	r1, [pc, #216]	; (8005214 <HAL_GPIO_DeInit+0x210>)
 800513c:	4013      	ands	r3, r2
 800513e:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005140:	4b34      	ldr	r3, [pc, #208]	; (8005214 <HAL_GPIO_DeInit+0x210>)
 8005142:	68da      	ldr	r2, [r3, #12]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	43db      	mvns	r3, r3
 8005148:	4932      	ldr	r1, [pc, #200]	; (8005214 <HAL_GPIO_DeInit+0x210>)
 800514a:	4013      	ands	r3, r2
 800514c:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	005b      	lsls	r3, r3, #1
 8005156:	2103      	movs	r1, #3
 8005158:	fa01 f303 	lsl.w	r3, r1, r3
 800515c:	43db      	mvns	r3, r3
 800515e:	401a      	ands	r2, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	08da      	lsrs	r2, r3, #3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	3208      	adds	r2, #8
 800516c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	f003 0307 	and.w	r3, r3, #7
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	220f      	movs	r2, #15
 800517a:	fa02 f303 	lsl.w	r3, r2, r3
 800517e:	43db      	mvns	r3, r3
 8005180:	697a      	ldr	r2, [r7, #20]
 8005182:	08d2      	lsrs	r2, r2, #3
 8005184:	4019      	ands	r1, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	3208      	adds	r2, #8
 800518a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	689a      	ldr	r2, [r3, #8]
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	005b      	lsls	r3, r3, #1
 8005196:	2103      	movs	r1, #3
 8005198:	fa01 f303 	lsl.w	r3, r1, r3
 800519c:	43db      	mvns	r3, r3
 800519e:	401a      	ands	r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685a      	ldr	r2, [r3, #4]
 80051a8:	2101      	movs	r1, #1
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	fa01 f303 	lsl.w	r3, r1, r3
 80051b0:	43db      	mvns	r3, r3
 80051b2:	401a      	ands	r2, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	68da      	ldr	r2, [r3, #12]
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	005b      	lsls	r3, r3, #1
 80051c0:	2103      	movs	r1, #3
 80051c2:	fa01 f303 	lsl.w	r3, r1, r3
 80051c6:	43db      	mvns	r3, r3
 80051c8:	401a      	ands	r2, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	60da      	str	r2, [r3, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	3301      	adds	r3, #1
 80051d2:	617b      	str	r3, [r7, #20]
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	2b0f      	cmp	r3, #15
 80051d8:	f67f af22 	bls.w	8005020 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80051dc:	bf00      	nop
 80051de:	371c      	adds	r7, #28
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr
 80051e8:	40013800 	.word	0x40013800
 80051ec:	40020000 	.word	0x40020000
 80051f0:	40020400 	.word	0x40020400
 80051f4:	40020800 	.word	0x40020800
 80051f8:	40020c00 	.word	0x40020c00
 80051fc:	40021000 	.word	0x40021000
 8005200:	40021400 	.word	0x40021400
 8005204:	40021800 	.word	0x40021800
 8005208:	40021c00 	.word	0x40021c00
 800520c:	40022000 	.word	0x40022000
 8005210:	40022400 	.word	0x40022400
 8005214:	40013c00 	.word	0x40013c00

08005218 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	460b      	mov	r3, r1
 8005222:	807b      	strh	r3, [r7, #2]
 8005224:	4613      	mov	r3, r2
 8005226:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005228:	787b      	ldrb	r3, [r7, #1]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d003      	beq.n	8005236 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800522e:	887a      	ldrh	r2, [r7, #2]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005234:	e003      	b.n	800523e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005236:	887b      	ldrh	r3, [r7, #2]
 8005238:	041a      	lsls	r2, r3, #16
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	619a      	str	r2, [r3, #24]
}
 800523e:	bf00      	nop
 8005240:	370c      	adds	r7, #12
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr
	...

0800524c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
 8005252:	4603      	mov	r3, r0
 8005254:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005256:	4b08      	ldr	r3, [pc, #32]	; (8005278 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005258:	695a      	ldr	r2, [r3, #20]
 800525a:	88fb      	ldrh	r3, [r7, #6]
 800525c:	4013      	ands	r3, r2
 800525e:	2b00      	cmp	r3, #0
 8005260:	d006      	beq.n	8005270 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005262:	4a05      	ldr	r2, [pc, #20]	; (8005278 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005264:	88fb      	ldrh	r3, [r7, #6]
 8005266:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005268:	88fb      	ldrh	r3, [r7, #6]
 800526a:	4618      	mov	r0, r3
 800526c:	f003 fc6a 	bl	8008b44 <HAL_GPIO_EXTI_Callback>
  }
}
 8005270:	bf00      	nop
 8005272:	3708      	adds	r7, #8
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	40013c00 	.word	0x40013c00

0800527c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b082      	sub	sp, #8
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d101      	bne.n	800528e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e07f      	b.n	800538e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005294:	b2db      	uxtb	r3, r3
 8005296:	2b00      	cmp	r3, #0
 8005298:	d106      	bne.n	80052a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 f8a9 	bl	80053fa <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2224      	movs	r2, #36	; 0x24
 80052ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f022 0201 	bic.w	r2, r2, #1
 80052be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685a      	ldr	r2, [r3, #4]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80052cc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	689a      	ldr	r2, [r3, #8]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80052dc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d107      	bne.n	80052f6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	689a      	ldr	r2, [r3, #8]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052f2:	609a      	str	r2, [r3, #8]
 80052f4:	e006      	b.n	8005304 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	689a      	ldr	r2, [r3, #8]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005302:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	2b02      	cmp	r3, #2
 800530a:	d104      	bne.n	8005316 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005314:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	6859      	ldr	r1, [r3, #4]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	4b1d      	ldr	r3, [pc, #116]	; (8005398 <HAL_I2C_Init+0x11c>)
 8005322:	430b      	orrs	r3, r1
 8005324:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68da      	ldr	r2, [r3, #12]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005334:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	691a      	ldr	r2, [r3, #16]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	695b      	ldr	r3, [r3, #20]
 800533e:	ea42 0103 	orr.w	r1, r2, r3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	699b      	ldr	r3, [r3, #24]
 8005346:	021a      	lsls	r2, r3, #8
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	430a      	orrs	r2, r1
 800534e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	69d9      	ldr	r1, [r3, #28]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a1a      	ldr	r2, [r3, #32]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	430a      	orrs	r2, r1
 800535e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f042 0201 	orr.w	r2, r2, #1
 800536e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2220      	movs	r2, #32
 800537a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3708      	adds	r7, #8
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	02008000 	.word	0x02008000

0800539c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d101      	bne.n	80053ae <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e021      	b.n	80053f2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2224      	movs	r2, #36	; 0x24
 80053b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f022 0201 	bic.w	r2, r2, #1
 80053c4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 f821 	bl	800540e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3708      	adds	r7, #8
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}

080053fa <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80053fa:	b480      	push	{r7}
 80053fc:	b083      	sub	sp, #12
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005402:	bf00      	nop
 8005404:	370c      	adds	r7, #12
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr

0800540e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800540e:	b480      	push	{r7}
 8005410:	b083      	sub	sp, #12
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8005416:	bf00      	nop
 8005418:	370c      	adds	r7, #12
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
	...

08005424 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b088      	sub	sp, #32
 8005428:	af02      	add	r7, sp, #8
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	4608      	mov	r0, r1
 800542e:	4611      	mov	r1, r2
 8005430:	461a      	mov	r2, r3
 8005432:	4603      	mov	r3, r0
 8005434:	817b      	strh	r3, [r7, #10]
 8005436:	460b      	mov	r3, r1
 8005438:	813b      	strh	r3, [r7, #8]
 800543a:	4613      	mov	r3, r2
 800543c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005444:	b2db      	uxtb	r3, r3
 8005446:	2b20      	cmp	r3, #32
 8005448:	f040 80f9 	bne.w	800563e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800544c:	6a3b      	ldr	r3, [r7, #32]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d002      	beq.n	8005458 <HAL_I2C_Mem_Write+0x34>
 8005452:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005454:	2b00      	cmp	r3, #0
 8005456:	d105      	bne.n	8005464 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800545e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e0ed      	b.n	8005640 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800546a:	2b01      	cmp	r3, #1
 800546c:	d101      	bne.n	8005472 <HAL_I2C_Mem_Write+0x4e>
 800546e:	2302      	movs	r3, #2
 8005470:	e0e6      	b.n	8005640 <HAL_I2C_Mem_Write+0x21c>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2201      	movs	r2, #1
 8005476:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800547a:	f7fd f95d 	bl	8002738 <HAL_GetTick>
 800547e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	9300      	str	r3, [sp, #0]
 8005484:	2319      	movs	r3, #25
 8005486:	2201      	movs	r2, #1
 8005488:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800548c:	68f8      	ldr	r0, [r7, #12]
 800548e:	f000 fad1 	bl	8005a34 <I2C_WaitOnFlagUntilTimeout>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d001      	beq.n	800549c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e0d1      	b.n	8005640 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2221      	movs	r2, #33	; 0x21
 80054a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2240      	movs	r2, #64	; 0x40
 80054a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6a3a      	ldr	r2, [r7, #32]
 80054b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80054bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2200      	movs	r2, #0
 80054c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80054c4:	88f8      	ldrh	r0, [r7, #6]
 80054c6:	893a      	ldrh	r2, [r7, #8]
 80054c8:	8979      	ldrh	r1, [r7, #10]
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	9301      	str	r3, [sp, #4]
 80054ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d0:	9300      	str	r3, [sp, #0]
 80054d2:	4603      	mov	r3, r0
 80054d4:	68f8      	ldr	r0, [r7, #12]
 80054d6:	f000 f9e1 	bl	800589c <I2C_RequestMemoryWrite>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d005      	beq.n	80054ec <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e0a9      	b.n	8005640 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	2bff      	cmp	r3, #255	; 0xff
 80054f4:	d90e      	bls.n	8005514 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	22ff      	movs	r2, #255	; 0xff
 80054fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005500:	b2da      	uxtb	r2, r3
 8005502:	8979      	ldrh	r1, [r7, #10]
 8005504:	2300      	movs	r3, #0
 8005506:	9300      	str	r3, [sp, #0]
 8005508:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800550c:	68f8      	ldr	r0, [r7, #12]
 800550e:	f000 fbb3 	bl	8005c78 <I2C_TransferConfig>
 8005512:	e00f      	b.n	8005534 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005518:	b29a      	uxth	r2, r3
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005522:	b2da      	uxtb	r2, r3
 8005524:	8979      	ldrh	r1, [r7, #10]
 8005526:	2300      	movs	r3, #0
 8005528:	9300      	str	r3, [sp, #0]
 800552a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800552e:	68f8      	ldr	r0, [r7, #12]
 8005530:	f000 fba2 	bl	8005c78 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005538:	68f8      	ldr	r0, [r7, #12]
 800553a:	f000 fabb 	bl	8005ab4 <I2C_WaitOnTXISFlagUntilTimeout>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d001      	beq.n	8005548 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e07b      	b.n	8005640 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554c:	781a      	ldrb	r2, [r3, #0]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005558:	1c5a      	adds	r2, r3, #1
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005562:	b29b      	uxth	r3, r3
 8005564:	3b01      	subs	r3, #1
 8005566:	b29a      	uxth	r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005570:	3b01      	subs	r3, #1
 8005572:	b29a      	uxth	r2, r3
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800557c:	b29b      	uxth	r3, r3
 800557e:	2b00      	cmp	r3, #0
 8005580:	d034      	beq.n	80055ec <HAL_I2C_Mem_Write+0x1c8>
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005586:	2b00      	cmp	r3, #0
 8005588:	d130      	bne.n	80055ec <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	9300      	str	r3, [sp, #0]
 800558e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005590:	2200      	movs	r2, #0
 8005592:	2180      	movs	r1, #128	; 0x80
 8005594:	68f8      	ldr	r0, [r7, #12]
 8005596:	f000 fa4d 	bl	8005a34 <I2C_WaitOnFlagUntilTimeout>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d001      	beq.n	80055a4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e04d      	b.n	8005640 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	2bff      	cmp	r3, #255	; 0xff
 80055ac:	d90e      	bls.n	80055cc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	22ff      	movs	r2, #255	; 0xff
 80055b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055b8:	b2da      	uxtb	r2, r3
 80055ba:	8979      	ldrh	r1, [r7, #10]
 80055bc:	2300      	movs	r3, #0
 80055be:	9300      	str	r3, [sp, #0]
 80055c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f000 fb57 	bl	8005c78 <I2C_TransferConfig>
 80055ca:	e00f      	b.n	80055ec <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055da:	b2da      	uxtb	r2, r3
 80055dc:	8979      	ldrh	r1, [r7, #10]
 80055de:	2300      	movs	r3, #0
 80055e0:	9300      	str	r3, [sp, #0]
 80055e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055e6:	68f8      	ldr	r0, [r7, #12]
 80055e8:	f000 fb46 	bl	8005c78 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d19e      	bne.n	8005534 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055f6:	697a      	ldr	r2, [r7, #20]
 80055f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055fa:	68f8      	ldr	r0, [r7, #12]
 80055fc:	f000 fa9a 	bl	8005b34 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d001      	beq.n	800560a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e01a      	b.n	8005640 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2220      	movs	r2, #32
 8005610:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	6859      	ldr	r1, [r3, #4]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	4b0a      	ldr	r3, [pc, #40]	; (8005648 <HAL_I2C_Mem_Write+0x224>)
 800561e:	400b      	ands	r3, r1
 8005620:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2220      	movs	r2, #32
 8005626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800563a:	2300      	movs	r3, #0
 800563c:	e000      	b.n	8005640 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800563e:	2302      	movs	r3, #2
  }
}
 8005640:	4618      	mov	r0, r3
 8005642:	3718      	adds	r7, #24
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	fe00e800 	.word	0xfe00e800

0800564c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b088      	sub	sp, #32
 8005650:	af02      	add	r7, sp, #8
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	4608      	mov	r0, r1
 8005656:	4611      	mov	r1, r2
 8005658:	461a      	mov	r2, r3
 800565a:	4603      	mov	r3, r0
 800565c:	817b      	strh	r3, [r7, #10]
 800565e:	460b      	mov	r3, r1
 8005660:	813b      	strh	r3, [r7, #8]
 8005662:	4613      	mov	r3, r2
 8005664:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b20      	cmp	r3, #32
 8005670:	f040 80fd 	bne.w	800586e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005674:	6a3b      	ldr	r3, [r7, #32]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d002      	beq.n	8005680 <HAL_I2C_Mem_Read+0x34>
 800567a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800567c:	2b00      	cmp	r3, #0
 800567e:	d105      	bne.n	800568c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005686:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e0f1      	b.n	8005870 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005692:	2b01      	cmp	r3, #1
 8005694:	d101      	bne.n	800569a <HAL_I2C_Mem_Read+0x4e>
 8005696:	2302      	movs	r3, #2
 8005698:	e0ea      	b.n	8005870 <HAL_I2C_Mem_Read+0x224>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2201      	movs	r2, #1
 800569e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80056a2:	f7fd f849 	bl	8002738 <HAL_GetTick>
 80056a6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	9300      	str	r3, [sp, #0]
 80056ac:	2319      	movs	r3, #25
 80056ae:	2201      	movs	r2, #1
 80056b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80056b4:	68f8      	ldr	r0, [r7, #12]
 80056b6:	f000 f9bd 	bl	8005a34 <I2C_WaitOnFlagUntilTimeout>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d001      	beq.n	80056c4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e0d5      	b.n	8005870 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2222      	movs	r2, #34	; 0x22
 80056c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2240      	movs	r2, #64	; 0x40
 80056d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2200      	movs	r2, #0
 80056d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6a3a      	ldr	r2, [r7, #32]
 80056de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80056e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2200      	movs	r2, #0
 80056ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80056ec:	88f8      	ldrh	r0, [r7, #6]
 80056ee:	893a      	ldrh	r2, [r7, #8]
 80056f0:	8979      	ldrh	r1, [r7, #10]
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	9301      	str	r3, [sp, #4]
 80056f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f8:	9300      	str	r3, [sp, #0]
 80056fa:	4603      	mov	r3, r0
 80056fc:	68f8      	ldr	r0, [r7, #12]
 80056fe:	f000 f921 	bl	8005944 <I2C_RequestMemoryRead>
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d005      	beq.n	8005714 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2200      	movs	r2, #0
 800570c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e0ad      	b.n	8005870 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005718:	b29b      	uxth	r3, r3
 800571a:	2bff      	cmp	r3, #255	; 0xff
 800571c:	d90e      	bls.n	800573c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	22ff      	movs	r2, #255	; 0xff
 8005722:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005728:	b2da      	uxtb	r2, r3
 800572a:	8979      	ldrh	r1, [r7, #10]
 800572c:	4b52      	ldr	r3, [pc, #328]	; (8005878 <HAL_I2C_Mem_Read+0x22c>)
 800572e:	9300      	str	r3, [sp, #0]
 8005730:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005734:	68f8      	ldr	r0, [r7, #12]
 8005736:	f000 fa9f 	bl	8005c78 <I2C_TransferConfig>
 800573a:	e00f      	b.n	800575c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005740:	b29a      	uxth	r2, r3
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800574a:	b2da      	uxtb	r2, r3
 800574c:	8979      	ldrh	r1, [r7, #10]
 800574e:	4b4a      	ldr	r3, [pc, #296]	; (8005878 <HAL_I2C_Mem_Read+0x22c>)
 8005750:	9300      	str	r3, [sp, #0]
 8005752:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005756:	68f8      	ldr	r0, [r7, #12]
 8005758:	f000 fa8e 	bl	8005c78 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	9300      	str	r3, [sp, #0]
 8005760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005762:	2200      	movs	r2, #0
 8005764:	2104      	movs	r1, #4
 8005766:	68f8      	ldr	r0, [r7, #12]
 8005768:	f000 f964 	bl	8005a34 <I2C_WaitOnFlagUntilTimeout>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d001      	beq.n	8005776 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e07c      	b.n	8005870 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005780:	b2d2      	uxtb	r2, r2
 8005782:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005788:	1c5a      	adds	r2, r3, #1
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005792:	3b01      	subs	r3, #1
 8005794:	b29a      	uxth	r2, r3
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800579e:	b29b      	uxth	r3, r3
 80057a0:	3b01      	subs	r3, #1
 80057a2:	b29a      	uxth	r2, r3
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d034      	beq.n	800581c <HAL_I2C_Mem_Read+0x1d0>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d130      	bne.n	800581c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	9300      	str	r3, [sp, #0]
 80057be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c0:	2200      	movs	r2, #0
 80057c2:	2180      	movs	r1, #128	; 0x80
 80057c4:	68f8      	ldr	r0, [r7, #12]
 80057c6:	f000 f935 	bl	8005a34 <I2C_WaitOnFlagUntilTimeout>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d001      	beq.n	80057d4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	e04d      	b.n	8005870 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057d8:	b29b      	uxth	r3, r3
 80057da:	2bff      	cmp	r3, #255	; 0xff
 80057dc:	d90e      	bls.n	80057fc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	22ff      	movs	r2, #255	; 0xff
 80057e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057e8:	b2da      	uxtb	r2, r3
 80057ea:	8979      	ldrh	r1, [r7, #10]
 80057ec:	2300      	movs	r3, #0
 80057ee:	9300      	str	r3, [sp, #0]
 80057f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80057f4:	68f8      	ldr	r0, [r7, #12]
 80057f6:	f000 fa3f 	bl	8005c78 <I2C_TransferConfig>
 80057fa:	e00f      	b.n	800581c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005800:	b29a      	uxth	r2, r3
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800580a:	b2da      	uxtb	r2, r3
 800580c:	8979      	ldrh	r1, [r7, #10]
 800580e:	2300      	movs	r3, #0
 8005810:	9300      	str	r3, [sp, #0]
 8005812:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005816:	68f8      	ldr	r0, [r7, #12]
 8005818:	f000 fa2e 	bl	8005c78 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005820:	b29b      	uxth	r3, r3
 8005822:	2b00      	cmp	r3, #0
 8005824:	d19a      	bne.n	800575c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005826:	697a      	ldr	r2, [r7, #20]
 8005828:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f000 f982 	bl	8005b34 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d001      	beq.n	800583a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e01a      	b.n	8005870 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2220      	movs	r2, #32
 8005840:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	6859      	ldr	r1, [r3, #4]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	4b0b      	ldr	r3, [pc, #44]	; (800587c <HAL_I2C_Mem_Read+0x230>)
 800584e:	400b      	ands	r3, r1
 8005850:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2220      	movs	r2, #32
 8005856:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800586a:	2300      	movs	r3, #0
 800586c:	e000      	b.n	8005870 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800586e:	2302      	movs	r3, #2
  }
}
 8005870:	4618      	mov	r0, r3
 8005872:	3718      	adds	r7, #24
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}
 8005878:	80002400 	.word	0x80002400
 800587c:	fe00e800 	.word	0xfe00e800

08005880 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800588e:	b2db      	uxtb	r3, r3
}
 8005890:	4618      	mov	r0, r3
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b086      	sub	sp, #24
 80058a0:	af02      	add	r7, sp, #8
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	4608      	mov	r0, r1
 80058a6:	4611      	mov	r1, r2
 80058a8:	461a      	mov	r2, r3
 80058aa:	4603      	mov	r3, r0
 80058ac:	817b      	strh	r3, [r7, #10]
 80058ae:	460b      	mov	r3, r1
 80058b0:	813b      	strh	r3, [r7, #8]
 80058b2:	4613      	mov	r3, r2
 80058b4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80058b6:	88fb      	ldrh	r3, [r7, #6]
 80058b8:	b2da      	uxtb	r2, r3
 80058ba:	8979      	ldrh	r1, [r7, #10]
 80058bc:	4b20      	ldr	r3, [pc, #128]	; (8005940 <I2C_RequestMemoryWrite+0xa4>)
 80058be:	9300      	str	r3, [sp, #0]
 80058c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80058c4:	68f8      	ldr	r0, [r7, #12]
 80058c6:	f000 f9d7 	bl	8005c78 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058ca:	69fa      	ldr	r2, [r7, #28]
 80058cc:	69b9      	ldr	r1, [r7, #24]
 80058ce:	68f8      	ldr	r0, [r7, #12]
 80058d0:	f000 f8f0 	bl	8005ab4 <I2C_WaitOnTXISFlagUntilTimeout>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d001      	beq.n	80058de <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e02c      	b.n	8005938 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80058de:	88fb      	ldrh	r3, [r7, #6]
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d105      	bne.n	80058f0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80058e4:	893b      	ldrh	r3, [r7, #8]
 80058e6:	b2da      	uxtb	r2, r3
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	629a      	str	r2, [r3, #40]	; 0x28
 80058ee:	e015      	b.n	800591c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80058f0:	893b      	ldrh	r3, [r7, #8]
 80058f2:	0a1b      	lsrs	r3, r3, #8
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	b2da      	uxtb	r2, r3
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058fe:	69fa      	ldr	r2, [r7, #28]
 8005900:	69b9      	ldr	r1, [r7, #24]
 8005902:	68f8      	ldr	r0, [r7, #12]
 8005904:	f000 f8d6 	bl	8005ab4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d001      	beq.n	8005912 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e012      	b.n	8005938 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005912:	893b      	ldrh	r3, [r7, #8]
 8005914:	b2da      	uxtb	r2, r3
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	9300      	str	r3, [sp, #0]
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	2200      	movs	r2, #0
 8005924:	2180      	movs	r1, #128	; 0x80
 8005926:	68f8      	ldr	r0, [r7, #12]
 8005928:	f000 f884 	bl	8005a34 <I2C_WaitOnFlagUntilTimeout>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d001      	beq.n	8005936 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e000      	b.n	8005938 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	3710      	adds	r7, #16
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}
 8005940:	80002000 	.word	0x80002000

08005944 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b086      	sub	sp, #24
 8005948:	af02      	add	r7, sp, #8
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	4608      	mov	r0, r1
 800594e:	4611      	mov	r1, r2
 8005950:	461a      	mov	r2, r3
 8005952:	4603      	mov	r3, r0
 8005954:	817b      	strh	r3, [r7, #10]
 8005956:	460b      	mov	r3, r1
 8005958:	813b      	strh	r3, [r7, #8]
 800595a:	4613      	mov	r3, r2
 800595c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800595e:	88fb      	ldrh	r3, [r7, #6]
 8005960:	b2da      	uxtb	r2, r3
 8005962:	8979      	ldrh	r1, [r7, #10]
 8005964:	4b20      	ldr	r3, [pc, #128]	; (80059e8 <I2C_RequestMemoryRead+0xa4>)
 8005966:	9300      	str	r3, [sp, #0]
 8005968:	2300      	movs	r3, #0
 800596a:	68f8      	ldr	r0, [r7, #12]
 800596c:	f000 f984 	bl	8005c78 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005970:	69fa      	ldr	r2, [r7, #28]
 8005972:	69b9      	ldr	r1, [r7, #24]
 8005974:	68f8      	ldr	r0, [r7, #12]
 8005976:	f000 f89d 	bl	8005ab4 <I2C_WaitOnTXISFlagUntilTimeout>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d001      	beq.n	8005984 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e02c      	b.n	80059de <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005984:	88fb      	ldrh	r3, [r7, #6]
 8005986:	2b01      	cmp	r3, #1
 8005988:	d105      	bne.n	8005996 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800598a:	893b      	ldrh	r3, [r7, #8]
 800598c:	b2da      	uxtb	r2, r3
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	629a      	str	r2, [r3, #40]	; 0x28
 8005994:	e015      	b.n	80059c2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005996:	893b      	ldrh	r3, [r7, #8]
 8005998:	0a1b      	lsrs	r3, r3, #8
 800599a:	b29b      	uxth	r3, r3
 800599c:	b2da      	uxtb	r2, r3
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059a4:	69fa      	ldr	r2, [r7, #28]
 80059a6:	69b9      	ldr	r1, [r7, #24]
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	f000 f883 	bl	8005ab4 <I2C_WaitOnTXISFlagUntilTimeout>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d001      	beq.n	80059b8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e012      	b.n	80059de <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80059b8:	893b      	ldrh	r3, [r7, #8]
 80059ba:	b2da      	uxtb	r2, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	9300      	str	r3, [sp, #0]
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	2200      	movs	r2, #0
 80059ca:	2140      	movs	r1, #64	; 0x40
 80059cc:	68f8      	ldr	r0, [r7, #12]
 80059ce:	f000 f831 	bl	8005a34 <I2C_WaitOnFlagUntilTimeout>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d001      	beq.n	80059dc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	e000      	b.n	80059de <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3710      	adds	r7, #16
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	80002000 	.word	0x80002000

080059ec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	699b      	ldr	r3, [r3, #24]
 80059fa:	f003 0302 	and.w	r3, r3, #2
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	d103      	bne.n	8005a0a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2200      	movs	r2, #0
 8005a08:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	699b      	ldr	r3, [r3, #24]
 8005a10:	f003 0301 	and.w	r3, r3, #1
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d007      	beq.n	8005a28 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	699a      	ldr	r2, [r3, #24]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f042 0201 	orr.w	r2, r2, #1
 8005a26:	619a      	str	r2, [r3, #24]
  }
}
 8005a28:	bf00      	nop
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	603b      	str	r3, [r7, #0]
 8005a40:	4613      	mov	r3, r2
 8005a42:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a44:	e022      	b.n	8005a8c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a4c:	d01e      	beq.n	8005a8c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a4e:	f7fc fe73 	bl	8002738 <HAL_GetTick>
 8005a52:	4602      	mov	r2, r0
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	683a      	ldr	r2, [r7, #0]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d302      	bcc.n	8005a64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d113      	bne.n	8005a8c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a68:	f043 0220 	orr.w	r2, r3, #32
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2220      	movs	r2, #32
 8005a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e00f      	b.n	8005aac <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	699a      	ldr	r2, [r3, #24]
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	4013      	ands	r3, r2
 8005a96:	68ba      	ldr	r2, [r7, #8]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	bf0c      	ite	eq
 8005a9c:	2301      	moveq	r3, #1
 8005a9e:	2300      	movne	r3, #0
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	79fb      	ldrb	r3, [r7, #7]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d0cd      	beq.n	8005a46 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3710      	adds	r7, #16
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005ac0:	e02c      	b.n	8005b1c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	68b9      	ldr	r1, [r7, #8]
 8005ac6:	68f8      	ldr	r0, [r7, #12]
 8005ac8:	f000 f870 	bl	8005bac <I2C_IsAcknowledgeFailed>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d001      	beq.n	8005ad6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e02a      	b.n	8005b2c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005adc:	d01e      	beq.n	8005b1c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ade:	f7fc fe2b 	bl	8002738 <HAL_GetTick>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	68ba      	ldr	r2, [r7, #8]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d302      	bcc.n	8005af4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d113      	bne.n	8005b1c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005af8:	f043 0220 	orr.w	r2, r3, #32
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2220      	movs	r2, #32
 8005b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e007      	b.n	8005b2c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	f003 0302 	and.w	r3, r3, #2
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d1cb      	bne.n	8005ac2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3710      	adds	r7, #16
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b40:	e028      	b.n	8005b94 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	68b9      	ldr	r1, [r7, #8]
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	f000 f830 	bl	8005bac <I2C_IsAcknowledgeFailed>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d001      	beq.n	8005b56 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e026      	b.n	8005ba4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b56:	f7fc fdef 	bl	8002738 <HAL_GetTick>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	68ba      	ldr	r2, [r7, #8]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d302      	bcc.n	8005b6c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d113      	bne.n	8005b94 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b70:	f043 0220 	orr.w	r2, r3, #32
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2220      	movs	r2, #32
 8005b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e007      	b.n	8005ba4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	699b      	ldr	r3, [r3, #24]
 8005b9a:	f003 0320 	and.w	r3, r3, #32
 8005b9e:	2b20      	cmp	r3, #32
 8005ba0:	d1cf      	bne.n	8005b42 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3710      	adds	r7, #16
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	699b      	ldr	r3, [r3, #24]
 8005bbe:	f003 0310 	and.w	r3, r3, #16
 8005bc2:	2b10      	cmp	r3, #16
 8005bc4:	d151      	bne.n	8005c6a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005bc6:	e022      	b.n	8005c0e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bce:	d01e      	beq.n	8005c0e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bd0:	f7fc fdb2 	bl	8002738 <HAL_GetTick>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	68ba      	ldr	r2, [r7, #8]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d302      	bcc.n	8005be6 <I2C_IsAcknowledgeFailed+0x3a>
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d113      	bne.n	8005c0e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bea:	f043 0220 	orr.w	r2, r3, #32
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2220      	movs	r2, #32
 8005bf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e02e      	b.n	8005c6c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	699b      	ldr	r3, [r3, #24]
 8005c14:	f003 0320 	and.w	r3, r3, #32
 8005c18:	2b20      	cmp	r3, #32
 8005c1a:	d1d5      	bne.n	8005bc8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2210      	movs	r2, #16
 8005c22:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2220      	movs	r2, #32
 8005c2a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005c2c:	68f8      	ldr	r0, [r7, #12]
 8005c2e:	f7ff fedd 	bl	80059ec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	6859      	ldr	r1, [r3, #4]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	4b0d      	ldr	r3, [pc, #52]	; (8005c74 <I2C_IsAcknowledgeFailed+0xc8>)
 8005c3e:	400b      	ands	r3, r1
 8005c40:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c46:	f043 0204 	orr.w	r2, r3, #4
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2220      	movs	r2, #32
 8005c52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e000      	b.n	8005c6c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3710      	adds	r7, #16
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	fe00e800 	.word	0xfe00e800

08005c78 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	607b      	str	r3, [r7, #4]
 8005c82:	460b      	mov	r3, r1
 8005c84:	817b      	strh	r3, [r7, #10]
 8005c86:	4613      	mov	r3, r2
 8005c88:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	685a      	ldr	r2, [r3, #4]
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	0d5b      	lsrs	r3, r3, #21
 8005c94:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005c98:	4b0d      	ldr	r3, [pc, #52]	; (8005cd0 <I2C_TransferConfig+0x58>)
 8005c9a:	430b      	orrs	r3, r1
 8005c9c:	43db      	mvns	r3, r3
 8005c9e:	ea02 0103 	and.w	r1, r2, r3
 8005ca2:	897b      	ldrh	r3, [r7, #10]
 8005ca4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005ca8:	7a7b      	ldrb	r3, [r7, #9]
 8005caa:	041b      	lsls	r3, r3, #16
 8005cac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005cb0:	431a      	orrs	r2, r3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	431a      	orrs	r2, r3
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	431a      	orrs	r2, r3
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	430a      	orrs	r2, r1
 8005cc0:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005cc2:	bf00      	nop
 8005cc4:	3714      	adds	r7, #20
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	03ff63ff 	.word	0x03ff63ff

08005cd4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d101      	bne.n	8005ce6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e0bf      	b.n	8005e66 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d106      	bne.n	8005d00 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f004 f88e 	bl	8009e1c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2202      	movs	r2, #2
 8005d04:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	699a      	ldr	r2, [r3, #24]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005d16:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	6999      	ldr	r1, [r3, #24]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	685a      	ldr	r2, [r3, #4]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005d2c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	691b      	ldr	r3, [r3, #16]
 8005d32:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	430a      	orrs	r2, r1
 8005d3a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	6899      	ldr	r1, [r3, #8]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	4b4a      	ldr	r3, [pc, #296]	; (8005e70 <HAL_LTDC_Init+0x19c>)
 8005d48:	400b      	ands	r3, r1
 8005d4a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	695b      	ldr	r3, [r3, #20]
 8005d50:	041b      	lsls	r3, r3, #16
 8005d52:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	6899      	ldr	r1, [r3, #8]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	699a      	ldr	r2, [r3, #24]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	431a      	orrs	r2, r3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	430a      	orrs	r2, r1
 8005d68:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68d9      	ldr	r1, [r3, #12]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	4b3e      	ldr	r3, [pc, #248]	; (8005e70 <HAL_LTDC_Init+0x19c>)
 8005d76:	400b      	ands	r3, r1
 8005d78:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	69db      	ldr	r3, [r3, #28]
 8005d7e:	041b      	lsls	r3, r3, #16
 8005d80:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68d9      	ldr	r1, [r3, #12]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a1a      	ldr	r2, [r3, #32]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	431a      	orrs	r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	430a      	orrs	r2, r1
 8005d96:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	6919      	ldr	r1, [r3, #16]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	4b33      	ldr	r3, [pc, #204]	; (8005e70 <HAL_LTDC_Init+0x19c>)
 8005da4:	400b      	ands	r3, r1
 8005da6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dac:	041b      	lsls	r3, r3, #16
 8005dae:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	6919      	ldr	r1, [r3, #16]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	431a      	orrs	r2, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	430a      	orrs	r2, r1
 8005dc4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	6959      	ldr	r1, [r3, #20]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	4b27      	ldr	r3, [pc, #156]	; (8005e70 <HAL_LTDC_Init+0x19c>)
 8005dd2:	400b      	ands	r3, r1
 8005dd4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dda:	041b      	lsls	r3, r3, #16
 8005ddc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	6959      	ldr	r1, [r3, #20]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	431a      	orrs	r2, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	430a      	orrs	r2, r1
 8005df2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005dfa:	021b      	lsls	r3, r3, #8
 8005dfc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005e04:	041b      	lsls	r3, r3, #16
 8005e06:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005e16:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005e1e:	68ba      	ldr	r2, [r7, #8]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005e2a:	431a      	orrs	r2, r3
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	430a      	orrs	r2, r1
 8005e32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f042 0206 	orr.w	r2, r2, #6
 8005e42:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	699a      	ldr	r2, [r3, #24]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f042 0201 	orr.w	r2, r2, #1
 8005e52:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	f000f800 	.word	0xf000f800

08005e74 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005e74:	b5b0      	push	{r4, r5, r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d101      	bne.n	8005e8e <HAL_LTDC_ConfigLayer+0x1a>
 8005e8a:	2302      	movs	r3, #2
 8005e8c:	e02c      	b.n	8005ee8 <HAL_LTDC_ConfigLayer+0x74>
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2201      	movs	r2, #1
 8005e92:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2202      	movs	r2, #2
 8005e9a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2134      	movs	r1, #52	; 0x34
 8005ea4:	fb01 f303 	mul.w	r3, r1, r3
 8005ea8:	4413      	add	r3, r2
 8005eaa:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	4614      	mov	r4, r2
 8005eb2:	461d      	mov	r5, r3
 8005eb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005eb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005eb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005eba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ebc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ebe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ec0:	682b      	ldr	r3, [r5, #0]
 8005ec2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	68b9      	ldr	r1, [r7, #8]
 8005ec8:	68f8      	ldr	r0, [r7, #12]
 8005eca:	f000 f811 	bl	8005ef0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2201      	movs	r2, #1
 8005eda:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3710      	adds	r7, #16
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bdb0      	pop	{r4, r5, r7, pc}

08005ef0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b089      	sub	sp, #36	; 0x24
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	685a      	ldr	r2, [r3, #4]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	0c1b      	lsrs	r3, r3, #16
 8005f08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f0c:	4413      	add	r3, r2
 8005f0e:	041b      	lsls	r3, r3, #16
 8005f10:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	461a      	mov	r2, r3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	01db      	lsls	r3, r3, #7
 8005f1c:	4413      	add	r3, r2
 8005f1e:	3384      	adds	r3, #132	; 0x84
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	6812      	ldr	r2, [r2, #0]
 8005f26:	4611      	mov	r1, r2
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	01d2      	lsls	r2, r2, #7
 8005f2c:	440a      	add	r2, r1
 8005f2e:	3284      	adds	r2, #132	; 0x84
 8005f30:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005f34:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	0c1b      	lsrs	r3, r3, #16
 8005f42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f46:	4413      	add	r3, r2
 8005f48:	1c5a      	adds	r2, r3, #1
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4619      	mov	r1, r3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	01db      	lsls	r3, r3, #7
 8005f54:	440b      	add	r3, r1
 8005f56:	3384      	adds	r3, #132	; 0x84
 8005f58:	4619      	mov	r1, r3
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	68da      	ldr	r2, [r3, #12]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f6e:	4413      	add	r3, r2
 8005f70:	041b      	lsls	r3, r3, #16
 8005f72:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	461a      	mov	r2, r3
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	01db      	lsls	r3, r3, #7
 8005f7e:	4413      	add	r3, r2
 8005f80:	3384      	adds	r3, #132	; 0x84
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	6812      	ldr	r2, [r2, #0]
 8005f88:	4611      	mov	r1, r2
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	01d2      	lsls	r2, r2, #7
 8005f8e:	440a      	add	r2, r1
 8005f90:	3284      	adds	r2, #132	; 0x84
 8005f92:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005f96:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	689a      	ldr	r2, [r3, #8]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005fa6:	4413      	add	r3, r2
 8005fa8:	1c5a      	adds	r2, r3, #1
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4619      	mov	r1, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	01db      	lsls	r3, r3, #7
 8005fb4:	440b      	add	r3, r1
 8005fb6:	3384      	adds	r3, #132	; 0x84
 8005fb8:	4619      	mov	r1, r3
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	01db      	lsls	r3, r3, #7
 8005fca:	4413      	add	r3, r2
 8005fcc:	3384      	adds	r3, #132	; 0x84
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	68fa      	ldr	r2, [r7, #12]
 8005fd2:	6812      	ldr	r2, [r2, #0]
 8005fd4:	4611      	mov	r1, r2
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	01d2      	lsls	r2, r2, #7
 8005fda:	440a      	add	r2, r1
 8005fdc:	3284      	adds	r2, #132	; 0x84
 8005fde:	f023 0307 	bic.w	r3, r3, #7
 8005fe2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	461a      	mov	r2, r3
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	01db      	lsls	r3, r3, #7
 8005fee:	4413      	add	r3, r2
 8005ff0:	3384      	adds	r3, #132	; 0x84
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	691b      	ldr	r3, [r3, #16]
 8005ff8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006000:	021b      	lsls	r3, r3, #8
 8006002:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800600a:	041b      	lsls	r3, r3, #16
 800600c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	699b      	ldr	r3, [r3, #24]
 8006012:	061b      	lsls	r3, r3, #24
 8006014:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	461a      	mov	r2, r3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	01db      	lsls	r3, r3, #7
 8006020:	4413      	add	r3, r2
 8006022:	3384      	adds	r3, #132	; 0x84
 8006024:	699b      	ldr	r3, [r3, #24]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	461a      	mov	r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	01db      	lsls	r3, r3, #7
 8006030:	4413      	add	r3, r2
 8006032:	3384      	adds	r3, #132	; 0x84
 8006034:	461a      	mov	r2, r3
 8006036:	2300      	movs	r3, #0
 8006038:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006040:	461a      	mov	r2, r3
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	431a      	orrs	r2, r3
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	431a      	orrs	r2, r3
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4619      	mov	r1, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	01db      	lsls	r3, r3, #7
 8006054:	440b      	add	r3, r1
 8006056:	3384      	adds	r3, #132	; 0x84
 8006058:	4619      	mov	r1, r3
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	4313      	orrs	r3, r2
 800605e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	461a      	mov	r2, r3
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	01db      	lsls	r3, r3, #7
 800606a:	4413      	add	r3, r2
 800606c:	3384      	adds	r3, #132	; 0x84
 800606e:	695b      	ldr	r3, [r3, #20]
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	6812      	ldr	r2, [r2, #0]
 8006074:	4611      	mov	r1, r2
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	01d2      	lsls	r2, r2, #7
 800607a:	440a      	add	r2, r1
 800607c:	3284      	adds	r2, #132	; 0x84
 800607e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006082:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	461a      	mov	r2, r3
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	01db      	lsls	r3, r3, #7
 800608e:	4413      	add	r3, r2
 8006090:	3384      	adds	r3, #132	; 0x84
 8006092:	461a      	mov	r2, r3
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	695b      	ldr	r3, [r3, #20]
 8006098:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	461a      	mov	r2, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	01db      	lsls	r3, r3, #7
 80060a4:	4413      	add	r3, r2
 80060a6:	3384      	adds	r3, #132	; 0x84
 80060a8:	69da      	ldr	r2, [r3, #28]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4619      	mov	r1, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	01db      	lsls	r3, r3, #7
 80060b4:	440b      	add	r3, r1
 80060b6:	3384      	adds	r3, #132	; 0x84
 80060b8:	4619      	mov	r1, r3
 80060ba:	4b58      	ldr	r3, [pc, #352]	; (800621c <LTDC_SetConfig+0x32c>)
 80060bc:	4013      	ands	r3, r2
 80060be:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	69da      	ldr	r2, [r3, #28]
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	6a1b      	ldr	r3, [r3, #32]
 80060c8:	68f9      	ldr	r1, [r7, #12]
 80060ca:	6809      	ldr	r1, [r1, #0]
 80060cc:	4608      	mov	r0, r1
 80060ce:	6879      	ldr	r1, [r7, #4]
 80060d0:	01c9      	lsls	r1, r1, #7
 80060d2:	4401      	add	r1, r0
 80060d4:	3184      	adds	r1, #132	; 0x84
 80060d6:	4313      	orrs	r3, r2
 80060d8:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	461a      	mov	r2, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	01db      	lsls	r3, r3, #7
 80060e4:	4413      	add	r3, r2
 80060e6:	3384      	adds	r3, #132	; 0x84
 80060e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	461a      	mov	r2, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	01db      	lsls	r3, r3, #7
 80060f4:	4413      	add	r3, r2
 80060f6:	3384      	adds	r3, #132	; 0x84
 80060f8:	461a      	mov	r2, r3
 80060fa:	2300      	movs	r3, #0
 80060fc:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	461a      	mov	r2, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	01db      	lsls	r3, r3, #7
 8006108:	4413      	add	r3, r2
 800610a:	3384      	adds	r3, #132	; 0x84
 800610c:	461a      	mov	r2, r3
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006112:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d102      	bne.n	8006122 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800611c:	2304      	movs	r3, #4
 800611e:	61fb      	str	r3, [r7, #28]
 8006120:	e01b      	b.n	800615a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	2b01      	cmp	r3, #1
 8006128:	d102      	bne.n	8006130 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800612a:	2303      	movs	r3, #3
 800612c:	61fb      	str	r3, [r7, #28]
 800612e:	e014      	b.n	800615a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	2b04      	cmp	r3, #4
 8006136:	d00b      	beq.n	8006150 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800613c:	2b02      	cmp	r3, #2
 800613e:	d007      	beq.n	8006150 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006144:	2b03      	cmp	r3, #3
 8006146:	d003      	beq.n	8006150 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800614c:	2b07      	cmp	r3, #7
 800614e:	d102      	bne.n	8006156 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006150:	2302      	movs	r3, #2
 8006152:	61fb      	str	r3, [r7, #28]
 8006154:	e001      	b.n	800615a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006156:	2301      	movs	r3, #1
 8006158:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	461a      	mov	r2, r3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	01db      	lsls	r3, r3, #7
 8006164:	4413      	add	r3, r2
 8006166:	3384      	adds	r3, #132	; 0x84
 8006168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800616a:	68fa      	ldr	r2, [r7, #12]
 800616c:	6812      	ldr	r2, [r2, #0]
 800616e:	4611      	mov	r1, r2
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	01d2      	lsls	r2, r2, #7
 8006174:	440a      	add	r2, r1
 8006176:	3284      	adds	r2, #132	; 0x84
 8006178:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800617c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006182:	69fa      	ldr	r2, [r7, #28]
 8006184:	fb02 f303 	mul.w	r3, r2, r3
 8006188:	041a      	lsls	r2, r3, #16
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	6859      	ldr	r1, [r3, #4]
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	1acb      	subs	r3, r1, r3
 8006194:	69f9      	ldr	r1, [r7, #28]
 8006196:	fb01 f303 	mul.w	r3, r1, r3
 800619a:	3303      	adds	r3, #3
 800619c:	68f9      	ldr	r1, [r7, #12]
 800619e:	6809      	ldr	r1, [r1, #0]
 80061a0:	4608      	mov	r0, r1
 80061a2:	6879      	ldr	r1, [r7, #4]
 80061a4:	01c9      	lsls	r1, r1, #7
 80061a6:	4401      	add	r1, r0
 80061a8:	3184      	adds	r1, #132	; 0x84
 80061aa:	4313      	orrs	r3, r2
 80061ac:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	461a      	mov	r2, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	01db      	lsls	r3, r3, #7
 80061b8:	4413      	add	r3, r2
 80061ba:	3384      	adds	r3, #132	; 0x84
 80061bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4619      	mov	r1, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	01db      	lsls	r3, r3, #7
 80061c8:	440b      	add	r3, r1
 80061ca:	3384      	adds	r3, #132	; 0x84
 80061cc:	4619      	mov	r1, r3
 80061ce:	4b14      	ldr	r3, [pc, #80]	; (8006220 <LTDC_SetConfig+0x330>)
 80061d0:	4013      	ands	r3, r2
 80061d2:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	461a      	mov	r2, r3
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	01db      	lsls	r3, r3, #7
 80061de:	4413      	add	r3, r2
 80061e0:	3384      	adds	r3, #132	; 0x84
 80061e2:	461a      	mov	r2, r3
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	461a      	mov	r2, r3
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	01db      	lsls	r3, r3, #7
 80061f4:	4413      	add	r3, r2
 80061f6:	3384      	adds	r3, #132	; 0x84
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68fa      	ldr	r2, [r7, #12]
 80061fc:	6812      	ldr	r2, [r2, #0]
 80061fe:	4611      	mov	r1, r2
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	01d2      	lsls	r2, r2, #7
 8006204:	440a      	add	r2, r1
 8006206:	3284      	adds	r2, #132	; 0x84
 8006208:	f043 0301 	orr.w	r3, r3, #1
 800620c:	6013      	str	r3, [r2, #0]
}
 800620e:	bf00      	nop
 8006210:	3724      	adds	r7, #36	; 0x24
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	fffff8f8 	.word	0xfffff8f8
 8006220:	fffff800 	.word	0xfffff800

08006224 <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006232:	2b00      	cmp	r3, #0
 8006234:	d101      	bne.n	800623a <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 8006236:	2200      	movs	r2, #0
 8006238:	e001      	b.n	800623e <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 800623a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	6a1b      	ldr	r3, [r3, #32]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d102      	bne.n	8006250 <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 800624a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800624e:	e000      	b.n	8006252 <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 8006250:	2200      	movs	r2, #0
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	69db      	ldr	r3, [r3, #28]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d102      	bne.n	8006264 <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 800625e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006262:	e000      	b.n	8006266 <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 8006264:	2200      	movs	r2, #0
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	605a      	str	r2, [r3, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800626e:	1e5a      	subs	r2, r3, #1
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800627c:	4413      	add	r3, r2
 800627e:	1e5a      	subs	r2, r3, #1
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive - 1U;
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800628c:	441a      	add	r2, r3
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006292:	4413      	add	r3, r2
 8006294:	1e5a      	subs	r2, r3, #1
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a2:	441a      	add	r2, r3
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a8:	441a      	add	r2, r3
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ae:	4413      	add	r3, r2
 80062b0:	1e5a      	subs	r2, r3, #1
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80062b6:	2300      	movs	r3, #0
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b082      	sub	sp, #8
 80062c8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80062ca:	2300      	movs	r3, #0
 80062cc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80062ce:	4b23      	ldr	r3, [pc, #140]	; (800635c <HAL_PWREx_EnableOverDrive+0x98>)
 80062d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d2:	4a22      	ldr	r2, [pc, #136]	; (800635c <HAL_PWREx_EnableOverDrive+0x98>)
 80062d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062d8:	6413      	str	r3, [r2, #64]	; 0x40
 80062da:	4b20      	ldr	r3, [pc, #128]	; (800635c <HAL_PWREx_EnableOverDrive+0x98>)
 80062dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062e2:	603b      	str	r3, [r7, #0]
 80062e4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80062e6:	4b1e      	ldr	r3, [pc, #120]	; (8006360 <HAL_PWREx_EnableOverDrive+0x9c>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a1d      	ldr	r2, [pc, #116]	; (8006360 <HAL_PWREx_EnableOverDrive+0x9c>)
 80062ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062f0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80062f2:	f7fc fa21 	bl	8002738 <HAL_GetTick>
 80062f6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80062f8:	e009      	b.n	800630e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80062fa:	f7fc fa1d 	bl	8002738 <HAL_GetTick>
 80062fe:	4602      	mov	r2, r0
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	1ad3      	subs	r3, r2, r3
 8006304:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006308:	d901      	bls.n	800630e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	e022      	b.n	8006354 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800630e:	4b14      	ldr	r3, [pc, #80]	; (8006360 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006316:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800631a:	d1ee      	bne.n	80062fa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800631c:	4b10      	ldr	r3, [pc, #64]	; (8006360 <HAL_PWREx_EnableOverDrive+0x9c>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a0f      	ldr	r2, [pc, #60]	; (8006360 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006322:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006326:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006328:	f7fc fa06 	bl	8002738 <HAL_GetTick>
 800632c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800632e:	e009      	b.n	8006344 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006330:	f7fc fa02 	bl	8002738 <HAL_GetTick>
 8006334:	4602      	mov	r2, r0
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	1ad3      	subs	r3, r2, r3
 800633a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800633e:	d901      	bls.n	8006344 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006340:	2303      	movs	r3, #3
 8006342:	e007      	b.n	8006354 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006344:	4b06      	ldr	r3, [pc, #24]	; (8006360 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800634c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006350:	d1ee      	bne.n	8006330 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3708      	adds	r7, #8
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}
 800635c:	40023800 	.word	0x40023800
 8006360:	40007000 	.word	0x40007000

08006364 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b086      	sub	sp, #24
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 800636c:	2300      	movs	r3, #0
 800636e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d101      	bne.n	800637a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e25e      	b.n	8006838 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f003 0301 	and.w	r3, r3, #1
 8006382:	2b00      	cmp	r3, #0
 8006384:	f000 8087 	beq.w	8006496 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006388:	4b96      	ldr	r3, [pc, #600]	; (80065e4 <HAL_RCC_OscConfig+0x280>)
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	f003 030c 	and.w	r3, r3, #12
 8006390:	2b04      	cmp	r3, #4
 8006392:	d00c      	beq.n	80063ae <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006394:	4b93      	ldr	r3, [pc, #588]	; (80065e4 <HAL_RCC_OscConfig+0x280>)
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	f003 030c 	and.w	r3, r3, #12
 800639c:	2b08      	cmp	r3, #8
 800639e:	d112      	bne.n	80063c6 <HAL_RCC_OscConfig+0x62>
 80063a0:	4b90      	ldr	r3, [pc, #576]	; (80065e4 <HAL_RCC_OscConfig+0x280>)
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063ac:	d10b      	bne.n	80063c6 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063ae:	4b8d      	ldr	r3, [pc, #564]	; (80065e4 <HAL_RCC_OscConfig+0x280>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d06c      	beq.n	8006494 <HAL_RCC_OscConfig+0x130>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d168      	bne.n	8006494 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e238      	b.n	8006838 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063ce:	d106      	bne.n	80063de <HAL_RCC_OscConfig+0x7a>
 80063d0:	4b84      	ldr	r3, [pc, #528]	; (80065e4 <HAL_RCC_OscConfig+0x280>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a83      	ldr	r2, [pc, #524]	; (80065e4 <HAL_RCC_OscConfig+0x280>)
 80063d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063da:	6013      	str	r3, [r2, #0]
 80063dc:	e02e      	b.n	800643c <HAL_RCC_OscConfig+0xd8>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d10c      	bne.n	8006400 <HAL_RCC_OscConfig+0x9c>
 80063e6:	4b7f      	ldr	r3, [pc, #508]	; (80065e4 <HAL_RCC_OscConfig+0x280>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a7e      	ldr	r2, [pc, #504]	; (80065e4 <HAL_RCC_OscConfig+0x280>)
 80063ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063f0:	6013      	str	r3, [r2, #0]
 80063f2:	4b7c      	ldr	r3, [pc, #496]	; (80065e4 <HAL_RCC_OscConfig+0x280>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a7b      	ldr	r2, [pc, #492]	; (80065e4 <HAL_RCC_OscConfig+0x280>)
 80063f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063fc:	6013      	str	r3, [r2, #0]
 80063fe:	e01d      	b.n	800643c <HAL_RCC_OscConfig+0xd8>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006408:	d10c      	bne.n	8006424 <HAL_RCC_OscConfig+0xc0>
 800640a:	4b76      	ldr	r3, [pc, #472]	; (80065e4 <HAL_RCC_OscConfig+0x280>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a75      	ldr	r2, [pc, #468]	; (80065e4 <HAL_RCC_OscConfig+0x280>)
 8006410:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006414:	6013      	str	r3, [r2, #0]
 8006416:	4b73      	ldr	r3, [pc, #460]	; (80065e4 <HAL_RCC_OscConfig+0x280>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a72      	ldr	r2, [pc, #456]	; (80065e4 <HAL_RCC_OscConfig+0x280>)
 800641c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006420:	6013      	str	r3, [r2, #0]
 8006422:	e00b      	b.n	800643c <HAL_RCC_OscConfig+0xd8>
 8006424:	4b6f      	ldr	r3, [pc, #444]	; (80065e4 <HAL_RCC_OscConfig+0x280>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a6e      	ldr	r2, [pc, #440]	; (80065e4 <HAL_RCC_OscConfig+0x280>)
 800642a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800642e:	6013      	str	r3, [r2, #0]
 8006430:	4b6c      	ldr	r3, [pc, #432]	; (80065e4 <HAL_RCC_OscConfig+0x280>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a6b      	ldr	r2, [pc, #428]	; (80065e4 <HAL_RCC_OscConfig+0x280>)
 8006436:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800643a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d013      	beq.n	800646c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006444:	f7fc f978 	bl	8002738 <HAL_GetTick>
 8006448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800644a:	e008      	b.n	800645e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800644c:	f7fc f974 	bl	8002738 <HAL_GetTick>
 8006450:	4602      	mov	r2, r0
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	1ad3      	subs	r3, r2, r3
 8006456:	2b64      	cmp	r3, #100	; 0x64
 8006458:	d901      	bls.n	800645e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800645a:	2303      	movs	r3, #3
 800645c:	e1ec      	b.n	8006838 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800645e:	4b61      	ldr	r3, [pc, #388]	; (80065e4 <HAL_RCC_OscConfig+0x280>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006466:	2b00      	cmp	r3, #0
 8006468:	d0f0      	beq.n	800644c <HAL_RCC_OscConfig+0xe8>
 800646a:	e014      	b.n	8006496 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800646c:	f7fc f964 	bl	8002738 <HAL_GetTick>
 8006470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006472:	e008      	b.n	8006486 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006474:	f7fc f960 	bl	8002738 <HAL_GetTick>
 8006478:	4602      	mov	r2, r0
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	1ad3      	subs	r3, r2, r3
 800647e:	2b64      	cmp	r3, #100	; 0x64
 8006480:	d901      	bls.n	8006486 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006482:	2303      	movs	r3, #3
 8006484:	e1d8      	b.n	8006838 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006486:	4b57      	ldr	r3, [pc, #348]	; (80065e4 <HAL_RCC_OscConfig+0x280>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800648e:	2b00      	cmp	r3, #0
 8006490:	d1f0      	bne.n	8006474 <HAL_RCC_OscConfig+0x110>
 8006492:	e000      	b.n	8006496 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006494:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 0302 	and.w	r3, r3, #2
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d069      	beq.n	8006576 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80064a2:	4b50      	ldr	r3, [pc, #320]	; (80065e4 <HAL_RCC_OscConfig+0x280>)
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	f003 030c 	and.w	r3, r3, #12
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00b      	beq.n	80064c6 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064ae:	4b4d      	ldr	r3, [pc, #308]	; (80065e4 <HAL_RCC_OscConfig+0x280>)
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	f003 030c 	and.w	r3, r3, #12
 80064b6:	2b08      	cmp	r3, #8
 80064b8:	d11c      	bne.n	80064f4 <HAL_RCC_OscConfig+0x190>
 80064ba:	4b4a      	ldr	r3, [pc, #296]	; (80065e4 <HAL_RCC_OscConfig+0x280>)
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d116      	bne.n	80064f4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064c6:	4b47      	ldr	r3, [pc, #284]	; (80065e4 <HAL_RCC_OscConfig+0x280>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 0302 	and.w	r3, r3, #2
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d005      	beq.n	80064de <HAL_RCC_OscConfig+0x17a>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d001      	beq.n	80064de <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e1ac      	b.n	8006838 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064de:	4b41      	ldr	r3, [pc, #260]	; (80065e4 <HAL_RCC_OscConfig+0x280>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	00db      	lsls	r3, r3, #3
 80064ec:	493d      	ldr	r1, [pc, #244]	; (80065e4 <HAL_RCC_OscConfig+0x280>)
 80064ee:	4313      	orrs	r3, r2
 80064f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064f2:	e040      	b.n	8006576 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d023      	beq.n	8006544 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064fc:	4b39      	ldr	r3, [pc, #228]	; (80065e4 <HAL_RCC_OscConfig+0x280>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a38      	ldr	r2, [pc, #224]	; (80065e4 <HAL_RCC_OscConfig+0x280>)
 8006502:	f043 0301 	orr.w	r3, r3, #1
 8006506:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006508:	f7fc f916 	bl	8002738 <HAL_GetTick>
 800650c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800650e:	e008      	b.n	8006522 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006510:	f7fc f912 	bl	8002738 <HAL_GetTick>
 8006514:	4602      	mov	r2, r0
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	2b02      	cmp	r3, #2
 800651c:	d901      	bls.n	8006522 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800651e:	2303      	movs	r3, #3
 8006520:	e18a      	b.n	8006838 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006522:	4b30      	ldr	r3, [pc, #192]	; (80065e4 <HAL_RCC_OscConfig+0x280>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 0302 	and.w	r3, r3, #2
 800652a:	2b00      	cmp	r3, #0
 800652c:	d0f0      	beq.n	8006510 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800652e:	4b2d      	ldr	r3, [pc, #180]	; (80065e4 <HAL_RCC_OscConfig+0x280>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	00db      	lsls	r3, r3, #3
 800653c:	4929      	ldr	r1, [pc, #164]	; (80065e4 <HAL_RCC_OscConfig+0x280>)
 800653e:	4313      	orrs	r3, r2
 8006540:	600b      	str	r3, [r1, #0]
 8006542:	e018      	b.n	8006576 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006544:	4b27      	ldr	r3, [pc, #156]	; (80065e4 <HAL_RCC_OscConfig+0x280>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a26      	ldr	r2, [pc, #152]	; (80065e4 <HAL_RCC_OscConfig+0x280>)
 800654a:	f023 0301 	bic.w	r3, r3, #1
 800654e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006550:	f7fc f8f2 	bl	8002738 <HAL_GetTick>
 8006554:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006556:	e008      	b.n	800656a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006558:	f7fc f8ee 	bl	8002738 <HAL_GetTick>
 800655c:	4602      	mov	r2, r0
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	1ad3      	subs	r3, r2, r3
 8006562:	2b02      	cmp	r3, #2
 8006564:	d901      	bls.n	800656a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006566:	2303      	movs	r3, #3
 8006568:	e166      	b.n	8006838 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800656a:	4b1e      	ldr	r3, [pc, #120]	; (80065e4 <HAL_RCC_OscConfig+0x280>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f003 0302 	and.w	r3, r3, #2
 8006572:	2b00      	cmp	r3, #0
 8006574:	d1f0      	bne.n	8006558 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f003 0308 	and.w	r3, r3, #8
 800657e:	2b00      	cmp	r3, #0
 8006580:	d038      	beq.n	80065f4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	695b      	ldr	r3, [r3, #20]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d019      	beq.n	80065be <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800658a:	4b16      	ldr	r3, [pc, #88]	; (80065e4 <HAL_RCC_OscConfig+0x280>)
 800658c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800658e:	4a15      	ldr	r2, [pc, #84]	; (80065e4 <HAL_RCC_OscConfig+0x280>)
 8006590:	f043 0301 	orr.w	r3, r3, #1
 8006594:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006596:	f7fc f8cf 	bl	8002738 <HAL_GetTick>
 800659a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800659c:	e008      	b.n	80065b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800659e:	f7fc f8cb 	bl	8002738 <HAL_GetTick>
 80065a2:	4602      	mov	r2, r0
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	1ad3      	subs	r3, r2, r3
 80065a8:	2b02      	cmp	r3, #2
 80065aa:	d901      	bls.n	80065b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80065ac:	2303      	movs	r3, #3
 80065ae:	e143      	b.n	8006838 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065b0:	4b0c      	ldr	r3, [pc, #48]	; (80065e4 <HAL_RCC_OscConfig+0x280>)
 80065b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065b4:	f003 0302 	and.w	r3, r3, #2
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d0f0      	beq.n	800659e <HAL_RCC_OscConfig+0x23a>
 80065bc:	e01a      	b.n	80065f4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065be:	4b09      	ldr	r3, [pc, #36]	; (80065e4 <HAL_RCC_OscConfig+0x280>)
 80065c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065c2:	4a08      	ldr	r2, [pc, #32]	; (80065e4 <HAL_RCC_OscConfig+0x280>)
 80065c4:	f023 0301 	bic.w	r3, r3, #1
 80065c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065ca:	f7fc f8b5 	bl	8002738 <HAL_GetTick>
 80065ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065d0:	e00a      	b.n	80065e8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065d2:	f7fc f8b1 	bl	8002738 <HAL_GetTick>
 80065d6:	4602      	mov	r2, r0
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	2b02      	cmp	r3, #2
 80065de:	d903      	bls.n	80065e8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80065e0:	2303      	movs	r3, #3
 80065e2:	e129      	b.n	8006838 <HAL_RCC_OscConfig+0x4d4>
 80065e4:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065e8:	4b95      	ldr	r3, [pc, #596]	; (8006840 <HAL_RCC_OscConfig+0x4dc>)
 80065ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065ec:	f003 0302 	and.w	r3, r3, #2
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d1ee      	bne.n	80065d2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 0304 	and.w	r3, r3, #4
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	f000 80a4 	beq.w	800674a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006602:	4b8f      	ldr	r3, [pc, #572]	; (8006840 <HAL_RCC_OscConfig+0x4dc>)
 8006604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800660a:	2b00      	cmp	r3, #0
 800660c:	d10d      	bne.n	800662a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800660e:	4b8c      	ldr	r3, [pc, #560]	; (8006840 <HAL_RCC_OscConfig+0x4dc>)
 8006610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006612:	4a8b      	ldr	r2, [pc, #556]	; (8006840 <HAL_RCC_OscConfig+0x4dc>)
 8006614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006618:	6413      	str	r3, [r2, #64]	; 0x40
 800661a:	4b89      	ldr	r3, [pc, #548]	; (8006840 <HAL_RCC_OscConfig+0x4dc>)
 800661c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006622:	60fb      	str	r3, [r7, #12]
 8006624:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006626:	2301      	movs	r3, #1
 8006628:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800662a:	4b86      	ldr	r3, [pc, #536]	; (8006844 <HAL_RCC_OscConfig+0x4e0>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006632:	2b00      	cmp	r3, #0
 8006634:	d118      	bne.n	8006668 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006636:	4b83      	ldr	r3, [pc, #524]	; (8006844 <HAL_RCC_OscConfig+0x4e0>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a82      	ldr	r2, [pc, #520]	; (8006844 <HAL_RCC_OscConfig+0x4e0>)
 800663c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006640:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006642:	f7fc f879 	bl	8002738 <HAL_GetTick>
 8006646:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006648:	e008      	b.n	800665c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800664a:	f7fc f875 	bl	8002738 <HAL_GetTick>
 800664e:	4602      	mov	r2, r0
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	1ad3      	subs	r3, r2, r3
 8006654:	2b64      	cmp	r3, #100	; 0x64
 8006656:	d901      	bls.n	800665c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006658:	2303      	movs	r3, #3
 800665a:	e0ed      	b.n	8006838 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800665c:	4b79      	ldr	r3, [pc, #484]	; (8006844 <HAL_RCC_OscConfig+0x4e0>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006664:	2b00      	cmp	r3, #0
 8006666:	d0f0      	beq.n	800664a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	2b01      	cmp	r3, #1
 800666e:	d106      	bne.n	800667e <HAL_RCC_OscConfig+0x31a>
 8006670:	4b73      	ldr	r3, [pc, #460]	; (8006840 <HAL_RCC_OscConfig+0x4dc>)
 8006672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006674:	4a72      	ldr	r2, [pc, #456]	; (8006840 <HAL_RCC_OscConfig+0x4dc>)
 8006676:	f043 0301 	orr.w	r3, r3, #1
 800667a:	6713      	str	r3, [r2, #112]	; 0x70
 800667c:	e02d      	b.n	80066da <HAL_RCC_OscConfig+0x376>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d10c      	bne.n	80066a0 <HAL_RCC_OscConfig+0x33c>
 8006686:	4b6e      	ldr	r3, [pc, #440]	; (8006840 <HAL_RCC_OscConfig+0x4dc>)
 8006688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800668a:	4a6d      	ldr	r2, [pc, #436]	; (8006840 <HAL_RCC_OscConfig+0x4dc>)
 800668c:	f023 0301 	bic.w	r3, r3, #1
 8006690:	6713      	str	r3, [r2, #112]	; 0x70
 8006692:	4b6b      	ldr	r3, [pc, #428]	; (8006840 <HAL_RCC_OscConfig+0x4dc>)
 8006694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006696:	4a6a      	ldr	r2, [pc, #424]	; (8006840 <HAL_RCC_OscConfig+0x4dc>)
 8006698:	f023 0304 	bic.w	r3, r3, #4
 800669c:	6713      	str	r3, [r2, #112]	; 0x70
 800669e:	e01c      	b.n	80066da <HAL_RCC_OscConfig+0x376>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	2b05      	cmp	r3, #5
 80066a6:	d10c      	bne.n	80066c2 <HAL_RCC_OscConfig+0x35e>
 80066a8:	4b65      	ldr	r3, [pc, #404]	; (8006840 <HAL_RCC_OscConfig+0x4dc>)
 80066aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ac:	4a64      	ldr	r2, [pc, #400]	; (8006840 <HAL_RCC_OscConfig+0x4dc>)
 80066ae:	f043 0304 	orr.w	r3, r3, #4
 80066b2:	6713      	str	r3, [r2, #112]	; 0x70
 80066b4:	4b62      	ldr	r3, [pc, #392]	; (8006840 <HAL_RCC_OscConfig+0x4dc>)
 80066b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066b8:	4a61      	ldr	r2, [pc, #388]	; (8006840 <HAL_RCC_OscConfig+0x4dc>)
 80066ba:	f043 0301 	orr.w	r3, r3, #1
 80066be:	6713      	str	r3, [r2, #112]	; 0x70
 80066c0:	e00b      	b.n	80066da <HAL_RCC_OscConfig+0x376>
 80066c2:	4b5f      	ldr	r3, [pc, #380]	; (8006840 <HAL_RCC_OscConfig+0x4dc>)
 80066c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066c6:	4a5e      	ldr	r2, [pc, #376]	; (8006840 <HAL_RCC_OscConfig+0x4dc>)
 80066c8:	f023 0301 	bic.w	r3, r3, #1
 80066cc:	6713      	str	r3, [r2, #112]	; 0x70
 80066ce:	4b5c      	ldr	r3, [pc, #368]	; (8006840 <HAL_RCC_OscConfig+0x4dc>)
 80066d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066d2:	4a5b      	ldr	r2, [pc, #364]	; (8006840 <HAL_RCC_OscConfig+0x4dc>)
 80066d4:	f023 0304 	bic.w	r3, r3, #4
 80066d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d015      	beq.n	800670e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066e2:	f7fc f829 	bl	8002738 <HAL_GetTick>
 80066e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066e8:	e00a      	b.n	8006700 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066ea:	f7fc f825 	bl	8002738 <HAL_GetTick>
 80066ee:	4602      	mov	r2, r0
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	1ad3      	subs	r3, r2, r3
 80066f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d901      	bls.n	8006700 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80066fc:	2303      	movs	r3, #3
 80066fe:	e09b      	b.n	8006838 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006700:	4b4f      	ldr	r3, [pc, #316]	; (8006840 <HAL_RCC_OscConfig+0x4dc>)
 8006702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006704:	f003 0302 	and.w	r3, r3, #2
 8006708:	2b00      	cmp	r3, #0
 800670a:	d0ee      	beq.n	80066ea <HAL_RCC_OscConfig+0x386>
 800670c:	e014      	b.n	8006738 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800670e:	f7fc f813 	bl	8002738 <HAL_GetTick>
 8006712:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006714:	e00a      	b.n	800672c <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006716:	f7fc f80f 	bl	8002738 <HAL_GetTick>
 800671a:	4602      	mov	r2, r0
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	1ad3      	subs	r3, r2, r3
 8006720:	f241 3288 	movw	r2, #5000	; 0x1388
 8006724:	4293      	cmp	r3, r2
 8006726:	d901      	bls.n	800672c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006728:	2303      	movs	r3, #3
 800672a:	e085      	b.n	8006838 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800672c:	4b44      	ldr	r3, [pc, #272]	; (8006840 <HAL_RCC_OscConfig+0x4dc>)
 800672e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006730:	f003 0302 	and.w	r3, r3, #2
 8006734:	2b00      	cmp	r3, #0
 8006736:	d1ee      	bne.n	8006716 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006738:	7dfb      	ldrb	r3, [r7, #23]
 800673a:	2b01      	cmp	r3, #1
 800673c:	d105      	bne.n	800674a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800673e:	4b40      	ldr	r3, [pc, #256]	; (8006840 <HAL_RCC_OscConfig+0x4dc>)
 8006740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006742:	4a3f      	ldr	r2, [pc, #252]	; (8006840 <HAL_RCC_OscConfig+0x4dc>)
 8006744:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006748:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	699b      	ldr	r3, [r3, #24]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d071      	beq.n	8006836 <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006752:	4b3b      	ldr	r3, [pc, #236]	; (8006840 <HAL_RCC_OscConfig+0x4dc>)
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	f003 030c 	and.w	r3, r3, #12
 800675a:	2b08      	cmp	r3, #8
 800675c:	d069      	beq.n	8006832 <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	699b      	ldr	r3, [r3, #24]
 8006762:	2b02      	cmp	r3, #2
 8006764:	d14b      	bne.n	80067fe <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006766:	4b36      	ldr	r3, [pc, #216]	; (8006840 <HAL_RCC_OscConfig+0x4dc>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a35      	ldr	r2, [pc, #212]	; (8006840 <HAL_RCC_OscConfig+0x4dc>)
 800676c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006770:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006772:	f7fb ffe1 	bl	8002738 <HAL_GetTick>
 8006776:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006778:	e008      	b.n	800678c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800677a:	f7fb ffdd 	bl	8002738 <HAL_GetTick>
 800677e:	4602      	mov	r2, r0
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	1ad3      	subs	r3, r2, r3
 8006784:	2b02      	cmp	r3, #2
 8006786:	d901      	bls.n	800678c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006788:	2303      	movs	r3, #3
 800678a:	e055      	b.n	8006838 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800678c:	4b2c      	ldr	r3, [pc, #176]	; (8006840 <HAL_RCC_OscConfig+0x4dc>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006794:	2b00      	cmp	r3, #0
 8006796:	d1f0      	bne.n	800677a <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	69da      	ldr	r2, [r3, #28]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6a1b      	ldr	r3, [r3, #32]
 80067a0:	431a      	orrs	r2, r3
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a6:	019b      	lsls	r3, r3, #6
 80067a8:	431a      	orrs	r2, r3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ae:	085b      	lsrs	r3, r3, #1
 80067b0:	3b01      	subs	r3, #1
 80067b2:	041b      	lsls	r3, r3, #16
 80067b4:	431a      	orrs	r2, r3
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ba:	061b      	lsls	r3, r3, #24
 80067bc:	431a      	orrs	r2, r3
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c2:	071b      	lsls	r3, r3, #28
 80067c4:	491e      	ldr	r1, [pc, #120]	; (8006840 <HAL_RCC_OscConfig+0x4dc>)
 80067c6:	4313      	orrs	r3, r2
 80067c8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067ca:	4b1d      	ldr	r3, [pc, #116]	; (8006840 <HAL_RCC_OscConfig+0x4dc>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a1c      	ldr	r2, [pc, #112]	; (8006840 <HAL_RCC_OscConfig+0x4dc>)
 80067d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80067d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067d6:	f7fb ffaf 	bl	8002738 <HAL_GetTick>
 80067da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067dc:	e008      	b.n	80067f0 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067de:	f7fb ffab 	bl	8002738 <HAL_GetTick>
 80067e2:	4602      	mov	r2, r0
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	d901      	bls.n	80067f0 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80067ec:	2303      	movs	r3, #3
 80067ee:	e023      	b.n	8006838 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067f0:	4b13      	ldr	r3, [pc, #76]	; (8006840 <HAL_RCC_OscConfig+0x4dc>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d0f0      	beq.n	80067de <HAL_RCC_OscConfig+0x47a>
 80067fc:	e01b      	b.n	8006836 <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067fe:	4b10      	ldr	r3, [pc, #64]	; (8006840 <HAL_RCC_OscConfig+0x4dc>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a0f      	ldr	r2, [pc, #60]	; (8006840 <HAL_RCC_OscConfig+0x4dc>)
 8006804:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006808:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800680a:	f7fb ff95 	bl	8002738 <HAL_GetTick>
 800680e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006810:	e008      	b.n	8006824 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006812:	f7fb ff91 	bl	8002738 <HAL_GetTick>
 8006816:	4602      	mov	r2, r0
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	1ad3      	subs	r3, r2, r3
 800681c:	2b02      	cmp	r3, #2
 800681e:	d901      	bls.n	8006824 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006820:	2303      	movs	r3, #3
 8006822:	e009      	b.n	8006838 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006824:	4b06      	ldr	r3, [pc, #24]	; (8006840 <HAL_RCC_OscConfig+0x4dc>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800682c:	2b00      	cmp	r3, #0
 800682e:	d1f0      	bne.n	8006812 <HAL_RCC_OscConfig+0x4ae>
 8006830:	e001      	b.n	8006836 <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	e000      	b.n	8006838 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 8006836:	2300      	movs	r3, #0
}
 8006838:	4618      	mov	r0, r3
 800683a:	3718      	adds	r7, #24
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}
 8006840:	40023800 	.word	0x40023800
 8006844:	40007000 	.word	0x40007000

08006848 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006852:	2300      	movs	r3, #0
 8006854:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d101      	bne.n	8006860 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	e0ce      	b.n	80069fe <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006860:	4b69      	ldr	r3, [pc, #420]	; (8006a08 <HAL_RCC_ClockConfig+0x1c0>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 030f 	and.w	r3, r3, #15
 8006868:	683a      	ldr	r2, [r7, #0]
 800686a:	429a      	cmp	r2, r3
 800686c:	d910      	bls.n	8006890 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800686e:	4b66      	ldr	r3, [pc, #408]	; (8006a08 <HAL_RCC_ClockConfig+0x1c0>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f023 020f 	bic.w	r2, r3, #15
 8006876:	4964      	ldr	r1, [pc, #400]	; (8006a08 <HAL_RCC_ClockConfig+0x1c0>)
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	4313      	orrs	r3, r2
 800687c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800687e:	4b62      	ldr	r3, [pc, #392]	; (8006a08 <HAL_RCC_ClockConfig+0x1c0>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f003 030f 	and.w	r3, r3, #15
 8006886:	683a      	ldr	r2, [r7, #0]
 8006888:	429a      	cmp	r2, r3
 800688a:	d001      	beq.n	8006890 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	e0b6      	b.n	80069fe <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 0302 	and.w	r3, r3, #2
 8006898:	2b00      	cmp	r3, #0
 800689a:	d020      	beq.n	80068de <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 0304 	and.w	r3, r3, #4
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d005      	beq.n	80068b4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80068a8:	4b58      	ldr	r3, [pc, #352]	; (8006a0c <HAL_RCC_ClockConfig+0x1c4>)
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	4a57      	ldr	r2, [pc, #348]	; (8006a0c <HAL_RCC_ClockConfig+0x1c4>)
 80068ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80068b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 0308 	and.w	r3, r3, #8
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d005      	beq.n	80068cc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80068c0:	4b52      	ldr	r3, [pc, #328]	; (8006a0c <HAL_RCC_ClockConfig+0x1c4>)
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	4a51      	ldr	r2, [pc, #324]	; (8006a0c <HAL_RCC_ClockConfig+0x1c4>)
 80068c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80068ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068cc:	4b4f      	ldr	r3, [pc, #316]	; (8006a0c <HAL_RCC_ClockConfig+0x1c4>)
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	494c      	ldr	r1, [pc, #304]	; (8006a0c <HAL_RCC_ClockConfig+0x1c4>)
 80068da:	4313      	orrs	r3, r2
 80068dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f003 0301 	and.w	r3, r3, #1
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d040      	beq.n	800696c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d107      	bne.n	8006902 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068f2:	4b46      	ldr	r3, [pc, #280]	; (8006a0c <HAL_RCC_ClockConfig+0x1c4>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d115      	bne.n	800692a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	e07d      	b.n	80069fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	2b02      	cmp	r3, #2
 8006908:	d107      	bne.n	800691a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800690a:	4b40      	ldr	r3, [pc, #256]	; (8006a0c <HAL_RCC_ClockConfig+0x1c4>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006912:	2b00      	cmp	r3, #0
 8006914:	d109      	bne.n	800692a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e071      	b.n	80069fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800691a:	4b3c      	ldr	r3, [pc, #240]	; (8006a0c <HAL_RCC_ClockConfig+0x1c4>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f003 0302 	and.w	r3, r3, #2
 8006922:	2b00      	cmp	r3, #0
 8006924:	d101      	bne.n	800692a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e069      	b.n	80069fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800692a:	4b38      	ldr	r3, [pc, #224]	; (8006a0c <HAL_RCC_ClockConfig+0x1c4>)
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	f023 0203 	bic.w	r2, r3, #3
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	4935      	ldr	r1, [pc, #212]	; (8006a0c <HAL_RCC_ClockConfig+0x1c4>)
 8006938:	4313      	orrs	r3, r2
 800693a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800693c:	f7fb fefc 	bl	8002738 <HAL_GetTick>
 8006940:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006942:	e00a      	b.n	800695a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006944:	f7fb fef8 	bl	8002738 <HAL_GetTick>
 8006948:	4602      	mov	r2, r0
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	1ad3      	subs	r3, r2, r3
 800694e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006952:	4293      	cmp	r3, r2
 8006954:	d901      	bls.n	800695a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006956:	2303      	movs	r3, #3
 8006958:	e051      	b.n	80069fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800695a:	4b2c      	ldr	r3, [pc, #176]	; (8006a0c <HAL_RCC_ClockConfig+0x1c4>)
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	f003 020c 	and.w	r2, r3, #12
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	429a      	cmp	r2, r3
 800696a:	d1eb      	bne.n	8006944 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800696c:	4b26      	ldr	r3, [pc, #152]	; (8006a08 <HAL_RCC_ClockConfig+0x1c0>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f003 030f 	and.w	r3, r3, #15
 8006974:	683a      	ldr	r2, [r7, #0]
 8006976:	429a      	cmp	r2, r3
 8006978:	d210      	bcs.n	800699c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800697a:	4b23      	ldr	r3, [pc, #140]	; (8006a08 <HAL_RCC_ClockConfig+0x1c0>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f023 020f 	bic.w	r2, r3, #15
 8006982:	4921      	ldr	r1, [pc, #132]	; (8006a08 <HAL_RCC_ClockConfig+0x1c0>)
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	4313      	orrs	r3, r2
 8006988:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800698a:	4b1f      	ldr	r3, [pc, #124]	; (8006a08 <HAL_RCC_ClockConfig+0x1c0>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f003 030f 	and.w	r3, r3, #15
 8006992:	683a      	ldr	r2, [r7, #0]
 8006994:	429a      	cmp	r2, r3
 8006996:	d001      	beq.n	800699c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	e030      	b.n	80069fe <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f003 0304 	and.w	r3, r3, #4
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d008      	beq.n	80069ba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069a8:	4b18      	ldr	r3, [pc, #96]	; (8006a0c <HAL_RCC_ClockConfig+0x1c4>)
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	4915      	ldr	r1, [pc, #84]	; (8006a0c <HAL_RCC_ClockConfig+0x1c4>)
 80069b6:	4313      	orrs	r3, r2
 80069b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 0308 	and.w	r3, r3, #8
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d009      	beq.n	80069da <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80069c6:	4b11      	ldr	r3, [pc, #68]	; (8006a0c <HAL_RCC_ClockConfig+0x1c4>)
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	691b      	ldr	r3, [r3, #16]
 80069d2:	00db      	lsls	r3, r3, #3
 80069d4:	490d      	ldr	r1, [pc, #52]	; (8006a0c <HAL_RCC_ClockConfig+0x1c4>)
 80069d6:	4313      	orrs	r3, r2
 80069d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80069da:	f000 f81d 	bl	8006a18 <HAL_RCC_GetSysClockFreq>
 80069de:	4601      	mov	r1, r0
 80069e0:	4b0a      	ldr	r3, [pc, #40]	; (8006a0c <HAL_RCC_ClockConfig+0x1c4>)
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	091b      	lsrs	r3, r3, #4
 80069e6:	f003 030f 	and.w	r3, r3, #15
 80069ea:	4a09      	ldr	r2, [pc, #36]	; (8006a10 <HAL_RCC_ClockConfig+0x1c8>)
 80069ec:	5cd3      	ldrb	r3, [r2, r3]
 80069ee:	fa21 f303 	lsr.w	r3, r1, r3
 80069f2:	4a08      	ldr	r2, [pc, #32]	; (8006a14 <HAL_RCC_ClockConfig+0x1cc>)
 80069f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80069f6:	2000      	movs	r0, #0
 80069f8:	f7fb fe5a 	bl	80026b0 <HAL_InitTick>

  return HAL_OK;
 80069fc:	2300      	movs	r3, #0
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3710      	adds	r7, #16
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}
 8006a06:	bf00      	nop
 8006a08:	40023c00 	.word	0x40023c00
 8006a0c:	40023800 	.word	0x40023800
 8006a10:	0800c88c 	.word	0x0800c88c
 8006a14:	20000044 	.word	0x20000044

08006a18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a1a:	b085      	sub	sp, #20
 8006a1c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	607b      	str	r3, [r7, #4]
 8006a22:	2300      	movs	r3, #0
 8006a24:	60fb      	str	r3, [r7, #12]
 8006a26:	2300      	movs	r3, #0
 8006a28:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a2e:	4b50      	ldr	r3, [pc, #320]	; (8006b70 <HAL_RCC_GetSysClockFreq+0x158>)
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	f003 030c 	and.w	r3, r3, #12
 8006a36:	2b04      	cmp	r3, #4
 8006a38:	d007      	beq.n	8006a4a <HAL_RCC_GetSysClockFreq+0x32>
 8006a3a:	2b08      	cmp	r3, #8
 8006a3c:	d008      	beq.n	8006a50 <HAL_RCC_GetSysClockFreq+0x38>
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	f040 808d 	bne.w	8006b5e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006a44:	4b4b      	ldr	r3, [pc, #300]	; (8006b74 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006a46:	60bb      	str	r3, [r7, #8]
       break;
 8006a48:	e08c      	b.n	8006b64 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006a4a:	4b4b      	ldr	r3, [pc, #300]	; (8006b78 <HAL_RCC_GetSysClockFreq+0x160>)
 8006a4c:	60bb      	str	r3, [r7, #8]
      break;
 8006a4e:	e089      	b.n	8006b64 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006a50:	4b47      	ldr	r3, [pc, #284]	; (8006b70 <HAL_RCC_GetSysClockFreq+0x158>)
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a58:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006a5a:	4b45      	ldr	r3, [pc, #276]	; (8006b70 <HAL_RCC_GetSysClockFreq+0x158>)
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d023      	beq.n	8006aae <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a66:	4b42      	ldr	r3, [pc, #264]	; (8006b70 <HAL_RCC_GetSysClockFreq+0x158>)
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	099b      	lsrs	r3, r3, #6
 8006a6c:	f04f 0400 	mov.w	r4, #0
 8006a70:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006a74:	f04f 0200 	mov.w	r2, #0
 8006a78:	ea03 0501 	and.w	r5, r3, r1
 8006a7c:	ea04 0602 	and.w	r6, r4, r2
 8006a80:	4a3d      	ldr	r2, [pc, #244]	; (8006b78 <HAL_RCC_GetSysClockFreq+0x160>)
 8006a82:	fb02 f106 	mul.w	r1, r2, r6
 8006a86:	2200      	movs	r2, #0
 8006a88:	fb02 f205 	mul.w	r2, r2, r5
 8006a8c:	440a      	add	r2, r1
 8006a8e:	493a      	ldr	r1, [pc, #232]	; (8006b78 <HAL_RCC_GetSysClockFreq+0x160>)
 8006a90:	fba5 0101 	umull	r0, r1, r5, r1
 8006a94:	1853      	adds	r3, r2, r1
 8006a96:	4619      	mov	r1, r3
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f04f 0400 	mov.w	r4, #0
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	4623      	mov	r3, r4
 8006aa2:	f7f9 fc1d 	bl	80002e0 <__aeabi_uldivmod>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	460c      	mov	r4, r1
 8006aaa:	60fb      	str	r3, [r7, #12]
 8006aac:	e049      	b.n	8006b42 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006aae:	4b30      	ldr	r3, [pc, #192]	; (8006b70 <HAL_RCC_GetSysClockFreq+0x158>)
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	099b      	lsrs	r3, r3, #6
 8006ab4:	f04f 0400 	mov.w	r4, #0
 8006ab8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006abc:	f04f 0200 	mov.w	r2, #0
 8006ac0:	ea03 0501 	and.w	r5, r3, r1
 8006ac4:	ea04 0602 	and.w	r6, r4, r2
 8006ac8:	4629      	mov	r1, r5
 8006aca:	4632      	mov	r2, r6
 8006acc:	f04f 0300 	mov.w	r3, #0
 8006ad0:	f04f 0400 	mov.w	r4, #0
 8006ad4:	0154      	lsls	r4, r2, #5
 8006ad6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006ada:	014b      	lsls	r3, r1, #5
 8006adc:	4619      	mov	r1, r3
 8006ade:	4622      	mov	r2, r4
 8006ae0:	1b49      	subs	r1, r1, r5
 8006ae2:	eb62 0206 	sbc.w	r2, r2, r6
 8006ae6:	f04f 0300 	mov.w	r3, #0
 8006aea:	f04f 0400 	mov.w	r4, #0
 8006aee:	0194      	lsls	r4, r2, #6
 8006af0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006af4:	018b      	lsls	r3, r1, #6
 8006af6:	1a5b      	subs	r3, r3, r1
 8006af8:	eb64 0402 	sbc.w	r4, r4, r2
 8006afc:	f04f 0100 	mov.w	r1, #0
 8006b00:	f04f 0200 	mov.w	r2, #0
 8006b04:	00e2      	lsls	r2, r4, #3
 8006b06:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006b0a:	00d9      	lsls	r1, r3, #3
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	4614      	mov	r4, r2
 8006b10:	195b      	adds	r3, r3, r5
 8006b12:	eb44 0406 	adc.w	r4, r4, r6
 8006b16:	f04f 0100 	mov.w	r1, #0
 8006b1a:	f04f 0200 	mov.w	r2, #0
 8006b1e:	02a2      	lsls	r2, r4, #10
 8006b20:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006b24:	0299      	lsls	r1, r3, #10
 8006b26:	460b      	mov	r3, r1
 8006b28:	4614      	mov	r4, r2
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	4621      	mov	r1, r4
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f04f 0400 	mov.w	r4, #0
 8006b34:	461a      	mov	r2, r3
 8006b36:	4623      	mov	r3, r4
 8006b38:	f7f9 fbd2 	bl	80002e0 <__aeabi_uldivmod>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	460c      	mov	r4, r1
 8006b40:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8006b42:	4b0b      	ldr	r3, [pc, #44]	; (8006b70 <HAL_RCC_GetSysClockFreq+0x158>)
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	0c1b      	lsrs	r3, r3, #16
 8006b48:	f003 0303 	and.w	r3, r3, #3
 8006b4c:	3301      	adds	r3, #1
 8006b4e:	005b      	lsls	r3, r3, #1
 8006b50:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006b52:	68fa      	ldr	r2, [r7, #12]
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b5a:	60bb      	str	r3, [r7, #8]
      break;
 8006b5c:	e002      	b.n	8006b64 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006b5e:	4b05      	ldr	r3, [pc, #20]	; (8006b74 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006b60:	60bb      	str	r3, [r7, #8]
      break;
 8006b62:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b64:	68bb      	ldr	r3, [r7, #8]
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3714      	adds	r7, #20
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	40023800 	.word	0x40023800
 8006b74:	00f42400 	.word	0x00f42400
 8006b78:	017d7840 	.word	0x017d7840

08006b7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b088      	sub	sp, #32
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006b84:	2300      	movs	r3, #0
 8006b86:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006b90:	2300      	movs	r3, #0
 8006b92:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006b94:	2300      	movs	r3, #0
 8006b96:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 0301 	and.w	r3, r3, #1
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d012      	beq.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006ba4:	4b69      	ldr	r3, [pc, #420]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	4a68      	ldr	r2, [pc, #416]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006baa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006bae:	6093      	str	r3, [r2, #8]
 8006bb0:	4b66      	ldr	r3, [pc, #408]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bb2:	689a      	ldr	r2, [r3, #8]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bb8:	4964      	ldr	r1, [pc, #400]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d101      	bne.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d017      	beq.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006bd6:	4b5d      	ldr	r3, [pc, #372]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bdc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006be4:	4959      	ldr	r1, [pc, #356]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006be6:	4313      	orrs	r3, r2
 8006be8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bf0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bf4:	d101      	bne.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d101      	bne.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006c02:	2301      	movs	r3, #1
 8006c04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d017      	beq.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006c12:	4b4e      	ldr	r3, [pc, #312]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c18:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c20:	494a      	ldr	r1, [pc, #296]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c22:	4313      	orrs	r3, r2
 8006c24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c30:	d101      	bne.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006c32:	2301      	movs	r3, #1
 8006c34:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d101      	bne.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d001      	beq.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f003 0320 	and.w	r3, r3, #32
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	f000 808b 	beq.w	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006c60:	4b3a      	ldr	r3, [pc, #232]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c64:	4a39      	ldr	r2, [pc, #228]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c6a:	6413      	str	r3, [r2, #64]	; 0x40
 8006c6c:	4b37      	ldr	r3, [pc, #220]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c74:	60bb      	str	r3, [r7, #8]
 8006c76:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006c78:	4b35      	ldr	r3, [pc, #212]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a34      	ldr	r2, [pc, #208]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006c7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c84:	f7fb fd58 	bl	8002738 <HAL_GetTick>
 8006c88:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006c8a:	e008      	b.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c8c:	f7fb fd54 	bl	8002738 <HAL_GetTick>
 8006c90:	4602      	mov	r2, r0
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	1ad3      	subs	r3, r2, r3
 8006c96:	2b64      	cmp	r3, #100	; 0x64
 8006c98:	d901      	bls.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	e38d      	b.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006c9e:	4b2c      	ldr	r3, [pc, #176]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d0f0      	beq.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006caa:	4b28      	ldr	r3, [pc, #160]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cb2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d035      	beq.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cc2:	693a      	ldr	r2, [r7, #16]
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d02e      	beq.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006cc8:	4b20      	ldr	r3, [pc, #128]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ccc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cd0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006cd2:	4b1e      	ldr	r3, [pc, #120]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cd6:	4a1d      	ldr	r2, [pc, #116]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cdc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006cde:	4b1b      	ldr	r3, [pc, #108]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ce2:	4a1a      	ldr	r2, [pc, #104]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ce4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ce8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006cea:	4a18      	ldr	r2, [pc, #96]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006cf0:	4b16      	ldr	r3, [pc, #88]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cf4:	f003 0301 	and.w	r3, r3, #1
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d114      	bne.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cfc:	f7fb fd1c 	bl	8002738 <HAL_GetTick>
 8006d00:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d02:	e00a      	b.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d04:	f7fb fd18 	bl	8002738 <HAL_GetTick>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	1ad3      	subs	r3, r2, r3
 8006d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d901      	bls.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006d16:	2303      	movs	r3, #3
 8006d18:	e34f      	b.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d1a:	4b0c      	ldr	r3, [pc, #48]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d1e:	f003 0302 	and.w	r3, r3, #2
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d0ee      	beq.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d32:	d111      	bne.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006d34:	4b05      	ldr	r3, [pc, #20]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006d40:	4b04      	ldr	r3, [pc, #16]	; (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006d42:	400b      	ands	r3, r1
 8006d44:	4901      	ldr	r1, [pc, #4]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d46:	4313      	orrs	r3, r2
 8006d48:	608b      	str	r3, [r1, #8]
 8006d4a:	e00b      	b.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006d4c:	40023800 	.word	0x40023800
 8006d50:	40007000 	.word	0x40007000
 8006d54:	0ffffcff 	.word	0x0ffffcff
 8006d58:	4bb3      	ldr	r3, [pc, #716]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	4ab2      	ldr	r2, [pc, #712]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d5e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006d62:	6093      	str	r3, [r2, #8]
 8006d64:	4bb0      	ldr	r3, [pc, #704]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d70:	49ad      	ldr	r1, [pc, #692]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d72:	4313      	orrs	r3, r2
 8006d74:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 0310 	and.w	r3, r3, #16
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d010      	beq.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006d82:	4ba9      	ldr	r3, [pc, #676]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d88:	4aa7      	ldr	r2, [pc, #668]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d8e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006d92:	4ba5      	ldr	r3, [pc, #660]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d94:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d9c:	49a2      	ldr	r1, [pc, #648]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d00a      	beq.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006db0:	4b9d      	ldr	r3, [pc, #628]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006db6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dbe:	499a      	ldr	r1, [pc, #616]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d00a      	beq.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006dd2:	4b95      	ldr	r3, [pc, #596]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dd8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006de0:	4991      	ldr	r1, [pc, #580]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006de2:	4313      	orrs	r3, r2
 8006de4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d00a      	beq.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006df4:	4b8c      	ldr	r3, [pc, #560]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dfa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e02:	4989      	ldr	r1, [pc, #548]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e04:	4313      	orrs	r3, r2
 8006e06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d00a      	beq.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006e16:	4b84      	ldr	r3, [pc, #528]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e1c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e24:	4980      	ldr	r1, [pc, #512]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e26:	4313      	orrs	r3, r2
 8006e28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d00a      	beq.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006e38:	4b7b      	ldr	r3, [pc, #492]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e3e:	f023 0203 	bic.w	r2, r3, #3
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e46:	4978      	ldr	r1, [pc, #480]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d00a      	beq.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006e5a:	4b73      	ldr	r3, [pc, #460]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e60:	f023 020c 	bic.w	r2, r3, #12
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e68:	496f      	ldr	r1, [pc, #444]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d00a      	beq.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006e7c:	4b6a      	ldr	r3, [pc, #424]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e82:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e8a:	4967      	ldr	r1, [pc, #412]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d00a      	beq.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006e9e:	4b62      	ldr	r3, [pc, #392]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ea4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eac:	495e      	ldr	r1, [pc, #376]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d00a      	beq.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006ec0:	4b59      	ldr	r3, [pc, #356]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ec6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ece:	4956      	ldr	r1, [pc, #344]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d00a      	beq.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006ee2:	4b51      	ldr	r3, [pc, #324]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ee8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ef0:	494d      	ldr	r1, [pc, #308]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d00a      	beq.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006f04:	4b48      	ldr	r3, [pc, #288]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f0a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f12:	4945      	ldr	r1, [pc, #276]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f14:	4313      	orrs	r3, r2
 8006f16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d00a      	beq.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006f26:	4b40      	ldr	r3, [pc, #256]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f2c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f34:	493c      	ldr	r1, [pc, #240]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f36:	4313      	orrs	r3, r2
 8006f38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d00a      	beq.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006f48:	4b37      	ldr	r3, [pc, #220]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f4e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f56:	4934      	ldr	r1, [pc, #208]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d011      	beq.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006f6a:	4b2f      	ldr	r3, [pc, #188]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f70:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f78:	492b      	ldr	r1, [pc, #172]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f88:	d101      	bne.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f003 0308 	and.w	r3, r3, #8
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d001      	beq.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d00a      	beq.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006faa:	4b1f      	ldr	r3, [pc, #124]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fb0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fb8:	491b      	ldr	r1, [pc, #108]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d00b      	beq.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006fcc:	4b16      	ldr	r3, [pc, #88]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fd2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fdc:	4912      	ldr	r1, [pc, #72]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d00b      	beq.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8006ff0:	4b0d      	ldr	r3, [pc, #52]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ff6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007000:	4909      	ldr	r1, [pc, #36]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007002:	4313      	orrs	r3, r2
 8007004:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007010:	2b00      	cmp	r3, #0
 8007012:	d00f      	beq.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007014:	4b04      	ldr	r3, [pc, #16]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007016:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800701a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007024:	e002      	b.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8007026:	bf00      	nop
 8007028:	40023800 	.word	0x40023800
 800702c:	4985      	ldr	r1, [pc, #532]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800702e:	4313      	orrs	r3, r2
 8007030:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800703c:	2b00      	cmp	r3, #0
 800703e:	d00b      	beq.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007040:	4b80      	ldr	r3, [pc, #512]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007042:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007046:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007050:	497c      	ldr	r1, [pc, #496]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007052:	4313      	orrs	r3, r2
 8007054:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	2b01      	cmp	r3, #1
 800705c:	d005      	beq.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007066:	f040 80d6 	bne.w	8007216 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800706a:	4b76      	ldr	r3, [pc, #472]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a75      	ldr	r2, [pc, #468]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007070:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007074:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007076:	f7fb fb5f 	bl	8002738 <HAL_GetTick>
 800707a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800707c:	e008      	b.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800707e:	f7fb fb5b 	bl	8002738 <HAL_GetTick>
 8007082:	4602      	mov	r2, r0
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	1ad3      	subs	r3, r2, r3
 8007088:	2b64      	cmp	r3, #100	; 0x64
 800708a:	d901      	bls.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800708c:	2303      	movs	r3, #3
 800708e:	e194      	b.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007090:	4b6c      	ldr	r3, [pc, #432]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007098:	2b00      	cmp	r3, #0
 800709a:	d1f0      	bne.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 0301 	and.w	r3, r3, #1
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d021      	beq.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x570>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d11d      	bne.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80070b0:	4b64      	ldr	r3, [pc, #400]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80070b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070b6:	0c1b      	lsrs	r3, r3, #16
 80070b8:	f003 0303 	and.w	r3, r3, #3
 80070bc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80070be:	4b61      	ldr	r3, [pc, #388]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80070c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070c4:	0e1b      	lsrs	r3, r3, #24
 80070c6:	f003 030f 	and.w	r3, r3, #15
 80070ca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	019a      	lsls	r2, r3, #6
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	041b      	lsls	r3, r3, #16
 80070d6:	431a      	orrs	r2, r3
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	061b      	lsls	r3, r3, #24
 80070dc:	431a      	orrs	r2, r3
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	071b      	lsls	r3, r3, #28
 80070e4:	4957      	ldr	r1, [pc, #348]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80070e6:	4313      	orrs	r3, r2
 80070e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d004      	beq.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007100:	d00a      	beq.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800710a:	2b00      	cmp	r3, #0
 800710c:	d02e      	beq.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007112:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007116:	d129      	bne.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007118:	4b4a      	ldr	r3, [pc, #296]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800711a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800711e:	0c1b      	lsrs	r3, r3, #16
 8007120:	f003 0303 	and.w	r3, r3, #3
 8007124:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007126:	4b47      	ldr	r3, [pc, #284]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007128:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800712c:	0f1b      	lsrs	r3, r3, #28
 800712e:	f003 0307 	and.w	r3, r3, #7
 8007132:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	019a      	lsls	r2, r3, #6
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	041b      	lsls	r3, r3, #16
 800713e:	431a      	orrs	r2, r3
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	68db      	ldr	r3, [r3, #12]
 8007144:	061b      	lsls	r3, r3, #24
 8007146:	431a      	orrs	r2, r3
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	071b      	lsls	r3, r3, #28
 800714c:	493d      	ldr	r1, [pc, #244]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800714e:	4313      	orrs	r3, r2
 8007150:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007154:	4b3b      	ldr	r3, [pc, #236]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007156:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800715a:	f023 021f 	bic.w	r2, r3, #31
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007162:	3b01      	subs	r3, #1
 8007164:	4937      	ldr	r1, [pc, #220]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007166:	4313      	orrs	r3, r2
 8007168:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007174:	2b00      	cmp	r3, #0
 8007176:	d01d      	beq.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007178:	4b32      	ldr	r3, [pc, #200]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800717a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800717e:	0e1b      	lsrs	r3, r3, #24
 8007180:	f003 030f 	and.w	r3, r3, #15
 8007184:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007186:	4b2f      	ldr	r3, [pc, #188]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007188:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800718c:	0f1b      	lsrs	r3, r3, #28
 800718e:	f003 0307 	and.w	r3, r3, #7
 8007192:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	019a      	lsls	r2, r3, #6
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	691b      	ldr	r3, [r3, #16]
 800719e:	041b      	lsls	r3, r3, #16
 80071a0:	431a      	orrs	r2, r3
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	061b      	lsls	r3, r3, #24
 80071a6:	431a      	orrs	r2, r3
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	071b      	lsls	r3, r3, #28
 80071ac:	4925      	ldr	r1, [pc, #148]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80071ae:	4313      	orrs	r3, r2
 80071b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d011      	beq.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	019a      	lsls	r2, r3, #6
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	691b      	ldr	r3, [r3, #16]
 80071ca:	041b      	lsls	r3, r3, #16
 80071cc:	431a      	orrs	r2, r3
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	68db      	ldr	r3, [r3, #12]
 80071d2:	061b      	lsls	r3, r3, #24
 80071d4:	431a      	orrs	r2, r3
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	071b      	lsls	r3, r3, #28
 80071dc:	4919      	ldr	r1, [pc, #100]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80071de:	4313      	orrs	r3, r2
 80071e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80071e4:	4b17      	ldr	r3, [pc, #92]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a16      	ldr	r2, [pc, #88]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80071ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80071ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071f0:	f7fb faa2 	bl	8002738 <HAL_GetTick>
 80071f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80071f6:	e008      	b.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80071f8:	f7fb fa9e 	bl	8002738 <HAL_GetTick>
 80071fc:	4602      	mov	r2, r0
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	1ad3      	subs	r3, r2, r3
 8007202:	2b64      	cmp	r3, #100	; 0x64
 8007204:	d901      	bls.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007206:	2303      	movs	r3, #3
 8007208:	e0d7      	b.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800720a:	4b0e      	ldr	r3, [pc, #56]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007212:	2b00      	cmp	r3, #0
 8007214:	d0f0      	beq.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007216:	69bb      	ldr	r3, [r7, #24]
 8007218:	2b01      	cmp	r3, #1
 800721a:	f040 80cd 	bne.w	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800721e:	4b09      	ldr	r3, [pc, #36]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a08      	ldr	r2, [pc, #32]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007224:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007228:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800722a:	f7fb fa85 	bl	8002738 <HAL_GetTick>
 800722e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007230:	e00a      	b.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007232:	f7fb fa81 	bl	8002738 <HAL_GetTick>
 8007236:	4602      	mov	r2, r0
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	1ad3      	subs	r3, r2, r3
 800723c:	2b64      	cmp	r3, #100	; 0x64
 800723e:	d903      	bls.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007240:	2303      	movs	r3, #3
 8007242:	e0ba      	b.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8007244:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007248:	4b5e      	ldr	r3, [pc, #376]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007250:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007254:	d0ed      	beq.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800725e:	2b00      	cmp	r3, #0
 8007260:	d003      	beq.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007266:	2b00      	cmp	r3, #0
 8007268:	d009      	beq.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007272:	2b00      	cmp	r3, #0
 8007274:	d02e      	beq.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800727a:	2b00      	cmp	r3, #0
 800727c:	d12a      	bne.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800727e:	4b51      	ldr	r3, [pc, #324]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007284:	0c1b      	lsrs	r3, r3, #16
 8007286:	f003 0303 	and.w	r3, r3, #3
 800728a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800728c:	4b4d      	ldr	r3, [pc, #308]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800728e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007292:	0f1b      	lsrs	r3, r3, #28
 8007294:	f003 0307 	and.w	r3, r3, #7
 8007298:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	695b      	ldr	r3, [r3, #20]
 800729e:	019a      	lsls	r2, r3, #6
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	041b      	lsls	r3, r3, #16
 80072a4:	431a      	orrs	r2, r3
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	699b      	ldr	r3, [r3, #24]
 80072aa:	061b      	lsls	r3, r3, #24
 80072ac:	431a      	orrs	r2, r3
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	071b      	lsls	r3, r3, #28
 80072b2:	4944      	ldr	r1, [pc, #272]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80072b4:	4313      	orrs	r3, r2
 80072b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80072ba:	4b42      	ldr	r3, [pc, #264]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80072bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072c0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072c8:	3b01      	subs	r3, #1
 80072ca:	021b      	lsls	r3, r3, #8
 80072cc:	493d      	ldr	r1, [pc, #244]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80072ce:	4313      	orrs	r3, r2
 80072d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d022      	beq.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80072e8:	d11d      	bne.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80072ea:	4b36      	ldr	r3, [pc, #216]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80072ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072f0:	0e1b      	lsrs	r3, r3, #24
 80072f2:	f003 030f 	and.w	r3, r3, #15
 80072f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80072f8:	4b32      	ldr	r3, [pc, #200]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80072fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072fe:	0f1b      	lsrs	r3, r3, #28
 8007300:	f003 0307 	and.w	r3, r3, #7
 8007304:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	695b      	ldr	r3, [r3, #20]
 800730a:	019a      	lsls	r2, r3, #6
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6a1b      	ldr	r3, [r3, #32]
 8007310:	041b      	lsls	r3, r3, #16
 8007312:	431a      	orrs	r2, r3
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	061b      	lsls	r3, r3, #24
 8007318:	431a      	orrs	r2, r3
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	071b      	lsls	r3, r3, #28
 800731e:	4929      	ldr	r1, [pc, #164]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007320:	4313      	orrs	r3, r2
 8007322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f003 0308 	and.w	r3, r3, #8
 800732e:	2b00      	cmp	r3, #0
 8007330:	d028      	beq.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007332:	4b24      	ldr	r3, [pc, #144]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007338:	0e1b      	lsrs	r3, r3, #24
 800733a:	f003 030f 	and.w	r3, r3, #15
 800733e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007340:	4b20      	ldr	r3, [pc, #128]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007346:	0c1b      	lsrs	r3, r3, #16
 8007348:	f003 0303 	and.w	r3, r3, #3
 800734c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	695b      	ldr	r3, [r3, #20]
 8007352:	019a      	lsls	r2, r3, #6
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	041b      	lsls	r3, r3, #16
 8007358:	431a      	orrs	r2, r3
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	061b      	lsls	r3, r3, #24
 800735e:	431a      	orrs	r2, r3
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	69db      	ldr	r3, [r3, #28]
 8007364:	071b      	lsls	r3, r3, #28
 8007366:	4917      	ldr	r1, [pc, #92]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007368:	4313      	orrs	r3, r2
 800736a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800736e:	4b15      	ldr	r3, [pc, #84]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007370:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007374:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800737c:	4911      	ldr	r1, [pc, #68]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800737e:	4313      	orrs	r3, r2
 8007380:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007384:	4b0f      	ldr	r3, [pc, #60]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a0e      	ldr	r2, [pc, #56]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800738a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800738e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007390:	f7fb f9d2 	bl	8002738 <HAL_GetTick>
 8007394:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007396:	e008      	b.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007398:	f7fb f9ce 	bl	8002738 <HAL_GetTick>
 800739c:	4602      	mov	r2, r0
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	1ad3      	subs	r3, r2, r3
 80073a2:	2b64      	cmp	r3, #100	; 0x64
 80073a4:	d901      	bls.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80073a6:	2303      	movs	r3, #3
 80073a8:	e007      	b.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80073aa:	4b06      	ldr	r3, [pc, #24]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073b6:	d1ef      	bne.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80073b8:	2300      	movs	r3, #0
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3720      	adds	r7, #32
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	bf00      	nop
 80073c4:	40023800 	.word	0x40023800

080073c8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d101      	bne.n	80073dc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80073d8:	2301      	movs	r3, #1
 80073da:	e025      	b.n	8007428 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d106      	bne.n	80073f6 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f002 fe19 	bl	800a028 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2202      	movs	r2, #2
 80073fa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	3304      	adds	r3, #4
 8007406:	4619      	mov	r1, r3
 8007408:	4610      	mov	r0, r2
 800740a:	f000 fb13 	bl	8007a34 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6818      	ldr	r0, [r3, #0]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	461a      	mov	r2, r3
 8007418:	6839      	ldr	r1, [r7, #0]
 800741a:	f000 fb7d 	bl	8007b18 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2201      	movs	r2, #1
 8007422:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8007426:	2300      	movs	r3, #0
}
 8007428:	4618      	mov	r0, r3
 800742a:	3708      	adds	r7, #8
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	60f8      	str	r0, [r7, #12]
 8007438:	60b9      	str	r1, [r7, #8]
 800743a:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007442:	b2db      	uxtb	r3, r3
 8007444:	2b02      	cmp	r3, #2
 8007446:	d101      	bne.n	800744c <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8007448:	2302      	movs	r3, #2
 800744a:	e018      	b.n	800747e <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2202      	movs	r2, #2
 8007450:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	68b9      	ldr	r1, [r7, #8]
 800745c:	4618      	mov	r0, r3
 800745e:	f000 fbdb 	bl	8007c18 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	2b02      	cmp	r3, #2
 8007468:	d104      	bne.n	8007474 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2205      	movs	r2, #5
 800746e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8007472:	e003      	b.n	800747c <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2201      	movs	r2, #1
 8007478:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3710      	adds	r7, #16
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}

08007486 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8007486:	b580      	push	{r7, lr}
 8007488:	b082      	sub	sp, #8
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
 800748e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007496:	b2db      	uxtb	r3, r3
 8007498:	2b02      	cmp	r3, #2
 800749a:	d101      	bne.n	80074a0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800749c:	2302      	movs	r3, #2
 800749e:	e00e      	b.n	80074be <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2202      	movs	r2, #2
 80074a4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	6839      	ldr	r1, [r7, #0]
 80074ae:	4618      	mov	r0, r3
 80074b0:	f000 fbd3 	bl	8007c5a <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2201      	movs	r2, #1
 80074b8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 80074bc:	2300      	movs	r3, #0
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3708      	adds	r7, #8
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}

080074c6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80074c6:	b580      	push	{r7, lr}
 80074c8:	b082      	sub	sp, #8
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d101      	bne.n	80074d8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	e01d      	b.n	8007514 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d106      	bne.n	80074f2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f002 fcb5 	bl	8009e5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2202      	movs	r2, #2
 80074f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681a      	ldr	r2, [r3, #0]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	3304      	adds	r3, #4
 8007502:	4619      	mov	r1, r3
 8007504:	4610      	mov	r0, r2
 8007506:	f000 f97b 	bl	8007800 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2201      	movs	r2, #1
 800750e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007512:	2300      	movs	r3, #0
}
 8007514:	4618      	mov	r0, r3
 8007516:	3708      	adds	r7, #8
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800751c:	b480      	push	{r7}
 800751e:	b085      	sub	sp, #20
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	68da      	ldr	r2, [r3, #12]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f042 0201 	orr.w	r2, r2, #1
 8007532:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	689a      	ldr	r2, [r3, #8]
 800753a:	4b0c      	ldr	r3, [pc, #48]	; (800756c <HAL_TIM_Base_Start_IT+0x50>)
 800753c:	4013      	ands	r3, r2
 800753e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2b06      	cmp	r3, #6
 8007544:	d00b      	beq.n	800755e <HAL_TIM_Base_Start_IT+0x42>
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800754c:	d007      	beq.n	800755e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f042 0201 	orr.w	r2, r2, #1
 800755c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800755e:	2300      	movs	r3, #0
}
 8007560:	4618      	mov	r0, r3
 8007562:	3714      	adds	r7, #20
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr
 800756c:	00010007 	.word	0x00010007

08007570 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b082      	sub	sp, #8
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	691b      	ldr	r3, [r3, #16]
 800757e:	f003 0302 	and.w	r3, r3, #2
 8007582:	2b02      	cmp	r3, #2
 8007584:	d122      	bne.n	80075cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	f003 0302 	and.w	r3, r3, #2
 8007590:	2b02      	cmp	r3, #2
 8007592:	d11b      	bne.n	80075cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f06f 0202 	mvn.w	r2, #2
 800759c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2201      	movs	r2, #1
 80075a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	699b      	ldr	r3, [r3, #24]
 80075aa:	f003 0303 	and.w	r3, r3, #3
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d003      	beq.n	80075ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 f905 	bl	80077c2 <HAL_TIM_IC_CaptureCallback>
 80075b8:	e005      	b.n	80075c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 f8f7 	bl	80077ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 f908 	bl	80077d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	f003 0304 	and.w	r3, r3, #4
 80075d6:	2b04      	cmp	r3, #4
 80075d8:	d122      	bne.n	8007620 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	68db      	ldr	r3, [r3, #12]
 80075e0:	f003 0304 	and.w	r3, r3, #4
 80075e4:	2b04      	cmp	r3, #4
 80075e6:	d11b      	bne.n	8007620 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f06f 0204 	mvn.w	r2, #4
 80075f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2202      	movs	r2, #2
 80075f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	699b      	ldr	r3, [r3, #24]
 80075fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007602:	2b00      	cmp	r3, #0
 8007604:	d003      	beq.n	800760e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 f8db 	bl	80077c2 <HAL_TIM_IC_CaptureCallback>
 800760c:	e005      	b.n	800761a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 f8cd 	bl	80077ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 f8de 	bl	80077d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2200      	movs	r2, #0
 800761e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	691b      	ldr	r3, [r3, #16]
 8007626:	f003 0308 	and.w	r3, r3, #8
 800762a:	2b08      	cmp	r3, #8
 800762c:	d122      	bne.n	8007674 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	f003 0308 	and.w	r3, r3, #8
 8007638:	2b08      	cmp	r3, #8
 800763a:	d11b      	bne.n	8007674 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f06f 0208 	mvn.w	r2, #8
 8007644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2204      	movs	r2, #4
 800764a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	69db      	ldr	r3, [r3, #28]
 8007652:	f003 0303 	and.w	r3, r3, #3
 8007656:	2b00      	cmp	r3, #0
 8007658:	d003      	beq.n	8007662 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 f8b1 	bl	80077c2 <HAL_TIM_IC_CaptureCallback>
 8007660:	e005      	b.n	800766e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 f8a3 	bl	80077ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f000 f8b4 	bl	80077d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	691b      	ldr	r3, [r3, #16]
 800767a:	f003 0310 	and.w	r3, r3, #16
 800767e:	2b10      	cmp	r3, #16
 8007680:	d122      	bne.n	80076c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	68db      	ldr	r3, [r3, #12]
 8007688:	f003 0310 	and.w	r3, r3, #16
 800768c:	2b10      	cmp	r3, #16
 800768e:	d11b      	bne.n	80076c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f06f 0210 	mvn.w	r2, #16
 8007698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2208      	movs	r2, #8
 800769e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	69db      	ldr	r3, [r3, #28]
 80076a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d003      	beq.n	80076b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 f887 	bl	80077c2 <HAL_TIM_IC_CaptureCallback>
 80076b4:	e005      	b.n	80076c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 f879 	bl	80077ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 f88a 	bl	80077d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	691b      	ldr	r3, [r3, #16]
 80076ce:	f003 0301 	and.w	r3, r3, #1
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d10e      	bne.n	80076f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	68db      	ldr	r3, [r3, #12]
 80076dc:	f003 0301 	and.w	r3, r3, #1
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d107      	bne.n	80076f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f06f 0201 	mvn.w	r2, #1
 80076ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f001 fabc 	bl	8008c6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	691b      	ldr	r3, [r3, #16]
 80076fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076fe:	2b80      	cmp	r3, #128	; 0x80
 8007700:	d10e      	bne.n	8007720 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800770c:	2b80      	cmp	r3, #128	; 0x80
 800770e:	d107      	bne.n	8007720 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 f976 	bl	8007a0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	691b      	ldr	r3, [r3, #16]
 8007726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800772a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800772e:	d10e      	bne.n	800774e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	68db      	ldr	r3, [r3, #12]
 8007736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800773a:	2b80      	cmp	r3, #128	; 0x80
 800773c:	d107      	bne.n	800774e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007746:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 f969 	bl	8007a20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	691b      	ldr	r3, [r3, #16]
 8007754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007758:	2b40      	cmp	r3, #64	; 0x40
 800775a:	d10e      	bne.n	800777a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	68db      	ldr	r3, [r3, #12]
 8007762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007766:	2b40      	cmp	r3, #64	; 0x40
 8007768:	d107      	bne.n	800777a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007772:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 f838 	bl	80077ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	691b      	ldr	r3, [r3, #16]
 8007780:	f003 0320 	and.w	r3, r3, #32
 8007784:	2b20      	cmp	r3, #32
 8007786:	d10e      	bne.n	80077a6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	f003 0320 	and.w	r3, r3, #32
 8007792:	2b20      	cmp	r3, #32
 8007794:	d107      	bne.n	80077a6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f06f 0220 	mvn.w	r2, #32
 800779e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f000 f929 	bl	80079f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80077a6:	bf00      	nop
 80077a8:	3708      	adds	r7, #8
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}

080077ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80077ae:	b480      	push	{r7}
 80077b0:	b083      	sub	sp, #12
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80077b6:	bf00      	nop
 80077b8:	370c      	adds	r7, #12
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr

080077c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80077c2:	b480      	push	{r7}
 80077c4:	b083      	sub	sp, #12
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80077ca:	bf00      	nop
 80077cc:	370c      	adds	r7, #12
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr

080077d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80077d6:	b480      	push	{r7}
 80077d8:	b083      	sub	sp, #12
 80077da:	af00      	add	r7, sp, #0
 80077dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80077de:	bf00      	nop
 80077e0:	370c      	adds	r7, #12
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr

080077ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80077ea:	b480      	push	{r7}
 80077ec:	b083      	sub	sp, #12
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80077f2:	bf00      	nop
 80077f4:	370c      	adds	r7, #12
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr
	...

08007800 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007800:	b480      	push	{r7}
 8007802:	b085      	sub	sp, #20
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	4a40      	ldr	r2, [pc, #256]	; (8007914 <TIM_Base_SetConfig+0x114>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d013      	beq.n	8007840 <TIM_Base_SetConfig+0x40>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800781e:	d00f      	beq.n	8007840 <TIM_Base_SetConfig+0x40>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	4a3d      	ldr	r2, [pc, #244]	; (8007918 <TIM_Base_SetConfig+0x118>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d00b      	beq.n	8007840 <TIM_Base_SetConfig+0x40>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	4a3c      	ldr	r2, [pc, #240]	; (800791c <TIM_Base_SetConfig+0x11c>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d007      	beq.n	8007840 <TIM_Base_SetConfig+0x40>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	4a3b      	ldr	r2, [pc, #236]	; (8007920 <TIM_Base_SetConfig+0x120>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d003      	beq.n	8007840 <TIM_Base_SetConfig+0x40>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	4a3a      	ldr	r2, [pc, #232]	; (8007924 <TIM_Base_SetConfig+0x124>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d108      	bne.n	8007852 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007846:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	68fa      	ldr	r2, [r7, #12]
 800784e:	4313      	orrs	r3, r2
 8007850:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	4a2f      	ldr	r2, [pc, #188]	; (8007914 <TIM_Base_SetConfig+0x114>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d02b      	beq.n	80078b2 <TIM_Base_SetConfig+0xb2>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007860:	d027      	beq.n	80078b2 <TIM_Base_SetConfig+0xb2>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	4a2c      	ldr	r2, [pc, #176]	; (8007918 <TIM_Base_SetConfig+0x118>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d023      	beq.n	80078b2 <TIM_Base_SetConfig+0xb2>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	4a2b      	ldr	r2, [pc, #172]	; (800791c <TIM_Base_SetConfig+0x11c>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d01f      	beq.n	80078b2 <TIM_Base_SetConfig+0xb2>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	4a2a      	ldr	r2, [pc, #168]	; (8007920 <TIM_Base_SetConfig+0x120>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d01b      	beq.n	80078b2 <TIM_Base_SetConfig+0xb2>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	4a29      	ldr	r2, [pc, #164]	; (8007924 <TIM_Base_SetConfig+0x124>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d017      	beq.n	80078b2 <TIM_Base_SetConfig+0xb2>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	4a28      	ldr	r2, [pc, #160]	; (8007928 <TIM_Base_SetConfig+0x128>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d013      	beq.n	80078b2 <TIM_Base_SetConfig+0xb2>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	4a27      	ldr	r2, [pc, #156]	; (800792c <TIM_Base_SetConfig+0x12c>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d00f      	beq.n	80078b2 <TIM_Base_SetConfig+0xb2>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	4a26      	ldr	r2, [pc, #152]	; (8007930 <TIM_Base_SetConfig+0x130>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d00b      	beq.n	80078b2 <TIM_Base_SetConfig+0xb2>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4a25      	ldr	r2, [pc, #148]	; (8007934 <TIM_Base_SetConfig+0x134>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d007      	beq.n	80078b2 <TIM_Base_SetConfig+0xb2>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	4a24      	ldr	r2, [pc, #144]	; (8007938 <TIM_Base_SetConfig+0x138>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d003      	beq.n	80078b2 <TIM_Base_SetConfig+0xb2>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	4a23      	ldr	r2, [pc, #140]	; (800793c <TIM_Base_SetConfig+0x13c>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d108      	bne.n	80078c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	68db      	ldr	r3, [r3, #12]
 80078be:	68fa      	ldr	r2, [r7, #12]
 80078c0:	4313      	orrs	r3, r2
 80078c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	695b      	ldr	r3, [r3, #20]
 80078ce:	4313      	orrs	r3, r2
 80078d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	68fa      	ldr	r2, [r7, #12]
 80078d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	689a      	ldr	r2, [r3, #8]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	4a0a      	ldr	r2, [pc, #40]	; (8007914 <TIM_Base_SetConfig+0x114>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d003      	beq.n	80078f8 <TIM_Base_SetConfig+0xf8>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4a0c      	ldr	r2, [pc, #48]	; (8007924 <TIM_Base_SetConfig+0x124>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d103      	bne.n	8007900 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	691a      	ldr	r2, [r3, #16]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2201      	movs	r2, #1
 8007904:	615a      	str	r2, [r3, #20]
}
 8007906:	bf00      	nop
 8007908:	3714      	adds	r7, #20
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr
 8007912:	bf00      	nop
 8007914:	40010000 	.word	0x40010000
 8007918:	40000400 	.word	0x40000400
 800791c:	40000800 	.word	0x40000800
 8007920:	40000c00 	.word	0x40000c00
 8007924:	40010400 	.word	0x40010400
 8007928:	40014000 	.word	0x40014000
 800792c:	40014400 	.word	0x40014400
 8007930:	40014800 	.word	0x40014800
 8007934:	40001800 	.word	0x40001800
 8007938:	40001c00 	.word	0x40001c00
 800793c:	40002000 	.word	0x40002000

08007940 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007940:	b480      	push	{r7}
 8007942:	b085      	sub	sp, #20
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007950:	2b01      	cmp	r3, #1
 8007952:	d101      	bne.n	8007958 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007954:	2302      	movs	r3, #2
 8007956:	e045      	b.n	80079e4 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2201      	movs	r2, #1
 800795c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2202      	movs	r2, #2
 8007964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a1c      	ldr	r2, [pc, #112]	; (80079f0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d004      	beq.n	800798c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a1b      	ldr	r2, [pc, #108]	; (80079f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d108      	bne.n	800799e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007992:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	68fa      	ldr	r2, [r7, #12]
 800799a:	4313      	orrs	r3, r2
 800799c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	68fa      	ldr	r2, [r7, #12]
 80079ac:	4313      	orrs	r3, r2
 80079ae:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079b6:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	68ba      	ldr	r2, [r7, #8]
 80079be:	4313      	orrs	r3, r2
 80079c0:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	68fa      	ldr	r2, [r7, #12]
 80079c8:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	68ba      	ldr	r2, [r7, #8]
 80079d0:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2201      	movs	r2, #1
 80079d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2200      	movs	r2, #0
 80079de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80079e2:	2300      	movs	r3, #0
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3714      	adds	r7, #20
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr
 80079f0:	40010000 	.word	0x40010000
 80079f4:	40010400 	.word	0x40010400

080079f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b083      	sub	sp, #12
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a00:	bf00      	nop
 8007a02:	370c      	adds	r7, #12
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr

08007a0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b083      	sub	sp, #12
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a14:	bf00      	nop
 8007a16:	370c      	adds	r7, #12
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr

08007a20 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b083      	sub	sp, #12
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007a28:	bf00      	nop
 8007a2a:	370c      	adds	r7, #12
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr

08007a34 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b085      	sub	sp, #20
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8007a42:	2300      	movs	r3, #0
 8007a44:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d027      	beq.n	8007a9e <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007a54:	68fa      	ldr	r2, [r7, #12]
 8007a56:	4b2f      	ldr	r3, [pc, #188]	; (8007b14 <FMC_SDRAM_Init+0xe0>)
 8007a58:	4013      	ands	r3, r2
 8007a5a:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007a64:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8007a6a:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8007a70:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8007a76:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8007a7c:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8007a82:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8007a88:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8007a8e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007a90:	68fa      	ldr	r2, [r7, #12]
 8007a92:	4313      	orrs	r3, r2
 8007a94:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	601a      	str	r2, [r3, #0]
 8007a9c:	e032      	b.n	8007b04 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007aaa:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007ab4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8007aba:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007abc:	68fa      	ldr	r2, [r7, #12]
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007ac8:	68ba      	ldr	r2, [r7, #8]
 8007aca:	4b12      	ldr	r3, [pc, #72]	; (8007b14 <FMC_SDRAM_Init+0xe0>)
 8007acc:	4013      	ands	r3, r2
 8007ace:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007ad8:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8007ade:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8007ae4:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8007aea:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8007af0:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007af2:	68ba      	ldr	r2, [r7, #8]
 8007af4:	4313      	orrs	r3, r2
 8007af6:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	68fa      	ldr	r2, [r7, #12]
 8007afc:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	68ba      	ldr	r2, [r7, #8]
 8007b02:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8007b04:	2300      	movs	r3, #0
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3714      	adds	r7, #20
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr
 8007b12:	bf00      	nop
 8007b14:	ffff8000 	.word	0xffff8000

08007b18 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b087      	sub	sp, #28
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	60b9      	str	r1, [r7, #8]
 8007b22:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8007b24:	2300      	movs	r3, #0
 8007b26:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d02e      	beq.n	8007b90 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007b3e:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	3b01      	subs	r3, #1
 8007b4c:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007b4e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	3b01      	subs	r3, #1
 8007b56:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8007b58:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	68db      	ldr	r3, [r3, #12]
 8007b5e:	3b01      	subs	r3, #1
 8007b60:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8007b62:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	691b      	ldr	r3, [r3, #16]
 8007b68:	3b01      	subs	r3, #1
 8007b6a:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8007b6c:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	695b      	ldr	r3, [r3, #20]
 8007b72:	3b01      	subs	r3, #1
 8007b74:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8007b76:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	699b      	ldr	r3, [r3, #24]
 8007b7c:	3b01      	subs	r3, #1
 8007b7e:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007b80:	4313      	orrs	r3, r2
 8007b82:	697a      	ldr	r2, [r7, #20]
 8007b84:	4313      	orrs	r3, r2
 8007b86:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	697a      	ldr	r2, [r7, #20]
 8007b8c:	609a      	str	r2, [r3, #8]
 8007b8e:	e039      	b.n	8007c04 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8007b96:	697a      	ldr	r2, [r7, #20]
 8007b98:	4b1e      	ldr	r3, [pc, #120]	; (8007c14 <FMC_SDRAM_Timing_Init+0xfc>)
 8007b9a:	4013      	ands	r3, r2
 8007b9c:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	68db      	ldr	r3, [r3, #12]
 8007ba2:	3b01      	subs	r3, #1
 8007ba4:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	695b      	ldr	r3, [r3, #20]
 8007baa:	3b01      	subs	r3, #1
 8007bac:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	697a      	ldr	r2, [r7, #20]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	68db      	ldr	r3, [r3, #12]
 8007bba:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007bc2:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	3b01      	subs	r3, #1
 8007bd0:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007bd2:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	3b01      	subs	r3, #1
 8007bda:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8007bdc:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	691b      	ldr	r3, [r3, #16]
 8007be2:	3b01      	subs	r3, #1
 8007be4:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8007be6:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	699b      	ldr	r3, [r3, #24]
 8007bec:	3b01      	subs	r3, #1
 8007bee:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	693a      	ldr	r2, [r7, #16]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	697a      	ldr	r2, [r7, #20]
 8007bfc:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	693a      	ldr	r2, [r7, #16]
 8007c02:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8007c04:	2300      	movs	r3, #0
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	371c      	adds	r7, #28
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr
 8007c12:	bf00      	nop
 8007c14:	ff0f0fff 	.word	0xff0f0fff

08007c18 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b087      	sub	sp, #28
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	60f8      	str	r0, [r7, #12]
 8007c20:	60b9      	str	r1, [r7, #8]
 8007c22:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8007c24:	2300      	movs	r3, #0
 8007c26:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007c30:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	689b      	ldr	r3, [r3, #8]
 8007c36:	3b01      	subs	r3, #1
 8007c38:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8007c3a:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	68db      	ldr	r3, [r3, #12]
 8007c40:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007c42:	4313      	orrs	r3, r2
 8007c44:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 8007c46:	697a      	ldr	r2, [r7, #20]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8007c4c:	2300      	movs	r3, #0
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	371c      	adds	r7, #28
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr

08007c5a <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8007c5a:	b480      	push	{r7}
 8007c5c:	b083      	sub	sp, #12
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
 8007c62:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	695a      	ldr	r2, [r3, #20]
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	005b      	lsls	r3, r3, #1
 8007c6c:	431a      	orrs	r2, r3
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8007c72:	2300      	movs	r3, #0
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	370c      	adds	r7, #12
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr

08007c80 <drawGrid>:

#include "game.h"
#include "stm32f769i_discovery_lcd.h"

void drawGrid(void)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b082      	sub	sp, #8
 8007c84:	af00      	add	r7, sp, #0
	uint8_t offset;

	// Draw the background
	BSP_LCD_SetTextColor(BOARD_COLOR);
 8007c86:	4823      	ldr	r0, [pc, #140]	; (8007d14 <drawGrid+0x94>)
 8007c88:	f7f9 fc04 	bl	8001494 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 0, GRID_SIZE, GRID_SIZE);
 8007c8c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8007c90:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007c94:	2100      	movs	r1, #0
 8007c96:	2000      	movs	r0, #0
 8007c98:	f7f9 febc 	bl	8001a14 <BSP_LCD_FillRect>

	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8007c9c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8007ca0:	f7f9 fbf8 	bl	8001494 <BSP_LCD_SetTextColor>

	for(uint8_t i=0; i<=BOARD_SIZE; i++)
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	71bb      	strb	r3, [r7, #6]
 8007ca8:	e02c      	b.n	8007d04 <drawGrid+0x84>
	{

		// for i = 0 the offset would be -2 which breaks the lcd, so we need a special case to set it to 0 instead
		if(i == 0)
 8007caa:	79bb      	ldrb	r3, [r7, #6]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d102      	bne.n	8007cb6 <drawGrid+0x36>
		{
			offset = 0;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	71fb      	strb	r3, [r7, #7]
 8007cb4:	e001      	b.n	8007cba <drawGrid+0x3a>
		}
		else
		{
			offset = LINE_WIDTH/2;
 8007cb6:	2302      	movs	r3, #2
 8007cb8:	71fb      	strb	r3, [r7, #7]
		}

		// Horizontal
		BSP_LCD_FillRect(0, (i * SQUARE_SIZE)-offset, GRID_SIZE, LINE_WIDTH);
 8007cba:	79bb      	ldrb	r3, [r7, #6]
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	0112      	lsls	r2, r2, #4
 8007cc2:	1ad3      	subs	r3, r2, r3
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	b29a      	uxth	r2, r3
 8007cc8:	79fb      	ldrb	r3, [r7, #7]
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	1ad3      	subs	r3, r2, r3
 8007cce:	b299      	uxth	r1, r3
 8007cd0:	2304      	movs	r3, #4
 8007cd2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007cd6:	2000      	movs	r0, #0
 8007cd8:	f7f9 fe9c 	bl	8001a14 <BSP_LCD_FillRect>

		// Vertical
		BSP_LCD_FillRect((i * SQUARE_SIZE)-offset, 0, LINE_WIDTH, GRID_SIZE);
 8007cdc:	79bb      	ldrb	r3, [r7, #6]
 8007cde:	b29b      	uxth	r3, r3
 8007ce0:	461a      	mov	r2, r3
 8007ce2:	0112      	lsls	r2, r2, #4
 8007ce4:	1ad3      	subs	r3, r2, r3
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	b29a      	uxth	r2, r3
 8007cea:	79fb      	ldrb	r3, [r7, #7]
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	1ad3      	subs	r3, r2, r3
 8007cf0:	b298      	uxth	r0, r3
 8007cf2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8007cf6:	2204      	movs	r2, #4
 8007cf8:	2100      	movs	r1, #0
 8007cfa:	f7f9 fe8b 	bl	8001a14 <BSP_LCD_FillRect>
	for(uint8_t i=0; i<=BOARD_SIZE; i++)
 8007cfe:	79bb      	ldrb	r3, [r7, #6]
 8007d00:	3301      	adds	r3, #1
 8007d02:	71bb      	strb	r3, [r7, #6]
 8007d04:	79bb      	ldrb	r3, [r7, #6]
 8007d06:	2b08      	cmp	r3, #8
 8007d08:	d9cf      	bls.n	8007caa <drawGrid+0x2a>
	}
}
 8007d0a:	bf00      	nop
 8007d0c:	3708      	adds	r7, #8
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	bf00      	nop
 8007d14:	ff4c9572 	.word	0xff4c9572

08007d18 <gameTitle>:

void gameTitle(void)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	af00      	add	r7, sp, #0

  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8007d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d20:	f7f9 fc1a 	bl	8001558 <BSP_LCD_Clear>

  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8007d24:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8007d28:	f7f9 fbb4 	bl	8001494 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(480, 0, 320, 50);
 8007d2c:	2332      	movs	r3, #50	; 0x32
 8007d2e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007d32:	2100      	movs	r1, #0
 8007d34:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8007d38:	f7f9 fe6c 	bl	8001a14 <BSP_LCD_FillRect>
  BSP_LCD_SetFont(&Font24);
 8007d3c:	4809      	ldr	r0, [pc, #36]	; (8007d64 <gameTitle+0x4c>)
 8007d3e:	f7f9 fbdb 	bl	80014f8 <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8007d42:	f04f 30ff 	mov.w	r0, #4294967295
 8007d46:	f7f9 fba5 	bl	8001494 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8007d4a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8007d4e:	f7f9 fbb9 	bl	80014c4 <BSP_LCD_SetBackColor>
  BSP_LCD_DisplayStringAt(100, 10, (uint8_t *)"REVERSI", RIGHT_MODE); //función quiere uint8_t
 8007d52:	2302      	movs	r3, #2
 8007d54:	4a04      	ldr	r2, [pc, #16]	; (8007d68 <gameTitle+0x50>)
 8007d56:	210a      	movs	r1, #10
 8007d58:	2064      	movs	r0, #100	; 0x64
 8007d5a:	f7f9 fc69 	bl	8001630 <BSP_LCD_DisplayStringAt>

}
 8007d5e:	bf00      	nop
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	bf00      	nop
 8007d64:	20000028 	.word	0x20000028
 8007d68:	0800aa94 	.word	0x0800aa94

08007d6c <init_game>:

void init_game(void)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b082      	sub	sp, #8
 8007d70:	af00      	add	r7, sp, #0
	gameTitle();
 8007d72:	f7ff ffd1 	bl	8007d18 <gameTitle>
	drawGrid();
 8007d76:	f7ff ff83 	bl	8007c80 <drawGrid>

    // Clear the board
    for(uint8_t i=0; i<BOARD_SIZE; i++)
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	71fb      	strb	r3, [r7, #7]
 8007d7e:	e013      	b.n	8007da8 <init_game+0x3c>
    {
        for(uint8_t j=0; j<BOARD_SIZE; j++)
 8007d80:	2300      	movs	r3, #0
 8007d82:	71bb      	strb	r3, [r7, #6]
 8007d84:	e00a      	b.n	8007d9c <init_game+0x30>
        {
             mat[i][j] = 0;
 8007d86:	79fa      	ldrb	r2, [r7, #7]
 8007d88:	79bb      	ldrb	r3, [r7, #6]
 8007d8a:	4914      	ldr	r1, [pc, #80]	; (8007ddc <init_game+0x70>)
 8007d8c:	00d2      	lsls	r2, r2, #3
 8007d8e:	440a      	add	r2, r1
 8007d90:	4413      	add	r3, r2
 8007d92:	2200      	movs	r2, #0
 8007d94:	701a      	strb	r2, [r3, #0]
        for(uint8_t j=0; j<BOARD_SIZE; j++)
 8007d96:	79bb      	ldrb	r3, [r7, #6]
 8007d98:	3301      	adds	r3, #1
 8007d9a:	71bb      	strb	r3, [r7, #6]
 8007d9c:	79bb      	ldrb	r3, [r7, #6]
 8007d9e:	2b07      	cmp	r3, #7
 8007da0:	d9f1      	bls.n	8007d86 <init_game+0x1a>
    for(uint8_t i=0; i<BOARD_SIZE; i++)
 8007da2:	79fb      	ldrb	r3, [r7, #7]
 8007da4:	3301      	adds	r3, #1
 8007da6:	71fb      	strb	r3, [r7, #7]
 8007da8:	79fb      	ldrb	r3, [r7, #7]
 8007daa:	2b07      	cmp	r3, #7
 8007dac:	d9e8      	bls.n	8007d80 <init_game+0x14>
        }
    }

    mat[3][3] = 1;
 8007dae:	4b0b      	ldr	r3, [pc, #44]	; (8007ddc <init_game+0x70>)
 8007db0:	2201      	movs	r2, #1
 8007db2:	76da      	strb	r2, [r3, #27]
    mat[4][4] = 1;
 8007db4:	4b09      	ldr	r3, [pc, #36]	; (8007ddc <init_game+0x70>)
 8007db6:	2201      	movs	r2, #1
 8007db8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    mat[4][3] = 2;
 8007dbc:	4b07      	ldr	r3, [pc, #28]	; (8007ddc <init_game+0x70>)
 8007dbe:	2202      	movs	r2, #2
 8007dc0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    mat[3][4] = 2;
 8007dc4:	4b05      	ldr	r3, [pc, #20]	; (8007ddc <init_game+0x70>)
 8007dc6:	2202      	movs	r2, #2
 8007dc8:	771a      	strb	r2, [r3, #28]

	printInfo();
 8007dca:	f000 f867 	bl	8007e9c <printInfo>
    printBoard();
 8007dce:	f000 f807 	bl	8007de0 <printBoard>
}
 8007dd2:	bf00      	nop
 8007dd4:	3708      	adds	r7, #8
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	bf00      	nop
 8007ddc:	20000444 	.word	0x20000444

08007de0 <printBoard>:

//imprime el tablero
void printBoard(void)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
	uint8_t i, j;
	uint8_t value;

    for (i = 0; i < BOARD_SIZE; i++)
 8007de6:	2300      	movs	r3, #0
 8007de8:	71fb      	strb	r3, [r7, #7]
 8007dea:	e04e      	b.n	8007e8a <printBoard+0xaa>
    {
        for (j = 0; j < BOARD_SIZE; j++)
 8007dec:	2300      	movs	r3, #0
 8007dee:	71bb      	strb	r3, [r7, #6]
 8007df0:	e045      	b.n	8007e7e <printBoard+0x9e>
        {
            value = mat[i][j]; //para leer que está almacenado en la matriz
 8007df2:	79fa      	ldrb	r2, [r7, #7]
 8007df4:	79bb      	ldrb	r3, [r7, #6]
 8007df6:	4928      	ldr	r1, [pc, #160]	; (8007e98 <printBoard+0xb8>)
 8007df8:	00d2      	lsls	r2, r2, #3
 8007dfa:	440a      	add	r2, r1
 8007dfc:	4413      	add	r3, r2
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	717b      	strb	r3, [r7, #5]

            if (value == 1)
 8007e02:	797b      	ldrb	r3, [r7, #5]
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d11a      	bne.n	8007e3e <printBoard+0x5e>
            {
            	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8007e08:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8007e0c:	f7f9 fb42 	bl	8001494 <BSP_LCD_SetTextColor>
            	BSP_LCD_FillCircle((j*SQUARE_SIZE)+HALF_SQUARE_SIZE, (i*SQUARE_SIZE)+HALF_SQUARE_SIZE, PIECE_RADIUS);
 8007e10:	79bb      	ldrb	r3, [r7, #6]
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	461a      	mov	r2, r3
 8007e16:	0112      	lsls	r2, r2, #4
 8007e18:	1ad3      	subs	r3, r2, r3
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	b29b      	uxth	r3, r3
 8007e1e:	331e      	adds	r3, #30
 8007e20:	b298      	uxth	r0, r3
 8007e22:	79fb      	ldrb	r3, [r7, #7]
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	461a      	mov	r2, r3
 8007e28:	0112      	lsls	r2, r2, #4
 8007e2a:	1ad3      	subs	r3, r2, r3
 8007e2c:	009b      	lsls	r3, r3, #2
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	331e      	adds	r3, #30
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	2219      	movs	r2, #25
 8007e36:	4619      	mov	r1, r3
 8007e38:	f7f9 fe46 	bl	8001ac8 <BSP_LCD_FillCircle>
 8007e3c:	e01c      	b.n	8007e78 <printBoard+0x98>
            }
            else if (value == 2)
 8007e3e:	797b      	ldrb	r3, [r7, #5]
 8007e40:	2b02      	cmp	r3, #2
 8007e42:	d119      	bne.n	8007e78 <printBoard+0x98>
            {
        		 BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8007e44:	f04f 30ff 	mov.w	r0, #4294967295
 8007e48:	f7f9 fb24 	bl	8001494 <BSP_LCD_SetTextColor>
             	 BSP_LCD_FillCircle((j*SQUARE_SIZE)+HALF_SQUARE_SIZE, (i*SQUARE_SIZE)+HALF_SQUARE_SIZE, PIECE_RADIUS);
 8007e4c:	79bb      	ldrb	r3, [r7, #6]
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	461a      	mov	r2, r3
 8007e52:	0112      	lsls	r2, r2, #4
 8007e54:	1ad3      	subs	r3, r2, r3
 8007e56:	009b      	lsls	r3, r3, #2
 8007e58:	b29b      	uxth	r3, r3
 8007e5a:	331e      	adds	r3, #30
 8007e5c:	b298      	uxth	r0, r3
 8007e5e:	79fb      	ldrb	r3, [r7, #7]
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	461a      	mov	r2, r3
 8007e64:	0112      	lsls	r2, r2, #4
 8007e66:	1ad3      	subs	r3, r2, r3
 8007e68:	009b      	lsls	r3, r3, #2
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	331e      	adds	r3, #30
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	2219      	movs	r2, #25
 8007e72:	4619      	mov	r1, r3
 8007e74:	f7f9 fe28 	bl	8001ac8 <BSP_LCD_FillCircle>
        for (j = 0; j < BOARD_SIZE; j++)
 8007e78:	79bb      	ldrb	r3, [r7, #6]
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	71bb      	strb	r3, [r7, #6]
 8007e7e:	79bb      	ldrb	r3, [r7, #6]
 8007e80:	2b07      	cmp	r3, #7
 8007e82:	d9b6      	bls.n	8007df2 <printBoard+0x12>
    for (i = 0; i < BOARD_SIZE; i++)
 8007e84:	79fb      	ldrb	r3, [r7, #7]
 8007e86:	3301      	adds	r3, #1
 8007e88:	71fb      	strb	r3, [r7, #7]
 8007e8a:	79fb      	ldrb	r3, [r7, #7]
 8007e8c:	2b07      	cmp	r3, #7
 8007e8e:	d9ad      	bls.n	8007dec <printBoard+0xc>
            }
        }
    }
}
 8007e90:	bf00      	nop
 8007e92:	3708      	adds	r7, #8
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}
 8007e98:	20000444 	.word	0x20000444

08007e9c <printInfo>:

void printInfo(void)
{
 8007e9c:	b5b0      	push	{r4, r5, r7, lr}
 8007e9e:	b08c      	sub	sp, #48	; 0x30
 8007ea0:	af00      	add	r7, sp, #0
	uint8_t player1Counter, player2Counter;
	char pieces[20];
	char information[20];

    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8007ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ea6:	f7f9 faf5 	bl	8001494 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(485, LINE(5), BSP_LCD_GetXSize()-485, 350);
 8007eaa:	f7f9 fb3f 	bl	800152c <BSP_LCD_GetFont>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	88db      	ldrh	r3, [r3, #6]
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	0092      	lsls	r2, r2, #2
 8007eb6:	4413      	add	r3, r2
 8007eb8:	b29c      	uxth	r4, r3
 8007eba:	f7f9 fa73 	bl	80013a4 <BSP_LCD_GetXSize>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	f2a3 13e5 	subw	r3, r3, #485	; 0x1e5
 8007ec6:	b29a      	uxth	r2, r3
 8007ec8:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8007ecc:	4621      	mov	r1, r4
 8007ece:	f240 10e5 	movw	r0, #485	; 0x1e5
 8007ed2:	f7f9 fd9f 	bl	8001a14 <BSP_LCD_FillRect>

    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8007ed6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8007eda:	f7f9 fadb 	bl	8001494 <BSP_LCD_SetTextColor>
    BSP_LCD_DrawHLine(480, LINE(5), 420);
 8007ede:	f7f9 fb25 	bl	800152c <BSP_LCD_GetFont>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	88db      	ldrh	r3, [r3, #6]
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	0092      	lsls	r2, r2, #2
 8007eea:	4413      	add	r3, r2
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8007ef2:	4619      	mov	r1, r3
 8007ef4:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8007ef8:	f7f9 fc5e 	bl	80017b8 <BSP_LCD_DrawHLine>

    countPieces(&player1Counter, &player2Counter);
 8007efc:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 8007f00:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8007f04:	4611      	mov	r1, r2
 8007f06:	4618      	mov	r0, r3
 8007f08:	f000 f854 	bl	8007fb4 <countPieces>

	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8007f0c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8007f10:	f7f9 fac0 	bl	8001494 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8007f14:	f04f 30ff 	mov.w	r0, #4294967295
 8007f18:	f7f9 fad4 	bl	80014c4 <BSP_LCD_SetBackColor>

	sprintf(information, "GAME INFORMATION");
 8007f1c:	1d3b      	adds	r3, r7, #4
 8007f1e:	4a22      	ldr	r2, [pc, #136]	; (8007fa8 <printInfo+0x10c>)
 8007f20:	461c      	mov	r4, r3
 8007f22:	4615      	mov	r5, r2
 8007f24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f28:	682b      	ldr	r3, [r5, #0]
 8007f2a:	7023      	strb	r3, [r4, #0]
	BSP_LCD_DisplayStringAt(20, LINE(6), (uint8_t*) information, RIGHT_MODE);
 8007f2c:	f7f9 fafe 	bl	800152c <BSP_LCD_GetFont>
 8007f30:	4603      	mov	r3, r0
 8007f32:	88db      	ldrh	r3, [r3, #6]
 8007f34:	461a      	mov	r2, r3
 8007f36:	0052      	lsls	r2, r2, #1
 8007f38:	4413      	add	r3, r2
 8007f3a:	005b      	lsls	r3, r3, #1
 8007f3c:	b299      	uxth	r1, r3
 8007f3e:	1d3a      	adds	r2, r7, #4
 8007f40:	2302      	movs	r3, #2
 8007f42:	2014      	movs	r0, #20
 8007f44:	f7f9 fb74 	bl	8001630 <BSP_LCD_DisplayStringAt>

	sprintf(pieces, "Pieces Ply. 1 = %.2d", player1Counter);
 8007f48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	f107 0318 	add.w	r3, r7, #24
 8007f52:	4916      	ldr	r1, [pc, #88]	; (8007fac <printInfo+0x110>)
 8007f54:	4618      	mov	r0, r3
 8007f56:	f002 f98b 	bl	800a270 <siprintf>
	BSP_LCD_DisplayStringAt(5, LINE(8), (uint8_t*) pieces, RIGHT_MODE);
 8007f5a:	f7f9 fae7 	bl	800152c <BSP_LCD_GetFont>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	88db      	ldrh	r3, [r3, #6]
 8007f62:	00db      	lsls	r3, r3, #3
 8007f64:	b299      	uxth	r1, r3
 8007f66:	f107 0218 	add.w	r2, r7, #24
 8007f6a:	2302      	movs	r3, #2
 8007f6c:	2005      	movs	r0, #5
 8007f6e:	f7f9 fb5f 	bl	8001630 <BSP_LCD_DisplayStringAt>

	sprintf(pieces, "Pieces Ply. 2 = %.2d", player2Counter);
 8007f72:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007f76:	461a      	mov	r2, r3
 8007f78:	f107 0318 	add.w	r3, r7, #24
 8007f7c:	490c      	ldr	r1, [pc, #48]	; (8007fb0 <printInfo+0x114>)
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f002 f976 	bl	800a270 <siprintf>
	BSP_LCD_DisplayStringAt(5, LINE(9), (uint8_t*) pieces, RIGHT_MODE);
 8007f84:	f7f9 fad2 	bl	800152c <BSP_LCD_GetFont>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	88db      	ldrh	r3, [r3, #6]
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	00d2      	lsls	r2, r2, #3
 8007f90:	4413      	add	r3, r2
 8007f92:	b299      	uxth	r1, r3
 8007f94:	f107 0218 	add.w	r2, r7, #24
 8007f98:	2302      	movs	r3, #2
 8007f9a:	2005      	movs	r0, #5
 8007f9c:	f7f9 fb48 	bl	8001630 <BSP_LCD_DisplayStringAt>

}
 8007fa0:	bf00      	nop
 8007fa2:	3730      	adds	r7, #48	; 0x30
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bdb0      	pop	{r4, r5, r7, pc}
 8007fa8:	0800aa9c 	.word	0x0800aa9c
 8007fac:	0800aab0 	.word	0x0800aab0
 8007fb0:	0800aac8 	.word	0x0800aac8

08007fb4 <countPieces>:

//hace el recuento despues de cada movimiento de las fichas de cada jugador
void countPieces (uint8_t *player1Counter, uint8_t *player2Counter)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b085      	sub	sp, #20
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
    *player1Counter=0;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	701a      	strb	r2, [r3, #0]
    *player2Counter=0;
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	701a      	strb	r2, [r3, #0]

    for(uint8_t i=0; i<8; i++)
 8007fca:	2300      	movs	r3, #0
 8007fcc:	73fb      	strb	r3, [r7, #15]
 8007fce:	e02a      	b.n	8008026 <countPieces+0x72>
    {
        for(uint8_t j=0; j<8; j++)
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	73bb      	strb	r3, [r7, #14]
 8007fd4:	e021      	b.n	800801a <countPieces+0x66>
        {
            if(mat[i][j] == 1)
 8007fd6:	7bfa      	ldrb	r2, [r7, #15]
 8007fd8:	7bbb      	ldrb	r3, [r7, #14]
 8007fda:	4917      	ldr	r1, [pc, #92]	; (8008038 <countPieces+0x84>)
 8007fdc:	00d2      	lsls	r2, r2, #3
 8007fde:	440a      	add	r2, r1
 8007fe0:	4413      	add	r3, r2
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	d106      	bne.n	8007ff6 <countPieces+0x42>
            {
                (*player1Counter)++;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	3301      	adds	r3, #1
 8007fee:	b2da      	uxtb	r2, r3
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	701a      	strb	r2, [r3, #0]
 8007ff4:	e00e      	b.n	8008014 <countPieces+0x60>
            }
            else if(mat[i][j] == 2)
 8007ff6:	7bfa      	ldrb	r2, [r7, #15]
 8007ff8:	7bbb      	ldrb	r3, [r7, #14]
 8007ffa:	490f      	ldr	r1, [pc, #60]	; (8008038 <countPieces+0x84>)
 8007ffc:	00d2      	lsls	r2, r2, #3
 8007ffe:	440a      	add	r2, r1
 8008000:	4413      	add	r3, r2
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	2b02      	cmp	r3, #2
 8008006:	d105      	bne.n	8008014 <countPieces+0x60>
            {
                (*player2Counter)++;
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	3301      	adds	r3, #1
 800800e:	b2da      	uxtb	r2, r3
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	701a      	strb	r2, [r3, #0]
        for(uint8_t j=0; j<8; j++)
 8008014:	7bbb      	ldrb	r3, [r7, #14]
 8008016:	3301      	adds	r3, #1
 8008018:	73bb      	strb	r3, [r7, #14]
 800801a:	7bbb      	ldrb	r3, [r7, #14]
 800801c:	2b07      	cmp	r3, #7
 800801e:	d9da      	bls.n	8007fd6 <countPieces+0x22>
    for(uint8_t i=0; i<8; i++)
 8008020:	7bfb      	ldrb	r3, [r7, #15]
 8008022:	3301      	adds	r3, #1
 8008024:	73fb      	strb	r3, [r7, #15]
 8008026:	7bfb      	ldrb	r3, [r7, #15]
 8008028:	2b07      	cmp	r3, #7
 800802a:	d9d1      	bls.n	8007fd0 <countPieces+0x1c>
            }
        }
    }
}
 800802c:	bf00      	nop
 800802e:	3714      	adds	r7, #20
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr
 8008038:	20000444 	.word	0x20000444

0800803c <flip>:

//cambia la pieza del jugador opuesto
//asumese que i e j ya son contados desde 0 hasta 7 en lugar de 1 a 8
void flip(uint8_t player, uint8_t i, uint8_t j)
{
 800803c:	b480      	push	{r7}
 800803e:	b089      	sub	sp, #36	; 0x24
 8008040:	af00      	add	r7, sp, #0
 8008042:	4603      	mov	r3, r0
 8008044:	71fb      	strb	r3, [r7, #7]
 8008046:	460b      	mov	r3, r1
 8008048:	71bb      	strb	r3, [r7, #6]
 800804a:	4613      	mov	r3, r2
 800804c:	717b      	strb	r3, [r7, #5]
    uint8_t oppositePlayer;

    if(player==1)
 800804e:	79fb      	ldrb	r3, [r7, #7]
 8008050:	2b01      	cmp	r3, #1
 8008052:	d102      	bne.n	800805a <flip+0x1e>
    {
        oppositePlayer=2;
 8008054:	2302      	movs	r3, #2
 8008056:	77fb      	strb	r3, [r7, #31]
 8008058:	e001      	b.n	800805e <flip+0x22>
    }
    else
    {
        oppositePlayer=1;
 800805a:	2301      	movs	r3, #1
 800805c:	77fb      	strb	r3, [r7, #31]
     *  L (i,j) R
     * BL   B   BR
     */

    // top left
    if(i > 0 && j > 0) // we cant check outside of the matrix because (-1, -1) doesnt exist
 800805e:	79bb      	ldrb	r3, [r7, #6]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d05b      	beq.n	800811c <flip+0xe0>
 8008064:	797b      	ldrb	r3, [r7, #5]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d058      	beq.n	800811c <flip+0xe0>
    {
        if(mat[i-1][j-1] == oppositePlayer)
 800806a:	79bb      	ldrb	r3, [r7, #6]
 800806c:	1e5a      	subs	r2, r3, #1
 800806e:	797b      	ldrb	r3, [r7, #5]
 8008070:	3b01      	subs	r3, #1
 8008072:	49b0      	ldr	r1, [pc, #704]	; (8008334 <flip+0x2f8>)
 8008074:	00d2      	lsls	r2, r2, #3
 8008076:	440a      	add	r2, r1
 8008078:	4413      	add	r3, r2
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	7ffa      	ldrb	r2, [r7, #31]
 800807e:	429a      	cmp	r2, r3
 8008080:	d14c      	bne.n	800811c <flip+0xe0>
        {
            // posicao adjacent
        	int8_t startI = i - 1;
 8008082:	79bb      	ldrb	r3, [r7, #6]
 8008084:	3b01      	subs	r3, #1
 8008086:	b2db      	uxtb	r3, r3
 8008088:	77bb      	strb	r3, [r7, #30]
            int8_t startJ = j - 1;
 800808a:	797b      	ldrb	r3, [r7, #5]
 800808c:	3b01      	subs	r3, #1
 800808e:	b2db      	uxtb	r3, r3
 8008090:	777b      	strb	r3, [r7, #29]

            while (startI >= 0 && startJ >= 0)//para no salir fuera de la raiz
 8008092:	e039      	b.n	8008108 <flip+0xcc>
            {
                if(mat [startI][startJ]==player)
 8008094:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8008098:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800809c:	49a5      	ldr	r1, [pc, #660]	; (8008334 <flip+0x2f8>)
 800809e:	00d2      	lsls	r2, r2, #3
 80080a0:	440a      	add	r2, r1
 80080a2:	4413      	add	r3, r2
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	79fa      	ldrb	r2, [r7, #7]
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d121      	bne.n	80080f0 <flip+0xb4>
                {
                    while(startI != i && startJ!=j)
 80080ac:	e015      	b.n	80080da <flip+0x9e>
                    {
                        mat[startI][startJ] = player;
 80080ae:	f997 201e 	ldrsb.w	r2, [r7, #30]
 80080b2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80080b6:	499f      	ldr	r1, [pc, #636]	; (8008334 <flip+0x2f8>)
 80080b8:	00d2      	lsls	r2, r2, #3
 80080ba:	440a      	add	r2, r1
 80080bc:	4413      	add	r3, r2
 80080be:	79fa      	ldrb	r2, [r7, #7]
 80080c0:	701a      	strb	r2, [r3, #0]

                        startI++;
 80080c2:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	3301      	adds	r3, #1
 80080ca:	b2db      	uxtb	r3, r3
 80080cc:	77bb      	strb	r3, [r7, #30]
                        startJ++;
 80080ce:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80080d2:	b2db      	uxtb	r3, r3
 80080d4:	3301      	adds	r3, #1
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	777b      	strb	r3, [r7, #29]
                    while(startI != i && startJ!=j)
 80080da:	f997 201e 	ldrsb.w	r2, [r7, #30]
 80080de:	79bb      	ldrb	r3, [r7, #6]
 80080e0:	429a      	cmp	r2, r3
 80080e2:	d01a      	beq.n	800811a <flip+0xde>
 80080e4:	f997 201d 	ldrsb.w	r2, [r7, #29]
 80080e8:	797b      	ldrb	r3, [r7, #5]
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d1df      	bne.n	80080ae <flip+0x72>
                    }
                    break; // sale del while porque ya sabemos que esta posicion es valida
 80080ee:	e014      	b.n	800811a <flip+0xde>
                }

                startI--;
 80080f0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80080f4:	b2db      	uxtb	r3, r3
 80080f6:	3b01      	subs	r3, #1
 80080f8:	b2db      	uxtb	r3, r3
 80080fa:	77bb      	strb	r3, [r7, #30]
                startJ--;
 80080fc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008100:	b2db      	uxtb	r3, r3
 8008102:	3b01      	subs	r3, #1
 8008104:	b2db      	uxtb	r3, r3
 8008106:	777b      	strb	r3, [r7, #29]
            while (startI >= 0 && startJ >= 0)//para no salir fuera de la raiz
 8008108:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800810c:	2b00      	cmp	r3, #0
 800810e:	db05      	blt.n	800811c <flip+0xe0>
 8008110:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008114:	2b00      	cmp	r3, #0
 8008116:	dabd      	bge.n	8008094 <flip+0x58>
 8008118:	e000      	b.n	800811c <flip+0xe0>
                    break; // sale del while porque ya sabemos que esta posicion es valida
 800811a:	bf00      	nop
            }
        }
    }

    // top
    if(i>0)
 800811c:	79bb      	ldrb	r3, [r7, #6]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d03e      	beq.n	80081a0 <flip+0x164>
    {
        if(mat[i-1][j] == oppositePlayer)
 8008122:	79bb      	ldrb	r3, [r7, #6]
 8008124:	1e5a      	subs	r2, r3, #1
 8008126:	797b      	ldrb	r3, [r7, #5]
 8008128:	4982      	ldr	r1, [pc, #520]	; (8008334 <flip+0x2f8>)
 800812a:	00d2      	lsls	r2, r2, #3
 800812c:	440a      	add	r2, r1
 800812e:	4413      	add	r3, r2
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	7ffa      	ldrb	r2, [r7, #31]
 8008134:	429a      	cmp	r2, r3
 8008136:	d133      	bne.n	80081a0 <flip+0x164>
        {
        	int8_t startI = i - 1;
 8008138:	79bb      	ldrb	r3, [r7, #6]
 800813a:	3b01      	subs	r3, #1
 800813c:	b2db      	uxtb	r3, r3
 800813e:	773b      	strb	r3, [r7, #28]
            int8_t startJ = j;
 8008140:	797b      	ldrb	r3, [r7, #5]
 8008142:	74bb      	strb	r3, [r7, #18]

            while (startI >= 0)
 8008144:	e028      	b.n	8008198 <flip+0x15c>
            {
                if(mat [startI][startJ]==player)
 8008146:	f997 201c 	ldrsb.w	r2, [r7, #28]
 800814a:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800814e:	4979      	ldr	r1, [pc, #484]	; (8008334 <flip+0x2f8>)
 8008150:	00d2      	lsls	r2, r2, #3
 8008152:	440a      	add	r2, r1
 8008154:	4413      	add	r3, r2
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	79fa      	ldrb	r2, [r7, #7]
 800815a:	429a      	cmp	r2, r3
 800815c:	d116      	bne.n	800818c <flip+0x150>
                {
                    while(startI != i)
 800815e:	e00f      	b.n	8008180 <flip+0x144>
                    {
                        mat[startI][startJ] = player;
 8008160:	f997 201c 	ldrsb.w	r2, [r7, #28]
 8008164:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8008168:	4972      	ldr	r1, [pc, #456]	; (8008334 <flip+0x2f8>)
 800816a:	00d2      	lsls	r2, r2, #3
 800816c:	440a      	add	r2, r1
 800816e:	4413      	add	r3, r2
 8008170:	79fa      	ldrb	r2, [r7, #7]
 8008172:	701a      	strb	r2, [r3, #0]

                        startI++;
 8008174:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8008178:	b2db      	uxtb	r3, r3
 800817a:	3301      	adds	r3, #1
 800817c:	b2db      	uxtb	r3, r3
 800817e:	773b      	strb	r3, [r7, #28]
                    while(startI != i)
 8008180:	f997 201c 	ldrsb.w	r2, [r7, #28]
 8008184:	79bb      	ldrb	r3, [r7, #6]
 8008186:	429a      	cmp	r2, r3
 8008188:	d1ea      	bne.n	8008160 <flip+0x124>
                    }
                     break; // sale del while porque ya sabemos que esta posicion es valida
 800818a:	e009      	b.n	80081a0 <flip+0x164>
                }
                startI--;
 800818c:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8008190:	b2db      	uxtb	r3, r3
 8008192:	3b01      	subs	r3, #1
 8008194:	b2db      	uxtb	r3, r3
 8008196:	773b      	strb	r3, [r7, #28]
            while (startI >= 0)
 8008198:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800819c:	2b00      	cmp	r3, #0
 800819e:	dad2      	bge.n	8008146 <flip+0x10a>
            }
        }
    }

    // top right
    if(i > 0 && j <7)
 80081a0:	79bb      	ldrb	r3, [r7, #6]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d05b      	beq.n	800825e <flip+0x222>
 80081a6:	797b      	ldrb	r3, [r7, #5]
 80081a8:	2b06      	cmp	r3, #6
 80081aa:	d858      	bhi.n	800825e <flip+0x222>
    {
        if(mat[i-1][j+1] == oppositePlayer)
 80081ac:	79bb      	ldrb	r3, [r7, #6]
 80081ae:	1e5a      	subs	r2, r3, #1
 80081b0:	797b      	ldrb	r3, [r7, #5]
 80081b2:	3301      	adds	r3, #1
 80081b4:	495f      	ldr	r1, [pc, #380]	; (8008334 <flip+0x2f8>)
 80081b6:	00d2      	lsls	r2, r2, #3
 80081b8:	440a      	add	r2, r1
 80081ba:	4413      	add	r3, r2
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	7ffa      	ldrb	r2, [r7, #31]
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d14c      	bne.n	800825e <flip+0x222>
        {
        	int8_t startI = i - 1;
 80081c4:	79bb      	ldrb	r3, [r7, #6]
 80081c6:	3b01      	subs	r3, #1
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	76fb      	strb	r3, [r7, #27]
            int8_t startJ = j + 1;
 80081cc:	797b      	ldrb	r3, [r7, #5]
 80081ce:	3301      	adds	r3, #1
 80081d0:	b2db      	uxtb	r3, r3
 80081d2:	76bb      	strb	r3, [r7, #26]

            while (startI >= 0 && startJ <= 7)
 80081d4:	e039      	b.n	800824a <flip+0x20e>
            {
                if(mat [startI][startJ]==player)
 80081d6:	f997 201b 	ldrsb.w	r2, [r7, #27]
 80081da:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80081de:	4955      	ldr	r1, [pc, #340]	; (8008334 <flip+0x2f8>)
 80081e0:	00d2      	lsls	r2, r2, #3
 80081e2:	440a      	add	r2, r1
 80081e4:	4413      	add	r3, r2
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	79fa      	ldrb	r2, [r7, #7]
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d121      	bne.n	8008232 <flip+0x1f6>
                {
                    while(startI != i && startJ!=j)
 80081ee:	e015      	b.n	800821c <flip+0x1e0>
                    {
                        mat[startI][startJ] = player;
 80081f0:	f997 201b 	ldrsb.w	r2, [r7, #27]
 80081f4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80081f8:	494e      	ldr	r1, [pc, #312]	; (8008334 <flip+0x2f8>)
 80081fa:	00d2      	lsls	r2, r2, #3
 80081fc:	440a      	add	r2, r1
 80081fe:	4413      	add	r3, r2
 8008200:	79fa      	ldrb	r2, [r7, #7]
 8008202:	701a      	strb	r2, [r3, #0]

                        startI++;
 8008204:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008208:	b2db      	uxtb	r3, r3
 800820a:	3301      	adds	r3, #1
 800820c:	b2db      	uxtb	r3, r3
 800820e:	76fb      	strb	r3, [r7, #27]
                        startJ--;
 8008210:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008214:	b2db      	uxtb	r3, r3
 8008216:	3b01      	subs	r3, #1
 8008218:	b2db      	uxtb	r3, r3
 800821a:	76bb      	strb	r3, [r7, #26]
                    while(startI != i && startJ!=j)
 800821c:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8008220:	79bb      	ldrb	r3, [r7, #6]
 8008222:	429a      	cmp	r2, r3
 8008224:	d01a      	beq.n	800825c <flip+0x220>
 8008226:	f997 201a 	ldrsb.w	r2, [r7, #26]
 800822a:	797b      	ldrb	r3, [r7, #5]
 800822c:	429a      	cmp	r2, r3
 800822e:	d1df      	bne.n	80081f0 <flip+0x1b4>
                    }
                     break; // sale del while porque ya sabemos que esta posicion es valida
 8008230:	e014      	b.n	800825c <flip+0x220>
                }
                startI--;
 8008232:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008236:	b2db      	uxtb	r3, r3
 8008238:	3b01      	subs	r3, #1
 800823a:	b2db      	uxtb	r3, r3
 800823c:	76fb      	strb	r3, [r7, #27]
                startJ++;
 800823e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008242:	b2db      	uxtb	r3, r3
 8008244:	3301      	adds	r3, #1
 8008246:	b2db      	uxtb	r3, r3
 8008248:	76bb      	strb	r3, [r7, #26]
            while (startI >= 0 && startJ <= 7)
 800824a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800824e:	2b00      	cmp	r3, #0
 8008250:	db05      	blt.n	800825e <flip+0x222>
 8008252:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008256:	2b07      	cmp	r3, #7
 8008258:	ddbd      	ble.n	80081d6 <flip+0x19a>
 800825a:	e000      	b.n	800825e <flip+0x222>
                     break; // sale del while porque ya sabemos que esta posicion es valida
 800825c:	bf00      	nop
            }
        }
    }

    // right
    if(j < 7)
 800825e:	797b      	ldrb	r3, [r7, #5]
 8008260:	2b06      	cmp	r3, #6
 8008262:	d83e      	bhi.n	80082e2 <flip+0x2a6>
    {
        if(mat[i][j+1] == oppositePlayer)
 8008264:	79ba      	ldrb	r2, [r7, #6]
 8008266:	797b      	ldrb	r3, [r7, #5]
 8008268:	3301      	adds	r3, #1
 800826a:	4932      	ldr	r1, [pc, #200]	; (8008334 <flip+0x2f8>)
 800826c:	00d2      	lsls	r2, r2, #3
 800826e:	440a      	add	r2, r1
 8008270:	4413      	add	r3, r2
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	7ffa      	ldrb	r2, [r7, #31]
 8008276:	429a      	cmp	r2, r3
 8008278:	d133      	bne.n	80082e2 <flip+0x2a6>
        {
        	int8_t startI = i;
 800827a:	79bb      	ldrb	r3, [r7, #6]
 800827c:	747b      	strb	r3, [r7, #17]
            int8_t startJ = j + 1;
 800827e:	797b      	ldrb	r3, [r7, #5]
 8008280:	3301      	adds	r3, #1
 8008282:	b2db      	uxtb	r3, r3
 8008284:	767b      	strb	r3, [r7, #25]

            while (startJ <= 7)
 8008286:	e028      	b.n	80082da <flip+0x29e>
            {
                if(mat [startI][startJ]==player)
 8008288:	f997 2011 	ldrsb.w	r2, [r7, #17]
 800828c:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8008290:	4928      	ldr	r1, [pc, #160]	; (8008334 <flip+0x2f8>)
 8008292:	00d2      	lsls	r2, r2, #3
 8008294:	440a      	add	r2, r1
 8008296:	4413      	add	r3, r2
 8008298:	781b      	ldrb	r3, [r3, #0]
 800829a:	79fa      	ldrb	r2, [r7, #7]
 800829c:	429a      	cmp	r2, r3
 800829e:	d116      	bne.n	80082ce <flip+0x292>
                {
                    while(startJ!=j)
 80082a0:	e00f      	b.n	80082c2 <flip+0x286>
                    {
                        mat[startI][startJ] = player;
 80082a2:	f997 2011 	ldrsb.w	r2, [r7, #17]
 80082a6:	f997 3019 	ldrsb.w	r3, [r7, #25]
 80082aa:	4922      	ldr	r1, [pc, #136]	; (8008334 <flip+0x2f8>)
 80082ac:	00d2      	lsls	r2, r2, #3
 80082ae:	440a      	add	r2, r1
 80082b0:	4413      	add	r3, r2
 80082b2:	79fa      	ldrb	r2, [r7, #7]
 80082b4:	701a      	strb	r2, [r3, #0]

                        startJ--;
 80082b6:	f997 3019 	ldrsb.w	r3, [r7, #25]
 80082ba:	b2db      	uxtb	r3, r3
 80082bc:	3b01      	subs	r3, #1
 80082be:	b2db      	uxtb	r3, r3
 80082c0:	767b      	strb	r3, [r7, #25]
                    while(startJ!=j)
 80082c2:	f997 2019 	ldrsb.w	r2, [r7, #25]
 80082c6:	797b      	ldrb	r3, [r7, #5]
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d1ea      	bne.n	80082a2 <flip+0x266>
                    }
                     break; // sale del while porque ya sabemos que esta posicion es valida
 80082cc:	e009      	b.n	80082e2 <flip+0x2a6>
                }
                startJ++;
 80082ce:	f997 3019 	ldrsb.w	r3, [r7, #25]
 80082d2:	b2db      	uxtb	r3, r3
 80082d4:	3301      	adds	r3, #1
 80082d6:	b2db      	uxtb	r3, r3
 80082d8:	767b      	strb	r3, [r7, #25]
            while (startJ <= 7)
 80082da:	f997 3019 	ldrsb.w	r3, [r7, #25]
 80082de:	2b07      	cmp	r3, #7
 80082e0:	ddd2      	ble.n	8008288 <flip+0x24c>
            }
        }
    }

    // bottom right
    if (i < 7 && j < 7)
 80082e2:	79bb      	ldrb	r3, [r7, #6]
 80082e4:	2b06      	cmp	r3, #6
 80082e6:	d85e      	bhi.n	80083a6 <flip+0x36a>
 80082e8:	797b      	ldrb	r3, [r7, #5]
 80082ea:	2b06      	cmp	r3, #6
 80082ec:	d85b      	bhi.n	80083a6 <flip+0x36a>
    {
        if(mat[i+1][j+1] == oppositePlayer)
 80082ee:	79bb      	ldrb	r3, [r7, #6]
 80082f0:	1c5a      	adds	r2, r3, #1
 80082f2:	797b      	ldrb	r3, [r7, #5]
 80082f4:	3301      	adds	r3, #1
 80082f6:	490f      	ldr	r1, [pc, #60]	; (8008334 <flip+0x2f8>)
 80082f8:	00d2      	lsls	r2, r2, #3
 80082fa:	440a      	add	r2, r1
 80082fc:	4413      	add	r3, r2
 80082fe:	781b      	ldrb	r3, [r3, #0]
 8008300:	7ffa      	ldrb	r2, [r7, #31]
 8008302:	429a      	cmp	r2, r3
 8008304:	d14f      	bne.n	80083a6 <flip+0x36a>
        {
        	int8_t startI = i + 1;
 8008306:	79bb      	ldrb	r3, [r7, #6]
 8008308:	3301      	adds	r3, #1
 800830a:	b2db      	uxtb	r3, r3
 800830c:	763b      	strb	r3, [r7, #24]
            int8_t startJ = j + 1;
 800830e:	797b      	ldrb	r3, [r7, #5]
 8008310:	3301      	adds	r3, #1
 8008312:	b2db      	uxtb	r3, r3
 8008314:	75fb      	strb	r3, [r7, #23]

            while (startI <= 7 && startJ <= 7)
 8008316:	e03c      	b.n	8008392 <flip+0x356>
            {
                if(mat [startI][startJ]==player)
 8008318:	f997 2018 	ldrsb.w	r2, [r7, #24]
 800831c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008320:	4904      	ldr	r1, [pc, #16]	; (8008334 <flip+0x2f8>)
 8008322:	00d2      	lsls	r2, r2, #3
 8008324:	440a      	add	r2, r1
 8008326:	4413      	add	r3, r2
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	79fa      	ldrb	r2, [r7, #7]
 800832c:	429a      	cmp	r2, r3
 800832e:	d124      	bne.n	800837a <flip+0x33e>
                {
                     while(startI != i && startJ!=j)
 8008330:	e018      	b.n	8008364 <flip+0x328>
 8008332:	bf00      	nop
 8008334:	20000444 	.word	0x20000444
                    {
                        mat[startI][startJ] = player;
 8008338:	f997 2018 	ldrsb.w	r2, [r7, #24]
 800833c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008340:	498e      	ldr	r1, [pc, #568]	; (800857c <flip+0x540>)
 8008342:	00d2      	lsls	r2, r2, #3
 8008344:	440a      	add	r2, r1
 8008346:	4413      	add	r3, r2
 8008348:	79fa      	ldrb	r2, [r7, #7]
 800834a:	701a      	strb	r2, [r3, #0]

                        startI--;
 800834c:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8008350:	b2db      	uxtb	r3, r3
 8008352:	3b01      	subs	r3, #1
 8008354:	b2db      	uxtb	r3, r3
 8008356:	763b      	strb	r3, [r7, #24]
                        startJ--;
 8008358:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800835c:	b2db      	uxtb	r3, r3
 800835e:	3b01      	subs	r3, #1
 8008360:	b2db      	uxtb	r3, r3
 8008362:	75fb      	strb	r3, [r7, #23]
                     while(startI != i && startJ!=j)
 8008364:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8008368:	79bb      	ldrb	r3, [r7, #6]
 800836a:	429a      	cmp	r2, r3
 800836c:	d01a      	beq.n	80083a4 <flip+0x368>
 800836e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8008372:	797b      	ldrb	r3, [r7, #5]
 8008374:	429a      	cmp	r2, r3
 8008376:	d1df      	bne.n	8008338 <flip+0x2fc>
                    }
                     break; // sale del while porque ya sabemos que esta posicion es valida
 8008378:	e014      	b.n	80083a4 <flip+0x368>
                }
                startI++;
 800837a:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800837e:	b2db      	uxtb	r3, r3
 8008380:	3301      	adds	r3, #1
 8008382:	b2db      	uxtb	r3, r3
 8008384:	763b      	strb	r3, [r7, #24]
                startJ++;
 8008386:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800838a:	b2db      	uxtb	r3, r3
 800838c:	3301      	adds	r3, #1
 800838e:	b2db      	uxtb	r3, r3
 8008390:	75fb      	strb	r3, [r7, #23]
            while (startI <= 7 && startJ <= 7)
 8008392:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8008396:	2b07      	cmp	r3, #7
 8008398:	dc05      	bgt.n	80083a6 <flip+0x36a>
 800839a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800839e:	2b07      	cmp	r3, #7
 80083a0:	ddba      	ble.n	8008318 <flip+0x2dc>
 80083a2:	e000      	b.n	80083a6 <flip+0x36a>
                     break; // sale del while porque ya sabemos que esta posicion es valida
 80083a4:	bf00      	nop
            }
        }
    }

    // bottom
    if(i < 7)
 80083a6:	79bb      	ldrb	r3, [r7, #6]
 80083a8:	2b06      	cmp	r3, #6
 80083aa:	d83e      	bhi.n	800842a <flip+0x3ee>
    {
            if(mat[i+1][j] == oppositePlayer)
 80083ac:	79bb      	ldrb	r3, [r7, #6]
 80083ae:	1c5a      	adds	r2, r3, #1
 80083b0:	797b      	ldrb	r3, [r7, #5]
 80083b2:	4972      	ldr	r1, [pc, #456]	; (800857c <flip+0x540>)
 80083b4:	00d2      	lsls	r2, r2, #3
 80083b6:	440a      	add	r2, r1
 80083b8:	4413      	add	r3, r2
 80083ba:	781b      	ldrb	r3, [r3, #0]
 80083bc:	7ffa      	ldrb	r2, [r7, #31]
 80083be:	429a      	cmp	r2, r3
 80083c0:	d133      	bne.n	800842a <flip+0x3ee>
            {
            	int8_t startI = i + 1;
 80083c2:	79bb      	ldrb	r3, [r7, #6]
 80083c4:	3301      	adds	r3, #1
 80083c6:	b2db      	uxtb	r3, r3
 80083c8:	75bb      	strb	r3, [r7, #22]
                int8_t startJ = j;
 80083ca:	797b      	ldrb	r3, [r7, #5]
 80083cc:	743b      	strb	r3, [r7, #16]

                while (startI <=7)
 80083ce:	e028      	b.n	8008422 <flip+0x3e6>
                {
                    if(mat [startI][startJ]==player)
 80083d0:	f997 2016 	ldrsb.w	r2, [r7, #22]
 80083d4:	f997 3010 	ldrsb.w	r3, [r7, #16]
 80083d8:	4968      	ldr	r1, [pc, #416]	; (800857c <flip+0x540>)
 80083da:	00d2      	lsls	r2, r2, #3
 80083dc:	440a      	add	r2, r1
 80083de:	4413      	add	r3, r2
 80083e0:	781b      	ldrb	r3, [r3, #0]
 80083e2:	79fa      	ldrb	r2, [r7, #7]
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d116      	bne.n	8008416 <flip+0x3da>
                    {
                        while(startI != i)
 80083e8:	e00f      	b.n	800840a <flip+0x3ce>
                        {
                            mat[startI][startJ] = player;
 80083ea:	f997 2016 	ldrsb.w	r2, [r7, #22]
 80083ee:	f997 3010 	ldrsb.w	r3, [r7, #16]
 80083f2:	4962      	ldr	r1, [pc, #392]	; (800857c <flip+0x540>)
 80083f4:	00d2      	lsls	r2, r2, #3
 80083f6:	440a      	add	r2, r1
 80083f8:	4413      	add	r3, r2
 80083fa:	79fa      	ldrb	r2, [r7, #7]
 80083fc:	701a      	strb	r2, [r3, #0]

                            startI--;
 80083fe:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8008402:	b2db      	uxtb	r3, r3
 8008404:	3b01      	subs	r3, #1
 8008406:	b2db      	uxtb	r3, r3
 8008408:	75bb      	strb	r3, [r7, #22]
                        while(startI != i)
 800840a:	f997 2016 	ldrsb.w	r2, [r7, #22]
 800840e:	79bb      	ldrb	r3, [r7, #6]
 8008410:	429a      	cmp	r2, r3
 8008412:	d1ea      	bne.n	80083ea <flip+0x3ae>
                         }
                         break; // sale del while porque ya sabemos que esta posicion es valida
 8008414:	e009      	b.n	800842a <flip+0x3ee>
                    }
                    startI++;
 8008416:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800841a:	b2db      	uxtb	r3, r3
 800841c:	3301      	adds	r3, #1
 800841e:	b2db      	uxtb	r3, r3
 8008420:	75bb      	strb	r3, [r7, #22]
                while (startI <=7)
 8008422:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8008426:	2b07      	cmp	r3, #7
 8008428:	ddd2      	ble.n	80083d0 <flip+0x394>
                }
            }
    }

    // bottom left
    if(i < 7 && j > 0)
 800842a:	79bb      	ldrb	r3, [r7, #6]
 800842c:	2b06      	cmp	r3, #6
 800842e:	d85b      	bhi.n	80084e8 <flip+0x4ac>
 8008430:	797b      	ldrb	r3, [r7, #5]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d058      	beq.n	80084e8 <flip+0x4ac>
    {
        if(mat[i+1][j-1] == oppositePlayer)
 8008436:	79bb      	ldrb	r3, [r7, #6]
 8008438:	1c5a      	adds	r2, r3, #1
 800843a:	797b      	ldrb	r3, [r7, #5]
 800843c:	3b01      	subs	r3, #1
 800843e:	494f      	ldr	r1, [pc, #316]	; (800857c <flip+0x540>)
 8008440:	00d2      	lsls	r2, r2, #3
 8008442:	440a      	add	r2, r1
 8008444:	4413      	add	r3, r2
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	7ffa      	ldrb	r2, [r7, #31]
 800844a:	429a      	cmp	r2, r3
 800844c:	d14c      	bne.n	80084e8 <flip+0x4ac>
        {
        	int8_t startI = i + 1;
 800844e:	79bb      	ldrb	r3, [r7, #6]
 8008450:	3301      	adds	r3, #1
 8008452:	b2db      	uxtb	r3, r3
 8008454:	757b      	strb	r3, [r7, #21]
            int8_t startJ = j - 1;
 8008456:	797b      	ldrb	r3, [r7, #5]
 8008458:	3b01      	subs	r3, #1
 800845a:	b2db      	uxtb	r3, r3
 800845c:	753b      	strb	r3, [r7, #20]

            while (startI <=7  && startJ >= 0)
 800845e:	e039      	b.n	80084d4 <flip+0x498>
            {
                if(mat [startI][startJ]==player)
 8008460:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8008464:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8008468:	4944      	ldr	r1, [pc, #272]	; (800857c <flip+0x540>)
 800846a:	00d2      	lsls	r2, r2, #3
 800846c:	440a      	add	r2, r1
 800846e:	4413      	add	r3, r2
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	79fa      	ldrb	r2, [r7, #7]
 8008474:	429a      	cmp	r2, r3
 8008476:	d121      	bne.n	80084bc <flip+0x480>
                {
                     while(startI != i && startJ!=j)
 8008478:	e015      	b.n	80084a6 <flip+0x46a>
                    {
                        mat[startI][startJ] = player;
 800847a:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800847e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8008482:	493e      	ldr	r1, [pc, #248]	; (800857c <flip+0x540>)
 8008484:	00d2      	lsls	r2, r2, #3
 8008486:	440a      	add	r2, r1
 8008488:	4413      	add	r3, r2
 800848a:	79fa      	ldrb	r2, [r7, #7]
 800848c:	701a      	strb	r2, [r3, #0]

                        startI--;
 800848e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8008492:	b2db      	uxtb	r3, r3
 8008494:	3b01      	subs	r3, #1
 8008496:	b2db      	uxtb	r3, r3
 8008498:	757b      	strb	r3, [r7, #21]
                        startJ++;
 800849a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800849e:	b2db      	uxtb	r3, r3
 80084a0:	3301      	adds	r3, #1
 80084a2:	b2db      	uxtb	r3, r3
 80084a4:	753b      	strb	r3, [r7, #20]
                     while(startI != i && startJ!=j)
 80084a6:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80084aa:	79bb      	ldrb	r3, [r7, #6]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d01a      	beq.n	80084e6 <flip+0x4aa>
 80084b0:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80084b4:	797b      	ldrb	r3, [r7, #5]
 80084b6:	429a      	cmp	r2, r3
 80084b8:	d1df      	bne.n	800847a <flip+0x43e>
                    }
                     break; // sale del while porque ya sabemos que esta posicion es valida
 80084ba:	e014      	b.n	80084e6 <flip+0x4aa>
                }
                startI++;
 80084bc:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	3301      	adds	r3, #1
 80084c4:	b2db      	uxtb	r3, r3
 80084c6:	757b      	strb	r3, [r7, #21]
                startJ--;
 80084c8:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80084cc:	b2db      	uxtb	r3, r3
 80084ce:	3b01      	subs	r3, #1
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	753b      	strb	r3, [r7, #20]
            while (startI <=7  && startJ >= 0)
 80084d4:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80084d8:	2b07      	cmp	r3, #7
 80084da:	dc05      	bgt.n	80084e8 <flip+0x4ac>
 80084dc:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	dabd      	bge.n	8008460 <flip+0x424>
 80084e4:	e000      	b.n	80084e8 <flip+0x4ac>
                     break; // sale del while porque ya sabemos que esta posicion es valida
 80084e6:	bf00      	nop
            }
        }
    }

    // left
    if(j > 0)
 80084e8:	797b      	ldrb	r3, [r7, #5]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d03f      	beq.n	800856e <flip+0x532>
    {
        if(mat[i][j-1] == oppositePlayer)
 80084ee:	79ba      	ldrb	r2, [r7, #6]
 80084f0:	797b      	ldrb	r3, [r7, #5]
 80084f2:	3b01      	subs	r3, #1
 80084f4:	4921      	ldr	r1, [pc, #132]	; (800857c <flip+0x540>)
 80084f6:	00d2      	lsls	r2, r2, #3
 80084f8:	440a      	add	r2, r1
 80084fa:	4413      	add	r3, r2
 80084fc:	781b      	ldrb	r3, [r3, #0]
 80084fe:	7ffa      	ldrb	r2, [r7, #31]
 8008500:	429a      	cmp	r2, r3
 8008502:	d134      	bne.n	800856e <flip+0x532>
        {
        	int8_t startI = i;
 8008504:	79bb      	ldrb	r3, [r7, #6]
 8008506:	73fb      	strb	r3, [r7, #15]
        	int8_t startJ = j - 1;
 8008508:	797b      	ldrb	r3, [r7, #5]
 800850a:	3b01      	subs	r3, #1
 800850c:	b2db      	uxtb	r3, r3
 800850e:	74fb      	strb	r3, [r7, #19]

            while ( startJ >= 0)
 8008510:	e028      	b.n	8008564 <flip+0x528>
            {
                if(mat [startI][startJ]==player)
 8008512:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8008516:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800851a:	4918      	ldr	r1, [pc, #96]	; (800857c <flip+0x540>)
 800851c:	00d2      	lsls	r2, r2, #3
 800851e:	440a      	add	r2, r1
 8008520:	4413      	add	r3, r2
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	79fa      	ldrb	r2, [r7, #7]
 8008526:	429a      	cmp	r2, r3
 8008528:	d116      	bne.n	8008558 <flip+0x51c>
                {
                     while(startJ!=j)
 800852a:	e00f      	b.n	800854c <flip+0x510>
                    {
                        mat[startI][startJ] = player;
 800852c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8008530:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008534:	4911      	ldr	r1, [pc, #68]	; (800857c <flip+0x540>)
 8008536:	00d2      	lsls	r2, r2, #3
 8008538:	440a      	add	r2, r1
 800853a:	4413      	add	r3, r2
 800853c:	79fa      	ldrb	r2, [r7, #7]
 800853e:	701a      	strb	r2, [r3, #0]

                        startJ++;
 8008540:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008544:	b2db      	uxtb	r3, r3
 8008546:	3301      	adds	r3, #1
 8008548:	b2db      	uxtb	r3, r3
 800854a:	74fb      	strb	r3, [r7, #19]
                     while(startJ!=j)
 800854c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8008550:	797b      	ldrb	r3, [r7, #5]
 8008552:	429a      	cmp	r2, r3
 8008554:	d1ea      	bne.n	800852c <flip+0x4f0>
                    }
                     break; // sale del while porque ya sabemos que esta posicion es valida
 8008556:	e00a      	b.n	800856e <flip+0x532>
                }
                startJ--;
 8008558:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800855c:	b2db      	uxtb	r3, r3
 800855e:	3b01      	subs	r3, #1
 8008560:	b2db      	uxtb	r3, r3
 8008562:	74fb      	strb	r3, [r7, #19]
            while ( startJ >= 0)
 8008564:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008568:	2b00      	cmp	r3, #0
 800856a:	dad2      	bge.n	8008512 <flip+0x4d6>
            }
        }
    }
}
 800856c:	e7ff      	b.n	800856e <flip+0x532>
 800856e:	bf00      	nop
 8008570:	3724      	adds	r7, #36	; 0x24
 8008572:	46bd      	mov	sp, r7
 8008574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008578:	4770      	bx	lr
 800857a:	bf00      	nop
 800857c:	20000444 	.word	0x20000444

08008580 <getAvailableMoves>:

// Busca en el tablero entero los movimientos validos
void getAvailableMoves(uint8_t player, uint8_t availablePosition[], uint8_t *numAvailablePosition)
{
 8008580:	b480      	push	{r7}
 8008582:	b08d      	sub	sp, #52	; 0x34
 8008584:	af00      	add	r7, sp, #0
 8008586:	4603      	mov	r3, r0
 8008588:	60b9      	str	r1, [r7, #8]
 800858a:	607a      	str	r2, [r7, #4]
 800858c:	73fb      	strb	r3, [r7, #15]
	uint8_t oppositePlayer;

    if(player==1)
 800858e:	7bfb      	ldrb	r3, [r7, #15]
 8008590:	2b01      	cmp	r3, #1
 8008592:	d103      	bne.n	800859c <getAvailableMoves+0x1c>
    {
        oppositePlayer=2;
 8008594:	2302      	movs	r3, #2
 8008596:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800859a:	e002      	b.n	80085a2 <getAvailableMoves+0x22>
    }
    else
    {
        oppositePlayer=1;
 800859c:	2301      	movs	r3, #1
 800859e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }


    *numAvailablePosition = 0;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2200      	movs	r2, #0
 80085a6:	701a      	strb	r2, [r3, #0]

    for(int i=0; i<8; i++)
 80085a8:	2300      	movs	r3, #0
 80085aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80085ac:	e20c      	b.n	80089c8 <getAvailableMoves+0x448>
    {
        for(int j=0; j<8; j++)
 80085ae:	2300      	movs	r3, #0
 80085b0:	627b      	str	r3, [r7, #36]	; 0x24
 80085b2:	e202      	b.n	80089ba <getAvailableMoves+0x43a>
        {
            // We need to check if the position i,j is empty (equal to 0). If it isnt, then we continue to the next column
            if(mat[i][j] != 0)
 80085b4:	4ab0      	ldr	r2, [pc, #704]	; (8008878 <getAvailableMoves+0x2f8>)
 80085b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b8:	00db      	lsls	r3, r3, #3
 80085ba:	441a      	add	r2, r3
 80085bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085be:	4413      	add	r3, r2
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	f040 81f5 	bne.w	80089b2 <getAvailableMoves+0x432>
            /* TL   T   TR
             *  L (i,j) R
             * BL   B   BR
             */

            uint8_t positionValid = 0;//al inicio declaramos que la posición en invalida
 80085c8:	2300      	movs	r3, #0
 80085ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

            // top left
            if(i > 0 && j > 0) // Esta condición sirve para no acceder a posiciones fuera de la tabla
 80085ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	dd42      	ble.n	800865a <getAvailableMoves+0xda>
 80085d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	dd3f      	ble.n	800865a <getAvailableMoves+0xda>
            {
                if(mat[i-1][j-1] == oppositePlayer)
 80085da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085dc:	1e5a      	subs	r2, r3, #1
 80085de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e0:	3b01      	subs	r3, #1
 80085e2:	49a5      	ldr	r1, [pc, #660]	; (8008878 <getAvailableMoves+0x2f8>)
 80085e4:	00d2      	lsls	r2, r2, #3
 80085e6:	440a      	add	r2, r1
 80085e8:	4413      	add	r3, r2
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d132      	bne.n	800865a <getAvailableMoves+0xda>
                {
                    // posicao adjacent
                	int8_t startI = i - 1;//comienza en el mismo sitio de la ficha opuesta
 80085f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f6:	b2db      	uxtb	r3, r3
 80085f8:	3b01      	subs	r3, #1
 80085fa:	b2db      	uxtb	r3, r3
 80085fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
                	int8_t startJ = j - 1;
 8008600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008602:	b2db      	uxtb	r3, r3
 8008604:	3b01      	subs	r3, #1
 8008606:	b2db      	uxtb	r3, r3
 8008608:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

                    while (startI >= 0 && startJ >= 0)//hasta los limites de la tabla
 800860c:	e01d      	b.n	800864a <getAvailableMoves+0xca>
                    {
                        if(mat [startI][startJ]==player)
 800860e:	f997 2022 	ldrsb.w	r2, [r7, #34]	; 0x22
 8008612:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8008616:	4998      	ldr	r1, [pc, #608]	; (8008878 <getAvailableMoves+0x2f8>)
 8008618:	00d2      	lsls	r2, r2, #3
 800861a:	440a      	add	r2, r1
 800861c:	4413      	add	r3, r2
 800861e:	781b      	ldrb	r3, [r3, #0]
 8008620:	7bfa      	ldrb	r2, [r7, #15]
 8008622:	429a      	cmp	r2, r3
 8008624:	d103      	bne.n	800862e <getAvailableMoves+0xae>
                        {
                             positionValid = 1;
 8008626:	2301      	movs	r3, #1
 8008628:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                             break; // sale del while porque ya sabemos que esta posicion es valida
 800862c:	e015      	b.n	800865a <getAvailableMoves+0xda>
                        }
                        startI--;
 800862e:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8008632:	b2db      	uxtb	r3, r3
 8008634:	3b01      	subs	r3, #1
 8008636:	b2db      	uxtb	r3, r3
 8008638:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
                        startJ--;
 800863c:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8008640:	b2db      	uxtb	r3, r3
 8008642:	3b01      	subs	r3, #1
 8008644:	b2db      	uxtb	r3, r3
 8008646:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
                    while (startI >= 0 && startJ >= 0)//hasta los limites de la tabla
 800864a:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 800864e:	2b00      	cmp	r3, #0
 8008650:	db03      	blt.n	800865a <getAvailableMoves+0xda>
 8008652:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8008656:	2b00      	cmp	r3, #0
 8008658:	dad9      	bge.n	800860e <getAvailableMoves+0x8e>
                    }
                }
            }

            // top
            if(i>0)
 800865a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800865c:	2b00      	cmp	r3, #0
 800865e:	dd2f      	ble.n	80086c0 <getAvailableMoves+0x140>
            {
                if(mat[i-1][j] == oppositePlayer)
 8008660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008662:	3b01      	subs	r3, #1
 8008664:	4a84      	ldr	r2, [pc, #528]	; (8008878 <getAvailableMoves+0x2f8>)
 8008666:	00db      	lsls	r3, r3, #3
 8008668:	441a      	add	r2, r3
 800866a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866c:	4413      	add	r3, r2
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008674:	429a      	cmp	r2, r3
 8008676:	d123      	bne.n	80086c0 <getAvailableMoves+0x140>
                {
                    int8_t startI = i - 1;
 8008678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800867a:	b2db      	uxtb	r3, r3
 800867c:	3b01      	subs	r3, #1
 800867e:	b2db      	uxtb	r3, r3
 8008680:	f887 3020 	strb.w	r3, [r7, #32]
                    int8_t startJ = j;
 8008684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008686:	75bb      	strb	r3, [r7, #22]

                    while (startI >= 0)
 8008688:	e016      	b.n	80086b8 <getAvailableMoves+0x138>
                    {
                        if(mat [startI][startJ]==player)
 800868a:	f997 2020 	ldrsb.w	r2, [r7, #32]
 800868e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8008692:	4979      	ldr	r1, [pc, #484]	; (8008878 <getAvailableMoves+0x2f8>)
 8008694:	00d2      	lsls	r2, r2, #3
 8008696:	440a      	add	r2, r1
 8008698:	4413      	add	r3, r2
 800869a:	781b      	ldrb	r3, [r3, #0]
 800869c:	7bfa      	ldrb	r2, [r7, #15]
 800869e:	429a      	cmp	r2, r3
 80086a0:	d103      	bne.n	80086aa <getAvailableMoves+0x12a>
                        {
                             positionValid = 1;
 80086a2:	2301      	movs	r3, #1
 80086a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                             break; // sale del while porque ya sabemos que esta posicion es valida
 80086a8:	e00a      	b.n	80086c0 <getAvailableMoves+0x140>
                        }
                        startI--;
 80086aa:	f997 3020 	ldrsb.w	r3, [r7, #32]
 80086ae:	b2db      	uxtb	r3, r3
 80086b0:	3b01      	subs	r3, #1
 80086b2:	b2db      	uxtb	r3, r3
 80086b4:	f887 3020 	strb.w	r3, [r7, #32]
                    while (startI >= 0)
 80086b8:	f997 3020 	ldrsb.w	r3, [r7, #32]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	dae4      	bge.n	800868a <getAvailableMoves+0x10a>
                    }
                }
            }

            // top right
            if(i > 0 && j <7)
 80086c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	dd3e      	ble.n	8008744 <getAvailableMoves+0x1c4>
 80086c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c8:	2b06      	cmp	r3, #6
 80086ca:	dc3b      	bgt.n	8008744 <getAvailableMoves+0x1c4>
            {
                if(mat[i-1][j+1] == oppositePlayer)
 80086cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ce:	1e5a      	subs	r2, r3, #1
 80086d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d2:	3301      	adds	r3, #1
 80086d4:	4968      	ldr	r1, [pc, #416]	; (8008878 <getAvailableMoves+0x2f8>)
 80086d6:	00d2      	lsls	r2, r2, #3
 80086d8:	440a      	add	r2, r1
 80086da:	4413      	add	r3, r2
 80086dc:	781b      	ldrb	r3, [r3, #0]
 80086de:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d12e      	bne.n	8008744 <getAvailableMoves+0x1c4>
                {
                	int8_t startI = i - 1;
 80086e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	3b01      	subs	r3, #1
 80086ec:	b2db      	uxtb	r3, r3
 80086ee:	77fb      	strb	r3, [r7, #31]
                	int8_t startJ = j + 1;
 80086f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f2:	b2db      	uxtb	r3, r3
 80086f4:	3301      	adds	r3, #1
 80086f6:	b2db      	uxtb	r3, r3
 80086f8:	77bb      	strb	r3, [r7, #30]

                    while (startI >= 0 && startJ <= 7)
 80086fa:	e01b      	b.n	8008734 <getAvailableMoves+0x1b4>
                    {
                        if(mat [startI][startJ]==player)
 80086fc:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8008700:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8008704:	495c      	ldr	r1, [pc, #368]	; (8008878 <getAvailableMoves+0x2f8>)
 8008706:	00d2      	lsls	r2, r2, #3
 8008708:	440a      	add	r2, r1
 800870a:	4413      	add	r3, r2
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	7bfa      	ldrb	r2, [r7, #15]
 8008710:	429a      	cmp	r2, r3
 8008712:	d103      	bne.n	800871c <getAvailableMoves+0x19c>
                        {
                             positionValid = 1;
 8008714:	2301      	movs	r3, #1
 8008716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                             break; // sale del while porque ya sabemos que esta posicion es valida
 800871a:	e013      	b.n	8008744 <getAvailableMoves+0x1c4>
                        }
                        startI--;
 800871c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008720:	b2db      	uxtb	r3, r3
 8008722:	3b01      	subs	r3, #1
 8008724:	b2db      	uxtb	r3, r3
 8008726:	77fb      	strb	r3, [r7, #31]
                        startJ++;
 8008728:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800872c:	b2db      	uxtb	r3, r3
 800872e:	3301      	adds	r3, #1
 8008730:	b2db      	uxtb	r3, r3
 8008732:	77bb      	strb	r3, [r7, #30]
                    while (startI >= 0 && startJ <= 7)
 8008734:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008738:	2b00      	cmp	r3, #0
 800873a:	db03      	blt.n	8008744 <getAvailableMoves+0x1c4>
 800873c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8008740:	2b07      	cmp	r3, #7
 8008742:	dddb      	ble.n	80086fc <getAvailableMoves+0x17c>
                    }
                }
            }

            // right
            if(j < 7)
 8008744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008746:	2b06      	cmp	r3, #6
 8008748:	dc2d      	bgt.n	80087a6 <getAvailableMoves+0x226>
            {
                if(mat[i][j+1] == oppositePlayer)
 800874a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874c:	3301      	adds	r3, #1
 800874e:	494a      	ldr	r1, [pc, #296]	; (8008878 <getAvailableMoves+0x2f8>)
 8008750:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008752:	00d2      	lsls	r2, r2, #3
 8008754:	440a      	add	r2, r1
 8008756:	4413      	add	r3, r2
 8008758:	781b      	ldrb	r3, [r3, #0]
 800875a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800875e:	429a      	cmp	r2, r3
 8008760:	d121      	bne.n	80087a6 <getAvailableMoves+0x226>
                {
                	int8_t startI = i;
 8008762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008764:	757b      	strb	r3, [r7, #21]
                	int8_t startJ = j + 1;
 8008766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008768:	b2db      	uxtb	r3, r3
 800876a:	3301      	adds	r3, #1
 800876c:	b2db      	uxtb	r3, r3
 800876e:	777b      	strb	r3, [r7, #29]

                    while (startJ <= 7)
 8008770:	e015      	b.n	800879e <getAvailableMoves+0x21e>
                    {
                        if(mat [startI][startJ]==player)
 8008772:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8008776:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800877a:	493f      	ldr	r1, [pc, #252]	; (8008878 <getAvailableMoves+0x2f8>)
 800877c:	00d2      	lsls	r2, r2, #3
 800877e:	440a      	add	r2, r1
 8008780:	4413      	add	r3, r2
 8008782:	781b      	ldrb	r3, [r3, #0]
 8008784:	7bfa      	ldrb	r2, [r7, #15]
 8008786:	429a      	cmp	r2, r3
 8008788:	d103      	bne.n	8008792 <getAvailableMoves+0x212>
                        {
                             positionValid = 1;
 800878a:	2301      	movs	r3, #1
 800878c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                             break; // sale del while porque ya sabemos que esta posicion es valida
 8008790:	e009      	b.n	80087a6 <getAvailableMoves+0x226>
                        }
                        startJ++;
 8008792:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008796:	b2db      	uxtb	r3, r3
 8008798:	3301      	adds	r3, #1
 800879a:	b2db      	uxtb	r3, r3
 800879c:	777b      	strb	r3, [r7, #29]
                    while (startJ <= 7)
 800879e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80087a2:	2b07      	cmp	r3, #7
 80087a4:	dde5      	ble.n	8008772 <getAvailableMoves+0x1f2>
                    }
                }
            }

            // bottom right
            if (i < 7 && j < 7)
 80087a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a8:	2b06      	cmp	r3, #6
 80087aa:	dc3e      	bgt.n	800882a <getAvailableMoves+0x2aa>
 80087ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ae:	2b06      	cmp	r3, #6
 80087b0:	dc3b      	bgt.n	800882a <getAvailableMoves+0x2aa>
            {
                if(mat[i+1][j+1] == oppositePlayer)
 80087b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b4:	1c5a      	adds	r2, r3, #1
 80087b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b8:	3301      	adds	r3, #1
 80087ba:	492f      	ldr	r1, [pc, #188]	; (8008878 <getAvailableMoves+0x2f8>)
 80087bc:	00d2      	lsls	r2, r2, #3
 80087be:	440a      	add	r2, r1
 80087c0:	4413      	add	r3, r2
 80087c2:	781b      	ldrb	r3, [r3, #0]
 80087c4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d12e      	bne.n	800882a <getAvailableMoves+0x2aa>
                {
                	int8_t startI = i + 1;
 80087cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ce:	b2db      	uxtb	r3, r3
 80087d0:	3301      	adds	r3, #1
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	773b      	strb	r3, [r7, #28]
                	int8_t startJ = j + 1;
 80087d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	3301      	adds	r3, #1
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	76fb      	strb	r3, [r7, #27]

                    while (startI <= 7 && startJ <= 7)
 80087e0:	e01b      	b.n	800881a <getAvailableMoves+0x29a>
                    {
                        if(mat [startI][startJ]==player)
 80087e2:	f997 201c 	ldrsb.w	r2, [r7, #28]
 80087e6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80087ea:	4923      	ldr	r1, [pc, #140]	; (8008878 <getAvailableMoves+0x2f8>)
 80087ec:	00d2      	lsls	r2, r2, #3
 80087ee:	440a      	add	r2, r1
 80087f0:	4413      	add	r3, r2
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	7bfa      	ldrb	r2, [r7, #15]
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d103      	bne.n	8008802 <getAvailableMoves+0x282>
                        {
                             positionValid = 1;
 80087fa:	2301      	movs	r3, #1
 80087fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                             break; // sale del while porque ya sabemos que esta posicion es valida
 8008800:	e013      	b.n	800882a <getAvailableMoves+0x2aa>
                        }
                        startI++;
 8008802:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8008806:	b2db      	uxtb	r3, r3
 8008808:	3301      	adds	r3, #1
 800880a:	b2db      	uxtb	r3, r3
 800880c:	773b      	strb	r3, [r7, #28]
                        startJ++;
 800880e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008812:	b2db      	uxtb	r3, r3
 8008814:	3301      	adds	r3, #1
 8008816:	b2db      	uxtb	r3, r3
 8008818:	76fb      	strb	r3, [r7, #27]
                    while (startI <= 7 && startJ <= 7)
 800881a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800881e:	2b07      	cmp	r3, #7
 8008820:	dc03      	bgt.n	800882a <getAvailableMoves+0x2aa>
 8008822:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008826:	2b07      	cmp	r3, #7
 8008828:	dddb      	ble.n	80087e2 <getAvailableMoves+0x262>
                    }
                }
            }

            // bottom
            if(i < 7)
 800882a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800882c:	2b06      	cmp	r3, #6
 800882e:	dc2f      	bgt.n	8008890 <getAvailableMoves+0x310>
            {
                if(mat[i+1][j] == oppositePlayer)
 8008830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008832:	3301      	adds	r3, #1
 8008834:	4a10      	ldr	r2, [pc, #64]	; (8008878 <getAvailableMoves+0x2f8>)
 8008836:	00db      	lsls	r3, r3, #3
 8008838:	441a      	add	r2, r3
 800883a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800883c:	4413      	add	r3, r2
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008844:	429a      	cmp	r2, r3
 8008846:	d123      	bne.n	8008890 <getAvailableMoves+0x310>
                {
                	int8_t startI = i + 1;
 8008848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800884a:	b2db      	uxtb	r3, r3
 800884c:	3301      	adds	r3, #1
 800884e:	b2db      	uxtb	r3, r3
 8008850:	76bb      	strb	r3, [r7, #26]
                	int8_t startJ = j;
 8008852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008854:	753b      	strb	r3, [r7, #20]

                    while (startI <=7)
 8008856:	e017      	b.n	8008888 <getAvailableMoves+0x308>
                    {
                        if(mat [startI][startJ]==player)
 8008858:	f997 201a 	ldrsb.w	r2, [r7, #26]
 800885c:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8008860:	4905      	ldr	r1, [pc, #20]	; (8008878 <getAvailableMoves+0x2f8>)
 8008862:	00d2      	lsls	r2, r2, #3
 8008864:	440a      	add	r2, r1
 8008866:	4413      	add	r3, r2
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	7bfa      	ldrb	r2, [r7, #15]
 800886c:	429a      	cmp	r2, r3
 800886e:	d105      	bne.n	800887c <getAvailableMoves+0x2fc>
                        {
                             positionValid = 1;
 8008870:	2301      	movs	r3, #1
 8008872:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                             break; // sale del while porque ya sabemos que esta posicion es valida
 8008876:	e00b      	b.n	8008890 <getAvailableMoves+0x310>
 8008878:	20000444 	.word	0x20000444
                        }
                        startI++;
 800887c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008880:	b2db      	uxtb	r3, r3
 8008882:	3301      	adds	r3, #1
 8008884:	b2db      	uxtb	r3, r3
 8008886:	76bb      	strb	r3, [r7, #26]
                    while (startI <=7)
 8008888:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800888c:	2b07      	cmp	r3, #7
 800888e:	dde3      	ble.n	8008858 <getAvailableMoves+0x2d8>
                    }
                }
            }

            // bottom left
            if(i < 7 && j > 0)
 8008890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008892:	2b06      	cmp	r3, #6
 8008894:	dc3e      	bgt.n	8008914 <getAvailableMoves+0x394>
 8008896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008898:	2b00      	cmp	r3, #0
 800889a:	dd3b      	ble.n	8008914 <getAvailableMoves+0x394>
            {
                if(mat[i+1][j-1] == oppositePlayer)
 800889c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800889e:	1c5a      	adds	r2, r3, #1
 80088a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a2:	3b01      	subs	r3, #1
 80088a4:	494d      	ldr	r1, [pc, #308]	; (80089dc <getAvailableMoves+0x45c>)
 80088a6:	00d2      	lsls	r2, r2, #3
 80088a8:	440a      	add	r2, r1
 80088aa:	4413      	add	r3, r2
 80088ac:	781b      	ldrb	r3, [r3, #0]
 80088ae:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d12e      	bne.n	8008914 <getAvailableMoves+0x394>
                {
                	int8_t startI = i + 1;
 80088b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b8:	b2db      	uxtb	r3, r3
 80088ba:	3301      	adds	r3, #1
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	767b      	strb	r3, [r7, #25]
                	int8_t startJ = j - 1;
 80088c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c2:	b2db      	uxtb	r3, r3
 80088c4:	3b01      	subs	r3, #1
 80088c6:	b2db      	uxtb	r3, r3
 80088c8:	763b      	strb	r3, [r7, #24]

                    while (startI <=7  && startJ >= 0)
 80088ca:	e01b      	b.n	8008904 <getAvailableMoves+0x384>
                    {
                        if(mat [startI][startJ]==player)
 80088cc:	f997 2019 	ldrsb.w	r2, [r7, #25]
 80088d0:	f997 3018 	ldrsb.w	r3, [r7, #24]
 80088d4:	4941      	ldr	r1, [pc, #260]	; (80089dc <getAvailableMoves+0x45c>)
 80088d6:	00d2      	lsls	r2, r2, #3
 80088d8:	440a      	add	r2, r1
 80088da:	4413      	add	r3, r2
 80088dc:	781b      	ldrb	r3, [r3, #0]
 80088de:	7bfa      	ldrb	r2, [r7, #15]
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d103      	bne.n	80088ec <getAvailableMoves+0x36c>
                        {
                             positionValid = 1;
 80088e4:	2301      	movs	r3, #1
 80088e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                             break; // sale del while porque ya sabemos que esta posicion es valida
 80088ea:	e013      	b.n	8008914 <getAvailableMoves+0x394>
                        }
                        startI++;
 80088ec:	f997 3019 	ldrsb.w	r3, [r7, #25]
 80088f0:	b2db      	uxtb	r3, r3
 80088f2:	3301      	adds	r3, #1
 80088f4:	b2db      	uxtb	r3, r3
 80088f6:	767b      	strb	r3, [r7, #25]
                        startJ--;
 80088f8:	f997 3018 	ldrsb.w	r3, [r7, #24]
 80088fc:	b2db      	uxtb	r3, r3
 80088fe:	3b01      	subs	r3, #1
 8008900:	b2db      	uxtb	r3, r3
 8008902:	763b      	strb	r3, [r7, #24]
                    while (startI <=7  && startJ >= 0)
 8008904:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8008908:	2b07      	cmp	r3, #7
 800890a:	dc03      	bgt.n	8008914 <getAvailableMoves+0x394>
 800890c:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8008910:	2b00      	cmp	r3, #0
 8008912:	dadb      	bge.n	80088cc <getAvailableMoves+0x34c>
                    }
                }
            }

            // left
            if(j > 0)
 8008914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008916:	2b00      	cmp	r3, #0
 8008918:	dd2d      	ble.n	8008976 <getAvailableMoves+0x3f6>
            {
                if(mat[i][j-1] == oppositePlayer)
 800891a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800891c:	3b01      	subs	r3, #1
 800891e:	492f      	ldr	r1, [pc, #188]	; (80089dc <getAvailableMoves+0x45c>)
 8008920:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008922:	00d2      	lsls	r2, r2, #3
 8008924:	440a      	add	r2, r1
 8008926:	4413      	add	r3, r2
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800892e:	429a      	cmp	r2, r3
 8008930:	d121      	bne.n	8008976 <getAvailableMoves+0x3f6>
                {
                	int8_t startI = i;
 8008932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008934:	74fb      	strb	r3, [r7, #19]
                	int8_t startJ = j - 1;
 8008936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008938:	b2db      	uxtb	r3, r3
 800893a:	3b01      	subs	r3, #1
 800893c:	b2db      	uxtb	r3, r3
 800893e:	75fb      	strb	r3, [r7, #23]

                    while ( startJ >= 0)
 8008940:	e015      	b.n	800896e <getAvailableMoves+0x3ee>
                    {
                        if(mat [startI][startJ]==player)
 8008942:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8008946:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800894a:	4924      	ldr	r1, [pc, #144]	; (80089dc <getAvailableMoves+0x45c>)
 800894c:	00d2      	lsls	r2, r2, #3
 800894e:	440a      	add	r2, r1
 8008950:	4413      	add	r3, r2
 8008952:	781b      	ldrb	r3, [r3, #0]
 8008954:	7bfa      	ldrb	r2, [r7, #15]
 8008956:	429a      	cmp	r2, r3
 8008958:	d103      	bne.n	8008962 <getAvailableMoves+0x3e2>
                        {
                             positionValid = 1;
 800895a:	2301      	movs	r3, #1
 800895c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                             break; // sale del while porque ya sabemos que esta posicion es valida
 8008960:	e009      	b.n	8008976 <getAvailableMoves+0x3f6>
                        }
                        startJ--;
 8008962:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008966:	b2db      	uxtb	r3, r3
 8008968:	3b01      	subs	r3, #1
 800896a:	b2db      	uxtb	r3, r3
 800896c:	75fb      	strb	r3, [r7, #23]
                    while ( startJ >= 0)
 800896e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008972:	2b00      	cmp	r3, #0
 8008974:	dae5      	bge.n	8008942 <getAvailableMoves+0x3c2>
                    }
                }
            }

            if (positionValid == 1)
 8008976:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800897a:	2b01      	cmp	r3, #1
 800897c:	d11a      	bne.n	80089b4 <getAvailableMoves+0x434>
            {
                *availablePosition=(i+1)*10+j+1;//almacenar esta posicion que esta disponible, podria utilizar otro puntero para j
 800897e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008980:	3301      	adds	r3, #1
 8008982:	b2db      	uxtb	r3, r3
 8008984:	461a      	mov	r2, r3
 8008986:	0092      	lsls	r2, r2, #2
 8008988:	4413      	add	r3, r2
 800898a:	005b      	lsls	r3, r3, #1
 800898c:	b2da      	uxtb	r2, r3
 800898e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008990:	b2db      	uxtb	r3, r3
 8008992:	4413      	add	r3, r2
 8008994:	b2db      	uxtb	r3, r3
 8008996:	3301      	adds	r3, #1
 8008998:	b2da      	uxtb	r2, r3
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	701a      	strb	r2, [r3, #0]
                availablePosition++;//para que la proxima vez que encontraras una posición disponible la almacenaras en el enderezo de memoria
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	3301      	adds	r3, #1
 80089a2:	60bb      	str	r3, [r7, #8]

                (*numAvailablePosition)++;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	781b      	ldrb	r3, [r3, #0]
 80089a8:	3301      	adds	r3, #1
 80089aa:	b2da      	uxtb	r2, r3
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	701a      	strb	r2, [r3, #0]
 80089b0:	e000      	b.n	80089b4 <getAvailableMoves+0x434>
                continue;
 80089b2:	bf00      	nop
        for(int j=0; j<8; j++)
 80089b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b6:	3301      	adds	r3, #1
 80089b8:	627b      	str	r3, [r7, #36]	; 0x24
 80089ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089bc:	2b07      	cmp	r3, #7
 80089be:	f77f adf9 	ble.w	80085b4 <getAvailableMoves+0x34>
    for(int i=0; i<8; i++)
 80089c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c4:	3301      	adds	r3, #1
 80089c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80089c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ca:	2b07      	cmp	r3, #7
 80089cc:	f77f adef 	ble.w	80085ae <getAvailableMoves+0x2e>
            }
        }
    }
}
 80089d0:	bf00      	nop
 80089d2:	3734      	adds	r7, #52	; 0x34
 80089d4:	46bd      	mov	sp, r7
 80089d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089da:	4770      	bx	lr
 80089dc:	20000444 	.word	0x20000444

080089e0 <insertMove>:


//inserta una posición en el tablero para el jugador, pasada por parámetro(player) si la posición fuera valida
//retorna 0 cuando la posición es invalida, retorna 1 cuando es valida
int insertMove(uint8_t i, uint8_t j, uint8_t player, uint8_t availablePosition[], uint8_t numAvailablePosition)//como necesito de saber las jugadas en el tablero, paso la matrix por parametros
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b084      	sub	sp, #16
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	603b      	str	r3, [r7, #0]
 80089e8:	4603      	mov	r3, r0
 80089ea:	71fb      	strb	r3, [r7, #7]
 80089ec:	460b      	mov	r3, r1
 80089ee:	71bb      	strb	r3, [r7, #6]
 80089f0:	4613      	mov	r3, r2
 80089f2:	717b      	strb	r3, [r7, #5]
	uint8_t n = (i+1)*10+(j+1);
 80089f4:	79fb      	ldrb	r3, [r7, #7]
 80089f6:	3301      	adds	r3, #1
 80089f8:	b2db      	uxtb	r3, r3
 80089fa:	461a      	mov	r2, r3
 80089fc:	0092      	lsls	r2, r2, #2
 80089fe:	4413      	add	r3, r2
 8008a00:	005b      	lsls	r3, r3, #1
 8008a02:	b2da      	uxtb	r2, r3
 8008a04:	79bb      	ldrb	r3, [r7, #6]
 8008a06:	4413      	add	r3, r2
 8008a08:	b2db      	uxtb	r3, r3
 8008a0a:	3301      	adds	r3, #1
 8008a0c:	73bb      	strb	r3, [r7, #14]

    for(uint8_t k=0; k<numAvailablePosition; k++)
 8008a0e:	2300      	movs	r3, #0
 8008a10:	73fb      	strb	r3, [r7, #15]
 8008a12:	e019      	b.n	8008a48 <insertMove+0x68>
    {
        if(availablePosition[k]==n)//quiero saber si el valor que la persona escribio esta en las posiciones disponibles
 8008a14:	7bfb      	ldrb	r3, [r7, #15]
 8008a16:	683a      	ldr	r2, [r7, #0]
 8008a18:	4413      	add	r3, r2
 8008a1a:	781b      	ldrb	r3, [r3, #0]
 8008a1c:	7bba      	ldrb	r2, [r7, #14]
 8008a1e:	429a      	cmp	r2, r3
 8008a20:	d10f      	bne.n	8008a42 <insertMove+0x62>
        {
            mat[i][j] = player;
 8008a22:	79fa      	ldrb	r2, [r7, #7]
 8008a24:	79bb      	ldrb	r3, [r7, #6]
 8008a26:	490d      	ldr	r1, [pc, #52]	; (8008a5c <insertMove+0x7c>)
 8008a28:	00d2      	lsls	r2, r2, #3
 8008a2a:	440a      	add	r2, r1
 8008a2c:	4413      	add	r3, r2
 8008a2e:	797a      	ldrb	r2, [r7, #5]
 8008a30:	701a      	strb	r2, [r3, #0]
            flip(player, i, j);
 8008a32:	79ba      	ldrb	r2, [r7, #6]
 8008a34:	79f9      	ldrb	r1, [r7, #7]
 8008a36:	797b      	ldrb	r3, [r7, #5]
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f7ff faff 	bl	800803c <flip>
            return 1;
 8008a3e:	2301      	movs	r3, #1
 8008a40:	e007      	b.n	8008a52 <insertMove+0x72>
    for(uint8_t k=0; k<numAvailablePosition; k++)
 8008a42:	7bfb      	ldrb	r3, [r7, #15]
 8008a44:	3301      	adds	r3, #1
 8008a46:	73fb      	strb	r3, [r7, #15]
 8008a48:	7bfa      	ldrb	r2, [r7, #15]
 8008a4a:	7e3b      	ldrb	r3, [r7, #24]
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d3e1      	bcc.n	8008a14 <insertMove+0x34>
        }
    }

    return 0;
 8008a50:	2300      	movs	r3, #0
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3710      	adds	r7, #16
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}
 8008a5a:	bf00      	nop
 8008a5c:	20000444 	.word	0x20000444

08008a60 <SCB_EnableICache>:
{
 8008a60:	b480      	push	{r7}
 8008a62:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8008a64:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008a68:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8008a6c:	4b0b      	ldr	r3, [pc, #44]	; (8008a9c <SCB_EnableICache+0x3c>)
 8008a6e:	2200      	movs	r2, #0
 8008a70:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8008a74:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008a78:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8008a7c:	4b07      	ldr	r3, [pc, #28]	; (8008a9c <SCB_EnableICache+0x3c>)
 8008a7e:	695b      	ldr	r3, [r3, #20]
 8008a80:	4a06      	ldr	r2, [pc, #24]	; (8008a9c <SCB_EnableICache+0x3c>)
 8008a82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a86:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8008a88:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008a8c:	f3bf 8f6f 	isb	sy
}
 8008a90:	bf00      	nop
 8008a92:	46bd      	mov	sp, r7
 8008a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a98:	4770      	bx	lr
 8008a9a:	bf00      	nop
 8008a9c:	e000ed00 	.word	0xe000ed00

08008aa0 <SCB_EnableDCache>:
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b085      	sub	sp, #20
 8008aa4:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8008aa6:	4b1d      	ldr	r3, [pc, #116]	; (8008b1c <SCB_EnableDCache+0x7c>)
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8008aae:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8008ab2:	4b1a      	ldr	r3, [pc, #104]	; (8008b1c <SCB_EnableDCache+0x7c>)
 8008ab4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ab8:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	0b5b      	lsrs	r3, r3, #13
 8008abe:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008ac2:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	08db      	lsrs	r3, r3, #3
 8008ac8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008acc:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	015a      	lsls	r2, r3, #5
 8008ad2:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8008ad6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8008ad8:	68ba      	ldr	r2, [r7, #8]
 8008ada:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8008adc:	490f      	ldr	r1, [pc, #60]	; (8008b1c <SCB_EnableDCache+0x7c>)
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	1e5a      	subs	r2, r3, #1
 8008ae8:	60ba      	str	r2, [r7, #8]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d1ef      	bne.n	8008ace <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	1e5a      	subs	r2, r3, #1
 8008af2:	60fa      	str	r2, [r7, #12]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d1e5      	bne.n	8008ac4 <SCB_EnableDCache+0x24>
 8008af8:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8008afc:	4b07      	ldr	r3, [pc, #28]	; (8008b1c <SCB_EnableDCache+0x7c>)
 8008afe:	695b      	ldr	r3, [r3, #20]
 8008b00:	4a06      	ldr	r2, [pc, #24]	; (8008b1c <SCB_EnableDCache+0x7c>)
 8008b02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b06:	6153      	str	r3, [r2, #20]
 8008b08:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008b0c:	f3bf 8f6f 	isb	sy
}
 8008b10:	bf00      	nop
 8008b12:	3714      	adds	r7, #20
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr
 8008b1c:	e000ed00 	.word	0xe000ed00

08008b20 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b082      	sub	sp, #8
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
	ADC1value = HAL_ADC_GetValue(hadc);//Leer el valor ADC
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f7fa f882 	bl	8002c32 <HAL_ADC_GetValue>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	461a      	mov	r2, r3
 8008b32:	4b03      	ldr	r3, [pc, #12]	; (8008b40 <HAL_ADC_ConvCpltCallback+0x20>)
 8008b34:	601a      	str	r2, [r3, #0]
}
 8008b36:	bf00      	nop
 8008b38:	3708      	adds	r7, #8
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}
 8008b3e:	bf00      	nop
 8008b40:	200005fc 	.word	0x200005fc

08008b44 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b082      	sub	sp, #8
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0)
 8008b4e:	88fb      	ldrh	r3, [r7, #6]
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d105      	bne.n	8008b60 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		resetPressed = 1;
 8008b54:	4b21      	ldr	r3, [pc, #132]	; (8008bdc <HAL_GPIO_EXTI_Callback+0x98>)
 8008b56:	2201      	movs	r2, #1
 8008b58:	701a      	strb	r2, [r3, #0]
		programPhase = 1;
 8008b5a:	4b21      	ldr	r3, [pc, #132]	; (8008be0 <HAL_GPIO_EXTI_Callback+0x9c>)
 8008b5c:	2201      	movs	r2, #1
 8008b5e:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_13)
 8008b60:	88fb      	ldrh	r3, [r7, #6]
 8008b62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b66:	d135      	bne.n	8008bd4 <HAL_GPIO_EXTI_Callback+0x90>
	{
		  BSP_TS_GetState(&TS_State);
 8008b68:	481e      	ldr	r0, [pc, #120]	; (8008be4 <HAL_GPIO_EXTI_Callback+0xa0>)
 8008b6a:	f7f9 fc49 	bl	8002400 <BSP_TS_GetState>

		  if(TS_State.touchDetected >= 1 && alreadyTouched==0)
 8008b6e:	4b1d      	ldr	r3, [pc, #116]	; (8008be4 <HAL_GPIO_EXTI_Callback+0xa0>)
 8008b70:	781b      	ldrb	r3, [r3, #0]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d027      	beq.n	8008bc6 <HAL_GPIO_EXTI_Callback+0x82>
 8008b76:	4b1c      	ldr	r3, [pc, #112]	; (8008be8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d123      	bne.n	8008bc6 <HAL_GPIO_EXTI_Callback+0x82>
		  {
			  alreadyTouched=1;
 8008b7e:	4b1a      	ldr	r3, [pc, #104]	; (8008be8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8008b80:	2201      	movs	r2, #1
 8008b82:	701a      	strb	r2, [r3, #0]

			  // Lineas=Y; Columnas=X
			  if(touchedX <= 7)
 8008b84:	4b19      	ldr	r3, [pc, #100]	; (8008bec <HAL_GPIO_EXTI_Callback+0xa8>)
 8008b86:	781b      	ldrb	r3, [r3, #0]
 8008b88:	2b07      	cmp	r3, #7
 8008b8a:	d813      	bhi.n	8008bb4 <HAL_GPIO_EXTI_Callback+0x70>
			  {
				  touchedX = TS_State.touchY[0]/60;
 8008b8c:	4b15      	ldr	r3, [pc, #84]	; (8008be4 <HAL_GPIO_EXTI_Callback+0xa0>)
 8008b8e:	88db      	ldrh	r3, [r3, #6]
 8008b90:	4a17      	ldr	r2, [pc, #92]	; (8008bf0 <HAL_GPIO_EXTI_Callback+0xac>)
 8008b92:	fba2 2303 	umull	r2, r3, r2, r3
 8008b96:	095b      	lsrs	r3, r3, #5
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	b2da      	uxtb	r2, r3
 8008b9c:	4b13      	ldr	r3, [pc, #76]	; (8008bec <HAL_GPIO_EXTI_Callback+0xa8>)
 8008b9e:	701a      	strb	r2, [r3, #0]
				  touchedY = TS_State.touchX[0]/60;
 8008ba0:	4b10      	ldr	r3, [pc, #64]	; (8008be4 <HAL_GPIO_EXTI_Callback+0xa0>)
 8008ba2:	885b      	ldrh	r3, [r3, #2]
 8008ba4:	4a12      	ldr	r2, [pc, #72]	; (8008bf0 <HAL_GPIO_EXTI_Callback+0xac>)
 8008ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8008baa:	095b      	lsrs	r3, r3, #5
 8008bac:	b29b      	uxth	r3, r3
 8008bae:	b2da      	uxtb	r2, r3
 8008bb0:	4b10      	ldr	r3, [pc, #64]	; (8008bf4 <HAL_GPIO_EXTI_Callback+0xb0>)
 8008bb2:	701a      	strb	r2, [r3, #0]
			  }

			  touchedPosX = TS_State.touchX[0];
 8008bb4:	4b0b      	ldr	r3, [pc, #44]	; (8008be4 <HAL_GPIO_EXTI_Callback+0xa0>)
 8008bb6:	885a      	ldrh	r2, [r3, #2]
 8008bb8:	4b0f      	ldr	r3, [pc, #60]	; (8008bf8 <HAL_GPIO_EXTI_Callback+0xb4>)
 8008bba:	801a      	strh	r2, [r3, #0]
			  touchedPosY = TS_State.touchY[0];
 8008bbc:	4b09      	ldr	r3, [pc, #36]	; (8008be4 <HAL_GPIO_EXTI_Callback+0xa0>)
 8008bbe:	88da      	ldrh	r2, [r3, #6]
 8008bc0:	4b0e      	ldr	r3, [pc, #56]	; (8008bfc <HAL_GPIO_EXTI_Callback+0xb8>)
 8008bc2:	801a      	strh	r2, [r3, #0]
		  {
			  alreadyTouched=0;
		  }
	}

}
 8008bc4:	e006      	b.n	8008bd4 <HAL_GPIO_EXTI_Callback+0x90>
		  else if(TS_State.touchDetected == 0)
 8008bc6:	4b07      	ldr	r3, [pc, #28]	; (8008be4 <HAL_GPIO_EXTI_Callback+0xa0>)
 8008bc8:	781b      	ldrb	r3, [r3, #0]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d102      	bne.n	8008bd4 <HAL_GPIO_EXTI_Callback+0x90>
			  alreadyTouched=0;
 8008bce:	4b06      	ldr	r3, [pc, #24]	; (8008be8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	701a      	strb	r2, [r3, #0]
}
 8008bd4:	bf00      	nop
 8008bd6:	3708      	adds	r7, #8
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}
 8008bdc:	200002de 	.word	0x200002de
 8008be0:	20000043 	.word	0x20000043
 8008be4:	20000658 	.word	0x20000658
 8008be8:	200002d8 	.word	0x200002d8
 8008bec:	200005b8 	.word	0x200005b8
 8008bf0:	88888889 	.word	0x88888889
 8008bf4:	20000484 	.word	0x20000484
 8008bf8:	20000486 	.word	0x20000486
 8008bfc:	20000488 	.word	0x20000488

08008c00 <insideRectangle>:

uint8_t insideRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height)
{
 8008c00:	b490      	push	{r4, r7}
 8008c02:	b082      	sub	sp, #8
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	4604      	mov	r4, r0
 8008c08:	4608      	mov	r0, r1
 8008c0a:	4611      	mov	r1, r2
 8008c0c:	461a      	mov	r2, r3
 8008c0e:	4623      	mov	r3, r4
 8008c10:	80fb      	strh	r3, [r7, #6]
 8008c12:	4603      	mov	r3, r0
 8008c14:	80bb      	strh	r3, [r7, #4]
 8008c16:	460b      	mov	r3, r1
 8008c18:	807b      	strh	r3, [r7, #2]
 8008c1a:	4613      	mov	r3, r2
 8008c1c:	803b      	strh	r3, [r7, #0]
	if(touchedPosX >= x && touchedPosX <= x+width)
 8008c1e:	4b11      	ldr	r3, [pc, #68]	; (8008c64 <insideRectangle+0x64>)
 8008c20:	881b      	ldrh	r3, [r3, #0]
 8008c22:	88fa      	ldrh	r2, [r7, #6]
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d816      	bhi.n	8008c56 <insideRectangle+0x56>
 8008c28:	4b0e      	ldr	r3, [pc, #56]	; (8008c64 <insideRectangle+0x64>)
 8008c2a:	881b      	ldrh	r3, [r3, #0]
 8008c2c:	4619      	mov	r1, r3
 8008c2e:	88fa      	ldrh	r2, [r7, #6]
 8008c30:	887b      	ldrh	r3, [r7, #2]
 8008c32:	4413      	add	r3, r2
 8008c34:	4299      	cmp	r1, r3
 8008c36:	dc0e      	bgt.n	8008c56 <insideRectangle+0x56>
	{
		if(touchedPosY >= y && touchedPosY <= y+height)
 8008c38:	4b0b      	ldr	r3, [pc, #44]	; (8008c68 <insideRectangle+0x68>)
 8008c3a:	881b      	ldrh	r3, [r3, #0]
 8008c3c:	88ba      	ldrh	r2, [r7, #4]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d809      	bhi.n	8008c56 <insideRectangle+0x56>
 8008c42:	4b09      	ldr	r3, [pc, #36]	; (8008c68 <insideRectangle+0x68>)
 8008c44:	881b      	ldrh	r3, [r3, #0]
 8008c46:	4619      	mov	r1, r3
 8008c48:	88ba      	ldrh	r2, [r7, #4]
 8008c4a:	883b      	ldrh	r3, [r7, #0]
 8008c4c:	4413      	add	r3, r2
 8008c4e:	4299      	cmp	r1, r3
 8008c50:	dc01      	bgt.n	8008c56 <insideRectangle+0x56>
		{
			return 1;
 8008c52:	2301      	movs	r3, #1
 8008c54:	e000      	b.n	8008c58 <insideRectangle+0x58>
		}
	}

	return 0;
 8008c56:	2300      	movs	r3, #0

}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3708      	adds	r7, #8
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bc90      	pop	{r4, r7}
 8008c60:	4770      	bx	lr
 8008c62:	bf00      	nop
 8008c64:	20000486 	.word	0x20000486
 8008c68:	20000488 	.word	0x20000488

08008c6c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b083      	sub	sp, #12
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a0e      	ldr	r2, [pc, #56]	; (8008cb4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d103      	bne.n	8008c86 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		twoSecondsPass = 1;
 8008c7e:	4b0e      	ldr	r3, [pc, #56]	; (8008cb8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8008c80:	2201      	movs	r2, #1
 8008c82:	701a      	strb	r2, [r3, #0]
	else if(htim->Instance == TIM7)
	{
		counterTurn--;
		counterGame++;
	}
}
 8008c84:	e010      	b.n	8008ca8 <HAL_TIM_PeriodElapsedCallback+0x3c>
	else if(htim->Instance == TIM7)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4a0c      	ldr	r2, [pc, #48]	; (8008cbc <HAL_TIM_PeriodElapsedCallback+0x50>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d10b      	bne.n	8008ca8 <HAL_TIM_PeriodElapsedCallback+0x3c>
		counterTurn--;
 8008c90:	4b0b      	ldr	r3, [pc, #44]	; (8008cc0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8008c92:	781b      	ldrb	r3, [r3, #0]
 8008c94:	3b01      	subs	r3, #1
 8008c96:	b2da      	uxtb	r2, r3
 8008c98:	4b09      	ldr	r3, [pc, #36]	; (8008cc0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8008c9a:	701a      	strb	r2, [r3, #0]
		counterGame++;
 8008c9c:	4b09      	ldr	r3, [pc, #36]	; (8008cc4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8008c9e:	881b      	ldrh	r3, [r3, #0]
 8008ca0:	3301      	adds	r3, #1
 8008ca2:	b29a      	uxth	r2, r3
 8008ca4:	4b07      	ldr	r3, [pc, #28]	; (8008cc4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8008ca6:	801a      	strh	r2, [r3, #0]
}
 8008ca8:	bf00      	nop
 8008caa:	370c      	adds	r7, #12
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr
 8008cb4:	40001000 	.word	0x40001000
 8008cb8:	200002d9 	.word	0x200002d9
 8008cbc:	40001400 	.word	0x40001400
 8008cc0:	20000042 	.word	0x20000042
 8008cc4:	200002dc 	.word	0x200002dc

08008cc8 <mainMenu>:

void mainMenu(void)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b084      	sub	sp, #16
 8008ccc:	af00      	add	r7, sp, #0
	char tempStr1[10];

	if(insideRectangle(xPlayerGame, yPlayerGame, widthPlayerGame, heightPlayerGame)==1)
 8008cce:	2346      	movs	r3, #70	; 0x46
 8008cd0:	f240 1227 	movw	r2, #295	; 0x127
 8008cd4:	21b4      	movs	r1, #180	; 0xb4
 8008cd6:	20fa      	movs	r0, #250	; 0xfa
 8008cd8:	f7ff ff92 	bl	8008c00 <insideRectangle>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	2b01      	cmp	r3, #1
 8008ce0:	d10c      	bne.n	8008cfc <mainMenu+0x34>
	{
    	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8008ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ce6:	f7f8 fc37 	bl	8001558 <BSP_LCD_Clear>

		init_game();
 8008cea:	f7ff f83f 	bl	8007d6c <init_game>
		programPhase=2;
 8008cee:	4b33      	ldr	r3, [pc, #204]	; (8008dbc <mainMenu+0xf4>)
 8008cf0:	2202      	movs	r2, #2
 8008cf2:	701a      	strb	r2, [r3, #0]
		counterGame = 0;
 8008cf4:	4b32      	ldr	r3, [pc, #200]	; (8008dc0 <mainMenu+0xf8>)
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	801a      	strh	r2, [r3, #0]

		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
		sprintf(tempStr1, "2 PLAYERS");
		BSP_LCD_DisplayStringAt(80, 350, (uint8_t*) tempStr1, RIGHT_MODE);
	}
}
 8008cfa:	e05b      	b.n	8008db4 <mainMenu+0xec>
	else if (insideRectangle(x1Player, y1Player, width1Player, height1Player)==1)
 8008cfc:	2341      	movs	r3, #65	; 0x41
 8008cfe:	22b9      	movs	r2, #185	; 0xb9
 8008d00:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8008d04:	2037      	movs	r0, #55	; 0x37
 8008d06:	f7ff ff7b 	bl	8008c00 <insideRectangle>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d123      	bne.n	8008d58 <mainMenu+0x90>
		numberPlayers=1;
 8008d10:	4b2c      	ldr	r3, [pc, #176]	; (8008dc4 <mainMenu+0xfc>)
 8008d12:	2201      	movs	r2, #1
 8008d14:	701a      	strb	r2, [r3, #0]
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8008d16:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8008d1a:	f7f8 fbbb 	bl	8001494 <BSP_LCD_SetTextColor>
		sprintf(tempStr1, "1 PLAYER");
 8008d1e:	1d3b      	adds	r3, r7, #4
 8008d20:	4a29      	ldr	r2, [pc, #164]	; (8008dc8 <mainMenu+0x100>)
 8008d22:	ca07      	ldmia	r2, {r0, r1, r2}
 8008d24:	c303      	stmia	r3!, {r0, r1}
 8008d26:	701a      	strb	r2, [r3, #0]
		BSP_LCD_DisplayStringAt(80, 350, (uint8_t*) tempStr1, LEFT_MODE);
 8008d28:	1d3a      	adds	r2, r7, #4
 8008d2a:	2303      	movs	r3, #3
 8008d2c:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8008d30:	2050      	movs	r0, #80	; 0x50
 8008d32:	f7f8 fc7d 	bl	8001630 <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8008d36:	f04f 30ff 	mov.w	r0, #4294967295
 8008d3a:	f7f8 fbab 	bl	8001494 <BSP_LCD_SetTextColor>
		sprintf(tempStr1, "2 PLAYERS");
 8008d3e:	4a23      	ldr	r2, [pc, #140]	; (8008dcc <mainMenu+0x104>)
 8008d40:	1d3b      	adds	r3, r7, #4
 8008d42:	ca07      	ldmia	r2, {r0, r1, r2}
 8008d44:	c303      	stmia	r3!, {r0, r1}
 8008d46:	801a      	strh	r2, [r3, #0]
		BSP_LCD_DisplayStringAt(80, 350, (uint8_t*) tempStr1, RIGHT_MODE);
 8008d48:	1d3a      	adds	r2, r7, #4
 8008d4a:	2302      	movs	r3, #2
 8008d4c:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8008d50:	2050      	movs	r0, #80	; 0x50
 8008d52:	f7f8 fc6d 	bl	8001630 <BSP_LCD_DisplayStringAt>
}
 8008d56:	e02d      	b.n	8008db4 <mainMenu+0xec>
	else if (insideRectangle(x2Players, y2Players, width2Players, height2Players)==1)
 8008d58:	2341      	movs	r3, #65	; 0x41
 8008d5a:	22b9      	movs	r2, #185	; 0xb9
 8008d5c:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8008d60:	f240 2026 	movw	r0, #550	; 0x226
 8008d64:	f7ff ff4c 	bl	8008c00 <insideRectangle>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	2b01      	cmp	r3, #1
 8008d6c:	d122      	bne.n	8008db4 <mainMenu+0xec>
		numberPlayers=2;
 8008d6e:	4b15      	ldr	r3, [pc, #84]	; (8008dc4 <mainMenu+0xfc>)
 8008d70:	2202      	movs	r2, #2
 8008d72:	701a      	strb	r2, [r3, #0]
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8008d74:	f04f 30ff 	mov.w	r0, #4294967295
 8008d78:	f7f8 fb8c 	bl	8001494 <BSP_LCD_SetTextColor>
		sprintf(tempStr1, "1 PLAYER");
 8008d7c:	1d3b      	adds	r3, r7, #4
 8008d7e:	4a12      	ldr	r2, [pc, #72]	; (8008dc8 <mainMenu+0x100>)
 8008d80:	ca07      	ldmia	r2, {r0, r1, r2}
 8008d82:	c303      	stmia	r3!, {r0, r1}
 8008d84:	701a      	strb	r2, [r3, #0]
		BSP_LCD_DisplayStringAt(80, 350, (uint8_t*) tempStr1, LEFT_MODE);
 8008d86:	1d3a      	adds	r2, r7, #4
 8008d88:	2303      	movs	r3, #3
 8008d8a:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8008d8e:	2050      	movs	r0, #80	; 0x50
 8008d90:	f7f8 fc4e 	bl	8001630 <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8008d94:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8008d98:	f7f8 fb7c 	bl	8001494 <BSP_LCD_SetTextColor>
		sprintf(tempStr1, "2 PLAYERS");
 8008d9c:	4a0b      	ldr	r2, [pc, #44]	; (8008dcc <mainMenu+0x104>)
 8008d9e:	1d3b      	adds	r3, r7, #4
 8008da0:	ca07      	ldmia	r2, {r0, r1, r2}
 8008da2:	c303      	stmia	r3!, {r0, r1}
 8008da4:	801a      	strh	r2, [r3, #0]
		BSP_LCD_DisplayStringAt(80, 350, (uint8_t*) tempStr1, RIGHT_MODE);
 8008da6:	1d3a      	adds	r2, r7, #4
 8008da8:	2302      	movs	r3, #2
 8008daa:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8008dae:	2050      	movs	r0, #80	; 0x50
 8008db0:	f7f8 fc3e 	bl	8001630 <BSP_LCD_DisplayStringAt>
}
 8008db4:	bf00      	nop
 8008db6:	3710      	adds	r7, #16
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}
 8008dbc:	20000043 	.word	0x20000043
 8008dc0:	200002dc 	.word	0x200002dc
 8008dc4:	20000041 	.word	0x20000041
 8008dc8:	0800aae0 	.word	0x0800aae0
 8008dcc:	0800aaec 	.word	0x0800aaec

08008dd0 <printMainMenu>:

void printMainMenu(void)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	af00      	add	r7, sp, #0
	BSP_LCD_SetBackColor(backColor);
 8008dd4:	481b      	ldr	r0, [pc, #108]	; (8008e44 <printMainMenu+0x74>)
 8008dd6:	f7f8 fb75 	bl	80014c4 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8008dda:	f04f 30ff 	mov.w	r0, #4294967295
 8008dde:	f7f8 fb59 	bl	8001494 <BSP_LCD_SetTextColor>

   // BSP_LCD_DrawBitmap(0, 0, image);

	BSP_LCD_DisplayStringAt(0, 10, (uint8_t *)"REVERSI", CENTER_MODE);//funcion quiere uint8_t
 8008de2:	2301      	movs	r3, #1
 8008de4:	4a18      	ldr	r2, [pc, #96]	; (8008e48 <printMainMenu+0x78>)
 8008de6:	210a      	movs	r1, #10
 8008de8:	2000      	movs	r0, #0
 8008dea:	f7f8 fc21 	bl	8001630 <BSP_LCD_DisplayStringAt>

	////////////////////////////////////
	//JUGAR JUEGO

	sprintf(auxStr, "PLAY GAME");
 8008dee:	4a17      	ldr	r2, [pc, #92]	; (8008e4c <printMainMenu+0x7c>)
 8008df0:	4b17      	ldr	r3, [pc, #92]	; (8008e50 <printMainMenu+0x80>)
 8008df2:	cb03      	ldmia	r3!, {r0, r1}
 8008df4:	6010      	str	r0, [r2, #0]
 8008df6:	6051      	str	r1, [r2, #4]
 8008df8:	881b      	ldrh	r3, [r3, #0]
 8008dfa:	8113      	strh	r3, [r2, #8]
	BSP_LCD_DisplayStringAt(0, 200, (uint8_t*) auxStr, CENTER_MODE);
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	4a13      	ldr	r2, [pc, #76]	; (8008e4c <printMainMenu+0x7c>)
 8008e00:	21c8      	movs	r1, #200	; 0xc8
 8008e02:	2000      	movs	r0, #0
 8008e04:	f7f8 fc14 	bl	8001630 <BSP_LCD_DisplayStringAt>

	////////////////////////////////////
	//1 JUGADOR

	sprintf(auxStr, "1 PLAYER");
 8008e08:	4a10      	ldr	r2, [pc, #64]	; (8008e4c <printMainMenu+0x7c>)
 8008e0a:	4b12      	ldr	r3, [pc, #72]	; (8008e54 <printMainMenu+0x84>)
 8008e0c:	cb03      	ldmia	r3!, {r0, r1}
 8008e0e:	6010      	str	r0, [r2, #0]
 8008e10:	6051      	str	r1, [r2, #4]
 8008e12:	781b      	ldrb	r3, [r3, #0]
 8008e14:	7213      	strb	r3, [r2, #8]
	BSP_LCD_DisplayStringAt(80, 350, (uint8_t*) auxStr, LEFT_MODE);
 8008e16:	2303      	movs	r3, #3
 8008e18:	4a0c      	ldr	r2, [pc, #48]	; (8008e4c <printMainMenu+0x7c>)
 8008e1a:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8008e1e:	2050      	movs	r0, #80	; 0x50
 8008e20:	f7f8 fc06 	bl	8001630 <BSP_LCD_DisplayStringAt>

	////////////////////////////////////
	//2 JUGADORES

	sprintf(auxStr, "2 PLAYERS");
 8008e24:	4a09      	ldr	r2, [pc, #36]	; (8008e4c <printMainMenu+0x7c>)
 8008e26:	4b0c      	ldr	r3, [pc, #48]	; (8008e58 <printMainMenu+0x88>)
 8008e28:	cb03      	ldmia	r3!, {r0, r1}
 8008e2a:	6010      	str	r0, [r2, #0]
 8008e2c:	6051      	str	r1, [r2, #4]
 8008e2e:	881b      	ldrh	r3, [r3, #0]
 8008e30:	8113      	strh	r3, [r2, #8]
	BSP_LCD_DisplayStringAt(80, 350, (uint8_t*) auxStr, RIGHT_MODE);
 8008e32:	2302      	movs	r3, #2
 8008e34:	4a05      	ldr	r2, [pc, #20]	; (8008e4c <printMainMenu+0x7c>)
 8008e36:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8008e3a:	2050      	movs	r0, #80	; 0x50
 8008e3c:	f7f8 fbf8 	bl	8001630 <BSP_LCD_DisplayStringAt>
}
 8008e40:	bf00      	nop
 8008e42:	bd80      	pop	{r7, pc}
 8008e44:	ffac7644 	.word	0xffac7644
 8008e48:	0800aaf8 	.word	0x0800aaf8
 8008e4c:	200004a8 	.word	0x200004a8
 8008e50:	0800ab00 	.word	0x0800ab00
 8008e54:	0800aae0 	.word	0x0800aae0
 8008e58:	0800aaec 	.word	0x0800aaec

08008e5c <printTime>:

void printTime(void)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b082      	sub	sp, #8
 8008e60:	af00      	add	r7, sp, #0
	uint8_t counterMin = 0;
 8008e62:	2300      	movs	r3, #0
 8008e64:	71fb      	strb	r3, [r7, #7]

	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8008e66:	4828      	ldr	r0, [pc, #160]	; (8008f08 <printTime+0xac>)
 8008e68:	f7f8 fb14 	bl	8001494 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8008e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e70:	f7f8 fb28 	bl	80014c4 <BSP_LCD_SetBackColor>

	sprintf(auxStr, "Time remaining: %.2d", counterTurn);
 8008e74:	4b25      	ldr	r3, [pc, #148]	; (8008f0c <printTime+0xb0>)
 8008e76:	781b      	ldrb	r3, [r3, #0]
 8008e78:	461a      	mov	r2, r3
 8008e7a:	4925      	ldr	r1, [pc, #148]	; (8008f10 <printTime+0xb4>)
 8008e7c:	4825      	ldr	r0, [pc, #148]	; (8008f14 <printTime+0xb8>)
 8008e7e:	f001 f9f7 	bl	800a270 <siprintf>
	BSP_LCD_DisplayStringAt(3, LINE(18), (uint8_t*) auxStr, RIGHT_MODE);
 8008e82:	f7f8 fb53 	bl	800152c <BSP_LCD_GetFont>
 8008e86:	4603      	mov	r3, r0
 8008e88:	88db      	ldrh	r3, [r3, #6]
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	00d2      	lsls	r2, r2, #3
 8008e8e:	4413      	add	r3, r2
 8008e90:	005b      	lsls	r3, r3, #1
 8008e92:	b299      	uxth	r1, r3
 8008e94:	2302      	movs	r3, #2
 8008e96:	4a1f      	ldr	r2, [pc, #124]	; (8008f14 <printTime+0xb8>)
 8008e98:	2003      	movs	r0, #3
 8008e9a:	f7f8 fbc9 	bl	8001630 <BSP_LCD_DisplayStringAt>

	counterMin = counterGame/60;
 8008e9e:	4b1e      	ldr	r3, [pc, #120]	; (8008f18 <printTime+0xbc>)
 8008ea0:	881b      	ldrh	r3, [r3, #0]
 8008ea2:	4a1e      	ldr	r2, [pc, #120]	; (8008f1c <printTime+0xc0>)
 8008ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8008ea8:	095b      	lsrs	r3, r3, #5
 8008eaa:	b29b      	uxth	r3, r3
 8008eac:	71fb      	strb	r3, [r7, #7]

	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8008eae:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8008eb2:	f7f8 faef 	bl	8001494 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8008eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8008eba:	f7f8 fb03 	bl	80014c4 <BSP_LCD_SetBackColor>

	sprintf(auxStr, "Total time: %.2d:%.2d", counterMin, counterGame %60);
 8008ebe:	79f8      	ldrb	r0, [r7, #7]
 8008ec0:	4b15      	ldr	r3, [pc, #84]	; (8008f18 <printTime+0xbc>)
 8008ec2:	881a      	ldrh	r2, [r3, #0]
 8008ec4:	4b15      	ldr	r3, [pc, #84]	; (8008f1c <printTime+0xc0>)
 8008ec6:	fba3 1302 	umull	r1, r3, r3, r2
 8008eca:	0959      	lsrs	r1, r3, #5
 8008ecc:	460b      	mov	r3, r1
 8008ece:	011b      	lsls	r3, r3, #4
 8008ed0:	1a5b      	subs	r3, r3, r1
 8008ed2:	009b      	lsls	r3, r3, #2
 8008ed4:	1ad3      	subs	r3, r2, r3
 8008ed6:	b29b      	uxth	r3, r3
 8008ed8:	4602      	mov	r2, r0
 8008eda:	4911      	ldr	r1, [pc, #68]	; (8008f20 <printTime+0xc4>)
 8008edc:	480d      	ldr	r0, [pc, #52]	; (8008f14 <printTime+0xb8>)
 8008ede:	f001 f9c7 	bl	800a270 <siprintf>

	BSP_LCD_DisplayStringAt(10, LINE(11), (uint8_t*) auxStr, RIGHT_MODE);
 8008ee2:	f7f8 fb23 	bl	800152c <BSP_LCD_GetFont>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	88db      	ldrh	r3, [r3, #6]
 8008eea:	461a      	mov	r2, r3
 8008eec:	0092      	lsls	r2, r2, #2
 8008eee:	441a      	add	r2, r3
 8008ef0:	0052      	lsls	r2, r2, #1
 8008ef2:	4413      	add	r3, r2
 8008ef4:	b299      	uxth	r1, r3
 8008ef6:	2302      	movs	r3, #2
 8008ef8:	4a06      	ldr	r2, [pc, #24]	; (8008f14 <printTime+0xb8>)
 8008efa:	200a      	movs	r0, #10
 8008efc:	f7f8 fb98 	bl	8001630 <BSP_LCD_DisplayStringAt>
}
 8008f00:	bf00      	nop
 8008f02:	3708      	adds	r7, #8
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}
 8008f08:	ffff0000 	.word	0xffff0000
 8008f0c:	20000042 	.word	0x20000042
 8008f10:	0800ab0c 	.word	0x0800ab0c
 8008f14:	200004a8 	.word	0x200004a8
 8008f18:	200002dc 	.word	0x200002dc
 8008f1c:	88888889 	.word	0x88888889
 8008f20:	0800ab24 	.word	0x0800ab24

08008f24 <mainCycle>:

//función importante del programa donde pasa todo el juego
uint8_t mainCycle(void)
{
 8008f24:	b590      	push	{r4, r7, lr}
 8008f26:	b095      	sub	sp, #84	; 0x54
 8008f28:	af02      	add	r7, sp, #8
    uint8_t availablePosition[8*8], numAvailablePosition;

	////////////////////////////
	// Player 1

	uint8_t validPosition = 0;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	getAvailableMoves(1, availablePosition, &numAvailablePosition);
 8008f30:	1cfa      	adds	r2, r7, #3
 8008f32:	1d3b      	adds	r3, r7, #4
 8008f34:	4619      	mov	r1, r3
 8008f36:	2001      	movs	r0, #1
 8008f38:	f7ff fb22 	bl	8008580 <getAvailableMoves>

	if(numAvailablePosition == 0)
 8008f3c:	78fb      	ldrb	r3, [r7, #3]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d101      	bne.n	8008f46 <mainCycle+0x22>
	{
		return 0;
 8008f42:	2300      	movs	r3, #0
 8008f44:	e0d7      	b.n	80090f6 <mainCycle+0x1d2>
	}

	sprintf(auxStr, "Player 1 Turn");
 8008f46:	4a6e      	ldr	r2, [pc, #440]	; (8009100 <mainCycle+0x1dc>)
 8008f48:	4b6e      	ldr	r3, [pc, #440]	; (8009104 <mainCycle+0x1e0>)
 8008f4a:	4614      	mov	r4, r2
 8008f4c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008f4e:	6020      	str	r0, [r4, #0]
 8008f50:	6061      	str	r1, [r4, #4]
 8008f52:	60a2      	str	r2, [r4, #8]
 8008f54:	881b      	ldrh	r3, [r3, #0]
 8008f56:	81a3      	strh	r3, [r4, #12]
	BSP_LCD_DisplayStringAt(45, LINE(17), (uint8_t*) auxStr, RIGHT_MODE);
 8008f58:	f7f8 fae8 	bl	800152c <BSP_LCD_GetFont>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	88db      	ldrh	r3, [r3, #6]
 8008f60:	461a      	mov	r2, r3
 8008f62:	0112      	lsls	r2, r2, #4
 8008f64:	4413      	add	r3, r2
 8008f66:	b299      	uxth	r1, r3
 8008f68:	2302      	movs	r3, #2
 8008f6a:	4a65      	ldr	r2, [pc, #404]	; (8009100 <mainCycle+0x1dc>)
 8008f6c:	202d      	movs	r0, #45	; 0x2d
 8008f6e:	f7f8 fb5f 	bl	8001630 <BSP_LCD_DisplayStringAt>
	counterTurn = 20;
 8008f72:	4b65      	ldr	r3, [pc, #404]	; (8009108 <mainCycle+0x1e4>)
 8008f74:	2214      	movs	r2, #20
 8008f76:	701a      	strb	r2, [r3, #0]

	while (validPosition == 0)
 8008f78:	e02d      	b.n	8008fd6 <mainCycle+0xb2>
	{
		printTime();
 8008f7a:	f7ff ff6f 	bl	8008e5c <printTime>

		if(counterTurn == 0)
 8008f7e:	4b62      	ldr	r3, [pc, #392]	; (8009108 <mainCycle+0x1e4>)
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d10b      	bne.n	8008f9e <mainCycle+0x7a>
		{
			passCounter1++;
 8008f86:	4b61      	ldr	r3, [pc, #388]	; (800910c <mainCycle+0x1e8>)
 8008f88:	781b      	ldrb	r3, [r3, #0]
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	b2da      	uxtb	r2, r3
 8008f8e:	4b5f      	ldr	r3, [pc, #380]	; (800910c <mainCycle+0x1e8>)
 8008f90:	701a      	strb	r2, [r3, #0]

			if(passCounter1 == 3)
 8008f92:	4b5e      	ldr	r3, [pc, #376]	; (800910c <mainCycle+0x1e8>)
 8008f94:	781b      	ldrb	r3, [r3, #0]
 8008f96:	2b03      	cmp	r3, #3
 8008f98:	d122      	bne.n	8008fe0 <mainCycle+0xbc>
			{
				return 1;
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	e0ab      	b.n	80090f6 <mainCycle+0x1d2>
			}

			break;
		}

		if(resetPressed == 1)
 8008f9e:	4b5c      	ldr	r3, [pc, #368]	; (8009110 <mainCycle+0x1ec>)
 8008fa0:	781b      	ldrb	r3, [r3, #0]
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	d101      	bne.n	8008faa <mainCycle+0x86>
		{
			return 1;
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	e0a5      	b.n	80090f6 <mainCycle+0x1d2>
		}

		// VER POSICION EN LA TOUCH SCREEN
		playeri = touchedX;
 8008faa:	4b5a      	ldr	r3, [pc, #360]	; (8009114 <mainCycle+0x1f0>)
 8008fac:	781b      	ldrb	r3, [r3, #0]
 8008fae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		playerj = touchedY;
 8008fb2:	4b59      	ldr	r3, [pc, #356]	; (8009118 <mainCycle+0x1f4>)
 8008fb4:	781b      	ldrb	r3, [r3, #0]
 8008fb6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

		validPosition = insertMove(playeri, playerj, 1, availablePosition, numAvailablePosition);
 8008fba:	78fb      	ldrb	r3, [r7, #3]
 8008fbc:	1d3a      	adds	r2, r7, #4
 8008fbe:	f897 1046 	ldrb.w	r1, [r7, #70]	; 0x46
 8008fc2:	f897 0047 	ldrb.w	r0, [r7, #71]	; 0x47
 8008fc6:	9300      	str	r3, [sp, #0]
 8008fc8:	4613      	mov	r3, r2
 8008fca:	2201      	movs	r2, #1
 8008fcc:	f7ff fd08 	bl	80089e0 <insertMove>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	while (validPosition == 0)
 8008fd6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d0cd      	beq.n	8008f7a <mainCycle+0x56>
 8008fde:	e000      	b.n	8008fe2 <mainCycle+0xbe>
			break;
 8008fe0:	bf00      	nop
	}

	printInfo();
 8008fe2:	f7fe ff5b 	bl	8007e9c <printInfo>

	printBoard();//vuelve a imprimir el tablero
 8008fe6:	f7fe fefb 	bl	8007de0 <printBoard>


	////////////////////////////
	// Player 2

	validPosition = 0;
 8008fea:	2300      	movs	r3, #0
 8008fec:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	counterTurn = 20;
 8008ff0:	4b45      	ldr	r3, [pc, #276]	; (8009108 <mainCycle+0x1e4>)
 8008ff2:	2214      	movs	r2, #20
 8008ff4:	701a      	strb	r2, [r3, #0]
	getAvailableMoves(2, availablePosition, &numAvailablePosition);
 8008ff6:	1cfa      	adds	r2, r7, #3
 8008ff8:	1d3b      	adds	r3, r7, #4
 8008ffa:	4619      	mov	r1, r3
 8008ffc:	2002      	movs	r0, #2
 8008ffe:	f7ff fabf 	bl	8008580 <getAvailableMoves>

	if(numAvailablePosition == 0)
 8009002:	78fb      	ldrb	r3, [r7, #3]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d101      	bne.n	800900c <mainCycle+0xe8>
	{
		return 0;
 8009008:	2300      	movs	r3, #0
 800900a:	e074      	b.n	80090f6 <mainCycle+0x1d2>
	}

	sprintf(auxStr, "Player 2 Turn");
 800900c:	4a3c      	ldr	r2, [pc, #240]	; (8009100 <mainCycle+0x1dc>)
 800900e:	4b43      	ldr	r3, [pc, #268]	; (800911c <mainCycle+0x1f8>)
 8009010:	4614      	mov	r4, r2
 8009012:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009014:	6020      	str	r0, [r4, #0]
 8009016:	6061      	str	r1, [r4, #4]
 8009018:	60a2      	str	r2, [r4, #8]
 800901a:	881b      	ldrh	r3, [r3, #0]
 800901c:	81a3      	strh	r3, [r4, #12]
	BSP_LCD_DisplayStringAt(45, LINE(17), (uint8_t*) auxStr, RIGHT_MODE);
 800901e:	f7f8 fa85 	bl	800152c <BSP_LCD_GetFont>
 8009022:	4603      	mov	r3, r0
 8009024:	88db      	ldrh	r3, [r3, #6]
 8009026:	461a      	mov	r2, r3
 8009028:	0112      	lsls	r2, r2, #4
 800902a:	4413      	add	r3, r2
 800902c:	b299      	uxth	r1, r3
 800902e:	2302      	movs	r3, #2
 8009030:	4a33      	ldr	r2, [pc, #204]	; (8009100 <mainCycle+0x1dc>)
 8009032:	202d      	movs	r0, #45	; 0x2d
 8009034:	f7f8 fafc 	bl	8001630 <BSP_LCD_DisplayStringAt>

	while (validPosition == 0)
 8009038:	e052      	b.n	80090e0 <mainCycle+0x1bc>
	{
		printTime();
 800903a:	f7ff ff0f 	bl	8008e5c <printTime>

		if(counterTurn == 0)
 800903e:	4b32      	ldr	r3, [pc, #200]	; (8009108 <mainCycle+0x1e4>)
 8009040:	781b      	ldrb	r3, [r3, #0]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d10b      	bne.n	800905e <mainCycle+0x13a>
		{
			passCounter2++;
 8009046:	4b36      	ldr	r3, [pc, #216]	; (8009120 <mainCycle+0x1fc>)
 8009048:	781b      	ldrb	r3, [r3, #0]
 800904a:	3301      	adds	r3, #1
 800904c:	b2da      	uxtb	r2, r3
 800904e:	4b34      	ldr	r3, [pc, #208]	; (8009120 <mainCycle+0x1fc>)
 8009050:	701a      	strb	r2, [r3, #0]

			if(passCounter2 == 3)
 8009052:	4b33      	ldr	r3, [pc, #204]	; (8009120 <mainCycle+0x1fc>)
 8009054:	781b      	ldrb	r3, [r3, #0]
 8009056:	2b03      	cmp	r3, #3
 8009058:	d147      	bne.n	80090ea <mainCycle+0x1c6>
			{
				return 1;
 800905a:	2301      	movs	r3, #1
 800905c:	e04b      	b.n	80090f6 <mainCycle+0x1d2>
			}

			break;
		}

		if(resetPressed == 1)
 800905e:	4b2c      	ldr	r3, [pc, #176]	; (8009110 <mainCycle+0x1ec>)
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	2b01      	cmp	r3, #1
 8009064:	d101      	bne.n	800906a <mainCycle+0x146>
		{
			return 1;
 8009066:	2301      	movs	r3, #1
 8009068:	e045      	b.n	80090f6 <mainCycle+0x1d2>
		}

		if(numberPlayers == 2)
 800906a:	4b2e      	ldr	r3, [pc, #184]	; (8009124 <mainCycle+0x200>)
 800906c:	781b      	ldrb	r3, [r3, #0]
 800906e:	2b02      	cmp	r3, #2
 8009070:	d108      	bne.n	8009084 <mainCycle+0x160>
		{
			playeri = touchedX;
 8009072:	4b28      	ldr	r3, [pc, #160]	; (8009114 <mainCycle+0x1f0>)
 8009074:	781b      	ldrb	r3, [r3, #0]
 8009076:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			playerj = touchedY;
 800907a:	4b27      	ldr	r3, [pc, #156]	; (8009118 <mainCycle+0x1f4>)
 800907c:	781b      	ldrb	r3, [r3, #0]
 800907e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8009082:	e01f      	b.n	80090c4 <mainCycle+0x1a0>
		}
		else // AI player
		{
			HAL_Delay(1000);
 8009084:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009088:	f7f9 fb62 	bl	8002750 <HAL_Delay>
			uint8_t selectedPosition = availablePosition[0];
 800908c:	793b      	ldrb	r3, [r7, #4]
 800908e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

			playeri = (selectedPosition / 10) - 1;//la función insertMove requiere los parametros separados
 8009092:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8009096:	4a24      	ldr	r2, [pc, #144]	; (8009128 <mainCycle+0x204>)
 8009098:	fba2 2303 	umull	r2, r3, r2, r3
 800909c:	08db      	lsrs	r3, r3, #3
 800909e:	b2db      	uxtb	r3, r3
 80090a0:	3b01      	subs	r3, #1
 80090a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			playerj = (selectedPosition % 10) - 1;
 80090a6:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 80090aa:	4b1f      	ldr	r3, [pc, #124]	; (8009128 <mainCycle+0x204>)
 80090ac:	fba3 1302 	umull	r1, r3, r3, r2
 80090b0:	08d9      	lsrs	r1, r3, #3
 80090b2:	460b      	mov	r3, r1
 80090b4:	009b      	lsls	r3, r3, #2
 80090b6:	440b      	add	r3, r1
 80090b8:	005b      	lsls	r3, r3, #1
 80090ba:	1ad3      	subs	r3, r2, r3
 80090bc:	b2db      	uxtb	r3, r3
 80090be:	3b01      	subs	r3, #1
 80090c0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

		}

		validPosition = insertMove(playeri, playerj, 2, availablePosition, numAvailablePosition);
 80090c4:	78fb      	ldrb	r3, [r7, #3]
 80090c6:	1d3a      	adds	r2, r7, #4
 80090c8:	f897 1046 	ldrb.w	r1, [r7, #70]	; 0x46
 80090cc:	f897 0047 	ldrb.w	r0, [r7, #71]	; 0x47
 80090d0:	9300      	str	r3, [sp, #0]
 80090d2:	4613      	mov	r3, r2
 80090d4:	2202      	movs	r2, #2
 80090d6:	f7ff fc83 	bl	80089e0 <insertMove>
 80090da:	4603      	mov	r3, r0
 80090dc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	while (validPosition == 0)
 80090e0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d0a8      	beq.n	800903a <mainCycle+0x116>
 80090e8:	e000      	b.n	80090ec <mainCycle+0x1c8>
			break;
 80090ea:	bf00      	nop
	}

	printInfo();
 80090ec:	f7fe fed6 	bl	8007e9c <printInfo>
	printBoard();//vuelve a imprimir el tablero
 80090f0:	f7fe fe76 	bl	8007de0 <printBoard>

	return numAvailablePosition;
 80090f4:	78fb      	ldrb	r3, [r7, #3]
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	374c      	adds	r7, #76	; 0x4c
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd90      	pop	{r4, r7, pc}
 80090fe:	bf00      	nop
 8009100:	200004a8 	.word	0x200004a8
 8009104:	0800ab3c 	.word	0x0800ab3c
 8009108:	20000042 	.word	0x20000042
 800910c:	200002da 	.word	0x200002da
 8009110:	200002de 	.word	0x200002de
 8009114:	200005b8 	.word	0x200005b8
 8009118:	20000484 	.word	0x20000484
 800911c:	0800ab4c 	.word	0x0800ab4c
 8009120:	200002db 	.word	0x200002db
 8009124:	20000041 	.word	0x20000041
 8009128:	cccccccd 	.word	0xcccccccd

0800912c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800912c:	b5b0      	push	{r4, r5, r7, lr}
 800912e:	b084      	sub	sp, #16
 8009130:	af00      	add	r7, sp, #0
  uint8_t winner;
  /* USER CODE END 1 */
  

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8009132:	f7ff fc95 	bl	8008a60 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8009136:	f7ff fcb3 	bl	8008aa0 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800913a:	f7f9 faab 	bl	8002694 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800913e:	f000 f94b 	bl	80093d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009142:	f000 fcd3 	bl	8009aec <MX_GPIO_Init>
  MX_DMA2D_Init();
 8009146:	f000 fa35 	bl	80095b4 <MX_DMA2D_Init>
  MX_FMC_Init();
 800914a:	f000 fc81 	bl	8009a50 <MX_FMC_Init>
  MX_LTDC_Init();
 800914e:	f000 fb5d 	bl	800980c <MX_LTDC_Init>
  MX_ADC1_Init();
 8009152:	f000 f9db 	bl	800950c <MX_ADC1_Init>
  MX_DSIHOST_DSI_Init();
 8009156:	f000 fa65 	bl	8009624 <MX_DSIHOST_DSI_Init>
  MX_TIM6_Init();
 800915a:	f000 fc09 	bl	8009970 <MX_TIM6_Init>
  MX_TIM7_Init();
 800915e:	f000 fc3f 	bl	80099e0 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  LCD_Config();
 8009162:	f000 fd6f 	bl	8009c44 <LCD_Config>
  HAL_ADC_Start_IT(&hadc1);
 8009166:	488b      	ldr	r0, [pc, #556]	; (8009394 <main+0x268>)
 8009168:	f7f9 fb58 	bl	800281c <HAL_ADC_Start_IT>
  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 800916c:	f7f8 f91a 	bl	80013a4 <BSP_LCD_GetXSize>
 8009170:	4603      	mov	r3, r0
 8009172:	b29c      	uxth	r4, r3
 8009174:	f7f8 f922 	bl	80013bc <BSP_LCD_GetYSize>
 8009178:	4603      	mov	r3, r0
 800917a:	b29b      	uxth	r3, r3
 800917c:	4619      	mov	r1, r3
 800917e:	4620      	mov	r0, r4
 8009180:	f7f9 f8ac 	bl	80022dc <BSP_TS_Init>
  BSP_TS_ITConfig();
 8009184:	f7f9 f90a 	bl	800239c <BSP_TS_ITConfig>
  HAL_TIM_Base_Start_IT(&htim6);
 8009188:	4883      	ldr	r0, [pc, #524]	; (8009398 <main+0x26c>)
 800918a:	f7fe f9c7 	bl	800751c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 800918e:	4883      	ldr	r0, [pc, #524]	; (800939c <main+0x270>)
 8009190:	f7fe f9c4 	bl	800751c <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(programPhase == 1)
 8009194:	4b82      	ldr	r3, [pc, #520]	; (80093a0 <main+0x274>)
 8009196:	781b      	ldrb	r3, [r3, #0]
 8009198:	2b01      	cmp	r3, #1
 800919a:	d10b      	bne.n	80091b4 <main+0x88>
	  {
		  if(resetPressed == 1)
 800919c:	4b81      	ldr	r3, [pc, #516]	; (80093a4 <main+0x278>)
 800919e:	781b      	ldrb	r3, [r3, #0]
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	d104      	bne.n	80091ae <main+0x82>
		  {
			  resetPressed = 0;
 80091a4:	4b7f      	ldr	r3, [pc, #508]	; (80093a4 <main+0x278>)
 80091a6:	2200      	movs	r2, #0
 80091a8:	701a      	strb	r2, [r3, #0]
			  printMainMenu();
 80091aa:	f7ff fe11 	bl	8008dd0 <printMainMenu>
		  }

		  mainMenu();
 80091ae:	f7ff fd8b 	bl	8008cc8 <mainMenu>
 80091b2:	e7ef      	b.n	8009194 <main+0x68>
	  }
	  else if(programPhase == 2)
 80091b4:	4b7a      	ldr	r3, [pc, #488]	; (80093a0 <main+0x274>)
 80091b6:	781b      	ldrb	r3, [r3, #0]
 80091b8:	2b02      	cmp	r3, #2
 80091ba:	d1eb      	bne.n	8009194 <main+0x68>
	  {
		  ////////////////////////////////////
		  // TEMPERATURE
		  if(twoSecondsPass == 1)
 80091bc:	4b7a      	ldr	r3, [pc, #488]	; (80093a8 <main+0x27c>)
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	d137      	bne.n	8009234 <main+0x108>
		  {
			  temperature = ((((ADC1value * VREF)/MAX_CONVERTED_VALUE) - VSENS_AT_AMBIENT_TEMP) * 10 / AVG_SLOPE) + AMBIENT_TEMP;
 80091c4:	4b79      	ldr	r3, [pc, #484]	; (80093ac <main+0x280>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f640 42e4 	movw	r2, #3300	; 0xce4
 80091cc:	fb02 f303 	mul.w	r3, r2, r3
 80091d0:	4a77      	ldr	r2, [pc, #476]	; (80093b0 <main+0x284>)
 80091d2:	fb82 1203 	smull	r1, r2, r2, r3
 80091d6:	441a      	add	r2, r3
 80091d8:	12d2      	asrs	r2, r2, #11
 80091da:	17db      	asrs	r3, r3, #31
 80091dc:	1ad3      	subs	r3, r2, r3
 80091de:	f5a3 723e 	sub.w	r2, r3, #760	; 0x2f8
 80091e2:	4613      	mov	r3, r2
 80091e4:	009b      	lsls	r3, r3, #2
 80091e6:	4413      	add	r3, r2
 80091e8:	005b      	lsls	r3, r3, #1
 80091ea:	4a72      	ldr	r2, [pc, #456]	; (80093b4 <main+0x288>)
 80091ec:	fb82 1203 	smull	r1, r2, r2, r3
 80091f0:	10d2      	asrs	r2, r2, #3
 80091f2:	17db      	asrs	r3, r3, #31
 80091f4:	1ad3      	subs	r3, r2, r3
 80091f6:	3319      	adds	r3, #25
 80091f8:	60bb      	str	r3, [r7, #8]

			  // Display temperature on the lcd

			  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80091fa:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80091fe:	f7f8 f949 	bl	8001494 <BSP_LCD_SetTextColor>
			  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8009202:	f04f 30ff 	mov.w	r0, #4294967295
 8009206:	f7f8 f95d 	bl	80014c4 <BSP_LCD_SetBackColor>

			  sprintf(auxStr, "Temperature %d C", temperature);
 800920a:	68ba      	ldr	r2, [r7, #8]
 800920c:	496a      	ldr	r1, [pc, #424]	; (80093b8 <main+0x28c>)
 800920e:	486b      	ldr	r0, [pc, #428]	; (80093bc <main+0x290>)
 8009210:	f001 f82e 	bl	800a270 <siprintf>

			  BSP_LCD_DisplayStringAt(20, LINE(3), (uint8_t*) auxStr, RIGHT_MODE);
 8009214:	f7f8 f98a 	bl	800152c <BSP_LCD_GetFont>
 8009218:	4603      	mov	r3, r0
 800921a:	88db      	ldrh	r3, [r3, #6]
 800921c:	461a      	mov	r2, r3
 800921e:	0052      	lsls	r2, r2, #1
 8009220:	4413      	add	r3, r2
 8009222:	b299      	uxth	r1, r3
 8009224:	2302      	movs	r3, #2
 8009226:	4a65      	ldr	r2, [pc, #404]	; (80093bc <main+0x290>)
 8009228:	2014      	movs	r0, #20
 800922a:	f7f8 fa01 	bl	8001630 <BSP_LCD_DisplayStringAt>

			  twoSecondsPass = 0;
 800922e:	4b5e      	ldr	r3, [pc, #376]	; (80093a8 <main+0x27c>)
 8009230:	2200      	movs	r2, #0
 8009232:	701a      	strb	r2, [r3, #0]

		  ////////////////////////////////////
		  // TOUCH SCREEN

		  // No more moves
		  if(mainCycle() == 0)
 8009234:	f7ff fe76 	bl	8008f24 <mainCycle>
 8009238:	4603      	mov	r3, r0
 800923a:	2b00      	cmp	r3, #0
 800923c:	d13b      	bne.n	80092b6 <main+0x18a>
		  {
			  //BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
			  //BSP_LCD_FillRect(485, LINE(5), BSP_LCD_GetXSize()-485, 300);

			  sprintf(auxStr, "GAME OVER!");
 800923e:	4a5f      	ldr	r2, [pc, #380]	; (80093bc <main+0x290>)
 8009240:	4b5f      	ldr	r3, [pc, #380]	; (80093c0 <main+0x294>)
 8009242:	cb03      	ldmia	r3!, {r0, r1}
 8009244:	6010      	str	r0, [r2, #0]
 8009246:	6051      	str	r1, [r2, #4]
 8009248:	8819      	ldrh	r1, [r3, #0]
 800924a:	789b      	ldrb	r3, [r3, #2]
 800924c:	8111      	strh	r1, [r2, #8]
 800924e:	7293      	strb	r3, [r2, #10]
			  BSP_LCD_DisplayStringAt(65, LINE(14), (uint8_t*) auxStr, RIGHT_MODE);
 8009250:	f7f8 f96c 	bl	800152c <BSP_LCD_GetFont>
 8009254:	4603      	mov	r3, r0
 8009256:	88db      	ldrh	r3, [r3, #6]
 8009258:	461a      	mov	r2, r3
 800925a:	00d2      	lsls	r2, r2, #3
 800925c:	1ad3      	subs	r3, r2, r3
 800925e:	005b      	lsls	r3, r3, #1
 8009260:	b299      	uxth	r1, r3
 8009262:	2302      	movs	r3, #2
 8009264:	4a55      	ldr	r2, [pc, #340]	; (80093bc <main+0x290>)
 8009266:	2041      	movs	r0, #65	; 0x41
 8009268:	f7f8 f9e2 	bl	8001630 <BSP_LCD_DisplayStringAt>

			  countPieces(&player1Counter, &player2Counter);
 800926c:	1dba      	adds	r2, r7, #6
 800926e:	1dfb      	adds	r3, r7, #7
 8009270:	4611      	mov	r1, r2
 8009272:	4618      	mov	r0, r3
 8009274:	f7fe fe9e 	bl	8007fb4 <countPieces>
			  if(player1Counter > player2Counter)
 8009278:	79fa      	ldrb	r2, [r7, #7]
 800927a:	79bb      	ldrb	r3, [r7, #6]
 800927c:	429a      	cmp	r2, r3
 800927e:	d902      	bls.n	8009286 <main+0x15a>
			  {
				 winner = 1;
 8009280:	2301      	movs	r3, #1
 8009282:	73fb      	strb	r3, [r7, #15]
 8009284:	e001      	b.n	800928a <main+0x15e>
			  }
			  else
			  {
				 winner= 2;
 8009286:	2302      	movs	r3, #2
 8009288:	73fb      	strb	r3, [r7, #15]
			  }

			  sprintf(auxStr, "Winner = Player %d", winner);
 800928a:	7bfb      	ldrb	r3, [r7, #15]
 800928c:	461a      	mov	r2, r3
 800928e:	494d      	ldr	r1, [pc, #308]	; (80093c4 <main+0x298>)
 8009290:	484a      	ldr	r0, [pc, #296]	; (80093bc <main+0x290>)
 8009292:	f000 ffed 	bl	800a270 <siprintf>
			  BSP_LCD_DisplayStringAt(10, LINE(15), (uint8_t*) auxStr, RIGHT_MODE);
 8009296:	f7f8 f949 	bl	800152c <BSP_LCD_GetFont>
 800929a:	4603      	mov	r3, r0
 800929c:	88db      	ldrh	r3, [r3, #6]
 800929e:	461a      	mov	r2, r3
 80092a0:	0112      	lsls	r2, r2, #4
 80092a2:	1ad3      	subs	r3, r2, r3
 80092a4:	b299      	uxth	r1, r3
 80092a6:	2302      	movs	r3, #2
 80092a8:	4a44      	ldr	r2, [pc, #272]	; (80093bc <main+0x290>)
 80092aa:	200a      	movs	r0, #10
 80092ac:	f7f8 f9c0 	bl	8001630 <BSP_LCD_DisplayStringAt>

			  programPhase=3;
 80092b0:	4b3b      	ldr	r3, [pc, #236]	; (80093a0 <main+0x274>)
 80092b2:	2203      	movs	r2, #3
 80092b4:	701a      	strb	r2, [r3, #0]
		  }

		  if(passCounter1 == 3)
 80092b6:	4b44      	ldr	r3, [pc, #272]	; (80093c8 <main+0x29c>)
 80092b8:	781b      	ldrb	r3, [r3, #0]
 80092ba:	2b03      	cmp	r3, #3
 80092bc:	d132      	bne.n	8009324 <main+0x1f8>
		  {
			  sprintf(auxStr, "GAME OVER!");
 80092be:	4a3f      	ldr	r2, [pc, #252]	; (80093bc <main+0x290>)
 80092c0:	4b3f      	ldr	r3, [pc, #252]	; (80093c0 <main+0x294>)
 80092c2:	cb03      	ldmia	r3!, {r0, r1}
 80092c4:	6010      	str	r0, [r2, #0]
 80092c6:	6051      	str	r1, [r2, #4]
 80092c8:	8819      	ldrh	r1, [r3, #0]
 80092ca:	789b      	ldrb	r3, [r3, #2]
 80092cc:	8111      	strh	r1, [r2, #8]
 80092ce:	7293      	strb	r3, [r2, #10]
			  BSP_LCD_DisplayStringAt(65, LINE(14), (uint8_t*) auxStr, RIGHT_MODE);
 80092d0:	f7f8 f92c 	bl	800152c <BSP_LCD_GetFont>
 80092d4:	4603      	mov	r3, r0
 80092d6:	88db      	ldrh	r3, [r3, #6]
 80092d8:	461a      	mov	r2, r3
 80092da:	00d2      	lsls	r2, r2, #3
 80092dc:	1ad3      	subs	r3, r2, r3
 80092de:	005b      	lsls	r3, r3, #1
 80092e0:	b299      	uxth	r1, r3
 80092e2:	2302      	movs	r3, #2
 80092e4:	4a35      	ldr	r2, [pc, #212]	; (80093bc <main+0x290>)
 80092e6:	2041      	movs	r0, #65	; 0x41
 80092e8:	f7f8 f9a2 	bl	8001630 <BSP_LCD_DisplayStringAt>
			  sprintf(auxStr, "Winner = Player2");
 80092ec:	4a33      	ldr	r2, [pc, #204]	; (80093bc <main+0x290>)
 80092ee:	4b37      	ldr	r3, [pc, #220]	; (80093cc <main+0x2a0>)
 80092f0:	4615      	mov	r5, r2
 80092f2:	461c      	mov	r4, r3
 80092f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80092f6:	6028      	str	r0, [r5, #0]
 80092f8:	6069      	str	r1, [r5, #4]
 80092fa:	60aa      	str	r2, [r5, #8]
 80092fc:	60eb      	str	r3, [r5, #12]
 80092fe:	7823      	ldrb	r3, [r4, #0]
 8009300:	742b      	strb	r3, [r5, #16]
			  BSP_LCD_DisplayStringAt(10, LINE(15), (uint8_t*) auxStr, RIGHT_MODE);
 8009302:	f7f8 f913 	bl	800152c <BSP_LCD_GetFont>
 8009306:	4603      	mov	r3, r0
 8009308:	88db      	ldrh	r3, [r3, #6]
 800930a:	461a      	mov	r2, r3
 800930c:	0112      	lsls	r2, r2, #4
 800930e:	1ad3      	subs	r3, r2, r3
 8009310:	b299      	uxth	r1, r3
 8009312:	2302      	movs	r3, #2
 8009314:	4a29      	ldr	r2, [pc, #164]	; (80093bc <main+0x290>)
 8009316:	200a      	movs	r0, #10
 8009318:	f7f8 f98a 	bl	8001630 <BSP_LCD_DisplayStringAt>

			  programPhase=3;
 800931c:	4b20      	ldr	r3, [pc, #128]	; (80093a0 <main+0x274>)
 800931e:	2203      	movs	r2, #3
 8009320:	701a      	strb	r2, [r3, #0]
 8009322:	e737      	b.n	8009194 <main+0x68>
		  }
		  else if(passCounter2 == 3)
 8009324:	4b2a      	ldr	r3, [pc, #168]	; (80093d0 <main+0x2a4>)
 8009326:	781b      	ldrb	r3, [r3, #0]
 8009328:	2b03      	cmp	r3, #3
 800932a:	f47f af33 	bne.w	8009194 <main+0x68>
		  {
			  sprintf(auxStr, "GAME OVER!");
 800932e:	4a23      	ldr	r2, [pc, #140]	; (80093bc <main+0x290>)
 8009330:	4b23      	ldr	r3, [pc, #140]	; (80093c0 <main+0x294>)
 8009332:	cb03      	ldmia	r3!, {r0, r1}
 8009334:	6010      	str	r0, [r2, #0]
 8009336:	6051      	str	r1, [r2, #4]
 8009338:	8819      	ldrh	r1, [r3, #0]
 800933a:	789b      	ldrb	r3, [r3, #2]
 800933c:	8111      	strh	r1, [r2, #8]
 800933e:	7293      	strb	r3, [r2, #10]
			  BSP_LCD_DisplayStringAt(65, LINE(14), (uint8_t*) auxStr, RIGHT_MODE);
 8009340:	f7f8 f8f4 	bl	800152c <BSP_LCD_GetFont>
 8009344:	4603      	mov	r3, r0
 8009346:	88db      	ldrh	r3, [r3, #6]
 8009348:	461a      	mov	r2, r3
 800934a:	00d2      	lsls	r2, r2, #3
 800934c:	1ad3      	subs	r3, r2, r3
 800934e:	005b      	lsls	r3, r3, #1
 8009350:	b299      	uxth	r1, r3
 8009352:	2302      	movs	r3, #2
 8009354:	4a19      	ldr	r2, [pc, #100]	; (80093bc <main+0x290>)
 8009356:	2041      	movs	r0, #65	; 0x41
 8009358:	f7f8 f96a 	bl	8001630 <BSP_LCD_DisplayStringAt>
			  sprintf(auxStr, "Winner = Player1");
 800935c:	4a17      	ldr	r2, [pc, #92]	; (80093bc <main+0x290>)
 800935e:	4b1d      	ldr	r3, [pc, #116]	; (80093d4 <main+0x2a8>)
 8009360:	4615      	mov	r5, r2
 8009362:	461c      	mov	r4, r3
 8009364:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009366:	6028      	str	r0, [r5, #0]
 8009368:	6069      	str	r1, [r5, #4]
 800936a:	60aa      	str	r2, [r5, #8]
 800936c:	60eb      	str	r3, [r5, #12]
 800936e:	7823      	ldrb	r3, [r4, #0]
 8009370:	742b      	strb	r3, [r5, #16]
			  BSP_LCD_DisplayStringAt(10, LINE(15), (uint8_t*) auxStr, RIGHT_MODE);
 8009372:	f7f8 f8db 	bl	800152c <BSP_LCD_GetFont>
 8009376:	4603      	mov	r3, r0
 8009378:	88db      	ldrh	r3, [r3, #6]
 800937a:	461a      	mov	r2, r3
 800937c:	0112      	lsls	r2, r2, #4
 800937e:	1ad3      	subs	r3, r2, r3
 8009380:	b299      	uxth	r1, r3
 8009382:	2302      	movs	r3, #2
 8009384:	4a0d      	ldr	r2, [pc, #52]	; (80093bc <main+0x290>)
 8009386:	200a      	movs	r0, #10
 8009388:	f7f8 f952 	bl	8001630 <BSP_LCD_DisplayStringAt>

			  programPhase=3;
 800938c:	4b04      	ldr	r3, [pc, #16]	; (80093a0 <main+0x274>)
 800938e:	2203      	movs	r2, #3
 8009390:	701a      	strb	r2, [r3, #0]
	  if(programPhase == 1)
 8009392:	e6ff      	b.n	8009194 <main+0x68>
 8009394:	20000570 	.word	0x20000570
 8009398:	200005bc 	.word	0x200005bc
 800939c:	20000698 	.word	0x20000698
 80093a0:	20000043 	.word	0x20000043
 80093a4:	200002de 	.word	0x200002de
 80093a8:	200002d9 	.word	0x200002d9
 80093ac:	200005fc 	.word	0x200005fc
 80093b0:	80080081 	.word	0x80080081
 80093b4:	51eb851f 	.word	0x51eb851f
 80093b8:	0800ab5c 	.word	0x0800ab5c
 80093bc:	200004a8 	.word	0x200004a8
 80093c0:	0800ab70 	.word	0x0800ab70
 80093c4:	0800ab7c 	.word	0x0800ab7c
 80093c8:	200002da 	.word	0x200002da
 80093cc:	0800ab90 	.word	0x0800ab90
 80093d0:	200002db 	.word	0x200002db
 80093d4:	0800aba4 	.word	0x0800aba4

080093d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b0b8      	sub	sp, #224	; 0xe0
 80093dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80093de:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80093e2:	2234      	movs	r2, #52	; 0x34
 80093e4:	2100      	movs	r1, #0
 80093e6:	4618      	mov	r0, r3
 80093e8:	f000 ff3a 	bl	800a260 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80093ec:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80093f0:	2200      	movs	r2, #0
 80093f2:	601a      	str	r2, [r3, #0]
 80093f4:	605a      	str	r2, [r3, #4]
 80093f6:	609a      	str	r2, [r3, #8]
 80093f8:	60da      	str	r2, [r3, #12]
 80093fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80093fc:	f107 0308 	add.w	r3, r7, #8
 8009400:	2290      	movs	r2, #144	; 0x90
 8009402:	2100      	movs	r1, #0
 8009404:	4618      	mov	r0, r3
 8009406:	f000 ff2b 	bl	800a260 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800940a:	4b3e      	ldr	r3, [pc, #248]	; (8009504 <SystemClock_Config+0x12c>)
 800940c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800940e:	4a3d      	ldr	r2, [pc, #244]	; (8009504 <SystemClock_Config+0x12c>)
 8009410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009414:	6413      	str	r3, [r2, #64]	; 0x40
 8009416:	4b3b      	ldr	r3, [pc, #236]	; (8009504 <SystemClock_Config+0x12c>)
 8009418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800941a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800941e:	607b      	str	r3, [r7, #4]
 8009420:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009422:	4b39      	ldr	r3, [pc, #228]	; (8009508 <SystemClock_Config+0x130>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	4a38      	ldr	r2, [pc, #224]	; (8009508 <SystemClock_Config+0x130>)
 8009428:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800942c:	6013      	str	r3, [r2, #0]
 800942e:	4b36      	ldr	r3, [pc, #216]	; (8009508 <SystemClock_Config+0x130>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009436:	603b      	str	r3, [r7, #0]
 8009438:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800943a:	2301      	movs	r3, #1
 800943c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009440:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009444:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009448:	2302      	movs	r3, #2
 800944a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800944e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009452:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 8009456:	2319      	movs	r3, #25
 8009458:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 400;
 800945c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8009460:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009464:	2302      	movs	r3, #2
 8009466:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800946a:	2302      	movs	r3, #2
 800946c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009470:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8009474:	4618      	mov	r0, r3
 8009476:	f7fc ff75 	bl	8006364 <HAL_RCC_OscConfig>
 800947a:	4603      	mov	r3, r0
 800947c:	2b00      	cmp	r3, #0
 800947e:	d001      	beq.n	8009484 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8009480:	f000 fbf9 	bl	8009c76 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8009484:	f7fc ff1e 	bl	80062c4 <HAL_PWREx_EnableOverDrive>
 8009488:	4603      	mov	r3, r0
 800948a:	2b00      	cmp	r3, #0
 800948c:	d001      	beq.n	8009492 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800948e:	f000 fbf2 	bl	8009c76 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009492:	230f      	movs	r3, #15
 8009494:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009498:	2302      	movs	r3, #2
 800949a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800949e:	2300      	movs	r3, #0
 80094a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80094a4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80094a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80094ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80094b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80094b4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80094b8:	2106      	movs	r1, #6
 80094ba:	4618      	mov	r0, r3
 80094bc:	f7fd f9c4 	bl	8006848 <HAL_RCC_ClockConfig>
 80094c0:	4603      	mov	r3, r0
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d001      	beq.n	80094ca <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80094c6:	f000 fbd6 	bl	8009c76 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80094ca:	2308      	movs	r3, #8
 80094cc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80094ce:	23c0      	movs	r3, #192	; 0xc0
 80094d0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80094d2:	2302      	movs	r3, #2
 80094d4:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80094d6:	2302      	movs	r3, #2
 80094d8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 80094da:	2300      	movs	r3, #0
 80094dc:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80094de:	2301      	movs	r3, #1
 80094e0:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80094e2:	2300      	movs	r3, #0
 80094e4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80094e6:	f107 0308 	add.w	r3, r7, #8
 80094ea:	4618      	mov	r0, r3
 80094ec:	f7fd fb46 	bl	8006b7c <HAL_RCCEx_PeriphCLKConfig>
 80094f0:	4603      	mov	r3, r0
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d001      	beq.n	80094fa <SystemClock_Config+0x122>
  {
    Error_Handler();
 80094f6:	f000 fbbe 	bl	8009c76 <Error_Handler>
  }
}
 80094fa:	bf00      	nop
 80094fc:	37e0      	adds	r7, #224	; 0xe0
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}
 8009502:	bf00      	nop
 8009504:	40023800 	.word	0x40023800
 8009508:	40007000 	.word	0x40007000

0800950c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b084      	sub	sp, #16
 8009510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8009512:	463b      	mov	r3, r7
 8009514:	2200      	movs	r2, #0
 8009516:	601a      	str	r2, [r3, #0]
 8009518:	605a      	str	r2, [r3, #4]
 800951a:	609a      	str	r2, [r3, #8]
 800951c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800951e:	4b21      	ldr	r3, [pc, #132]	; (80095a4 <MX_ADC1_Init+0x98>)
 8009520:	4a21      	ldr	r2, [pc, #132]	; (80095a8 <MX_ADC1_Init+0x9c>)
 8009522:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8009524:	4b1f      	ldr	r3, [pc, #124]	; (80095a4 <MX_ADC1_Init+0x98>)
 8009526:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800952a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800952c:	4b1d      	ldr	r3, [pc, #116]	; (80095a4 <MX_ADC1_Init+0x98>)
 800952e:	2200      	movs	r2, #0
 8009530:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8009532:	4b1c      	ldr	r3, [pc, #112]	; (80095a4 <MX_ADC1_Init+0x98>)
 8009534:	2200      	movs	r2, #0
 8009536:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8009538:	4b1a      	ldr	r3, [pc, #104]	; (80095a4 <MX_ADC1_Init+0x98>)
 800953a:	2201      	movs	r2, #1
 800953c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800953e:	4b19      	ldr	r3, [pc, #100]	; (80095a4 <MX_ADC1_Init+0x98>)
 8009540:	2200      	movs	r2, #0
 8009542:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8009546:	4b17      	ldr	r3, [pc, #92]	; (80095a4 <MX_ADC1_Init+0x98>)
 8009548:	2200      	movs	r2, #0
 800954a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800954c:	4b15      	ldr	r3, [pc, #84]	; (80095a4 <MX_ADC1_Init+0x98>)
 800954e:	4a17      	ldr	r2, [pc, #92]	; (80095ac <MX_ADC1_Init+0xa0>)
 8009550:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009552:	4b14      	ldr	r3, [pc, #80]	; (80095a4 <MX_ADC1_Init+0x98>)
 8009554:	2200      	movs	r2, #0
 8009556:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8009558:	4b12      	ldr	r3, [pc, #72]	; (80095a4 <MX_ADC1_Init+0x98>)
 800955a:	2201      	movs	r2, #1
 800955c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800955e:	4b11      	ldr	r3, [pc, #68]	; (80095a4 <MX_ADC1_Init+0x98>)
 8009560:	2200      	movs	r2, #0
 8009562:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8009566:	4b0f      	ldr	r3, [pc, #60]	; (80095a4 <MX_ADC1_Init+0x98>)
 8009568:	2201      	movs	r2, #1
 800956a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800956c:	480d      	ldr	r0, [pc, #52]	; (80095a4 <MX_ADC1_Init+0x98>)
 800956e:	f7f9 f911 	bl	8002794 <HAL_ADC_Init>
 8009572:	4603      	mov	r3, r0
 8009574:	2b00      	cmp	r3, #0
 8009576:	d001      	beq.n	800957c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8009578:	f000 fb7d 	bl	8009c76 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800957c:	4b0c      	ldr	r3, [pc, #48]	; (80095b0 <MX_ADC1_Init+0xa4>)
 800957e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8009580:	2301      	movs	r3, #1
 8009582:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8009584:	2303      	movs	r3, #3
 8009586:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009588:	463b      	mov	r3, r7
 800958a:	4619      	mov	r1, r3
 800958c:	4805      	ldr	r0, [pc, #20]	; (80095a4 <MX_ADC1_Init+0x98>)
 800958e:	f7f9 fb71 	bl	8002c74 <HAL_ADC_ConfigChannel>
 8009592:	4603      	mov	r3, r0
 8009594:	2b00      	cmp	r3, #0
 8009596:	d001      	beq.n	800959c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8009598:	f000 fb6d 	bl	8009c76 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800959c:	bf00      	nop
 800959e:	3710      	adds	r7, #16
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}
 80095a4:	20000570 	.word	0x20000570
 80095a8:	40012000 	.word	0x40012000
 80095ac:	0f000001 	.word	0x0f000001
 80095b0:	10000012 	.word	0x10000012

080095b4 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80095b8:	4b18      	ldr	r3, [pc, #96]	; (800961c <MX_DMA2D_Init+0x68>)
 80095ba:	4a19      	ldr	r2, [pc, #100]	; (8009620 <MX_DMA2D_Init+0x6c>)
 80095bc:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80095be:	4b17      	ldr	r3, [pc, #92]	; (800961c <MX_DMA2D_Init+0x68>)
 80095c0:	2200      	movs	r2, #0
 80095c2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80095c4:	4b15      	ldr	r3, [pc, #84]	; (800961c <MX_DMA2D_Init+0x68>)
 80095c6:	2200      	movs	r2, #0
 80095c8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80095ca:	4b14      	ldr	r3, [pc, #80]	; (800961c <MX_DMA2D_Init+0x68>)
 80095cc:	2200      	movs	r2, #0
 80095ce:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80095d0:	4b12      	ldr	r3, [pc, #72]	; (800961c <MX_DMA2D_Init+0x68>)
 80095d2:	2200      	movs	r2, #0
 80095d4:	639a      	str	r2, [r3, #56]	; 0x38
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80095d6:	4b11      	ldr	r3, [pc, #68]	; (800961c <MX_DMA2D_Init+0x68>)
 80095d8:	2200      	movs	r2, #0
 80095da:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80095dc:	4b0f      	ldr	r3, [pc, #60]	; (800961c <MX_DMA2D_Init+0x68>)
 80095de:	2200      	movs	r2, #0
 80095e0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80095e2:	4b0e      	ldr	r3, [pc, #56]	; (800961c <MX_DMA2D_Init+0x68>)
 80095e4:	2200      	movs	r2, #0
 80095e6:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 80095e8:	4b0c      	ldr	r3, [pc, #48]	; (800961c <MX_DMA2D_Init+0x68>)
 80095ea:	2200      	movs	r2, #0
 80095ec:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 80095ee:	4b0b      	ldr	r3, [pc, #44]	; (800961c <MX_DMA2D_Init+0x68>)
 80095f0:	2200      	movs	r2, #0
 80095f2:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80095f4:	4809      	ldr	r0, [pc, #36]	; (800961c <MX_DMA2D_Init+0x68>)
 80095f6:	f7fa f843 	bl	8003680 <HAL_DMA2D_Init>
 80095fa:	4603      	mov	r3, r0
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d001      	beq.n	8009604 <MX_DMA2D_Init+0x50>
  {
    Error_Handler();
 8009600:	f000 fb39 	bl	8009c76 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8009604:	2101      	movs	r1, #1
 8009606:	4805      	ldr	r0, [pc, #20]	; (800961c <MX_DMA2D_Init+0x68>)
 8009608:	f7fa f9a8 	bl	800395c <HAL_DMA2D_ConfigLayer>
 800960c:	4603      	mov	r3, r0
 800960e:	2b00      	cmp	r3, #0
 8009610:	d001      	beq.n	8009616 <MX_DMA2D_Init+0x62>
  {
    Error_Handler();
 8009612:	f000 fb30 	bl	8009c76 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8009616:	bf00      	nop
 8009618:	bd80      	pop	{r7, pc}
 800961a:	bf00      	nop
 800961c:	20000600 	.word	0x20000600
 8009620:	4002b000 	.word	0x4002b000

08009624 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b0aa      	sub	sp, #168	; 0xa8
 8009628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 800962a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800962e:	2200      	movs	r2, #0
 8009630:	601a      	str	r2, [r3, #0]
 8009632:	605a      	str	r2, [r3, #4]
 8009634:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8009636:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800963a:	2224      	movs	r2, #36	; 0x24
 800963c:	2100      	movs	r1, #0
 800963e:	4618      	mov	r0, r3
 8009640:	f000 fe0e 	bl	800a260 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8009644:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009648:	2200      	movs	r2, #0
 800964a:	601a      	str	r2, [r3, #0]
 800964c:	605a      	str	r2, [r3, #4]
 800964e:	609a      	str	r2, [r3, #8]
 8009650:	60da      	str	r2, [r3, #12]
 8009652:	611a      	str	r2, [r3, #16]
 8009654:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 8009656:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800965a:	2234      	movs	r2, #52	; 0x34
 800965c:	2100      	movs	r1, #0
 800965e:	4618      	mov	r0, r3
 8009660:	f000 fdfe 	bl	800a260 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8009664:	463b      	mov	r3, r7
 8009666:	222c      	movs	r2, #44	; 0x2c
 8009668:	2100      	movs	r1, #0
 800966a:	4618      	mov	r0, r3
 800966c:	f000 fdf8 	bl	800a260 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8009670:	4b64      	ldr	r3, [pc, #400]	; (8009804 <MX_DSIHOST_DSI_Init+0x1e0>)
 8009672:	4a65      	ldr	r2, [pc, #404]	; (8009808 <MX_DSIHOST_DSI_Init+0x1e4>)
 8009674:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8009676:	4b63      	ldr	r3, [pc, #396]	; (8009804 <MX_DSIHOST_DSI_Init+0x1e0>)
 8009678:	2200      	movs	r2, #0
 800967a:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 800967c:	4b61      	ldr	r3, [pc, #388]	; (8009804 <MX_DSIHOST_DSI_Init+0x1e0>)
 800967e:	2204      	movs	r2, #4
 8009680:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 8009682:	4b60      	ldr	r3, [pc, #384]	; (8009804 <MX_DSIHOST_DSI_Init+0x1e0>)
 8009684:	2200      	movs	r2, #0
 8009686:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 20;
 8009688:	2314      	movs	r3, #20
 800968a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 800968e:	2301      	movs	r3, #1
 8009690:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8009694:	2300      	movs	r3, #0
 8009696:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 800969a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800969e:	4619      	mov	r1, r3
 80096a0:	4858      	ldr	r0, [pc, #352]	; (8009804 <MX_DSIHOST_DSI_Init+0x1e0>)
 80096a2:	f7fa fadd 	bl	8003c60 <HAL_DSI_Init>
 80096a6:	4603      	mov	r3, r0
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d001      	beq.n	80096b0 <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 80096ac:	f000 fae3 	bl	8009c76 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 80096b0:	2301      	movs	r3, #1
 80096b2:	67bb      	str	r3, [r7, #120]	; 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 80096b4:	2300      	movs	r3, #0
 80096b6:	67fb      	str	r3, [r7, #124]	; 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 80096b8:	2300      	movs	r3, #0
 80096ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 80096be:	2300      	movs	r3, #0
 80096c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 80096c4:	2300      	movs	r3, #0
 80096c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 80096ca:	2300      	movs	r3, #0
 80096cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 80096d0:	2300      	movs	r3, #0
 80096d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 80096d6:	2300      	movs	r3, #0
 80096d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.BTATimeout = 0;
 80096dc:	2300      	movs	r3, #0
 80096de:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 80096e2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80096e6:	4619      	mov	r1, r3
 80096e8:	4846      	ldr	r0, [pc, #280]	; (8009804 <MX_DSIHOST_DSI_Init+0x1e0>)
 80096ea:	f7fb f8f5 	bl	80048d8 <HAL_DSI_ConfigHostTimeouts>
 80096ee:	4603      	mov	r3, r0
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d001      	beq.n	80096f8 <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 80096f4:	f000 fabf 	bl	8009c76 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 80096f8:	231c      	movs	r3, #28
 80096fa:	663b      	str	r3, [r7, #96]	; 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 80096fc:	2321      	movs	r3, #33	; 0x21
 80096fe:	667b      	str	r3, [r7, #100]	; 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 8009700:	230f      	movs	r3, #15
 8009702:	66bb      	str	r3, [r7, #104]	; 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 8009704:	2319      	movs	r3, #25
 8009706:	66fb      	str	r3, [r7, #108]	; 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 8009708:	2300      	movs	r3, #0
 800970a:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.StopWaitTime = 0;
 800970c:	2300      	movs	r3, #0
 800970e:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8009710:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009714:	4619      	mov	r1, r3
 8009716:	483b      	ldr	r0, [pc, #236]	; (8009804 <MX_DSIHOST_DSI_Init+0x1e0>)
 8009718:	f7fb f874 	bl	8004804 <HAL_DSI_ConfigPhyTimer>
 800971c:	4603      	mov	r3, r0
 800971e:	2b00      	cmp	r3, #0
 8009720:	d001      	beq.n	8009726 <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 8009722:	f000 faa8 	bl	8009c76 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8009726:	2104      	movs	r1, #4
 8009728:	4836      	ldr	r0, [pc, #216]	; (8009804 <MX_DSIHOST_DSI_Init+0x1e0>)
 800972a:	f7fb f843 	bl	80047b4 <HAL_DSI_ConfigFlowControl>
 800972e:	4603      	mov	r3, r0
 8009730:	2b00      	cmp	r3, #0
 8009732:	d001      	beq.n	8009738 <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 8009734:	f000 fa9f 	bl	8009c76 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8009738:	f242 7110 	movw	r1, #10000	; 0x2710
 800973c:	4831      	ldr	r0, [pc, #196]	; (8009804 <MX_DSIHOST_DSI_Init+0x1e0>)
 800973e:	f7fb fa89 	bl	8004c54 <HAL_DSI_SetLowPowerRXFilter>
 8009742:	4603      	mov	r3, r0
 8009744:	2b00      	cmp	r3, #0
 8009746:	d001      	beq.n	800974c <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 8009748:	f000 fa95 	bl	8009c76 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 800974c:	2100      	movs	r1, #0
 800974e:	482d      	ldr	r0, [pc, #180]	; (8009804 <MX_DSIHOST_DSI_Init+0x1e0>)
 8009750:	f7fa fc14 	bl	8003f7c <HAL_DSI_ConfigErrorMonitor>
 8009754:	4603      	mov	r3, r0
 8009756:	2b00      	cmp	r3, #0
 8009758:	d001      	beq.n	800975e <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 800975a:	f000 fa8c 	bl	8009c76 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_DISABLE;
 800975e:	2300      	movs	r3, #0
 8009760:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8009762:	2300      	movs	r3, #0
 8009764:	633b      	str	r3, [r7, #48]	; 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_DISABLE;
 8009766:	2300      	movs	r3, #0
 8009768:	637b      	str	r3, [r7, #52]	; 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 800976a:	2300      	movs	r3, #0
 800976c:	63bb      	str	r3, [r7, #56]	; 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_DISABLE;
 800976e:	2300      	movs	r3, #0
 8009770:	63fb      	str	r3, [r7, #60]	; 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8009772:	2300      	movs	r3, #0
 8009774:	643b      	str	r3, [r7, #64]	; 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_DISABLE;
 8009776:	2300      	movs	r3, #0
 8009778:	647b      	str	r3, [r7, #68]	; 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 800977a:	2300      	movs	r3, #0
 800977c:	64bb      	str	r3, [r7, #72]	; 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_DISABLE;
 800977e:	2300      	movs	r3, #0
 8009780:	64fb      	str	r3, [r7, #76]	; 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8009782:	2300      	movs	r3, #0
 8009784:	653b      	str	r3, [r7, #80]	; 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8009786:	2300      	movs	r3, #0
 8009788:	657b      	str	r3, [r7, #84]	; 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_DISABLE;
 800978a:	2300      	movs	r3, #0
 800978c:	65bb      	str	r3, [r7, #88]	; 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 800978e:	2300      	movs	r3, #0
 8009790:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8009792:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009796:	4619      	mov	r1, r3
 8009798:	481a      	ldr	r0, [pc, #104]	; (8009804 <MX_DSIHOST_DSI_Init+0x1e0>)
 800979a:	f7fa ffad 	bl	80046f8 <HAL_DSI_ConfigCommand>
 800979e:	4603      	mov	r3, r0
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d001      	beq.n	80097a8 <MX_DSIHOST_DSI_Init+0x184>
  {
    Error_Handler();
 80097a4:	f000 fa67 	bl	8009c76 <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 80097a8:	2300      	movs	r3, #0
 80097aa:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 80097ac:	2305      	movs	r3, #5
 80097ae:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 640;
 80097b0:	f44f 7320 	mov.w	r3, #640	; 0x280
 80097b4:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 80097b6:	2310      	movs	r3, #16
 80097b8:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 80097ba:	2300      	movs	r3, #0
 80097bc:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 80097be:	2304      	movs	r3, #4
 80097c0:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 80097c2:	2302      	movs	r3, #2
 80097c4:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 80097c6:	2300      	movs	r3, #0
 80097c8:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 80097ca:	2300      	movs	r3, #0
 80097cc:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 80097ce:	2340      	movs	r3, #64	; 0x40
 80097d0:	627b      	str	r3, [r7, #36]	; 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_DISABLE;
 80097d2:	2300      	movs	r3, #0
 80097d4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 80097d6:	463b      	mov	r3, r7
 80097d8:	4619      	mov	r1, r3
 80097da:	480a      	ldr	r0, [pc, #40]	; (8009804 <MX_DSIHOST_DSI_Init+0x1e0>)
 80097dc:	f7fa feb2 	bl	8004544 <HAL_DSI_ConfigAdaptedCommandMode>
 80097e0:	4603      	mov	r3, r0
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d001      	beq.n	80097ea <MX_DSIHOST_DSI_Init+0x1c6>
  {
    Error_Handler();
 80097e6:	f000 fa46 	bl	8009c76 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 80097ea:	2100      	movs	r1, #0
 80097ec:	4805      	ldr	r0, [pc, #20]	; (8009804 <MX_DSIHOST_DSI_Init+0x1e0>)
 80097ee:	f7fa fc81 	bl	80040f4 <HAL_DSI_SetGenericVCID>
 80097f2:	4603      	mov	r3, r0
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d001      	beq.n	80097fc <MX_DSIHOST_DSI_Init+0x1d8>
  {
    Error_Handler();
 80097f8:	f000 fa3d 	bl	8009c76 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 80097fc:	bf00      	nop
 80097fe:	37a8      	adds	r7, #168	; 0xa8
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}
 8009804:	2000048c 	.word	0x2000048c
 8009808:	40016c00 	.word	0x40016c00

0800980c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b09a      	sub	sp, #104	; 0x68
 8009810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8009812:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009816:	2234      	movs	r2, #52	; 0x34
 8009818:	2100      	movs	r1, #0
 800981a:	4618      	mov	r0, r3
 800981c:	f000 fd20 	bl	800a260 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8009820:	463b      	mov	r3, r7
 8009822:	2234      	movs	r2, #52	; 0x34
 8009824:	2100      	movs	r1, #0
 8009826:	4618      	mov	r0, r3
 8009828:	f000 fd1a 	bl	800a260 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800982c:	4b4e      	ldr	r3, [pc, #312]	; (8009968 <MX_LTDC_Init+0x15c>)
 800982e:	4a4f      	ldr	r2, [pc, #316]	; (800996c <MX_LTDC_Init+0x160>)
 8009830:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8009832:	4b4d      	ldr	r3, [pc, #308]	; (8009968 <MX_LTDC_Init+0x15c>)
 8009834:	2200      	movs	r2, #0
 8009836:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8009838:	4b4b      	ldr	r3, [pc, #300]	; (8009968 <MX_LTDC_Init+0x15c>)
 800983a:	2200      	movs	r2, #0
 800983c:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800983e:	4b4a      	ldr	r3, [pc, #296]	; (8009968 <MX_LTDC_Init+0x15c>)
 8009840:	2200      	movs	r2, #0
 8009842:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8009844:	4b48      	ldr	r3, [pc, #288]	; (8009968 <MX_LTDC_Init+0x15c>)
 8009846:	2200      	movs	r2, #0
 8009848:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 800984a:	4b47      	ldr	r3, [pc, #284]	; (8009968 <MX_LTDC_Init+0x15c>)
 800984c:	2207      	movs	r2, #7
 800984e:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8009850:	4b45      	ldr	r3, [pc, #276]	; (8009968 <MX_LTDC_Init+0x15c>)
 8009852:	2203      	movs	r2, #3
 8009854:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8009856:	4b44      	ldr	r3, [pc, #272]	; (8009968 <MX_LTDC_Init+0x15c>)
 8009858:	220e      	movs	r2, #14
 800985a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 800985c:	4b42      	ldr	r3, [pc, #264]	; (8009968 <MX_LTDC_Init+0x15c>)
 800985e:	2205      	movs	r2, #5
 8009860:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8009862:	4b41      	ldr	r3, [pc, #260]	; (8009968 <MX_LTDC_Init+0x15c>)
 8009864:	f240 228e 	movw	r2, #654	; 0x28e
 8009868:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 800986a:	4b3f      	ldr	r3, [pc, #252]	; (8009968 <MX_LTDC_Init+0x15c>)
 800986c:	f240 12e5 	movw	r2, #485	; 0x1e5
 8009870:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8009872:	4b3d      	ldr	r3, [pc, #244]	; (8009968 <MX_LTDC_Init+0x15c>)
 8009874:	f44f 7225 	mov.w	r2, #660	; 0x294
 8009878:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 800987a:	4b3b      	ldr	r3, [pc, #236]	; (8009968 <MX_LTDC_Init+0x15c>)
 800987c:	f240 12e7 	movw	r2, #487	; 0x1e7
 8009880:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8009882:	4b39      	ldr	r3, [pc, #228]	; (8009968 <MX_LTDC_Init+0x15c>)
 8009884:	2200      	movs	r2, #0
 8009886:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800988a:	4b37      	ldr	r3, [pc, #220]	; (8009968 <MX_LTDC_Init+0x15c>)
 800988c:	2200      	movs	r2, #0
 800988e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8009892:	4b35      	ldr	r3, [pc, #212]	; (8009968 <MX_LTDC_Init+0x15c>)
 8009894:	2200      	movs	r2, #0
 8009896:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800989a:	4833      	ldr	r0, [pc, #204]	; (8009968 <MX_LTDC_Init+0x15c>)
 800989c:	f7fc fa1a 	bl	8005cd4 <HAL_LTDC_Init>
 80098a0:	4603      	mov	r3, r0
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d001      	beq.n	80098aa <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 80098a6:	f000 f9e6 	bl	8009c76 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80098aa:	2300      	movs	r3, #0
 80098ac:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 80098ae:	2300      	movs	r3, #0
 80098b0:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 80098b2:	2300      	movs	r3, #0
 80098b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 80098b6:	2300      	movs	r3, #0
 80098b8:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80098ba:	2300      	movs	r3, #0
 80098bc:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 80098be:	2300      	movs	r3, #0
 80098c0:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 80098c2:	2300      	movs	r3, #0
 80098c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80098c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098ca:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80098cc:	2305      	movs	r3, #5
 80098ce:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 80098d0:	2300      	movs	r3, #0
 80098d2:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 80098d4:	2300      	movs	r3, #0
 80098d6:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 80098d8:	2300      	movs	r3, #0
 80098da:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80098dc:	2300      	movs	r3, #0
 80098de:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 80098e2:	2300      	movs	r3, #0
 80098e4:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 80098e8:	2300      	movs	r3, #0
 80098ea:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80098ee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80098f2:	2200      	movs	r2, #0
 80098f4:	4619      	mov	r1, r3
 80098f6:	481c      	ldr	r0, [pc, #112]	; (8009968 <MX_LTDC_Init+0x15c>)
 80098f8:	f7fc fabc 	bl	8005e74 <HAL_LTDC_ConfigLayer>
 80098fc:	4603      	mov	r3, r0
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d001      	beq.n	8009906 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8009902:	f000 f9b8 	bl	8009c76 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8009906:	2300      	movs	r3, #0
 8009908:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800990a:	2300      	movs	r3, #0
 800990c:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800990e:	2300      	movs	r3, #0
 8009910:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8009912:	2300      	movs	r3, #0
 8009914:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8009916:	2300      	movs	r3, #0
 8009918:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 800991a:	2300      	movs	r3, #0
 800991c:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800991e:	2300      	movs	r3, #0
 8009920:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8009922:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009926:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8009928:	2305      	movs	r3, #5
 800992a:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 800992c:	2300      	movs	r3, #0
 800992e:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8009930:	2300      	movs	r3, #0
 8009932:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8009934:	2300      	movs	r3, #0
 8009936:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8009938:	2300      	movs	r3, #0
 800993a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800993e:	2300      	movs	r3, #0
 8009940:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8009944:	2300      	movs	r3, #0
 8009946:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800994a:	463b      	mov	r3, r7
 800994c:	2201      	movs	r2, #1
 800994e:	4619      	mov	r1, r3
 8009950:	4805      	ldr	r0, [pc, #20]	; (8009968 <MX_LTDC_Init+0x15c>)
 8009952:	f7fc fa8f 	bl	8005e74 <HAL_LTDC_ConfigLayer>
 8009956:	4603      	mov	r3, r0
 8009958:	2b00      	cmp	r3, #0
 800995a:	d001      	beq.n	8009960 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 800995c:	f000 f98b 	bl	8009c76 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8009960:	bf00      	nop
 8009962:	3768      	adds	r7, #104	; 0x68
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}
 8009968:	200004c8 	.word	0x200004c8
 800996c:	40016800 	.word	0x40016800

08009970 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b084      	sub	sp, #16
 8009974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009976:	1d3b      	adds	r3, r7, #4
 8009978:	2200      	movs	r2, #0
 800997a:	601a      	str	r2, [r3, #0]
 800997c:	605a      	str	r2, [r3, #4]
 800997e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8009980:	4b15      	ldr	r3, [pc, #84]	; (80099d8 <MX_TIM6_Init+0x68>)
 8009982:	4a16      	ldr	r2, [pc, #88]	; (80099dc <MX_TIM6_Init+0x6c>)
 8009984:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 19999;
 8009986:	4b14      	ldr	r3, [pc, #80]	; (80099d8 <MX_TIM6_Init+0x68>)
 8009988:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800998c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800998e:	4b12      	ldr	r3, [pc, #72]	; (80099d8 <MX_TIM6_Init+0x68>)
 8009990:	2200      	movs	r2, #0
 8009992:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8009994:	4b10      	ldr	r3, [pc, #64]	; (80099d8 <MX_TIM6_Init+0x68>)
 8009996:	f242 720f 	movw	r2, #9999	; 0x270f
 800999a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800999c:	4b0e      	ldr	r3, [pc, #56]	; (80099d8 <MX_TIM6_Init+0x68>)
 800999e:	2200      	movs	r2, #0
 80099a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80099a2:	480d      	ldr	r0, [pc, #52]	; (80099d8 <MX_TIM6_Init+0x68>)
 80099a4:	f7fd fd8f 	bl	80074c6 <HAL_TIM_Base_Init>
 80099a8:	4603      	mov	r3, r0
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d001      	beq.n	80099b2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80099ae:	f000 f962 	bl	8009c76 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80099b2:	2300      	movs	r3, #0
 80099b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80099b6:	2300      	movs	r3, #0
 80099b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80099ba:	1d3b      	adds	r3, r7, #4
 80099bc:	4619      	mov	r1, r3
 80099be:	4806      	ldr	r0, [pc, #24]	; (80099d8 <MX_TIM6_Init+0x68>)
 80099c0:	f7fd ffbe 	bl	8007940 <HAL_TIMEx_MasterConfigSynchronization>
 80099c4:	4603      	mov	r3, r0
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d001      	beq.n	80099ce <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80099ca:	f000 f954 	bl	8009c76 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80099ce:	bf00      	nop
 80099d0:	3710      	adds	r7, #16
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}
 80099d6:	bf00      	nop
 80099d8:	200005bc 	.word	0x200005bc
 80099dc:	40001000 	.word	0x40001000

080099e0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b084      	sub	sp, #16
 80099e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80099e6:	1d3b      	adds	r3, r7, #4
 80099e8:	2200      	movs	r2, #0
 80099ea:	601a      	str	r2, [r3, #0]
 80099ec:	605a      	str	r2, [r3, #4]
 80099ee:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80099f0:	4b15      	ldr	r3, [pc, #84]	; (8009a48 <MX_TIM7_Init+0x68>)
 80099f2:	4a16      	ldr	r2, [pc, #88]	; (8009a4c <MX_TIM7_Init+0x6c>)
 80099f4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9999;
 80099f6:	4b14      	ldr	r3, [pc, #80]	; (8009a48 <MX_TIM7_Init+0x68>)
 80099f8:	f242 720f 	movw	r2, #9999	; 0x270f
 80099fc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80099fe:	4b12      	ldr	r3, [pc, #72]	; (8009a48 <MX_TIM7_Init+0x68>)
 8009a00:	2200      	movs	r2, #0
 8009a02:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 8009a04:	4b10      	ldr	r3, [pc, #64]	; (8009a48 <MX_TIM7_Init+0x68>)
 8009a06:	f242 720f 	movw	r2, #9999	; 0x270f
 8009a0a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009a0c:	4b0e      	ldr	r3, [pc, #56]	; (8009a48 <MX_TIM7_Init+0x68>)
 8009a0e:	2200      	movs	r2, #0
 8009a10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8009a12:	480d      	ldr	r0, [pc, #52]	; (8009a48 <MX_TIM7_Init+0x68>)
 8009a14:	f7fd fd57 	bl	80074c6 <HAL_TIM_Base_Init>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d001      	beq.n	8009a22 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8009a1e:	f000 f92a 	bl	8009c76 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009a22:	2300      	movs	r3, #0
 8009a24:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009a26:	2300      	movs	r3, #0
 8009a28:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8009a2a:	1d3b      	adds	r3, r7, #4
 8009a2c:	4619      	mov	r1, r3
 8009a2e:	4806      	ldr	r0, [pc, #24]	; (8009a48 <MX_TIM7_Init+0x68>)
 8009a30:	f7fd ff86 	bl	8007940 <HAL_TIMEx_MasterConfigSynchronization>
 8009a34:	4603      	mov	r3, r0
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d001      	beq.n	8009a3e <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8009a3a:	f000 f91c 	bl	8009c76 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8009a3e:	bf00      	nop
 8009a40:	3710      	adds	r7, #16
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
 8009a46:	bf00      	nop
 8009a48:	20000698 	.word	0x20000698
 8009a4c:	40001400 	.word	0x40001400

08009a50 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b088      	sub	sp, #32
 8009a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8009a56:	1d3b      	adds	r3, r7, #4
 8009a58:	2200      	movs	r2, #0
 8009a5a:	601a      	str	r2, [r3, #0]
 8009a5c:	605a      	str	r2, [r3, #4]
 8009a5e:	609a      	str	r2, [r3, #8]
 8009a60:	60da      	str	r2, [r3, #12]
 8009a62:	611a      	str	r2, [r3, #16]
 8009a64:	615a      	str	r2, [r3, #20]
 8009a66:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8009a68:	4b1e      	ldr	r3, [pc, #120]	; (8009ae4 <MX_FMC_Init+0x94>)
 8009a6a:	4a1f      	ldr	r2, [pc, #124]	; (8009ae8 <MX_FMC_Init+0x98>)
 8009a6c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8009a6e:	4b1d      	ldr	r3, [pc, #116]	; (8009ae4 <MX_FMC_Init+0x94>)
 8009a70:	2201      	movs	r2, #1
 8009a72:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8009a74:	4b1b      	ldr	r3, [pc, #108]	; (8009ae4 <MX_FMC_Init+0x94>)
 8009a76:	2200      	movs	r2, #0
 8009a78:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8009a7a:	4b1a      	ldr	r3, [pc, #104]	; (8009ae4 <MX_FMC_Init+0x94>)
 8009a7c:	2208      	movs	r2, #8
 8009a7e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8009a80:	4b18      	ldr	r3, [pc, #96]	; (8009ae4 <MX_FMC_Init+0x94>)
 8009a82:	2220      	movs	r2, #32
 8009a84:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8009a86:	4b17      	ldr	r3, [pc, #92]	; (8009ae4 <MX_FMC_Init+0x94>)
 8009a88:	2240      	movs	r2, #64	; 0x40
 8009a8a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8009a8c:	4b15      	ldr	r3, [pc, #84]	; (8009ae4 <MX_FMC_Init+0x94>)
 8009a8e:	2280      	movs	r2, #128	; 0x80
 8009a90:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8009a92:	4b14      	ldr	r3, [pc, #80]	; (8009ae4 <MX_FMC_Init+0x94>)
 8009a94:	2200      	movs	r2, #0
 8009a96:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8009a98:	4b12      	ldr	r3, [pc, #72]	; (8009ae4 <MX_FMC_Init+0x94>)
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8009a9e:	4b11      	ldr	r3, [pc, #68]	; (8009ae4 <MX_FMC_Init+0x94>)
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8009aa4:	4b0f      	ldr	r3, [pc, #60]	; (8009ae4 <MX_FMC_Init+0x94>)
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8009aaa:	2310      	movs	r3, #16
 8009aac:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8009aae:	2310      	movs	r3, #16
 8009ab0:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8009ab2:	2310      	movs	r3, #16
 8009ab4:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8009ab6:	2310      	movs	r3, #16
 8009ab8:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8009aba:	2310      	movs	r3, #16
 8009abc:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8009abe:	2310      	movs	r3, #16
 8009ac0:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8009ac2:	2310      	movs	r3, #16
 8009ac4:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8009ac6:	1d3b      	adds	r3, r7, #4
 8009ac8:	4619      	mov	r1, r3
 8009aca:	4806      	ldr	r0, [pc, #24]	; (8009ae4 <MX_FMC_Init+0x94>)
 8009acc:	f7fd fc7c 	bl	80073c8 <HAL_SDRAM_Init>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d001      	beq.n	8009ada <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8009ad6:	f000 f8ce 	bl	8009c76 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8009ada:	bf00      	nop
 8009adc:	3720      	adds	r7, #32
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}
 8009ae2:	bf00      	nop
 8009ae4:	20000664 	.word	0x20000664
 8009ae8:	a0000140 	.word	0xa0000140

08009aec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b08e      	sub	sp, #56	; 0x38
 8009af0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009af2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009af6:	2200      	movs	r2, #0
 8009af8:	601a      	str	r2, [r3, #0]
 8009afa:	605a      	str	r2, [r3, #4]
 8009afc:	609a      	str	r2, [r3, #8]
 8009afe:	60da      	str	r2, [r3, #12]
 8009b00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009b02:	4b4c      	ldr	r3, [pc, #304]	; (8009c34 <MX_GPIO_Init+0x148>)
 8009b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b06:	4a4b      	ldr	r2, [pc, #300]	; (8009c34 <MX_GPIO_Init+0x148>)
 8009b08:	f043 0302 	orr.w	r3, r3, #2
 8009b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8009b0e:	4b49      	ldr	r3, [pc, #292]	; (8009c34 <MX_GPIO_Init+0x148>)
 8009b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b12:	f003 0302 	and.w	r3, r3, #2
 8009b16:	623b      	str	r3, [r7, #32]
 8009b18:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8009b1a:	4b46      	ldr	r3, [pc, #280]	; (8009c34 <MX_GPIO_Init+0x148>)
 8009b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b1e:	4a45      	ldr	r2, [pc, #276]	; (8009c34 <MX_GPIO_Init+0x148>)
 8009b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b24:	6313      	str	r3, [r2, #48]	; 0x30
 8009b26:	4b43      	ldr	r3, [pc, #268]	; (8009c34 <MX_GPIO_Init+0x148>)
 8009b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b2e:	61fb      	str	r3, [r7, #28]
 8009b30:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009b32:	4b40      	ldr	r3, [pc, #256]	; (8009c34 <MX_GPIO_Init+0x148>)
 8009b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b36:	4a3f      	ldr	r2, [pc, #252]	; (8009c34 <MX_GPIO_Init+0x148>)
 8009b38:	f043 0308 	orr.w	r3, r3, #8
 8009b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8009b3e:	4b3d      	ldr	r3, [pc, #244]	; (8009c34 <MX_GPIO_Init+0x148>)
 8009b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b42:	f003 0308 	and.w	r3, r3, #8
 8009b46:	61bb      	str	r3, [r7, #24]
 8009b48:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8009b4a:	4b3a      	ldr	r3, [pc, #232]	; (8009c34 <MX_GPIO_Init+0x148>)
 8009b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b4e:	4a39      	ldr	r2, [pc, #228]	; (8009c34 <MX_GPIO_Init+0x148>)
 8009b50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b54:	6313      	str	r3, [r2, #48]	; 0x30
 8009b56:	4b37      	ldr	r3, [pc, #220]	; (8009c34 <MX_GPIO_Init+0x148>)
 8009b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b5e:	617b      	str	r3, [r7, #20]
 8009b60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8009b62:	4b34      	ldr	r3, [pc, #208]	; (8009c34 <MX_GPIO_Init+0x148>)
 8009b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b66:	4a33      	ldr	r2, [pc, #204]	; (8009c34 <MX_GPIO_Init+0x148>)
 8009b68:	f043 0320 	orr.w	r3, r3, #32
 8009b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8009b6e:	4b31      	ldr	r3, [pc, #196]	; (8009c34 <MX_GPIO_Init+0x148>)
 8009b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b72:	f003 0320 	and.w	r3, r3, #32
 8009b76:	613b      	str	r3, [r7, #16]
 8009b78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009b7a:	4b2e      	ldr	r3, [pc, #184]	; (8009c34 <MX_GPIO_Init+0x148>)
 8009b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b7e:	4a2d      	ldr	r2, [pc, #180]	; (8009c34 <MX_GPIO_Init+0x148>)
 8009b80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b84:	6313      	str	r3, [r2, #48]	; 0x30
 8009b86:	4b2b      	ldr	r3, [pc, #172]	; (8009c34 <MX_GPIO_Init+0x148>)
 8009b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b8e:	60fb      	str	r3, [r7, #12]
 8009b90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009b92:	4b28      	ldr	r3, [pc, #160]	; (8009c34 <MX_GPIO_Init+0x148>)
 8009b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b96:	4a27      	ldr	r2, [pc, #156]	; (8009c34 <MX_GPIO_Init+0x148>)
 8009b98:	f043 0301 	orr.w	r3, r3, #1
 8009b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8009b9e:	4b25      	ldr	r3, [pc, #148]	; (8009c34 <MX_GPIO_Init+0x148>)
 8009ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ba2:	f003 0301 	and.w	r3, r3, #1
 8009ba6:	60bb      	str	r3, [r7, #8]
 8009ba8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8009baa:	4b22      	ldr	r3, [pc, #136]	; (8009c34 <MX_GPIO_Init+0x148>)
 8009bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bae:	4a21      	ldr	r2, [pc, #132]	; (8009c34 <MX_GPIO_Init+0x148>)
 8009bb0:	f043 0310 	orr.w	r3, r3, #16
 8009bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8009bb6:	4b1f      	ldr	r3, [pc, #124]	; (8009c34 <MX_GPIO_Init+0x148>)
 8009bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bba:	f003 0310 	and.w	r3, r3, #16
 8009bbe:	607b      	str	r3, [r7, #4]
 8009bc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8009bc2:	4b1c      	ldr	r3, [pc, #112]	; (8009c34 <MX_GPIO_Init+0x148>)
 8009bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bc6:	4a1b      	ldr	r2, [pc, #108]	; (8009c34 <MX_GPIO_Init+0x148>)
 8009bc8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8009bce:	4b19      	ldr	r3, [pc, #100]	; (8009c34 <MX_GPIO_Init+0x148>)
 8009bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009bd6:	603b      	str	r3, [r7, #0]
 8009bd8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PI13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8009bda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009bde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8009be0:	4b15      	ldr	r3, [pc, #84]	; (8009c38 <MX_GPIO_Init+0x14c>)
 8009be2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009be4:	2300      	movs	r3, #0
 8009be6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8009be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009bec:	4619      	mov	r1, r3
 8009bee:	4813      	ldr	r0, [pc, #76]	; (8009c3c <MX_GPIO_Init+0x150>)
 8009bf0:	f7fb f85e 	bl	8004cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8009bf8:	4b0f      	ldr	r3, [pc, #60]	; (8009c38 <MX_GPIO_Init+0x14c>)
 8009bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c04:	4619      	mov	r1, r3
 8009c06:	480e      	ldr	r0, [pc, #56]	; (8009c40 <MX_GPIO_Init+0x154>)
 8009c08:	f7fb f852 	bl	8004cb0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	2100      	movs	r1, #0
 8009c10:	2006      	movs	r0, #6
 8009c12:	f7f9 fb42 	bl	800329a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8009c16:	2006      	movs	r0, #6
 8009c18:	f7f9 fb5b 	bl	80032d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	2100      	movs	r1, #0
 8009c20:	2028      	movs	r0, #40	; 0x28
 8009c22:	f7f9 fb3a 	bl	800329a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8009c26:	2028      	movs	r0, #40	; 0x28
 8009c28:	f7f9 fb53 	bl	80032d2 <HAL_NVIC_EnableIRQ>

}
 8009c2c:	bf00      	nop
 8009c2e:	3738      	adds	r7, #56	; 0x38
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}
 8009c34:	40023800 	.word	0x40023800
 8009c38:	10110000 	.word	0x10110000
 8009c3c:	40022000 	.word	0x40022000
 8009c40:	40020000 	.word	0x40020000

08009c44 <LCD_Config>:

/* USER CODE BEGIN 4 */
static void LCD_Config(void)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b082      	sub	sp, #8
 8009c48:	af00      	add	r7, sp, #0
  uint32_t  lcd_status;

  /* Initialize the LCD */
  lcd_status = BSP_LCD_Init();
 8009c4a:	f7f7 fa26 	bl	800109a <BSP_LCD_Init>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	607b      	str	r3, [r7, #4]
  while(lcd_status != LCD_OK);//si LCD_init no fuera ok estaría en ciclo infinito
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d1fc      	bne.n	8009c52 <LCD_Config+0xe>

  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8009c58:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8009c5c:	2000      	movs	r0, #0
 8009c5e:	f7f7 fbb9 	bl	80013d4 <BSP_LCD_LayerDefaultInit>

  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8009c62:	f04f 30ff 	mov.w	r0, #4294967295
 8009c66:	f7f7 fc77 	bl	8001558 <BSP_LCD_Clear>

  printMainMenu();
 8009c6a:	f7ff f8b1 	bl	8008dd0 <printMainMenu>
}
 8009c6e:	bf00      	nop
 8009c70:	3708      	adds	r7, #8
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}

08009c76 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009c76:	b480      	push	{r7}
 8009c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8009c7a:	bf00      	nop
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c82:	4770      	bx	lr

08009c84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b083      	sub	sp, #12
 8009c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8009c8a:	4b0f      	ldr	r3, [pc, #60]	; (8009cc8 <HAL_MspInit+0x44>)
 8009c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c8e:	4a0e      	ldr	r2, [pc, #56]	; (8009cc8 <HAL_MspInit+0x44>)
 8009c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c94:	6413      	str	r3, [r2, #64]	; 0x40
 8009c96:	4b0c      	ldr	r3, [pc, #48]	; (8009cc8 <HAL_MspInit+0x44>)
 8009c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c9e:	607b      	str	r3, [r7, #4]
 8009ca0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009ca2:	4b09      	ldr	r3, [pc, #36]	; (8009cc8 <HAL_MspInit+0x44>)
 8009ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ca6:	4a08      	ldr	r2, [pc, #32]	; (8009cc8 <HAL_MspInit+0x44>)
 8009ca8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009cac:	6453      	str	r3, [r2, #68]	; 0x44
 8009cae:	4b06      	ldr	r3, [pc, #24]	; (8009cc8 <HAL_MspInit+0x44>)
 8009cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009cb6:	603b      	str	r3, [r7, #0]
 8009cb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009cba:	bf00      	nop
 8009cbc:	370c      	adds	r7, #12
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc4:	4770      	bx	lr
 8009cc6:	bf00      	nop
 8009cc8:	40023800 	.word	0x40023800

08009ccc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b084      	sub	sp, #16
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	4a0d      	ldr	r2, [pc, #52]	; (8009d10 <HAL_ADC_MspInit+0x44>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d113      	bne.n	8009d06 <HAL_ADC_MspInit+0x3a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8009cde:	4b0d      	ldr	r3, [pc, #52]	; (8009d14 <HAL_ADC_MspInit+0x48>)
 8009ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ce2:	4a0c      	ldr	r2, [pc, #48]	; (8009d14 <HAL_ADC_MspInit+0x48>)
 8009ce4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ce8:	6453      	str	r3, [r2, #68]	; 0x44
 8009cea:	4b0a      	ldr	r3, [pc, #40]	; (8009d14 <HAL_ADC_MspInit+0x48>)
 8009cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cf2:	60fb      	str	r3, [r7, #12]
 8009cf4:	68fb      	ldr	r3, [r7, #12]
    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	2100      	movs	r1, #0
 8009cfa:	2012      	movs	r0, #18
 8009cfc:	f7f9 facd 	bl	800329a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8009d00:	2012      	movs	r0, #18
 8009d02:	f7f9 fae6 	bl	80032d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8009d06:	bf00      	nop
 8009d08:	3710      	adds	r7, #16
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}
 8009d0e:	bf00      	nop
 8009d10:	40012000 	.word	0x40012000
 8009d14:	40023800 	.word	0x40023800

08009d18 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b085      	sub	sp, #20
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4a0a      	ldr	r2, [pc, #40]	; (8009d50 <HAL_DMA2D_MspInit+0x38>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d10b      	bne.n	8009d42 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8009d2a:	4b0a      	ldr	r3, [pc, #40]	; (8009d54 <HAL_DMA2D_MspInit+0x3c>)
 8009d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d2e:	4a09      	ldr	r2, [pc, #36]	; (8009d54 <HAL_DMA2D_MspInit+0x3c>)
 8009d30:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009d34:	6313      	str	r3, [r2, #48]	; 0x30
 8009d36:	4b07      	ldr	r3, [pc, #28]	; (8009d54 <HAL_DMA2D_MspInit+0x3c>)
 8009d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009d3e:	60fb      	str	r3, [r7, #12]
 8009d40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8009d42:	bf00      	nop
 8009d44:	3714      	adds	r7, #20
 8009d46:	46bd      	mov	sp, r7
 8009d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4c:	4770      	bx	lr
 8009d4e:	bf00      	nop
 8009d50:	4002b000 	.word	0x4002b000
 8009d54:	40023800 	.word	0x40023800

08009d58 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b08a      	sub	sp, #40	; 0x28
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009d60:	f107 0314 	add.w	r3, r7, #20
 8009d64:	2200      	movs	r2, #0
 8009d66:	601a      	str	r2, [r3, #0]
 8009d68:	605a      	str	r2, [r3, #4]
 8009d6a:	609a      	str	r2, [r3, #8]
 8009d6c:	60da      	str	r2, [r3, #12]
 8009d6e:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	4a17      	ldr	r2, [pc, #92]	; (8009dd4 <HAL_DSI_MspInit+0x7c>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d127      	bne.n	8009dca <HAL_DSI_MspInit+0x72>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8009d7a:	4b17      	ldr	r3, [pc, #92]	; (8009dd8 <HAL_DSI_MspInit+0x80>)
 8009d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d7e:	4a16      	ldr	r2, [pc, #88]	; (8009dd8 <HAL_DSI_MspInit+0x80>)
 8009d80:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009d84:	6453      	str	r3, [r2, #68]	; 0x44
 8009d86:	4b14      	ldr	r3, [pc, #80]	; (8009dd8 <HAL_DSI_MspInit+0x80>)
 8009d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d8e:	613b      	str	r3, [r7, #16]
 8009d90:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8009d92:	4b11      	ldr	r3, [pc, #68]	; (8009dd8 <HAL_DSI_MspInit+0x80>)
 8009d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d96:	4a10      	ldr	r2, [pc, #64]	; (8009dd8 <HAL_DSI_MspInit+0x80>)
 8009d98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8009d9e:	4b0e      	ldr	r3, [pc, #56]	; (8009dd8 <HAL_DSI_MspInit+0x80>)
 8009da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009da2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009da6:	60fb      	str	r3, [r7, #12]
 8009da8:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration    
    PJ2     ------> DSIHOST_TE 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8009daa:	2304      	movs	r3, #4
 8009dac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009dae:	2302      	movs	r3, #2
 8009db0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009db2:	2300      	movs	r3, #0
 8009db4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009db6:	2300      	movs	r3, #0
 8009db8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8009dba:	230d      	movs	r3, #13
 8009dbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8009dbe:	f107 0314 	add.w	r3, r7, #20
 8009dc2:	4619      	mov	r1, r3
 8009dc4:	4805      	ldr	r0, [pc, #20]	; (8009ddc <HAL_DSI_MspInit+0x84>)
 8009dc6:	f7fa ff73 	bl	8004cb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8009dca:	bf00      	nop
 8009dcc:	3728      	adds	r7, #40	; 0x28
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}
 8009dd2:	bf00      	nop
 8009dd4:	40016c00 	.word	0x40016c00
 8009dd8:	40023800 	.word	0x40023800
 8009ddc:	40022400 	.word	0x40022400

08009de0 <HAL_DSI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspDeInit(DSI_HandleTypeDef* hdsi)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b082      	sub	sp, #8
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
  if(hdsi->Instance==DSI)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	4a08      	ldr	r2, [pc, #32]	; (8009e10 <HAL_DSI_MspDeInit+0x30>)
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d109      	bne.n	8009e06 <HAL_DSI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN DSI_MspDeInit 0 */

  /* USER CODE END DSI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DSI_CLK_DISABLE();
 8009df2:	4b08      	ldr	r3, [pc, #32]	; (8009e14 <HAL_DSI_MspDeInit+0x34>)
 8009df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009df6:	4a07      	ldr	r2, [pc, #28]	; (8009e14 <HAL_DSI_MspDeInit+0x34>)
 8009df8:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8009dfc:	6453      	str	r3, [r2, #68]	; 0x44
  
    /**DSIHOST GPIO Configuration    
    PJ2     ------> DSIHOST_TE 
    */
    HAL_GPIO_DeInit(GPIOJ, GPIO_PIN_2);
 8009dfe:	2104      	movs	r1, #4
 8009e00:	4805      	ldr	r0, [pc, #20]	; (8009e18 <HAL_DSI_MspDeInit+0x38>)
 8009e02:	f7fb f8ff 	bl	8005004 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN DSI_MspDeInit 1 */

  /* USER CODE END DSI_MspDeInit 1 */
  }

}
 8009e06:	bf00      	nop
 8009e08:	3708      	adds	r7, #8
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}
 8009e0e:	bf00      	nop
 8009e10:	40016c00 	.word	0x40016c00
 8009e14:	40023800 	.word	0x40023800
 8009e18:	40022400 	.word	0x40022400

08009e1c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b085      	sub	sp, #20
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	4a0a      	ldr	r2, [pc, #40]	; (8009e54 <HAL_LTDC_MspInit+0x38>)
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	d10b      	bne.n	8009e46 <HAL_LTDC_MspInit+0x2a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8009e2e:	4b0a      	ldr	r3, [pc, #40]	; (8009e58 <HAL_LTDC_MspInit+0x3c>)
 8009e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e32:	4a09      	ldr	r2, [pc, #36]	; (8009e58 <HAL_LTDC_MspInit+0x3c>)
 8009e34:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009e38:	6453      	str	r3, [r2, #68]	; 0x44
 8009e3a:	4b07      	ldr	r3, [pc, #28]	; (8009e58 <HAL_LTDC_MspInit+0x3c>)
 8009e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e3e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009e42:	60fb      	str	r3, [r7, #12]
 8009e44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8009e46:	bf00      	nop
 8009e48:	3714      	adds	r7, #20
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e50:	4770      	bx	lr
 8009e52:	bf00      	nop
 8009e54:	40016800 	.word	0x40016800
 8009e58:	40023800 	.word	0x40023800

08009e5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b084      	sub	sp, #16
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	4a1a      	ldr	r2, [pc, #104]	; (8009ed4 <HAL_TIM_Base_MspInit+0x78>)
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d114      	bne.n	8009e98 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8009e6e:	4b1a      	ldr	r3, [pc, #104]	; (8009ed8 <HAL_TIM_Base_MspInit+0x7c>)
 8009e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e72:	4a19      	ldr	r2, [pc, #100]	; (8009ed8 <HAL_TIM_Base_MspInit+0x7c>)
 8009e74:	f043 0310 	orr.w	r3, r3, #16
 8009e78:	6413      	str	r3, [r2, #64]	; 0x40
 8009e7a:	4b17      	ldr	r3, [pc, #92]	; (8009ed8 <HAL_TIM_Base_MspInit+0x7c>)
 8009e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e7e:	f003 0310 	and.w	r3, r3, #16
 8009e82:	60fb      	str	r3, [r7, #12]
 8009e84:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8009e86:	2200      	movs	r2, #0
 8009e88:	2100      	movs	r1, #0
 8009e8a:	2036      	movs	r0, #54	; 0x36
 8009e8c:	f7f9 fa05 	bl	800329a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8009e90:	2036      	movs	r0, #54	; 0x36
 8009e92:	f7f9 fa1e 	bl	80032d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8009e96:	e018      	b.n	8009eca <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	4a0f      	ldr	r2, [pc, #60]	; (8009edc <HAL_TIM_Base_MspInit+0x80>)
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d113      	bne.n	8009eca <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8009ea2:	4b0d      	ldr	r3, [pc, #52]	; (8009ed8 <HAL_TIM_Base_MspInit+0x7c>)
 8009ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ea6:	4a0c      	ldr	r2, [pc, #48]	; (8009ed8 <HAL_TIM_Base_MspInit+0x7c>)
 8009ea8:	f043 0320 	orr.w	r3, r3, #32
 8009eac:	6413      	str	r3, [r2, #64]	; 0x40
 8009eae:	4b0a      	ldr	r3, [pc, #40]	; (8009ed8 <HAL_TIM_Base_MspInit+0x7c>)
 8009eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eb2:	f003 0320 	and.w	r3, r3, #32
 8009eb6:	60bb      	str	r3, [r7, #8]
 8009eb8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8009eba:	2200      	movs	r2, #0
 8009ebc:	2100      	movs	r1, #0
 8009ebe:	2037      	movs	r0, #55	; 0x37
 8009ec0:	f7f9 f9eb 	bl	800329a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8009ec4:	2037      	movs	r0, #55	; 0x37
 8009ec6:	f7f9 fa04 	bl	80032d2 <HAL_NVIC_EnableIRQ>
}
 8009eca:	bf00      	nop
 8009ecc:	3710      	adds	r7, #16
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}
 8009ed2:	bf00      	nop
 8009ed4:	40001000 	.word	0x40001000
 8009ed8:	40023800 	.word	0x40023800
 8009edc:	40001400 	.word	0x40001400

08009ee0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b086      	sub	sp, #24
 8009ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8009ee6:	1d3b      	adds	r3, r7, #4
 8009ee8:	2200      	movs	r2, #0
 8009eea:	601a      	str	r2, [r3, #0]
 8009eec:	605a      	str	r2, [r3, #4]
 8009eee:	609a      	str	r2, [r3, #8]
 8009ef0:	60da      	str	r2, [r3, #12]
 8009ef2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8009ef4:	4b43      	ldr	r3, [pc, #268]	; (800a004 <HAL_FMC_MspInit+0x124>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d17e      	bne.n	8009ffa <HAL_FMC_MspInit+0x11a>
    return;
  }
  FMC_Initialized = 1;
 8009efc:	4b41      	ldr	r3, [pc, #260]	; (800a004 <HAL_FMC_MspInit+0x124>)
 8009efe:	2201      	movs	r2, #1
 8009f00:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8009f02:	4b41      	ldr	r3, [pc, #260]	; (800a008 <HAL_FMC_MspInit+0x128>)
 8009f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f06:	4a40      	ldr	r2, [pc, #256]	; (800a008 <HAL_FMC_MspInit+0x128>)
 8009f08:	f043 0301 	orr.w	r3, r3, #1
 8009f0c:	6393      	str	r3, [r2, #56]	; 0x38
 8009f0e:	4b3e      	ldr	r3, [pc, #248]	; (800a008 <HAL_FMC_MspInit+0x128>)
 8009f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f12:	f003 0301 	and.w	r3, r3, #1
 8009f16:	603b      	str	r3, [r7, #0]
 8009f18:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8009f1a:	2360      	movs	r3, #96	; 0x60
 8009f1c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f1e:	2302      	movs	r3, #2
 8009f20:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f22:	2300      	movs	r3, #0
 8009f24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009f26:	2303      	movs	r3, #3
 8009f28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009f2a:	230c      	movs	r3, #12
 8009f2c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009f2e:	1d3b      	adds	r3, r7, #4
 8009f30:	4619      	mov	r1, r3
 8009f32:	4836      	ldr	r0, [pc, #216]	; (800a00c <HAL_FMC_MspInit+0x12c>)
 8009f34:	f7fa febc 	bl	8004cb0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_2 
 8009f38:	f248 1337 	movw	r3, #33079	; 0x8137
 8009f3c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f3e:	2302      	movs	r3, #2
 8009f40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f42:	2300      	movs	r3, #0
 8009f44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009f46:	2303      	movs	r3, #3
 8009f48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009f4a:	230c      	movs	r3, #12
 8009f4c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009f4e:	1d3b      	adds	r3, r7, #4
 8009f50:	4619      	mov	r1, r3
 8009f52:	482f      	ldr	r0, [pc, #188]	; (800a010 <HAL_FMC_MspInit+0x130>)
 8009f54:	f7fa feac 	bl	8004cb0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10 
 8009f58:	f24c 7303 	movw	r3, #50947	; 0xc703
 8009f5c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f5e:	2302      	movs	r3, #2
 8009f60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f62:	2300      	movs	r3, #0
 8009f64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009f66:	2303      	movs	r3, #3
 8009f68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009f6a:	230c      	movs	r3, #12
 8009f6c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009f6e:	1d3b      	adds	r3, r7, #4
 8009f70:	4619      	mov	r1, r3
 8009f72:	4828      	ldr	r0, [pc, #160]	; (800a014 <HAL_FMC_MspInit+0x134>)
 8009f74:	f7fa fe9c 	bl	8004cb0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_7|GPIO_PIN_10 
 8009f78:	f240 63cf 	movw	r3, #1743	; 0x6cf
 8009f7c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_6|GPIO_PIN_1|GPIO_PIN_9|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f7e:	2302      	movs	r3, #2
 8009f80:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f82:	2300      	movs	r3, #0
 8009f84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009f86:	2303      	movs	r3, #3
 8009f88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009f8a:	230c      	movs	r3, #12
 8009f8c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8009f8e:	1d3b      	adds	r3, r7, #4
 8009f90:	4619      	mov	r1, r3
 8009f92:	4821      	ldr	r0, [pc, #132]	; (800a018 <HAL_FMC_MspInit+0x138>)
 8009f94:	f7fa fe8c 	bl	8004cb0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8009f98:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8009f9c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f9e:	2302      	movs	r3, #2
 8009fa0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009fa6:	2303      	movs	r3, #3
 8009fa8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009faa:	230c      	movs	r3, #12
 8009fac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8009fae:	1d3b      	adds	r3, r7, #4
 8009fb0:	4619      	mov	r1, r3
 8009fb2:	481a      	ldr	r0, [pc, #104]	; (800a01c <HAL_FMC_MspInit+0x13c>)
 8009fb4:	f7fa fe7c 	bl	8004cb0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_5 
 8009fb8:	f64f 7320 	movw	r3, #65312	; 0xff20
 8009fbc:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_8 
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009fbe:	2302      	movs	r3, #2
 8009fc0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009fc6:	2303      	movs	r3, #3
 8009fc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009fca:	230c      	movs	r3, #12
 8009fcc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8009fce:	1d3b      	adds	r3, r7, #4
 8009fd0:	4619      	mov	r1, r3
 8009fd2:	4813      	ldr	r0, [pc, #76]	; (800a020 <HAL_FMC_MspInit+0x140>)
 8009fd4:	f7fa fe6c 	bl	8004cb0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14 
 8009fd8:	f64f 7380 	movw	r3, #65408	; 0xff80
 8009fdc:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15 
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009fde:	2302      	movs	r3, #2
 8009fe0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009fe6:	2303      	movs	r3, #3
 8009fe8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009fea:	230c      	movs	r3, #12
 8009fec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009fee:	1d3b      	adds	r3, r7, #4
 8009ff0:	4619      	mov	r1, r3
 8009ff2:	480c      	ldr	r0, [pc, #48]	; (800a024 <HAL_FMC_MspInit+0x144>)
 8009ff4:	f7fa fe5c 	bl	8004cb0 <HAL_GPIO_Init>
 8009ff8:	e000      	b.n	8009ffc <HAL_FMC_MspInit+0x11c>
    return;
 8009ffa:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8009ffc:	3718      	adds	r7, #24
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}
 800a002:	bf00      	nop
 800a004:	200002e0 	.word	0x200002e0
 800a008:	40023800 	.word	0x40023800
 800a00c:	40020400 	.word	0x40020400
 800a010:	40021800 	.word	0x40021800
 800a014:	40020c00 	.word	0x40020c00
 800a018:	40022000 	.word	0x40022000
 800a01c:	40021400 	.word	0x40021400
 800a020:	40021c00 	.word	0x40021c00
 800a024:	40021000 	.word	0x40021000

0800a028 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800a028:	b580      	push	{r7, lr}
 800a02a:	b082      	sub	sp, #8
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800a030:	f7ff ff56 	bl	8009ee0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800a034:	bf00      	nop
 800a036:	3708      	adds	r7, #8
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}

0800a03c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a03c:	b480      	push	{r7}
 800a03e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800a040:	bf00      	nop
 800a042:	46bd      	mov	sp, r7
 800a044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a048:	4770      	bx	lr

0800a04a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a04a:	b480      	push	{r7}
 800a04c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a04e:	e7fe      	b.n	800a04e <HardFault_Handler+0x4>

0800a050 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a050:	b480      	push	{r7}
 800a052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a054:	e7fe      	b.n	800a054 <MemManage_Handler+0x4>

0800a056 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a056:	b480      	push	{r7}
 800a058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a05a:	e7fe      	b.n	800a05a <BusFault_Handler+0x4>

0800a05c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a05c:	b480      	push	{r7}
 800a05e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a060:	e7fe      	b.n	800a060 <UsageFault_Handler+0x4>

0800a062 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a062:	b480      	push	{r7}
 800a064:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a066:	bf00      	nop
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr

0800a070 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a070:	b480      	push	{r7}
 800a072:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a074:	bf00      	nop
 800a076:	46bd      	mov	sp, r7
 800a078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07c:	4770      	bx	lr

0800a07e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a07e:	b480      	push	{r7}
 800a080:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a082:	bf00      	nop
 800a084:	46bd      	mov	sp, r7
 800a086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08a:	4770      	bx	lr

0800a08c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a090:	f7f8 fb3e 	bl	8002710 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a094:	bf00      	nop
 800a096:	bd80      	pop	{r7, pc}

0800a098 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800a09c:	2001      	movs	r0, #1
 800a09e:	f7fb f8d5 	bl	800524c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800a0a2:	bf00      	nop
 800a0a4:	bd80      	pop	{r7, pc}
	...

0800a0a8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800a0ac:	4802      	ldr	r0, [pc, #8]	; (800a0b8 <ADC_IRQHandler+0x10>)
 800a0ae:	f7f8 fc7f 	bl	80029b0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800a0b2:	bf00      	nop
 800a0b4:	bd80      	pop	{r7, pc}
 800a0b6:	bf00      	nop
 800a0b8:	20000570 	.word	0x20000570

0800a0bc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800a0c0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800a0c4:	f7fb f8c2 	bl	800524c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800a0c8:	bf00      	nop
 800a0ca:	bd80      	pop	{r7, pc}

0800a0cc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800a0d0:	4802      	ldr	r0, [pc, #8]	; (800a0dc <TIM6_DAC_IRQHandler+0x10>)
 800a0d2:	f7fd fa4d 	bl	8007570 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800a0d6:	bf00      	nop
 800a0d8:	bd80      	pop	{r7, pc}
 800a0da:	bf00      	nop
 800a0dc:	200005bc 	.word	0x200005bc

0800a0e0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800a0e4:	4802      	ldr	r0, [pc, #8]	; (800a0f0 <TIM7_IRQHandler+0x10>)
 800a0e6:	f7fd fa43 	bl	8007570 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800a0ea:	bf00      	nop
 800a0ec:	bd80      	pop	{r7, pc}
 800a0ee:	bf00      	nop
 800a0f0:	20000698 	.word	0x20000698

0800a0f4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b084      	sub	sp, #16
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800a0fc:	4b11      	ldr	r3, [pc, #68]	; (800a144 <_sbrk+0x50>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d102      	bne.n	800a10a <_sbrk+0x16>
		heap_end = &end;
 800a104:	4b0f      	ldr	r3, [pc, #60]	; (800a144 <_sbrk+0x50>)
 800a106:	4a10      	ldr	r2, [pc, #64]	; (800a148 <_sbrk+0x54>)
 800a108:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800a10a:	4b0e      	ldr	r3, [pc, #56]	; (800a144 <_sbrk+0x50>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800a110:	4b0c      	ldr	r3, [pc, #48]	; (800a144 <_sbrk+0x50>)
 800a112:	681a      	ldr	r2, [r3, #0]
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	4413      	add	r3, r2
 800a118:	466a      	mov	r2, sp
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d907      	bls.n	800a12e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800a11e:	f000 f875 	bl	800a20c <__errno>
 800a122:	4602      	mov	r2, r0
 800a124:	230c      	movs	r3, #12
 800a126:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800a128:	f04f 33ff 	mov.w	r3, #4294967295
 800a12c:	e006      	b.n	800a13c <_sbrk+0x48>
	}

	heap_end += incr;
 800a12e:	4b05      	ldr	r3, [pc, #20]	; (800a144 <_sbrk+0x50>)
 800a130:	681a      	ldr	r2, [r3, #0]
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	4413      	add	r3, r2
 800a136:	4a03      	ldr	r2, [pc, #12]	; (800a144 <_sbrk+0x50>)
 800a138:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800a13a:	68fb      	ldr	r3, [r7, #12]
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	3710      	adds	r7, #16
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}
 800a144:	200002e4 	.word	0x200002e4
 800a148:	200006e0 	.word	0x200006e0

0800a14c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a14c:	b480      	push	{r7}
 800a14e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a150:	4b15      	ldr	r3, [pc, #84]	; (800a1a8 <SystemInit+0x5c>)
 800a152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a156:	4a14      	ldr	r2, [pc, #80]	; (800a1a8 <SystemInit+0x5c>)
 800a158:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a15c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800a160:	4b12      	ldr	r3, [pc, #72]	; (800a1ac <SystemInit+0x60>)
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	4a11      	ldr	r2, [pc, #68]	; (800a1ac <SystemInit+0x60>)
 800a166:	f043 0301 	orr.w	r3, r3, #1
 800a16a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800a16c:	4b0f      	ldr	r3, [pc, #60]	; (800a1ac <SystemInit+0x60>)
 800a16e:	2200      	movs	r2, #0
 800a170:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800a172:	4b0e      	ldr	r3, [pc, #56]	; (800a1ac <SystemInit+0x60>)
 800a174:	681a      	ldr	r2, [r3, #0]
 800a176:	490d      	ldr	r1, [pc, #52]	; (800a1ac <SystemInit+0x60>)
 800a178:	4b0d      	ldr	r3, [pc, #52]	; (800a1b0 <SystemInit+0x64>)
 800a17a:	4013      	ands	r3, r2
 800a17c:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800a17e:	4b0b      	ldr	r3, [pc, #44]	; (800a1ac <SystemInit+0x60>)
 800a180:	4a0c      	ldr	r2, [pc, #48]	; (800a1b4 <SystemInit+0x68>)
 800a182:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800a184:	4b09      	ldr	r3, [pc, #36]	; (800a1ac <SystemInit+0x60>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	4a08      	ldr	r2, [pc, #32]	; (800a1ac <SystemInit+0x60>)
 800a18a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a18e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800a190:	4b06      	ldr	r3, [pc, #24]	; (800a1ac <SystemInit+0x60>)
 800a192:	2200      	movs	r2, #0
 800a194:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a196:	4b04      	ldr	r3, [pc, #16]	; (800a1a8 <SystemInit+0x5c>)
 800a198:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a19c:	609a      	str	r2, [r3, #8]
#endif
}
 800a19e:	bf00      	nop
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a6:	4770      	bx	lr
 800a1a8:	e000ed00 	.word	0xe000ed00
 800a1ac:	40023800 	.word	0x40023800
 800a1b0:	fef6ffff 	.word	0xfef6ffff
 800a1b4:	24003010 	.word	0x24003010

0800a1b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800a1b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a1f0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800a1bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800a1be:	e003      	b.n	800a1c8 <LoopCopyDataInit>

0800a1c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800a1c0:	4b0c      	ldr	r3, [pc, #48]	; (800a1f4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800a1c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800a1c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800a1c6:	3104      	adds	r1, #4

0800a1c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800a1c8:	480b      	ldr	r0, [pc, #44]	; (800a1f8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800a1ca:	4b0c      	ldr	r3, [pc, #48]	; (800a1fc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800a1cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800a1ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800a1d0:	d3f6      	bcc.n	800a1c0 <CopyDataInit>
  ldr  r2, =_sbss
 800a1d2:	4a0b      	ldr	r2, [pc, #44]	; (800a200 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800a1d4:	e002      	b.n	800a1dc <LoopFillZerobss>

0800a1d6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800a1d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800a1d8:	f842 3b04 	str.w	r3, [r2], #4

0800a1dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800a1dc:	4b09      	ldr	r3, [pc, #36]	; (800a204 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800a1de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800a1e0:	d3f9      	bcc.n	800a1d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800a1e2:	f7ff ffb3 	bl	800a14c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a1e6:	f000 f817 	bl	800a218 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a1ea:	f7fe ff9f 	bl	800912c <main>
  bx  lr    
 800a1ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800a1f0:	2007ffff 	.word	0x2007ffff
  ldr  r3, =_sidata
 800a1f4:	0800c8e0 	.word	0x0800c8e0
  ldr  r0, =_sdata
 800a1f8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800a1fc:	200000ac 	.word	0x200000ac
  ldr  r2, =_sbss
 800a200:	200000ac 	.word	0x200000ac
  ldr  r3, = _ebss
 800a204:	200006dc 	.word	0x200006dc

0800a208 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a208:	e7fe      	b.n	800a208 <CAN1_RX0_IRQHandler>
	...

0800a20c <__errno>:
 800a20c:	4b01      	ldr	r3, [pc, #4]	; (800a214 <__errno+0x8>)
 800a20e:	6818      	ldr	r0, [r3, #0]
 800a210:	4770      	bx	lr
 800a212:	bf00      	nop
 800a214:	20000048 	.word	0x20000048

0800a218 <__libc_init_array>:
 800a218:	b570      	push	{r4, r5, r6, lr}
 800a21a:	4e0d      	ldr	r6, [pc, #52]	; (800a250 <__libc_init_array+0x38>)
 800a21c:	4c0d      	ldr	r4, [pc, #52]	; (800a254 <__libc_init_array+0x3c>)
 800a21e:	1ba4      	subs	r4, r4, r6
 800a220:	10a4      	asrs	r4, r4, #2
 800a222:	2500      	movs	r5, #0
 800a224:	42a5      	cmp	r5, r4
 800a226:	d109      	bne.n	800a23c <__libc_init_array+0x24>
 800a228:	4e0b      	ldr	r6, [pc, #44]	; (800a258 <__libc_init_array+0x40>)
 800a22a:	4c0c      	ldr	r4, [pc, #48]	; (800a25c <__libc_init_array+0x44>)
 800a22c:	f000 fc26 	bl	800aa7c <_init>
 800a230:	1ba4      	subs	r4, r4, r6
 800a232:	10a4      	asrs	r4, r4, #2
 800a234:	2500      	movs	r5, #0
 800a236:	42a5      	cmp	r5, r4
 800a238:	d105      	bne.n	800a246 <__libc_init_array+0x2e>
 800a23a:	bd70      	pop	{r4, r5, r6, pc}
 800a23c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a240:	4798      	blx	r3
 800a242:	3501      	adds	r5, #1
 800a244:	e7ee      	b.n	800a224 <__libc_init_array+0xc>
 800a246:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a24a:	4798      	blx	r3
 800a24c:	3501      	adds	r5, #1
 800a24e:	e7f2      	b.n	800a236 <__libc_init_array+0x1e>
 800a250:	0800c8d8 	.word	0x0800c8d8
 800a254:	0800c8d8 	.word	0x0800c8d8
 800a258:	0800c8d8 	.word	0x0800c8d8
 800a25c:	0800c8dc 	.word	0x0800c8dc

0800a260 <memset>:
 800a260:	4402      	add	r2, r0
 800a262:	4603      	mov	r3, r0
 800a264:	4293      	cmp	r3, r2
 800a266:	d100      	bne.n	800a26a <memset+0xa>
 800a268:	4770      	bx	lr
 800a26a:	f803 1b01 	strb.w	r1, [r3], #1
 800a26e:	e7f9      	b.n	800a264 <memset+0x4>

0800a270 <siprintf>:
 800a270:	b40e      	push	{r1, r2, r3}
 800a272:	b500      	push	{lr}
 800a274:	b09c      	sub	sp, #112	; 0x70
 800a276:	ab1d      	add	r3, sp, #116	; 0x74
 800a278:	9002      	str	r0, [sp, #8]
 800a27a:	9006      	str	r0, [sp, #24]
 800a27c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a280:	4809      	ldr	r0, [pc, #36]	; (800a2a8 <siprintf+0x38>)
 800a282:	9107      	str	r1, [sp, #28]
 800a284:	9104      	str	r1, [sp, #16]
 800a286:	4909      	ldr	r1, [pc, #36]	; (800a2ac <siprintf+0x3c>)
 800a288:	f853 2b04 	ldr.w	r2, [r3], #4
 800a28c:	9105      	str	r1, [sp, #20]
 800a28e:	6800      	ldr	r0, [r0, #0]
 800a290:	9301      	str	r3, [sp, #4]
 800a292:	a902      	add	r1, sp, #8
 800a294:	f000 f866 	bl	800a364 <_svfiprintf_r>
 800a298:	9b02      	ldr	r3, [sp, #8]
 800a29a:	2200      	movs	r2, #0
 800a29c:	701a      	strb	r2, [r3, #0]
 800a29e:	b01c      	add	sp, #112	; 0x70
 800a2a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2a4:	b003      	add	sp, #12
 800a2a6:	4770      	bx	lr
 800a2a8:	20000048 	.word	0x20000048
 800a2ac:	ffff0208 	.word	0xffff0208

0800a2b0 <__ssputs_r>:
 800a2b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2b4:	688e      	ldr	r6, [r1, #8]
 800a2b6:	429e      	cmp	r6, r3
 800a2b8:	4682      	mov	sl, r0
 800a2ba:	460c      	mov	r4, r1
 800a2bc:	4690      	mov	r8, r2
 800a2be:	4699      	mov	r9, r3
 800a2c0:	d837      	bhi.n	800a332 <__ssputs_r+0x82>
 800a2c2:	898a      	ldrh	r2, [r1, #12]
 800a2c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a2c8:	d031      	beq.n	800a32e <__ssputs_r+0x7e>
 800a2ca:	6825      	ldr	r5, [r4, #0]
 800a2cc:	6909      	ldr	r1, [r1, #16]
 800a2ce:	1a6f      	subs	r7, r5, r1
 800a2d0:	6965      	ldr	r5, [r4, #20]
 800a2d2:	2302      	movs	r3, #2
 800a2d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a2d8:	fb95 f5f3 	sdiv	r5, r5, r3
 800a2dc:	f109 0301 	add.w	r3, r9, #1
 800a2e0:	443b      	add	r3, r7
 800a2e2:	429d      	cmp	r5, r3
 800a2e4:	bf38      	it	cc
 800a2e6:	461d      	movcc	r5, r3
 800a2e8:	0553      	lsls	r3, r2, #21
 800a2ea:	d530      	bpl.n	800a34e <__ssputs_r+0x9e>
 800a2ec:	4629      	mov	r1, r5
 800a2ee:	f000 fb2b 	bl	800a948 <_malloc_r>
 800a2f2:	4606      	mov	r6, r0
 800a2f4:	b950      	cbnz	r0, 800a30c <__ssputs_r+0x5c>
 800a2f6:	230c      	movs	r3, #12
 800a2f8:	f8ca 3000 	str.w	r3, [sl]
 800a2fc:	89a3      	ldrh	r3, [r4, #12]
 800a2fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a302:	81a3      	strh	r3, [r4, #12]
 800a304:	f04f 30ff 	mov.w	r0, #4294967295
 800a308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a30c:	463a      	mov	r2, r7
 800a30e:	6921      	ldr	r1, [r4, #16]
 800a310:	f000 faa8 	bl	800a864 <memcpy>
 800a314:	89a3      	ldrh	r3, [r4, #12]
 800a316:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a31a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a31e:	81a3      	strh	r3, [r4, #12]
 800a320:	6126      	str	r6, [r4, #16]
 800a322:	6165      	str	r5, [r4, #20]
 800a324:	443e      	add	r6, r7
 800a326:	1bed      	subs	r5, r5, r7
 800a328:	6026      	str	r6, [r4, #0]
 800a32a:	60a5      	str	r5, [r4, #8]
 800a32c:	464e      	mov	r6, r9
 800a32e:	454e      	cmp	r6, r9
 800a330:	d900      	bls.n	800a334 <__ssputs_r+0x84>
 800a332:	464e      	mov	r6, r9
 800a334:	4632      	mov	r2, r6
 800a336:	4641      	mov	r1, r8
 800a338:	6820      	ldr	r0, [r4, #0]
 800a33a:	f000 fa9e 	bl	800a87a <memmove>
 800a33e:	68a3      	ldr	r3, [r4, #8]
 800a340:	1b9b      	subs	r3, r3, r6
 800a342:	60a3      	str	r3, [r4, #8]
 800a344:	6823      	ldr	r3, [r4, #0]
 800a346:	441e      	add	r6, r3
 800a348:	6026      	str	r6, [r4, #0]
 800a34a:	2000      	movs	r0, #0
 800a34c:	e7dc      	b.n	800a308 <__ssputs_r+0x58>
 800a34e:	462a      	mov	r2, r5
 800a350:	f000 fb54 	bl	800a9fc <_realloc_r>
 800a354:	4606      	mov	r6, r0
 800a356:	2800      	cmp	r0, #0
 800a358:	d1e2      	bne.n	800a320 <__ssputs_r+0x70>
 800a35a:	6921      	ldr	r1, [r4, #16]
 800a35c:	4650      	mov	r0, sl
 800a35e:	f000 faa5 	bl	800a8ac <_free_r>
 800a362:	e7c8      	b.n	800a2f6 <__ssputs_r+0x46>

0800a364 <_svfiprintf_r>:
 800a364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a368:	461d      	mov	r5, r3
 800a36a:	898b      	ldrh	r3, [r1, #12]
 800a36c:	061f      	lsls	r7, r3, #24
 800a36e:	b09d      	sub	sp, #116	; 0x74
 800a370:	4680      	mov	r8, r0
 800a372:	460c      	mov	r4, r1
 800a374:	4616      	mov	r6, r2
 800a376:	d50f      	bpl.n	800a398 <_svfiprintf_r+0x34>
 800a378:	690b      	ldr	r3, [r1, #16]
 800a37a:	b96b      	cbnz	r3, 800a398 <_svfiprintf_r+0x34>
 800a37c:	2140      	movs	r1, #64	; 0x40
 800a37e:	f000 fae3 	bl	800a948 <_malloc_r>
 800a382:	6020      	str	r0, [r4, #0]
 800a384:	6120      	str	r0, [r4, #16]
 800a386:	b928      	cbnz	r0, 800a394 <_svfiprintf_r+0x30>
 800a388:	230c      	movs	r3, #12
 800a38a:	f8c8 3000 	str.w	r3, [r8]
 800a38e:	f04f 30ff 	mov.w	r0, #4294967295
 800a392:	e0c8      	b.n	800a526 <_svfiprintf_r+0x1c2>
 800a394:	2340      	movs	r3, #64	; 0x40
 800a396:	6163      	str	r3, [r4, #20]
 800a398:	2300      	movs	r3, #0
 800a39a:	9309      	str	r3, [sp, #36]	; 0x24
 800a39c:	2320      	movs	r3, #32
 800a39e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a3a2:	2330      	movs	r3, #48	; 0x30
 800a3a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a3a8:	9503      	str	r5, [sp, #12]
 800a3aa:	f04f 0b01 	mov.w	fp, #1
 800a3ae:	4637      	mov	r7, r6
 800a3b0:	463d      	mov	r5, r7
 800a3b2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a3b6:	b10b      	cbz	r3, 800a3bc <_svfiprintf_r+0x58>
 800a3b8:	2b25      	cmp	r3, #37	; 0x25
 800a3ba:	d13e      	bne.n	800a43a <_svfiprintf_r+0xd6>
 800a3bc:	ebb7 0a06 	subs.w	sl, r7, r6
 800a3c0:	d00b      	beq.n	800a3da <_svfiprintf_r+0x76>
 800a3c2:	4653      	mov	r3, sl
 800a3c4:	4632      	mov	r2, r6
 800a3c6:	4621      	mov	r1, r4
 800a3c8:	4640      	mov	r0, r8
 800a3ca:	f7ff ff71 	bl	800a2b0 <__ssputs_r>
 800a3ce:	3001      	adds	r0, #1
 800a3d0:	f000 80a4 	beq.w	800a51c <_svfiprintf_r+0x1b8>
 800a3d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3d6:	4453      	add	r3, sl
 800a3d8:	9309      	str	r3, [sp, #36]	; 0x24
 800a3da:	783b      	ldrb	r3, [r7, #0]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	f000 809d 	beq.w	800a51c <_svfiprintf_r+0x1b8>
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	f04f 32ff 	mov.w	r2, #4294967295
 800a3e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3ec:	9304      	str	r3, [sp, #16]
 800a3ee:	9307      	str	r3, [sp, #28]
 800a3f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a3f4:	931a      	str	r3, [sp, #104]	; 0x68
 800a3f6:	462f      	mov	r7, r5
 800a3f8:	2205      	movs	r2, #5
 800a3fa:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a3fe:	4850      	ldr	r0, [pc, #320]	; (800a540 <_svfiprintf_r+0x1dc>)
 800a400:	f7f5 ff1e 	bl	8000240 <memchr>
 800a404:	9b04      	ldr	r3, [sp, #16]
 800a406:	b9d0      	cbnz	r0, 800a43e <_svfiprintf_r+0xda>
 800a408:	06d9      	lsls	r1, r3, #27
 800a40a:	bf44      	itt	mi
 800a40c:	2220      	movmi	r2, #32
 800a40e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a412:	071a      	lsls	r2, r3, #28
 800a414:	bf44      	itt	mi
 800a416:	222b      	movmi	r2, #43	; 0x2b
 800a418:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a41c:	782a      	ldrb	r2, [r5, #0]
 800a41e:	2a2a      	cmp	r2, #42	; 0x2a
 800a420:	d015      	beq.n	800a44e <_svfiprintf_r+0xea>
 800a422:	9a07      	ldr	r2, [sp, #28]
 800a424:	462f      	mov	r7, r5
 800a426:	2000      	movs	r0, #0
 800a428:	250a      	movs	r5, #10
 800a42a:	4639      	mov	r1, r7
 800a42c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a430:	3b30      	subs	r3, #48	; 0x30
 800a432:	2b09      	cmp	r3, #9
 800a434:	d94d      	bls.n	800a4d2 <_svfiprintf_r+0x16e>
 800a436:	b1b8      	cbz	r0, 800a468 <_svfiprintf_r+0x104>
 800a438:	e00f      	b.n	800a45a <_svfiprintf_r+0xf6>
 800a43a:	462f      	mov	r7, r5
 800a43c:	e7b8      	b.n	800a3b0 <_svfiprintf_r+0x4c>
 800a43e:	4a40      	ldr	r2, [pc, #256]	; (800a540 <_svfiprintf_r+0x1dc>)
 800a440:	1a80      	subs	r0, r0, r2
 800a442:	fa0b f000 	lsl.w	r0, fp, r0
 800a446:	4318      	orrs	r0, r3
 800a448:	9004      	str	r0, [sp, #16]
 800a44a:	463d      	mov	r5, r7
 800a44c:	e7d3      	b.n	800a3f6 <_svfiprintf_r+0x92>
 800a44e:	9a03      	ldr	r2, [sp, #12]
 800a450:	1d11      	adds	r1, r2, #4
 800a452:	6812      	ldr	r2, [r2, #0]
 800a454:	9103      	str	r1, [sp, #12]
 800a456:	2a00      	cmp	r2, #0
 800a458:	db01      	blt.n	800a45e <_svfiprintf_r+0xfa>
 800a45a:	9207      	str	r2, [sp, #28]
 800a45c:	e004      	b.n	800a468 <_svfiprintf_r+0x104>
 800a45e:	4252      	negs	r2, r2
 800a460:	f043 0302 	orr.w	r3, r3, #2
 800a464:	9207      	str	r2, [sp, #28]
 800a466:	9304      	str	r3, [sp, #16]
 800a468:	783b      	ldrb	r3, [r7, #0]
 800a46a:	2b2e      	cmp	r3, #46	; 0x2e
 800a46c:	d10c      	bne.n	800a488 <_svfiprintf_r+0x124>
 800a46e:	787b      	ldrb	r3, [r7, #1]
 800a470:	2b2a      	cmp	r3, #42	; 0x2a
 800a472:	d133      	bne.n	800a4dc <_svfiprintf_r+0x178>
 800a474:	9b03      	ldr	r3, [sp, #12]
 800a476:	1d1a      	adds	r2, r3, #4
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	9203      	str	r2, [sp, #12]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	bfb8      	it	lt
 800a480:	f04f 33ff 	movlt.w	r3, #4294967295
 800a484:	3702      	adds	r7, #2
 800a486:	9305      	str	r3, [sp, #20]
 800a488:	4d2e      	ldr	r5, [pc, #184]	; (800a544 <_svfiprintf_r+0x1e0>)
 800a48a:	7839      	ldrb	r1, [r7, #0]
 800a48c:	2203      	movs	r2, #3
 800a48e:	4628      	mov	r0, r5
 800a490:	f7f5 fed6 	bl	8000240 <memchr>
 800a494:	b138      	cbz	r0, 800a4a6 <_svfiprintf_r+0x142>
 800a496:	2340      	movs	r3, #64	; 0x40
 800a498:	1b40      	subs	r0, r0, r5
 800a49a:	fa03 f000 	lsl.w	r0, r3, r0
 800a49e:	9b04      	ldr	r3, [sp, #16]
 800a4a0:	4303      	orrs	r3, r0
 800a4a2:	3701      	adds	r7, #1
 800a4a4:	9304      	str	r3, [sp, #16]
 800a4a6:	7839      	ldrb	r1, [r7, #0]
 800a4a8:	4827      	ldr	r0, [pc, #156]	; (800a548 <_svfiprintf_r+0x1e4>)
 800a4aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a4ae:	2206      	movs	r2, #6
 800a4b0:	1c7e      	adds	r6, r7, #1
 800a4b2:	f7f5 fec5 	bl	8000240 <memchr>
 800a4b6:	2800      	cmp	r0, #0
 800a4b8:	d038      	beq.n	800a52c <_svfiprintf_r+0x1c8>
 800a4ba:	4b24      	ldr	r3, [pc, #144]	; (800a54c <_svfiprintf_r+0x1e8>)
 800a4bc:	bb13      	cbnz	r3, 800a504 <_svfiprintf_r+0x1a0>
 800a4be:	9b03      	ldr	r3, [sp, #12]
 800a4c0:	3307      	adds	r3, #7
 800a4c2:	f023 0307 	bic.w	r3, r3, #7
 800a4c6:	3308      	adds	r3, #8
 800a4c8:	9303      	str	r3, [sp, #12]
 800a4ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4cc:	444b      	add	r3, r9
 800a4ce:	9309      	str	r3, [sp, #36]	; 0x24
 800a4d0:	e76d      	b.n	800a3ae <_svfiprintf_r+0x4a>
 800a4d2:	fb05 3202 	mla	r2, r5, r2, r3
 800a4d6:	2001      	movs	r0, #1
 800a4d8:	460f      	mov	r7, r1
 800a4da:	e7a6      	b.n	800a42a <_svfiprintf_r+0xc6>
 800a4dc:	2300      	movs	r3, #0
 800a4de:	3701      	adds	r7, #1
 800a4e0:	9305      	str	r3, [sp, #20]
 800a4e2:	4619      	mov	r1, r3
 800a4e4:	250a      	movs	r5, #10
 800a4e6:	4638      	mov	r0, r7
 800a4e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4ec:	3a30      	subs	r2, #48	; 0x30
 800a4ee:	2a09      	cmp	r2, #9
 800a4f0:	d903      	bls.n	800a4fa <_svfiprintf_r+0x196>
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d0c8      	beq.n	800a488 <_svfiprintf_r+0x124>
 800a4f6:	9105      	str	r1, [sp, #20]
 800a4f8:	e7c6      	b.n	800a488 <_svfiprintf_r+0x124>
 800a4fa:	fb05 2101 	mla	r1, r5, r1, r2
 800a4fe:	2301      	movs	r3, #1
 800a500:	4607      	mov	r7, r0
 800a502:	e7f0      	b.n	800a4e6 <_svfiprintf_r+0x182>
 800a504:	ab03      	add	r3, sp, #12
 800a506:	9300      	str	r3, [sp, #0]
 800a508:	4622      	mov	r2, r4
 800a50a:	4b11      	ldr	r3, [pc, #68]	; (800a550 <_svfiprintf_r+0x1ec>)
 800a50c:	a904      	add	r1, sp, #16
 800a50e:	4640      	mov	r0, r8
 800a510:	f3af 8000 	nop.w
 800a514:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a518:	4681      	mov	r9, r0
 800a51a:	d1d6      	bne.n	800a4ca <_svfiprintf_r+0x166>
 800a51c:	89a3      	ldrh	r3, [r4, #12]
 800a51e:	065b      	lsls	r3, r3, #25
 800a520:	f53f af35 	bmi.w	800a38e <_svfiprintf_r+0x2a>
 800a524:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a526:	b01d      	add	sp, #116	; 0x74
 800a528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a52c:	ab03      	add	r3, sp, #12
 800a52e:	9300      	str	r3, [sp, #0]
 800a530:	4622      	mov	r2, r4
 800a532:	4b07      	ldr	r3, [pc, #28]	; (800a550 <_svfiprintf_r+0x1ec>)
 800a534:	a904      	add	r1, sp, #16
 800a536:	4640      	mov	r0, r8
 800a538:	f000 f882 	bl	800a640 <_printf_i>
 800a53c:	e7ea      	b.n	800a514 <_svfiprintf_r+0x1b0>
 800a53e:	bf00      	nop
 800a540:	0800c89c 	.word	0x0800c89c
 800a544:	0800c8a2 	.word	0x0800c8a2
 800a548:	0800c8a6 	.word	0x0800c8a6
 800a54c:	00000000 	.word	0x00000000
 800a550:	0800a2b1 	.word	0x0800a2b1

0800a554 <_printf_common>:
 800a554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a558:	4691      	mov	r9, r2
 800a55a:	461f      	mov	r7, r3
 800a55c:	688a      	ldr	r2, [r1, #8]
 800a55e:	690b      	ldr	r3, [r1, #16]
 800a560:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a564:	4293      	cmp	r3, r2
 800a566:	bfb8      	it	lt
 800a568:	4613      	movlt	r3, r2
 800a56a:	f8c9 3000 	str.w	r3, [r9]
 800a56e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a572:	4606      	mov	r6, r0
 800a574:	460c      	mov	r4, r1
 800a576:	b112      	cbz	r2, 800a57e <_printf_common+0x2a>
 800a578:	3301      	adds	r3, #1
 800a57a:	f8c9 3000 	str.w	r3, [r9]
 800a57e:	6823      	ldr	r3, [r4, #0]
 800a580:	0699      	lsls	r1, r3, #26
 800a582:	bf42      	ittt	mi
 800a584:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a588:	3302      	addmi	r3, #2
 800a58a:	f8c9 3000 	strmi.w	r3, [r9]
 800a58e:	6825      	ldr	r5, [r4, #0]
 800a590:	f015 0506 	ands.w	r5, r5, #6
 800a594:	d107      	bne.n	800a5a6 <_printf_common+0x52>
 800a596:	f104 0a19 	add.w	sl, r4, #25
 800a59a:	68e3      	ldr	r3, [r4, #12]
 800a59c:	f8d9 2000 	ldr.w	r2, [r9]
 800a5a0:	1a9b      	subs	r3, r3, r2
 800a5a2:	42ab      	cmp	r3, r5
 800a5a4:	dc28      	bgt.n	800a5f8 <_printf_common+0xa4>
 800a5a6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a5aa:	6822      	ldr	r2, [r4, #0]
 800a5ac:	3300      	adds	r3, #0
 800a5ae:	bf18      	it	ne
 800a5b0:	2301      	movne	r3, #1
 800a5b2:	0692      	lsls	r2, r2, #26
 800a5b4:	d42d      	bmi.n	800a612 <_printf_common+0xbe>
 800a5b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a5ba:	4639      	mov	r1, r7
 800a5bc:	4630      	mov	r0, r6
 800a5be:	47c0      	blx	r8
 800a5c0:	3001      	adds	r0, #1
 800a5c2:	d020      	beq.n	800a606 <_printf_common+0xb2>
 800a5c4:	6823      	ldr	r3, [r4, #0]
 800a5c6:	68e5      	ldr	r5, [r4, #12]
 800a5c8:	f8d9 2000 	ldr.w	r2, [r9]
 800a5cc:	f003 0306 	and.w	r3, r3, #6
 800a5d0:	2b04      	cmp	r3, #4
 800a5d2:	bf08      	it	eq
 800a5d4:	1aad      	subeq	r5, r5, r2
 800a5d6:	68a3      	ldr	r3, [r4, #8]
 800a5d8:	6922      	ldr	r2, [r4, #16]
 800a5da:	bf0c      	ite	eq
 800a5dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a5e0:	2500      	movne	r5, #0
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	bfc4      	itt	gt
 800a5e6:	1a9b      	subgt	r3, r3, r2
 800a5e8:	18ed      	addgt	r5, r5, r3
 800a5ea:	f04f 0900 	mov.w	r9, #0
 800a5ee:	341a      	adds	r4, #26
 800a5f0:	454d      	cmp	r5, r9
 800a5f2:	d11a      	bne.n	800a62a <_printf_common+0xd6>
 800a5f4:	2000      	movs	r0, #0
 800a5f6:	e008      	b.n	800a60a <_printf_common+0xb6>
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	4652      	mov	r2, sl
 800a5fc:	4639      	mov	r1, r7
 800a5fe:	4630      	mov	r0, r6
 800a600:	47c0      	blx	r8
 800a602:	3001      	adds	r0, #1
 800a604:	d103      	bne.n	800a60e <_printf_common+0xba>
 800a606:	f04f 30ff 	mov.w	r0, #4294967295
 800a60a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a60e:	3501      	adds	r5, #1
 800a610:	e7c3      	b.n	800a59a <_printf_common+0x46>
 800a612:	18e1      	adds	r1, r4, r3
 800a614:	1c5a      	adds	r2, r3, #1
 800a616:	2030      	movs	r0, #48	; 0x30
 800a618:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a61c:	4422      	add	r2, r4
 800a61e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a622:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a626:	3302      	adds	r3, #2
 800a628:	e7c5      	b.n	800a5b6 <_printf_common+0x62>
 800a62a:	2301      	movs	r3, #1
 800a62c:	4622      	mov	r2, r4
 800a62e:	4639      	mov	r1, r7
 800a630:	4630      	mov	r0, r6
 800a632:	47c0      	blx	r8
 800a634:	3001      	adds	r0, #1
 800a636:	d0e6      	beq.n	800a606 <_printf_common+0xb2>
 800a638:	f109 0901 	add.w	r9, r9, #1
 800a63c:	e7d8      	b.n	800a5f0 <_printf_common+0x9c>
	...

0800a640 <_printf_i>:
 800a640:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a644:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a648:	460c      	mov	r4, r1
 800a64a:	7e09      	ldrb	r1, [r1, #24]
 800a64c:	b085      	sub	sp, #20
 800a64e:	296e      	cmp	r1, #110	; 0x6e
 800a650:	4617      	mov	r7, r2
 800a652:	4606      	mov	r6, r0
 800a654:	4698      	mov	r8, r3
 800a656:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a658:	f000 80b3 	beq.w	800a7c2 <_printf_i+0x182>
 800a65c:	d822      	bhi.n	800a6a4 <_printf_i+0x64>
 800a65e:	2963      	cmp	r1, #99	; 0x63
 800a660:	d036      	beq.n	800a6d0 <_printf_i+0x90>
 800a662:	d80a      	bhi.n	800a67a <_printf_i+0x3a>
 800a664:	2900      	cmp	r1, #0
 800a666:	f000 80b9 	beq.w	800a7dc <_printf_i+0x19c>
 800a66a:	2958      	cmp	r1, #88	; 0x58
 800a66c:	f000 8083 	beq.w	800a776 <_printf_i+0x136>
 800a670:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a674:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a678:	e032      	b.n	800a6e0 <_printf_i+0xa0>
 800a67a:	2964      	cmp	r1, #100	; 0x64
 800a67c:	d001      	beq.n	800a682 <_printf_i+0x42>
 800a67e:	2969      	cmp	r1, #105	; 0x69
 800a680:	d1f6      	bne.n	800a670 <_printf_i+0x30>
 800a682:	6820      	ldr	r0, [r4, #0]
 800a684:	6813      	ldr	r3, [r2, #0]
 800a686:	0605      	lsls	r5, r0, #24
 800a688:	f103 0104 	add.w	r1, r3, #4
 800a68c:	d52a      	bpl.n	800a6e4 <_printf_i+0xa4>
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	6011      	str	r1, [r2, #0]
 800a692:	2b00      	cmp	r3, #0
 800a694:	da03      	bge.n	800a69e <_printf_i+0x5e>
 800a696:	222d      	movs	r2, #45	; 0x2d
 800a698:	425b      	negs	r3, r3
 800a69a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a69e:	486f      	ldr	r0, [pc, #444]	; (800a85c <_printf_i+0x21c>)
 800a6a0:	220a      	movs	r2, #10
 800a6a2:	e039      	b.n	800a718 <_printf_i+0xd8>
 800a6a4:	2973      	cmp	r1, #115	; 0x73
 800a6a6:	f000 809d 	beq.w	800a7e4 <_printf_i+0x1a4>
 800a6aa:	d808      	bhi.n	800a6be <_printf_i+0x7e>
 800a6ac:	296f      	cmp	r1, #111	; 0x6f
 800a6ae:	d020      	beq.n	800a6f2 <_printf_i+0xb2>
 800a6b0:	2970      	cmp	r1, #112	; 0x70
 800a6b2:	d1dd      	bne.n	800a670 <_printf_i+0x30>
 800a6b4:	6823      	ldr	r3, [r4, #0]
 800a6b6:	f043 0320 	orr.w	r3, r3, #32
 800a6ba:	6023      	str	r3, [r4, #0]
 800a6bc:	e003      	b.n	800a6c6 <_printf_i+0x86>
 800a6be:	2975      	cmp	r1, #117	; 0x75
 800a6c0:	d017      	beq.n	800a6f2 <_printf_i+0xb2>
 800a6c2:	2978      	cmp	r1, #120	; 0x78
 800a6c4:	d1d4      	bne.n	800a670 <_printf_i+0x30>
 800a6c6:	2378      	movs	r3, #120	; 0x78
 800a6c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a6cc:	4864      	ldr	r0, [pc, #400]	; (800a860 <_printf_i+0x220>)
 800a6ce:	e055      	b.n	800a77c <_printf_i+0x13c>
 800a6d0:	6813      	ldr	r3, [r2, #0]
 800a6d2:	1d19      	adds	r1, r3, #4
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	6011      	str	r1, [r2, #0]
 800a6d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a6dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	e08c      	b.n	800a7fe <_printf_i+0x1be>
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	6011      	str	r1, [r2, #0]
 800a6e8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a6ec:	bf18      	it	ne
 800a6ee:	b21b      	sxthne	r3, r3
 800a6f0:	e7cf      	b.n	800a692 <_printf_i+0x52>
 800a6f2:	6813      	ldr	r3, [r2, #0]
 800a6f4:	6825      	ldr	r5, [r4, #0]
 800a6f6:	1d18      	adds	r0, r3, #4
 800a6f8:	6010      	str	r0, [r2, #0]
 800a6fa:	0628      	lsls	r0, r5, #24
 800a6fc:	d501      	bpl.n	800a702 <_printf_i+0xc2>
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	e002      	b.n	800a708 <_printf_i+0xc8>
 800a702:	0668      	lsls	r0, r5, #25
 800a704:	d5fb      	bpl.n	800a6fe <_printf_i+0xbe>
 800a706:	881b      	ldrh	r3, [r3, #0]
 800a708:	4854      	ldr	r0, [pc, #336]	; (800a85c <_printf_i+0x21c>)
 800a70a:	296f      	cmp	r1, #111	; 0x6f
 800a70c:	bf14      	ite	ne
 800a70e:	220a      	movne	r2, #10
 800a710:	2208      	moveq	r2, #8
 800a712:	2100      	movs	r1, #0
 800a714:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a718:	6865      	ldr	r5, [r4, #4]
 800a71a:	60a5      	str	r5, [r4, #8]
 800a71c:	2d00      	cmp	r5, #0
 800a71e:	f2c0 8095 	blt.w	800a84c <_printf_i+0x20c>
 800a722:	6821      	ldr	r1, [r4, #0]
 800a724:	f021 0104 	bic.w	r1, r1, #4
 800a728:	6021      	str	r1, [r4, #0]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d13d      	bne.n	800a7aa <_printf_i+0x16a>
 800a72e:	2d00      	cmp	r5, #0
 800a730:	f040 808e 	bne.w	800a850 <_printf_i+0x210>
 800a734:	4665      	mov	r5, ip
 800a736:	2a08      	cmp	r2, #8
 800a738:	d10b      	bne.n	800a752 <_printf_i+0x112>
 800a73a:	6823      	ldr	r3, [r4, #0]
 800a73c:	07db      	lsls	r3, r3, #31
 800a73e:	d508      	bpl.n	800a752 <_printf_i+0x112>
 800a740:	6923      	ldr	r3, [r4, #16]
 800a742:	6862      	ldr	r2, [r4, #4]
 800a744:	429a      	cmp	r2, r3
 800a746:	bfde      	ittt	le
 800a748:	2330      	movle	r3, #48	; 0x30
 800a74a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a74e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a752:	ebac 0305 	sub.w	r3, ip, r5
 800a756:	6123      	str	r3, [r4, #16]
 800a758:	f8cd 8000 	str.w	r8, [sp]
 800a75c:	463b      	mov	r3, r7
 800a75e:	aa03      	add	r2, sp, #12
 800a760:	4621      	mov	r1, r4
 800a762:	4630      	mov	r0, r6
 800a764:	f7ff fef6 	bl	800a554 <_printf_common>
 800a768:	3001      	adds	r0, #1
 800a76a:	d14d      	bne.n	800a808 <_printf_i+0x1c8>
 800a76c:	f04f 30ff 	mov.w	r0, #4294967295
 800a770:	b005      	add	sp, #20
 800a772:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a776:	4839      	ldr	r0, [pc, #228]	; (800a85c <_printf_i+0x21c>)
 800a778:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a77c:	6813      	ldr	r3, [r2, #0]
 800a77e:	6821      	ldr	r1, [r4, #0]
 800a780:	1d1d      	adds	r5, r3, #4
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	6015      	str	r5, [r2, #0]
 800a786:	060a      	lsls	r2, r1, #24
 800a788:	d50b      	bpl.n	800a7a2 <_printf_i+0x162>
 800a78a:	07ca      	lsls	r2, r1, #31
 800a78c:	bf44      	itt	mi
 800a78e:	f041 0120 	orrmi.w	r1, r1, #32
 800a792:	6021      	strmi	r1, [r4, #0]
 800a794:	b91b      	cbnz	r3, 800a79e <_printf_i+0x15e>
 800a796:	6822      	ldr	r2, [r4, #0]
 800a798:	f022 0220 	bic.w	r2, r2, #32
 800a79c:	6022      	str	r2, [r4, #0]
 800a79e:	2210      	movs	r2, #16
 800a7a0:	e7b7      	b.n	800a712 <_printf_i+0xd2>
 800a7a2:	064d      	lsls	r5, r1, #25
 800a7a4:	bf48      	it	mi
 800a7a6:	b29b      	uxthmi	r3, r3
 800a7a8:	e7ef      	b.n	800a78a <_printf_i+0x14a>
 800a7aa:	4665      	mov	r5, ip
 800a7ac:	fbb3 f1f2 	udiv	r1, r3, r2
 800a7b0:	fb02 3311 	mls	r3, r2, r1, r3
 800a7b4:	5cc3      	ldrb	r3, [r0, r3]
 800a7b6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a7ba:	460b      	mov	r3, r1
 800a7bc:	2900      	cmp	r1, #0
 800a7be:	d1f5      	bne.n	800a7ac <_printf_i+0x16c>
 800a7c0:	e7b9      	b.n	800a736 <_printf_i+0xf6>
 800a7c2:	6813      	ldr	r3, [r2, #0]
 800a7c4:	6825      	ldr	r5, [r4, #0]
 800a7c6:	6961      	ldr	r1, [r4, #20]
 800a7c8:	1d18      	adds	r0, r3, #4
 800a7ca:	6010      	str	r0, [r2, #0]
 800a7cc:	0628      	lsls	r0, r5, #24
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	d501      	bpl.n	800a7d6 <_printf_i+0x196>
 800a7d2:	6019      	str	r1, [r3, #0]
 800a7d4:	e002      	b.n	800a7dc <_printf_i+0x19c>
 800a7d6:	066a      	lsls	r2, r5, #25
 800a7d8:	d5fb      	bpl.n	800a7d2 <_printf_i+0x192>
 800a7da:	8019      	strh	r1, [r3, #0]
 800a7dc:	2300      	movs	r3, #0
 800a7de:	6123      	str	r3, [r4, #16]
 800a7e0:	4665      	mov	r5, ip
 800a7e2:	e7b9      	b.n	800a758 <_printf_i+0x118>
 800a7e4:	6813      	ldr	r3, [r2, #0]
 800a7e6:	1d19      	adds	r1, r3, #4
 800a7e8:	6011      	str	r1, [r2, #0]
 800a7ea:	681d      	ldr	r5, [r3, #0]
 800a7ec:	6862      	ldr	r2, [r4, #4]
 800a7ee:	2100      	movs	r1, #0
 800a7f0:	4628      	mov	r0, r5
 800a7f2:	f7f5 fd25 	bl	8000240 <memchr>
 800a7f6:	b108      	cbz	r0, 800a7fc <_printf_i+0x1bc>
 800a7f8:	1b40      	subs	r0, r0, r5
 800a7fa:	6060      	str	r0, [r4, #4]
 800a7fc:	6863      	ldr	r3, [r4, #4]
 800a7fe:	6123      	str	r3, [r4, #16]
 800a800:	2300      	movs	r3, #0
 800a802:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a806:	e7a7      	b.n	800a758 <_printf_i+0x118>
 800a808:	6923      	ldr	r3, [r4, #16]
 800a80a:	462a      	mov	r2, r5
 800a80c:	4639      	mov	r1, r7
 800a80e:	4630      	mov	r0, r6
 800a810:	47c0      	blx	r8
 800a812:	3001      	adds	r0, #1
 800a814:	d0aa      	beq.n	800a76c <_printf_i+0x12c>
 800a816:	6823      	ldr	r3, [r4, #0]
 800a818:	079b      	lsls	r3, r3, #30
 800a81a:	d413      	bmi.n	800a844 <_printf_i+0x204>
 800a81c:	68e0      	ldr	r0, [r4, #12]
 800a81e:	9b03      	ldr	r3, [sp, #12]
 800a820:	4298      	cmp	r0, r3
 800a822:	bfb8      	it	lt
 800a824:	4618      	movlt	r0, r3
 800a826:	e7a3      	b.n	800a770 <_printf_i+0x130>
 800a828:	2301      	movs	r3, #1
 800a82a:	464a      	mov	r2, r9
 800a82c:	4639      	mov	r1, r7
 800a82e:	4630      	mov	r0, r6
 800a830:	47c0      	blx	r8
 800a832:	3001      	adds	r0, #1
 800a834:	d09a      	beq.n	800a76c <_printf_i+0x12c>
 800a836:	3501      	adds	r5, #1
 800a838:	68e3      	ldr	r3, [r4, #12]
 800a83a:	9a03      	ldr	r2, [sp, #12]
 800a83c:	1a9b      	subs	r3, r3, r2
 800a83e:	42ab      	cmp	r3, r5
 800a840:	dcf2      	bgt.n	800a828 <_printf_i+0x1e8>
 800a842:	e7eb      	b.n	800a81c <_printf_i+0x1dc>
 800a844:	2500      	movs	r5, #0
 800a846:	f104 0919 	add.w	r9, r4, #25
 800a84a:	e7f5      	b.n	800a838 <_printf_i+0x1f8>
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d1ac      	bne.n	800a7aa <_printf_i+0x16a>
 800a850:	7803      	ldrb	r3, [r0, #0]
 800a852:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a856:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a85a:	e76c      	b.n	800a736 <_printf_i+0xf6>
 800a85c:	0800c8ad 	.word	0x0800c8ad
 800a860:	0800c8be 	.word	0x0800c8be

0800a864 <memcpy>:
 800a864:	b510      	push	{r4, lr}
 800a866:	1e43      	subs	r3, r0, #1
 800a868:	440a      	add	r2, r1
 800a86a:	4291      	cmp	r1, r2
 800a86c:	d100      	bne.n	800a870 <memcpy+0xc>
 800a86e:	bd10      	pop	{r4, pc}
 800a870:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a874:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a878:	e7f7      	b.n	800a86a <memcpy+0x6>

0800a87a <memmove>:
 800a87a:	4288      	cmp	r0, r1
 800a87c:	b510      	push	{r4, lr}
 800a87e:	eb01 0302 	add.w	r3, r1, r2
 800a882:	d807      	bhi.n	800a894 <memmove+0x1a>
 800a884:	1e42      	subs	r2, r0, #1
 800a886:	4299      	cmp	r1, r3
 800a888:	d00a      	beq.n	800a8a0 <memmove+0x26>
 800a88a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a88e:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a892:	e7f8      	b.n	800a886 <memmove+0xc>
 800a894:	4283      	cmp	r3, r0
 800a896:	d9f5      	bls.n	800a884 <memmove+0xa>
 800a898:	1881      	adds	r1, r0, r2
 800a89a:	1ad2      	subs	r2, r2, r3
 800a89c:	42d3      	cmn	r3, r2
 800a89e:	d100      	bne.n	800a8a2 <memmove+0x28>
 800a8a0:	bd10      	pop	{r4, pc}
 800a8a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a8a6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a8aa:	e7f7      	b.n	800a89c <memmove+0x22>

0800a8ac <_free_r>:
 800a8ac:	b538      	push	{r3, r4, r5, lr}
 800a8ae:	4605      	mov	r5, r0
 800a8b0:	2900      	cmp	r1, #0
 800a8b2:	d045      	beq.n	800a940 <_free_r+0x94>
 800a8b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8b8:	1f0c      	subs	r4, r1, #4
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	bfb8      	it	lt
 800a8be:	18e4      	addlt	r4, r4, r3
 800a8c0:	f000 f8d2 	bl	800aa68 <__malloc_lock>
 800a8c4:	4a1f      	ldr	r2, [pc, #124]	; (800a944 <_free_r+0x98>)
 800a8c6:	6813      	ldr	r3, [r2, #0]
 800a8c8:	4610      	mov	r0, r2
 800a8ca:	b933      	cbnz	r3, 800a8da <_free_r+0x2e>
 800a8cc:	6063      	str	r3, [r4, #4]
 800a8ce:	6014      	str	r4, [r2, #0]
 800a8d0:	4628      	mov	r0, r5
 800a8d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8d6:	f000 b8c8 	b.w	800aa6a <__malloc_unlock>
 800a8da:	42a3      	cmp	r3, r4
 800a8dc:	d90c      	bls.n	800a8f8 <_free_r+0x4c>
 800a8de:	6821      	ldr	r1, [r4, #0]
 800a8e0:	1862      	adds	r2, r4, r1
 800a8e2:	4293      	cmp	r3, r2
 800a8e4:	bf04      	itt	eq
 800a8e6:	681a      	ldreq	r2, [r3, #0]
 800a8e8:	685b      	ldreq	r3, [r3, #4]
 800a8ea:	6063      	str	r3, [r4, #4]
 800a8ec:	bf04      	itt	eq
 800a8ee:	1852      	addeq	r2, r2, r1
 800a8f0:	6022      	streq	r2, [r4, #0]
 800a8f2:	6004      	str	r4, [r0, #0]
 800a8f4:	e7ec      	b.n	800a8d0 <_free_r+0x24>
 800a8f6:	4613      	mov	r3, r2
 800a8f8:	685a      	ldr	r2, [r3, #4]
 800a8fa:	b10a      	cbz	r2, 800a900 <_free_r+0x54>
 800a8fc:	42a2      	cmp	r2, r4
 800a8fe:	d9fa      	bls.n	800a8f6 <_free_r+0x4a>
 800a900:	6819      	ldr	r1, [r3, #0]
 800a902:	1858      	adds	r0, r3, r1
 800a904:	42a0      	cmp	r0, r4
 800a906:	d10b      	bne.n	800a920 <_free_r+0x74>
 800a908:	6820      	ldr	r0, [r4, #0]
 800a90a:	4401      	add	r1, r0
 800a90c:	1858      	adds	r0, r3, r1
 800a90e:	4282      	cmp	r2, r0
 800a910:	6019      	str	r1, [r3, #0]
 800a912:	d1dd      	bne.n	800a8d0 <_free_r+0x24>
 800a914:	6810      	ldr	r0, [r2, #0]
 800a916:	6852      	ldr	r2, [r2, #4]
 800a918:	605a      	str	r2, [r3, #4]
 800a91a:	4401      	add	r1, r0
 800a91c:	6019      	str	r1, [r3, #0]
 800a91e:	e7d7      	b.n	800a8d0 <_free_r+0x24>
 800a920:	d902      	bls.n	800a928 <_free_r+0x7c>
 800a922:	230c      	movs	r3, #12
 800a924:	602b      	str	r3, [r5, #0]
 800a926:	e7d3      	b.n	800a8d0 <_free_r+0x24>
 800a928:	6820      	ldr	r0, [r4, #0]
 800a92a:	1821      	adds	r1, r4, r0
 800a92c:	428a      	cmp	r2, r1
 800a92e:	bf04      	itt	eq
 800a930:	6811      	ldreq	r1, [r2, #0]
 800a932:	6852      	ldreq	r2, [r2, #4]
 800a934:	6062      	str	r2, [r4, #4]
 800a936:	bf04      	itt	eq
 800a938:	1809      	addeq	r1, r1, r0
 800a93a:	6021      	streq	r1, [r4, #0]
 800a93c:	605c      	str	r4, [r3, #4]
 800a93e:	e7c7      	b.n	800a8d0 <_free_r+0x24>
 800a940:	bd38      	pop	{r3, r4, r5, pc}
 800a942:	bf00      	nop
 800a944:	200002e8 	.word	0x200002e8

0800a948 <_malloc_r>:
 800a948:	b570      	push	{r4, r5, r6, lr}
 800a94a:	1ccd      	adds	r5, r1, #3
 800a94c:	f025 0503 	bic.w	r5, r5, #3
 800a950:	3508      	adds	r5, #8
 800a952:	2d0c      	cmp	r5, #12
 800a954:	bf38      	it	cc
 800a956:	250c      	movcc	r5, #12
 800a958:	2d00      	cmp	r5, #0
 800a95a:	4606      	mov	r6, r0
 800a95c:	db01      	blt.n	800a962 <_malloc_r+0x1a>
 800a95e:	42a9      	cmp	r1, r5
 800a960:	d903      	bls.n	800a96a <_malloc_r+0x22>
 800a962:	230c      	movs	r3, #12
 800a964:	6033      	str	r3, [r6, #0]
 800a966:	2000      	movs	r0, #0
 800a968:	bd70      	pop	{r4, r5, r6, pc}
 800a96a:	f000 f87d 	bl	800aa68 <__malloc_lock>
 800a96e:	4a21      	ldr	r2, [pc, #132]	; (800a9f4 <_malloc_r+0xac>)
 800a970:	6814      	ldr	r4, [r2, #0]
 800a972:	4621      	mov	r1, r4
 800a974:	b991      	cbnz	r1, 800a99c <_malloc_r+0x54>
 800a976:	4c20      	ldr	r4, [pc, #128]	; (800a9f8 <_malloc_r+0xb0>)
 800a978:	6823      	ldr	r3, [r4, #0]
 800a97a:	b91b      	cbnz	r3, 800a984 <_malloc_r+0x3c>
 800a97c:	4630      	mov	r0, r6
 800a97e:	f000 f863 	bl	800aa48 <_sbrk_r>
 800a982:	6020      	str	r0, [r4, #0]
 800a984:	4629      	mov	r1, r5
 800a986:	4630      	mov	r0, r6
 800a988:	f000 f85e 	bl	800aa48 <_sbrk_r>
 800a98c:	1c43      	adds	r3, r0, #1
 800a98e:	d124      	bne.n	800a9da <_malloc_r+0x92>
 800a990:	230c      	movs	r3, #12
 800a992:	6033      	str	r3, [r6, #0]
 800a994:	4630      	mov	r0, r6
 800a996:	f000 f868 	bl	800aa6a <__malloc_unlock>
 800a99a:	e7e4      	b.n	800a966 <_malloc_r+0x1e>
 800a99c:	680b      	ldr	r3, [r1, #0]
 800a99e:	1b5b      	subs	r3, r3, r5
 800a9a0:	d418      	bmi.n	800a9d4 <_malloc_r+0x8c>
 800a9a2:	2b0b      	cmp	r3, #11
 800a9a4:	d90f      	bls.n	800a9c6 <_malloc_r+0x7e>
 800a9a6:	600b      	str	r3, [r1, #0]
 800a9a8:	50cd      	str	r5, [r1, r3]
 800a9aa:	18cc      	adds	r4, r1, r3
 800a9ac:	4630      	mov	r0, r6
 800a9ae:	f000 f85c 	bl	800aa6a <__malloc_unlock>
 800a9b2:	f104 000b 	add.w	r0, r4, #11
 800a9b6:	1d23      	adds	r3, r4, #4
 800a9b8:	f020 0007 	bic.w	r0, r0, #7
 800a9bc:	1ac3      	subs	r3, r0, r3
 800a9be:	d0d3      	beq.n	800a968 <_malloc_r+0x20>
 800a9c0:	425a      	negs	r2, r3
 800a9c2:	50e2      	str	r2, [r4, r3]
 800a9c4:	e7d0      	b.n	800a968 <_malloc_r+0x20>
 800a9c6:	428c      	cmp	r4, r1
 800a9c8:	684b      	ldr	r3, [r1, #4]
 800a9ca:	bf16      	itet	ne
 800a9cc:	6063      	strne	r3, [r4, #4]
 800a9ce:	6013      	streq	r3, [r2, #0]
 800a9d0:	460c      	movne	r4, r1
 800a9d2:	e7eb      	b.n	800a9ac <_malloc_r+0x64>
 800a9d4:	460c      	mov	r4, r1
 800a9d6:	6849      	ldr	r1, [r1, #4]
 800a9d8:	e7cc      	b.n	800a974 <_malloc_r+0x2c>
 800a9da:	1cc4      	adds	r4, r0, #3
 800a9dc:	f024 0403 	bic.w	r4, r4, #3
 800a9e0:	42a0      	cmp	r0, r4
 800a9e2:	d005      	beq.n	800a9f0 <_malloc_r+0xa8>
 800a9e4:	1a21      	subs	r1, r4, r0
 800a9e6:	4630      	mov	r0, r6
 800a9e8:	f000 f82e 	bl	800aa48 <_sbrk_r>
 800a9ec:	3001      	adds	r0, #1
 800a9ee:	d0cf      	beq.n	800a990 <_malloc_r+0x48>
 800a9f0:	6025      	str	r5, [r4, #0]
 800a9f2:	e7db      	b.n	800a9ac <_malloc_r+0x64>
 800a9f4:	200002e8 	.word	0x200002e8
 800a9f8:	200002ec 	.word	0x200002ec

0800a9fc <_realloc_r>:
 800a9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9fe:	4607      	mov	r7, r0
 800aa00:	4614      	mov	r4, r2
 800aa02:	460e      	mov	r6, r1
 800aa04:	b921      	cbnz	r1, 800aa10 <_realloc_r+0x14>
 800aa06:	4611      	mov	r1, r2
 800aa08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800aa0c:	f7ff bf9c 	b.w	800a948 <_malloc_r>
 800aa10:	b922      	cbnz	r2, 800aa1c <_realloc_r+0x20>
 800aa12:	f7ff ff4b 	bl	800a8ac <_free_r>
 800aa16:	4625      	mov	r5, r4
 800aa18:	4628      	mov	r0, r5
 800aa1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa1c:	f000 f826 	bl	800aa6c <_malloc_usable_size_r>
 800aa20:	42a0      	cmp	r0, r4
 800aa22:	d20f      	bcs.n	800aa44 <_realloc_r+0x48>
 800aa24:	4621      	mov	r1, r4
 800aa26:	4638      	mov	r0, r7
 800aa28:	f7ff ff8e 	bl	800a948 <_malloc_r>
 800aa2c:	4605      	mov	r5, r0
 800aa2e:	2800      	cmp	r0, #0
 800aa30:	d0f2      	beq.n	800aa18 <_realloc_r+0x1c>
 800aa32:	4631      	mov	r1, r6
 800aa34:	4622      	mov	r2, r4
 800aa36:	f7ff ff15 	bl	800a864 <memcpy>
 800aa3a:	4631      	mov	r1, r6
 800aa3c:	4638      	mov	r0, r7
 800aa3e:	f7ff ff35 	bl	800a8ac <_free_r>
 800aa42:	e7e9      	b.n	800aa18 <_realloc_r+0x1c>
 800aa44:	4635      	mov	r5, r6
 800aa46:	e7e7      	b.n	800aa18 <_realloc_r+0x1c>

0800aa48 <_sbrk_r>:
 800aa48:	b538      	push	{r3, r4, r5, lr}
 800aa4a:	4c06      	ldr	r4, [pc, #24]	; (800aa64 <_sbrk_r+0x1c>)
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	4605      	mov	r5, r0
 800aa50:	4608      	mov	r0, r1
 800aa52:	6023      	str	r3, [r4, #0]
 800aa54:	f7ff fb4e 	bl	800a0f4 <_sbrk>
 800aa58:	1c43      	adds	r3, r0, #1
 800aa5a:	d102      	bne.n	800aa62 <_sbrk_r+0x1a>
 800aa5c:	6823      	ldr	r3, [r4, #0]
 800aa5e:	b103      	cbz	r3, 800aa62 <_sbrk_r+0x1a>
 800aa60:	602b      	str	r3, [r5, #0]
 800aa62:	bd38      	pop	{r3, r4, r5, pc}
 800aa64:	200006d8 	.word	0x200006d8

0800aa68 <__malloc_lock>:
 800aa68:	4770      	bx	lr

0800aa6a <__malloc_unlock>:
 800aa6a:	4770      	bx	lr

0800aa6c <_malloc_usable_size_r>:
 800aa6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa70:	1f18      	subs	r0, r3, #4
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	bfbc      	itt	lt
 800aa76:	580b      	ldrlt	r3, [r1, r0]
 800aa78:	18c0      	addlt	r0, r0, r3
 800aa7a:	4770      	bx	lr

0800aa7c <_init>:
 800aa7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa7e:	bf00      	nop
 800aa80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa82:	bc08      	pop	{r3}
 800aa84:	469e      	mov	lr, r3
 800aa86:	4770      	bx	lr

0800aa88 <_fini>:
 800aa88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa8a:	bf00      	nop
 800aa8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa8e:	bc08      	pop	{r3}
 800aa90:	469e      	mov	lr, r3
 800aa92:	4770      	bx	lr
