
Reversi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f890  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0011b3e8  0800fa90  0800fa90  0001fa90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0812ae78  0812ae78  001400b0  2**0
                  CONTENTS
  4 .ARM          00000008  0812ae78  0812ae78  0013ae78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0812ae80  0812ae80  001400b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0812ae80  0812ae80  0013ae80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0812ae84  0812ae84  0013ae84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  0812ae88  00140000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b90  200000b0  0812af38  001400b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c40  0812af38  00140c40  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  001400b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b75e  00000000  00000000  001400de  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005049  00000000  00000000  0016b83c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000020b0  00000000  00000000  00170888  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001e38  00000000  00000000  00172938  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00032e6c  00000000  00000000  00174770  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001d7d1  00000000  00000000  001a75dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0012ab89  00000000  00000000  001c4dad  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002ef936  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008dcc  00000000  00000000  002ef9b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000b0 	.word	0x200000b0
 800021c:	00000000 	.word	0x00000000
 8000220:	0800fa78 	.word	0x0800fa78

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000b4 	.word	0x200000b4
 800023c:	0800fa78 	.word	0x0800fa78

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <ft6x06_Init>:
  *         from MCU to FT6206 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Init(uint16_t DeviceAddr)
{  
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = ft6x06_GetInstance(DeviceAddr);
 80005fa:	88fb      	ldrh	r3, [r7, #6]
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 f90d 	bl	800081c <ft6x06_GetInstance>
 8000602:	4603      	mov	r3, r0
 8000604:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8000606:	7bfb      	ldrb	r3, [r7, #15]
 8000608:	2bff      	cmp	r3, #255	; 0xff
 800060a:	d10e      	bne.n	800062a <ft6x06_Init+0x3a>
  {
    /* Look for empty instance */
    empty = ft6x06_GetInstance(0);
 800060c:	2000      	movs	r0, #0
 800060e:	f000 f905 	bl	800081c <ft6x06_GetInstance>
 8000612:	4603      	mov	r3, r0
 8000614:	73bb      	strb	r3, [r7, #14]
    
    if(empty < FT6x06_MAX_INSTANCE)
 8000616:	7bbb      	ldrb	r3, [r7, #14]
 8000618:	2b01      	cmp	r3, #1
 800061a:	d806      	bhi.n	800062a <ft6x06_Init+0x3a>
    {
      /* Register the current device instance */
      ft6x06[empty] = DeviceAddr;
 800061c:	7bbb      	ldrb	r3, [r7, #14]
 800061e:	88fa      	ldrh	r2, [r7, #6]
 8000620:	b2d1      	uxtb	r1, r2
 8000622:	4a04      	ldr	r2, [pc, #16]	; (8000634 <ft6x06_Init+0x44>)
 8000624:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      TS_IO_Init(); 
 8000626:	f000 fcd5 	bl	8000fd4 <TS_IO_Init>
    }
  }
}
 800062a:	bf00      	nop
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	200000cc 	.word	0x200000cc

08000638 <ft6x06_Reset>:
  *         @note : Not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 8000642:	bf00      	nop
 8000644:	370c      	adds	r7, #12
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr

0800064e <ft6x06_ReadID>:
  *         able to read the FT6206 device ID, and verify this is a FT6206.
  * @param  DeviceAddr: I2C FT6x06 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft6x06_ReadID(uint16_t DeviceAddr)
{
 800064e:	b580      	push	{r7, lr}
 8000650:	b082      	sub	sp, #8
 8000652:	af00      	add	r7, sp, #0
 8000654:	4603      	mov	r3, r0
 8000656:	80fb      	strh	r3, [r7, #6]
  /* Initialize I2C link if needed */
  TS_IO_Init();
 8000658:	f000 fcbc 	bl	8000fd4 <TS_IO_Init>
  
  /* Return the device ID value */
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 800065c:	88fb      	ldrh	r3, [r7, #6]
 800065e:	b2db      	uxtb	r3, r3
 8000660:	21a8      	movs	r1, #168	; 0xa8
 8000662:	4618      	mov	r0, r3
 8000664:	f000 fcda 	bl	800101c <TS_IO_Read>
 8000668:	4603      	mov	r3, r0
 800066a:	b29b      	uxth	r3, r3
}
 800066c:	4618      	mov	r0, r3
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}

08000674 <ft6x06_TS_Start>:
  *         the touch screen).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft6x06_TS_Start(uint16_t DeviceAddr)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	80fb      	strh	r3, [r7, #6]
  /* Hw Calibration sequence start : should be done once after each power up */
  /* This is called internal calibration of the touch screen                 */
  ft6x06_TS_Calibration(DeviceAddr);
#endif
  /* Minimum static configuration of FT6206 */
  ft6x06_TS_Configure(DeviceAddr);
 800067e:	88fb      	ldrh	r3, [r7, #6]
 8000680:	4618      	mov	r0, r3
 8000682:	f000 f8bc 	bl	80007fe <ft6x06_TS_Configure>

  /* By default set FT6206 IC in Polling mode : no INT generation on FT6206 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft6x06_TS_DisableIT(DeviceAddr);
 8000686:	88fb      	ldrh	r3, [r7, #6]
 8000688:	4618      	mov	r0, r3
 800068a:	f000 f88d 	bl	80007a8 <ft6x06_TS_DisableIT>
}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
	...

08000698 <ft6x06_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft6x06_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	73fb      	strb	r3, [r7, #15]

  /* Read register FT6206_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 80006a6:	88fb      	ldrh	r3, [r7, #6]
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	2102      	movs	r1, #2
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 fcb5 	bl	800101c <TS_IO_Read>
 80006b2:	4603      	mov	r3, r0
 80006b4:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT6206_TD_STAT_MASK;
 80006b6:	7bfb      	ldrb	r3, [r7, #15]
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	f003 030f 	and.w	r3, r3, #15
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	2b02      	cmp	r3, #2
 80006c8:	d901      	bls.n	80006ce <ft6x06_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft6x06 driver internal global : current number of active touches */
  ft6x06_handle.currActiveTouchNb = nbTouch;
 80006ce:	7bfb      	ldrb	r3, [r7, #15]
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <ft6x06_TS_DetectTouch+0x50>)
 80006d4:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft6x06_handle.currActiveTouchIdx = 0;
 80006d6:	4b04      	ldr	r3, [pc, #16]	; (80006e8 <ft6x06_TS_DetectTouch+0x50>)
 80006d8:	2200      	movs	r2, #0
 80006da:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	b2db      	uxtb	r3, r3
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3710      	adds	r7, #16
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	200000d0 	.word	0x200000d0

080006ec <ft6x06_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft6x06_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
 80006f8:	81fb      	strh	r3, [r7, #14]
  uint8_t regAddress = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	75fb      	strb	r3, [r7, #23]
  uint8_t  dataxy[4];
  
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 80006fe:	4b1f      	ldr	r3, [pc, #124]	; (800077c <ft6x06_TS_GetXY+0x90>)
 8000700:	789a      	ldrb	r2, [r3, #2]
 8000702:	4b1e      	ldr	r3, [pc, #120]	; (800077c <ft6x06_TS_GetXY+0x90>)
 8000704:	785b      	ldrb	r3, [r3, #1]
 8000706:	429a      	cmp	r2, r3
 8000708:	d234      	bcs.n	8000774 <ft6x06_TS_GetXY+0x88>
  {
    switch(ft6x06_handle.currActiveTouchIdx)
 800070a:	4b1c      	ldr	r3, [pc, #112]	; (800077c <ft6x06_TS_GetXY+0x90>)
 800070c:	789b      	ldrb	r3, [r3, #2]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d002      	beq.n	8000718 <ft6x06_TS_GetXY+0x2c>
 8000712:	2b01      	cmp	r3, #1
 8000714:	d003      	beq.n	800071e <ft6x06_TS_GetXY+0x32>
    case 1 :
      regAddress = FT6206_P2_XH_REG; 
      break;

    default :
      break;
 8000716:	e005      	b.n	8000724 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P1_XH_REG; 
 8000718:	2303      	movs	r3, #3
 800071a:	75fb      	strb	r3, [r7, #23]
      break;
 800071c:	e002      	b.n	8000724 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P2_XH_REG; 
 800071e:	2309      	movs	r3, #9
 8000720:	75fb      	strb	r3, [r7, #23]
      break;
 8000722:	bf00      	nop
    }
    
    /* Read X and Y positions */
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 8000724:	89fb      	ldrh	r3, [r7, #14]
 8000726:	b2d8      	uxtb	r0, r3
 8000728:	f107 0210 	add.w	r2, r7, #16
 800072c:	7df9      	ldrb	r1, [r7, #23]
 800072e:	2304      	movs	r3, #4
 8000730:	f000 fc92 	bl	8001058 <TS_IO_ReadMultiple>

    /* Send back ready X position to caller */
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 8000734:	7c3b      	ldrb	r3, [r7, #16]
 8000736:	021b      	lsls	r3, r3, #8
 8000738:	b21b      	sxth	r3, r3
 800073a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800073e:	b21a      	sxth	r2, r3
 8000740:	7c7b      	ldrb	r3, [r7, #17]
 8000742:	b21b      	sxth	r3, r3
 8000744:	4313      	orrs	r3, r2
 8000746:	b21b      	sxth	r3, r3
 8000748:	b29a      	uxth	r2, r3
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	801a      	strh	r2, [r3, #0]
    
    /* Send back ready Y position to caller */
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 800074e:	7cbb      	ldrb	r3, [r7, #18]
 8000750:	021b      	lsls	r3, r3, #8
 8000752:	b21b      	sxth	r3, r3
 8000754:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000758:	b21a      	sxth	r2, r3
 800075a:	7cfb      	ldrb	r3, [r7, #19]
 800075c:	b21b      	sxth	r3, r3
 800075e:	4313      	orrs	r3, r2
 8000760:	b21b      	sxth	r3, r3
 8000762:	b29a      	uxth	r2, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	801a      	strh	r2, [r3, #0]
    
    ft6x06_handle.currActiveTouchIdx++;
 8000768:	4b04      	ldr	r3, [pc, #16]	; (800077c <ft6x06_TS_GetXY+0x90>)
 800076a:	789b      	ldrb	r3, [r3, #2]
 800076c:	3301      	adds	r3, #1
 800076e:	b2da      	uxtb	r2, r3
 8000770:	4b02      	ldr	r3, [pc, #8]	; (800077c <ft6x06_TS_GetXY+0x90>)
 8000772:	709a      	strb	r2, [r3, #2]
  }
}
 8000774:	bf00      	nop
 8000776:	3718      	adds	r7, #24
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	200000d0 	.word	0x200000d0

08000780 <ft6x06_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_EnableIT(uint16_t DeviceAddr)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 800078a:	2300      	movs	r3, #0
 800078c:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_TRIGGER & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 800078e:	2301      	movs	r3, #1
 8000790:	73fb      	strb	r3, [r7, #15]
  
  /* Set interrupt trigger mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8000792:	88fb      	ldrh	r3, [r7, #6]
 8000794:	b2db      	uxtb	r3, r3
 8000796:	7bfa      	ldrb	r2, [r7, #15]
 8000798:	21a4      	movs	r1, #164	; 0xa4
 800079a:	4618      	mov	r0, r3
 800079c:	f000 fc24 	bl	8000fe8 <TS_IO_Write>
}
 80007a0:	bf00      	nop
 80007a2:	3710      	adds	r7, #16
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <ft6x06_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_DisableIT(uint16_t DeviceAddr)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_POLLING & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 80007b6:	2300      	movs	r3, #0
 80007b8:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 80007ba:	88fb      	ldrh	r3, [r7, #6]
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	7bfa      	ldrb	r2, [r7, #15]
 80007c0:	21a4      	movs	r1, #164	; 0xa4
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 fc10 	bl	8000fe8 <TS_IO_Write>
}
 80007c8:	bf00      	nop
 80007ca:	3710      	adds	r7, #16
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <ft6x06_TS_ITStatus>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
 80007da:	2300      	movs	r3, #0
}
 80007dc:	4618      	mov	r0, r3
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <ft6x06_TS_ClearIT>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_TS_ClearIT(uint16_t DeviceAddr)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT6206 */
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr

080007fe <ft6x06_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT6206 Device address for communication on I2C Bus.
  * @retval Status FT6206_STATUS_OK or FT6206_STATUS_NOT_OK.
  */
static uint32_t ft6x06_TS_Configure(uint16_t DeviceAddr)
{
 80007fe:	b480      	push	{r7}
 8000800:	b085      	sub	sp, #20
 8000802:	af00      	add	r7, sp, #0
 8000804:	4603      	mov	r3, r0
 8000806:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT6206_STATUS_OK;
 8000808:	2300      	movs	r3, #0
 800080a:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT6206 */

  return(status);
 800080c:	68fb      	ldr	r3, [r7, #12]
}
 800080e:	4618      	mov	r0, r3
 8000810:	3714      	adds	r7, #20
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
	...

0800081c <ft6x06_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t ft6x06_GetInstance(uint16_t DeviceAddr)
{
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8000826:	2300      	movs	r3, #0
 8000828:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 800082a:	2300      	movs	r3, #0
 800082c:	73fb      	strb	r3, [r7, #15]
 800082e:	e00b      	b.n	8000848 <ft6x06_GetInstance+0x2c>
  {
    if(ft6x06[idx] == DeviceAddr)
 8000830:	7bfb      	ldrb	r3, [r7, #15]
 8000832:	4a0a      	ldr	r2, [pc, #40]	; (800085c <ft6x06_GetInstance+0x40>)
 8000834:	5cd3      	ldrb	r3, [r2, r3]
 8000836:	b29b      	uxth	r3, r3
 8000838:	88fa      	ldrh	r2, [r7, #6]
 800083a:	429a      	cmp	r2, r3
 800083c:	d101      	bne.n	8000842 <ft6x06_GetInstance+0x26>
    {
      return idx; 
 800083e:	7bfb      	ldrb	r3, [r7, #15]
 8000840:	e006      	b.n	8000850 <ft6x06_GetInstance+0x34>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 8000842:	7bfb      	ldrb	r3, [r7, #15]
 8000844:	3301      	adds	r3, #1
 8000846:	73fb      	strb	r3, [r7, #15]
 8000848:	7bfb      	ldrb	r3, [r7, #15]
 800084a:	2b01      	cmp	r3, #1
 800084c:	d9f0      	bls.n	8000830 <ft6x06_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 800084e:	23ff      	movs	r3, #255	; 0xff
}
 8000850:	4618      	mov	r0, r3
 8000852:	3714      	adds	r7, #20
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr
 800085c:	200000cc 	.word	0x200000cc

08000860 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800086a:	49be      	ldr	r1, [pc, #760]	; (8000b64 <OTM8009A_Init+0x304>)
 800086c:	2000      	movs	r0, #0
 800086e:	f001 fa83 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 8000872:	49bd      	ldr	r1, [pc, #756]	; (8000b68 <OTM8009A_Init+0x308>)
 8000874:	2003      	movs	r0, #3
 8000876:	f001 fa7f 	bl	8001d78 <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 800087a:	49bc      	ldr	r1, [pc, #752]	; (8000b6c <OTM8009A_Init+0x30c>)
 800087c:	2000      	movs	r0, #0
 800087e:	f001 fa7b 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8000882:	49bb      	ldr	r1, [pc, #748]	; (8000b70 <OTM8009A_Init+0x310>)
 8000884:	2002      	movs	r0, #2
 8000886:	f001 fa77 	bl	8001d78 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800088a:	49b8      	ldr	r1, [pc, #736]	; (8000b6c <OTM8009A_Init+0x30c>)
 800088c:	2000      	movs	r0, #0
 800088e:	f001 fa73 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 8000892:	49b8      	ldr	r1, [pc, #736]	; (8000b74 <OTM8009A_Init+0x314>)
 8000894:	2000      	movs	r0, #0
 8000896:	f001 fa6f 	bl	8001d78 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 800089a:	200a      	movs	r0, #10
 800089c:	f000 fbfa 	bl	8001094 <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 80008a0:	49b5      	ldr	r1, [pc, #724]	; (8000b78 <OTM8009A_Init+0x318>)
 80008a2:	2000      	movs	r0, #0
 80008a4:	f001 fa68 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 80008a8:	49b4      	ldr	r1, [pc, #720]	; (8000b7c <OTM8009A_Init+0x31c>)
 80008aa:	2000      	movs	r0, #0
 80008ac:	f001 fa64 	bl	8001d78 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 80008b0:	200a      	movs	r0, #10
 80008b2:	f000 fbef 	bl	8001094 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 80008b6:	49b2      	ldr	r1, [pc, #712]	; (8000b80 <OTM8009A_Init+0x320>)
 80008b8:	2000      	movs	r0, #0
 80008ba:	f001 fa5d 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 80008be:	49b1      	ldr	r1, [pc, #708]	; (8000b84 <OTM8009A_Init+0x324>)
 80008c0:	2000      	movs	r0, #0
 80008c2:	f001 fa59 	bl	8001d78 <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 80008c6:	49b0      	ldr	r1, [pc, #704]	; (8000b88 <OTM8009A_Init+0x328>)
 80008c8:	2000      	movs	r0, #0
 80008ca:	f001 fa55 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 80008ce:	49af      	ldr	r1, [pc, #700]	; (8000b8c <OTM8009A_Init+0x32c>)
 80008d0:	2000      	movs	r0, #0
 80008d2:	f001 fa51 	bl	8001d78 <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 80008d6:	49ae      	ldr	r1, [pc, #696]	; (8000b90 <OTM8009A_Init+0x330>)
 80008d8:	2000      	movs	r0, #0
 80008da:	f001 fa4d 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 80008de:	49ad      	ldr	r1, [pc, #692]	; (8000b94 <OTM8009A_Init+0x334>)
 80008e0:	2000      	movs	r0, #0
 80008e2:	f001 fa49 	bl	8001d78 <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80008e6:	499f      	ldr	r1, [pc, #636]	; (8000b64 <OTM8009A_Init+0x304>)
 80008e8:	2000      	movs	r0, #0
 80008ea:	f001 fa45 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 80008ee:	49aa      	ldr	r1, [pc, #680]	; (8000b98 <OTM8009A_Init+0x338>)
 80008f0:	2000      	movs	r0, #0
 80008f2:	f001 fa41 	bl	8001d78 <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80008f6:	49a9      	ldr	r1, [pc, #676]	; (8000b9c <OTM8009A_Init+0x33c>)
 80008f8:	2000      	movs	r0, #0
 80008fa:	f001 fa3d 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 80008fe:	49a8      	ldr	r1, [pc, #672]	; (8000ba0 <OTM8009A_Init+0x340>)
 8000900:	2000      	movs	r0, #0
 8000902:	f001 fa39 	bl	8001d78 <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8000906:	49a7      	ldr	r1, [pc, #668]	; (8000ba4 <OTM8009A_Init+0x344>)
 8000908:	2000      	movs	r0, #0
 800090a:	f001 fa35 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 800090e:	49a6      	ldr	r1, [pc, #664]	; (8000ba8 <OTM8009A_Init+0x348>)
 8000910:	2000      	movs	r0, #0
 8000912:	f001 fa31 	bl	8001d78 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 8000916:	49a5      	ldr	r1, [pc, #660]	; (8000bac <OTM8009A_Init+0x34c>)
 8000918:	2000      	movs	r0, #0
 800091a:	f001 fa2d 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 800091e:	49a4      	ldr	r1, [pc, #656]	; (8000bb0 <OTM8009A_Init+0x350>)
 8000920:	2000      	movs	r0, #0
 8000922:	f001 fa29 	bl	8001d78 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 8000926:	49a3      	ldr	r1, [pc, #652]	; (8000bb4 <OTM8009A_Init+0x354>)
 8000928:	2000      	movs	r0, #0
 800092a:	f001 fa25 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 800092e:	4997      	ldr	r1, [pc, #604]	; (8000b8c <OTM8009A_Init+0x32c>)
 8000930:	2000      	movs	r0, #0
 8000932:	f001 fa21 	bl	8001d78 <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000936:	498b      	ldr	r1, [pc, #556]	; (8000b64 <OTM8009A_Init+0x304>)
 8000938:	2000      	movs	r0, #0
 800093a:	f001 fa1d 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 800093e:	499e      	ldr	r1, [pc, #632]	; (8000bb8 <OTM8009A_Init+0x358>)
 8000940:	2002      	movs	r0, #2
 8000942:	f001 fa19 	bl	8001d78 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 8000946:	499d      	ldr	r1, [pc, #628]	; (8000bbc <OTM8009A_Init+0x35c>)
 8000948:	2000      	movs	r0, #0
 800094a:	f001 fa15 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 800094e:	499c      	ldr	r1, [pc, #624]	; (8000bc0 <OTM8009A_Init+0x360>)
 8000950:	2000      	movs	r0, #0
 8000952:	f001 fa11 	bl	8001d78 <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 8000956:	499b      	ldr	r1, [pc, #620]	; (8000bc4 <OTM8009A_Init+0x364>)
 8000958:	2000      	movs	r0, #0
 800095a:	f001 fa0d 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 800095e:	499a      	ldr	r1, [pc, #616]	; (8000bc8 <OTM8009A_Init+0x368>)
 8000960:	2000      	movs	r0, #0
 8000962:	f001 fa09 	bl	8001d78 <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 8000966:	4999      	ldr	r1, [pc, #612]	; (8000bcc <OTM8009A_Init+0x36c>)
 8000968:	2000      	movs	r0, #0
 800096a:	f001 fa05 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 800096e:	4998      	ldr	r1, [pc, #608]	; (8000bd0 <OTM8009A_Init+0x370>)
 8000970:	2000      	movs	r0, #0
 8000972:	f001 fa01 	bl	8001d78 <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8000976:	4989      	ldr	r1, [pc, #548]	; (8000b9c <OTM8009A_Init+0x33c>)
 8000978:	2000      	movs	r0, #0
 800097a:	f001 f9fd 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 800097e:	4995      	ldr	r1, [pc, #596]	; (8000bd4 <OTM8009A_Init+0x374>)
 8000980:	2000      	movs	r0, #0
 8000982:	f001 f9f9 	bl	8001d78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8000986:	4987      	ldr	r1, [pc, #540]	; (8000ba4 <OTM8009A_Init+0x344>)
 8000988:	2000      	movs	r0, #0
 800098a:	f001 f9f5 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 800098e:	4992      	ldr	r1, [pc, #584]	; (8000bd8 <OTM8009A_Init+0x378>)
 8000990:	2000      	movs	r0, #0
 8000992:	f001 f9f1 	bl	8001d78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 8000996:	4991      	ldr	r1, [pc, #580]	; (8000bdc <OTM8009A_Init+0x37c>)
 8000998:	2000      	movs	r0, #0
 800099a:	f001 f9ed 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 800099e:	4990      	ldr	r1, [pc, #576]	; (8000be0 <OTM8009A_Init+0x380>)
 80009a0:	2002      	movs	r0, #2
 80009a2:	f001 f9e9 	bl	8001d78 <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80009a6:	4971      	ldr	r1, [pc, #452]	; (8000b6c <OTM8009A_Init+0x30c>)
 80009a8:	2000      	movs	r0, #0
 80009aa:	f001 f9e5 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 80009ae:	498d      	ldr	r1, [pc, #564]	; (8000be4 <OTM8009A_Init+0x384>)
 80009b0:	2006      	movs	r0, #6
 80009b2:	f001 f9e1 	bl	8001d78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80009b6:	498c      	ldr	r1, [pc, #560]	; (8000be8 <OTM8009A_Init+0x388>)
 80009b8:	2000      	movs	r0, #0
 80009ba:	f001 f9dd 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 80009be:	498b      	ldr	r1, [pc, #556]	; (8000bec <OTM8009A_Init+0x38c>)
 80009c0:	200e      	movs	r0, #14
 80009c2:	f001 f9d9 	bl	8001d78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80009c6:	498a      	ldr	r1, [pc, #552]	; (8000bf0 <OTM8009A_Init+0x390>)
 80009c8:	2000      	movs	r0, #0
 80009ca:	f001 f9d5 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 80009ce:	4989      	ldr	r1, [pc, #548]	; (8000bf4 <OTM8009A_Init+0x394>)
 80009d0:	200e      	movs	r0, #14
 80009d2:	f001 f9d1 	bl	8001d78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80009d6:	4988      	ldr	r1, [pc, #544]	; (8000bf8 <OTM8009A_Init+0x398>)
 80009d8:	2000      	movs	r0, #0
 80009da:	f001 f9cd 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 80009de:	4987      	ldr	r1, [pc, #540]	; (8000bfc <OTM8009A_Init+0x39c>)
 80009e0:	200a      	movs	r0, #10
 80009e2:	f001 f9c9 	bl	8001d78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80009e6:	4986      	ldr	r1, [pc, #536]	; (8000c00 <OTM8009A_Init+0x3a0>)
 80009e8:	2000      	movs	r0, #0
 80009ea:	f001 f9c5 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 80009ee:	4985      	ldr	r1, [pc, #532]	; (8000c04 <OTM8009A_Init+0x3a4>)
 80009f0:	2000      	movs	r0, #0
 80009f2:	f001 f9c1 	bl	8001d78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80009f6:	495d      	ldr	r1, [pc, #372]	; (8000b6c <OTM8009A_Init+0x30c>)
 80009f8:	2000      	movs	r0, #0
 80009fa:	f001 f9bd 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 80009fe:	4982      	ldr	r1, [pc, #520]	; (8000c08 <OTM8009A_Init+0x3a8>)
 8000a00:	200a      	movs	r0, #10
 8000a02:	f001 f9b9 	bl	8001d78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8000a06:	4981      	ldr	r1, [pc, #516]	; (8000c0c <OTM8009A_Init+0x3ac>)
 8000a08:	2000      	movs	r0, #0
 8000a0a:	f001 f9b5 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 8000a0e:	4980      	ldr	r1, [pc, #512]	; (8000c10 <OTM8009A_Init+0x3b0>)
 8000a10:	200f      	movs	r0, #15
 8000a12:	f001 f9b1 	bl	8001d78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8000a16:	4974      	ldr	r1, [pc, #464]	; (8000be8 <OTM8009A_Init+0x388>)
 8000a18:	2000      	movs	r0, #0
 8000a1a:	f001 f9ad 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 8000a1e:	497d      	ldr	r1, [pc, #500]	; (8000c14 <OTM8009A_Init+0x3b4>)
 8000a20:	200f      	movs	r0, #15
 8000a22:	f001 f9a9 	bl	8001d78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8000a26:	4972      	ldr	r1, [pc, #456]	; (8000bf0 <OTM8009A_Init+0x390>)
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f001 f9a5 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 8000a2e:	497a      	ldr	r1, [pc, #488]	; (8000c18 <OTM8009A_Init+0x3b8>)
 8000a30:	200a      	movs	r0, #10
 8000a32:	f001 f9a1 	bl	8001d78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8000a36:	4970      	ldr	r1, [pc, #448]	; (8000bf8 <OTM8009A_Init+0x398>)
 8000a38:	2000      	movs	r0, #0
 8000a3a:	f001 f99d 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 8000a3e:	4977      	ldr	r1, [pc, #476]	; (8000c1c <OTM8009A_Init+0x3bc>)
 8000a40:	200f      	movs	r0, #15
 8000a42:	f001 f999 	bl	8001d78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8000a46:	496e      	ldr	r1, [pc, #440]	; (8000c00 <OTM8009A_Init+0x3a0>)
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f001 f995 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 8000a4e:	4974      	ldr	r1, [pc, #464]	; (8000c20 <OTM8009A_Init+0x3c0>)
 8000a50:	200f      	movs	r0, #15
 8000a52:	f001 f991 	bl	8001d78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 8000a56:	4973      	ldr	r1, [pc, #460]	; (8000c24 <OTM8009A_Init+0x3c4>)
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f001 f98d 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 8000a5e:	4972      	ldr	r1, [pc, #456]	; (8000c28 <OTM8009A_Init+0x3c8>)
 8000a60:	200a      	movs	r0, #10
 8000a62:	f001 f989 	bl	8001d78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 8000a66:	4971      	ldr	r1, [pc, #452]	; (8000c2c <OTM8009A_Init+0x3cc>)
 8000a68:	2000      	movs	r0, #0
 8000a6a:	f001 f985 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 8000a6e:	4970      	ldr	r1, [pc, #448]	; (8000c30 <OTM8009A_Init+0x3d0>)
 8000a70:	200a      	movs	r0, #10
 8000a72:	f001 f981 	bl	8001d78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8000a76:	493d      	ldr	r1, [pc, #244]	; (8000b6c <OTM8009A_Init+0x30c>)
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f001 f97d 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 8000a7e:	496d      	ldr	r1, [pc, #436]	; (8000c34 <OTM8009A_Init+0x3d4>)
 8000a80:	200a      	movs	r0, #10
 8000a82:	f001 f979 	bl	8001d78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8000a86:	4961      	ldr	r1, [pc, #388]	; (8000c0c <OTM8009A_Init+0x3ac>)
 8000a88:	2000      	movs	r0, #0
 8000a8a:	f001 f975 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 8000a8e:	496a      	ldr	r1, [pc, #424]	; (8000c38 <OTM8009A_Init+0x3d8>)
 8000a90:	200f      	movs	r0, #15
 8000a92:	f001 f971 	bl	8001d78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8000a96:	4954      	ldr	r1, [pc, #336]	; (8000be8 <OTM8009A_Init+0x388>)
 8000a98:	2000      	movs	r0, #0
 8000a9a:	f001 f96d 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 8000a9e:	4967      	ldr	r1, [pc, #412]	; (8000c3c <OTM8009A_Init+0x3dc>)
 8000aa0:	200f      	movs	r0, #15
 8000aa2:	f001 f969 	bl	8001d78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8000aa6:	4952      	ldr	r1, [pc, #328]	; (8000bf0 <OTM8009A_Init+0x390>)
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	f001 f965 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 8000aae:	4964      	ldr	r1, [pc, #400]	; (8000c40 <OTM8009A_Init+0x3e0>)
 8000ab0:	200a      	movs	r0, #10
 8000ab2:	f001 f961 	bl	8001d78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8000ab6:	4950      	ldr	r1, [pc, #320]	; (8000bf8 <OTM8009A_Init+0x398>)
 8000ab8:	2000      	movs	r0, #0
 8000aba:	f001 f95d 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 8000abe:	4961      	ldr	r1, [pc, #388]	; (8000c44 <OTM8009A_Init+0x3e4>)
 8000ac0:	200f      	movs	r0, #15
 8000ac2:	f001 f959 	bl	8001d78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8000ac6:	494e      	ldr	r1, [pc, #312]	; (8000c00 <OTM8009A_Init+0x3a0>)
 8000ac8:	2000      	movs	r0, #0
 8000aca:	f001 f955 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 8000ace:	495e      	ldr	r1, [pc, #376]	; (8000c48 <OTM8009A_Init+0x3e8>)
 8000ad0:	200f      	movs	r0, #15
 8000ad2:	f001 f951 	bl	8001d78 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8000ad6:	4931      	ldr	r1, [pc, #196]	; (8000b9c <OTM8009A_Init+0x33c>)
 8000ad8:	2000      	movs	r0, #0
 8000ada:	f001 f94d 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 8000ade:	495b      	ldr	r1, [pc, #364]	; (8000c4c <OTM8009A_Init+0x3ec>)
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f001 f949 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 8000ae6:	495a      	ldr	r1, [pc, #360]	; (8000c50 <OTM8009A_Init+0x3f0>)
 8000ae8:	2000      	movs	r0, #0
 8000aea:	f001 f945 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 8000aee:	4959      	ldr	r1, [pc, #356]	; (8000c54 <OTM8009A_Init+0x3f4>)
 8000af0:	2000      	movs	r0, #0
 8000af2:	f001 f941 	bl	8001d78 <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 8000af6:	4958      	ldr	r1, [pc, #352]	; (8000c58 <OTM8009A_Init+0x3f8>)
 8000af8:	2000      	movs	r0, #0
 8000afa:	f001 f93d 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 8000afe:	4957      	ldr	r1, [pc, #348]	; (8000c5c <OTM8009A_Init+0x3fc>)
 8000b00:	2000      	movs	r0, #0
 8000b02:	f001 f939 	bl	8001d78 <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000b06:	4917      	ldr	r1, [pc, #92]	; (8000b64 <OTM8009A_Init+0x304>)
 8000b08:	2000      	movs	r0, #0
 8000b0a:	f001 f935 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 8000b0e:	4954      	ldr	r1, [pc, #336]	; (8000c60 <OTM8009A_Init+0x400>)
 8000b10:	2003      	movs	r0, #3
 8000b12:	f001 f931 	bl	8001d78 <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000b16:	4913      	ldr	r1, [pc, #76]	; (8000b64 <OTM8009A_Init+0x304>)
 8000b18:	2000      	movs	r0, #0
 8000b1a:	f001 f92d 	bl	8001d78 <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000b1e:	4911      	ldr	r1, [pc, #68]	; (8000b64 <OTM8009A_Init+0x304>)
 8000b20:	2000      	movs	r0, #0
 8000b22:	f001 f929 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 8000b26:	494f      	ldr	r1, [pc, #316]	; (8000c64 <OTM8009A_Init+0x404>)
 8000b28:	2010      	movs	r0, #16
 8000b2a:	f001 f925 	bl	8001d78 <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000b2e:	490d      	ldr	r1, [pc, #52]	; (8000b64 <OTM8009A_Init+0x304>)
 8000b30:	2000      	movs	r0, #0
 8000b32:	f001 f921 	bl	8001d78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 8000b36:	494c      	ldr	r1, [pc, #304]	; (8000c68 <OTM8009A_Init+0x408>)
 8000b38:	2010      	movs	r0, #16
 8000b3a:	f001 f91d 	bl	8001d78 <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 8000b3e:	494b      	ldr	r1, [pc, #300]	; (8000c6c <OTM8009A_Init+0x40c>)
 8000b40:	2000      	movs	r0, #0
 8000b42:	f001 f919 	bl	8001d78 <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 8000b46:	2078      	movs	r0, #120	; 0x78
 8000b48:	f000 faa4 	bl	8001094 <OTM8009A_IO_Delay>

  switch(ColorCoding)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	f000 8090 	beq.w	8000c74 <OTM8009A_Init+0x414>
 8000b54:	2b02      	cmp	r3, #2
 8000b56:	d000      	beq.n	8000b5a <OTM8009A_Init+0x2fa>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
    break;
  default :
    break;
 8000b58:	e091      	b.n	8000c7e <OTM8009A_Init+0x41e>
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 8000b5a:	4945      	ldr	r1, [pc, #276]	; (8000c70 <OTM8009A_Init+0x410>)
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	f001 f90b 	bl	8001d78 <DSI_IO_WriteCmd>
    break;
 8000b62:	e08c      	b.n	8000c7e <OTM8009A_Init+0x41e>
 8000b64:	0800fddc 	.word	0x0800fddc
 8000b68:	0800fc94 	.word	0x0800fc94
 8000b6c:	0800fde0 	.word	0x0800fde0
 8000b70:	0800fc98 	.word	0x0800fc98
 8000b74:	0800fde4 	.word	0x0800fde4
 8000b78:	0800fde8 	.word	0x0800fde8
 8000b7c:	0800fdec 	.word	0x0800fdec
 8000b80:	0800fdf0 	.word	0x0800fdf0
 8000b84:	0800fdf4 	.word	0x0800fdf4
 8000b88:	0800fdf8 	.word	0x0800fdf8
 8000b8c:	0800fdfc 	.word	0x0800fdfc
 8000b90:	0800fe00 	.word	0x0800fe00
 8000b94:	0800fe04 	.word	0x0800fe04
 8000b98:	0800fe08 	.word	0x0800fe08
 8000b9c:	0800fe0c 	.word	0x0800fe0c
 8000ba0:	0800fe10 	.word	0x0800fe10
 8000ba4:	0800fe14 	.word	0x0800fe14
 8000ba8:	0800fe18 	.word	0x0800fe18
 8000bac:	0800fe1c 	.word	0x0800fe1c
 8000bb0:	0800fe20 	.word	0x0800fe20
 8000bb4:	0800fe24 	.word	0x0800fe24
 8000bb8:	0800fcc4 	.word	0x0800fcc4
 8000bbc:	0800fe28 	.word	0x0800fe28
 8000bc0:	0800fe2c 	.word	0x0800fe2c
 8000bc4:	0800fe30 	.word	0x0800fe30
 8000bc8:	0800fe34 	.word	0x0800fe34
 8000bcc:	0800fe38 	.word	0x0800fe38
 8000bd0:	0800fe3c 	.word	0x0800fe3c
 8000bd4:	0800fe40 	.word	0x0800fe40
 8000bd8:	0800fe44 	.word	0x0800fe44
 8000bdc:	0800fe48 	.word	0x0800fe48
 8000be0:	0800fcc8 	.word	0x0800fcc8
 8000be4:	0800fccc 	.word	0x0800fccc
 8000be8:	0800fe4c 	.word	0x0800fe4c
 8000bec:	0800fcd4 	.word	0x0800fcd4
 8000bf0:	0800fe50 	.word	0x0800fe50
 8000bf4:	0800fce4 	.word	0x0800fce4
 8000bf8:	0800fe54 	.word	0x0800fe54
 8000bfc:	0800fcf4 	.word	0x0800fcf4
 8000c00:	0800fe58 	.word	0x0800fe58
 8000c04:	0800fe90 	.word	0x0800fe90
 8000c08:	0800fd00 	.word	0x0800fd00
 8000c0c:	0800fe5c 	.word	0x0800fe5c
 8000c10:	0800fd0c 	.word	0x0800fd0c
 8000c14:	0800fd1c 	.word	0x0800fd1c
 8000c18:	0800fd2c 	.word	0x0800fd2c
 8000c1c:	0800fd38 	.word	0x0800fd38
 8000c20:	0800fd48 	.word	0x0800fd48
 8000c24:	0800fe60 	.word	0x0800fe60
 8000c28:	0800fd58 	.word	0x0800fd58
 8000c2c:	0800fe64 	.word	0x0800fe64
 8000c30:	0800fd64 	.word	0x0800fd64
 8000c34:	0800fd70 	.word	0x0800fd70
 8000c38:	0800fd7c 	.word	0x0800fd7c
 8000c3c:	0800fd8c 	.word	0x0800fd8c
 8000c40:	0800fd9c 	.word	0x0800fd9c
 8000c44:	0800fda8 	.word	0x0800fda8
 8000c48:	0800fdb8 	.word	0x0800fdb8
 8000c4c:	0800fe94 	.word	0x0800fe94
 8000c50:	0800fe98 	.word	0x0800fe98
 8000c54:	0800fe9c 	.word	0x0800fe9c
 8000c58:	0800fea0 	.word	0x0800fea0
 8000c5c:	0800fea4 	.word	0x0800fea4
 8000c60:	0800fdc8 	.word	0x0800fdc8
 8000c64:	0800fc9c 	.word	0x0800fc9c
 8000c68:	0800fcb0 	.word	0x0800fcb0
 8000c6c:	0800fe68 	.word	0x0800fe68
 8000c70:	0800fe6c 	.word	0x0800fe6c
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8000c74:	491a      	ldr	r1, [pc, #104]	; (8000ce0 <OTM8009A_Init+0x480>)
 8000c76:	2000      	movs	r0, #0
 8000c78:	f001 f87e 	bl	8001d78 <DSI_IO_WriteCmd>
    break;
 8000c7c:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d10b      	bne.n	8000c9c <OTM8009A_Init+0x43c>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8000c84:	4917      	ldr	r1, [pc, #92]	; (8000ce4 <OTM8009A_Init+0x484>)
 8000c86:	2000      	movs	r0, #0
 8000c88:	f001 f876 	bl	8001d78 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 8000c8c:	4916      	ldr	r1, [pc, #88]	; (8000ce8 <OTM8009A_Init+0x488>)
 8000c8e:	2004      	movs	r0, #4
 8000c90:	f001 f872 	bl	8001d78 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8000c94:	4915      	ldr	r1, [pc, #84]	; (8000cec <OTM8009A_Init+0x48c>)
 8000c96:	2004      	movs	r0, #4
 8000c98:	f001 f86e 	bl	8001d78 <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 8000c9c:	4914      	ldr	r1, [pc, #80]	; (8000cf0 <OTM8009A_Init+0x490>)
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f001 f86a 	bl	8001d78 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8000ca4:	4913      	ldr	r1, [pc, #76]	; (8000cf4 <OTM8009A_Init+0x494>)
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f001 f866 	bl	8001d78 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 8000cac:	4912      	ldr	r1, [pc, #72]	; (8000cf8 <OTM8009A_Init+0x498>)
 8000cae:	2000      	movs	r0, #0
 8000cb0:	f001 f862 	bl	8001d78 <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8000cb4:	4911      	ldr	r1, [pc, #68]	; (8000cfc <OTM8009A_Init+0x49c>)
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	f001 f85e 	bl	8001d78 <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 8000cbc:	4910      	ldr	r1, [pc, #64]	; (8000d00 <OTM8009A_Init+0x4a0>)
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	f001 f85a 	bl	8001d78 <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000cc4:	490f      	ldr	r1, [pc, #60]	; (8000d04 <OTM8009A_Init+0x4a4>)
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f001 f856 	bl	8001d78 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 8000ccc:	490e      	ldr	r1, [pc, #56]	; (8000d08 <OTM8009A_Init+0x4a8>)
 8000cce:	2000      	movs	r0, #0
 8000cd0:	f001 f852 	bl	8001d78 <DSI_IO_WriteCmd>

  return 0;
 8000cd4:	2300      	movs	r3, #0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	0800fe70 	.word	0x0800fe70
 8000ce4:	0800fe74 	.word	0x0800fe74
 8000ce8:	0800fdcc 	.word	0x0800fdcc
 8000cec:	0800fdd4 	.word	0x0800fdd4
 8000cf0:	0800fe78 	.word	0x0800fe78
 8000cf4:	0800fe7c 	.word	0x0800fe7c
 8000cf8:	0800fe80 	.word	0x0800fe80
 8000cfc:	0800fe84 	.word	0x0800fe84
 8000d00:	0800fe88 	.word	0x0800fe88
 8000d04:	0800fddc 	.word	0x0800fddc
 8000d08:	0800fe8c 	.word	0x0800fe8c

08000d0c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08c      	sub	sp, #48	; 0x30
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4a58      	ldr	r2, [pc, #352]	; (8000e78 <I2Cx_MspInit+0x16c>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d15b      	bne.n	8000dd4 <I2Cx_MspInit+0xc8>
  {
  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_AUDIO_I2Cx_SCL_GPIO_CLK_ENABLE();
 8000d1c:	4b57      	ldr	r3, [pc, #348]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d20:	4a56      	ldr	r2, [pc, #344]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000d22:	f043 0308 	orr.w	r3, r3, #8
 8000d26:	6313      	str	r3, [r2, #48]	; 0x30
 8000d28:	4b54      	ldr	r3, [pc, #336]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2c:	f003 0308 	and.w	r3, r3, #8
 8000d30:	61bb      	str	r3, [r7, #24]
 8000d32:	69bb      	ldr	r3, [r7, #24]
  DISCOVERY_AUDIO_I2Cx_SDA_GPIO_CLK_ENABLE();
 8000d34:	4b51      	ldr	r3, [pc, #324]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d38:	4a50      	ldr	r2, [pc, #320]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000d3a:	f043 0302 	orr.w	r3, r3, #2
 8000d3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d40:	4b4e      	ldr	r3, [pc, #312]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d44:	f003 0302 	and.w	r3, r3, #2
 8000d48:	617b      	str	r3, [r7, #20]
 8000d4a:	697b      	ldr	r3, [r7, #20]
  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8000d4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d50:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000d52:	2312      	movs	r3, #18
 8000d54:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_AF;
 8000d5e:	2304      	movs	r3, #4
 8000d60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_GPIO_PORT, &gpio_init_structure);
 8000d62:	f107 031c 	add.w	r3, r7, #28
 8000d66:	4619      	mov	r1, r3
 8000d68:	4845      	ldr	r0, [pc, #276]	; (8000e80 <I2Cx_MspInit+0x174>)
 8000d6a:	f004 f8db 	bl	8004f24 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8000d6e:	2380      	movs	r3, #128	; 0x80
 8000d70:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SDA_AF;
 8000d72:	230b      	movs	r3, #11
 8000d74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SDA_GPIO_PORT, &gpio_init_structure);
 8000d76:	f107 031c 	add.w	r3, r7, #28
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4841      	ldr	r0, [pc, #260]	; (8000e84 <I2Cx_MspInit+0x178>)
 8000d7e:	f004 f8d1 	bl	8004f24 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8000d82:	4b3e      	ldr	r3, [pc, #248]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d86:	4a3d      	ldr	r2, [pc, #244]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000d88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d8e:	4b3b      	ldr	r3, [pc, #236]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000d96:	613b      	str	r3, [r7, #16]
 8000d98:	693b      	ldr	r3, [r7, #16]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8000d9a:	4b38      	ldr	r3, [pc, #224]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000d9c:	6a1b      	ldr	r3, [r3, #32]
 8000d9e:	4a37      	ldr	r2, [pc, #220]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000da0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000da4:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8000da6:	4b35      	ldr	r3, [pc, #212]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000da8:	6a1b      	ldr	r3, [r3, #32]
 8000daa:	4a34      	ldr	r2, [pc, #208]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000dac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000db0:	6213      	str	r3, [r2, #32]

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000db2:	2200      	movs	r2, #0
 8000db4:	210f      	movs	r1, #15
 8000db6:	205f      	movs	r0, #95	; 0x5f
 8000db8:	f002 fba9 	bl	800350e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8000dbc:	205f      	movs	r0, #95	; 0x5f
 8000dbe:	f002 fbc2 	bl	8003546 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	210f      	movs	r1, #15
 8000dc6:	2060      	movs	r0, #96	; 0x60
 8000dc8:	f002 fba1 	bl	800350e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);    
 8000dcc:	2060      	movs	r0, #96	; 0x60
 8000dce:	f002 fbba 	bl	8003546 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8000dd2:	e04d      	b.n	8000e70 <I2Cx_MspInit+0x164>
  DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000dd4:	4b29      	ldr	r3, [pc, #164]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd8:	4a28      	ldr	r2, [pc, #160]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000dda:	f043 0302 	orr.w	r3, r3, #2
 8000dde:	6313      	str	r3, [r2, #48]	; 0x30
 8000de0:	4b26      	ldr	r3, [pc, #152]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de4:	f003 0302 	and.w	r3, r3, #2
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	68fb      	ldr	r3, [r7, #12]
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8000dec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000df0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000df2:	2312      	movs	r3, #18
 8000df4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8000dfe:	2304      	movs	r3, #4
 8000e00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000e02:	f107 031c 	add.w	r3, r7, #28
 8000e06:	4619      	mov	r1, r3
 8000e08:	481e      	ldr	r0, [pc, #120]	; (8000e84 <I2Cx_MspInit+0x178>)
 8000e0a:	f004 f88b 	bl	8004f24 <HAL_GPIO_Init>
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8000e0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000e14:	f107 031c 	add.w	r3, r7, #28
 8000e18:	4619      	mov	r1, r3
 8000e1a:	481a      	ldr	r0, [pc, #104]	; (8000e84 <I2Cx_MspInit+0x178>)
 8000e1c:	f004 f882 	bl	8004f24 <HAL_GPIO_Init>
  DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8000e20:	4b16      	ldr	r3, [pc, #88]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e24:	4a15      	ldr	r2, [pc, #84]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000e26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2c:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e34:	60bb      	str	r3, [r7, #8]
 8000e36:	68bb      	ldr	r3, [r7, #8]
  DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8000e38:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000e3a:	6a1b      	ldr	r3, [r3, #32]
 8000e3c:	4a0f      	ldr	r2, [pc, #60]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000e3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e42:	6213      	str	r3, [r2, #32]
  DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8000e44:	4b0d      	ldr	r3, [pc, #52]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000e46:	6a1b      	ldr	r3, [r3, #32]
 8000e48:	4a0c      	ldr	r2, [pc, #48]	; (8000e7c <I2Cx_MspInit+0x170>)
 8000e4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000e4e:	6213      	str	r3, [r2, #32]
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8000e50:	2200      	movs	r2, #0
 8000e52:	210f      	movs	r1, #15
 8000e54:	201f      	movs	r0, #31
 8000e56:	f002 fb5a 	bl	800350e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8000e5a:	201f      	movs	r0, #31
 8000e5c:	f002 fb73 	bl	8003546 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8000e60:	2200      	movs	r2, #0
 8000e62:	210f      	movs	r1, #15
 8000e64:	2020      	movs	r0, #32
 8000e66:	f002 fb52 	bl	800350e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8000e6a:	2020      	movs	r0, #32
 8000e6c:	f002 fb6b 	bl	8003546 <HAL_NVIC_EnableIRQ>
}
 8000e70:	bf00      	nop
 8000e72:	3730      	adds	r7, #48	; 0x30
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	200000d4 	.word	0x200000d4
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	40020c00 	.word	0x40020c00
 8000e84:	40020400 	.word	0x40020400

08000e88 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f004 fe47 	bl	8005b24 <HAL_I2C_GetState>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d125      	bne.n	8000ee8 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4a14      	ldr	r2, [pc, #80]	; (8000ef0 <I2Cx_Init+0x68>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d103      	bne.n	8000eac <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4a13      	ldr	r2, [pc, #76]	; (8000ef4 <I2Cx_Init+0x6c>)
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	e002      	b.n	8000eb2 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4a12      	ldr	r2, [pc, #72]	; (8000ef8 <I2Cx_Init+0x70>)
 8000eb0:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a11      	ldr	r2, [pc, #68]	; (8000efc <I2Cx_Init+0x74>)
 8000eb6:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f7ff ff15 	bl	8000d0c <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f004 fb1c 	bl	8005520 <HAL_I2C_Init>
  }
}
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	200000d4 	.word	0x200000d4
 8000ef4:	40006000 	.word	0x40006000
 8000ef8:	40005400 	.word	0x40005400
 8000efc:	40912732 	.word	0x40912732

08000f00 <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08a      	sub	sp, #40	; 0x28
 8000f04:	af04      	add	r7, sp, #16
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	4608      	mov	r0, r1
 8000f0a:	4611      	mov	r1, r2
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4603      	mov	r3, r0
 8000f10:	72fb      	strb	r3, [r7, #11]
 8000f12:	460b      	mov	r3, r1
 8000f14:	813b      	strh	r3, [r7, #8]
 8000f16:	4613      	mov	r3, r2
 8000f18:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000f1e:	7afb      	ldrb	r3, [r7, #11]
 8000f20:	b299      	uxth	r1, r3
 8000f22:	88f8      	ldrh	r0, [r7, #6]
 8000f24:	893a      	ldrh	r2, [r7, #8]
 8000f26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f2a:	9302      	str	r3, [sp, #8]
 8000f2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f2e:	9301      	str	r3, [sp, #4]
 8000f30:	6a3b      	ldr	r3, [r7, #32]
 8000f32:	9300      	str	r3, [sp, #0]
 8000f34:	4603      	mov	r3, r0
 8000f36:	68f8      	ldr	r0, [r7, #12]
 8000f38:	f004 fcda 	bl	80058f0 <HAL_I2C_Mem_Read>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8000f40:	7dfb      	ldrb	r3, [r7, #23]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d004      	beq.n	8000f50 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8000f46:	7afb      	ldrb	r3, [r7, #11]
 8000f48:	4619      	mov	r1, r3
 8000f4a:	68f8      	ldr	r0, [r7, #12]
 8000f4c:	f000 f832 	bl	8000fb4 <I2Cx_Error>
  }
  return status;
 8000f50:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3718      	adds	r7, #24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b08a      	sub	sp, #40	; 0x28
 8000f5e:	af04      	add	r7, sp, #16
 8000f60:	60f8      	str	r0, [r7, #12]
 8000f62:	4608      	mov	r0, r1
 8000f64:	4611      	mov	r1, r2
 8000f66:	461a      	mov	r2, r3
 8000f68:	4603      	mov	r3, r0
 8000f6a:	72fb      	strb	r3, [r7, #11]
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	813b      	strh	r3, [r7, #8]
 8000f70:	4613      	mov	r3, r2
 8000f72:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000f74:	2300      	movs	r3, #0
 8000f76:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000f78:	7afb      	ldrb	r3, [r7, #11]
 8000f7a:	b299      	uxth	r1, r3
 8000f7c:	88f8      	ldrh	r0, [r7, #6]
 8000f7e:	893a      	ldrh	r2, [r7, #8]
 8000f80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f84:	9302      	str	r3, [sp, #8]
 8000f86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f88:	9301      	str	r3, [sp, #4]
 8000f8a:	6a3b      	ldr	r3, [r7, #32]
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	4603      	mov	r3, r0
 8000f90:	68f8      	ldr	r0, [r7, #12]
 8000f92:	f004 fb99 	bl	80056c8 <HAL_I2C_Mem_Write>
 8000f96:	4603      	mov	r3, r0
 8000f98:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8000f9a:	7dfb      	ldrb	r3, [r7, #23]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d004      	beq.n	8000faa <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8000fa0:	7afb      	ldrb	r3, [r7, #11]
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	68f8      	ldr	r0, [r7, #12]
 8000fa6:	f000 f805 	bl	8000fb4 <I2Cx_Error>
  }
  return status;
 8000faa:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3718      	adds	r7, #24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f004 fb3d 	bl	8005640 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f7ff ff5e 	bl	8000e88 <I2Cx_Init>
}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8000fd8:	4802      	ldr	r0, [pc, #8]	; (8000fe4 <TS_IO_Init+0x10>)
 8000fda:	f7ff ff55 	bl	8000e88 <I2Cx_Init>
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	200000d4 	.word	0x200000d4

08000fe8 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	71bb      	strb	r3, [r7, #6]
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8000ffa:	79bb      	ldrb	r3, [r7, #6]
 8000ffc:	b29a      	uxth	r2, r3
 8000ffe:	79f9      	ldrb	r1, [r7, #7]
 8001000:	2301      	movs	r3, #1
 8001002:	9301      	str	r3, [sp, #4]
 8001004:	1d7b      	adds	r3, r7, #5
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	2301      	movs	r3, #1
 800100a:	4803      	ldr	r0, [pc, #12]	; (8001018 <TS_IO_Write+0x30>)
 800100c:	f7ff ffa5 	bl	8000f5a <I2Cx_WriteMultiple>
}
 8001010:	bf00      	nop
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	200000d4 	.word	0x200000d4

0800101c <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af02      	add	r7, sp, #8
 8001022:	4603      	mov	r3, r0
 8001024:	460a      	mov	r2, r1
 8001026:	71fb      	strb	r3, [r7, #7]
 8001028:	4613      	mov	r3, r2
 800102a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001030:	79bb      	ldrb	r3, [r7, #6]
 8001032:	b29a      	uxth	r2, r3
 8001034:	79f9      	ldrb	r1, [r7, #7]
 8001036:	2301      	movs	r3, #1
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	f107 030f 	add.w	r3, r7, #15
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	2301      	movs	r3, #1
 8001042:	4804      	ldr	r0, [pc, #16]	; (8001054 <TS_IO_Read+0x38>)
 8001044:	f7ff ff5c 	bl	8000f00 <I2Cx_ReadMultiple>

  return read_value;
 8001048:	7bfb      	ldrb	r3, [r7, #15]
}
 800104a:	4618      	mov	r0, r3
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	200000d4 	.word	0x200000d4

08001058 <TS_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af02      	add	r7, sp, #8
 800105e:	603a      	str	r2, [r7, #0]
 8001060:	461a      	mov	r2, r3
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
 8001066:	460b      	mov	r3, r1
 8001068:	71bb      	strb	r3, [r7, #6]
 800106a:	4613      	mov	r3, r2
 800106c:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800106e:	79bb      	ldrb	r3, [r7, #6]
 8001070:	b29a      	uxth	r2, r3
 8001072:	79f9      	ldrb	r1, [r7, #7]
 8001074:	88bb      	ldrh	r3, [r7, #4]
 8001076:	9301      	str	r3, [sp, #4]
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	2301      	movs	r3, #1
 800107e:	4804      	ldr	r0, [pc, #16]	; (8001090 <TS_IO_ReadMultiple+0x38>)
 8001080:	f7ff ff3e 	bl	8000f00 <I2Cx_ReadMultiple>
 8001084:	4603      	mov	r3, r0
 8001086:	b29b      	uxth	r3, r3
}
 8001088:	4618      	mov	r0, r3
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	200000d4 	.word	0x200000d4

08001094 <OTM8009A_IO_Delay>:
/**
  * @brief  OTM8009A delay
  * @param  Delay: Delay in ms
  */
void OTM8009A_IO_Delay(uint32_t Delay)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f001 fc53 	bl	8002948 <HAL_Delay>
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <BSP_LCD_Init>:
/**
  * @brief  Initializes the DSI LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 80010ae:	2001      	movs	r0, #1
 80010b0:	f000 f804 	bl	80010bc <BSP_LCD_InitEx>
 80010b4:	4603      	mov	r3, r0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	bd80      	pop	{r7, pc}
	...

080010bc <BSP_LCD_InitEx>:
  *     - OTM8009A LCD Display IC Driver ititialization
  * @param  orientation: LCD orientation, can be LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(LCD_OrientationTypeDef orientation)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b090      	sub	sp, #64	; 0x40
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]
  DSI_PLLInitTypeDef dsiPllInit;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  uint32_t LcdClock  = 27429; /*!< LcdClk = 27429 kHz */
 80010c6:	f646 3325 	movw	r3, #27429	; 0x6b25
 80010ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t read_id = 0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	877b      	strh	r3, [r7, #58]	; 0x3a

  uint32_t laneByteClk_kHz = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t                   HFP; /*!< Horizontal Front Porch time in units of lcdClk */
  uint32_t                   HACT; /*!< Horizontal Active time in units of lcdClk = imageSize X in pixels to display */

  /* Toggle Hardware Reset of the DSI LCD using
  * its XRES signal (active low) */
  BSP_LCD_Reset();
 80010d4:	f000 f936 	bl	8001344 <BSP_LCD_Reset>

  /* Check the connected monitor */
  read_id = LCD_IO_GetID();
 80010d8:	f000 fe78 	bl	8001dcc <LCD_IO_GetID>
 80010dc:	4603      	mov	r3, r0
 80010de:	877b      	strh	r3, [r7, #58]	; 0x3a
  else if(read_id != LCD_DSI_ID)
  {
    return LCD_ERROR;  
  }
#else
  if(read_id != LCD_DSI_ID)
 80010e0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80010e2:	2b11      	cmp	r3, #17
 80010e4:	d001      	beq.n	80010ea <BSP_LCD_InitEx+0x2e>
  {
    return LCD_ERROR;  
 80010e6:	2301      	movs	r3, #1
 80010e8:	e113      	b.n	8001312 <BSP_LCD_InitEx+0x256>
  * This will set IP blocks LTDC, DSI and DMA2D
  * - out of reset
  * - clocked
  * - NVIC IRQ related to IP blocks enabled
  */
  BSP_LCD_MspInit();
 80010ea:	f000 fe77 	bl	8001ddc <BSP_LCD_MspInit>

/*************************DSI Initialization***********************************/  

  /* Base address of DSI Host/Wrapper registers to be set before calling De-Init */
  hdsi_discovery.Instance = DSI;
 80010ee:	4b8b      	ldr	r3, [pc, #556]	; (800131c <BSP_LCD_InitEx+0x260>)
 80010f0:	4a8b      	ldr	r2, [pc, #556]	; (8001320 <BSP_LCD_InitEx+0x264>)
 80010f2:	601a      	str	r2, [r3, #0]

  HAL_DSI_DeInit(&(hdsi_discovery));
 80010f4:	4889      	ldr	r0, [pc, #548]	; (800131c <BSP_LCD_InitEx+0x260>)
 80010f6:	f003 f807 	bl	8004108 <HAL_DSI_DeInit>

  dsiPllInit.PLLNDIV  = 100;
 80010fa:	2364      	movs	r3, #100	; 0x64
 80010fc:	60bb      	str	r3, [r7, #8]
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
 80010fe:	2305      	movs	r3, #5
 8001100:	60fb      	str	r3, [r7, #12]
  dsiPllInit.PLLODF  = DSI_PLL_OUT_DIV1;
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]
  laneByteClk_kHz = 62500; /* 500 MHz / 8 = 62.5 MHz = 62500 kHz */
 8001106:	f24f 4324 	movw	r3, #62500	; 0xf424
 800110a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set number of Lanes */
  hdsi_discovery.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 800110c:	4b83      	ldr	r3, [pc, #524]	; (800131c <BSP_LCD_InitEx+0x260>)
 800110e:	2201      	movs	r2, #1
 8001110:	60da      	str	r2, [r3, #12]

  /* TXEscapeCkdiv = f(LaneByteClk)/15.62 = 4 */
  hdsi_discovery.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 8001112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001114:	089b      	lsrs	r3, r3, #2
 8001116:	4a83      	ldr	r2, [pc, #524]	; (8001324 <BSP_LCD_InitEx+0x268>)
 8001118:	fba2 2303 	umull	r2, r3, r2, r3
 800111c:	0a9b      	lsrs	r3, r3, #10
 800111e:	4a7f      	ldr	r2, [pc, #508]	; (800131c <BSP_LCD_InitEx+0x260>)
 8001120:	6093      	str	r3, [r2, #8]

  HAL_DSI_Init(&(hdsi_discovery), &(dsiPllInit));
 8001122:	f107 0308 	add.w	r3, r7, #8
 8001126:	4619      	mov	r1, r3
 8001128:	487c      	ldr	r0, [pc, #496]	; (800131c <BSP_LCD_InitEx+0x260>)
 800112a:	f002 fed3 	bl	8003ed4 <HAL_DSI_Init>

  /* Timing parameters for all Video modes
  * Set Timing parameters of LTDC depending on its chosen orientation
  */
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d108      	bne.n	8001146 <BSP_LCD_InitEx+0x8a>
  {
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 8001134:	4b7c      	ldr	r3, [pc, #496]	; (8001328 <BSP_LCD_InitEx+0x26c>)
 8001136:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800113a:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 800113c:	4b7b      	ldr	r3, [pc, #492]	; (800132c <BSP_LCD_InitEx+0x270>)
 800113e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	e007      	b.n	8001156 <BSP_LCD_InitEx+0x9a>
  }
  else
  {
    /* lcd_orientation == LCD_ORIENTATION_LANDSCAPE */
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 8001146:	4b78      	ldr	r3, [pc, #480]	; (8001328 <BSP_LCD_InitEx+0x26c>)
 8001148:	f44f 7248 	mov.w	r2, #800	; 0x320
 800114c:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 800114e:	4b77      	ldr	r3, [pc, #476]	; (800132c <BSP_LCD_InitEx+0x270>)
 8001150:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001154:	601a      	str	r2, [r3, #0]
  }

  HACT = lcd_x_size;
 8001156:	4b74      	ldr	r3, [pc, #464]	; (8001328 <BSP_LCD_InitEx+0x26c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	633b      	str	r3, [r7, #48]	; 0x30
  VACT = lcd_y_size;
 800115c:	4b73      	ldr	r3, [pc, #460]	; (800132c <BSP_LCD_InitEx+0x270>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* The following values are same for portrait and landscape orientations */
  VSA  = OTM8009A_480X800_VSYNC;        /* 12  */
 8001162:	2301      	movs	r3, #1
 8001164:	62bb      	str	r3, [r7, #40]	; 0x28
  VBP  = OTM8009A_480X800_VBP;          /* 12  */
 8001166:	230f      	movs	r3, #15
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
  VFP  = OTM8009A_480X800_VFP;          /* 12  */
 800116a:	2310      	movs	r3, #16
 800116c:	623b      	str	r3, [r7, #32]
  HSA  = OTM8009A_480X800_HSYNC;        /* 63  */
 800116e:	2302      	movs	r3, #2
 8001170:	61fb      	str	r3, [r7, #28]
  HBP  = OTM8009A_480X800_HBP;          /* 120 */
 8001172:	2322      	movs	r3, #34	; 0x22
 8001174:	61bb      	str	r3, [r7, #24]
  HFP  = OTM8009A_480X800_HFP;          /* 120 */   
 8001176:	2322      	movs	r3, #34	; 0x22
 8001178:	617b      	str	r3, [r7, #20]

  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 800117a:	4b6d      	ldr	r3, [pc, #436]	; (8001330 <BSP_LCD_InitEx+0x274>)
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 8001180:	4b6b      	ldr	r3, [pc, #428]	; (8001330 <BSP_LCD_InitEx+0x274>)
 8001182:	2205      	movs	r2, #5
 8001184:	605a      	str	r2, [r3, #4]
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8001186:	4b6a      	ldr	r3, [pc, #424]	; (8001330 <BSP_LCD_InitEx+0x274>)
 8001188:	2200      	movs	r2, #0
 800118a:	621a      	str	r2, [r3, #32]
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 800118c:	4b68      	ldr	r3, [pc, #416]	; (8001330 <BSP_LCD_InitEx+0x274>)
 800118e:	2200      	movs	r2, #0
 8001190:	61da      	str	r2, [r3, #28]
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 8001192:	4b67      	ldr	r3, [pc, #412]	; (8001330 <BSP_LCD_InitEx+0x274>)
 8001194:	2200      	movs	r2, #0
 8001196:	625a      	str	r2, [r3, #36]	; 0x24
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 8001198:	4b65      	ldr	r3, [pc, #404]	; (8001330 <BSP_LCD_InitEx+0x274>)
 800119a:	2202      	movs	r2, #2
 800119c:	60da      	str	r2, [r3, #12]
  hdsivideo_handle.NullPacketSize = 0xFFF;
 800119e:	4b64      	ldr	r3, [pc, #400]	; (8001330 <BSP_LCD_InitEx+0x274>)
 80011a0:	f640 72ff 	movw	r2, #4095	; 0xfff
 80011a4:	619a      	str	r2, [r3, #24]
  hdsivideo_handle.NumberOfChunks = 0;
 80011a6:	4b62      	ldr	r3, [pc, #392]	; (8001330 <BSP_LCD_InitEx+0x274>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	615a      	str	r2, [r3, #20]
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 80011ac:	4a60      	ldr	r2, [pc, #384]	; (8001330 <BSP_LCD_InitEx+0x274>)
 80011ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011b0:	6113      	str	r3, [r2, #16]
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz)/LcdClock;
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80011b6:	fb02 f203 	mul.w	r2, r2, r3
 80011ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c0:	4a5b      	ldr	r2, [pc, #364]	; (8001330 <BSP_LCD_InitEx+0x274>)
 80011c2:	6293      	str	r3, [r2, #40]	; 0x28
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz)/LcdClock;
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80011c8:	fb02 f203 	mul.w	r2, r2, r3
 80011cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d2:	4a57      	ldr	r2, [pc, #348]	; (8001330 <BSP_LCD_InitEx+0x274>)
 80011d4:	62d3      	str	r3, [r2, #44]	; 0x2c
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz)/LcdClock; /* Value depending on display orientation choice portrait/landscape */
 80011d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	441a      	add	r2, r3
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	441a      	add	r2, r3
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	4413      	add	r3, r2
 80011e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80011e6:	fb02 f203 	mul.w	r2, r2, r3
 80011ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f0:	4a4f      	ldr	r2, [pc, #316]	; (8001330 <BSP_LCD_InitEx+0x274>)
 80011f2:	6313      	str	r3, [r2, #48]	; 0x30
  hdsivideo_handle.VerticalSyncActive        = VSA;
 80011f4:	4a4e      	ldr	r2, [pc, #312]	; (8001330 <BSP_LCD_InitEx+0x274>)
 80011f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011f8:	6353      	str	r3, [r2, #52]	; 0x34
  hdsivideo_handle.VerticalBackPorch         = VBP;
 80011fa:	4a4d      	ldr	r2, [pc, #308]	; (8001330 <BSP_LCD_InitEx+0x274>)
 80011fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fe:	6393      	str	r3, [r2, #56]	; 0x38
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 8001200:	4a4b      	ldr	r2, [pc, #300]	; (8001330 <BSP_LCD_InitEx+0x274>)
 8001202:	6a3b      	ldr	r3, [r7, #32]
 8001204:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 8001206:	4a4a      	ldr	r2, [pc, #296]	; (8001330 <BSP_LCD_InitEx+0x274>)
 8001208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800120a:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable or disable sending LP command while streaming is active in video mode */
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 800120c:	4b48      	ldr	r3, [pc, #288]	; (8001330 <BSP_LCD_InitEx+0x274>)
 800120e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001212:	645a      	str	r2, [r3, #68]	; 0x44

  /* Largest packet size possible to transmit in LP mode in VSA, VBP, VFP regions */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPLargestPacketSize = 16;
 8001214:	4b46      	ldr	r3, [pc, #280]	; (8001330 <BSP_LCD_InitEx+0x274>)
 8001216:	2210      	movs	r2, #16
 8001218:	649a      	str	r2, [r3, #72]	; 0x48

  /* Largest packet size possible to transmit in LP mode in HFP region during VACT period */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 800121a:	4b45      	ldr	r3, [pc, #276]	; (8001330 <BSP_LCD_InitEx+0x274>)
 800121c:	2200      	movs	r2, #0
 800121e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Specify for each region of the video frame, if the transmission of command in LP mode is allowed in this region */
  /* while streaming is active in video mode                                                                         */
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 8001220:	4b43      	ldr	r3, [pc, #268]	; (8001330 <BSP_LCD_InitEx+0x274>)
 8001222:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001226:	651a      	str	r2, [r3, #80]	; 0x50
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 8001228:	4b41      	ldr	r3, [pc, #260]	; (8001330 <BSP_LCD_InitEx+0x274>)
 800122a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800122e:	655a      	str	r2, [r3, #84]	; 0x54
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 8001230:	4b3f      	ldr	r3, [pc, #252]	; (8001330 <BSP_LCD_InitEx+0x274>)
 8001232:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001236:	659a      	str	r2, [r3, #88]	; 0x58
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 8001238:	4b3d      	ldr	r3, [pc, #244]	; (8001330 <BSP_LCD_InitEx+0x274>)
 800123a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800123e:	65da      	str	r2, [r3, #92]	; 0x5c
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 8001240:	4b3b      	ldr	r3, [pc, #236]	; (8001330 <BSP_LCD_InitEx+0x274>)
 8001242:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001246:	661a      	str	r2, [r3, #96]	; 0x60
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 8001248:	4b39      	ldr	r3, [pc, #228]	; (8001330 <BSP_LCD_InitEx+0x274>)
 800124a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800124e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure DSI Video mode timings with settings set above */
  HAL_DSI_ConfigVideoMode(&(hdsi_discovery), &(hdsivideo_handle));
 8001250:	4937      	ldr	r1, [pc, #220]	; (8001330 <BSP_LCD_InitEx+0x274>)
 8001252:	4832      	ldr	r0, [pc, #200]	; (800131c <BSP_LCD_InitEx+0x260>)
 8001254:	f003 f8b0 	bl	80043b8 <HAL_DSI_ConfigVideoMode>
  
  
/************************LTDC Initialization***********************************/  

  /* Timing Configuration */    
  hltdc_discovery.Init.HorizontalSync = (HSA - 1);
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	3b01      	subs	r3, #1
 800125c:	4a35      	ldr	r2, [pc, #212]	; (8001334 <BSP_LCD_InitEx+0x278>)
 800125e:	6153      	str	r3, [r2, #20]
  hltdc_discovery.Init.AccumulatedHBP = (HSA + HBP - 1);
 8001260:	69fa      	ldr	r2, [r7, #28]
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	4413      	add	r3, r2
 8001266:	3b01      	subs	r3, #1
 8001268:	4a32      	ldr	r2, [pc, #200]	; (8001334 <BSP_LCD_InitEx+0x278>)
 800126a:	61d3      	str	r3, [r2, #28]
  hltdc_discovery.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 800126c:	4b2e      	ldr	r3, [pc, #184]	; (8001328 <BSP_LCD_InitEx+0x26c>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	441a      	add	r2, r3
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	4413      	add	r3, r2
 8001278:	3b01      	subs	r3, #1
 800127a:	4a2e      	ldr	r2, [pc, #184]	; (8001334 <BSP_LCD_InitEx+0x278>)
 800127c:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc_discovery.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 800127e:	4b2a      	ldr	r3, [pc, #168]	; (8001328 <BSP_LCD_InitEx+0x26c>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	441a      	add	r2, r3
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	441a      	add	r2, r3
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	4413      	add	r3, r2
 800128e:	3b01      	subs	r3, #1
 8001290:	4a28      	ldr	r2, [pc, #160]	; (8001334 <BSP_LCD_InitEx+0x278>)
 8001292:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Initialize the LCD pixel width and pixel height */
  hltdc_discovery.LayerCfg->ImageWidth  = lcd_x_size;
 8001294:	4b24      	ldr	r3, [pc, #144]	; (8001328 <BSP_LCD_InitEx+0x26c>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a26      	ldr	r2, [pc, #152]	; (8001334 <BSP_LCD_InitEx+0x278>)
 800129a:	6613      	str	r3, [r2, #96]	; 0x60
  hltdc_discovery.LayerCfg->ImageHeight = lcd_y_size;   
 800129c:	4b23      	ldr	r3, [pc, #140]	; (800132c <BSP_LCD_InitEx+0x270>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a24      	ldr	r2, [pc, #144]	; (8001334 <BSP_LCD_InitEx+0x278>)
 80012a2:	6653      	str	r3, [r2, #100]	; 0x64
    * PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz 
    * PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 384 Mhz 
    * PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 384 MHz / 7 = 54.85 MHz 
    * LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_2 = 54.85 MHz / 2 = 27.429 MHz 
    */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80012a4:	4b24      	ldr	r3, [pc, #144]	; (8001338 <BSP_LCD_InitEx+0x27c>)
 80012a6:	2208      	movs	r2, #8
 80012a8:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80012aa:	4b23      	ldr	r3, [pc, #140]	; (8001338 <BSP_LCD_InitEx+0x27c>)
 80012ac:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80012b0:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 80012b2:	4b21      	ldr	r3, [pc, #132]	; (8001338 <BSP_LCD_InitEx+0x27c>)
 80012b4:	2207      	movs	r2, #7
 80012b6:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80012b8:	4b1f      	ldr	r3, [pc, #124]	; (8001338 <BSP_LCD_InitEx+0x27c>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80012be:	481e      	ldr	r0, [pc, #120]	; (8001338 <BSP_LCD_InitEx+0x27c>)
 80012c0:	f005 fdae 	bl	8006e20 <HAL_RCCEx_PeriphCLKConfig>

  /* Background value */
  hltdc_discovery.Init.Backcolor.Blue = 0;
 80012c4:	4b1b      	ldr	r3, [pc, #108]	; (8001334 <BSP_LCD_InitEx+0x278>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc_discovery.Init.Backcolor.Green = 0;
 80012cc:	4b19      	ldr	r3, [pc, #100]	; (8001334 <BSP_LCD_InitEx+0x278>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc_discovery.Init.Backcolor.Red = 0;
 80012d4:	4b17      	ldr	r3, [pc, #92]	; (8001334 <BSP_LCD_InitEx+0x278>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  hltdc_discovery.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80012dc:	4b15      	ldr	r3, [pc, #84]	; (8001334 <BSP_LCD_InitEx+0x278>)
 80012de:	2200      	movs	r2, #0
 80012e0:	611a      	str	r2, [r3, #16]
  hltdc_discovery.Instance = LTDC;
 80012e2:	4b14      	ldr	r3, [pc, #80]	; (8001334 <BSP_LCD_InitEx+0x278>)
 80012e4:	4a15      	ldr	r2, [pc, #84]	; (800133c <BSP_LCD_InitEx+0x280>)
 80012e6:	601a      	str	r2, [r3, #0]

  /* Get LTDC Configuration from DSI Configuration */
  HAL_LTDC_StructInitFromVideoConfig(&(hltdc_discovery), &(hdsivideo_handle));
 80012e8:	4911      	ldr	r1, [pc, #68]	; (8001330 <BSP_LCD_InitEx+0x274>)
 80012ea:	4812      	ldr	r0, [pc, #72]	; (8001334 <BSP_LCD_InitEx+0x278>)
 80012ec:	f005 f8ec 	bl	80064c8 <HAL_LTDCEx_StructInitFromVideoConfig>

  /* Initialize the LTDC */  
  HAL_LTDC_Init(&hltdc_discovery);
 80012f0:	4810      	ldr	r0, [pc, #64]	; (8001334 <BSP_LCD_InitEx+0x278>)
 80012f2:	f004 fe41 	bl	8005f78 <HAL_LTDC_Init>

  /* Enable the DSI host and wrapper after the LTDC initialization
     To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
  HAL_DSI_Start(&hdsi_discovery);
 80012f6:	4809      	ldr	r0, [pc, #36]	; (800131c <BSP_LCD_InitEx+0x260>)
 80012f8:	f003 fcf0 	bl	8004cdc <HAL_DSI_Start>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80012fc:	f000 ff32 	bl	8002164 <BSP_SDRAM_Init>
#endif /* DATA_IN_ExtSDRAM */

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001300:	480f      	ldr	r0, [pc, #60]	; (8001340 <BSP_LCD_InitEx+0x284>)
 8001302:	f000 f901 	bl	8001508 <BSP_LCD_SetFont>
/***********************OTM8009A Initialization********************************/ 

  /* Initialize the OTM8009A LCD Display IC Driver (KoD LCD IC Driver)
  *  depending on configuration set in 'hdsivideo_handle'.
  */
  OTM8009A_Init(OTM8009A_FORMAT_RGB888, orientation);
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	4619      	mov	r1, r3
 800130a:	2000      	movs	r0, #0
 800130c:	f7ff faa8 	bl	8000860 <OTM8009A_Init>

/***********************End OTM8009A Initialization****************************/ 

  return LCD_OK; 
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3740      	adds	r7, #64	; 0x40
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	2000042c 	.word	0x2000042c
 8001320:	40016c00 	.word	0x40016c00
 8001324:	43215e57 	.word	0x43215e57
 8001328:	20000030 	.word	0x20000030
 800132c:	20000034 	.word	0x20000034
 8001330:	20000120 	.word	0x20000120
 8001334:	20000384 	.word	0x20000384
 8001338:	200001a8 	.word	0x200001a8
 800133c:	40016800 	.word	0x40016800
 8001340:	20000028 	.word	0x20000028

08001344 <BSP_LCD_Reset>:
  * @brief  BSP LCD Reset
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and desactivating it later.
  */
void BSP_LCD_Reset(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800134a:	4b18      	ldr	r3, [pc, #96]	; (80013ac <BSP_LCD_Reset+0x68>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a17      	ldr	r2, [pc, #92]	; (80013ac <BSP_LCD_Reset+0x68>)
 8001350:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b15      	ldr	r3, [pc, #84]	; (80013ac <BSP_LCD_Reset+0x68>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800135e:	603b      	str	r3, [r7, #0]
 8001360:	683b      	ldr	r3, [r7, #0]

    /* Configure the GPIO on PJ15 */
    gpio_init_structure.Pin   = GPIO_PIN_15;
 8001362:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001366:	607b      	str	r3, [r7, #4]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001368:	2301      	movs	r3, #1
 800136a:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 800136c:	2301      	movs	r3, #1
 800136e:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001370:	2303      	movs	r3, #3
 8001372:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	4619      	mov	r1, r3
 8001378:	480d      	ldr	r0, [pc, #52]	; (80013b0 <BSP_LCD_Reset+0x6c>)
 800137a:	f003 fdd3 	bl	8004f24 <HAL_GPIO_Init>

    /* Activate XRES active low */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_RESET);
 800137e:	2200      	movs	r2, #0
 8001380:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001384:	480a      	ldr	r0, [pc, #40]	; (80013b0 <BSP_LCD_Reset+0x6c>)
 8001386:	f004 f899 	bl	80054bc <HAL_GPIO_WritePin>

    HAL_Delay(20); /* wait 20 ms */
 800138a:	2014      	movs	r0, #20
 800138c:	f001 fadc 	bl	8002948 <HAL_Delay>

    /* Desactivate XRES */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_SET);
 8001390:	2201      	movs	r2, #1
 8001392:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001396:	4806      	ldr	r0, [pc, #24]	; (80013b0 <BSP_LCD_Reset+0x6c>)
 8001398:	f004 f890 	bl	80054bc <HAL_GPIO_WritePin>
    
    /* Wait for 10ms after releasing XRES before sending commands */
    HAL_Delay(10);
 800139c:	200a      	movs	r0, #10
 800139e:	f001 fad3 	bl	8002948 <HAL_Delay>
}
 80013a2:	bf00      	nop
 80013a4:	3718      	adds	r7, #24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40022400 	.word	0x40022400

080013b4 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  return (lcd_x_size);
 80013b8:	4b03      	ldr	r3, [pc, #12]	; (80013c8 <BSP_LCD_GetXSize+0x14>)
 80013ba:	681b      	ldr	r3, [r3, #0]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	20000030 	.word	0x20000030

080013cc <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  return (lcd_y_size);
 80013d0:	4b03      	ldr	r3, [pc, #12]	; (80013e0 <BSP_LCD_GetYSize+0x14>)
 80013d2:	681b      	ldr	r3, [r3, #0]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	20000034 	.word	0x20000034

080013e4 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b090      	sub	sp, #64	; 0x40
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	6039      	str	r1, [r7, #0]
 80013ee:	80fb      	strh	r3, [r7, #6]
    LCD_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80013f4:	f7ff ffde 	bl	80013b4 <BSP_LCD_GetXSize>
 80013f8:	4603      	mov	r3, r0
 80013fa:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8001400:	f7ff ffe4 	bl	80013cc <BSP_LCD_GetYSize>
 8001404:	4603      	mov	r3, r0
 8001406:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001408:	2300      	movs	r3, #0
 800140a:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8001410:	23ff      	movs	r3, #255	; 0xff
 8001412:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8001418:	2300      	movs	r3, #0
 800141a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 800141e:	2300      	movs	r3, #0
 8001420:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800142a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800142e:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001430:	2307      	movs	r3, #7
 8001432:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8001434:	f7ff ffbe 	bl	80013b4 <BSP_LCD_GetXSize>
 8001438:	4603      	mov	r3, r0
 800143a:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 800143c:	f7ff ffc6 	bl	80013cc <BSP_LCD_GetYSize>
 8001440:	4603      	mov	r3, r0
 8001442:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hltdc_discovery, &Layercfg, LayerIndex); 
 8001444:	88fa      	ldrh	r2, [r7, #6]
 8001446:	f107 030c 	add.w	r3, r7, #12
 800144a:	4619      	mov	r1, r3
 800144c:	4812      	ldr	r0, [pc, #72]	; (8001498 <BSP_LCD_LayerDefaultInit+0xb4>)
 800144e:	f004 fe63 	bl	8006118 <HAL_LTDC_ConfigLayer>
  
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8001452:	88fa      	ldrh	r2, [r7, #6]
 8001454:	4911      	ldr	r1, [pc, #68]	; (800149c <BSP_LCD_LayerDefaultInit+0xb8>)
 8001456:	4613      	mov	r3, r2
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	4413      	add	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	440b      	add	r3, r1
 8001460:	3304      	adds	r3, #4
 8001462:	f04f 32ff 	mov.w	r2, #4294967295
 8001466:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8001468:	88fa      	ldrh	r2, [r7, #6]
 800146a:	490c      	ldr	r1, [pc, #48]	; (800149c <BSP_LCD_LayerDefaultInit+0xb8>)
 800146c:	4613      	mov	r3, r2
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	4413      	add	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	440b      	add	r3, r1
 8001476:	3308      	adds	r3, #8
 8001478:	4a09      	ldr	r2, [pc, #36]	; (80014a0 <BSP_LCD_LayerDefaultInit+0xbc>)
 800147a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 800147c:	88fa      	ldrh	r2, [r7, #6]
 800147e:	4907      	ldr	r1, [pc, #28]	; (800149c <BSP_LCD_LayerDefaultInit+0xb8>)
 8001480:	4613      	mov	r3, r2
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	4413      	add	r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	440b      	add	r3, r1
 800148a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800148e:	601a      	str	r2, [r3, #0]
}
 8001490:	bf00      	nop
 8001492:	3740      	adds	r7, #64	; 0x40
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20000384 	.word	0x20000384
 800149c:	20000190 	.word	0x20000190
 80014a0:	20000028 	.word	0x20000028

080014a4 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80014ac:	4b07      	ldr	r3, [pc, #28]	; (80014cc <BSP_LCD_SetTextColor+0x28>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	4907      	ldr	r1, [pc, #28]	; (80014d0 <BSP_LCD_SetTextColor+0x2c>)
 80014b2:	4613      	mov	r3, r2
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	4413      	add	r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	440b      	add	r3, r1
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	601a      	str	r2, [r3, #0]
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	2000018c 	.word	0x2000018c
 80014d0:	20000190 	.word	0x20000190

080014d4 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80014dc:	4b08      	ldr	r3, [pc, #32]	; (8001500 <BSP_LCD_SetBackColor+0x2c>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	4908      	ldr	r1, [pc, #32]	; (8001504 <BSP_LCD_SetBackColor+0x30>)
 80014e2:	4613      	mov	r3, r2
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	4413      	add	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	440b      	add	r3, r1
 80014ec:	3304      	adds	r3, #4
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	601a      	str	r2, [r3, #0]
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	2000018c 	.word	0x2000018c
 8001504:	20000190 	.word	0x20000190

08001508 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8001510:	4b08      	ldr	r3, [pc, #32]	; (8001534 <BSP_LCD_SetFont+0x2c>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	4908      	ldr	r1, [pc, #32]	; (8001538 <BSP_LCD_SetFont+0x30>)
 8001516:	4613      	mov	r3, r2
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	4413      	add	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	440b      	add	r3, r1
 8001520:	3308      	adds	r3, #8
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	601a      	str	r2, [r3, #0]
}
 8001526:	bf00      	nop
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	2000018c 	.word	0x2000018c
 8001538:	20000190 	.word	0x20000190

0800153c <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8001540:	4b07      	ldr	r3, [pc, #28]	; (8001560 <BSP_LCD_GetFont+0x24>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	4907      	ldr	r1, [pc, #28]	; (8001564 <BSP_LCD_GetFont+0x28>)
 8001546:	4613      	mov	r3, r2
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	4413      	add	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	440b      	add	r3, r1
 8001550:	3308      	adds	r3, #8
 8001552:	681b      	ldr	r3, [r3, #0]
}
 8001554:	4618      	mov	r0, r3
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	2000018c 	.word	0x2000018c
 8001564:	20000190 	.word	0x20000190

08001568 <BSP_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 8001568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800156a:	b085      	sub	sp, #20
 800156c:	af02      	add	r7, sp, #8
 800156e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001570:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <BSP_LCD_Clear+0x48>)
 8001572:	681c      	ldr	r4, [r3, #0]
 8001574:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <BSP_LCD_Clear+0x48>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a0e      	ldr	r2, [pc, #56]	; (80015b4 <BSP_LCD_Clear+0x4c>)
 800157a:	2134      	movs	r1, #52	; 0x34
 800157c:	fb01 f303 	mul.w	r3, r1, r3
 8001580:	4413      	add	r3, r2
 8001582:	335c      	adds	r3, #92	; 0x5c
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	461d      	mov	r5, r3
 8001588:	f7ff ff14 	bl	80013b4 <BSP_LCD_GetXSize>
 800158c:	4606      	mov	r6, r0
 800158e:	f7ff ff1d 	bl	80013cc <BSP_LCD_GetYSize>
 8001592:	4602      	mov	r2, r0
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	9301      	str	r3, [sp, #4]
 8001598:	2300      	movs	r3, #0
 800159a:	9300      	str	r3, [sp, #0]
 800159c:	4613      	mov	r3, r2
 800159e:	4632      	mov	r2, r6
 80015a0:	4629      	mov	r1, r5
 80015a2:	4620      	mov	r0, r4
 80015a4:	f000 fd62 	bl	800206c <LL_FillBuffer>
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015b0:	2000018c 	.word	0x2000018c
 80015b4:	20000384 	.word	0x20000384

080015b8 <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80015b8:	b590      	push	{r4, r7, lr}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	80fb      	strh	r3, [r7, #6]
 80015c2:	460b      	mov	r3, r1
 80015c4:	80bb      	strh	r3, [r7, #4]
 80015c6:	4613      	mov	r3, r2
 80015c8:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80015ca:	4b1b      	ldr	r3, [pc, #108]	; (8001638 <BSP_LCD_DisplayChar+0x80>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	491b      	ldr	r1, [pc, #108]	; (800163c <BSP_LCD_DisplayChar+0x84>)
 80015d0:	4613      	mov	r3, r2
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	4413      	add	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	440b      	add	r3, r1
 80015da:	3308      	adds	r3, #8
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	6819      	ldr	r1, [r3, #0]
 80015e0:	78fb      	ldrb	r3, [r7, #3]
 80015e2:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80015e6:	4b14      	ldr	r3, [pc, #80]	; (8001638 <BSP_LCD_DisplayChar+0x80>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	4c14      	ldr	r4, [pc, #80]	; (800163c <BSP_LCD_DisplayChar+0x84>)
 80015ec:	4613      	mov	r3, r2
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	4413      	add	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	4423      	add	r3, r4
 80015f6:	3308      	adds	r3, #8
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80015fc:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001600:	4b0d      	ldr	r3, [pc, #52]	; (8001638 <BSP_LCD_DisplayChar+0x80>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	4c0d      	ldr	r4, [pc, #52]	; (800163c <BSP_LCD_DisplayChar+0x84>)
 8001606:	4613      	mov	r3, r2
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	4413      	add	r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	4423      	add	r3, r4
 8001610:	3308      	adds	r3, #8
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	889b      	ldrh	r3, [r3, #4]
 8001616:	3307      	adds	r3, #7
 8001618:	2b00      	cmp	r3, #0
 800161a:	da00      	bge.n	800161e <BSP_LCD_DisplayChar+0x66>
 800161c:	3307      	adds	r3, #7
 800161e:	10db      	asrs	r3, r3, #3
 8001620:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001624:	18ca      	adds	r2, r1, r3
 8001626:	88b9      	ldrh	r1, [r7, #4]
 8001628:	88fb      	ldrh	r3, [r7, #6]
 800162a:	4618      	mov	r0, r3
 800162c:	f000 fc66 	bl	8001efc <DrawChar>
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	bd90      	pop	{r4, r7, pc}
 8001638:	2000018c 	.word	0x2000018c
 800163c:	20000190 	.word	0x20000190

08001640 <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8001640:	b5b0      	push	{r4, r5, r7, lr}
 8001642:	b088      	sub	sp, #32
 8001644:	af00      	add	r7, sp, #0
 8001646:	60ba      	str	r2, [r7, #8]
 8001648:	461a      	mov	r2, r3
 800164a:	4603      	mov	r3, r0
 800164c:	81fb      	strh	r3, [r7, #14]
 800164e:	460b      	mov	r3, r1
 8001650:	81bb      	strh	r3, [r7, #12]
 8001652:	4613      	mov	r3, r2
 8001654:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8001656:	2301      	movs	r3, #1
 8001658:	83fb      	strh	r3, [r7, #30]
 800165a:	2300      	movs	r3, #0
 800165c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 800165e:	2300      	movs	r3, #0
 8001660:	61bb      	str	r3, [r7, #24]
 8001662:	2300      	movs	r3, #0
 8001664:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) size ++ ;
 800166a:	e002      	b.n	8001672 <BSP_LCD_DisplayStringAt+0x32>
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	3301      	adds	r3, #1
 8001670:	61bb      	str	r3, [r7, #24]
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	1c5a      	adds	r2, r3, #1
 8001676:	617a      	str	r2, [r7, #20]
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1f6      	bne.n	800166c <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800167e:	f7ff fe99 	bl	80013b4 <BSP_LCD_GetXSize>
 8001682:	4b4f      	ldr	r3, [pc, #316]	; (80017c0 <BSP_LCD_DisplayStringAt+0x180>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	494f      	ldr	r1, [pc, #316]	; (80017c4 <BSP_LCD_DisplayStringAt+0x184>)
 8001688:	4613      	mov	r3, r2
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	4413      	add	r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	440b      	add	r3, r1
 8001692:	3308      	adds	r3, #8
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	889b      	ldrh	r3, [r3, #4]
 8001698:	fbb0 f3f3 	udiv	r3, r0, r3
 800169c:	613b      	str	r3, [r7, #16]

  switch (Mode)
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d01c      	beq.n	80016de <BSP_LCD_DisplayStringAt+0x9e>
 80016a4:	2b03      	cmp	r3, #3
 80016a6:	d017      	beq.n	80016d8 <BSP_LCD_DisplayStringAt+0x98>
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d12e      	bne.n	800170a <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	1ad1      	subs	r1, r2, r3
 80016b2:	4b43      	ldr	r3, [pc, #268]	; (80017c0 <BSP_LCD_DisplayStringAt+0x180>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	4843      	ldr	r0, [pc, #268]	; (80017c4 <BSP_LCD_DisplayStringAt+0x184>)
 80016b8:	4613      	mov	r3, r2
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	4413      	add	r3, r2
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	4403      	add	r3, r0
 80016c2:	3308      	adds	r3, #8
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	889b      	ldrh	r3, [r3, #4]
 80016c8:	fb03 f301 	mul.w	r3, r3, r1
 80016cc:	085b      	lsrs	r3, r3, #1
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	89fb      	ldrh	r3, [r7, #14]
 80016d2:	4413      	add	r3, r2
 80016d4:	83fb      	strh	r3, [r7, #30]
      break;
 80016d6:	e01b      	b.n	8001710 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 80016d8:	89fb      	ldrh	r3, [r7, #14]
 80016da:	83fb      	strh	r3, [r7, #30]
      break;
 80016dc:	e018      	b.n	8001710 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	b299      	uxth	r1, r3
 80016e6:	4b36      	ldr	r3, [pc, #216]	; (80017c0 <BSP_LCD_DisplayStringAt+0x180>)
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	4836      	ldr	r0, [pc, #216]	; (80017c4 <BSP_LCD_DisplayStringAt+0x184>)
 80016ec:	4613      	mov	r3, r2
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	4413      	add	r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4403      	add	r3, r0
 80016f6:	3308      	adds	r3, #8
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	889b      	ldrh	r3, [r3, #4]
 80016fc:	fb11 f303 	smulbb	r3, r1, r3
 8001700:	b29a      	uxth	r2, r3
 8001702:	89fb      	ldrh	r3, [r7, #14]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	83fb      	strh	r3, [r7, #30]
      break;
 8001708:	e002      	b.n	8001710 <BSP_LCD_DisplayStringAt+0xd0>
    }
  default:
    {
      refcolumn = Xpos;
 800170a:	89fb      	ldrh	r3, [r7, #14]
 800170c:	83fb      	strh	r3, [r7, #30]
      break;
 800170e:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8001710:	8bfb      	ldrh	r3, [r7, #30]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d003      	beq.n	800171e <BSP_LCD_DisplayStringAt+0xde>
 8001716:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800171a:	2b00      	cmp	r3, #0
 800171c:	da1d      	bge.n	800175a <BSP_LCD_DisplayStringAt+0x11a>
  {
    refcolumn = 1;
 800171e:	2301      	movs	r3, #1
 8001720:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001722:	e01a      	b.n	800175a <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	781a      	ldrb	r2, [r3, #0]
 8001728:	89b9      	ldrh	r1, [r7, #12]
 800172a:	8bfb      	ldrh	r3, [r7, #30]
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff ff43 	bl	80015b8 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8001732:	4b23      	ldr	r3, [pc, #140]	; (80017c0 <BSP_LCD_DisplayStringAt+0x180>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	4923      	ldr	r1, [pc, #140]	; (80017c4 <BSP_LCD_DisplayStringAt+0x184>)
 8001738:	4613      	mov	r3, r2
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	4413      	add	r3, r2
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	440b      	add	r3, r1
 8001742:	3308      	adds	r3, #8
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	889a      	ldrh	r2, [r3, #4]
 8001748:	8bfb      	ldrh	r3, [r7, #30]
 800174a:	4413      	add	r3, r2
 800174c:	83fb      	strh	r3, [r7, #30]

    /* Point on the next character */
    Text++;
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	3301      	adds	r3, #1
 8001752:	60bb      	str	r3, [r7, #8]
    i++;
 8001754:	8bbb      	ldrh	r3, [r7, #28]
 8001756:	3301      	adds	r3, #1
 8001758:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2b00      	cmp	r3, #0
 8001760:	bf14      	ite	ne
 8001762:	2301      	movne	r3, #1
 8001764:	2300      	moveq	r3, #0
 8001766:	b2dc      	uxtb	r4, r3
 8001768:	f7ff fe24 	bl	80013b4 <BSP_LCD_GetXSize>
 800176c:	4605      	mov	r5, r0
 800176e:	8bb9      	ldrh	r1, [r7, #28]
 8001770:	4b13      	ldr	r3, [pc, #76]	; (80017c0 <BSP_LCD_DisplayStringAt+0x180>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	4813      	ldr	r0, [pc, #76]	; (80017c4 <BSP_LCD_DisplayStringAt+0x184>)
 8001776:	4613      	mov	r3, r2
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	4413      	add	r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	4403      	add	r3, r0
 8001780:	3308      	adds	r3, #8
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	889b      	ldrh	r3, [r3, #4]
 8001786:	fb03 f301 	mul.w	r3, r3, r1
 800178a:	1aeb      	subs	r3, r5, r3
 800178c:	b299      	uxth	r1, r3
 800178e:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <BSP_LCD_DisplayStringAt+0x180>)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	480c      	ldr	r0, [pc, #48]	; (80017c4 <BSP_LCD_DisplayStringAt+0x184>)
 8001794:	4613      	mov	r3, r2
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	4413      	add	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4403      	add	r3, r0
 800179e:	3308      	adds	r3, #8
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	889b      	ldrh	r3, [r3, #4]
 80017a4:	4299      	cmp	r1, r3
 80017a6:	bf2c      	ite	cs
 80017a8:	2301      	movcs	r3, #1
 80017aa:	2300      	movcc	r3, #0
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	4023      	ands	r3, r4
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1b6      	bne.n	8001724 <BSP_LCD_DisplayStringAt+0xe4>
  }

}
 80017b6:	bf00      	nop
 80017b8:	3720      	adds	r7, #32
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bdb0      	pop	{r4, r5, r7, pc}
 80017be:	bf00      	nop
 80017c0:	2000018c 	.word	0x2000018c
 80017c4:	20000190 	.word	0x20000190

080017c8 <BSP_LCD_DrawHLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80017c8:	b5b0      	push	{r4, r5, r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af02      	add	r7, sp, #8
 80017ce:	4603      	mov	r3, r0
 80017d0:	80fb      	strh	r3, [r7, #6]
 80017d2:	460b      	mov	r3, r1
 80017d4:	80bb      	strh	r3, [r7, #4]
 80017d6:	4613      	mov	r3, r2
 80017d8:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80017de:	4b16      	ldr	r3, [pc, #88]	; (8001838 <BSP_LCD_DrawHLine+0x70>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a16      	ldr	r2, [pc, #88]	; (800183c <BSP_LCD_DrawHLine+0x74>)
 80017e4:	2134      	movs	r1, #52	; 0x34
 80017e6:	fb01 f303 	mul.w	r3, r1, r3
 80017ea:	4413      	add	r3, r2
 80017ec:	335c      	adds	r3, #92	; 0x5c
 80017ee:	681c      	ldr	r4, [r3, #0]
 80017f0:	f7ff fde0 	bl	80013b4 <BSP_LCD_GetXSize>
 80017f4:	4602      	mov	r2, r0
 80017f6:	88bb      	ldrh	r3, [r7, #4]
 80017f8:	fb03 f202 	mul.w	r2, r3, r2
 80017fc:	88fb      	ldrh	r3, [r7, #6]
 80017fe:	4413      	add	r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	4423      	add	r3, r4
 8001804:	60fb      	str	r3, [r7, #12]

  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8001806:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <BSP_LCD_DrawHLine+0x70>)
 8001808:	6818      	ldr	r0, [r3, #0]
 800180a:	68fc      	ldr	r4, [r7, #12]
 800180c:	887d      	ldrh	r5, [r7, #2]
 800180e:	4b0a      	ldr	r3, [pc, #40]	; (8001838 <BSP_LCD_DrawHLine+0x70>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	490b      	ldr	r1, [pc, #44]	; (8001840 <BSP_LCD_DrawHLine+0x78>)
 8001814:	4613      	mov	r3, r2
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	4413      	add	r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	440b      	add	r3, r1
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	9301      	str	r3, [sp, #4]
 8001822:	2300      	movs	r3, #0
 8001824:	9300      	str	r3, [sp, #0]
 8001826:	2301      	movs	r3, #1
 8001828:	462a      	mov	r2, r5
 800182a:	4621      	mov	r1, r4
 800182c:	f000 fc1e 	bl	800206c <LL_FillBuffer>
}
 8001830:	bf00      	nop
 8001832:	3710      	adds	r7, #16
 8001834:	46bd      	mov	sp, r7
 8001836:	bdb0      	pop	{r4, r5, r7, pc}
 8001838:	2000018c 	.word	0x2000018c
 800183c:	20000384 	.word	0x20000384
 8001840:	20000190 	.word	0x20000190

08001844 <BSP_LCD_DrawCircle>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8001844:	b590      	push	{r4, r7, lr}
 8001846:	b087      	sub	sp, #28
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	80fb      	strh	r3, [r7, #6]
 800184e:	460b      	mov	r3, r1
 8001850:	80bb      	strh	r3, [r7, #4]
 8001852:	4613      	mov	r3, r2
 8001854:	807b      	strh	r3, [r7, #2]
  int32_t   D;    /* Decision Variable */
  uint32_t  CurX; /* Current X Value */
  uint32_t  CurY; /* Current Y Value */

  D = 3 - (Radius << 1);
 8001856:	887b      	ldrh	r3, [r7, #2]
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	f1c3 0303 	rsb	r3, r3, #3
 800185e:	617b      	str	r3, [r7, #20]
  CurX = 0;
 8001860:	2300      	movs	r3, #0
 8001862:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 8001864:	887b      	ldrh	r3, [r7, #2]
 8001866:	60fb      	str	r3, [r7, #12]

  while (CurX <= CurY)
 8001868:	e0cf      	b.n	8001a0a <BSP_LCD_DrawCircle+0x1c6>
  {
    BSP_LCD_DrawPixel((Xpos + CurX), (Ypos - CurY), DrawProp[ActiveLayer].TextColor);
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	b29a      	uxth	r2, r3
 800186e:	88fb      	ldrh	r3, [r7, #6]
 8001870:	4413      	add	r3, r2
 8001872:	b298      	uxth	r0, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	b29b      	uxth	r3, r3
 8001878:	88ba      	ldrh	r2, [r7, #4]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	b29c      	uxth	r4, r3
 800187e:	4b67      	ldr	r3, [pc, #412]	; (8001a1c <BSP_LCD_DrawCircle+0x1d8>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	4967      	ldr	r1, [pc, #412]	; (8001a20 <BSP_LCD_DrawCircle+0x1dc>)
 8001884:	4613      	mov	r3, r2
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	4413      	add	r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	440b      	add	r3, r1
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	461a      	mov	r2, r3
 8001892:	4621      	mov	r1, r4
 8001894:	f000 fb0c 	bl	8001eb0 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurX), (Ypos - CurY), DrawProp[ActiveLayer].TextColor);
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	b29b      	uxth	r3, r3
 800189c:	88fa      	ldrh	r2, [r7, #6]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	b298      	uxth	r0, r3
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	88ba      	ldrh	r2, [r7, #4]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	b29c      	uxth	r4, r3
 80018ac:	4b5b      	ldr	r3, [pc, #364]	; (8001a1c <BSP_LCD_DrawCircle+0x1d8>)
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	495b      	ldr	r1, [pc, #364]	; (8001a20 <BSP_LCD_DrawCircle+0x1dc>)
 80018b2:	4613      	mov	r3, r2
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	4413      	add	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	440b      	add	r3, r1
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	461a      	mov	r2, r3
 80018c0:	4621      	mov	r1, r4
 80018c2:	f000 faf5 	bl	8001eb0 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + CurY), (Ypos - CurX), DrawProp[ActiveLayer].TextColor);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	88fb      	ldrh	r3, [r7, #6]
 80018cc:	4413      	add	r3, r2
 80018ce:	b298      	uxth	r0, r3
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	88ba      	ldrh	r2, [r7, #4]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	b29c      	uxth	r4, r3
 80018da:	4b50      	ldr	r3, [pc, #320]	; (8001a1c <BSP_LCD_DrawCircle+0x1d8>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	4950      	ldr	r1, [pc, #320]	; (8001a20 <BSP_LCD_DrawCircle+0x1dc>)
 80018e0:	4613      	mov	r3, r2
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	4413      	add	r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	440b      	add	r3, r1
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	461a      	mov	r2, r3
 80018ee:	4621      	mov	r1, r4
 80018f0:	f000 fade 	bl	8001eb0 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurY), (Ypos - CurX), DrawProp[ActiveLayer].TextColor);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	88fa      	ldrh	r2, [r7, #6]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	b298      	uxth	r0, r3
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	b29b      	uxth	r3, r3
 8001902:	88ba      	ldrh	r2, [r7, #4]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	b29c      	uxth	r4, r3
 8001908:	4b44      	ldr	r3, [pc, #272]	; (8001a1c <BSP_LCD_DrawCircle+0x1d8>)
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	4944      	ldr	r1, [pc, #272]	; (8001a20 <BSP_LCD_DrawCircle+0x1dc>)
 800190e:	4613      	mov	r3, r2
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	4413      	add	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	440b      	add	r3, r1
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	461a      	mov	r2, r3
 800191c:	4621      	mov	r1, r4
 800191e:	f000 fac7 	bl	8001eb0 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + CurX), (Ypos + CurY), DrawProp[ActiveLayer].TextColor);
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	b29a      	uxth	r2, r3
 8001926:	88fb      	ldrh	r3, [r7, #6]
 8001928:	4413      	add	r3, r2
 800192a:	b298      	uxth	r0, r3
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	b29a      	uxth	r2, r3
 8001930:	88bb      	ldrh	r3, [r7, #4]
 8001932:	4413      	add	r3, r2
 8001934:	b29c      	uxth	r4, r3
 8001936:	4b39      	ldr	r3, [pc, #228]	; (8001a1c <BSP_LCD_DrawCircle+0x1d8>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	4939      	ldr	r1, [pc, #228]	; (8001a20 <BSP_LCD_DrawCircle+0x1dc>)
 800193c:	4613      	mov	r3, r2
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	4413      	add	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	440b      	add	r3, r1
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	461a      	mov	r2, r3
 800194a:	4621      	mov	r1, r4
 800194c:	f000 fab0 	bl	8001eb0 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurX), (Ypos + CurY), DrawProp[ActiveLayer].TextColor);
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	b29b      	uxth	r3, r3
 8001954:	88fa      	ldrh	r2, [r7, #6]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	b298      	uxth	r0, r3
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	b29a      	uxth	r2, r3
 800195e:	88bb      	ldrh	r3, [r7, #4]
 8001960:	4413      	add	r3, r2
 8001962:	b29c      	uxth	r4, r3
 8001964:	4b2d      	ldr	r3, [pc, #180]	; (8001a1c <BSP_LCD_DrawCircle+0x1d8>)
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	492d      	ldr	r1, [pc, #180]	; (8001a20 <BSP_LCD_DrawCircle+0x1dc>)
 800196a:	4613      	mov	r3, r2
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	4413      	add	r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	440b      	add	r3, r1
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	461a      	mov	r2, r3
 8001978:	4621      	mov	r1, r4
 800197a:	f000 fa99 	bl	8001eb0 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + CurY), (Ypos + CurX), DrawProp[ActiveLayer].TextColor);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	b29a      	uxth	r2, r3
 8001982:	88fb      	ldrh	r3, [r7, #6]
 8001984:	4413      	add	r3, r2
 8001986:	b298      	uxth	r0, r3
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	b29a      	uxth	r2, r3
 800198c:	88bb      	ldrh	r3, [r7, #4]
 800198e:	4413      	add	r3, r2
 8001990:	b29c      	uxth	r4, r3
 8001992:	4b22      	ldr	r3, [pc, #136]	; (8001a1c <BSP_LCD_DrawCircle+0x1d8>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	4922      	ldr	r1, [pc, #136]	; (8001a20 <BSP_LCD_DrawCircle+0x1dc>)
 8001998:	4613      	mov	r3, r2
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	4413      	add	r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	440b      	add	r3, r1
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	461a      	mov	r2, r3
 80019a6:	4621      	mov	r1, r4
 80019a8:	f000 fa82 	bl	8001eb0 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurY), (Ypos + CurX), DrawProp[ActiveLayer].TextColor);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	88fa      	ldrh	r2, [r7, #6]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	b298      	uxth	r0, r3
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	88bb      	ldrh	r3, [r7, #4]
 80019bc:	4413      	add	r3, r2
 80019be:	b29c      	uxth	r4, r3
 80019c0:	4b16      	ldr	r3, [pc, #88]	; (8001a1c <BSP_LCD_DrawCircle+0x1d8>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	4916      	ldr	r1, [pc, #88]	; (8001a20 <BSP_LCD_DrawCircle+0x1dc>)
 80019c6:	4613      	mov	r3, r2
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	4413      	add	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	440b      	add	r3, r1
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	461a      	mov	r2, r3
 80019d4:	4621      	mov	r1, r4
 80019d6:	f000 fa6b 	bl	8001eb0 <BSP_LCD_DrawPixel>

    if (D < 0)
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	da06      	bge.n	80019ee <BSP_LCD_DrawCircle+0x1aa>
    {
      D += (CurX << 2) + 6;
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	009a      	lsls	r2, r3, #2
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	4413      	add	r3, r2
 80019e8:	3306      	adds	r3, #6
 80019ea:	617b      	str	r3, [r7, #20]
 80019ec:	e00a      	b.n	8001a04 <BSP_LCD_DrawCircle+0x1c0>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	009a      	lsls	r2, r3, #2
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	4413      	add	r3, r2
 80019fa:	330a      	adds	r3, #10
 80019fc:	617b      	str	r3, [r7, #20]
      CurY--;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	3b01      	subs	r3, #1
 8001a02:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	3301      	adds	r3, #1
 8001a08:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	f67f af2b 	bls.w	800186a <BSP_LCD_DrawCircle+0x26>
  }
}
 8001a14:	bf00      	nop
 8001a16:	371c      	adds	r7, #28
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd90      	pop	{r4, r7, pc}
 8001a1c:	2000018c 	.word	0x2000018c
 8001a20:	20000190 	.word	0x20000190

08001a24 <BSP_LCD_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 8001a24:	b590      	push	{r4, r7, lr}
 8001a26:	b08b      	sub	sp, #44	; 0x2c
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 8001a30:	2300      	movs	r3, #0
 8001a32:	627b      	str	r3, [r7, #36]	; 0x24
 8001a34:	2300      	movs	r3, #0
 8001a36:	61bb      	str	r3, [r7, #24]
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	613b      	str	r3, [r7, #16]
  uint32_t Address;
  uint32_t InputColorMode = 0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	61fb      	str	r3, [r7, #28]

  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	330a      	adds	r3, #10
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	330b      	adds	r3, #11
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	021b      	lsls	r3, r3, #8
 8001a54:	441a      	add	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	330c      	adds	r3, #12
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	041b      	lsls	r3, r3, #16
 8001a5e:	441a      	add	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	330d      	adds	r3, #13
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	061b      	lsls	r3, r3, #24
 8001a68:	4413      	add	r3, r2
 8001a6a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3312      	adds	r3, #18
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	461a      	mov	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3313      	adds	r3, #19
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	021b      	lsls	r3, r3, #8
 8001a7c:	441a      	add	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	3314      	adds	r3, #20
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	041b      	lsls	r3, r3, #16
 8001a86:	441a      	add	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3315      	adds	r3, #21
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	061b      	lsls	r3, r3, #24
 8001a90:	4413      	add	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	3316      	adds	r3, #22
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3317      	adds	r3, #23
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	021b      	lsls	r3, r3, #8
 8001aa4:	441a      	add	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	3318      	adds	r3, #24
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	041b      	lsls	r3, r3, #16
 8001aae:	441a      	add	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3319      	adds	r3, #25
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	061b      	lsls	r3, r3, #24
 8001ab8:	4413      	add	r3, r2
 8001aba:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	331c      	adds	r3, #28
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	331d      	adds	r3, #29
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	021b      	lsls	r3, r3, #8
 8001acc:	4413      	add	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8001ad0:	4b2a      	ldr	r3, [pc, #168]	; (8001b7c <BSP_LCD_DrawBitmap+0x158>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a2a      	ldr	r2, [pc, #168]	; (8001b80 <BSP_LCD_DrawBitmap+0x15c>)
 8001ad6:	2134      	movs	r1, #52	; 0x34
 8001ad8:	fb01 f303 	mul.w	r3, r1, r3
 8001adc:	4413      	add	r3, r2
 8001ade:	335c      	adds	r3, #92	; 0x5c
 8001ae0:	681c      	ldr	r4, [r3, #0]
 8001ae2:	f7ff fc67 	bl	80013b4 <BSP_LCD_GetXSize>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	fb03 f202 	mul.w	r2, r3, r2
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	4413      	add	r3, r2
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	4423      	add	r3, r4
 8001af6:	623b      	str	r3, [r7, #32]

  /* Get the layer pixel format */
  if ((bit_pixel/8) == 4)
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	3b20      	subs	r3, #32
 8001afc:	2b07      	cmp	r3, #7
 8001afe:	d802      	bhi.n	8001b06 <BSP_LCD_DrawBitmap+0xe2>
  {
    InputColorMode = DMA2D_INPUT_ARGB8888;
 8001b00:	2300      	movs	r3, #0
 8001b02:	61fb      	str	r3, [r7, #28]
 8001b04:	e008      	b.n	8001b18 <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	3b10      	subs	r3, #16
 8001b0a:	2b07      	cmp	r3, #7
 8001b0c:	d802      	bhi.n	8001b14 <BSP_LCD_DrawBitmap+0xf0>
  {
    InputColorMode = DMA2D_INPUT_RGB565;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	61fb      	str	r3, [r7, #28]
 8001b12:	e001      	b.n	8001b18 <BSP_LCD_DrawBitmap+0xf4>
  }
  else
  {
    InputColorMode = DMA2D_INPUT_RGB888;
 8001b14:	2301      	movs	r3, #1
 8001b16:	61fb      	str	r3, [r7, #28]
  }

  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	fb02 f303 	mul.w	r3, r2, r3
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	08d2      	lsrs	r2, r2, #3
 8001b26:	fb02 f203 	mul.w	r2, r2, r3
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2c:	4413      	add	r3, r2
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	4413      	add	r3, r2
 8001b32:	607b      	str	r3, [r7, #4]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8001b34:	2300      	movs	r3, #0
 8001b36:	627b      	str	r3, [r7, #36]	; 0x24
 8001b38:	e018      	b.n	8001b6c <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)Address, width, InputColorMode);
 8001b3a:	6a39      	ldr	r1, [r7, #32]
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 facb 	bl	80020dc <LL_ConvertLineToARGB8888>

    /* Increment the source and destination buffers */
    Address+=  (BSP_LCD_GetXSize()*4);
 8001b46:	f7ff fc35 	bl	80013b4 <BSP_LCD_GetXSize>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	6a3a      	ldr	r2, [r7, #32]
 8001b50:	4413      	add	r3, r2
 8001b52:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	08db      	lsrs	r3, r3, #3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	fb02 f303 	mul.w	r3, r2, r3
 8001b5e:	425b      	negs	r3, r3
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	4413      	add	r3, r2
 8001b64:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	3301      	adds	r3, #1
 8001b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d3e2      	bcc.n	8001b3a <BSP_LCD_DrawBitmap+0x116>
  }
}
 8001b74:	bf00      	nop
 8001b76:	372c      	adds	r7, #44	; 0x2c
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd90      	pop	{r4, r7, pc}
 8001b7c:	2000018c 	.word	0x2000018c
 8001b80:	20000384 	.word	0x20000384

08001b84 <BSP_LCD_FillRect>:
  * @param  Ypos: Y position
  * @param  Width: Rectangle width
  * @param  Height: Rectangle height
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b88:	b086      	sub	sp, #24
 8001b8a:	af02      	add	r7, sp, #8
 8001b8c:	4604      	mov	r4, r0
 8001b8e:	4608      	mov	r0, r1
 8001b90:	4611      	mov	r1, r2
 8001b92:	461a      	mov	r2, r3
 8001b94:	4623      	mov	r3, r4
 8001b96:	80fb      	strh	r3, [r7, #6]
 8001b98:	4603      	mov	r3, r0
 8001b9a:	80bb      	strh	r3, [r7, #4]
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	807b      	strh	r3, [r7, #2]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	803b      	strh	r3, [r7, #0]
  uint32_t  Xaddress = 0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001ba8:	4b20      	ldr	r3, [pc, #128]	; (8001c2c <BSP_LCD_FillRect+0xa8>)
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	4920      	ldr	r1, [pc, #128]	; (8001c30 <BSP_LCD_FillRect+0xac>)
 8001bae:	4613      	mov	r3, r2
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	4413      	add	r3, r2
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	440b      	add	r3, r1
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff fc72 	bl	80014a4 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001bc0:	4b1a      	ldr	r3, [pc, #104]	; (8001c2c <BSP_LCD_FillRect+0xa8>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a1b      	ldr	r2, [pc, #108]	; (8001c34 <BSP_LCD_FillRect+0xb0>)
 8001bc6:	2134      	movs	r1, #52	; 0x34
 8001bc8:	fb01 f303 	mul.w	r3, r1, r3
 8001bcc:	4413      	add	r3, r2
 8001bce:	335c      	adds	r3, #92	; 0x5c
 8001bd0:	681c      	ldr	r4, [r3, #0]
 8001bd2:	f7ff fbef 	bl	80013b4 <BSP_LCD_GetXSize>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	88bb      	ldrh	r3, [r7, #4]
 8001bda:	fb03 f202 	mul.w	r2, r3, r2
 8001bde:	88fb      	ldrh	r3, [r7, #6]
 8001be0:	4413      	add	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	4423      	add	r3, r4
 8001be6:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001be8:	4b10      	ldr	r3, [pc, #64]	; (8001c2c <BSP_LCD_FillRect+0xa8>)
 8001bea:	681c      	ldr	r4, [r3, #0]
 8001bec:	68fd      	ldr	r5, [r7, #12]
 8001bee:	887e      	ldrh	r6, [r7, #2]
 8001bf0:	f8b7 8000 	ldrh.w	r8, [r7]
 8001bf4:	f7ff fbde 	bl	80013b4 <BSP_LCD_GetXSize>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	887b      	ldrh	r3, [r7, #2]
 8001bfc:	1ad1      	subs	r1, r2, r3
 8001bfe:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <BSP_LCD_FillRect+0xa8>)
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	480b      	ldr	r0, [pc, #44]	; (8001c30 <BSP_LCD_FillRect+0xac>)
 8001c04:	4613      	mov	r3, r2
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	4413      	add	r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	4403      	add	r3, r0
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	9301      	str	r3, [sp, #4]
 8001c12:	9100      	str	r1, [sp, #0]
 8001c14:	4643      	mov	r3, r8
 8001c16:	4632      	mov	r2, r6
 8001c18:	4629      	mov	r1, r5
 8001c1a:	4620      	mov	r0, r4
 8001c1c:	f000 fa26 	bl	800206c <LL_FillBuffer>
}
 8001c20:	bf00      	nop
 8001c22:	3710      	adds	r7, #16
 8001c24:	46bd      	mov	sp, r7
 8001c26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c2a:	bf00      	nop
 8001c2c:	2000018c 	.word	0x2000018c
 8001c30:	20000190 	.word	0x20000190
 8001c34:	20000384 	.word	0x20000384

08001c38 <BSP_LCD_FillCircle>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	80fb      	strh	r3, [r7, #6]
 8001c42:	460b      	mov	r3, r1
 8001c44:	80bb      	strh	r3, [r7, #4]
 8001c46:	4613      	mov	r3, r2
 8001c48:	807b      	strh	r3, [r7, #2]
  int32_t  D;     /* Decision Variable */
  uint32_t  CurX; /* Current X Value */
  uint32_t  CurY; /* Current Y Value */

  D = 3 - (Radius << 1);
 8001c4a:	887b      	ldrh	r3, [r7, #2]
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	f1c3 0303 	rsb	r3, r3, #3
 8001c52:	617b      	str	r3, [r7, #20]

  CurX = 0;
 8001c54:	2300      	movs	r3, #0
 8001c56:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 8001c58:	887b      	ldrh	r3, [r7, #2]
 8001c5a:	60fb      	str	r3, [r7, #12]

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001c5c:	4b44      	ldr	r3, [pc, #272]	; (8001d70 <BSP_LCD_FillCircle+0x138>)
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	4944      	ldr	r1, [pc, #272]	; (8001d74 <BSP_LCD_FillCircle+0x13c>)
 8001c62:	4613      	mov	r3, r2
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	4413      	add	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	440b      	add	r3, r1
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff fc18 	bl	80014a4 <BSP_LCD_SetTextColor>

  while (CurX <= CurY)
 8001c74:	e061      	b.n	8001d3a <BSP_LCD_FillCircle+0x102>
  {
    if(CurY > 0)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d021      	beq.n	8001cc0 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - CurY, Ypos + CurX, 2*CurY);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	88fa      	ldrh	r2, [r7, #6]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	b298      	uxth	r0, r3
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	88bb      	ldrh	r3, [r7, #4]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	b299      	uxth	r1, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	461a      	mov	r2, r3
 8001c9a:	f7ff fd95 	bl	80017c8 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - CurY, Ypos - CurX, 2*CurY);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	88fa      	ldrh	r2, [r7, #6]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	b298      	uxth	r0, r3
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	88ba      	ldrh	r2, [r7, #4]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	b299      	uxth	r1, r3
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	461a      	mov	r2, r3
 8001cbc:	f7ff fd84 	bl	80017c8 <BSP_LCD_DrawHLine>
    }

    if(CurX > 0)
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d021      	beq.n	8001d0a <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - CurX, Ypos - CurY, 2*CurX);
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	88fa      	ldrh	r2, [r7, #6]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	b298      	uxth	r0, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	88ba      	ldrh	r2, [r7, #4]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	b299      	uxth	r1, r3
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	f7ff fd70 	bl	80017c8 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - CurX, Ypos + CurY, 2*CurX);
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	88fa      	ldrh	r2, [r7, #6]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	b298      	uxth	r0, r3
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	88bb      	ldrh	r3, [r7, #4]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	b299      	uxth	r1, r3
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	461a      	mov	r2, r3
 8001d06:	f7ff fd5f 	bl	80017c8 <BSP_LCD_DrawHLine>
    }
    if (D < 0)
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	da06      	bge.n	8001d1e <BSP_LCD_FillCircle+0xe6>
    {
      D += (CurX << 2) + 6;
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	009a      	lsls	r2, r3, #2
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	4413      	add	r3, r2
 8001d18:	3306      	adds	r3, #6
 8001d1a:	617b      	str	r3, [r7, #20]
 8001d1c:	e00a      	b.n	8001d34 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	009a      	lsls	r2, r3, #2
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	4413      	add	r3, r2
 8001d2a:	330a      	adds	r3, #10
 8001d2c:	617b      	str	r3, [r7, #20]
      CurY--;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	3b01      	subs	r3, #1
 8001d32:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	3301      	adds	r3, #1
 8001d38:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d999      	bls.n	8001c76 <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001d42:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <BSP_LCD_FillCircle+0x138>)
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	490b      	ldr	r1, [pc, #44]	; (8001d74 <BSP_LCD_FillCircle+0x13c>)
 8001d48:	4613      	mov	r3, r2
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	4413      	add	r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	440b      	add	r3, r1
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff fba5 	bl	80014a4 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8001d5a:	887a      	ldrh	r2, [r7, #2]
 8001d5c:	88b9      	ldrh	r1, [r7, #4]
 8001d5e:	88fb      	ldrh	r3, [r7, #6]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff fd6f 	bl	8001844 <BSP_LCD_DrawCircle>
}
 8001d66:	bf00      	nop
 8001d68:	3718      	adds	r7, #24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	2000018c 	.word	0x2000018c
 8001d74:	20000190 	.word	0x20000190

08001d78 <DSI_IO_WriteCmd>:
  *                 If inferior to 2, a long write command is performed else short.
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af02      	add	r7, sp, #8
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d80d      	bhi.n	8001da4 <DSI_IO_WriteCmd+0x2c>
  {
   HAL_DSI_ShortWrite(&hdsi_discovery, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	3301      	adds	r3, #1
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	9300      	str	r3, [sp, #0]
 8001d96:	4613      	mov	r3, r2
 8001d98:	2215      	movs	r2, #21
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	480a      	ldr	r0, [pc, #40]	; (8001dc8 <DSI_IO_WriteCmd+0x50>)
 8001d9e:	f002 ffd9 	bl	8004d54 <HAL_DSI_ShortWrite>
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  } 
}
 8001da2:	e00d      	b.n	8001dc0 <DSI_IO_WriteCmd+0x48>
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4413      	add	r3, r2
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	461a      	mov	r2, r3
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	9301      	str	r3, [sp, #4]
 8001db2:	9200      	str	r2, [sp, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2239      	movs	r2, #57	; 0x39
 8001db8:	2100      	movs	r1, #0
 8001dba:	4803      	ldr	r0, [pc, #12]	; (8001dc8 <DSI_IO_WriteCmd+0x50>)
 8001dbc:	f002 ffec 	bl	8004d98 <HAL_DSI_LongWrite>
}
 8001dc0:	bf00      	nop
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	2000042c 	.word	0x2000042c

08001dcc <LCD_IO_GetID>:
  * @brief  Returns the ID of connected screen by checking the HDMI
  *        (adv7533 component) ID or LCD DSI (via TS ID) ID.
  * @retval LCD ID
  */
static uint16_t LCD_IO_GetID(void)
{ 
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  else
  {
    return 0;
  }
#else 
  return LCD_DSI_ID; 
 8001dd0:	2311      	movs	r3, #17
#endif /* USE_LCD_HDMI */
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <BSP_LCD_MspInit>:
/**
  * @brief  Initialize the BSP LCD Msp.
  * Application can surcharge if needed this function implementation
  */
__weak void BSP_LCD_MspInit(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001de2:	4b32      	ldr	r3, [pc, #200]	; (8001eac <BSP_LCD_MspInit+0xd0>)
 8001de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de6:	4a31      	ldr	r2, [pc, #196]	; (8001eac <BSP_LCD_MspInit+0xd0>)
 8001de8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001dec:	6453      	str	r3, [r2, #68]	; 0x44
 8001dee:	4b2f      	ldr	r3, [pc, #188]	; (8001eac <BSP_LCD_MspInit+0xd0>)
 8001df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	68fb      	ldr	r3, [r7, #12]

  /** @brief Toggle Sw reset of LTDC IP */
  __HAL_RCC_LTDC_FORCE_RESET();
 8001dfa:	4b2c      	ldr	r3, [pc, #176]	; (8001eac <BSP_LCD_MspInit+0xd0>)
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfe:	4a2b      	ldr	r2, [pc, #172]	; (8001eac <BSP_LCD_MspInit+0xd0>)
 8001e00:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001e04:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 8001e06:	4b29      	ldr	r3, [pc, #164]	; (8001eac <BSP_LCD_MspInit+0xd0>)
 8001e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0a:	4a28      	ldr	r2, [pc, #160]	; (8001eac <BSP_LCD_MspInit+0xd0>)
 8001e0c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001e10:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief Enable the DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8001e12:	4b26      	ldr	r3, [pc, #152]	; (8001eac <BSP_LCD_MspInit+0xd0>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	4a25      	ldr	r2, [pc, #148]	; (8001eac <BSP_LCD_MspInit+0xd0>)
 8001e18:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1e:	4b23      	ldr	r3, [pc, #140]	; (8001eac <BSP_LCD_MspInit+0xd0>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e26:	60bb      	str	r3, [r7, #8]
 8001e28:	68bb      	ldr	r3, [r7, #8]

  /** @brief Toggle Sw reset of DMA2D IP */
  __HAL_RCC_DMA2D_FORCE_RESET();
 8001e2a:	4b20      	ldr	r3, [pc, #128]	; (8001eac <BSP_LCD_MspInit+0xd0>)
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	4a1f      	ldr	r2, [pc, #124]	; (8001eac <BSP_LCD_MspInit+0xd0>)
 8001e30:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e34:	6113      	str	r3, [r2, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 8001e36:	4b1d      	ldr	r3, [pc, #116]	; (8001eac <BSP_LCD_MspInit+0xd0>)
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	4a1c      	ldr	r2, [pc, #112]	; (8001eac <BSP_LCD_MspInit+0xd0>)
 8001e3c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001e40:	6113      	str	r3, [r2, #16]

  /** @brief Enable DSI Host and wrapper clocks */
  __HAL_RCC_DSI_CLK_ENABLE();
 8001e42:	4b1a      	ldr	r3, [pc, #104]	; (8001eac <BSP_LCD_MspInit+0xd0>)
 8001e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e46:	4a19      	ldr	r2, [pc, #100]	; (8001eac <BSP_LCD_MspInit+0xd0>)
 8001e48:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e4e:	4b17      	ldr	r3, [pc, #92]	; (8001eac <BSP_LCD_MspInit+0xd0>)
 8001e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e56:	607b      	str	r3, [r7, #4]
 8001e58:	687b      	ldr	r3, [r7, #4]

  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
 8001e5a:	4b14      	ldr	r3, [pc, #80]	; (8001eac <BSP_LCD_MspInit+0xd0>)
 8001e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5e:	4a13      	ldr	r2, [pc, #76]	; (8001eac <BSP_LCD_MspInit+0xd0>)
 8001e60:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001e64:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 8001e66:	4b11      	ldr	r3, [pc, #68]	; (8001eac <BSP_LCD_MspInit+0xd0>)
 8001e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6a:	4a10      	ldr	r2, [pc, #64]	; (8001eac <BSP_LCD_MspInit+0xd0>)
 8001e6c:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8001e70:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8001e72:	2200      	movs	r2, #0
 8001e74:	2103      	movs	r1, #3
 8001e76:	2058      	movs	r0, #88	; 0x58
 8001e78:	f001 fb49 	bl	800350e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001e7c:	2058      	movs	r0, #88	; 0x58
 8001e7e:	f001 fb62 	bl	8003546 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 8001e82:	2200      	movs	r2, #0
 8001e84:	2103      	movs	r1, #3
 8001e86:	205a      	movs	r0, #90	; 0x5a
 8001e88:	f001 fb41 	bl	800350e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001e8c:	205a      	movs	r0, #90	; 0x5a
 8001e8e:	f001 fb5a 	bl	8003546 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 8001e92:	2200      	movs	r2, #0
 8001e94:	2103      	movs	r1, #3
 8001e96:	2062      	movs	r0, #98	; 0x62
 8001e98:	f001 fb39 	bl	800350e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001e9c:	2062      	movs	r0, #98	; 0x62
 8001e9e:	f001 fb52 	bl	8003546 <HAL_NVIC_EnableIRQ>
}
 8001ea2:	bf00      	nop
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	40023800 	.word	0x40023800

08001eb0 <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8001eb0:	b5b0      	push	{r4, r5, r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	603a      	str	r2, [r7, #0]
 8001eba:	80fb      	strh	r3, [r7, #6]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001ec0:	4b0c      	ldr	r3, [pc, #48]	; (8001ef4 <BSP_LCD_DrawPixel+0x44>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a0c      	ldr	r2, [pc, #48]	; (8001ef8 <BSP_LCD_DrawPixel+0x48>)
 8001ec6:	2134      	movs	r1, #52	; 0x34
 8001ec8:	fb01 f303 	mul.w	r3, r1, r3
 8001ecc:	4413      	add	r3, r2
 8001ece:	335c      	adds	r3, #92	; 0x5c
 8001ed0:	681c      	ldr	r4, [r3, #0]
 8001ed2:	88bd      	ldrh	r5, [r7, #4]
 8001ed4:	f7ff fa6e 	bl	80013b4 <BSP_LCD_GetXSize>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	fb03 f205 	mul.w	r2, r3, r5
 8001ede:	88fb      	ldrh	r3, [r7, #6]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	4423      	add	r3, r4
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	6013      	str	r3, [r2, #0]
}
 8001eec:	bf00      	nop
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ef4:	2000018c 	.word	0x2000018c
 8001ef8:	20000384 	.word	0x20000384

08001efc <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b088      	sub	sp, #32
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4603      	mov	r3, r0
 8001f04:	603a      	str	r2, [r7, #0]
 8001f06:	80fb      	strh	r3, [r7, #6]
 8001f08:	460b      	mov	r3, r1
 8001f0a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	61fb      	str	r3, [r7, #28]
 8001f10:	2300      	movs	r3, #0
 8001f12:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[ActiveLayer].pFont->Height;
 8001f14:	4b53      	ldr	r3, [pc, #332]	; (8002064 <DrawChar+0x168>)
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	4953      	ldr	r1, [pc, #332]	; (8002068 <DrawChar+0x16c>)
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	4413      	add	r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	440b      	add	r3, r1
 8001f24:	3308      	adds	r3, #8
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	88db      	ldrh	r3, [r3, #6]
 8001f2a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8001f2c:	4b4d      	ldr	r3, [pc, #308]	; (8002064 <DrawChar+0x168>)
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	494d      	ldr	r1, [pc, #308]	; (8002068 <DrawChar+0x16c>)
 8001f32:	4613      	mov	r3, r2
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	4413      	add	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	440b      	add	r3, r1
 8001f3c:	3308      	adds	r3, #8
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	889b      	ldrh	r3, [r3, #4]
 8001f42:	823b      	strh	r3, [r7, #16]

  offset =  8 *((width + 7)/8) -  width ;
 8001f44:	8a3b      	ldrh	r3, [r7, #16]
 8001f46:	3307      	adds	r3, #7
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	da00      	bge.n	8001f4e <DrawChar+0x52>
 8001f4c:	3307      	adds	r3, #7
 8001f4e:	10db      	asrs	r3, r3, #3
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	8a3b      	ldrh	r3, [r7, #16]
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8001f5e:	2300      	movs	r3, #0
 8001f60:	61fb      	str	r3, [r7, #28]
 8001f62:	e076      	b.n	8002052 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8001f64:	8a3b      	ldrh	r3, [r7, #16]
 8001f66:	3307      	adds	r3, #7
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	da00      	bge.n	8001f6e <DrawChar+0x72>
 8001f6c:	3307      	adds	r3, #7
 8001f6e:	10db      	asrs	r3, r3, #3
 8001f70:	461a      	mov	r2, r3
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	fb03 f302 	mul.w	r3, r3, r2
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8001f7e:	8a3b      	ldrh	r3, [r7, #16]
 8001f80:	3307      	adds	r3, #7
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	da00      	bge.n	8001f88 <DrawChar+0x8c>
 8001f86:	3307      	adds	r3, #7
 8001f88:	10db      	asrs	r3, r3, #3
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d002      	beq.n	8001f94 <DrawChar+0x98>
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d004      	beq.n	8001f9c <DrawChar+0xa0>
 8001f92:	e00c      	b.n	8001fae <DrawChar+0xb2>
    {

    case 1:
      line =  pchar[0];
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	617b      	str	r3, [r7, #20]
      break;
 8001f9a:	e016      	b.n	8001fca <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	021b      	lsls	r3, r3, #8
 8001fa2:	68ba      	ldr	r2, [r7, #8]
 8001fa4:	3201      	adds	r2, #1
 8001fa6:	7812      	ldrb	r2, [r2, #0]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	617b      	str	r3, [r7, #20]
      break;
 8001fac:	e00d      	b.n	8001fca <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	041a      	lsls	r2, r3, #16
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	021b      	lsls	r3, r3, #8
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	68ba      	ldr	r2, [r7, #8]
 8001fc0:	3202      	adds	r2, #2
 8001fc2:	7812      	ldrb	r2, [r2, #0]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	617b      	str	r3, [r7, #20]
      break;
 8001fc8:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61bb      	str	r3, [r7, #24]
 8001fce:	e036      	b.n	800203e <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1)))
 8001fd0:	8a3a      	ldrh	r2, [r7, #16]
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	1ad2      	subs	r2, r2, r3
 8001fd6:	7bfb      	ldrb	r3, [r7, #15]
 8001fd8:	4413      	add	r3, r2
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	2201      	movs	r2, #1
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d012      	beq.n	8002012 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	88fb      	ldrh	r3, [r7, #6]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	b298      	uxth	r0, r3
 8001ff6:	4b1b      	ldr	r3, [pc, #108]	; (8002064 <DrawChar+0x168>)
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	491b      	ldr	r1, [pc, #108]	; (8002068 <DrawChar+0x16c>)
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	4413      	add	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	440b      	add	r3, r1
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	88bb      	ldrh	r3, [r7, #4]
 800200a:	4619      	mov	r1, r3
 800200c:	f7ff ff50 	bl	8001eb0 <BSP_LCD_DrawPixel>
 8002010:	e012      	b.n	8002038 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	b29a      	uxth	r2, r3
 8002016:	88fb      	ldrh	r3, [r7, #6]
 8002018:	4413      	add	r3, r2
 800201a:	b298      	uxth	r0, r3
 800201c:	4b11      	ldr	r3, [pc, #68]	; (8002064 <DrawChar+0x168>)
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	4911      	ldr	r1, [pc, #68]	; (8002068 <DrawChar+0x16c>)
 8002022:	4613      	mov	r3, r2
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	4413      	add	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	440b      	add	r3, r1
 800202c:	3304      	adds	r3, #4
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	88bb      	ldrh	r3, [r7, #4]
 8002032:	4619      	mov	r1, r3
 8002034:	f7ff ff3c 	bl	8001eb0 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	3301      	adds	r3, #1
 800203c:	61bb      	str	r3, [r7, #24]
 800203e:	8a3b      	ldrh	r3, [r7, #16]
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	429a      	cmp	r2, r3
 8002044:	d3c4      	bcc.n	8001fd0 <DrawChar+0xd4>
      }
    }
    Ypos++;
 8002046:	88bb      	ldrh	r3, [r7, #4]
 8002048:	3301      	adds	r3, #1
 800204a:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	3301      	adds	r3, #1
 8002050:	61fb      	str	r3, [r7, #28]
 8002052:	8a7b      	ldrh	r3, [r7, #18]
 8002054:	69fa      	ldr	r2, [r7, #28]
 8002056:	429a      	cmp	r2, r3
 8002058:	d384      	bcc.n	8001f64 <DrawChar+0x68>
  }
}
 800205a:	bf00      	nop
 800205c:	3720      	adds	r7, #32
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	2000018c 	.word	0x2000018c
 8002068:	20000190 	.word	0x20000190

0800206c <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af02      	add	r7, sp, #8
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
 8002078:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_discovery.Init.Mode         = DMA2D_R2M;
 800207a:	4b16      	ldr	r3, [pc, #88]	; (80020d4 <LL_FillBuffer+0x68>)
 800207c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002080:	605a      	str	r2, [r3, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 8002082:	4b14      	ldr	r3, [pc, #80]	; (80020d4 <LL_FillBuffer+0x68>)
 8002084:	2200      	movs	r2, #0
 8002086:	609a      	str	r2, [r3, #8]
  hdma2d_discovery.Init.OutputOffset = OffLine;
 8002088:	4a12      	ldr	r2, [pc, #72]	; (80020d4 <LL_FillBuffer+0x68>)
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	60d3      	str	r3, [r2, #12]

  hdma2d_discovery.Instance = DMA2D;
 800208e:	4b11      	ldr	r3, [pc, #68]	; (80020d4 <LL_FillBuffer+0x68>)
 8002090:	4a11      	ldr	r2, [pc, #68]	; (80020d8 <LL_FillBuffer+0x6c>)
 8002092:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 8002094:	480f      	ldr	r0, [pc, #60]	; (80020d4 <LL_FillBuffer+0x68>)
 8002096:	f001 fc2d 	bl	80038f4 <HAL_DMA2D_Init>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d115      	bne.n	80020cc <LL_FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, LayerIndex) == HAL_OK)
 80020a0:	68f9      	ldr	r1, [r7, #12]
 80020a2:	480c      	ldr	r0, [pc, #48]	; (80020d4 <LL_FillBuffer+0x68>)
 80020a4:	f001 fd94 	bl	8003bd0 <HAL_DMA2D_ConfigLayer>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d10e      	bne.n	80020cc <LL_FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&hdma2d_discovery, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80020ae:	68ba      	ldr	r2, [r7, #8]
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	69f9      	ldr	r1, [r7, #28]
 80020b8:	4806      	ldr	r0, [pc, #24]	; (80020d4 <LL_FillBuffer+0x68>)
 80020ba:	f001 fc75 	bl	80039a8 <HAL_DMA2D_Start>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d103      	bne.n	80020cc <LL_FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 80020c4:	210a      	movs	r1, #10
 80020c6:	4803      	ldr	r0, [pc, #12]	; (80020d4 <LL_FillBuffer+0x68>)
 80020c8:	f001 fc99 	bl	80039fe <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 80020cc:	bf00      	nop
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	2000032c 	.word	0x2000032c
 80020d8:	4002b000 	.word	0x4002b000

080020dc <LL_ConvertLineToARGB8888>:
  * @param  pDst: Output color
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af02      	add	r7, sp, #8
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
 80020e8:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hdma2d_discovery.Init.Mode         = DMA2D_M2M_PFC;
 80020ea:	4b1c      	ldr	r3, [pc, #112]	; (800215c <LL_ConvertLineToARGB8888+0x80>)
 80020ec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80020f0:	605a      	str	r2, [r3, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 80020f2:	4b1a      	ldr	r3, [pc, #104]	; (800215c <LL_ConvertLineToARGB8888+0x80>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	609a      	str	r2, [r3, #8]
  hdma2d_discovery.Init.OutputOffset = 0;
 80020f8:	4b18      	ldr	r3, [pc, #96]	; (800215c <LL_ConvertLineToARGB8888+0x80>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hdma2d_discovery.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80020fe:	4b17      	ldr	r3, [pc, #92]	; (800215c <LL_ConvertLineToARGB8888+0x80>)
 8002100:	2200      	movs	r2, #0
 8002102:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d_discovery.LayerCfg[1].InputAlpha = 0xFF;
 8002104:	4b15      	ldr	r3, [pc, #84]	; (800215c <LL_ConvertLineToARGB8888+0x80>)
 8002106:	22ff      	movs	r2, #255	; 0xff
 8002108:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d_discovery.LayerCfg[1].InputColorMode = ColorMode;
 800210a:	4a14      	ldr	r2, [pc, #80]	; (800215c <LL_ConvertLineToARGB8888+0x80>)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdma2d_discovery.LayerCfg[1].InputOffset = 0;
 8002110:	4b12      	ldr	r3, [pc, #72]	; (800215c <LL_ConvertLineToARGB8888+0x80>)
 8002112:	2200      	movs	r2, #0
 8002114:	639a      	str	r2, [r3, #56]	; 0x38

  hdma2d_discovery.Instance = DMA2D;
 8002116:	4b11      	ldr	r3, [pc, #68]	; (800215c <LL_ConvertLineToARGB8888+0x80>)
 8002118:	4a11      	ldr	r2, [pc, #68]	; (8002160 <LL_ConvertLineToARGB8888+0x84>)
 800211a:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 800211c:	480f      	ldr	r0, [pc, #60]	; (800215c <LL_ConvertLineToARGB8888+0x80>)
 800211e:	f001 fbe9 	bl	80038f4 <HAL_DMA2D_Init>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d115      	bne.n	8002154 <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, 1) == HAL_OK)
 8002128:	2101      	movs	r1, #1
 800212a:	480c      	ldr	r0, [pc, #48]	; (800215c <LL_ConvertLineToARGB8888+0x80>)
 800212c:	f001 fd50 	bl	8003bd0 <HAL_DMA2D_ConfigLayer>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10e      	bne.n	8002154 <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hdma2d_discovery, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8002136:	68f9      	ldr	r1, [r7, #12]
 8002138:	68ba      	ldr	r2, [r7, #8]
 800213a:	2301      	movs	r3, #1
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4806      	ldr	r0, [pc, #24]	; (800215c <LL_ConvertLineToARGB8888+0x80>)
 8002142:	f001 fc31 	bl	80039a8 <HAL_DMA2D_Start>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d103      	bne.n	8002154 <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 800214c:	210a      	movs	r1, #10
 800214e:	4803      	ldr	r0, [pc, #12]	; (800215c <LL_ConvertLineToARGB8888+0x80>)
 8002150:	f001 fc55 	bl	80039fe <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8002154:	bf00      	nop
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	2000032c 	.word	0x2000032c
 8002160:	4002b000 	.word	0x4002b000

08002164 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002168:	4b29      	ldr	r3, [pc, #164]	; (8002210 <BSP_SDRAM_Init+0xac>)
 800216a:	4a2a      	ldr	r2, [pc, #168]	; (8002214 <BSP_SDRAM_Init+0xb0>)
 800216c:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 800216e:	4b2a      	ldr	r3, [pc, #168]	; (8002218 <BSP_SDRAM_Init+0xb4>)
 8002170:	2202      	movs	r2, #2
 8002172:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8002174:	4b28      	ldr	r3, [pc, #160]	; (8002218 <BSP_SDRAM_Init+0xb4>)
 8002176:	2207      	movs	r2, #7
 8002178:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 800217a:	4b27      	ldr	r3, [pc, #156]	; (8002218 <BSP_SDRAM_Init+0xb4>)
 800217c:	2204      	movs	r2, #4
 800217e:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8002180:	4b25      	ldr	r3, [pc, #148]	; (8002218 <BSP_SDRAM_Init+0xb4>)
 8002182:	2207      	movs	r2, #7
 8002184:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8002186:	4b24      	ldr	r3, [pc, #144]	; (8002218 <BSP_SDRAM_Init+0xb4>)
 8002188:	2202      	movs	r2, #2
 800218a:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 800218c:	4b22      	ldr	r3, [pc, #136]	; (8002218 <BSP_SDRAM_Init+0xb4>)
 800218e:	2202      	movs	r2, #2
 8002190:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8002192:	4b21      	ldr	r3, [pc, #132]	; (8002218 <BSP_SDRAM_Init+0xb4>)
 8002194:	2202      	movs	r2, #2
 8002196:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8002198:	4b1d      	ldr	r3, [pc, #116]	; (8002210 <BSP_SDRAM_Init+0xac>)
 800219a:	2200      	movs	r2, #0
 800219c:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800219e:	4b1c      	ldr	r3, [pc, #112]	; (8002210 <BSP_SDRAM_Init+0xac>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80021a4:	4b1a      	ldr	r3, [pc, #104]	; (8002210 <BSP_SDRAM_Init+0xac>)
 80021a6:	2204      	movs	r2, #4
 80021a8:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80021aa:	4b19      	ldr	r3, [pc, #100]	; (8002210 <BSP_SDRAM_Init+0xac>)
 80021ac:	2220      	movs	r2, #32
 80021ae:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80021b0:	4b17      	ldr	r3, [pc, #92]	; (8002210 <BSP_SDRAM_Init+0xac>)
 80021b2:	2240      	movs	r2, #64	; 0x40
 80021b4:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 80021b6:	4b16      	ldr	r3, [pc, #88]	; (8002210 <BSP_SDRAM_Init+0xac>)
 80021b8:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80021bc:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80021be:	4b14      	ldr	r3, [pc, #80]	; (8002210 <BSP_SDRAM_Init+0xac>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80021c4:	4b12      	ldr	r3, [pc, #72]	; (8002210 <BSP_SDRAM_Init+0xac>)
 80021c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021ca:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80021cc:	4b10      	ldr	r3, [pc, #64]	; (8002210 <BSP_SDRAM_Init+0xac>)
 80021ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021d2:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80021d4:	4b0e      	ldr	r3, [pc, #56]	; (8002210 <BSP_SDRAM_Init+0xac>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80021da:	2100      	movs	r1, #0
 80021dc:	480c      	ldr	r0, [pc, #48]	; (8002210 <BSP_SDRAM_Init+0xac>)
 80021de:	f000 f87f 	bl	80022e0 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80021e2:	490d      	ldr	r1, [pc, #52]	; (8002218 <BSP_SDRAM_Init+0xb4>)
 80021e4:	480a      	ldr	r0, [pc, #40]	; (8002210 <BSP_SDRAM_Init+0xac>)
 80021e6:	f006 fbc0 	bl	800896a <HAL_SDRAM_Init>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d003      	beq.n	80021f8 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80021f0:	4b0a      	ldr	r3, [pc, #40]	; (800221c <BSP_SDRAM_Init+0xb8>)
 80021f2:	2201      	movs	r2, #1
 80021f4:	701a      	strb	r2, [r3, #0]
 80021f6:	e002      	b.n	80021fe <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80021f8:	4b08      	ldr	r3, [pc, #32]	; (800221c <BSP_SDRAM_Init+0xb8>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80021fe:	f240 6003 	movw	r0, #1539	; 0x603
 8002202:	f000 f80d 	bl	8002220 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8002206:	4b05      	ldr	r3, [pc, #20]	; (800221c <BSP_SDRAM_Init+0xb8>)
 8002208:	781b      	ldrb	r3, [r3, #0]
}
 800220a:	4618      	mov	r0, r3
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	20000448 	.word	0x20000448
 8002214:	a0000140 	.word	0xa0000140
 8002218:	20000238 	.word	0x20000238
 800221c:	20000038 	.word	0x20000038

08002220 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8002228:	2300      	movs	r3, #0
 800222a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800222c:	4b2a      	ldr	r3, [pc, #168]	; (80022d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800222e:	2201      	movs	r2, #1
 8002230:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002232:	4b29      	ldr	r3, [pc, #164]	; (80022d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002234:	2210      	movs	r2, #16
 8002236:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002238:	4b27      	ldr	r3, [pc, #156]	; (80022d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800223a:	2201      	movs	r2, #1
 800223c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800223e:	4b26      	ldr	r3, [pc, #152]	; (80022d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002240:	2200      	movs	r2, #0
 8002242:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002244:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002248:	4923      	ldr	r1, [pc, #140]	; (80022d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800224a:	4824      	ldr	r0, [pc, #144]	; (80022dc <BSP_SDRAM_Initialization_sequence+0xbc>)
 800224c:	f006 fbc1 	bl	80089d2 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002250:	2001      	movs	r0, #1
 8002252:	f000 fb79 	bl	8002948 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8002256:	4b20      	ldr	r3, [pc, #128]	; (80022d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002258:	2202      	movs	r2, #2
 800225a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800225c:	4b1e      	ldr	r3, [pc, #120]	; (80022d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800225e:	2210      	movs	r2, #16
 8002260:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002262:	4b1d      	ldr	r3, [pc, #116]	; (80022d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002264:	2201      	movs	r2, #1
 8002266:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002268:	4b1b      	ldr	r3, [pc, #108]	; (80022d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800226a:	2200      	movs	r2, #0
 800226c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800226e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002272:	4919      	ldr	r1, [pc, #100]	; (80022d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002274:	4819      	ldr	r0, [pc, #100]	; (80022dc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002276:	f006 fbac 	bl	80089d2 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800227a:	4b17      	ldr	r3, [pc, #92]	; (80022d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800227c:	2203      	movs	r2, #3
 800227e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002280:	4b15      	ldr	r3, [pc, #84]	; (80022d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002282:	2210      	movs	r2, #16
 8002284:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8002286:	4b14      	ldr	r3, [pc, #80]	; (80022d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002288:	2208      	movs	r2, #8
 800228a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800228c:	4b12      	ldr	r3, [pc, #72]	; (80022d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800228e:	2200      	movs	r2, #0
 8002290:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002292:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002296:	4910      	ldr	r1, [pc, #64]	; (80022d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002298:	4810      	ldr	r0, [pc, #64]	; (80022dc <BSP_SDRAM_Initialization_sequence+0xbc>)
 800229a:	f006 fb9a 	bl	80089d2 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800229e:	f44f 730c 	mov.w	r3, #560	; 0x230
 80022a2:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80022a4:	4b0c      	ldr	r3, [pc, #48]	; (80022d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022a6:	2204      	movs	r2, #4
 80022a8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80022aa:	4b0b      	ldr	r3, [pc, #44]	; (80022d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022ac:	2210      	movs	r2, #16
 80022ae:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80022b0:	4b09      	ldr	r3, [pc, #36]	; (80022d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022b2:	2201      	movs	r2, #1
 80022b4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	4a07      	ldr	r2, [pc, #28]	; (80022d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022ba:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80022bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022c0:	4905      	ldr	r1, [pc, #20]	; (80022d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022c2:	4806      	ldr	r0, [pc, #24]	; (80022dc <BSP_SDRAM_Initialization_sequence+0xbc>)
 80022c4:	f006 fb85 	bl	80089d2 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	4804      	ldr	r0, [pc, #16]	; (80022dc <BSP_SDRAM_Initialization_sequence+0xbc>)
 80022cc:	f006 fbac 	bl	8008a28 <HAL_SDRAM_ProgramRefreshRate>
}
 80022d0:	bf00      	nop
 80022d2:	3710      	adds	r7, #16
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	20000254 	.word	0x20000254
 80022dc:	20000448 	.word	0x20000448

080022e0 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params  
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b090      	sub	sp, #64	; 0x40
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80022ea:	4b71      	ldr	r3, [pc, #452]	; (80024b0 <BSP_SDRAM_MspInit+0x1d0>)
 80022ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ee:	4a70      	ldr	r2, [pc, #448]	; (80024b0 <BSP_SDRAM_MspInit+0x1d0>)
 80022f0:	f043 0301 	orr.w	r3, r3, #1
 80022f4:	6393      	str	r3, [r2, #56]	; 0x38
 80022f6:	4b6e      	ldr	r3, [pc, #440]	; (80024b0 <BSP_SDRAM_MspInit+0x1d0>)
 80022f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002300:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8002302:	4b6b      	ldr	r3, [pc, #428]	; (80024b0 <BSP_SDRAM_MspInit+0x1d0>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	4a6a      	ldr	r2, [pc, #424]	; (80024b0 <BSP_SDRAM_MspInit+0x1d0>)
 8002308:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800230c:	6313      	str	r3, [r2, #48]	; 0x30
 800230e:	4b68      	ldr	r3, [pc, #416]	; (80024b0 <BSP_SDRAM_MspInit+0x1d0>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002316:	627b      	str	r3, [r7, #36]	; 0x24
 8002318:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800231a:	4b65      	ldr	r3, [pc, #404]	; (80024b0 <BSP_SDRAM_MspInit+0x1d0>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	4a64      	ldr	r2, [pc, #400]	; (80024b0 <BSP_SDRAM_MspInit+0x1d0>)
 8002320:	f043 0308 	orr.w	r3, r3, #8
 8002324:	6313      	str	r3, [r2, #48]	; 0x30
 8002326:	4b62      	ldr	r3, [pc, #392]	; (80024b0 <BSP_SDRAM_MspInit+0x1d0>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	f003 0308 	and.w	r3, r3, #8
 800232e:	623b      	str	r3, [r7, #32]
 8002330:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002332:	4b5f      	ldr	r3, [pc, #380]	; (80024b0 <BSP_SDRAM_MspInit+0x1d0>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002336:	4a5e      	ldr	r2, [pc, #376]	; (80024b0 <BSP_SDRAM_MspInit+0x1d0>)
 8002338:	f043 0310 	orr.w	r3, r3, #16
 800233c:	6313      	str	r3, [r2, #48]	; 0x30
 800233e:	4b5c      	ldr	r3, [pc, #368]	; (80024b0 <BSP_SDRAM_MspInit+0x1d0>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	f003 0310 	and.w	r3, r3, #16
 8002346:	61fb      	str	r3, [r7, #28]
 8002348:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800234a:	4b59      	ldr	r3, [pc, #356]	; (80024b0 <BSP_SDRAM_MspInit+0x1d0>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	4a58      	ldr	r2, [pc, #352]	; (80024b0 <BSP_SDRAM_MspInit+0x1d0>)
 8002350:	f043 0320 	orr.w	r3, r3, #32
 8002354:	6313      	str	r3, [r2, #48]	; 0x30
 8002356:	4b56      	ldr	r3, [pc, #344]	; (80024b0 <BSP_SDRAM_MspInit+0x1d0>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	f003 0320 	and.w	r3, r3, #32
 800235e:	61bb      	str	r3, [r7, #24]
 8002360:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002362:	4b53      	ldr	r3, [pc, #332]	; (80024b0 <BSP_SDRAM_MspInit+0x1d0>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	4a52      	ldr	r2, [pc, #328]	; (80024b0 <BSP_SDRAM_MspInit+0x1d0>)
 8002368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800236c:	6313      	str	r3, [r2, #48]	; 0x30
 800236e:	4b50      	ldr	r3, [pc, #320]	; (80024b0 <BSP_SDRAM_MspInit+0x1d0>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002376:	617b      	str	r3, [r7, #20]
 8002378:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800237a:	4b4d      	ldr	r3, [pc, #308]	; (80024b0 <BSP_SDRAM_MspInit+0x1d0>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	4a4c      	ldr	r2, [pc, #304]	; (80024b0 <BSP_SDRAM_MspInit+0x1d0>)
 8002380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002384:	6313      	str	r3, [r2, #48]	; 0x30
 8002386:	4b4a      	ldr	r3, [pc, #296]	; (80024b0 <BSP_SDRAM_MspInit+0x1d0>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800238e:	613b      	str	r3, [r7, #16]
 8002390:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002392:	4b47      	ldr	r3, [pc, #284]	; (80024b0 <BSP_SDRAM_MspInit+0x1d0>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	4a46      	ldr	r2, [pc, #280]	; (80024b0 <BSP_SDRAM_MspInit+0x1d0>)
 8002398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800239c:	6313      	str	r3, [r2, #48]	; 0x30
 800239e:	4b44      	ldr	r3, [pc, #272]	; (80024b0 <BSP_SDRAM_MspInit+0x1d0>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80023aa:	2302      	movs	r3, #2
 80023ac:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80023ae:	2301      	movs	r3, #1
 80023b0:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80023b2:	2303      	movs	r3, #3
 80023b4:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80023b6:	230c      	movs	r3, #12
 80023b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 80023ba:	f24c 7303 	movw	r3, #50947	; 0xc703
 80023be:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_14 | GPIO_PIN_15;
 
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80023c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023c4:	4619      	mov	r1, r3
 80023c6:	483b      	ldr	r0, [pc, #236]	; (80024b4 <BSP_SDRAM_MspInit+0x1d4>)
 80023c8:	f002 fdac 	bl	8004f24 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80023cc:	f64f 7383 	movw	r3, #65411	; 0xff83
 80023d0:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
      
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80023d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023d6:	4619      	mov	r1, r3
 80023d8:	4837      	ldr	r0, [pc, #220]	; (80024b8 <BSP_SDRAM_MspInit+0x1d8>)
 80023da:	f002 fda3 	bl	8004f24 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80023de:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80023e2:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
    
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80023e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023e8:	4619      	mov	r1, r3
 80023ea:	4834      	ldr	r0, [pc, #208]	; (80024bc <BSP_SDRAM_MspInit+0x1dc>)
 80023ec:	f002 fd9a 	bl	8004f24 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4|\
 80023f0:	f248 1337 	movw	r3, #33079	; 0x8137
 80023f4:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80023f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023fa:	4619      	mov	r1, r3
 80023fc:	4830      	ldr	r0, [pc, #192]	; (80024c0 <BSP_SDRAM_MspInit+0x1e0>)
 80023fe:	f002 fd91 	bl	8004f24 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8002402:	f64f 732c 	movw	r3, #65324	; 0xff2c
 8002406:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8002408:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800240c:	4619      	mov	r1, r3
 800240e:	482d      	ldr	r0, [pc, #180]	; (80024c4 <BSP_SDRAM_MspInit+0x1e4>)
 8002410:	f002 fd88 	bl	8004f24 <HAL_GPIO_Init>
  
  /* GPIOI configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8002414:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8002418:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
 800241a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800241e:	4619      	mov	r1, r3
 8002420:	4829      	ldr	r0, [pc, #164]	; (80024c8 <BSP_SDRAM_MspInit+0x1e8>)
 8002422:	f002 fd7f 	bl	8004f24 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002426:	4b29      	ldr	r3, [pc, #164]	; (80024cc <BSP_SDRAM_MspInit+0x1ec>)
 8002428:	2200      	movs	r2, #0
 800242a:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800242c:	4b27      	ldr	r3, [pc, #156]	; (80024cc <BSP_SDRAM_MspInit+0x1ec>)
 800242e:	2280      	movs	r2, #128	; 0x80
 8002430:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002432:	4b26      	ldr	r3, [pc, #152]	; (80024cc <BSP_SDRAM_MspInit+0x1ec>)
 8002434:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002438:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800243a:	4b24      	ldr	r3, [pc, #144]	; (80024cc <BSP_SDRAM_MspInit+0x1ec>)
 800243c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002440:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002442:	4b22      	ldr	r3, [pc, #136]	; (80024cc <BSP_SDRAM_MspInit+0x1ec>)
 8002444:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002448:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800244a:	4b20      	ldr	r3, [pc, #128]	; (80024cc <BSP_SDRAM_MspInit+0x1ec>)
 800244c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002450:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8002452:	4b1e      	ldr	r3, [pc, #120]	; (80024cc <BSP_SDRAM_MspInit+0x1ec>)
 8002454:	2200      	movs	r2, #0
 8002456:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002458:	4b1c      	ldr	r3, [pc, #112]	; (80024cc <BSP_SDRAM_MspInit+0x1ec>)
 800245a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800245e:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8002460:	4b1a      	ldr	r3, [pc, #104]	; (80024cc <BSP_SDRAM_MspInit+0x1ec>)
 8002462:	2200      	movs	r2, #0
 8002464:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002466:	4b19      	ldr	r3, [pc, #100]	; (80024cc <BSP_SDRAM_MspInit+0x1ec>)
 8002468:	2203      	movs	r2, #3
 800246a:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800246c:	4b17      	ldr	r3, [pc, #92]	; (80024cc <BSP_SDRAM_MspInit+0x1ec>)
 800246e:	2200      	movs	r2, #0
 8002470:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002472:	4b16      	ldr	r3, [pc, #88]	; (80024cc <BSP_SDRAM_MspInit+0x1ec>)
 8002474:	2200      	movs	r2, #0
 8002476:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8002478:	4b14      	ldr	r3, [pc, #80]	; (80024cc <BSP_SDRAM_MspInit+0x1ec>)
 800247a:	4a15      	ldr	r2, [pc, #84]	; (80024d0 <BSP_SDRAM_MspInit+0x1f0>)
 800247c:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a12      	ldr	r2, [pc, #72]	; (80024cc <BSP_SDRAM_MspInit+0x1ec>)
 8002482:	631a      	str	r2, [r3, #48]	; 0x30
 8002484:	4a11      	ldr	r2, [pc, #68]	; (80024cc <BSP_SDRAM_MspInit+0x1ec>)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800248a:	4810      	ldr	r0, [pc, #64]	; (80024cc <BSP_SDRAM_MspInit+0x1ec>)
 800248c:	f001 f924 	bl	80036d8 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8002490:	480e      	ldr	r0, [pc, #56]	; (80024cc <BSP_SDRAM_MspInit+0x1ec>)
 8002492:	f001 f873 	bl	800357c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002496:	2200      	movs	r2, #0
 8002498:	210f      	movs	r1, #15
 800249a:	2038      	movs	r0, #56	; 0x38
 800249c:	f001 f837 	bl	800350e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80024a0:	2038      	movs	r0, #56	; 0x38
 80024a2:	f001 f850 	bl	8003546 <HAL_NVIC_EnableIRQ>
}
 80024a6:	bf00      	nop
 80024a8:	3740      	adds	r7, #64	; 0x40
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40023800 	.word	0x40023800
 80024b4:	40020c00 	.word	0x40020c00
 80024b8:	40021000 	.word	0x40021000
 80024bc:	40021400 	.word	0x40021400
 80024c0:	40021800 	.word	0x40021800
 80024c4:	40021c00 	.word	0x40021c00
 80024c8:	40022000 	.word	0x40022000
 80024cc:	20000264 	.word	0x20000264
 80024d0:	40026410 	.word	0x40026410

080024d4 <BSP_TS_Init>:
  * @param  ts_SizeX : Maximum X size of the TS area on LCD
  * @param  ts_SizeY : Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4603      	mov	r3, r0
 80024dc:	460a      	mov	r2, r1
 80024de:	80fb      	strh	r3, [r7, #6]
 80024e0:	4613      	mov	r3, r2
 80024e2:	80bb      	strh	r3, [r7, #4]
  uint8_t ts_status = TS_OK;
 80024e4:	2300      	movs	r3, #0
 80024e6:	73fb      	strb	r3, [r7, #15]
  uint8_t ts_id1, ts_id2 = 0;
 80024e8:	2300      	movs	r3, #0
 80024ea:	73bb      	strb	r3, [r7, #14]
  /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
  /* but the prototype of Init() is like that in template and should be respected       */

  /* Initialize the communication channel to sensor (I2C) if necessary */
  /* that is initialization is done only once after a power up         */
  ft6x06_ts_drv.Init(I2C_Address);
 80024ec:	4b25      	ldr	r3, [pc, #148]	; (8002584 <BSP_TS_Init+0xb0>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a25      	ldr	r2, [pc, #148]	; (8002588 <BSP_TS_Init+0xb4>)
 80024f2:	7812      	ldrb	r2, [r2, #0]
 80024f4:	b292      	uxth	r2, r2
 80024f6:	4610      	mov	r0, r2
 80024f8:	4798      	blx	r3

  ts_id1 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 80024fa:	4b22      	ldr	r3, [pc, #136]	; (8002584 <BSP_TS_Init+0xb0>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2054      	movs	r0, #84	; 0x54
 8002500:	4798      	blx	r3
 8002502:	4603      	mov	r3, r0
 8002504:	737b      	strb	r3, [r7, #13]
  if(ts_id1 != FT6206_ID_VALUE)
 8002506:	7b7b      	ldrb	r3, [r7, #13]
 8002508:	2b11      	cmp	r3, #17
 800250a:	d009      	beq.n	8002520 <BSP_TS_Init+0x4c>
  {
    ts_id2 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS_A02);
 800250c:	4b1d      	ldr	r3, [pc, #116]	; (8002584 <BSP_TS_Init+0xb0>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	2070      	movs	r0, #112	; 0x70
 8002512:	4798      	blx	r3
 8002514:	4603      	mov	r3, r0
 8002516:	73bb      	strb	r3, [r7, #14]
    I2C_Address    = TS_I2C_ADDRESS_A02;    
 8002518:	4b1b      	ldr	r3, [pc, #108]	; (8002588 <BSP_TS_Init+0xb4>)
 800251a:	2270      	movs	r2, #112	; 0x70
 800251c:	701a      	strb	r2, [r3, #0]
 800251e:	e002      	b.n	8002526 <BSP_TS_Init+0x52>
  }
  else
  {
    I2C_Address    = TS_I2C_ADDRESS;    
 8002520:	4b19      	ldr	r3, [pc, #100]	; (8002588 <BSP_TS_Init+0xb4>)
 8002522:	2254      	movs	r2, #84	; 0x54
 8002524:	701a      	strb	r2, [r3, #0]
  }
  
  /* Scan FT6xx6 TouchScreen IC controller ID register by I2C Read       */
  /* Verify this is a FT6206 or FT6336G, otherwise this is an error case */
  if((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 8002526:	7b7b      	ldrb	r3, [r7, #13]
 8002528:	2b11      	cmp	r3, #17
 800252a:	d002      	beq.n	8002532 <BSP_TS_Init+0x5e>
 800252c:	7bbb      	ldrb	r3, [r7, #14]
 800252e:	2b11      	cmp	r3, #17
 8002530:	d121      	bne.n	8002576 <BSP_TS_Init+0xa2>
  {
    /* Found FT6206 : Initialize the TS driver structure */
    ts_driver = &ft6x06_ts_drv;
 8002532:	4b16      	ldr	r3, [pc, #88]	; (800258c <BSP_TS_Init+0xb8>)
 8002534:	4a13      	ldr	r2, [pc, #76]	; (8002584 <BSP_TS_Init+0xb0>)
 8002536:	601a      	str	r2, [r3, #0]

    /* Get LCD chosen orientation */
    if(ts_SizeX < ts_SizeY)
 8002538:	88fa      	ldrh	r2, [r7, #6]
 800253a:	88bb      	ldrh	r3, [r7, #4]
 800253c:	429a      	cmp	r2, r3
 800253e:	d203      	bcs.n	8002548 <BSP_TS_Init+0x74>
    {
      ts_orientation = TS_SWAP_NONE;                
 8002540:	4b13      	ldr	r3, [pc, #76]	; (8002590 <BSP_TS_Init+0xbc>)
 8002542:	2201      	movs	r2, #1
 8002544:	701a      	strb	r2, [r3, #0]
 8002546:	e002      	b.n	800254e <BSP_TS_Init+0x7a>
    }
    else
    {
      ts_orientation = TS_SWAP_XY | TS_SWAP_Y;                 
 8002548:	4b11      	ldr	r3, [pc, #68]	; (8002590 <BSP_TS_Init+0xbc>)
 800254a:	220c      	movs	r2, #12
 800254c:	701a      	strb	r2, [r3, #0]
    }

    if(ts_status == TS_OK)
 800254e:	7bfb      	ldrb	r3, [r7, #15]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d112      	bne.n	800257a <BSP_TS_Init+0xa6>
    {
      /* Software reset the TouchScreen */
      ts_driver->Reset(I2C_Address);
 8002554:	4b0d      	ldr	r3, [pc, #52]	; (800258c <BSP_TS_Init+0xb8>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	4a0b      	ldr	r2, [pc, #44]	; (8002588 <BSP_TS_Init+0xb4>)
 800255c:	7812      	ldrb	r2, [r2, #0]
 800255e:	b292      	uxth	r2, r2
 8002560:	4610      	mov	r0, r2
 8002562:	4798      	blx	r3

      /* Calibrate, Configure and Start the TouchScreen driver */
      ts_driver->Start(I2C_Address);
 8002564:	4b09      	ldr	r3, [pc, #36]	; (800258c <BSP_TS_Init+0xb8>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	4a07      	ldr	r2, [pc, #28]	; (8002588 <BSP_TS_Init+0xb4>)
 800256c:	7812      	ldrb	r2, [r2, #0]
 800256e:	b292      	uxth	r2, r2
 8002570:	4610      	mov	r0, r2
 8002572:	4798      	blx	r3
    if(ts_status == TS_OK)
 8002574:	e001      	b.n	800257a <BSP_TS_Init+0xa6>

    } /* of if(ts_status == TS_OK) */
  }
  else
  {
    ts_status = TS_DEVICE_NOT_FOUND;
 8002576:	2303      	movs	r3, #3
 8002578:	73fb      	strb	r3, [r7, #15]
  }

  return (ts_status);
 800257a:	7bfb      	ldrb	r3, [r7, #15]
}
 800257c:	4618      	mov	r0, r3
 800257e:	3710      	adds	r7, #16
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	20000000 	.word	0x20000000
 8002588:	200002c9 	.word	0x200002c9
 800258c:	200002c4 	.word	0x200002c4
 8002590:	200002c8 	.word	0x200002c8

08002594 <BSP_TS_ITConfig>:
/**
  * @brief  Configures and enables the touch screen interrupts.
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_ITConfig(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
  uint8_t ts_status = TS_OK;
 800259a:	2300      	movs	r3, #0
 800259c:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef gpio_init_structure;

  /* Msp Init of GPIO used for TS_INT pin coming from TouchScreen driver IC FT6x06 */
  /* When touchscreen is operated in interrupt mode */
  BSP_TS_INT_MspInit();
 800259e:	f000 f94f 	bl	8002840 <BSP_TS_INT_MspInit>

  /* Configure Interrupt mode for TS_INT pin falling edge : when a new touch is available */
  /* TS_INT pin is active on low level on new touch available */
  gpio_init_structure.Pin = TS_INT_PIN;
 80025a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025a6:	603b      	str	r3, [r7, #0]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80025a8:	2301      	movs	r3, #1
 80025aa:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80025ac:	2302      	movs	r3, #2
 80025ae:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 80025b0:	4b0d      	ldr	r3, [pc, #52]	; (80025e8 <BSP_TS_ITConfig+0x54>)
 80025b2:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 80025b4:	463b      	mov	r3, r7
 80025b6:	4619      	mov	r1, r3
 80025b8:	480c      	ldr	r0, [pc, #48]	; (80025ec <BSP_TS_ITConfig+0x58>)
 80025ba:	f002 fcb3 	bl	8004f24 <HAL_GPIO_Init>

  /* Enable and set the TS_INT EXTI Interrupt to an intermediate priority */
  HAL_NVIC_SetPriority((IRQn_Type)(TS_INT_EXTI_IRQn), 0x0F, 0x00);
 80025be:	2200      	movs	r2, #0
 80025c0:	210f      	movs	r1, #15
 80025c2:	2028      	movs	r0, #40	; 0x28
 80025c4:	f000 ffa3 	bl	800350e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(TS_INT_EXTI_IRQn));
 80025c8:	2028      	movs	r0, #40	; 0x28
 80025ca:	f000 ffbc 	bl	8003546 <HAL_NVIC_EnableIRQ>

  /* Enable the TS in interrupt mode */
  /* In that case the INT output of FT6206 when new touch is available */
  /* is active on low level and directed on EXTI */
  ts_driver->EnableIT(I2C_Address);
 80025ce:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <BSP_TS_ITConfig+0x5c>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	4a07      	ldr	r2, [pc, #28]	; (80025f4 <BSP_TS_ITConfig+0x60>)
 80025d6:	7812      	ldrb	r2, [r2, #0]
 80025d8:	b292      	uxth	r2, r2
 80025da:	4610      	mov	r0, r2
 80025dc:	4798      	blx	r3

  return (ts_status);
 80025de:	7dfb      	ldrb	r3, [r7, #23]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	10210000 	.word	0x10210000
 80025ec:	40022000 	.word	0x40022000
 80025f0:	200002c4 	.word	0x200002c4
 80025f4:	200002c9 	.word	0x200002c9

080025f8 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 80025f8:	b590      	push	{r4, r7, lr}
 80025fa:	b089      	sub	sp, #36	; 0x24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8002600:	2300      	movs	r3, #0
 8002602:	76fb      	strb	r3, [r7, #27]
  uint32_t area = 0;
  uint32_t event = 0;
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = ts_driver->DetectTouch(I2C_Address);
 8002604:	4b89      	ldr	r3, [pc, #548]	; (800282c <BSP_TS_GetState+0x234>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	4a89      	ldr	r2, [pc, #548]	; (8002830 <BSP_TS_GetState+0x238>)
 800260c:	7812      	ldrb	r2, [r2, #0]
 800260e:	b292      	uxth	r2, r2
 8002610:	4610      	mov	r0, r2
 8002612:	4798      	blx	r3
 8002614:	4603      	mov	r3, r0
 8002616:	461a      	mov	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	701a      	strb	r2, [r3, #0]
  if(TS_State->touchDetected)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 80fe 	beq.w	8002822 <BSP_TS_GetState+0x22a>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8002626:	2300      	movs	r3, #0
 8002628:	61fb      	str	r3, [r7, #28]
 800262a:	e0f3      	b.n	8002814 <BSP_TS_GetState+0x21c>
    {
      /* Get each touch coordinates */
      ts_driver->GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 800262c:	4b7f      	ldr	r3, [pc, #508]	; (800282c <BSP_TS_GetState+0x234>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	4a7f      	ldr	r2, [pc, #508]	; (8002830 <BSP_TS_GetState+0x238>)
 8002634:	7812      	ldrb	r2, [r2, #0]
 8002636:	b290      	uxth	r0, r2
 8002638:	f107 0110 	add.w	r1, r7, #16
 800263c:	69fa      	ldr	r2, [r7, #28]
 800263e:	0052      	lsls	r2, r2, #1
 8002640:	188c      	adds	r4, r1, r2
 8002642:	f107 010c 	add.w	r1, r7, #12
 8002646:	69fa      	ldr	r2, [r7, #28]
 8002648:	0052      	lsls	r2, r2, #1
 800264a:	440a      	add	r2, r1
 800264c:	4621      	mov	r1, r4
 800264e:	4798      	blx	r3

      if(ts_orientation & TS_SWAP_XY)
 8002650:	4b78      	ldr	r3, [pc, #480]	; (8002834 <BSP_TS_GetState+0x23c>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	f003 0308 	and.w	r3, r3, #8
 8002658:	2b00      	cmp	r3, #0
 800265a:	d01d      	beq.n	8002698 <BSP_TS_GetState+0xa0>
      {
        tmp = Raw_x[index];
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	f107 0220 	add.w	r2, r7, #32
 8002664:	4413      	add	r3, r2
 8002666:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800266a:	833b      	strh	r3, [r7, #24]
        Raw_x[index] = Raw_y[index]; 
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	f107 0220 	add.w	r2, r7, #32
 8002674:	4413      	add	r3, r2
 8002676:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	f107 0120 	add.w	r1, r7, #32
 8002682:	440b      	add	r3, r1
 8002684:	f823 2c10 	strh.w	r2, [r3, #-16]
        Raw_y[index] = tmp;
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	f107 0220 	add.w	r2, r7, #32
 8002690:	4413      	add	r3, r2
 8002692:	8b3a      	ldrh	r2, [r7, #24]
 8002694:	f823 2c14 	strh.w	r2, [r3, #-20]
      }
      
      if(ts_orientation & TS_SWAP_X)
 8002698:	4b66      	ldr	r3, [pc, #408]	; (8002834 <BSP_TS_GetState+0x23c>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d011      	beq.n	80026c8 <BSP_TS_GetState+0xd0>
      {
        Raw_x[index] = FT_6206_MAX_WIDTH - 1 - Raw_x[index];
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	f107 0220 	add.w	r2, r7, #32
 80026ac:	4413      	add	r3, r2
 80026ae:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 80026b2:	f240 331f 	movw	r3, #799	; 0x31f
 80026b6:	1a9b      	subs	r3, r3, r2
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	f107 0120 	add.w	r1, r7, #32
 80026c2:	440b      	add	r3, r1
 80026c4:	f823 2c10 	strh.w	r2, [r3, #-16]
      }

      if(ts_orientation & TS_SWAP_Y)
 80026c8:	4b5a      	ldr	r3, [pc, #360]	; (8002834 <BSP_TS_GetState+0x23c>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	f003 0304 	and.w	r3, r3, #4
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d011      	beq.n	80026f8 <BSP_TS_GetState+0x100>
      {
        Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	f107 0220 	add.w	r2, r7, #32
 80026dc:	4413      	add	r3, r2
 80026de:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 80026e2:	f240 13df 	movw	r3, #479	; 0x1df
 80026e6:	1a9b      	subs	r3, r3, r2
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	f107 0120 	add.w	r1, r7, #32
 80026f2:	440b      	add	r3, r1
 80026f4:	f823 2c14 	strh.w	r2, [r3, #-20]
      }
            
      xDiff = Raw_x[index] > _x[index]? (Raw_x[index] - _x[index]): (_x[index] - Raw_x[index]);
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	f107 0220 	add.w	r2, r7, #32
 8002700:	4413      	add	r3, r2
 8002702:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8002706:	4619      	mov	r1, r3
 8002708:	4a4b      	ldr	r2, [pc, #300]	; (8002838 <BSP_TS_GetState+0x240>)
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002710:	4299      	cmp	r1, r3
 8002712:	d90e      	bls.n	8002732 <BSP_TS_GetState+0x13a>
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	f107 0220 	add.w	r2, r7, #32
 800271c:	4413      	add	r3, r2
 800271e:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 8002722:	4945      	ldr	r1, [pc, #276]	; (8002838 <BSP_TS_GetState+0x240>)
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800272a:	b29b      	uxth	r3, r3
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	b29b      	uxth	r3, r3
 8002730:	e00d      	b.n	800274e <BSP_TS_GetState+0x156>
 8002732:	4a41      	ldr	r2, [pc, #260]	; (8002838 <BSP_TS_GetState+0x240>)
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800273a:	b29a      	uxth	r2, r3
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	f107 0120 	add.w	r1, r7, #32
 8002744:	440b      	add	r3, r1
 8002746:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	b29b      	uxth	r3, r3
 800274e:	82fb      	strh	r3, [r7, #22]
      yDiff = Raw_y[index] > _y[index]? (Raw_y[index] - _y[index]): (_y[index] - Raw_y[index]);
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	f107 0220 	add.w	r2, r7, #32
 8002758:	4413      	add	r3, r2
 800275a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800275e:	4619      	mov	r1, r3
 8002760:	4a36      	ldr	r2, [pc, #216]	; (800283c <BSP_TS_GetState+0x244>)
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002768:	4299      	cmp	r1, r3
 800276a:	d90e      	bls.n	800278a <BSP_TS_GetState+0x192>
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	f107 0220 	add.w	r2, r7, #32
 8002774:	4413      	add	r3, r2
 8002776:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 800277a:	4930      	ldr	r1, [pc, #192]	; (800283c <BSP_TS_GetState+0x244>)
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002782:	b29b      	uxth	r3, r3
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	b29b      	uxth	r3, r3
 8002788:	e00d      	b.n	80027a6 <BSP_TS_GetState+0x1ae>
 800278a:	4a2c      	ldr	r2, [pc, #176]	; (800283c <BSP_TS_GetState+0x244>)
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002792:	b29a      	uxth	r2, r3
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	f107 0120 	add.w	r1, r7, #32
 800279c:	440b      	add	r3, r1
 800279e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	82bb      	strh	r3, [r7, #20]

      if ((xDiff + yDiff) > 5)
 80027a8:	8afa      	ldrh	r2, [r7, #22]
 80027aa:	8abb      	ldrh	r3, [r7, #20]
 80027ac:	4413      	add	r3, r2
 80027ae:	2b05      	cmp	r3, #5
 80027b0:	dd17      	ble.n	80027e2 <BSP_TS_GetState+0x1ea>
      {
        _x[index] = Raw_x[index];
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	f107 0220 	add.w	r2, r7, #32
 80027ba:	4413      	add	r3, r2
 80027bc:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80027c0:	4619      	mov	r1, r3
 80027c2:	4a1d      	ldr	r2, [pc, #116]	; (8002838 <BSP_TS_GetState+0x240>)
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = Raw_y[index];
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	f107 0220 	add.w	r2, r7, #32
 80027d2:	4413      	add	r3, r2
 80027d4:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80027d8:	4619      	mov	r1, r3
 80027da:	4a18      	ldr	r2, [pc, #96]	; (800283c <BSP_TS_GetState+0x244>)
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }


      TS_State->touchX[index] = _x[index];
 80027e2:	4a15      	ldr	r2, [pc, #84]	; (8002838 <BSP_TS_GetState+0x240>)
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ea:	b299      	uxth	r1, r3
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	4413      	add	r3, r2
 80027f4:	460a      	mov	r2, r1
 80027f6:	805a      	strh	r2, [r3, #2]
      TS_State->touchY[index] = _y[index];
 80027f8:	4a10      	ldr	r2, [pc, #64]	; (800283c <BSP_TS_GetState+0x244>)
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002800:	b299      	uxth	r1, r3
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	4413      	add	r3, r2
 800280a:	460a      	mov	r2, r1
 800280c:	80da      	strh	r2, [r3, #6]
    for(index=0; index < TS_State->touchDetected; index++)
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	3301      	adds	r3, #1
 8002812:	61fb      	str	r3, [r7, #28]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	461a      	mov	r2, r3
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	4293      	cmp	r3, r2
 800281e:	f4ff af05 	bcc.w	800262c <BSP_TS_GetState+0x34>
    ts_status = BSP_TS_Get_GestureId(TS_State);
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8002822:	7efb      	ldrb	r3, [r7, #27]
}
 8002824:	4618      	mov	r0, r3
 8002826:	3724      	adds	r7, #36	; 0x24
 8002828:	46bd      	mov	sp, r7
 800282a:	bd90      	pop	{r4, r7, pc}
 800282c:	200002c4 	.word	0x200002c4
 8002830:	200002c9 	.word	0x200002c9
 8002834:	200002c8 	.word	0x200002c8
 8002838:	200002cc 	.word	0x200002cc
 800283c:	200002d4 	.word	0x200002d4

08002840 <BSP_TS_INT_MspInit>:
/**
  * @brief  Initializes the TS_INT pin MSP.
  * @retval None
  */
__weak void BSP_TS_INT_MspInit(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  TS_INT_GPIO_CLK_ENABLE();
 8002846:	4b0f      	ldr	r3, [pc, #60]	; (8002884 <BSP_TS_INT_MspInit+0x44>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284a:	4a0e      	ldr	r2, [pc, #56]	; (8002884 <BSP_TS_INT_MspInit+0x44>)
 800284c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002850:	6313      	str	r3, [r2, #48]	; 0x30
 8002852:	4b0c      	ldr	r3, [pc, #48]	; (8002884 <BSP_TS_INT_MspInit+0x44>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800285a:	603b      	str	r3, [r7, #0]
 800285c:	683b      	ldr	r3, [r7, #0]

  /* GPIO configuration in input for TouchScreen interrupt signal on TS_INT pin */
  gpio_init_structure.Pin       = TS_INT_PIN;
 800285e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002862:	607b      	str	r3, [r7, #4]

  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8002864:	2300      	movs	r3, #0
 8002866:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002868:	2301      	movs	r3, #1
 800286a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 800286c:	2303      	movs	r3, #3
 800286e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 8002870:	1d3b      	adds	r3, r7, #4
 8002872:	4619      	mov	r1, r3
 8002874:	4804      	ldr	r0, [pc, #16]	; (8002888 <BSP_TS_INT_MspInit+0x48>)
 8002876:	f002 fb55 	bl	8004f24 <HAL_GPIO_Init>
}
 800287a:	bf00      	nop
 800287c:	3718      	adds	r7, #24
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40023800 	.word	0x40023800
 8002888:	40022000 	.word	0x40022000

0800288c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002890:	2003      	movs	r0, #3
 8002892:	f000 fe31 	bl	80034f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002896:	2000      	movs	r0, #0
 8002898:	f000 f806 	bl	80028a8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800289c:	f00c f90c 	bl	800eab8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	bd80      	pop	{r7, pc}
	...

080028a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028b0:	4b12      	ldr	r3, [pc, #72]	; (80028fc <HAL_InitTick+0x54>)
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	4b12      	ldr	r3, [pc, #72]	; (8002900 <HAL_InitTick+0x58>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	4619      	mov	r1, r3
 80028ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028be:	fbb3 f3f1 	udiv	r3, r3, r1
 80028c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c6:	4618      	mov	r0, r3
 80028c8:	f000 fe4b 	bl	8003562 <HAL_SYSTICK_Config>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e00e      	b.n	80028f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2b0f      	cmp	r3, #15
 80028da:	d80a      	bhi.n	80028f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028dc:	2200      	movs	r2, #0
 80028de:	6879      	ldr	r1, [r7, #4]
 80028e0:	f04f 30ff 	mov.w	r0, #4294967295
 80028e4:	f000 fe13 	bl	800350e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028e8:	4a06      	ldr	r2, [pc, #24]	; (8002904 <HAL_InitTick+0x5c>)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
 80028f0:	e000      	b.n	80028f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3708      	adds	r7, #8
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	20000048 	.word	0x20000048
 8002900:	20000040 	.word	0x20000040
 8002904:	2000003c 	.word	0x2000003c

08002908 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800290c:	4b06      	ldr	r3, [pc, #24]	; (8002928 <HAL_IncTick+0x20>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	461a      	mov	r2, r3
 8002912:	4b06      	ldr	r3, [pc, #24]	; (800292c <HAL_IncTick+0x24>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4413      	add	r3, r2
 8002918:	4a04      	ldr	r2, [pc, #16]	; (800292c <HAL_IncTick+0x24>)
 800291a:	6013      	str	r3, [r2, #0]
}
 800291c:	bf00      	nop
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	20000040 	.word	0x20000040
 800292c:	2000047c 	.word	0x2000047c

08002930 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  return uwTick;
 8002934:	4b03      	ldr	r3, [pc, #12]	; (8002944 <HAL_GetTick+0x14>)
 8002936:	681b      	ldr	r3, [r3, #0]
}
 8002938:	4618      	mov	r0, r3
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	2000047c 	.word	0x2000047c

08002948 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002950:	f7ff ffee 	bl	8002930 <HAL_GetTick>
 8002954:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002960:	d005      	beq.n	800296e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002962:	4b09      	ldr	r3, [pc, #36]	; (8002988 <HAL_Delay+0x40>)
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	461a      	mov	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	4413      	add	r3, r2
 800296c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800296e:	bf00      	nop
 8002970:	f7ff ffde 	bl	8002930 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	429a      	cmp	r2, r3
 800297e:	d8f7      	bhi.n	8002970 <HAL_Delay+0x28>
  {
  }
}
 8002980:	bf00      	nop
 8002982:	3710      	adds	r7, #16
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	20000040 	.word	0x20000040

0800298c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002994:	2300      	movs	r3, #0
 8002996:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e031      	b.n	8002a06 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d109      	bne.n	80029be <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f00c f8a8 	bl	800eb00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	f003 0310 	and.w	r3, r3, #16
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d116      	bne.n	80029f8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029ce:	4b10      	ldr	r3, [pc, #64]	; (8002a10 <HAL_ADC_Init+0x84>)
 80029d0:	4013      	ands	r3, r2
 80029d2:	f043 0202 	orr.w	r2, r3, #2
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 fbb8 	bl	8003150 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	f023 0303 	bic.w	r3, r3, #3
 80029ee:	f043 0201 	orr.w	r2, r3, #1
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	641a      	str	r2, [r3, #64]	; 0x40
 80029f6:	e001      	b.n	80029fc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	ffffeefd 	.word	0xffffeefd

08002a14 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d101      	bne.n	8002a2e <HAL_ADC_Start_IT+0x1a>
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	e0a8      	b.n	8002b80 <HAL_ADC_Start_IT+0x16c>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2201      	movs	r2, #1
 8002a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d018      	beq.n	8002a76 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689a      	ldr	r2, [r3, #8]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f042 0201 	orr.w	r2, r2, #1
 8002a52:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002a54:	4b4d      	ldr	r3, [pc, #308]	; (8002b8c <HAL_ADC_Start_IT+0x178>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a4d      	ldr	r2, [pc, #308]	; (8002b90 <HAL_ADC_Start_IT+0x17c>)
 8002a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5e:	0c9a      	lsrs	r2, r3, #18
 8002a60:	4613      	mov	r3, r2
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	4413      	add	r3, r2
 8002a66:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002a68:	e002      	b.n	8002a70 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1f9      	bne.n	8002a6a <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d17c      	bne.n	8002b7e <HAL_ADC_Start_IT+0x16a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a88:	4b42      	ldr	r3, [pc, #264]	; (8002b94 <HAL_ADC_Start_IT+0x180>)
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d007      	beq.n	8002ab2 <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002aaa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002abe:	d106      	bne.n	8002ace <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac4:	f023 0206 	bic.w	r2, r3, #6
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	645a      	str	r2, [r3, #68]	; 0x44
 8002acc:	e002      	b.n	8002ad4 <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002ae4:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	6859      	ldr	r1, [r3, #4]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	4b29      	ldr	r3, [pc, #164]	; (8002b98 <HAL_ADC_Start_IT+0x184>)
 8002af2:	430b      	orrs	r3, r1
 8002af4:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002af6:	4b29      	ldr	r3, [pc, #164]	; (8002b9c <HAL_ADC_Start_IT+0x188>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f003 031f 	and.w	r3, r3, #31
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10f      	bne.n	8002b22 <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d136      	bne.n	8002b7e <HAL_ADC_Start_IT+0x16a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689a      	ldr	r2, [r3, #8]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b1e:	609a      	str	r2, [r3, #8]
 8002b20:	e02d      	b.n	8002b7e <HAL_ADC_Start_IT+0x16a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a1e      	ldr	r2, [pc, #120]	; (8002ba0 <HAL_ADC_Start_IT+0x18c>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d10e      	bne.n	8002b4a <HAL_ADC_Start_IT+0x136>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d107      	bne.n	8002b4a <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b48:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002b4a:	4b14      	ldr	r3, [pc, #80]	; (8002b9c <HAL_ADC_Start_IT+0x188>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f003 0310 	and.w	r3, r3, #16
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d113      	bne.n	8002b7e <HAL_ADC_Start_IT+0x16a>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a12      	ldr	r2, [pc, #72]	; (8002ba4 <HAL_ADC_Start_IT+0x190>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d10e      	bne.n	8002b7e <HAL_ADC_Start_IT+0x16a>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d107      	bne.n	8002b7e <HAL_ADC_Start_IT+0x16a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b7c:	609a      	str	r2, [r3, #8]
      } 
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3714      	adds	r7, #20
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr
 8002b8c:	20000048 	.word	0x20000048
 8002b90:	431bde83 	.word	0x431bde83
 8002b94:	fffff8fe 	.word	0xfffff8fe
 8002b98:	04000020 	.word	0x04000020
 8002b9c:	40012300 	.word	0x40012300
 8002ba0:	40012000 	.word	0x40012000
 8002ba4:	40012200 	.word	0x40012200

08002ba8 <HAL_ADC_Stop_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d101      	bne.n	8002bbe <HAL_ADC_Stop_IT+0x16>
 8002bba:	2302      	movs	r3, #2
 8002bbc:	e027      	b.n	8002c0e <HAL_ADC_Stop_IT+0x66>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	689a      	ldr	r2, [r3, #8]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 0201 	bic.w	r2, r2, #1
 8002bd4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f003 0301 	and.w	r3, r3, #1
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d10f      	bne.n	8002c04 <HAL_ADC_Stop_IT+0x5c>
  {
  	/* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6859      	ldr	r1, [r3, #4]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	4b0b      	ldr	r3, [pc, #44]	; (8002c1c <HAL_ADC_Stop_IT+0x74>)
 8002bf0:	400b      	ands	r3, r1
 8002bf2:	6053      	str	r3, [r2, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bf8:	4b09      	ldr	r3, [pc, #36]	; (8002c20 <HAL_ADC_Stop_IT+0x78>)
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	f043 0201 	orr.w	r2, r3, #1
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	fbffffdf 	.word	0xfbffffdf
 8002c20:	ffffeefe 	.word	0xffffeefe

08002c24 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	2300      	movs	r3, #0
 8002c32:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	bf0c      	ite	eq
 8002c42:	2301      	moveq	r3, #1
 8002c44:	2300      	movne	r3, #0
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f003 0320 	and.w	r3, r3, #32
 8002c54:	2b20      	cmp	r3, #32
 8002c56:	bf0c      	ite	eq
 8002c58:	2301      	moveq	r3, #1
 8002c5a:	2300      	movne	r3, #0
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d049      	beq.n	8002cfa <HAL_ADC_IRQHandler+0xd6>
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d046      	beq.n	8002cfa <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c70:	f003 0310 	and.w	r3, r3, #16
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d105      	bne.n	8002c84 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d12b      	bne.n	8002cea <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d127      	bne.n	8002cea <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d006      	beq.n	8002cb6 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d119      	bne.n	8002cea <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f022 0220 	bic.w	r2, r2, #32
 8002cc4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d105      	bne.n	8002cea <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	f043 0201 	orr.w	r2, r3, #1
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f00a fb04 	bl	800d2f8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f06f 0212 	mvn.w	r2, #18
 8002cf8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0304 	and.w	r3, r3, #4
 8002d04:	2b04      	cmp	r3, #4
 8002d06:	bf0c      	ite	eq
 8002d08:	2301      	moveq	r3, #1
 8002d0a:	2300      	movne	r3, #0
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d1a:	2b80      	cmp	r3, #128	; 0x80
 8002d1c:	bf0c      	ite	eq
 8002d1e:	2301      	moveq	r3, #1
 8002d20:	2300      	movne	r3, #0
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d057      	beq.n	8002ddc <HAL_ADC_IRQHandler+0x1b8>
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d054      	beq.n	8002ddc <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	f003 0310 	and.w	r3, r3, #16
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d105      	bne.n	8002d4a <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d42:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d139      	bne.n	8002dcc <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d006      	beq.n	8002d74 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d12b      	bne.n	8002dcc <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d124      	bne.n	8002dcc <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d11d      	bne.n	8002dcc <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d119      	bne.n	8002dcc <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002da6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dac:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d105      	bne.n	8002dcc <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc4:	f043 0201 	orr.w	r2, r3, #1
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 fab9 	bl	8003344 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f06f 020c 	mvn.w	r2, #12
 8002dda:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	bf0c      	ite	eq
 8002dea:	2301      	moveq	r3, #1
 8002dec:	2300      	movne	r3, #0
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dfc:	2b40      	cmp	r3, #64	; 0x40
 8002dfe:	bf0c      	ite	eq
 8002e00:	2301      	moveq	r3, #1
 8002e02:	2300      	movne	r3, #0
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d017      	beq.n	8002e3e <HAL_ADC_IRQHandler+0x21a>
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d014      	beq.n	8002e3e <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d10d      	bne.n	8002e3e <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 f846 	bl	8002ec0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f06f 0201 	mvn.w	r2, #1
 8002e3c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0320 	and.w	r3, r3, #32
 8002e48:	2b20      	cmp	r3, #32
 8002e4a:	bf0c      	ite	eq
 8002e4c:	2301      	moveq	r3, #1
 8002e4e:	2300      	movne	r3, #0
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e62:	bf0c      	ite	eq
 8002e64:	2301      	moveq	r3, #1
 8002e66:	2300      	movne	r3, #0
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d015      	beq.n	8002e9e <HAL_ADC_IRQHandler+0x27a>
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d012      	beq.n	8002e9e <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7c:	f043 0202 	orr.w	r2, r3, #2
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f06f 0220 	mvn.w	r2, #32
 8002e8c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 f820 	bl	8002ed4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f06f 0220 	mvn.w	r2, #32
 8002e9c:	601a      	str	r2, [r3, #0]
  }
}
 8002e9e:	bf00      	nop
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002ea6:	b480      	push	{r7}
 8002ea8:	b083      	sub	sp, #12
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d101      	bne.n	8002f04 <HAL_ADC_ConfigChannel+0x1c>
 8002f00:	2302      	movs	r3, #2
 8002f02:	e115      	b.n	8003130 <HAL_ADC_ConfigChannel+0x248>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2b09      	cmp	r3, #9
 8002f12:	d935      	bls.n	8002f80 <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68d9      	ldr	r1, [r3, #12]
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	461a      	mov	r2, r3
 8002f22:	4613      	mov	r3, r2
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	4413      	add	r3, r2
 8002f28:	3b1e      	subs	r3, #30
 8002f2a:	2207      	movs	r2, #7
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	43da      	mvns	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	400a      	ands	r2, r1
 8002f38:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a7f      	ldr	r2, [pc, #508]	; (800313c <HAL_ADC_ConfigChannel+0x254>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d10a      	bne.n	8002f5a <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68d9      	ldr	r1, [r3, #12]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	061a      	lsls	r2, r3, #24
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	430a      	orrs	r2, r1
 8002f56:	60da      	str	r2, [r3, #12]
 8002f58:	e035      	b.n	8002fc6 <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68d9      	ldr	r1, [r3, #12]
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	689a      	ldr	r2, [r3, #8]
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	4403      	add	r3, r0
 8002f72:	3b1e      	subs	r3, #30
 8002f74:	409a      	lsls	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	60da      	str	r2, [r3, #12]
 8002f7e:	e022      	b.n	8002fc6 <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6919      	ldr	r1, [r3, #16]
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	4613      	mov	r3, r2
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	4413      	add	r3, r2
 8002f94:	2207      	movs	r2, #7
 8002f96:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9a:	43da      	mvns	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	400a      	ands	r2, r1
 8002fa2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6919      	ldr	r1, [r3, #16]
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	689a      	ldr	r2, [r3, #8]
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	4403      	add	r3, r0
 8002fbc:	409a      	lsls	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2b06      	cmp	r3, #6
 8002fcc:	d824      	bhi.n	8003018 <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685a      	ldr	r2, [r3, #4]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	4413      	add	r3, r2
 8002fde:	3b05      	subs	r3, #5
 8002fe0:	221f      	movs	r2, #31
 8002fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe6:	43da      	mvns	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	400a      	ands	r2, r1
 8002fee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685a      	ldr	r2, [r3, #4]
 8003002:	4613      	mov	r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	4413      	add	r3, r2
 8003008:	3b05      	subs	r3, #5
 800300a:	fa00 f203 	lsl.w	r2, r0, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	430a      	orrs	r2, r1
 8003014:	635a      	str	r2, [r3, #52]	; 0x34
 8003016:	e04c      	b.n	80030b2 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	2b0c      	cmp	r3, #12
 800301e:	d824      	bhi.n	800306a <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685a      	ldr	r2, [r3, #4]
 800302a:	4613      	mov	r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	4413      	add	r3, r2
 8003030:	3b23      	subs	r3, #35	; 0x23
 8003032:	221f      	movs	r2, #31
 8003034:	fa02 f303 	lsl.w	r3, r2, r3
 8003038:	43da      	mvns	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	400a      	ands	r2, r1
 8003040:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	b29b      	uxth	r3, r3
 800304e:	4618      	mov	r0, r3
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685a      	ldr	r2, [r3, #4]
 8003054:	4613      	mov	r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	4413      	add	r3, r2
 800305a:	3b23      	subs	r3, #35	; 0x23
 800305c:	fa00 f203 	lsl.w	r2, r0, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	430a      	orrs	r2, r1
 8003066:	631a      	str	r2, [r3, #48]	; 0x30
 8003068:	e023      	b.n	80030b2 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	4613      	mov	r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	4413      	add	r3, r2
 800307a:	3b41      	subs	r3, #65	; 0x41
 800307c:	221f      	movs	r2, #31
 800307e:	fa02 f303 	lsl.w	r3, r2, r3
 8003082:	43da      	mvns	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	400a      	ands	r2, r1
 800308a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	b29b      	uxth	r3, r3
 8003098:	4618      	mov	r0, r3
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	4613      	mov	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	4413      	add	r3, r2
 80030a4:	3b41      	subs	r3, #65	; 0x41
 80030a6:	fa00 f203 	lsl.w	r2, r0, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a22      	ldr	r2, [pc, #136]	; (8003140 <HAL_ADC_ConfigChannel+0x258>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d109      	bne.n	80030d0 <HAL_ADC_ConfigChannel+0x1e8>
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2b12      	cmp	r3, #18
 80030c2:	d105      	bne.n	80030d0 <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80030c4:	4b1f      	ldr	r3, [pc, #124]	; (8003144 <HAL_ADC_ConfigChannel+0x25c>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	4a1e      	ldr	r2, [pc, #120]	; (8003144 <HAL_ADC_ConfigChannel+0x25c>)
 80030ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80030ce:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a1a      	ldr	r2, [pc, #104]	; (8003140 <HAL_ADC_ConfigChannel+0x258>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d125      	bne.n	8003126 <HAL_ADC_ConfigChannel+0x23e>
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a17      	ldr	r2, [pc, #92]	; (800313c <HAL_ADC_ConfigChannel+0x254>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d003      	beq.n	80030ec <HAL_ADC_ConfigChannel+0x204>
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2b11      	cmp	r3, #17
 80030ea:	d11c      	bne.n	8003126 <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80030ec:	4b15      	ldr	r3, [pc, #84]	; (8003144 <HAL_ADC_ConfigChannel+0x25c>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	4a14      	ldr	r2, [pc, #80]	; (8003144 <HAL_ADC_ConfigChannel+0x25c>)
 80030f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80030f6:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a0f      	ldr	r2, [pc, #60]	; (800313c <HAL_ADC_ConfigChannel+0x254>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d111      	bne.n	8003126 <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003102:	4b11      	ldr	r3, [pc, #68]	; (8003148 <HAL_ADC_ConfigChannel+0x260>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a11      	ldr	r2, [pc, #68]	; (800314c <HAL_ADC_ConfigChannel+0x264>)
 8003108:	fba2 2303 	umull	r2, r3, r2, r3
 800310c:	0c9a      	lsrs	r2, r3, #18
 800310e:	4613      	mov	r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	4413      	add	r3, r2
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003118:	e002      	b.n	8003120 <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	3b01      	subs	r3, #1
 800311e:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1f9      	bne.n	800311a <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3714      	adds	r7, #20
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr
 800313c:	10000012 	.word	0x10000012
 8003140:	40012000 	.word	0x40012000
 8003144:	40012300 	.word	0x40012300
 8003148:	20000048 	.word	0x20000048
 800314c:	431bde83 	.word	0x431bde83

08003150 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003158:	4b78      	ldr	r3, [pc, #480]	; (800333c <ADC_Init+0x1ec>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	4a77      	ldr	r2, [pc, #476]	; (800333c <ADC_Init+0x1ec>)
 800315e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003162:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003164:	4b75      	ldr	r3, [pc, #468]	; (800333c <ADC_Init+0x1ec>)
 8003166:	685a      	ldr	r2, [r3, #4]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	4973      	ldr	r1, [pc, #460]	; (800333c <ADC_Init+0x1ec>)
 800316e:	4313      	orrs	r3, r2
 8003170:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	685a      	ldr	r2, [r3, #4]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003180:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	6859      	ldr	r1, [r3, #4]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	021a      	lsls	r2, r3, #8
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	685a      	ldr	r2, [r3, #4]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80031a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6859      	ldr	r1, [r3, #4]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689a      	ldr	r2, [r3, #8]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	430a      	orrs	r2, r1
 80031b6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	689a      	ldr	r2, [r3, #8]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6899      	ldr	r1, [r3, #8]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68da      	ldr	r2, [r3, #12]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031de:	4a58      	ldr	r2, [pc, #352]	; (8003340 <ADC_Init+0x1f0>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d022      	beq.n	800322a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689a      	ldr	r2, [r3, #8]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	6899      	ldr	r1, [r3, #8]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	430a      	orrs	r2, r1
 8003204:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	689a      	ldr	r2, [r3, #8]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003214:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	6899      	ldr	r1, [r3, #8]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	430a      	orrs	r2, r1
 8003226:	609a      	str	r2, [r3, #8]
 8003228:	e00f      	b.n	800324a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	689a      	ldr	r2, [r3, #8]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003238:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	689a      	ldr	r2, [r3, #8]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003248:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 0202 	bic.w	r2, r2, #2
 8003258:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	6899      	ldr	r1, [r3, #8]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	005a      	lsls	r2, r3, #1
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	430a      	orrs	r2, r1
 800326c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d01b      	beq.n	80032b0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	685a      	ldr	r2, [r3, #4]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003286:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	685a      	ldr	r2, [r3, #4]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003296:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6859      	ldr	r1, [r3, #4]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a2:	3b01      	subs	r3, #1
 80032a4:	035a      	lsls	r2, r3, #13
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	430a      	orrs	r2, r1
 80032ac:	605a      	str	r2, [r3, #4]
 80032ae:	e007      	b.n	80032c0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032be:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80032ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	3b01      	subs	r3, #1
 80032dc:	051a      	lsls	r2, r3, #20
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	689a      	ldr	r2, [r3, #8]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80032f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	6899      	ldr	r1, [r3, #8]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003302:	025a      	lsls	r2, r3, #9
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	430a      	orrs	r2, r1
 800330a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	689a      	ldr	r2, [r3, #8]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800331a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6899      	ldr	r1, [r3, #8]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	029a      	lsls	r2, r3, #10
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	430a      	orrs	r2, r1
 800332e:	609a      	str	r2, [r3, #8]
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr
 800333c:	40012300 	.word	0x40012300
 8003340:	0f000001 	.word	0x0f000001

08003344 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f003 0307 	and.w	r3, r3, #7
 8003366:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003368:	4b0b      	ldr	r3, [pc, #44]	; (8003398 <__NVIC_SetPriorityGrouping+0x40>)
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800336e:	68ba      	ldr	r2, [r7, #8]
 8003370:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003374:	4013      	ands	r3, r2
 8003376:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003380:	4b06      	ldr	r3, [pc, #24]	; (800339c <__NVIC_SetPriorityGrouping+0x44>)
 8003382:	4313      	orrs	r3, r2
 8003384:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003386:	4a04      	ldr	r2, [pc, #16]	; (8003398 <__NVIC_SetPriorityGrouping+0x40>)
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	60d3      	str	r3, [r2, #12]
}
 800338c:	bf00      	nop
 800338e:	3714      	adds	r7, #20
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr
 8003398:	e000ed00 	.word	0xe000ed00
 800339c:	05fa0000 	.word	0x05fa0000

080033a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033a4:	4b04      	ldr	r3, [pc, #16]	; (80033b8 <__NVIC_GetPriorityGrouping+0x18>)
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	0a1b      	lsrs	r3, r3, #8
 80033aa:	f003 0307 	and.w	r3, r3, #7
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr
 80033b8:	e000ed00 	.word	0xe000ed00

080033bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	4603      	mov	r3, r0
 80033c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	db0b      	blt.n	80033e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033ce:	79fb      	ldrb	r3, [r7, #7]
 80033d0:	f003 021f 	and.w	r2, r3, #31
 80033d4:	4907      	ldr	r1, [pc, #28]	; (80033f4 <__NVIC_EnableIRQ+0x38>)
 80033d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033da:	095b      	lsrs	r3, r3, #5
 80033dc:	2001      	movs	r0, #1
 80033de:	fa00 f202 	lsl.w	r2, r0, r2
 80033e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033e6:	bf00      	nop
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	e000e100 	.word	0xe000e100

080033f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	4603      	mov	r3, r0
 8003400:	6039      	str	r1, [r7, #0]
 8003402:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003408:	2b00      	cmp	r3, #0
 800340a:	db0a      	blt.n	8003422 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	b2da      	uxtb	r2, r3
 8003410:	490c      	ldr	r1, [pc, #48]	; (8003444 <__NVIC_SetPriority+0x4c>)
 8003412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003416:	0112      	lsls	r2, r2, #4
 8003418:	b2d2      	uxtb	r2, r2
 800341a:	440b      	add	r3, r1
 800341c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003420:	e00a      	b.n	8003438 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	b2da      	uxtb	r2, r3
 8003426:	4908      	ldr	r1, [pc, #32]	; (8003448 <__NVIC_SetPriority+0x50>)
 8003428:	79fb      	ldrb	r3, [r7, #7]
 800342a:	f003 030f 	and.w	r3, r3, #15
 800342e:	3b04      	subs	r3, #4
 8003430:	0112      	lsls	r2, r2, #4
 8003432:	b2d2      	uxtb	r2, r2
 8003434:	440b      	add	r3, r1
 8003436:	761a      	strb	r2, [r3, #24]
}
 8003438:	bf00      	nop
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr
 8003444:	e000e100 	.word	0xe000e100
 8003448:	e000ed00 	.word	0xe000ed00

0800344c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800344c:	b480      	push	{r7}
 800344e:	b089      	sub	sp, #36	; 0x24
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f003 0307 	and.w	r3, r3, #7
 800345e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	f1c3 0307 	rsb	r3, r3, #7
 8003466:	2b04      	cmp	r3, #4
 8003468:	bf28      	it	cs
 800346a:	2304      	movcs	r3, #4
 800346c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	3304      	adds	r3, #4
 8003472:	2b06      	cmp	r3, #6
 8003474:	d902      	bls.n	800347c <NVIC_EncodePriority+0x30>
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	3b03      	subs	r3, #3
 800347a:	e000      	b.n	800347e <NVIC_EncodePriority+0x32>
 800347c:	2300      	movs	r3, #0
 800347e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003480:	f04f 32ff 	mov.w	r2, #4294967295
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	fa02 f303 	lsl.w	r3, r2, r3
 800348a:	43da      	mvns	r2, r3
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	401a      	ands	r2, r3
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003494:	f04f 31ff 	mov.w	r1, #4294967295
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	fa01 f303 	lsl.w	r3, r1, r3
 800349e:	43d9      	mvns	r1, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034a4:	4313      	orrs	r3, r2
         );
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3724      	adds	r7, #36	; 0x24
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
	...

080034b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	3b01      	subs	r3, #1
 80034c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034c4:	d301      	bcc.n	80034ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034c6:	2301      	movs	r3, #1
 80034c8:	e00f      	b.n	80034ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034ca:	4a0a      	ldr	r2, [pc, #40]	; (80034f4 <SysTick_Config+0x40>)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	3b01      	subs	r3, #1
 80034d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034d2:	210f      	movs	r1, #15
 80034d4:	f04f 30ff 	mov.w	r0, #4294967295
 80034d8:	f7ff ff8e 	bl	80033f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034dc:	4b05      	ldr	r3, [pc, #20]	; (80034f4 <SysTick_Config+0x40>)
 80034de:	2200      	movs	r2, #0
 80034e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034e2:	4b04      	ldr	r3, [pc, #16]	; (80034f4 <SysTick_Config+0x40>)
 80034e4:	2207      	movs	r2, #7
 80034e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	e000e010 	.word	0xe000e010

080034f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f7ff ff29 	bl	8003358 <__NVIC_SetPriorityGrouping>
}
 8003506:	bf00      	nop
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800350e:	b580      	push	{r7, lr}
 8003510:	b086      	sub	sp, #24
 8003512:	af00      	add	r7, sp, #0
 8003514:	4603      	mov	r3, r0
 8003516:	60b9      	str	r1, [r7, #8]
 8003518:	607a      	str	r2, [r7, #4]
 800351a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800351c:	2300      	movs	r3, #0
 800351e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003520:	f7ff ff3e 	bl	80033a0 <__NVIC_GetPriorityGrouping>
 8003524:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	68b9      	ldr	r1, [r7, #8]
 800352a:	6978      	ldr	r0, [r7, #20]
 800352c:	f7ff ff8e 	bl	800344c <NVIC_EncodePriority>
 8003530:	4602      	mov	r2, r0
 8003532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003536:	4611      	mov	r1, r2
 8003538:	4618      	mov	r0, r3
 800353a:	f7ff ff5d 	bl	80033f8 <__NVIC_SetPriority>
}
 800353e:	bf00      	nop
 8003540:	3718      	adds	r7, #24
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b082      	sub	sp, #8
 800354a:	af00      	add	r7, sp, #0
 800354c:	4603      	mov	r3, r0
 800354e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003554:	4618      	mov	r0, r3
 8003556:	f7ff ff31 	bl	80033bc <__NVIC_EnableIRQ>
}
 800355a:	bf00      	nop
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b082      	sub	sp, #8
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f7ff ffa2 	bl	80034b4 <SysTick_Config>
 8003570:	4603      	mov	r3, r0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3708      	adds	r7, #8
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
	...

0800357c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003584:	2300      	movs	r3, #0
 8003586:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003588:	f7ff f9d2 	bl	8002930 <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d101      	bne.n	8003598 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e099      	b.n	80036cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2202      	movs	r2, #2
 80035a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 0201 	bic.w	r2, r2, #1
 80035b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035b8:	e00f      	b.n	80035da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035ba:	f7ff f9b9 	bl	8002930 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	2b05      	cmp	r3, #5
 80035c6:	d908      	bls.n	80035da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2220      	movs	r2, #32
 80035cc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2203      	movs	r2, #3
 80035d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e078      	b.n	80036cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1e8      	bne.n	80035ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	4b38      	ldr	r3, [pc, #224]	; (80036d4 <HAL_DMA_Init+0x158>)
 80035f4:	4013      	ands	r3, r2
 80035f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685a      	ldr	r2, [r3, #4]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003606:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003612:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	699b      	ldr	r3, [r3, #24]
 8003618:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800361e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	4313      	orrs	r3, r2
 800362a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003630:	2b04      	cmp	r3, #4
 8003632:	d107      	bne.n	8003644 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363c:	4313      	orrs	r3, r2
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	4313      	orrs	r3, r2
 8003642:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	697a      	ldr	r2, [r7, #20]
 800364a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	f023 0307 	bic.w	r3, r3, #7
 800365a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	4313      	orrs	r3, r2
 8003664:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366a:	2b04      	cmp	r3, #4
 800366c:	d117      	bne.n	800369e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	4313      	orrs	r3, r2
 8003676:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00e      	beq.n	800369e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 f8bd 	bl	8003800 <DMA_CheckFifoParam>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d008      	beq.n	800369e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2240      	movs	r2, #64	; 0x40
 8003690:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800369a:	2301      	movs	r3, #1
 800369c:	e016      	b.n	80036cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 f874 	bl	8003794 <DMA_CalcBaseAndBitshift>
 80036ac:	4603      	mov	r3, r0
 80036ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b4:	223f      	movs	r2, #63	; 0x3f
 80036b6:	409a      	lsls	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3718      	adds	r7, #24
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	e010803f 	.word	0xe010803f

080036d8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e050      	b.n	800378c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d101      	bne.n	80036fa <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80036f6:	2302      	movs	r3, #2
 80036f8:	e048      	b.n	800378c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 0201 	bic.w	r2, r2, #1
 8003708:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2200      	movs	r2, #0
 8003710:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2200      	movs	r2, #0
 8003718:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2200      	movs	r2, #0
 8003720:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2200      	movs	r2, #0
 8003728:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2200      	movs	r2, #0
 8003730:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2221      	movs	r2, #33	; 0x21
 8003738:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 f82a 	bl	8003794 <DMA_CalcBaseAndBitshift>
 8003740:	4603      	mov	r3, r0
 8003742:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003748:	223f      	movs	r2, #63	; 0x3f
 800374a:	409a      	lsls	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3710      	adds	r7, #16
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003794:	b480      	push	{r7}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	3b10      	subs	r3, #16
 80037a4:	4a13      	ldr	r2, [pc, #76]	; (80037f4 <DMA_CalcBaseAndBitshift+0x60>)
 80037a6:	fba2 2303 	umull	r2, r3, r2, r3
 80037aa:	091b      	lsrs	r3, r3, #4
 80037ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80037ae:	4a12      	ldr	r2, [pc, #72]	; (80037f8 <DMA_CalcBaseAndBitshift+0x64>)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	4413      	add	r3, r2
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	461a      	mov	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2b03      	cmp	r3, #3
 80037c0:	d908      	bls.n	80037d4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	461a      	mov	r2, r3
 80037c8:	4b0c      	ldr	r3, [pc, #48]	; (80037fc <DMA_CalcBaseAndBitshift+0x68>)
 80037ca:	4013      	ands	r3, r2
 80037cc:	1d1a      	adds	r2, r3, #4
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	659a      	str	r2, [r3, #88]	; 0x58
 80037d2:	e006      	b.n	80037e2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	461a      	mov	r2, r3
 80037da:	4b08      	ldr	r3, [pc, #32]	; (80037fc <DMA_CalcBaseAndBitshift+0x68>)
 80037dc:	4013      	ands	r3, r2
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3714      	adds	r7, #20
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	aaaaaaab 	.word	0xaaaaaaab
 80037f8:	08011960 	.word	0x08011960
 80037fc:	fffffc00 	.word	0xfffffc00

08003800 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003800:	b480      	push	{r7}
 8003802:	b085      	sub	sp, #20
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003808:	2300      	movs	r3, #0
 800380a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003810:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d11f      	bne.n	800385a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	2b03      	cmp	r3, #3
 800381e:	d855      	bhi.n	80038cc <DMA_CheckFifoParam+0xcc>
 8003820:	a201      	add	r2, pc, #4	; (adr r2, 8003828 <DMA_CheckFifoParam+0x28>)
 8003822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003826:	bf00      	nop
 8003828:	08003839 	.word	0x08003839
 800382c:	0800384b 	.word	0x0800384b
 8003830:	08003839 	.word	0x08003839
 8003834:	080038cd 	.word	0x080038cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d045      	beq.n	80038d0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003848:	e042      	b.n	80038d0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003852:	d13f      	bne.n	80038d4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003858:	e03c      	b.n	80038d4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003862:	d121      	bne.n	80038a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	2b03      	cmp	r3, #3
 8003868:	d836      	bhi.n	80038d8 <DMA_CheckFifoParam+0xd8>
 800386a:	a201      	add	r2, pc, #4	; (adr r2, 8003870 <DMA_CheckFifoParam+0x70>)
 800386c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003870:	08003881 	.word	0x08003881
 8003874:	08003887 	.word	0x08003887
 8003878:	08003881 	.word	0x08003881
 800387c:	08003899 	.word	0x08003899
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	73fb      	strb	r3, [r7, #15]
      break;
 8003884:	e02f      	b.n	80038e6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d024      	beq.n	80038dc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003896:	e021      	b.n	80038dc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038a0:	d11e      	bne.n	80038e0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80038a6:	e01b      	b.n	80038e0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d902      	bls.n	80038b4 <DMA_CheckFifoParam+0xb4>
 80038ae:	2b03      	cmp	r3, #3
 80038b0:	d003      	beq.n	80038ba <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80038b2:	e018      	b.n	80038e6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	73fb      	strb	r3, [r7, #15]
      break;
 80038b8:	e015      	b.n	80038e6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00e      	beq.n	80038e4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	73fb      	strb	r3, [r7, #15]
      break;
 80038ca:	e00b      	b.n	80038e4 <DMA_CheckFifoParam+0xe4>
      break;
 80038cc:	bf00      	nop
 80038ce:	e00a      	b.n	80038e6 <DMA_CheckFifoParam+0xe6>
      break;
 80038d0:	bf00      	nop
 80038d2:	e008      	b.n	80038e6 <DMA_CheckFifoParam+0xe6>
      break;
 80038d4:	bf00      	nop
 80038d6:	e006      	b.n	80038e6 <DMA_CheckFifoParam+0xe6>
      break;
 80038d8:	bf00      	nop
 80038da:	e004      	b.n	80038e6 <DMA_CheckFifoParam+0xe6>
      break;
 80038dc:	bf00      	nop
 80038de:	e002      	b.n	80038e6 <DMA_CheckFifoParam+0xe6>
      break;   
 80038e0:	bf00      	nop
 80038e2:	e000      	b.n	80038e6 <DMA_CheckFifoParam+0xe6>
      break;
 80038e4:	bf00      	nop
    }
  } 
  
  return status; 
 80038e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3714      	adds	r7, #20
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e049      	b.n	800399a <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d106      	bne.n	8003920 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f00b f916 	bl	800eb4c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2202      	movs	r2, #2
 8003924:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685a      	ldr	r2, [r3, #4]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	430a      	orrs	r2, r1
 800393c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003944:	f023 0107 	bic.w	r1, r3, #7
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689a      	ldr	r2, [r3, #8]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	430a      	orrs	r2, r1
 8003952:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800395a:	4b12      	ldr	r3, [pc, #72]	; (80039a4 <HAL_DMA2D_Init+0xb0>)
 800395c:	4013      	ands	r3, r2
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	68d1      	ldr	r1, [r2, #12]
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	6812      	ldr	r2, [r2, #0]
 8003966:	430b      	orrs	r3, r1
 8003968:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003970:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	051a      	lsls	r2, r3, #20
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	055b      	lsls	r3, r3, #21
 8003980:	431a      	orrs	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	430a      	orrs	r2, r1
 8003988:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3708      	adds	r7, #8
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	ffffc000 	.word	0xffffc000

080039a8 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af02      	add	r7, sp, #8
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
 80039b4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d101      	bne.n	80039c4 <HAL_DMA2D_Start+0x1c>
 80039c0:	2302      	movs	r3, #2
 80039c2:	e018      	b.n	80039f6 <HAL_DMA2D_Start+0x4e>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2202      	movs	r2, #2
 80039d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	9300      	str	r3, [sp, #0]
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	68b9      	ldr	r1, [r7, #8]
 80039de:	68f8      	ldr	r0, [r7, #12]
 80039e0:	f000 f994 	bl	8003d0c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f042 0201 	orr.w	r2, r2, #1
 80039f2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b086      	sub	sp, #24
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
 8003a06:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d056      	beq.n	8003ac8 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8003a1a:	f7fe ff89 	bl	8002930 <HAL_GetTick>
 8003a1e:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003a20:	e04b      	b.n	8003aba <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d023      	beq.n	8003a7c <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f003 0320 	and.w	r3, r3, #32
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d005      	beq.n	8003a4a <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a42:	f043 0202 	orr.w	r2, r3, #2
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f003 0301 	and.w	r3, r3, #1
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d005      	beq.n	8003a60 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a58:	f043 0201 	orr.w	r2, r3, #1
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2221      	movs	r2, #33	; 0x21
 8003a66:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2204      	movs	r2, #4
 8003a6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e0a5      	b.n	8003bc8 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a82:	d01a      	beq.n	8003aba <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8003a84:	f7fe ff54 	bl	8002930 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	683a      	ldr	r2, [r7, #0]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d302      	bcc.n	8003a9a <HAL_DMA2D_PollForTransfer+0x9c>
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d10f      	bne.n	8003aba <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a9e:	f043 0220 	orr.w	r2, r3, #32
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2203      	movs	r2, #3
 8003aaa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e086      	b.n	8003bc8 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f003 0302 	and.w	r3, r3, #2
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d0ac      	beq.n	8003a22 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	69db      	ldr	r3, [r3, #28]
 8003ace:	f003 0320 	and.w	r3, r3, #32
 8003ad2:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ada:	f003 0320 	and.w	r3, r3, #32
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d061      	beq.n	8003bae <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003aea:	f7fe ff21 	bl	8002930 <HAL_GetTick>
 8003aee:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003af0:	e056      	b.n	8003ba0 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d02e      	beq.n	8003b62 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f003 0308 	and.w	r3, r3, #8
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d005      	beq.n	8003b1a <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b12:	f043 0204 	orr.w	r2, r3, #4
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f003 0320 	and.w	r3, r3, #32
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d005      	beq.n	8003b30 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b28:	f043 0202 	orr.w	r2, r3, #2
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d005      	beq.n	8003b46 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b3e:	f043 0201 	orr.w	r2, r3, #1
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2229      	movs	r2, #41	; 0x29
 8003b4c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2204      	movs	r2, #4
 8003b52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e032      	b.n	8003bc8 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b68:	d01a      	beq.n	8003ba0 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8003b6a:	f7fe fee1 	bl	8002930 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	683a      	ldr	r2, [r7, #0]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d302      	bcc.n	8003b80 <HAL_DMA2D_PollForTransfer+0x182>
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d10f      	bne.n	8003ba0 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b84:	f043 0220 	orr.w	r2, r3, #32
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2203      	movs	r2, #3
 8003b90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e013      	b.n	8003bc8 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f003 0310 	and.w	r3, r3, #16
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d0a1      	beq.n	8003af2 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2212      	movs	r2, #18
 8003bb4:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3718      	adds	r7, #24
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b087      	sub	sp, #28
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d101      	bne.n	8003bf0 <HAL_DMA2D_ConfigLayer+0x20>
 8003bec:	2302      	movs	r3, #2
 8003bee:	e084      	b.n	8003cfa <HAL_DMA2D_ConfigLayer+0x12a>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2202      	movs	r2, #2
 8003bfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003c00:	683a      	ldr	r2, [r7, #0]
 8003c02:	4613      	mov	r3, r2
 8003c04:	005b      	lsls	r3, r3, #1
 8003c06:	4413      	add	r3, r2
 8003c08:	00db      	lsls	r3, r3, #3
 8003c0a:	3320      	adds	r3, #32
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	4413      	add	r3, r2
 8003c10:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	685a      	ldr	r2, [r3, #4]
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	041b      	lsls	r3, r3, #16
 8003c1c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8003c24:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8003c30:	4b35      	ldr	r3, [pc, #212]	; (8003d08 <HAL_DMA2D_ConfigLayer+0x138>)
 8003c32:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	2b0a      	cmp	r3, #10
 8003c3a:	d003      	beq.n	8003c44 <HAL_DMA2D_ConfigLayer+0x74>
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	2b09      	cmp	r3, #9
 8003c42:	d107      	bne.n	8003c54 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003c4c:	697a      	ldr	r2, [r7, #20]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	617b      	str	r3, [r7, #20]
 8003c52:	e005      	b.n	8003c60 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	061b      	lsls	r3, r3, #24
 8003c5a:	697a      	ldr	r2, [r7, #20]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d120      	bne.n	8003ca8 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	43db      	mvns	r3, r3
 8003c70:	ea02 0103 	and.w	r1, r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	6812      	ldr	r2, [r2, #0]
 8003c86:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	2b0a      	cmp	r3, #10
 8003c8e:	d003      	beq.n	8003c98 <HAL_DMA2D_ConfigLayer+0xc8>
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	2b09      	cmp	r3, #9
 8003c96:	d127      	bne.n	8003ce8 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	68da      	ldr	r2, [r3, #12]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003ca4:	629a      	str	r2, [r3, #40]	; 0x28
 8003ca6:	e01f      	b.n	8003ce8 <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	69da      	ldr	r2, [r3, #28]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	43db      	mvns	r3, r3
 8003cb2:	ea02 0103 	and.w	r1, r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	6812      	ldr	r2, [r2, #0]
 8003cc8:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	2b0a      	cmp	r3, #10
 8003cd0:	d003      	beq.n	8003cda <HAL_DMA2D_ConfigLayer+0x10a>
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	2b09      	cmp	r3, #9
 8003cd8:	d106      	bne.n	8003ce8 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	68da      	ldr	r2, [r3, #12]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003ce6:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	371c      	adds	r7, #28
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	ff33000f 	.word	0xff33000f

08003d0c <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b08b      	sub	sp, #44	; 0x2c
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
 8003d18:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d20:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	041a      	lsls	r2, r3, #16
 8003d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	430a      	orrs	r2, r1
 8003d32:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d44:	d174      	bne.n	8003e30 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003d4c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003d54:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003d5c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d108      	bne.n	8003d7e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	431a      	orrs	r2, r3
 8003d72:	6a3b      	ldr	r3, [r7, #32]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d7c:	e053      	b.n	8003e26 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d106      	bne.n	8003d94 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003d86:	69ba      	ldr	r2, [r7, #24]
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	627b      	str	r3, [r7, #36]	; 0x24
 8003d92:	e048      	b.n	8003e26 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d111      	bne.n	8003dc0 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	0cdb      	lsrs	r3, r3, #19
 8003da0:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	0a9b      	lsrs	r3, r3, #10
 8003da6:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	08db      	lsrs	r3, r3, #3
 8003dac:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	015a      	lsls	r2, r3, #5
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	02db      	lsls	r3, r3, #11
 8003db6:	4313      	orrs	r3, r2
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	627b      	str	r3, [r7, #36]	; 0x24
 8003dbe:	e032      	b.n	8003e26 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	2b03      	cmp	r3, #3
 8003dc6:	d117      	bne.n	8003df8 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003dc8:	6a3b      	ldr	r3, [r7, #32]
 8003dca:	0fdb      	lsrs	r3, r3, #31
 8003dcc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	0cdb      	lsrs	r3, r3, #19
 8003dd2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	0adb      	lsrs	r3, r3, #11
 8003dd8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	08db      	lsrs	r3, r3, #3
 8003dde:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	015a      	lsls	r2, r3, #5
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	029b      	lsls	r3, r3, #10
 8003de8:	431a      	orrs	r2, r3
 8003dea:	6a3b      	ldr	r3, [r7, #32]
 8003dec:	03db      	lsls	r3, r3, #15
 8003dee:	4313      	orrs	r3, r2
 8003df0:	697a      	ldr	r2, [r7, #20]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	627b      	str	r3, [r7, #36]	; 0x24
 8003df6:	e016      	b.n	8003e26 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003df8:	6a3b      	ldr	r3, [r7, #32]
 8003dfa:	0f1b      	lsrs	r3, r3, #28
 8003dfc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	0d1b      	lsrs	r3, r3, #20
 8003e02:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	0b1b      	lsrs	r3, r3, #12
 8003e08:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	091b      	lsrs	r3, r3, #4
 8003e0e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	011a      	lsls	r2, r3, #4
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	021b      	lsls	r3, r3, #8
 8003e18:	431a      	orrs	r2, r3
 8003e1a:	6a3b      	ldr	r3, [r7, #32]
 8003e1c:	031b      	lsls	r3, r3, #12
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	697a      	ldr	r2, [r7, #20]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e2c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003e2e:	e003      	b.n	8003e38 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68ba      	ldr	r2, [r7, #8]
 8003e36:	60da      	str	r2, [r3, #12]
}
 8003e38:	bf00      	nop
 8003e3a:	372c      	adds	r7, #44	; 0x2c
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
 8003e50:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	019a      	lsls	r2, r3, #6
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	431a      	orrs	r2, r3
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	021b      	lsls	r3, r3, #8
 8003e5e:	431a      	orrs	r2, r3
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	041b      	lsls	r3, r3, #16
 8003e64:	431a      	orrs	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8003e6a:	bf00      	nop
 8003e6c:	3714      	adds	r7, #20
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr

08003e76 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b086      	sub	sp, #24
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	60f8      	str	r0, [r7, #12]
 8003e7e:	60b9      	str	r1, [r7, #8]
 8003e80:	607a      	str	r2, [r7, #4]
 8003e82:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e84:	f7fe fd54 	bl	8002930 <HAL_GetTick>
 8003e88:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003e8a:	e009      	b.n	8003ea0 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 8003e8c:	f7fe fd50 	bl	8002930 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e9a:	d901      	bls.n	8003ea0 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e015      	b.n	8003ecc <DSI_ShortWrite+0x56>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d0ee      	beq.n	8003e8c <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	019a      	lsls	r2, r3, #6
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	431a      	orrs	r2, r3
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	021b      	lsls	r3, r3, #8
 8003eba:	ea42 0103 	orr.w	r1, r2, r3
 8003ebe:	6a3b      	ldr	r3, [r7, #32]
 8003ec0:	041a      	lsls	r2, r3, #16
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8003eca:	2300      	movs	r3, #0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3718      	adds	r7, #24
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b088      	sub	sp, #32
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d101      	bne.n	8003ee8 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e106      	b.n	80040f6 <HAL_DSI_Init+0x222>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	7c5b      	ldrb	r3, [r3, #17]
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d102      	bne.n	8003ef8 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f00a fe4a 	bl	800eb8c <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2203      	movs	r2, #3
 8003efc:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8003efe:	2300      	movs	r3, #0
 8003f00:	613b      	str	r3, [r7, #16]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003f12:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003f1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f22:	613b      	str	r3, [r7, #16]
 8003f24:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f26:	f7fe fd03 	bl	8002930 <HAL_GetTick>
 8003f2a:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003f2c:	e009      	b.n	8003f42 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003f2e:	f7fe fcff 	bl	8002930 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f3c:	d901      	bls.n	8003f42 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e0d9      	b.n	80040f6 <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003f4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d0ed      	beq.n	8003f2e <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	4b68      	ldr	r3, [pc, #416]	; (8004100 <HAL_DSI_Init+0x22c>)
 8003f60:	400b      	ands	r3, r1
 8003f62:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	009a      	lsls	r2, r3, #2
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	02db      	lsls	r3, r3, #11
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	041b      	lsls	r3, r3, #16
 8003f82:	431a      	orrs	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8003f8e:	2300      	movs	r3, #0
 8003f90:	60fb      	str	r3, [r7, #12]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f042 0201 	orr.w	r2, r2, #1
 8003fa2:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	60fb      	str	r3, [r7, #12]
 8003fb4:	68fb      	ldr	r3, [r7, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003fb6:	f7fe fcbb 	bl	8002930 <HAL_GetTick>
 8003fba:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003fbc:	e009      	b.n	8003fd2 <HAL_DSI_Init+0xfe>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003fbe:	f7fe fcb7 	bl	8002930 <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003fcc:	d901      	bls.n	8003fd2 <HAL_DSI_Init+0xfe>
    {
      return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e091      	b.n	80040f6 <HAL_DSI_Init+0x222>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d0ed      	beq.n	8003fbe <HAL_DSI_Init+0xea>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f042 0206 	orr.w	r2, r2, #6
 8003ff2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f022 0203 	bic.w	r2, r2, #3
 8004006:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	431a      	orrs	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f042 0201 	orr.w	r2, r2, #1
 8004020:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 0203 	bic.w	r2, r2, #3
 8004034:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	68da      	ldr	r2, [r3, #12]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	430a      	orrs	r2, r1
 800404a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	689a      	ldr	r2, [r3, #8]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800405c:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	6899      	ldr	r1, [r3, #8]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	689a      	ldr	r2, [r3, #8]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	430a      	orrs	r2, r1
 800406e:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d002      	beq.n	800407e <HAL_DSI_Init+0x1aa>
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	e000      	b.n	8004080 <HAL_DSI_Init+0x1ac>
 800407e:	2301      	movs	r3, #1
 8004080:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	4a1f      	ldr	r2, [pc, #124]	; (8004104 <HAL_DSI_Init+0x230>)
 8004086:	fb02 f203 	mul.w	r2, r2, r3
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f003 0303 	and.w	r3, r3, #3
 8004092:	409a      	lsls	r2, r3
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f246 11a8 	movw	r1, #25000	; 0x61a8
 800409c:	fb01 f303 	mul.w	r3, r1, r3
 80040a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a4:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80040b6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	697a      	ldr	r2, [r7, #20]
 80040c8:	430a      	orrs	r2, r1
 80040ca:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2200      	movs	r2, #0
 80040de:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	619a      	str	r2, [r3, #24]

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2201      	movs	r2, #1
 80040f2:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3720      	adds	r7, #32
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	fffc8603 	.word	0xfffc8603
 8004104:	003d0900 	.word	0x003d0900

08004108 <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b086      	sub	sp, #24
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d101      	bne.n	800411a <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e066      	b.n	80041e8 <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2203      	movs	r2, #3
 800411e:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8004120:	2300      	movs	r3, #0
 8004122:	617b      	str	r3, [r7, #20]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f022 0208 	bic.w	r2, r2, #8
 8004134:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004140:	f003 0308 	and.w	r3, r3, #8
 8004144:	617b      	str	r3, [r7, #20]
 8004146:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 8004148:	2300      	movs	r3, #0
 800414a:	613b      	str	r3, [r7, #16]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	685a      	ldr	r2, [r3, #4]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f022 0201 	bic.w	r2, r2, #1
 800415a:	605a      	str	r2, [r3, #4]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	613b      	str	r3, [r7, #16]
 8004168:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f022 0206 	bic.w	r2, r2, #6
 800417a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 800417e:	2300      	movs	r3, #0
 8004180:	60fb      	str	r3, [r7, #12]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f022 0201 	bic.w	r2, r2, #1
 8004192:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	60fb      	str	r3, [r7, #12]
 80041a4:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 80041a6:	2300      	movs	r3, #0
 80041a8:	60bb      	str	r3, [r7, #8]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80041ba:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80041c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041ca:	60bb      	str	r3, [r7, #8]
 80041cc:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f00a fd20 	bl	800ec14 <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3718      	adds	r7, #24
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @ref DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	7c1b      	ldrb	r3, [r3, #16]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d101      	bne.n	8004206 <HAL_DSI_ConfigErrorMonitor+0x16>
 8004202:	2302      	movs	r3, #2
 8004204:	e0aa      	b.n	800435c <HAL_DSI_ConfigErrorMonitor+0x16c>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2201      	movs	r2, #1
 800420a:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2200      	movs	r2, #0
 8004212:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	2200      	movs	r2, #0
 800421c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	683a      	ldr	r2, [r7, #0]
 8004224:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	f003 0301 	and.w	r3, r3, #1
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00a      	beq.n	8004246 <HAL_DSI_ConfigErrorMonitor+0x56>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004240:	430b      	orrs	r3, r1
 8004242:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	f003 0302 	and.w	r3, r3, #2
 800424c:	2b00      	cmp	r3, #0
 800424e:	d009      	beq.n	8004264 <HAL_DSI_ConfigErrorMonitor+0x74>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8004260:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	f003 0304 	and.w	r3, r3, #4
 800426a:	2b00      	cmp	r3, #0
 800426c:	d009      	beq.n	8004282 <HAL_DSI_ConfigErrorMonitor+0x92>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f042 0201 	orr.w	r2, r2, #1
 800427e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	f003 0308 	and.w	r3, r3, #8
 8004288:	2b00      	cmp	r3, #0
 800428a:	d009      	beq.n	80042a0 <HAL_DSI_ConfigErrorMonitor+0xb0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f042 0202 	orr.w	r2, r2, #2
 800429c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	f003 0310 	and.w	r3, r3, #16
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d009      	beq.n	80042be <HAL_DSI_ConfigErrorMonitor+0xce>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f042 020c 	orr.w	r2, r2, #12
 80042ba:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	f003 0320 	and.w	r3, r3, #32
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d009      	beq.n	80042dc <HAL_DSI_ConfigErrorMonitor+0xec>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f042 0210 	orr.w	r2, r2, #16
 80042d8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d009      	beq.n	80042fa <HAL_DSI_ConfigErrorMonitor+0x10a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f042 0220 	orr.w	r2, r2, #32
 80042f6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004300:	2b00      	cmp	r3, #0
 8004302:	d009      	beq.n	8004318 <HAL_DSI_ConfigErrorMonitor+0x128>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004314:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800431e:	2b00      	cmp	r3, #0
 8004320:	d009      	beq.n	8004336 <HAL_DSI_ConfigErrorMonitor+0x146>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004332:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800433c:	2b00      	cmp	r3, #0
 800433e:	d009      	beq.n	8004354 <HAL_DSI_ConfigErrorMonitor+0x164>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8004350:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800435a:	2300      	movs	r3, #0
}
 800435c:	4618      	mov	r0, r3
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	7c1b      	ldrb	r3, [r3, #16]
 8004376:	2b01      	cmp	r3, #1
 8004378:	d101      	bne.n	800437e <HAL_DSI_SetGenericVCID+0x16>
 800437a:	2302      	movs	r3, #2
 800437c:	e016      	b.n	80043ac <HAL_DSI_SetGenericVCID+0x44>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2201      	movs	r2, #1
 8004382:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f022 0203 	bic.w	r2, r2, #3
 8004392:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	683a      	ldr	r2, [r7, #0]
 80043a0:	430a      	orrs	r2, r1
 80043a2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	7c1b      	ldrb	r3, [r3, #16]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d101      	bne.n	80043ce <HAL_DSI_ConfigVideoMode+0x16>
 80043ca:	2302      	movs	r3, #2
 80043cc:	e1ee      	b.n	80047ac <HAL_DSI_ConfigVideoMode+0x3f4>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2201      	movs	r2, #1
 80043d2:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f022 0201 	bic.w	r2, r2, #1
 80043e2:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f022 0201 	bic.w	r2, r2, #1
 80043f4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f022 0203 	bic.w	r2, r2, #3
 8004406:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	68da      	ldr	r2, [r3, #12]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	430a      	orrs	r2, r1
 8004418:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	4b8b      	ldr	r3, [pc, #556]	; (8004654 <HAL_DSI_ConfigVideoMode+0x29c>)
 8004426:	400b      	ands	r3, r1
 8004428:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	691a      	ldr	r2, [r3, #16]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	430a      	orrs	r2, r1
 800443a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	4b84      	ldr	r3, [pc, #528]	; (8004658 <HAL_DSI_ConfigVideoMode+0x2a0>)
 8004448:	400b      	ands	r3, r1
 800444a:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	695a      	ldr	r2, [r3, #20]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	430a      	orrs	r2, r1
 800445c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	4b7b      	ldr	r3, [pc, #492]	; (8004658 <HAL_DSI_ConfigVideoMode+0x2a0>)
 800446a:	400b      	ands	r3, r1
 800446c:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	699a      	ldr	r2, [r3, #24]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	430a      	orrs	r2, r1
 800447e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68da      	ldr	r2, [r3, #12]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 0203 	bic.w	r2, r2, #3
 800448e:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68d9      	ldr	r1, [r3, #12]
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	430a      	orrs	r2, r1
 80044a0:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	695a      	ldr	r2, [r3, #20]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f022 0207 	bic.w	r2, r2, #7
 80044b0:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	6959      	ldr	r1, [r3, #20]
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	6a1b      	ldr	r3, [r3, #32]
 80044c0:	431a      	orrs	r2, r3
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	69db      	ldr	r3, [r3, #28]
 80044c6:	431a      	orrs	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	430a      	orrs	r2, r1
 80044ce:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	691a      	ldr	r2, [r3, #16]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f022 020f 	bic.w	r2, r2, #15
 80044de:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	6919      	ldr	r1, [r3, #16]
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	685a      	ldr	r2, [r3, #4]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	430a      	orrs	r2, r1
 80044f0:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f022 020e 	bic.w	r2, r2, #14
 8004502:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	005a      	lsls	r2, r3, #1
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	430a      	orrs	r2, r1
 800451a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	2b03      	cmp	r3, #3
 8004524:	d110      	bne.n	8004548 <HAL_DSI_ConfigVideoMode+0x190>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	691a      	ldr	r2, [r3, #16]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004534:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	6919      	ldr	r1, [r3, #16]
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	689a      	ldr	r2, [r3, #8]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	430a      	orrs	r2, r1
 8004546:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	4b42      	ldr	r3, [pc, #264]	; (800465c <HAL_DSI_ConfigVideoMode+0x2a4>)
 8004554:	400b      	ands	r3, r1
 8004556:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	430a      	orrs	r2, r1
 8004568:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	4b39      	ldr	r3, [pc, #228]	; (800465c <HAL_DSI_ConfigVideoMode+0x2a4>)
 8004576:	400b      	ands	r3, r1
 8004578:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	430a      	orrs	r2, r1
 800458a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	4b32      	ldr	r3, [pc, #200]	; (8004660 <HAL_DSI_ConfigVideoMode+0x2a8>)
 8004598:	400b      	ands	r3, r1
 800459a:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	430a      	orrs	r2, r1
 80045ac:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	4b2a      	ldr	r3, [pc, #168]	; (8004664 <HAL_DSI_ConfigVideoMode+0x2ac>)
 80045ba:	400b      	ands	r3, r1
 80045bc:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	430a      	orrs	r2, r1
 80045ce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	4b22      	ldr	r3, [pc, #136]	; (8004664 <HAL_DSI_ConfigVideoMode+0x2ac>)
 80045dc:	400b      	ands	r3, r1
 80045de:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	430a      	orrs	r2, r1
 80045f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	4b19      	ldr	r3, [pc, #100]	; (8004664 <HAL_DSI_ConfigVideoMode+0x2ac>)
 80045fe:	400b      	ands	r3, r1
 8004600:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	430a      	orrs	r2, r1
 8004612:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	4b0d      	ldr	r3, [pc, #52]	; (8004654 <HAL_DSI_ConfigVideoMode+0x29c>)
 8004620:	400b      	ands	r3, r1
 8004622:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	430a      	orrs	r2, r1
 8004634:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004644:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004650:	e00a      	b.n	8004668 <HAL_DSI_ConfigVideoMode+0x2b0>
 8004652:	bf00      	nop
 8004654:	ffffc000 	.word	0xffffc000
 8004658:	ffffe000 	.word	0xffffe000
 800465c:	fffff000 	.word	0xfffff000
 8004660:	ffff8000 	.word	0xffff8000
 8004664:	fffffc00 	.word	0xfffffc00
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	430a      	orrs	r2, r1
 800466e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	699a      	ldr	r2, [r3, #24]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 800467e:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	6999      	ldr	r1, [r3, #24]
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800468a:	041a      	lsls	r2, r3, #16
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	430a      	orrs	r2, r1
 8004692:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	699a      	ldr	r2, [r3, #24]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80046a2:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6999      	ldr	r1, [r3, #24]
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	430a      	orrs	r2, r1
 80046b4:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046c4:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	430a      	orrs	r2, r1
 80046d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046e6:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004708:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	430a      	orrs	r2, r1
 800471a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800472a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	430a      	orrs	r2, r1
 800473c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800474c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	430a      	orrs	r2, r1
 800475e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800476e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	430a      	orrs	r2, r1
 8004780:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004790:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	430a      	orrs	r2, r1
 80047a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	7c1b      	ldrb	r3, [r3, #16]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d101      	bne.n	80047ce <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 80047ca:	2302      	movs	r3, #2
 80047cc:	e0c5      	b.n	800495a <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f042 0201 	orr.w	r2, r2, #1
 80047e2:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f022 0201 	bic.w	r2, r2, #1
 80047f4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f042 0201 	orr.w	r2, r2, #1
 8004808:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68da      	ldr	r2, [r3, #12]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f022 0203 	bic.w	r2, r2, #3
 800481a:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68d9      	ldr	r1, [r3, #12]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	430a      	orrs	r2, r1
 800482c:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	695a      	ldr	r2, [r3, #20]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f022 0207 	bic.w	r2, r2, #7
 800483c:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	6959      	ldr	r1, [r3, #20]
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	69da      	ldr	r2, [r3, #28]
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	431a      	orrs	r2, r3
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	431a      	orrs	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	430a      	orrs	r2, r1
 800485a:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	691a      	ldr	r2, [r3, #16]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f022 020f 	bic.w	r2, r2, #15
 800486a:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	6919      	ldr	r1, [r3, #16]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	685a      	ldr	r2, [r3, #4]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	430a      	orrs	r2, r1
 800487c:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f022 020e 	bic.w	r2, r2, #14
 800488e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	005a      	lsls	r2, r3, #1
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	430a      	orrs	r2, r1
 80048a6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	4b2c      	ldr	r3, [pc, #176]	; (8004968 <HAL_DSI_ConfigAdaptedCommandMode+0x1b0>)
 80048b6:	400b      	ands	r3, r1
 80048b8:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	689a      	ldr	r2, [r3, #8]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	430a      	orrs	r2, r1
 80048ca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80048dc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	68da      	ldr	r2, [r3, #12]
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	431a      	orrs	r2, r3
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f6:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80048fc:	431a      	orrs	r2, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	430a      	orrs	r2, r1
 8004904:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f022 0201 	bic.w	r2, r2, #1
 8004916:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	430a      	orrs	r2, r1
 8004928:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f042 0201 	orr.w	r2, r2, #1
 800493a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f042 0202 	orr.w	r2, r2, #2
 800494e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	370c      	adds	r7, #12
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	ffff0000 	.word	0xffff0000

0800496c <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	7c1b      	ldrb	r3, [r3, #16]
 800497a:	2b01      	cmp	r3, #1
 800497c:	d101      	bne.n	8004982 <HAL_DSI_ConfigCommand+0x16>
 800497e:	2302      	movs	r3, #2
 8004980:	e049      	b.n	8004a16 <HAL_DSI_ConfigCommand+0xaa>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2201      	movs	r2, #1
 8004986:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	4b24      	ldr	r3, [pc, #144]	; (8004a24 <HAL_DSI_ConfigCommand+0xb8>)
 8004994:	400b      	ands	r3, r1
 8004996:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80049a6:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 80049ac:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 80049b2:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 80049b8:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 80049be:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 80049c4:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 80049ca:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 80049d0:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 80049d6:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 80049dc:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 80049e2:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	430a      	orrs	r2, r1
 80049ea:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f022 0202 	bic.w	r2, r2, #2
 80049fa:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	370c      	adds	r7, #12
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop
 8004a24:	fef080ff 	.word	0xfef080ff

08004a28 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @ref DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	7c1b      	ldrb	r3, [r3, #16]
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d101      	bne.n	8004a3e <HAL_DSI_ConfigFlowControl+0x16>
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	e016      	b.n	8004a6c <HAL_DSI_ConfigFlowControl+0x44>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2201      	movs	r2, #1
 8004a42:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f022 021f 	bic.w	r2, r2, #31
 8004a52:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	683a      	ldr	r2, [r7, #0]
 8004a60:	430a      	orrs	r2, r1
 8004a62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	7c1b      	ldrb	r3, [r3, #16]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d101      	bne.n	8004a8e <HAL_DSI_ConfigPhyTimer+0x16>
 8004a8a:	2302      	movs	r3, #2
 8004a8c:	e058      	b.n	8004b40 <HAL_DSI_ConfigPhyTimer+0xc8>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2201      	movs	r2, #1
 8004a92:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	bf38      	it	cc
 8004aa0:	4613      	movcc	r3, r2
 8004aa2:	60fb      	str	r3, [r7, #12]
     This timings are configured by the HS2LP_TIME and LP2HS_TIME in the DSI Host Clock Lane Timer Configuration Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8004ab4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	041a      	lsls	r2, r3, #16
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	430a      	orrs	r2, r1
 8004ace:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8004ae2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	691a      	ldr	r2, [r3, #16]
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	041b      	lsls	r3, r3, #16
 8004af8:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8004b00:	431a      	orrs	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	430a      	orrs	r2, r1
 8004b08:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004b1c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	695b      	ldr	r3, [r3, #20]
 8004b2c:	021a      	lsls	r2, r3, #8
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	430a      	orrs	r2, r1
 8004b34:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3714      	adds	r7, #20
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	7c1b      	ldrb	r3, [r3, #16]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d101      	bne.n	8004b62 <HAL_DSI_ConfigHostTimeouts+0x16>
 8004b5e:	2302      	movs	r3, #2
 8004b60:	e0b4      	b.n	8004ccc <HAL_DSI_ConfigHostTimeouts+0x180>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2201      	movs	r2, #1
 8004b66:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	689a      	ldr	r2, [r3, #8]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004b76:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	6899      	ldr	r1, [r3, #8]
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	021a      	lsls	r2, r3, #8
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	430a      	orrs	r2, r1
 8004b8a:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	b292      	uxth	r2, r2
 8004b98:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	041a      	lsls	r2, r3, #16
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	430a      	orrs	r2, r1
 8004bac:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	4b47      	ldr	r3, [pc, #284]	; (8004cd8 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004bba:	400b      	ands	r3, r1
 8004bbc:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	689a      	ldr	r2, [r3, #8]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	4b3f      	ldr	r3, [pc, #252]	; (8004cd8 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004bdc:	400b      	ands	r3, r1
 8004bde:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	68da      	ldr	r2, [r3, #12]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	4b36      	ldr	r3, [pc, #216]	; (8004cd8 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004c00:	400b      	ands	r3, r1
 8004c02:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	691a      	ldr	r2, [r3, #16]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	430a      	orrs	r2, r1
 8004c18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	4b2b      	ldr	r3, [pc, #172]	; (8004cd8 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004c2a:	400b      	ands	r3, r1
 8004c2c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	695a      	ldr	r2, [r3, #20]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	430a      	orrs	r2, r1
 8004c42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004c56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	699a      	ldr	r2, [r3, #24]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	430a      	orrs	r2, r1
 8004c6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	4b16      	ldr	r3, [pc, #88]	; (8004cd8 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004c7e:	400b      	ands	r3, r1
 8004c80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	69da      	ldr	r2, [r3, #28]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	430a      	orrs	r2, r1
 8004c96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	4b0c      	ldr	r3, [pc, #48]	; (8004cd8 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8004ca8:	400b      	ands	r3, r1
 8004caa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	6a1a      	ldr	r2, [r3, #32]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	430a      	orrs	r2, r1
 8004cc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr
 8004cd8:	ffff0000 	.word	0xffff0000

08004cdc <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	7c1b      	ldrb	r3, [r3, #16]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d101      	bne.n	8004cf0 <HAL_DSI_Start+0x14>
 8004cec:	2302      	movs	r3, #2
 8004cee:	e02b      	b.n	8004d48 <HAL_DSI_Start+0x6c>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	60fb      	str	r3, [r7, #12]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	685a      	ldr	r2, [r3, #4]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f042 0201 	orr.w	r2, r2, #1
 8004d08:	605a      	str	r2, [r3, #4]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f003 0301 	and.w	r3, r3, #1
 8004d14:	60fb      	str	r3, [r7, #12]
 8004d16:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8004d18:	2300      	movs	r3, #0
 8004d1a:	60bb      	str	r3, [r7, #8]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f042 0208 	orr.w	r2, r2, #8
 8004d2c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004d38:	f003 0308 	and.w	r3, r3, #8
 8004d3c:	60bb      	str	r3, [r7, #8]
 8004d3e:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004d46:	2300      	movs	r3, #0
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3714      	adds	r7, #20
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b088      	sub	sp, #32
 8004d58:	af02      	add	r7, sp, #8
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	607a      	str	r2, [r7, #4]
 8004d60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	7c1b      	ldrb	r3, [r3, #16]
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d101      	bne.n	8004d6e <HAL_DSI_ShortWrite+0x1a>
 8004d6a:	2302      	movs	r3, #2
 8004d6c:	e010      	b.n	8004d90 <HAL_DSI_ShortWrite+0x3c>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2201      	movs	r2, #1
 8004d72:	741a      	strb	r2, [r3, #16]

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8004d74:	6a3b      	ldr	r3, [r7, #32]
 8004d76:	9300      	str	r3, [sp, #0]
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	68b9      	ldr	r1, [r7, #8]
 8004d7e:	68f8      	ldr	r0, [r7, #12]
 8004d80:	f7ff f879 	bl	8003e76 <DSI_ShortWrite>
 8004d84:	4603      	mov	r3, r0
 8004d86:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	741a      	strb	r2, [r3, #16]

  return status;
 8004d8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3718      	adds	r7, #24
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b08c      	sub	sp, #48	; 0x30
 8004d9c:	af02      	add	r7, sp, #8
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	607a      	str	r2, [r7, #4]
 8004da4:	603b      	str	r3, [r7, #0]
  uint32_t uicounter, nbBytes, count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8004da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004da8:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	7c1b      	ldrb	r3, [r3, #16]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d101      	bne.n	8004db6 <HAL_DSI_LongWrite+0x1e>
 8004db2:	2302      	movs	r3, #2
 8004db4:	e084      	b.n	8004ec0 <HAL_DSI_LongWrite+0x128>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2201      	movs	r2, #1
 8004dba:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8004dbc:	f7fd fdb8 	bl	8002930 <HAL_GetTick>
 8004dc0:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004dc2:	e00c      	b.n	8004dde <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004dc4:	f7fd fdb4 	bl	8002930 <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004dd2:	d904      	bls.n	8004dde <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e070      	b.n	8004ec0 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004de4:	f003 0301 	and.w	r3, r3, #1
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d0eb      	beq.n	8004dc4 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8004dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dee:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	2b03      	cmp	r3, #3
 8004df4:	bf28      	it	cs
 8004df6:	2303      	movcs	r3, #3
 8004df8:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	623b      	str	r3, [r7, #32]
 8004dfe:	e00f      	b.n	8004e20 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8004e00:	69ba      	ldr	r2, [r7, #24]
 8004e02:	6a3b      	ldr	r3, [r7, #32]
 8004e04:	4413      	add	r3, r2
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	461a      	mov	r2, r3
 8004e0a:	6a3b      	ldr	r3, [r7, #32]
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	00db      	lsls	r3, r3, #3
 8004e10:	fa02 f303 	lsl.w	r3, r2, r3
 8004e14:	69fa      	ldr	r2, [r7, #28]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8004e1a:	6a3b      	ldr	r3, [r7, #32]
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	623b      	str	r3, [r7, #32]
 8004e20:	6a3a      	ldr	r2, [r7, #32]
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d3eb      	bcc.n	8004e00 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	69fa      	ldr	r2, [r7, #28]
 8004e2e:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8004e30:	683a      	ldr	r2, [r7, #0]
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8004e38:	69ba      	ldr	r2, [r7, #24]
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8004e40:	e028      	b.n	8004e94 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8004e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e44:	2b04      	cmp	r3, #4
 8004e46:	bf28      	it	cs
 8004e48:	2304      	movcs	r3, #4
 8004e4a:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8004e50:	2300      	movs	r3, #0
 8004e52:	623b      	str	r3, [r7, #32]
 8004e54:	e00e      	b.n	8004e74 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8004e56:	69ba      	ldr	r2, [r7, #24]
 8004e58:	6a3b      	ldr	r3, [r7, #32]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	461a      	mov	r2, r3
 8004e60:	6a3b      	ldr	r3, [r7, #32]
 8004e62:	00db      	lsls	r3, r3, #3
 8004e64:	fa02 f303 	lsl.w	r3, r2, r3
 8004e68:	69fa      	ldr	r2, [r7, #28]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8004e6e:	6a3b      	ldr	r3, [r7, #32]
 8004e70:	3301      	adds	r3, #1
 8004e72:	623b      	str	r3, [r7, #32]
 8004e74:	6a3a      	ldr	r2, [r7, #32]
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d3ec      	bcc.n	8004e56 <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	69fa      	ldr	r2, [r7, #28]
 8004e82:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8004e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8004e8c:	69ba      	ldr	r2, [r7, #24]
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	4413      	add	r3, r2
 8004e92:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8004e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1d3      	bne.n	8004e42 <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004ea2:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	9300      	str	r3, [sp, #0]
 8004eae:	4613      	mov	r3, r2
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	68b9      	ldr	r1, [r7, #8]
 8004eb4:	f7fe ffc6 	bl	8003e44 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3728      	adds	r7, #40	; 0x28
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	7c1b      	ldrb	r3, [r3, #16]
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d101      	bne.n	8004ede <HAL_DSI_SetLowPowerRXFilter+0x16>
 8004eda:	2302      	movs	r3, #2
 8004edc:	e01b      	b.n	8004f16 <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8004ef4:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	065a      	lsls	r2, r3, #25
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	370c      	adds	r7, #12
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr
	...

08004f24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b089      	sub	sp, #36	; 0x24
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004f32:	2300      	movs	r3, #0
 8004f34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004f36:	2300      	movs	r3, #0
 8004f38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004f3e:	2300      	movs	r3, #0
 8004f40:	61fb      	str	r3, [r7, #28]
 8004f42:	e175      	b.n	8005230 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004f44:	2201      	movs	r2, #1
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	4013      	ands	r3, r2
 8004f56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004f58:	693a      	ldr	r2, [r7, #16]
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	f040 8164 	bne.w	800522a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d003      	beq.n	8004f72 <HAL_GPIO_Init+0x4e>
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	2b12      	cmp	r3, #18
 8004f70:	d123      	bne.n	8004fba <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	08da      	lsrs	r2, r3, #3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	3208      	adds	r2, #8
 8004f7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	f003 0307 	and.w	r3, r3, #7
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	220f      	movs	r2, #15
 8004f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8e:	43db      	mvns	r3, r3
 8004f90:	69ba      	ldr	r2, [r7, #24]
 8004f92:	4013      	ands	r3, r2
 8004f94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	691a      	ldr	r2, [r3, #16]
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	f003 0307 	and.w	r3, r3, #7
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa6:	69ba      	ldr	r2, [r7, #24]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	08da      	lsrs	r2, r3, #3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	3208      	adds	r2, #8
 8004fb4:	69b9      	ldr	r1, [r7, #24]
 8004fb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	005b      	lsls	r3, r3, #1
 8004fc4:	2203      	movs	r2, #3
 8004fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fca:	43db      	mvns	r3, r3
 8004fcc:	69ba      	ldr	r2, [r7, #24]
 8004fce:	4013      	ands	r3, r2
 8004fd0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f003 0203 	and.w	r2, r3, #3
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	005b      	lsls	r3, r3, #1
 8004fde:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe2:	69ba      	ldr	r2, [r7, #24]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	69ba      	ldr	r2, [r7, #24]
 8004fec:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d00b      	beq.n	800500e <HAL_GPIO_Init+0xea>
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d007      	beq.n	800500e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005002:	2b11      	cmp	r3, #17
 8005004:	d003      	beq.n	800500e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	2b12      	cmp	r3, #18
 800500c:	d130      	bne.n	8005070 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	005b      	lsls	r3, r3, #1
 8005018:	2203      	movs	r2, #3
 800501a:	fa02 f303 	lsl.w	r3, r2, r3
 800501e:	43db      	mvns	r3, r3
 8005020:	69ba      	ldr	r2, [r7, #24]
 8005022:	4013      	ands	r3, r2
 8005024:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	68da      	ldr	r2, [r3, #12]
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	005b      	lsls	r3, r3, #1
 800502e:	fa02 f303 	lsl.w	r3, r2, r3
 8005032:	69ba      	ldr	r2, [r7, #24]
 8005034:	4313      	orrs	r3, r2
 8005036:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	69ba      	ldr	r2, [r7, #24]
 800503c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005044:	2201      	movs	r2, #1
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	fa02 f303 	lsl.w	r3, r2, r3
 800504c:	43db      	mvns	r3, r3
 800504e:	69ba      	ldr	r2, [r7, #24]
 8005050:	4013      	ands	r3, r2
 8005052:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	091b      	lsrs	r3, r3, #4
 800505a:	f003 0201 	and.w	r2, r3, #1
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	fa02 f303 	lsl.w	r3, r2, r3
 8005064:	69ba      	ldr	r2, [r7, #24]
 8005066:	4313      	orrs	r3, r2
 8005068:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	69ba      	ldr	r2, [r7, #24]
 800506e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	005b      	lsls	r3, r3, #1
 800507a:	2203      	movs	r2, #3
 800507c:	fa02 f303 	lsl.w	r3, r2, r3
 8005080:	43db      	mvns	r3, r3
 8005082:	69ba      	ldr	r2, [r7, #24]
 8005084:	4013      	ands	r3, r2
 8005086:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	689a      	ldr	r2, [r3, #8]
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	005b      	lsls	r3, r3, #1
 8005090:	fa02 f303 	lsl.w	r3, r2, r3
 8005094:	69ba      	ldr	r2, [r7, #24]
 8005096:	4313      	orrs	r3, r2
 8005098:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	69ba      	ldr	r2, [r7, #24]
 800509e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f000 80be 	beq.w	800522a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050ae:	4b65      	ldr	r3, [pc, #404]	; (8005244 <HAL_GPIO_Init+0x320>)
 80050b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050b2:	4a64      	ldr	r2, [pc, #400]	; (8005244 <HAL_GPIO_Init+0x320>)
 80050b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050b8:	6453      	str	r3, [r2, #68]	; 0x44
 80050ba:	4b62      	ldr	r3, [pc, #392]	; (8005244 <HAL_GPIO_Init+0x320>)
 80050bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050c2:	60fb      	str	r3, [r7, #12]
 80050c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80050c6:	4a60      	ldr	r2, [pc, #384]	; (8005248 <HAL_GPIO_Init+0x324>)
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	089b      	lsrs	r3, r3, #2
 80050cc:	3302      	adds	r3, #2
 80050ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	f003 0303 	and.w	r3, r3, #3
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	220f      	movs	r2, #15
 80050de:	fa02 f303 	lsl.w	r3, r2, r3
 80050e2:	43db      	mvns	r3, r3
 80050e4:	69ba      	ldr	r2, [r7, #24]
 80050e6:	4013      	ands	r3, r2
 80050e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a57      	ldr	r2, [pc, #348]	; (800524c <HAL_GPIO_Init+0x328>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d037      	beq.n	8005162 <HAL_GPIO_Init+0x23e>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a56      	ldr	r2, [pc, #344]	; (8005250 <HAL_GPIO_Init+0x32c>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d031      	beq.n	800515e <HAL_GPIO_Init+0x23a>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a55      	ldr	r2, [pc, #340]	; (8005254 <HAL_GPIO_Init+0x330>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d02b      	beq.n	800515a <HAL_GPIO_Init+0x236>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a54      	ldr	r2, [pc, #336]	; (8005258 <HAL_GPIO_Init+0x334>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d025      	beq.n	8005156 <HAL_GPIO_Init+0x232>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a53      	ldr	r2, [pc, #332]	; (800525c <HAL_GPIO_Init+0x338>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d01f      	beq.n	8005152 <HAL_GPIO_Init+0x22e>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a52      	ldr	r2, [pc, #328]	; (8005260 <HAL_GPIO_Init+0x33c>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d019      	beq.n	800514e <HAL_GPIO_Init+0x22a>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a51      	ldr	r2, [pc, #324]	; (8005264 <HAL_GPIO_Init+0x340>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d013      	beq.n	800514a <HAL_GPIO_Init+0x226>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a50      	ldr	r2, [pc, #320]	; (8005268 <HAL_GPIO_Init+0x344>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d00d      	beq.n	8005146 <HAL_GPIO_Init+0x222>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a4f      	ldr	r2, [pc, #316]	; (800526c <HAL_GPIO_Init+0x348>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d007      	beq.n	8005142 <HAL_GPIO_Init+0x21e>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a4e      	ldr	r2, [pc, #312]	; (8005270 <HAL_GPIO_Init+0x34c>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d101      	bne.n	800513e <HAL_GPIO_Init+0x21a>
 800513a:	2309      	movs	r3, #9
 800513c:	e012      	b.n	8005164 <HAL_GPIO_Init+0x240>
 800513e:	230a      	movs	r3, #10
 8005140:	e010      	b.n	8005164 <HAL_GPIO_Init+0x240>
 8005142:	2308      	movs	r3, #8
 8005144:	e00e      	b.n	8005164 <HAL_GPIO_Init+0x240>
 8005146:	2307      	movs	r3, #7
 8005148:	e00c      	b.n	8005164 <HAL_GPIO_Init+0x240>
 800514a:	2306      	movs	r3, #6
 800514c:	e00a      	b.n	8005164 <HAL_GPIO_Init+0x240>
 800514e:	2305      	movs	r3, #5
 8005150:	e008      	b.n	8005164 <HAL_GPIO_Init+0x240>
 8005152:	2304      	movs	r3, #4
 8005154:	e006      	b.n	8005164 <HAL_GPIO_Init+0x240>
 8005156:	2303      	movs	r3, #3
 8005158:	e004      	b.n	8005164 <HAL_GPIO_Init+0x240>
 800515a:	2302      	movs	r3, #2
 800515c:	e002      	b.n	8005164 <HAL_GPIO_Init+0x240>
 800515e:	2301      	movs	r3, #1
 8005160:	e000      	b.n	8005164 <HAL_GPIO_Init+0x240>
 8005162:	2300      	movs	r3, #0
 8005164:	69fa      	ldr	r2, [r7, #28]
 8005166:	f002 0203 	and.w	r2, r2, #3
 800516a:	0092      	lsls	r2, r2, #2
 800516c:	4093      	lsls	r3, r2
 800516e:	69ba      	ldr	r2, [r7, #24]
 8005170:	4313      	orrs	r3, r2
 8005172:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005174:	4934      	ldr	r1, [pc, #208]	; (8005248 <HAL_GPIO_Init+0x324>)
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	089b      	lsrs	r3, r3, #2
 800517a:	3302      	adds	r3, #2
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005182:	4b3c      	ldr	r3, [pc, #240]	; (8005274 <HAL_GPIO_Init+0x350>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	43db      	mvns	r3, r3
 800518c:	69ba      	ldr	r2, [r7, #24]
 800518e:	4013      	ands	r3, r2
 8005190:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d003      	beq.n	80051a6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800519e:	69ba      	ldr	r2, [r7, #24]
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80051a6:	4a33      	ldr	r2, [pc, #204]	; (8005274 <HAL_GPIO_Init+0x350>)
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80051ac:	4b31      	ldr	r3, [pc, #196]	; (8005274 <HAL_GPIO_Init+0x350>)
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	43db      	mvns	r3, r3
 80051b6:	69ba      	ldr	r2, [r7, #24]
 80051b8:	4013      	ands	r3, r2
 80051ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d003      	beq.n	80051d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80051c8:	69ba      	ldr	r2, [r7, #24]
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80051d0:	4a28      	ldr	r2, [pc, #160]	; (8005274 <HAL_GPIO_Init+0x350>)
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80051d6:	4b27      	ldr	r3, [pc, #156]	; (8005274 <HAL_GPIO_Init+0x350>)
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	43db      	mvns	r3, r3
 80051e0:	69ba      	ldr	r2, [r7, #24]
 80051e2:	4013      	ands	r3, r2
 80051e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d003      	beq.n	80051fa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80051f2:	69ba      	ldr	r2, [r7, #24]
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80051fa:	4a1e      	ldr	r2, [pc, #120]	; (8005274 <HAL_GPIO_Init+0x350>)
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005200:	4b1c      	ldr	r3, [pc, #112]	; (8005274 <HAL_GPIO_Init+0x350>)
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	43db      	mvns	r3, r3
 800520a:	69ba      	ldr	r2, [r7, #24]
 800520c:	4013      	ands	r3, r2
 800520e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005218:	2b00      	cmp	r3, #0
 800521a:	d003      	beq.n	8005224 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800521c:	69ba      	ldr	r2, [r7, #24]
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	4313      	orrs	r3, r2
 8005222:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005224:	4a13      	ldr	r2, [pc, #76]	; (8005274 <HAL_GPIO_Init+0x350>)
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	3301      	adds	r3, #1
 800522e:	61fb      	str	r3, [r7, #28]
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	2b0f      	cmp	r3, #15
 8005234:	f67f ae86 	bls.w	8004f44 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005238:	bf00      	nop
 800523a:	3724      	adds	r7, #36	; 0x24
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr
 8005244:	40023800 	.word	0x40023800
 8005248:	40013800 	.word	0x40013800
 800524c:	40020000 	.word	0x40020000
 8005250:	40020400 	.word	0x40020400
 8005254:	40020800 	.word	0x40020800
 8005258:	40020c00 	.word	0x40020c00
 800525c:	40021000 	.word	0x40021000
 8005260:	40021400 	.word	0x40021400
 8005264:	40021800 	.word	0x40021800
 8005268:	40021c00 	.word	0x40021c00
 800526c:	40022000 	.word	0x40022000
 8005270:	40022400 	.word	0x40022400
 8005274:	40013c00 	.word	0x40013c00

08005278 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005278:	b480      	push	{r7}
 800527a:	b087      	sub	sp, #28
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8005282:	2300      	movs	r3, #0
 8005284:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8005286:	2300      	movs	r3, #0
 8005288:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800528a:	2300      	movs	r3, #0
 800528c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800528e:	2300      	movs	r3, #0
 8005290:	617b      	str	r3, [r7, #20]
 8005292:	e0d9      	b.n	8005448 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005294:	2201      	movs	r2, #1
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	fa02 f303 	lsl.w	r3, r2, r3
 800529c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800529e:	683a      	ldr	r2, [r7, #0]
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	4013      	ands	r3, r2
 80052a4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	f040 80c9 	bne.w	8005442 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80052b0:	4a6a      	ldr	r2, [pc, #424]	; (800545c <HAL_GPIO_DeInit+0x1e4>)
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	089b      	lsrs	r3, r3, #2
 80052b6:	3302      	adds	r3, #2
 80052b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052bc:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	f003 0303 	and.w	r3, r3, #3
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	220f      	movs	r2, #15
 80052c8:	fa02 f303 	lsl.w	r3, r2, r3
 80052cc:	68ba      	ldr	r2, [r7, #8]
 80052ce:	4013      	ands	r3, r2
 80052d0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a62      	ldr	r2, [pc, #392]	; (8005460 <HAL_GPIO_DeInit+0x1e8>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d037      	beq.n	800534a <HAL_GPIO_DeInit+0xd2>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a61      	ldr	r2, [pc, #388]	; (8005464 <HAL_GPIO_DeInit+0x1ec>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d031      	beq.n	8005346 <HAL_GPIO_DeInit+0xce>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a60      	ldr	r2, [pc, #384]	; (8005468 <HAL_GPIO_DeInit+0x1f0>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d02b      	beq.n	8005342 <HAL_GPIO_DeInit+0xca>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a5f      	ldr	r2, [pc, #380]	; (800546c <HAL_GPIO_DeInit+0x1f4>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d025      	beq.n	800533e <HAL_GPIO_DeInit+0xc6>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a5e      	ldr	r2, [pc, #376]	; (8005470 <HAL_GPIO_DeInit+0x1f8>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d01f      	beq.n	800533a <HAL_GPIO_DeInit+0xc2>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a5d      	ldr	r2, [pc, #372]	; (8005474 <HAL_GPIO_DeInit+0x1fc>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d019      	beq.n	8005336 <HAL_GPIO_DeInit+0xbe>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a5c      	ldr	r2, [pc, #368]	; (8005478 <HAL_GPIO_DeInit+0x200>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d013      	beq.n	8005332 <HAL_GPIO_DeInit+0xba>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a5b      	ldr	r2, [pc, #364]	; (800547c <HAL_GPIO_DeInit+0x204>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d00d      	beq.n	800532e <HAL_GPIO_DeInit+0xb6>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a5a      	ldr	r2, [pc, #360]	; (8005480 <HAL_GPIO_DeInit+0x208>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d007      	beq.n	800532a <HAL_GPIO_DeInit+0xb2>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a59      	ldr	r2, [pc, #356]	; (8005484 <HAL_GPIO_DeInit+0x20c>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d101      	bne.n	8005326 <HAL_GPIO_DeInit+0xae>
 8005322:	2309      	movs	r3, #9
 8005324:	e012      	b.n	800534c <HAL_GPIO_DeInit+0xd4>
 8005326:	230a      	movs	r3, #10
 8005328:	e010      	b.n	800534c <HAL_GPIO_DeInit+0xd4>
 800532a:	2308      	movs	r3, #8
 800532c:	e00e      	b.n	800534c <HAL_GPIO_DeInit+0xd4>
 800532e:	2307      	movs	r3, #7
 8005330:	e00c      	b.n	800534c <HAL_GPIO_DeInit+0xd4>
 8005332:	2306      	movs	r3, #6
 8005334:	e00a      	b.n	800534c <HAL_GPIO_DeInit+0xd4>
 8005336:	2305      	movs	r3, #5
 8005338:	e008      	b.n	800534c <HAL_GPIO_DeInit+0xd4>
 800533a:	2304      	movs	r3, #4
 800533c:	e006      	b.n	800534c <HAL_GPIO_DeInit+0xd4>
 800533e:	2303      	movs	r3, #3
 8005340:	e004      	b.n	800534c <HAL_GPIO_DeInit+0xd4>
 8005342:	2302      	movs	r3, #2
 8005344:	e002      	b.n	800534c <HAL_GPIO_DeInit+0xd4>
 8005346:	2301      	movs	r3, #1
 8005348:	e000      	b.n	800534c <HAL_GPIO_DeInit+0xd4>
 800534a:	2300      	movs	r3, #0
 800534c:	697a      	ldr	r2, [r7, #20]
 800534e:	f002 0203 	and.w	r2, r2, #3
 8005352:	0092      	lsls	r2, r2, #2
 8005354:	4093      	lsls	r3, r2
 8005356:	68ba      	ldr	r2, [r7, #8]
 8005358:	429a      	cmp	r2, r3
 800535a:	d132      	bne.n	80053c2 <HAL_GPIO_DeInit+0x14a>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	f003 0303 	and.w	r3, r3, #3
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	220f      	movs	r2, #15
 8005366:	fa02 f303 	lsl.w	r3, r2, r3
 800536a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800536c:	4a3b      	ldr	r2, [pc, #236]	; (800545c <HAL_GPIO_DeInit+0x1e4>)
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	089b      	lsrs	r3, r3, #2
 8005372:	3302      	adds	r3, #2
 8005374:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	43da      	mvns	r2, r3
 800537c:	4837      	ldr	r0, [pc, #220]	; (800545c <HAL_GPIO_DeInit+0x1e4>)
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	089b      	lsrs	r3, r3, #2
 8005382:	400a      	ands	r2, r1
 8005384:	3302      	adds	r3, #2
 8005386:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800538a:	4b3f      	ldr	r3, [pc, #252]	; (8005488 <HAL_GPIO_DeInit+0x210>)
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	43db      	mvns	r3, r3
 8005392:	493d      	ldr	r1, [pc, #244]	; (8005488 <HAL_GPIO_DeInit+0x210>)
 8005394:	4013      	ands	r3, r2
 8005396:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005398:	4b3b      	ldr	r3, [pc, #236]	; (8005488 <HAL_GPIO_DeInit+0x210>)
 800539a:	685a      	ldr	r2, [r3, #4]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	43db      	mvns	r3, r3
 80053a0:	4939      	ldr	r1, [pc, #228]	; (8005488 <HAL_GPIO_DeInit+0x210>)
 80053a2:	4013      	ands	r3, r2
 80053a4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80053a6:	4b38      	ldr	r3, [pc, #224]	; (8005488 <HAL_GPIO_DeInit+0x210>)
 80053a8:	689a      	ldr	r2, [r3, #8]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	43db      	mvns	r3, r3
 80053ae:	4936      	ldr	r1, [pc, #216]	; (8005488 <HAL_GPIO_DeInit+0x210>)
 80053b0:	4013      	ands	r3, r2
 80053b2:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80053b4:	4b34      	ldr	r3, [pc, #208]	; (8005488 <HAL_GPIO_DeInit+0x210>)
 80053b6:	68da      	ldr	r2, [r3, #12]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	43db      	mvns	r3, r3
 80053bc:	4932      	ldr	r1, [pc, #200]	; (8005488 <HAL_GPIO_DeInit+0x210>)
 80053be:	4013      	ands	r3, r2
 80053c0:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	005b      	lsls	r3, r3, #1
 80053ca:	2103      	movs	r1, #3
 80053cc:	fa01 f303 	lsl.w	r3, r1, r3
 80053d0:	43db      	mvns	r3, r3
 80053d2:	401a      	ands	r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	08da      	lsrs	r2, r3, #3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	3208      	adds	r2, #8
 80053e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	f003 0307 	and.w	r3, r3, #7
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	220f      	movs	r2, #15
 80053ee:	fa02 f303 	lsl.w	r3, r2, r3
 80053f2:	43db      	mvns	r3, r3
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	08d2      	lsrs	r2, r2, #3
 80053f8:	4019      	ands	r1, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	3208      	adds	r2, #8
 80053fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	689a      	ldr	r2, [r3, #8]
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	005b      	lsls	r3, r3, #1
 800540a:	2103      	movs	r1, #3
 800540c:	fa01 f303 	lsl.w	r3, r1, r3
 8005410:	43db      	mvns	r3, r3
 8005412:	401a      	ands	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685a      	ldr	r2, [r3, #4]
 800541c:	2101      	movs	r1, #1
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	fa01 f303 	lsl.w	r3, r1, r3
 8005424:	43db      	mvns	r3, r3
 8005426:	401a      	ands	r2, r3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	68da      	ldr	r2, [r3, #12]
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	005b      	lsls	r3, r3, #1
 8005434:	2103      	movs	r1, #3
 8005436:	fa01 f303 	lsl.w	r3, r1, r3
 800543a:	43db      	mvns	r3, r3
 800543c:	401a      	ands	r2, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	60da      	str	r2, [r3, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	3301      	adds	r3, #1
 8005446:	617b      	str	r3, [r7, #20]
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	2b0f      	cmp	r3, #15
 800544c:	f67f af22 	bls.w	8005294 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005450:	bf00      	nop
 8005452:	371c      	adds	r7, #28
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr
 800545c:	40013800 	.word	0x40013800
 8005460:	40020000 	.word	0x40020000
 8005464:	40020400 	.word	0x40020400
 8005468:	40020800 	.word	0x40020800
 800546c:	40020c00 	.word	0x40020c00
 8005470:	40021000 	.word	0x40021000
 8005474:	40021400 	.word	0x40021400
 8005478:	40021800 	.word	0x40021800
 800547c:	40021c00 	.word	0x40021c00
 8005480:	40022000 	.word	0x40022000
 8005484:	40022400 	.word	0x40022400
 8005488:	40013c00 	.word	0x40013c00

0800548c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800548c:	b480      	push	{r7}
 800548e:	b085      	sub	sp, #20
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	460b      	mov	r3, r1
 8005496:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	691a      	ldr	r2, [r3, #16]
 800549c:	887b      	ldrh	r3, [r7, #2]
 800549e:	4013      	ands	r3, r2
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d002      	beq.n	80054aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80054a4:	2301      	movs	r3, #1
 80054a6:	73fb      	strb	r3, [r7, #15]
 80054a8:	e001      	b.n	80054ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80054aa:	2300      	movs	r3, #0
 80054ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80054ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3714      	adds	r7, #20
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	460b      	mov	r3, r1
 80054c6:	807b      	strh	r3, [r7, #2]
 80054c8:	4613      	mov	r3, r2
 80054ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80054cc:	787b      	ldrb	r3, [r7, #1]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d003      	beq.n	80054da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80054d2:	887a      	ldrh	r2, [r7, #2]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80054d8:	e003      	b.n	80054e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80054da:	887b      	ldrh	r3, [r7, #2]
 80054dc:	041a      	lsls	r2, r3, #16
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	619a      	str	r2, [r3, #24]
}
 80054e2:	bf00      	nop
 80054e4:	370c      	adds	r7, #12
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
	...

080054f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b082      	sub	sp, #8
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	4603      	mov	r3, r0
 80054f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80054fa:	4b08      	ldr	r3, [pc, #32]	; (800551c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80054fc:	695a      	ldr	r2, [r3, #20]
 80054fe:	88fb      	ldrh	r3, [r7, #6]
 8005500:	4013      	ands	r3, r2
 8005502:	2b00      	cmp	r3, #0
 8005504:	d006      	beq.n	8005514 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005506:	4a05      	ldr	r2, [pc, #20]	; (800551c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005508:	88fb      	ldrh	r3, [r7, #6]
 800550a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800550c:	88fb      	ldrh	r3, [r7, #6]
 800550e:	4618      	mov	r0, r3
 8005510:	f007 ff04 	bl	800d31c <HAL_GPIO_EXTI_Callback>
  }
}
 8005514:	bf00      	nop
 8005516:	3708      	adds	r7, #8
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}
 800551c:	40013c00 	.word	0x40013c00

08005520 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d101      	bne.n	8005532 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e07f      	b.n	8005632 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005538:	b2db      	uxtb	r3, r3
 800553a:	2b00      	cmp	r3, #0
 800553c:	d106      	bne.n	800554c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 f8a9 	bl	800569e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2224      	movs	r2, #36	; 0x24
 8005550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f022 0201 	bic.w	r2, r2, #1
 8005562:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	685a      	ldr	r2, [r3, #4]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005570:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	689a      	ldr	r2, [r3, #8]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005580:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	2b01      	cmp	r3, #1
 8005588:	d107      	bne.n	800559a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	689a      	ldr	r2, [r3, #8]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005596:	609a      	str	r2, [r3, #8]
 8005598:	e006      	b.n	80055a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	689a      	ldr	r2, [r3, #8]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80055a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	d104      	bne.n	80055ba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	6859      	ldr	r1, [r3, #4]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	4b1d      	ldr	r3, [pc, #116]	; (800563c <HAL_I2C_Init+0x11c>)
 80055c6:	430b      	orrs	r3, r1
 80055c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68da      	ldr	r2, [r3, #12]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80055d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	691a      	ldr	r2, [r3, #16]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	ea42 0103 	orr.w	r1, r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	021a      	lsls	r2, r3, #8
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	430a      	orrs	r2, r1
 80055f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	69d9      	ldr	r1, [r3, #28]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a1a      	ldr	r2, [r3, #32]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	430a      	orrs	r2, r1
 8005602:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f042 0201 	orr.w	r2, r2, #1
 8005612:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2220      	movs	r2, #32
 800561e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3708      	adds	r7, #8
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	02008000 	.word	0x02008000

08005640 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b082      	sub	sp, #8
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d101      	bne.n	8005652 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e021      	b.n	8005696 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2224      	movs	r2, #36	; 0x24
 8005656:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f022 0201 	bic.w	r2, r2, #1
 8005668:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 f821 	bl	80056b2 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3708      	adds	r7, #8
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}

0800569e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800569e:	b480      	push	{r7}
 80056a0:	b083      	sub	sp, #12
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80056a6:	bf00      	nop
 80056a8:	370c      	adds	r7, #12
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr

080056b2 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80056b2:	b480      	push	{r7}
 80056b4:	b083      	sub	sp, #12
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80056ba:	bf00      	nop
 80056bc:	370c      	adds	r7, #12
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr
	...

080056c8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b088      	sub	sp, #32
 80056cc:	af02      	add	r7, sp, #8
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	4608      	mov	r0, r1
 80056d2:	4611      	mov	r1, r2
 80056d4:	461a      	mov	r2, r3
 80056d6:	4603      	mov	r3, r0
 80056d8:	817b      	strh	r3, [r7, #10]
 80056da:	460b      	mov	r3, r1
 80056dc:	813b      	strh	r3, [r7, #8]
 80056de:	4613      	mov	r3, r2
 80056e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	2b20      	cmp	r3, #32
 80056ec:	f040 80f9 	bne.w	80058e2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80056f0:	6a3b      	ldr	r3, [r7, #32]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d002      	beq.n	80056fc <HAL_I2C_Mem_Write+0x34>
 80056f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d105      	bne.n	8005708 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005702:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e0ed      	b.n	80058e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800570e:	2b01      	cmp	r3, #1
 8005710:	d101      	bne.n	8005716 <HAL_I2C_Mem_Write+0x4e>
 8005712:	2302      	movs	r3, #2
 8005714:	e0e6      	b.n	80058e4 <HAL_I2C_Mem_Write+0x21c>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2201      	movs	r2, #1
 800571a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800571e:	f7fd f907 	bl	8002930 <HAL_GetTick>
 8005722:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	9300      	str	r3, [sp, #0]
 8005728:	2319      	movs	r3, #25
 800572a:	2201      	movs	r2, #1
 800572c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005730:	68f8      	ldr	r0, [r7, #12]
 8005732:	f000 fad1 	bl	8005cd8 <I2C_WaitOnFlagUntilTimeout>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d001      	beq.n	8005740 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e0d1      	b.n	80058e4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2221      	movs	r2, #33	; 0x21
 8005744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2240      	movs	r2, #64	; 0x40
 800574c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6a3a      	ldr	r2, [r7, #32]
 800575a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005760:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2200      	movs	r2, #0
 8005766:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005768:	88f8      	ldrh	r0, [r7, #6]
 800576a:	893a      	ldrh	r2, [r7, #8]
 800576c:	8979      	ldrh	r1, [r7, #10]
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	9301      	str	r3, [sp, #4]
 8005772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005774:	9300      	str	r3, [sp, #0]
 8005776:	4603      	mov	r3, r0
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	f000 f9e1 	bl	8005b40 <I2C_RequestMemoryWrite>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d005      	beq.n	8005790 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2200      	movs	r2, #0
 8005788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e0a9      	b.n	80058e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005794:	b29b      	uxth	r3, r3
 8005796:	2bff      	cmp	r3, #255	; 0xff
 8005798:	d90e      	bls.n	80057b8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	22ff      	movs	r2, #255	; 0xff
 800579e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057a4:	b2da      	uxtb	r2, r3
 80057a6:	8979      	ldrh	r1, [r7, #10]
 80057a8:	2300      	movs	r3, #0
 80057aa:	9300      	str	r3, [sp, #0]
 80057ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80057b0:	68f8      	ldr	r0, [r7, #12]
 80057b2:	f000 fbb3 	bl	8005f1c <I2C_TransferConfig>
 80057b6:	e00f      	b.n	80057d8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057bc:	b29a      	uxth	r2, r3
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057c6:	b2da      	uxtb	r2, r3
 80057c8:	8979      	ldrh	r1, [r7, #10]
 80057ca:	2300      	movs	r3, #0
 80057cc:	9300      	str	r3, [sp, #0]
 80057ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057d2:	68f8      	ldr	r0, [r7, #12]
 80057d4:	f000 fba2 	bl	8005f1c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057d8:	697a      	ldr	r2, [r7, #20]
 80057da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057dc:	68f8      	ldr	r0, [r7, #12]
 80057de:	f000 fabb 	bl	8005d58 <I2C_WaitOnTXISFlagUntilTimeout>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d001      	beq.n	80057ec <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e07b      	b.n	80058e4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f0:	781a      	ldrb	r2, [r3, #0]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fc:	1c5a      	adds	r2, r3, #1
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005806:	b29b      	uxth	r3, r3
 8005808:	3b01      	subs	r3, #1
 800580a:	b29a      	uxth	r2, r3
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005814:	3b01      	subs	r3, #1
 8005816:	b29a      	uxth	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005820:	b29b      	uxth	r3, r3
 8005822:	2b00      	cmp	r3, #0
 8005824:	d034      	beq.n	8005890 <HAL_I2C_Mem_Write+0x1c8>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800582a:	2b00      	cmp	r3, #0
 800582c:	d130      	bne.n	8005890 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	9300      	str	r3, [sp, #0]
 8005832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005834:	2200      	movs	r2, #0
 8005836:	2180      	movs	r1, #128	; 0x80
 8005838:	68f8      	ldr	r0, [r7, #12]
 800583a:	f000 fa4d 	bl	8005cd8 <I2C_WaitOnFlagUntilTimeout>
 800583e:	4603      	mov	r3, r0
 8005840:	2b00      	cmp	r3, #0
 8005842:	d001      	beq.n	8005848 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e04d      	b.n	80058e4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800584c:	b29b      	uxth	r3, r3
 800584e:	2bff      	cmp	r3, #255	; 0xff
 8005850:	d90e      	bls.n	8005870 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	22ff      	movs	r2, #255	; 0xff
 8005856:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800585c:	b2da      	uxtb	r2, r3
 800585e:	8979      	ldrh	r1, [r7, #10]
 8005860:	2300      	movs	r3, #0
 8005862:	9300      	str	r3, [sp, #0]
 8005864:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	f000 fb57 	bl	8005f1c <I2C_TransferConfig>
 800586e:	e00f      	b.n	8005890 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005874:	b29a      	uxth	r2, r3
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800587e:	b2da      	uxtb	r2, r3
 8005880:	8979      	ldrh	r1, [r7, #10]
 8005882:	2300      	movs	r3, #0
 8005884:	9300      	str	r3, [sp, #0]
 8005886:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800588a:	68f8      	ldr	r0, [r7, #12]
 800588c:	f000 fb46 	bl	8005f1c <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005894:	b29b      	uxth	r3, r3
 8005896:	2b00      	cmp	r3, #0
 8005898:	d19e      	bne.n	80057d8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800589a:	697a      	ldr	r2, [r7, #20]
 800589c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800589e:	68f8      	ldr	r0, [r7, #12]
 80058a0:	f000 fa9a 	bl	8005dd8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d001      	beq.n	80058ae <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e01a      	b.n	80058e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2220      	movs	r2, #32
 80058b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	6859      	ldr	r1, [r3, #4]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	4b0a      	ldr	r3, [pc, #40]	; (80058ec <HAL_I2C_Mem_Write+0x224>)
 80058c2:	400b      	ands	r3, r1
 80058c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2220      	movs	r2, #32
 80058ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80058de:	2300      	movs	r3, #0
 80058e0:	e000      	b.n	80058e4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80058e2:	2302      	movs	r3, #2
  }
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3718      	adds	r7, #24
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	fe00e800 	.word	0xfe00e800

080058f0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b088      	sub	sp, #32
 80058f4:	af02      	add	r7, sp, #8
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	4608      	mov	r0, r1
 80058fa:	4611      	mov	r1, r2
 80058fc:	461a      	mov	r2, r3
 80058fe:	4603      	mov	r3, r0
 8005900:	817b      	strh	r3, [r7, #10]
 8005902:	460b      	mov	r3, r1
 8005904:	813b      	strh	r3, [r7, #8]
 8005906:	4613      	mov	r3, r2
 8005908:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005910:	b2db      	uxtb	r3, r3
 8005912:	2b20      	cmp	r3, #32
 8005914:	f040 80fd 	bne.w	8005b12 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005918:	6a3b      	ldr	r3, [r7, #32]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d002      	beq.n	8005924 <HAL_I2C_Mem_Read+0x34>
 800591e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005920:	2b00      	cmp	r3, #0
 8005922:	d105      	bne.n	8005930 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f44f 7200 	mov.w	r2, #512	; 0x200
 800592a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e0f1      	b.n	8005b14 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005936:	2b01      	cmp	r3, #1
 8005938:	d101      	bne.n	800593e <HAL_I2C_Mem_Read+0x4e>
 800593a:	2302      	movs	r3, #2
 800593c:	e0ea      	b.n	8005b14 <HAL_I2C_Mem_Read+0x224>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2201      	movs	r2, #1
 8005942:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005946:	f7fc fff3 	bl	8002930 <HAL_GetTick>
 800594a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	9300      	str	r3, [sp, #0]
 8005950:	2319      	movs	r3, #25
 8005952:	2201      	movs	r2, #1
 8005954:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005958:	68f8      	ldr	r0, [r7, #12]
 800595a:	f000 f9bd 	bl	8005cd8 <I2C_WaitOnFlagUntilTimeout>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d001      	beq.n	8005968 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e0d5      	b.n	8005b14 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2222      	movs	r2, #34	; 0x22
 800596c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2240      	movs	r2, #64	; 0x40
 8005974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6a3a      	ldr	r2, [r7, #32]
 8005982:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005988:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2200      	movs	r2, #0
 800598e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005990:	88f8      	ldrh	r0, [r7, #6]
 8005992:	893a      	ldrh	r2, [r7, #8]
 8005994:	8979      	ldrh	r1, [r7, #10]
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	9301      	str	r3, [sp, #4]
 800599a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599c:	9300      	str	r3, [sp, #0]
 800599e:	4603      	mov	r3, r0
 80059a0:	68f8      	ldr	r0, [r7, #12]
 80059a2:	f000 f921 	bl	8005be8 <I2C_RequestMemoryRead>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d005      	beq.n	80059b8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e0ad      	b.n	8005b14 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059bc:	b29b      	uxth	r3, r3
 80059be:	2bff      	cmp	r3, #255	; 0xff
 80059c0:	d90e      	bls.n	80059e0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	22ff      	movs	r2, #255	; 0xff
 80059c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059cc:	b2da      	uxtb	r2, r3
 80059ce:	8979      	ldrh	r1, [r7, #10]
 80059d0:	4b52      	ldr	r3, [pc, #328]	; (8005b1c <HAL_I2C_Mem_Read+0x22c>)
 80059d2:	9300      	str	r3, [sp, #0]
 80059d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80059d8:	68f8      	ldr	r0, [r7, #12]
 80059da:	f000 fa9f 	bl	8005f1c <I2C_TransferConfig>
 80059de:	e00f      	b.n	8005a00 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059e4:	b29a      	uxth	r2, r3
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059ee:	b2da      	uxtb	r2, r3
 80059f0:	8979      	ldrh	r1, [r7, #10]
 80059f2:	4b4a      	ldr	r3, [pc, #296]	; (8005b1c <HAL_I2C_Mem_Read+0x22c>)
 80059f4:	9300      	str	r3, [sp, #0]
 80059f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80059fa:	68f8      	ldr	r0, [r7, #12]
 80059fc:	f000 fa8e 	bl	8005f1c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	9300      	str	r3, [sp, #0]
 8005a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a06:	2200      	movs	r2, #0
 8005a08:	2104      	movs	r1, #4
 8005a0a:	68f8      	ldr	r0, [r7, #12]
 8005a0c:	f000 f964 	bl	8005cd8 <I2C_WaitOnFlagUntilTimeout>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d001      	beq.n	8005a1a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e07c      	b.n	8005b14 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a24:	b2d2      	uxtb	r2, r2
 8005a26:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2c:	1c5a      	adds	r2, r3, #1
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a36:	3b01      	subs	r3, #1
 8005a38:	b29a      	uxth	r2, r3
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	3b01      	subs	r3, #1
 8005a46:	b29a      	uxth	r2, r3
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d034      	beq.n	8005ac0 <HAL_I2C_Mem_Read+0x1d0>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d130      	bne.n	8005ac0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	9300      	str	r3, [sp, #0]
 8005a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a64:	2200      	movs	r2, #0
 8005a66:	2180      	movs	r1, #128	; 0x80
 8005a68:	68f8      	ldr	r0, [r7, #12]
 8005a6a:	f000 f935 	bl	8005cd8 <I2C_WaitOnFlagUntilTimeout>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d001      	beq.n	8005a78 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e04d      	b.n	8005b14 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	2bff      	cmp	r3, #255	; 0xff
 8005a80:	d90e      	bls.n	8005aa0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	22ff      	movs	r2, #255	; 0xff
 8005a86:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a8c:	b2da      	uxtb	r2, r3
 8005a8e:	8979      	ldrh	r1, [r7, #10]
 8005a90:	2300      	movs	r3, #0
 8005a92:	9300      	str	r3, [sp, #0]
 8005a94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a98:	68f8      	ldr	r0, [r7, #12]
 8005a9a:	f000 fa3f 	bl	8005f1c <I2C_TransferConfig>
 8005a9e:	e00f      	b.n	8005ac0 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aa4:	b29a      	uxth	r2, r3
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aae:	b2da      	uxtb	r2, r3
 8005ab0:	8979      	ldrh	r1, [r7, #10]
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	9300      	str	r3, [sp, #0]
 8005ab6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005aba:	68f8      	ldr	r0, [r7, #12]
 8005abc:	f000 fa2e 	bl	8005f1c <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d19a      	bne.n	8005a00 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005aca:	697a      	ldr	r2, [r7, #20]
 8005acc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ace:	68f8      	ldr	r0, [r7, #12]
 8005ad0:	f000 f982 	bl	8005dd8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d001      	beq.n	8005ade <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e01a      	b.n	8005b14 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	2220      	movs	r2, #32
 8005ae4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	6859      	ldr	r1, [r3, #4]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	4b0b      	ldr	r3, [pc, #44]	; (8005b20 <HAL_I2C_Mem_Read+0x230>)
 8005af2:	400b      	ands	r3, r1
 8005af4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2220      	movs	r2, #32
 8005afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	e000      	b.n	8005b14 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005b12:	2302      	movs	r3, #2
  }
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3718      	adds	r7, #24
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	80002400 	.word	0x80002400
 8005b20:	fe00e800 	.word	0xfe00e800

08005b24 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b32:	b2db      	uxtb	r3, r3
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b086      	sub	sp, #24
 8005b44:	af02      	add	r7, sp, #8
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	4608      	mov	r0, r1
 8005b4a:	4611      	mov	r1, r2
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	4603      	mov	r3, r0
 8005b50:	817b      	strh	r3, [r7, #10]
 8005b52:	460b      	mov	r3, r1
 8005b54:	813b      	strh	r3, [r7, #8]
 8005b56:	4613      	mov	r3, r2
 8005b58:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005b5a:	88fb      	ldrh	r3, [r7, #6]
 8005b5c:	b2da      	uxtb	r2, r3
 8005b5e:	8979      	ldrh	r1, [r7, #10]
 8005b60:	4b20      	ldr	r3, [pc, #128]	; (8005be4 <I2C_RequestMemoryWrite+0xa4>)
 8005b62:	9300      	str	r3, [sp, #0]
 8005b64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b68:	68f8      	ldr	r0, [r7, #12]
 8005b6a:	f000 f9d7 	bl	8005f1c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b6e:	69fa      	ldr	r2, [r7, #28]
 8005b70:	69b9      	ldr	r1, [r7, #24]
 8005b72:	68f8      	ldr	r0, [r7, #12]
 8005b74:	f000 f8f0 	bl	8005d58 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d001      	beq.n	8005b82 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e02c      	b.n	8005bdc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b82:	88fb      	ldrh	r3, [r7, #6]
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d105      	bne.n	8005b94 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b88:	893b      	ldrh	r3, [r7, #8]
 8005b8a:	b2da      	uxtb	r2, r3
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	629a      	str	r2, [r3, #40]	; 0x28
 8005b92:	e015      	b.n	8005bc0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005b94:	893b      	ldrh	r3, [r7, #8]
 8005b96:	0a1b      	lsrs	r3, r3, #8
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	b2da      	uxtb	r2, r3
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ba2:	69fa      	ldr	r2, [r7, #28]
 8005ba4:	69b9      	ldr	r1, [r7, #24]
 8005ba6:	68f8      	ldr	r0, [r7, #12]
 8005ba8:	f000 f8d6 	bl	8005d58 <I2C_WaitOnTXISFlagUntilTimeout>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d001      	beq.n	8005bb6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e012      	b.n	8005bdc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005bb6:	893b      	ldrh	r3, [r7, #8]
 8005bb8:	b2da      	uxtb	r2, r3
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	9300      	str	r3, [sp, #0]
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	2180      	movs	r1, #128	; 0x80
 8005bca:	68f8      	ldr	r0, [r7, #12]
 8005bcc:	f000 f884 	bl	8005cd8 <I2C_WaitOnFlagUntilTimeout>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d001      	beq.n	8005bda <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e000      	b.n	8005bdc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3710      	adds	r7, #16
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	80002000 	.word	0x80002000

08005be8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b086      	sub	sp, #24
 8005bec:	af02      	add	r7, sp, #8
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	4608      	mov	r0, r1
 8005bf2:	4611      	mov	r1, r2
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	817b      	strh	r3, [r7, #10]
 8005bfa:	460b      	mov	r3, r1
 8005bfc:	813b      	strh	r3, [r7, #8]
 8005bfe:	4613      	mov	r3, r2
 8005c00:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005c02:	88fb      	ldrh	r3, [r7, #6]
 8005c04:	b2da      	uxtb	r2, r3
 8005c06:	8979      	ldrh	r1, [r7, #10]
 8005c08:	4b20      	ldr	r3, [pc, #128]	; (8005c8c <I2C_RequestMemoryRead+0xa4>)
 8005c0a:	9300      	str	r3, [sp, #0]
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	68f8      	ldr	r0, [r7, #12]
 8005c10:	f000 f984 	bl	8005f1c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c14:	69fa      	ldr	r2, [r7, #28]
 8005c16:	69b9      	ldr	r1, [r7, #24]
 8005c18:	68f8      	ldr	r0, [r7, #12]
 8005c1a:	f000 f89d 	bl	8005d58 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d001      	beq.n	8005c28 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e02c      	b.n	8005c82 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c28:	88fb      	ldrh	r3, [r7, #6]
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d105      	bne.n	8005c3a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c2e:	893b      	ldrh	r3, [r7, #8]
 8005c30:	b2da      	uxtb	r2, r3
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	629a      	str	r2, [r3, #40]	; 0x28
 8005c38:	e015      	b.n	8005c66 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005c3a:	893b      	ldrh	r3, [r7, #8]
 8005c3c:	0a1b      	lsrs	r3, r3, #8
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	b2da      	uxtb	r2, r3
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c48:	69fa      	ldr	r2, [r7, #28]
 8005c4a:	69b9      	ldr	r1, [r7, #24]
 8005c4c:	68f8      	ldr	r0, [r7, #12]
 8005c4e:	f000 f883 	bl	8005d58 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d001      	beq.n	8005c5c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e012      	b.n	8005c82 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c5c:	893b      	ldrh	r3, [r7, #8]
 8005c5e:	b2da      	uxtb	r2, r3
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	9300      	str	r3, [sp, #0]
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	2140      	movs	r1, #64	; 0x40
 8005c70:	68f8      	ldr	r0, [r7, #12]
 8005c72:	f000 f831 	bl	8005cd8 <I2C_WaitOnFlagUntilTimeout>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d001      	beq.n	8005c80 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e000      	b.n	8005c82 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3710      	adds	r7, #16
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	80002000 	.word	0x80002000

08005c90 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	699b      	ldr	r3, [r3, #24]
 8005c9e:	f003 0302 	and.w	r3, r3, #2
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	d103      	bne.n	8005cae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2200      	movs	r2, #0
 8005cac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	699b      	ldr	r3, [r3, #24]
 8005cb4:	f003 0301 	and.w	r3, r3, #1
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d007      	beq.n	8005ccc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	699a      	ldr	r2, [r3, #24]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f042 0201 	orr.w	r2, r2, #1
 8005cca:	619a      	str	r2, [r3, #24]
  }
}
 8005ccc:	bf00      	nop
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	603b      	str	r3, [r7, #0]
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ce8:	e022      	b.n	8005d30 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cf0:	d01e      	beq.n	8005d30 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cf2:	f7fc fe1d 	bl	8002930 <HAL_GetTick>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	1ad3      	subs	r3, r2, r3
 8005cfc:	683a      	ldr	r2, [r7, #0]
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d302      	bcc.n	8005d08 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d113      	bne.n	8005d30 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d0c:	f043 0220 	orr.w	r2, r3, #32
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2220      	movs	r2, #32
 8005d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e00f      	b.n	8005d50 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	699a      	ldr	r2, [r3, #24]
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	4013      	ands	r3, r2
 8005d3a:	68ba      	ldr	r2, [r7, #8]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	bf0c      	ite	eq
 8005d40:	2301      	moveq	r3, #1
 8005d42:	2300      	movne	r3, #0
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	461a      	mov	r2, r3
 8005d48:	79fb      	ldrb	r3, [r7, #7]
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d0cd      	beq.n	8005cea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d4e:	2300      	movs	r3, #0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3710      	adds	r7, #16
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	60b9      	str	r1, [r7, #8]
 8005d62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005d64:	e02c      	b.n	8005dc0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	68b9      	ldr	r1, [r7, #8]
 8005d6a:	68f8      	ldr	r0, [r7, #12]
 8005d6c:	f000 f870 	bl	8005e50 <I2C_IsAcknowledgeFailed>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d001      	beq.n	8005d7a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e02a      	b.n	8005dd0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d80:	d01e      	beq.n	8005dc0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d82:	f7fc fdd5 	bl	8002930 <HAL_GetTick>
 8005d86:	4602      	mov	r2, r0
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	1ad3      	subs	r3, r2, r3
 8005d8c:	68ba      	ldr	r2, [r7, #8]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d302      	bcc.n	8005d98 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d113      	bne.n	8005dc0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d9c:	f043 0220 	orr.w	r2, r3, #32
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2220      	movs	r2, #32
 8005da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e007      	b.n	8005dd0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	699b      	ldr	r3, [r3, #24]
 8005dc6:	f003 0302 	and.w	r3, r3, #2
 8005dca:	2b02      	cmp	r3, #2
 8005dcc:	d1cb      	bne.n	8005d66 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005dce:	2300      	movs	r3, #0
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3710      	adds	r7, #16
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	60b9      	str	r1, [r7, #8]
 8005de2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005de4:	e028      	b.n	8005e38 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	68b9      	ldr	r1, [r7, #8]
 8005dea:	68f8      	ldr	r0, [r7, #12]
 8005dec:	f000 f830 	bl	8005e50 <I2C_IsAcknowledgeFailed>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d001      	beq.n	8005dfa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e026      	b.n	8005e48 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dfa:	f7fc fd99 	bl	8002930 <HAL_GetTick>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	68ba      	ldr	r2, [r7, #8]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d302      	bcc.n	8005e10 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d113      	bne.n	8005e38 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e14:	f043 0220 	orr.w	r2, r3, #32
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2220      	movs	r2, #32
 8005e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e007      	b.n	8005e48 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	699b      	ldr	r3, [r3, #24]
 8005e3e:	f003 0320 	and.w	r3, r3, #32
 8005e42:	2b20      	cmp	r3, #32
 8005e44:	d1cf      	bne.n	8005de6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005e46:	2300      	movs	r3, #0
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3710      	adds	r7, #16
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	699b      	ldr	r3, [r3, #24]
 8005e62:	f003 0310 	and.w	r3, r3, #16
 8005e66:	2b10      	cmp	r3, #16
 8005e68:	d151      	bne.n	8005f0e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e6a:	e022      	b.n	8005eb2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e72:	d01e      	beq.n	8005eb2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e74:	f7fc fd5c 	bl	8002930 <HAL_GetTick>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	68ba      	ldr	r2, [r7, #8]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d302      	bcc.n	8005e8a <I2C_IsAcknowledgeFailed+0x3a>
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d113      	bne.n	8005eb2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e8e:	f043 0220 	orr.w	r2, r3, #32
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2220      	movs	r2, #32
 8005e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e02e      	b.n	8005f10 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	699b      	ldr	r3, [r3, #24]
 8005eb8:	f003 0320 	and.w	r3, r3, #32
 8005ebc:	2b20      	cmp	r3, #32
 8005ebe:	d1d5      	bne.n	8005e6c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2210      	movs	r2, #16
 8005ec6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2220      	movs	r2, #32
 8005ece:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	f7ff fedd 	bl	8005c90 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	6859      	ldr	r1, [r3, #4]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	4b0d      	ldr	r3, [pc, #52]	; (8005f18 <I2C_IsAcknowledgeFailed+0xc8>)
 8005ee2:	400b      	ands	r3, r1
 8005ee4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eea:	f043 0204 	orr.w	r2, r3, #4
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2220      	movs	r2, #32
 8005ef6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e000      	b.n	8005f10 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005f0e:	2300      	movs	r3, #0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3710      	adds	r7, #16
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	fe00e800 	.word	0xfe00e800

08005f1c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b085      	sub	sp, #20
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	607b      	str	r3, [r7, #4]
 8005f26:	460b      	mov	r3, r1
 8005f28:	817b      	strh	r3, [r7, #10]
 8005f2a:	4613      	mov	r3, r2
 8005f2c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	685a      	ldr	r2, [r3, #4]
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	0d5b      	lsrs	r3, r3, #21
 8005f38:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005f3c:	4b0d      	ldr	r3, [pc, #52]	; (8005f74 <I2C_TransferConfig+0x58>)
 8005f3e:	430b      	orrs	r3, r1
 8005f40:	43db      	mvns	r3, r3
 8005f42:	ea02 0103 	and.w	r1, r2, r3
 8005f46:	897b      	ldrh	r3, [r7, #10]
 8005f48:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005f4c:	7a7b      	ldrb	r3, [r7, #9]
 8005f4e:	041b      	lsls	r3, r3, #16
 8005f50:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005f54:	431a      	orrs	r2, r3
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	431a      	orrs	r2, r3
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	431a      	orrs	r2, r3
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	430a      	orrs	r2, r1
 8005f64:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005f66:	bf00      	nop
 8005f68:	3714      	adds	r7, #20
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr
 8005f72:	bf00      	nop
 8005f74:	03ff63ff 	.word	0x03ff63ff

08005f78 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d101      	bne.n	8005f8a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e0bf      	b.n	800610a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d106      	bne.n	8005fa4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f008 fe56 	bl	800ec50 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	699a      	ldr	r2, [r3, #24]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005fba:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	6999      	ldr	r1, [r3, #24]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	685a      	ldr	r2, [r3, #4]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005fd0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	691b      	ldr	r3, [r3, #16]
 8005fd6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	430a      	orrs	r2, r1
 8005fde:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	6899      	ldr	r1, [r3, #8]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	4b4a      	ldr	r3, [pc, #296]	; (8006114 <HAL_LTDC_Init+0x19c>)
 8005fec:	400b      	ands	r3, r1
 8005fee:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	695b      	ldr	r3, [r3, #20]
 8005ff4:	041b      	lsls	r3, r3, #16
 8005ff6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	6899      	ldr	r1, [r3, #8]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	699a      	ldr	r2, [r3, #24]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	431a      	orrs	r2, r3
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	430a      	orrs	r2, r1
 800600c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68d9      	ldr	r1, [r3, #12]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	4b3e      	ldr	r3, [pc, #248]	; (8006114 <HAL_LTDC_Init+0x19c>)
 800601a:	400b      	ands	r3, r1
 800601c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	69db      	ldr	r3, [r3, #28]
 8006022:	041b      	lsls	r3, r3, #16
 8006024:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68d9      	ldr	r1, [r3, #12]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6a1a      	ldr	r2, [r3, #32]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	431a      	orrs	r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	430a      	orrs	r2, r1
 800603a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	6919      	ldr	r1, [r3, #16]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	4b33      	ldr	r3, [pc, #204]	; (8006114 <HAL_LTDC_Init+0x19c>)
 8006048:	400b      	ands	r3, r1
 800604a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006050:	041b      	lsls	r3, r3, #16
 8006052:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	6919      	ldr	r1, [r3, #16]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	431a      	orrs	r2, r3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	430a      	orrs	r2, r1
 8006068:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	6959      	ldr	r1, [r3, #20]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	4b27      	ldr	r3, [pc, #156]	; (8006114 <HAL_LTDC_Init+0x19c>)
 8006076:	400b      	ands	r3, r1
 8006078:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800607e:	041b      	lsls	r3, r3, #16
 8006080:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	6959      	ldr	r1, [r3, #20]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	431a      	orrs	r2, r3
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	430a      	orrs	r2, r1
 8006096:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800609e:	021b      	lsls	r3, r3, #8
 80060a0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80060a8:	041b      	lsls	r3, r3, #16
 80060aa:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80060ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80060c2:	68ba      	ldr	r2, [r7, #8]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80060ce:	431a      	orrs	r2, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	430a      	orrs	r2, r1
 80060d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f042 0206 	orr.w	r2, r2, #6
 80060e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	699a      	ldr	r2, [r3, #24]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f042 0201 	orr.w	r2, r2, #1
 80060f6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3710      	adds	r7, #16
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	f000f800 	.word	0xf000f800

08006118 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006118:	b5b0      	push	{r4, r5, r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800612a:	2b01      	cmp	r3, #1
 800612c:	d101      	bne.n	8006132 <HAL_LTDC_ConfigLayer+0x1a>
 800612e:	2302      	movs	r3, #2
 8006130:	e02c      	b.n	800618c <HAL_LTDC_ConfigLayer+0x74>
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2201      	movs	r2, #1
 8006136:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2202      	movs	r2, #2
 800613e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2134      	movs	r1, #52	; 0x34
 8006148:	fb01 f303 	mul.w	r3, r1, r3
 800614c:	4413      	add	r3, r2
 800614e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	4614      	mov	r4, r2
 8006156:	461d      	mov	r5, r3
 8006158:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800615a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800615c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800615e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006160:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006162:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006164:	682b      	ldr	r3, [r5, #0]
 8006166:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	68b9      	ldr	r1, [r7, #8]
 800616c:	68f8      	ldr	r0, [r7, #12]
 800616e:	f000 f811 	bl	8006194 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2201      	movs	r2, #1
 8006178:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2201      	movs	r2, #1
 800617e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800618a:	2300      	movs	r3, #0
}
 800618c:	4618      	mov	r0, r3
 800618e:	3710      	adds	r7, #16
 8006190:	46bd      	mov	sp, r7
 8006192:	bdb0      	pop	{r4, r5, r7, pc}

08006194 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006194:	b480      	push	{r7}
 8006196:	b089      	sub	sp, #36	; 0x24
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	685a      	ldr	r2, [r3, #4]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	0c1b      	lsrs	r3, r3, #16
 80061ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061b0:	4413      	add	r3, r2
 80061b2:	041b      	lsls	r3, r3, #16
 80061b4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	461a      	mov	r2, r3
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	01db      	lsls	r3, r3, #7
 80061c0:	4413      	add	r3, r2
 80061c2:	3384      	adds	r3, #132	; 0x84
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	68fa      	ldr	r2, [r7, #12]
 80061c8:	6812      	ldr	r2, [r2, #0]
 80061ca:	4611      	mov	r1, r2
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	01d2      	lsls	r2, r2, #7
 80061d0:	440a      	add	r2, r1
 80061d2:	3284      	adds	r2, #132	; 0x84
 80061d4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80061d8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	0c1b      	lsrs	r3, r3, #16
 80061e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061ea:	4413      	add	r3, r2
 80061ec:	1c5a      	adds	r2, r3, #1
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4619      	mov	r1, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	01db      	lsls	r3, r3, #7
 80061f8:	440b      	add	r3, r1
 80061fa:	3384      	adds	r3, #132	; 0x84
 80061fc:	4619      	mov	r1, r3
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	4313      	orrs	r3, r2
 8006202:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	68da      	ldr	r2, [r3, #12]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006212:	4413      	add	r3, r2
 8006214:	041b      	lsls	r3, r3, #16
 8006216:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	461a      	mov	r2, r3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	01db      	lsls	r3, r3, #7
 8006222:	4413      	add	r3, r2
 8006224:	3384      	adds	r3, #132	; 0x84
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	6812      	ldr	r2, [r2, #0]
 800622c:	4611      	mov	r1, r2
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	01d2      	lsls	r2, r2, #7
 8006232:	440a      	add	r2, r1
 8006234:	3284      	adds	r2, #132	; 0x84
 8006236:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800623a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	689a      	ldr	r2, [r3, #8]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800624a:	4413      	add	r3, r2
 800624c:	1c5a      	adds	r2, r3, #1
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4619      	mov	r1, r3
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	01db      	lsls	r3, r3, #7
 8006258:	440b      	add	r3, r1
 800625a:	3384      	adds	r3, #132	; 0x84
 800625c:	4619      	mov	r1, r3
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	4313      	orrs	r3, r2
 8006262:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	461a      	mov	r2, r3
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	01db      	lsls	r3, r3, #7
 800626e:	4413      	add	r3, r2
 8006270:	3384      	adds	r3, #132	; 0x84
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	6812      	ldr	r2, [r2, #0]
 8006278:	4611      	mov	r1, r2
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	01d2      	lsls	r2, r2, #7
 800627e:	440a      	add	r2, r1
 8006280:	3284      	adds	r2, #132	; 0x84
 8006282:	f023 0307 	bic.w	r3, r3, #7
 8006286:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	461a      	mov	r2, r3
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	01db      	lsls	r3, r3, #7
 8006292:	4413      	add	r3, r2
 8006294:	3384      	adds	r3, #132	; 0x84
 8006296:	461a      	mov	r2, r3
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	691b      	ldr	r3, [r3, #16]
 800629c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80062a4:	021b      	lsls	r3, r3, #8
 80062a6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80062ae:	041b      	lsls	r3, r3, #16
 80062b0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	699b      	ldr	r3, [r3, #24]
 80062b6:	061b      	lsls	r3, r3, #24
 80062b8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	461a      	mov	r2, r3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	01db      	lsls	r3, r3, #7
 80062c4:	4413      	add	r3, r2
 80062c6:	3384      	adds	r3, #132	; 0x84
 80062c8:	699b      	ldr	r3, [r3, #24]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	461a      	mov	r2, r3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	01db      	lsls	r3, r3, #7
 80062d4:	4413      	add	r3, r2
 80062d6:	3384      	adds	r3, #132	; 0x84
 80062d8:	461a      	mov	r2, r3
 80062da:	2300      	movs	r3, #0
 80062dc:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80062e4:	461a      	mov	r2, r3
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	431a      	orrs	r2, r3
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	431a      	orrs	r2, r3
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4619      	mov	r1, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	01db      	lsls	r3, r3, #7
 80062f8:	440b      	add	r3, r1
 80062fa:	3384      	adds	r3, #132	; 0x84
 80062fc:	4619      	mov	r1, r3
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	4313      	orrs	r3, r2
 8006302:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	461a      	mov	r2, r3
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	01db      	lsls	r3, r3, #7
 800630e:	4413      	add	r3, r2
 8006310:	3384      	adds	r3, #132	; 0x84
 8006312:	695b      	ldr	r3, [r3, #20]
 8006314:	68fa      	ldr	r2, [r7, #12]
 8006316:	6812      	ldr	r2, [r2, #0]
 8006318:	4611      	mov	r1, r2
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	01d2      	lsls	r2, r2, #7
 800631e:	440a      	add	r2, r1
 8006320:	3284      	adds	r2, #132	; 0x84
 8006322:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006326:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	461a      	mov	r2, r3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	01db      	lsls	r3, r3, #7
 8006332:	4413      	add	r3, r2
 8006334:	3384      	adds	r3, #132	; 0x84
 8006336:	461a      	mov	r2, r3
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	695b      	ldr	r3, [r3, #20]
 800633c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	461a      	mov	r2, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	01db      	lsls	r3, r3, #7
 8006348:	4413      	add	r3, r2
 800634a:	3384      	adds	r3, #132	; 0x84
 800634c:	69da      	ldr	r2, [r3, #28]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4619      	mov	r1, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	01db      	lsls	r3, r3, #7
 8006358:	440b      	add	r3, r1
 800635a:	3384      	adds	r3, #132	; 0x84
 800635c:	4619      	mov	r1, r3
 800635e:	4b58      	ldr	r3, [pc, #352]	; (80064c0 <LTDC_SetConfig+0x32c>)
 8006360:	4013      	ands	r3, r2
 8006362:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	69da      	ldr	r2, [r3, #28]
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	6a1b      	ldr	r3, [r3, #32]
 800636c:	68f9      	ldr	r1, [r7, #12]
 800636e:	6809      	ldr	r1, [r1, #0]
 8006370:	4608      	mov	r0, r1
 8006372:	6879      	ldr	r1, [r7, #4]
 8006374:	01c9      	lsls	r1, r1, #7
 8006376:	4401      	add	r1, r0
 8006378:	3184      	adds	r1, #132	; 0x84
 800637a:	4313      	orrs	r3, r2
 800637c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	461a      	mov	r2, r3
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	01db      	lsls	r3, r3, #7
 8006388:	4413      	add	r3, r2
 800638a:	3384      	adds	r3, #132	; 0x84
 800638c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	461a      	mov	r2, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	01db      	lsls	r3, r3, #7
 8006398:	4413      	add	r3, r2
 800639a:	3384      	adds	r3, #132	; 0x84
 800639c:	461a      	mov	r2, r3
 800639e:	2300      	movs	r3, #0
 80063a0:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	461a      	mov	r2, r3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	01db      	lsls	r3, r3, #7
 80063ac:	4413      	add	r3, r2
 80063ae:	3384      	adds	r3, #132	; 0x84
 80063b0:	461a      	mov	r2, r3
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b6:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d102      	bne.n	80063c6 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80063c0:	2304      	movs	r3, #4
 80063c2:	61fb      	str	r3, [r7, #28]
 80063c4:	e01b      	b.n	80063fe <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	691b      	ldr	r3, [r3, #16]
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d102      	bne.n	80063d4 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80063ce:	2303      	movs	r3, #3
 80063d0:	61fb      	str	r3, [r7, #28]
 80063d2:	e014      	b.n	80063fe <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	2b04      	cmp	r3, #4
 80063da:	d00b      	beq.n	80063f4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	d007      	beq.n	80063f4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80063e8:	2b03      	cmp	r3, #3
 80063ea:	d003      	beq.n	80063f4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80063f0:	2b07      	cmp	r3, #7
 80063f2:	d102      	bne.n	80063fa <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80063f4:	2302      	movs	r3, #2
 80063f6:	61fb      	str	r3, [r7, #28]
 80063f8:	e001      	b.n	80063fe <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80063fa:	2301      	movs	r3, #1
 80063fc:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	461a      	mov	r2, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	01db      	lsls	r3, r3, #7
 8006408:	4413      	add	r3, r2
 800640a:	3384      	adds	r3, #132	; 0x84
 800640c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800640e:	68fa      	ldr	r2, [r7, #12]
 8006410:	6812      	ldr	r2, [r2, #0]
 8006412:	4611      	mov	r1, r2
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	01d2      	lsls	r2, r2, #7
 8006418:	440a      	add	r2, r1
 800641a:	3284      	adds	r2, #132	; 0x84
 800641c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006420:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006426:	69fa      	ldr	r2, [r7, #28]
 8006428:	fb02 f303 	mul.w	r3, r2, r3
 800642c:	041a      	lsls	r2, r3, #16
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	6859      	ldr	r1, [r3, #4]
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	1acb      	subs	r3, r1, r3
 8006438:	69f9      	ldr	r1, [r7, #28]
 800643a:	fb01 f303 	mul.w	r3, r1, r3
 800643e:	3303      	adds	r3, #3
 8006440:	68f9      	ldr	r1, [r7, #12]
 8006442:	6809      	ldr	r1, [r1, #0]
 8006444:	4608      	mov	r0, r1
 8006446:	6879      	ldr	r1, [r7, #4]
 8006448:	01c9      	lsls	r1, r1, #7
 800644a:	4401      	add	r1, r0
 800644c:	3184      	adds	r1, #132	; 0x84
 800644e:	4313      	orrs	r3, r2
 8006450:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	461a      	mov	r2, r3
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	01db      	lsls	r3, r3, #7
 800645c:	4413      	add	r3, r2
 800645e:	3384      	adds	r3, #132	; 0x84
 8006460:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4619      	mov	r1, r3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	01db      	lsls	r3, r3, #7
 800646c:	440b      	add	r3, r1
 800646e:	3384      	adds	r3, #132	; 0x84
 8006470:	4619      	mov	r1, r3
 8006472:	4b14      	ldr	r3, [pc, #80]	; (80064c4 <LTDC_SetConfig+0x330>)
 8006474:	4013      	ands	r3, r2
 8006476:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	461a      	mov	r2, r3
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	01db      	lsls	r3, r3, #7
 8006482:	4413      	add	r3, r2
 8006484:	3384      	adds	r3, #132	; 0x84
 8006486:	461a      	mov	r2, r3
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800648c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	461a      	mov	r2, r3
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	01db      	lsls	r3, r3, #7
 8006498:	4413      	add	r3, r2
 800649a:	3384      	adds	r3, #132	; 0x84
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	6812      	ldr	r2, [r2, #0]
 80064a2:	4611      	mov	r1, r2
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	01d2      	lsls	r2, r2, #7
 80064a8:	440a      	add	r2, r1
 80064aa:	3284      	adds	r2, #132	; 0x84
 80064ac:	f043 0301 	orr.w	r3, r3, #1
 80064b0:	6013      	str	r3, [r2, #0]
}
 80064b2:	bf00      	nop
 80064b4:	3724      	adds	r7, #36	; 0x24
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop
 80064c0:	fffff8f8 	.word	0xfffff8f8
 80064c4:	fffff800 	.word	0xfffff800

080064c8 <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b083      	sub	sp, #12
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d101      	bne.n	80064de <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 80064da:	2200      	movs	r2, #0
 80064dc:	e001      	b.n	80064e2 <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 80064de:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	6a1b      	ldr	r3, [r3, #32]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d102      	bne.n	80064f4 <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 80064ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80064f2:	e000      	b.n	80064f6 <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 80064f4:	2200      	movs	r2, #0
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	69db      	ldr	r3, [r3, #28]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d102      	bne.n	8006508 <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 8006502:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006506:	e000      	b.n	800650a <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 8006508:	2200      	movs	r2, #0
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	605a      	str	r2, [r3, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006512:	1e5a      	subs	r2, r3, #1
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006520:	4413      	add	r3, r2
 8006522:	1e5a      	subs	r2, r3, #1
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive - 1U;
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006530:	441a      	add	r2, r3
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006536:	4413      	add	r3, r2
 8006538:	1e5a      	subs	r2, r3, #1
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006546:	441a      	add	r2, r3
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800654c:	441a      	add	r2, r3
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006552:	4413      	add	r3, r2
 8006554:	1e5a      	subs	r2, r3, #1
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800655a:	2300      	movs	r3, #0
}
 800655c:	4618      	mov	r0, r3
 800655e:	370c      	adds	r7, #12
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b082      	sub	sp, #8
 800656c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800656e:	2300      	movs	r3, #0
 8006570:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006572:	4b23      	ldr	r3, [pc, #140]	; (8006600 <HAL_PWREx_EnableOverDrive+0x98>)
 8006574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006576:	4a22      	ldr	r2, [pc, #136]	; (8006600 <HAL_PWREx_EnableOverDrive+0x98>)
 8006578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800657c:	6413      	str	r3, [r2, #64]	; 0x40
 800657e:	4b20      	ldr	r3, [pc, #128]	; (8006600 <HAL_PWREx_EnableOverDrive+0x98>)
 8006580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006586:	603b      	str	r3, [r7, #0]
 8006588:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800658a:	4b1e      	ldr	r3, [pc, #120]	; (8006604 <HAL_PWREx_EnableOverDrive+0x9c>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a1d      	ldr	r2, [pc, #116]	; (8006604 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006594:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006596:	f7fc f9cb 	bl	8002930 <HAL_GetTick>
 800659a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800659c:	e009      	b.n	80065b2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800659e:	f7fc f9c7 	bl	8002930 <HAL_GetTick>
 80065a2:	4602      	mov	r2, r0
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	1ad3      	subs	r3, r2, r3
 80065a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065ac:	d901      	bls.n	80065b2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80065ae:	2303      	movs	r3, #3
 80065b0:	e022      	b.n	80065f8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80065b2:	4b14      	ldr	r3, [pc, #80]	; (8006604 <HAL_PWREx_EnableOverDrive+0x9c>)
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065be:	d1ee      	bne.n	800659e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80065c0:	4b10      	ldr	r3, [pc, #64]	; (8006604 <HAL_PWREx_EnableOverDrive+0x9c>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a0f      	ldr	r2, [pc, #60]	; (8006604 <HAL_PWREx_EnableOverDrive+0x9c>)
 80065c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065ca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80065cc:	f7fc f9b0 	bl	8002930 <HAL_GetTick>
 80065d0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80065d2:	e009      	b.n	80065e8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80065d4:	f7fc f9ac 	bl	8002930 <HAL_GetTick>
 80065d8:	4602      	mov	r2, r0
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	1ad3      	subs	r3, r2, r3
 80065de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065e2:	d901      	bls.n	80065e8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80065e4:	2303      	movs	r3, #3
 80065e6:	e007      	b.n	80065f8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80065e8:	4b06      	ldr	r3, [pc, #24]	; (8006604 <HAL_PWREx_EnableOverDrive+0x9c>)
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065f4:	d1ee      	bne.n	80065d4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80065f6:	2300      	movs	r3, #0
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3708      	adds	r7, #8
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}
 8006600:	40023800 	.word	0x40023800
 8006604:	40007000 	.word	0x40007000

08006608 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b086      	sub	sp, #24
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8006610:	2300      	movs	r3, #0
 8006612:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d101      	bne.n	800661e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	e25e      	b.n	8006adc <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f003 0301 	and.w	r3, r3, #1
 8006626:	2b00      	cmp	r3, #0
 8006628:	f000 8087 	beq.w	800673a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800662c:	4b96      	ldr	r3, [pc, #600]	; (8006888 <HAL_RCC_OscConfig+0x280>)
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	f003 030c 	and.w	r3, r3, #12
 8006634:	2b04      	cmp	r3, #4
 8006636:	d00c      	beq.n	8006652 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006638:	4b93      	ldr	r3, [pc, #588]	; (8006888 <HAL_RCC_OscConfig+0x280>)
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	f003 030c 	and.w	r3, r3, #12
 8006640:	2b08      	cmp	r3, #8
 8006642:	d112      	bne.n	800666a <HAL_RCC_OscConfig+0x62>
 8006644:	4b90      	ldr	r3, [pc, #576]	; (8006888 <HAL_RCC_OscConfig+0x280>)
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800664c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006650:	d10b      	bne.n	800666a <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006652:	4b8d      	ldr	r3, [pc, #564]	; (8006888 <HAL_RCC_OscConfig+0x280>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800665a:	2b00      	cmp	r3, #0
 800665c:	d06c      	beq.n	8006738 <HAL_RCC_OscConfig+0x130>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d168      	bne.n	8006738 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e238      	b.n	8006adc <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006672:	d106      	bne.n	8006682 <HAL_RCC_OscConfig+0x7a>
 8006674:	4b84      	ldr	r3, [pc, #528]	; (8006888 <HAL_RCC_OscConfig+0x280>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a83      	ldr	r2, [pc, #524]	; (8006888 <HAL_RCC_OscConfig+0x280>)
 800667a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800667e:	6013      	str	r3, [r2, #0]
 8006680:	e02e      	b.n	80066e0 <HAL_RCC_OscConfig+0xd8>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d10c      	bne.n	80066a4 <HAL_RCC_OscConfig+0x9c>
 800668a:	4b7f      	ldr	r3, [pc, #508]	; (8006888 <HAL_RCC_OscConfig+0x280>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a7e      	ldr	r2, [pc, #504]	; (8006888 <HAL_RCC_OscConfig+0x280>)
 8006690:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006694:	6013      	str	r3, [r2, #0]
 8006696:	4b7c      	ldr	r3, [pc, #496]	; (8006888 <HAL_RCC_OscConfig+0x280>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a7b      	ldr	r2, [pc, #492]	; (8006888 <HAL_RCC_OscConfig+0x280>)
 800669c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80066a0:	6013      	str	r3, [r2, #0]
 80066a2:	e01d      	b.n	80066e0 <HAL_RCC_OscConfig+0xd8>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066ac:	d10c      	bne.n	80066c8 <HAL_RCC_OscConfig+0xc0>
 80066ae:	4b76      	ldr	r3, [pc, #472]	; (8006888 <HAL_RCC_OscConfig+0x280>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a75      	ldr	r2, [pc, #468]	; (8006888 <HAL_RCC_OscConfig+0x280>)
 80066b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80066b8:	6013      	str	r3, [r2, #0]
 80066ba:	4b73      	ldr	r3, [pc, #460]	; (8006888 <HAL_RCC_OscConfig+0x280>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a72      	ldr	r2, [pc, #456]	; (8006888 <HAL_RCC_OscConfig+0x280>)
 80066c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066c4:	6013      	str	r3, [r2, #0]
 80066c6:	e00b      	b.n	80066e0 <HAL_RCC_OscConfig+0xd8>
 80066c8:	4b6f      	ldr	r3, [pc, #444]	; (8006888 <HAL_RCC_OscConfig+0x280>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a6e      	ldr	r2, [pc, #440]	; (8006888 <HAL_RCC_OscConfig+0x280>)
 80066ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066d2:	6013      	str	r3, [r2, #0]
 80066d4:	4b6c      	ldr	r3, [pc, #432]	; (8006888 <HAL_RCC_OscConfig+0x280>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a6b      	ldr	r2, [pc, #428]	; (8006888 <HAL_RCC_OscConfig+0x280>)
 80066da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80066de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d013      	beq.n	8006710 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066e8:	f7fc f922 	bl	8002930 <HAL_GetTick>
 80066ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066ee:	e008      	b.n	8006702 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80066f0:	f7fc f91e 	bl	8002930 <HAL_GetTick>
 80066f4:	4602      	mov	r2, r0
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	1ad3      	subs	r3, r2, r3
 80066fa:	2b64      	cmp	r3, #100	; 0x64
 80066fc:	d901      	bls.n	8006702 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80066fe:	2303      	movs	r3, #3
 8006700:	e1ec      	b.n	8006adc <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006702:	4b61      	ldr	r3, [pc, #388]	; (8006888 <HAL_RCC_OscConfig+0x280>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800670a:	2b00      	cmp	r3, #0
 800670c:	d0f0      	beq.n	80066f0 <HAL_RCC_OscConfig+0xe8>
 800670e:	e014      	b.n	800673a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006710:	f7fc f90e 	bl	8002930 <HAL_GetTick>
 8006714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006716:	e008      	b.n	800672a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006718:	f7fc f90a 	bl	8002930 <HAL_GetTick>
 800671c:	4602      	mov	r2, r0
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	2b64      	cmp	r3, #100	; 0x64
 8006724:	d901      	bls.n	800672a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006726:	2303      	movs	r3, #3
 8006728:	e1d8      	b.n	8006adc <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800672a:	4b57      	ldr	r3, [pc, #348]	; (8006888 <HAL_RCC_OscConfig+0x280>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006732:	2b00      	cmp	r3, #0
 8006734:	d1f0      	bne.n	8006718 <HAL_RCC_OscConfig+0x110>
 8006736:	e000      	b.n	800673a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006738:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 0302 	and.w	r3, r3, #2
 8006742:	2b00      	cmp	r3, #0
 8006744:	d069      	beq.n	800681a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006746:	4b50      	ldr	r3, [pc, #320]	; (8006888 <HAL_RCC_OscConfig+0x280>)
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	f003 030c 	and.w	r3, r3, #12
 800674e:	2b00      	cmp	r3, #0
 8006750:	d00b      	beq.n	800676a <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006752:	4b4d      	ldr	r3, [pc, #308]	; (8006888 <HAL_RCC_OscConfig+0x280>)
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	f003 030c 	and.w	r3, r3, #12
 800675a:	2b08      	cmp	r3, #8
 800675c:	d11c      	bne.n	8006798 <HAL_RCC_OscConfig+0x190>
 800675e:	4b4a      	ldr	r3, [pc, #296]	; (8006888 <HAL_RCC_OscConfig+0x280>)
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006766:	2b00      	cmp	r3, #0
 8006768:	d116      	bne.n	8006798 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800676a:	4b47      	ldr	r3, [pc, #284]	; (8006888 <HAL_RCC_OscConfig+0x280>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 0302 	and.w	r3, r3, #2
 8006772:	2b00      	cmp	r3, #0
 8006774:	d005      	beq.n	8006782 <HAL_RCC_OscConfig+0x17a>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	2b01      	cmp	r3, #1
 800677c:	d001      	beq.n	8006782 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	e1ac      	b.n	8006adc <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006782:	4b41      	ldr	r3, [pc, #260]	; (8006888 <HAL_RCC_OscConfig+0x280>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	00db      	lsls	r3, r3, #3
 8006790:	493d      	ldr	r1, [pc, #244]	; (8006888 <HAL_RCC_OscConfig+0x280>)
 8006792:	4313      	orrs	r3, r2
 8006794:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006796:	e040      	b.n	800681a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d023      	beq.n	80067e8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80067a0:	4b39      	ldr	r3, [pc, #228]	; (8006888 <HAL_RCC_OscConfig+0x280>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a38      	ldr	r2, [pc, #224]	; (8006888 <HAL_RCC_OscConfig+0x280>)
 80067a6:	f043 0301 	orr.w	r3, r3, #1
 80067aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067ac:	f7fc f8c0 	bl	8002930 <HAL_GetTick>
 80067b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067b2:	e008      	b.n	80067c6 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80067b4:	f7fc f8bc 	bl	8002930 <HAL_GetTick>
 80067b8:	4602      	mov	r2, r0
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d901      	bls.n	80067c6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80067c2:	2303      	movs	r3, #3
 80067c4:	e18a      	b.n	8006adc <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067c6:	4b30      	ldr	r3, [pc, #192]	; (8006888 <HAL_RCC_OscConfig+0x280>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 0302 	and.w	r3, r3, #2
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d0f0      	beq.n	80067b4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067d2:	4b2d      	ldr	r3, [pc, #180]	; (8006888 <HAL_RCC_OscConfig+0x280>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	00db      	lsls	r3, r3, #3
 80067e0:	4929      	ldr	r1, [pc, #164]	; (8006888 <HAL_RCC_OscConfig+0x280>)
 80067e2:	4313      	orrs	r3, r2
 80067e4:	600b      	str	r3, [r1, #0]
 80067e6:	e018      	b.n	800681a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80067e8:	4b27      	ldr	r3, [pc, #156]	; (8006888 <HAL_RCC_OscConfig+0x280>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a26      	ldr	r2, [pc, #152]	; (8006888 <HAL_RCC_OscConfig+0x280>)
 80067ee:	f023 0301 	bic.w	r3, r3, #1
 80067f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067f4:	f7fc f89c 	bl	8002930 <HAL_GetTick>
 80067f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067fa:	e008      	b.n	800680e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80067fc:	f7fc f898 	bl	8002930 <HAL_GetTick>
 8006800:	4602      	mov	r2, r0
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	1ad3      	subs	r3, r2, r3
 8006806:	2b02      	cmp	r3, #2
 8006808:	d901      	bls.n	800680e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800680a:	2303      	movs	r3, #3
 800680c:	e166      	b.n	8006adc <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800680e:	4b1e      	ldr	r3, [pc, #120]	; (8006888 <HAL_RCC_OscConfig+0x280>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f003 0302 	and.w	r3, r3, #2
 8006816:	2b00      	cmp	r3, #0
 8006818:	d1f0      	bne.n	80067fc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f003 0308 	and.w	r3, r3, #8
 8006822:	2b00      	cmp	r3, #0
 8006824:	d038      	beq.n	8006898 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	695b      	ldr	r3, [r3, #20]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d019      	beq.n	8006862 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800682e:	4b16      	ldr	r3, [pc, #88]	; (8006888 <HAL_RCC_OscConfig+0x280>)
 8006830:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006832:	4a15      	ldr	r2, [pc, #84]	; (8006888 <HAL_RCC_OscConfig+0x280>)
 8006834:	f043 0301 	orr.w	r3, r3, #1
 8006838:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800683a:	f7fc f879 	bl	8002930 <HAL_GetTick>
 800683e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006840:	e008      	b.n	8006854 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006842:	f7fc f875 	bl	8002930 <HAL_GetTick>
 8006846:	4602      	mov	r2, r0
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	1ad3      	subs	r3, r2, r3
 800684c:	2b02      	cmp	r3, #2
 800684e:	d901      	bls.n	8006854 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006850:	2303      	movs	r3, #3
 8006852:	e143      	b.n	8006adc <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006854:	4b0c      	ldr	r3, [pc, #48]	; (8006888 <HAL_RCC_OscConfig+0x280>)
 8006856:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006858:	f003 0302 	and.w	r3, r3, #2
 800685c:	2b00      	cmp	r3, #0
 800685e:	d0f0      	beq.n	8006842 <HAL_RCC_OscConfig+0x23a>
 8006860:	e01a      	b.n	8006898 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006862:	4b09      	ldr	r3, [pc, #36]	; (8006888 <HAL_RCC_OscConfig+0x280>)
 8006864:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006866:	4a08      	ldr	r2, [pc, #32]	; (8006888 <HAL_RCC_OscConfig+0x280>)
 8006868:	f023 0301 	bic.w	r3, r3, #1
 800686c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800686e:	f7fc f85f 	bl	8002930 <HAL_GetTick>
 8006872:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006874:	e00a      	b.n	800688c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006876:	f7fc f85b 	bl	8002930 <HAL_GetTick>
 800687a:	4602      	mov	r2, r0
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	1ad3      	subs	r3, r2, r3
 8006880:	2b02      	cmp	r3, #2
 8006882:	d903      	bls.n	800688c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006884:	2303      	movs	r3, #3
 8006886:	e129      	b.n	8006adc <HAL_RCC_OscConfig+0x4d4>
 8006888:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800688c:	4b95      	ldr	r3, [pc, #596]	; (8006ae4 <HAL_RCC_OscConfig+0x4dc>)
 800688e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006890:	f003 0302 	and.w	r3, r3, #2
 8006894:	2b00      	cmp	r3, #0
 8006896:	d1ee      	bne.n	8006876 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f003 0304 	and.w	r3, r3, #4
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	f000 80a4 	beq.w	80069ee <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068a6:	4b8f      	ldr	r3, [pc, #572]	; (8006ae4 <HAL_RCC_OscConfig+0x4dc>)
 80068a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d10d      	bne.n	80068ce <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80068b2:	4b8c      	ldr	r3, [pc, #560]	; (8006ae4 <HAL_RCC_OscConfig+0x4dc>)
 80068b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b6:	4a8b      	ldr	r2, [pc, #556]	; (8006ae4 <HAL_RCC_OscConfig+0x4dc>)
 80068b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068bc:	6413      	str	r3, [r2, #64]	; 0x40
 80068be:	4b89      	ldr	r3, [pc, #548]	; (8006ae4 <HAL_RCC_OscConfig+0x4dc>)
 80068c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068c6:	60fb      	str	r3, [r7, #12]
 80068c8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80068ca:	2301      	movs	r3, #1
 80068cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068ce:	4b86      	ldr	r3, [pc, #536]	; (8006ae8 <HAL_RCC_OscConfig+0x4e0>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d118      	bne.n	800690c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80068da:	4b83      	ldr	r3, [pc, #524]	; (8006ae8 <HAL_RCC_OscConfig+0x4e0>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a82      	ldr	r2, [pc, #520]	; (8006ae8 <HAL_RCC_OscConfig+0x4e0>)
 80068e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80068e6:	f7fc f823 	bl	8002930 <HAL_GetTick>
 80068ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068ec:	e008      	b.n	8006900 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80068ee:	f7fc f81f 	bl	8002930 <HAL_GetTick>
 80068f2:	4602      	mov	r2, r0
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	1ad3      	subs	r3, r2, r3
 80068f8:	2b64      	cmp	r3, #100	; 0x64
 80068fa:	d901      	bls.n	8006900 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80068fc:	2303      	movs	r3, #3
 80068fe:	e0ed      	b.n	8006adc <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006900:	4b79      	ldr	r3, [pc, #484]	; (8006ae8 <HAL_RCC_OscConfig+0x4e0>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006908:	2b00      	cmp	r3, #0
 800690a:	d0f0      	beq.n	80068ee <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	2b01      	cmp	r3, #1
 8006912:	d106      	bne.n	8006922 <HAL_RCC_OscConfig+0x31a>
 8006914:	4b73      	ldr	r3, [pc, #460]	; (8006ae4 <HAL_RCC_OscConfig+0x4dc>)
 8006916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006918:	4a72      	ldr	r2, [pc, #456]	; (8006ae4 <HAL_RCC_OscConfig+0x4dc>)
 800691a:	f043 0301 	orr.w	r3, r3, #1
 800691e:	6713      	str	r3, [r2, #112]	; 0x70
 8006920:	e02d      	b.n	800697e <HAL_RCC_OscConfig+0x376>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d10c      	bne.n	8006944 <HAL_RCC_OscConfig+0x33c>
 800692a:	4b6e      	ldr	r3, [pc, #440]	; (8006ae4 <HAL_RCC_OscConfig+0x4dc>)
 800692c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800692e:	4a6d      	ldr	r2, [pc, #436]	; (8006ae4 <HAL_RCC_OscConfig+0x4dc>)
 8006930:	f023 0301 	bic.w	r3, r3, #1
 8006934:	6713      	str	r3, [r2, #112]	; 0x70
 8006936:	4b6b      	ldr	r3, [pc, #428]	; (8006ae4 <HAL_RCC_OscConfig+0x4dc>)
 8006938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800693a:	4a6a      	ldr	r2, [pc, #424]	; (8006ae4 <HAL_RCC_OscConfig+0x4dc>)
 800693c:	f023 0304 	bic.w	r3, r3, #4
 8006940:	6713      	str	r3, [r2, #112]	; 0x70
 8006942:	e01c      	b.n	800697e <HAL_RCC_OscConfig+0x376>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	2b05      	cmp	r3, #5
 800694a:	d10c      	bne.n	8006966 <HAL_RCC_OscConfig+0x35e>
 800694c:	4b65      	ldr	r3, [pc, #404]	; (8006ae4 <HAL_RCC_OscConfig+0x4dc>)
 800694e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006950:	4a64      	ldr	r2, [pc, #400]	; (8006ae4 <HAL_RCC_OscConfig+0x4dc>)
 8006952:	f043 0304 	orr.w	r3, r3, #4
 8006956:	6713      	str	r3, [r2, #112]	; 0x70
 8006958:	4b62      	ldr	r3, [pc, #392]	; (8006ae4 <HAL_RCC_OscConfig+0x4dc>)
 800695a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800695c:	4a61      	ldr	r2, [pc, #388]	; (8006ae4 <HAL_RCC_OscConfig+0x4dc>)
 800695e:	f043 0301 	orr.w	r3, r3, #1
 8006962:	6713      	str	r3, [r2, #112]	; 0x70
 8006964:	e00b      	b.n	800697e <HAL_RCC_OscConfig+0x376>
 8006966:	4b5f      	ldr	r3, [pc, #380]	; (8006ae4 <HAL_RCC_OscConfig+0x4dc>)
 8006968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800696a:	4a5e      	ldr	r2, [pc, #376]	; (8006ae4 <HAL_RCC_OscConfig+0x4dc>)
 800696c:	f023 0301 	bic.w	r3, r3, #1
 8006970:	6713      	str	r3, [r2, #112]	; 0x70
 8006972:	4b5c      	ldr	r3, [pc, #368]	; (8006ae4 <HAL_RCC_OscConfig+0x4dc>)
 8006974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006976:	4a5b      	ldr	r2, [pc, #364]	; (8006ae4 <HAL_RCC_OscConfig+0x4dc>)
 8006978:	f023 0304 	bic.w	r3, r3, #4
 800697c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d015      	beq.n	80069b2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006986:	f7fb ffd3 	bl	8002930 <HAL_GetTick>
 800698a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800698c:	e00a      	b.n	80069a4 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800698e:	f7fb ffcf 	bl	8002930 <HAL_GetTick>
 8006992:	4602      	mov	r2, r0
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	1ad3      	subs	r3, r2, r3
 8006998:	f241 3288 	movw	r2, #5000	; 0x1388
 800699c:	4293      	cmp	r3, r2
 800699e:	d901      	bls.n	80069a4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80069a0:	2303      	movs	r3, #3
 80069a2:	e09b      	b.n	8006adc <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069a4:	4b4f      	ldr	r3, [pc, #316]	; (8006ae4 <HAL_RCC_OscConfig+0x4dc>)
 80069a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069a8:	f003 0302 	and.w	r3, r3, #2
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d0ee      	beq.n	800698e <HAL_RCC_OscConfig+0x386>
 80069b0:	e014      	b.n	80069dc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069b2:	f7fb ffbd 	bl	8002930 <HAL_GetTick>
 80069b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069b8:	e00a      	b.n	80069d0 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069ba:	f7fb ffb9 	bl	8002930 <HAL_GetTick>
 80069be:	4602      	mov	r2, r0
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	1ad3      	subs	r3, r2, r3
 80069c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d901      	bls.n	80069d0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80069cc:	2303      	movs	r3, #3
 80069ce:	e085      	b.n	8006adc <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069d0:	4b44      	ldr	r3, [pc, #272]	; (8006ae4 <HAL_RCC_OscConfig+0x4dc>)
 80069d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069d4:	f003 0302 	and.w	r3, r3, #2
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d1ee      	bne.n	80069ba <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80069dc:	7dfb      	ldrb	r3, [r7, #23]
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d105      	bne.n	80069ee <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069e2:	4b40      	ldr	r3, [pc, #256]	; (8006ae4 <HAL_RCC_OscConfig+0x4dc>)
 80069e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e6:	4a3f      	ldr	r2, [pc, #252]	; (8006ae4 <HAL_RCC_OscConfig+0x4dc>)
 80069e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	699b      	ldr	r3, [r3, #24]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d071      	beq.n	8006ada <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80069f6:	4b3b      	ldr	r3, [pc, #236]	; (8006ae4 <HAL_RCC_OscConfig+0x4dc>)
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	f003 030c 	and.w	r3, r3, #12
 80069fe:	2b08      	cmp	r3, #8
 8006a00:	d069      	beq.n	8006ad6 <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	699b      	ldr	r3, [r3, #24]
 8006a06:	2b02      	cmp	r3, #2
 8006a08:	d14b      	bne.n	8006aa2 <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a0a:	4b36      	ldr	r3, [pc, #216]	; (8006ae4 <HAL_RCC_OscConfig+0x4dc>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a35      	ldr	r2, [pc, #212]	; (8006ae4 <HAL_RCC_OscConfig+0x4dc>)
 8006a10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a16:	f7fb ff8b 	bl	8002930 <HAL_GetTick>
 8006a1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a1c:	e008      	b.n	8006a30 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a1e:	f7fb ff87 	bl	8002930 <HAL_GetTick>
 8006a22:	4602      	mov	r2, r0
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	1ad3      	subs	r3, r2, r3
 8006a28:	2b02      	cmp	r3, #2
 8006a2a:	d901      	bls.n	8006a30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006a2c:	2303      	movs	r3, #3
 8006a2e:	e055      	b.n	8006adc <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a30:	4b2c      	ldr	r3, [pc, #176]	; (8006ae4 <HAL_RCC_OscConfig+0x4dc>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d1f0      	bne.n	8006a1e <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	69da      	ldr	r2, [r3, #28]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6a1b      	ldr	r3, [r3, #32]
 8006a44:	431a      	orrs	r2, r3
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4a:	019b      	lsls	r3, r3, #6
 8006a4c:	431a      	orrs	r2, r3
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a52:	085b      	lsrs	r3, r3, #1
 8006a54:	3b01      	subs	r3, #1
 8006a56:	041b      	lsls	r3, r3, #16
 8006a58:	431a      	orrs	r2, r3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a5e:	061b      	lsls	r3, r3, #24
 8006a60:	431a      	orrs	r2, r3
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a66:	071b      	lsls	r3, r3, #28
 8006a68:	491e      	ldr	r1, [pc, #120]	; (8006ae4 <HAL_RCC_OscConfig+0x4dc>)
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a6e:	4b1d      	ldr	r3, [pc, #116]	; (8006ae4 <HAL_RCC_OscConfig+0x4dc>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a1c      	ldr	r2, [pc, #112]	; (8006ae4 <HAL_RCC_OscConfig+0x4dc>)
 8006a74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a7a:	f7fb ff59 	bl	8002930 <HAL_GetTick>
 8006a7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a80:	e008      	b.n	8006a94 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a82:	f7fb ff55 	bl	8002930 <HAL_GetTick>
 8006a86:	4602      	mov	r2, r0
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	1ad3      	subs	r3, r2, r3
 8006a8c:	2b02      	cmp	r3, #2
 8006a8e:	d901      	bls.n	8006a94 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8006a90:	2303      	movs	r3, #3
 8006a92:	e023      	b.n	8006adc <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a94:	4b13      	ldr	r3, [pc, #76]	; (8006ae4 <HAL_RCC_OscConfig+0x4dc>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d0f0      	beq.n	8006a82 <HAL_RCC_OscConfig+0x47a>
 8006aa0:	e01b      	b.n	8006ada <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006aa2:	4b10      	ldr	r3, [pc, #64]	; (8006ae4 <HAL_RCC_OscConfig+0x4dc>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a0f      	ldr	r2, [pc, #60]	; (8006ae4 <HAL_RCC_OscConfig+0x4dc>)
 8006aa8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006aac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aae:	f7fb ff3f 	bl	8002930 <HAL_GetTick>
 8006ab2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ab4:	e008      	b.n	8006ac8 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ab6:	f7fb ff3b 	bl	8002930 <HAL_GetTick>
 8006aba:	4602      	mov	r2, r0
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	1ad3      	subs	r3, r2, r3
 8006ac0:	2b02      	cmp	r3, #2
 8006ac2:	d901      	bls.n	8006ac8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006ac4:	2303      	movs	r3, #3
 8006ac6:	e009      	b.n	8006adc <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ac8:	4b06      	ldr	r3, [pc, #24]	; (8006ae4 <HAL_RCC_OscConfig+0x4dc>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d1f0      	bne.n	8006ab6 <HAL_RCC_OscConfig+0x4ae>
 8006ad4:	e001      	b.n	8006ada <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e000      	b.n	8006adc <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 8006ada:	2300      	movs	r3, #0
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3718      	adds	r7, #24
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	40023800 	.word	0x40023800
 8006ae8:	40007000 	.word	0x40007000

08006aec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006af6:	2300      	movs	r3, #0
 8006af8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d101      	bne.n	8006b04 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	e0ce      	b.n	8006ca2 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b04:	4b69      	ldr	r3, [pc, #420]	; (8006cac <HAL_RCC_ClockConfig+0x1c0>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f003 030f 	and.w	r3, r3, #15
 8006b0c:	683a      	ldr	r2, [r7, #0]
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d910      	bls.n	8006b34 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b12:	4b66      	ldr	r3, [pc, #408]	; (8006cac <HAL_RCC_ClockConfig+0x1c0>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f023 020f 	bic.w	r2, r3, #15
 8006b1a:	4964      	ldr	r1, [pc, #400]	; (8006cac <HAL_RCC_ClockConfig+0x1c0>)
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b22:	4b62      	ldr	r3, [pc, #392]	; (8006cac <HAL_RCC_ClockConfig+0x1c0>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f003 030f 	and.w	r3, r3, #15
 8006b2a:	683a      	ldr	r2, [r7, #0]
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d001      	beq.n	8006b34 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	e0b6      	b.n	8006ca2 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 0302 	and.w	r3, r3, #2
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d020      	beq.n	8006b82 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 0304 	and.w	r3, r3, #4
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d005      	beq.n	8006b58 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b4c:	4b58      	ldr	r3, [pc, #352]	; (8006cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	4a57      	ldr	r2, [pc, #348]	; (8006cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006b52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006b56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f003 0308 	and.w	r3, r3, #8
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d005      	beq.n	8006b70 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b64:	4b52      	ldr	r3, [pc, #328]	; (8006cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	4a51      	ldr	r2, [pc, #324]	; (8006cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006b6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006b6e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b70:	4b4f      	ldr	r3, [pc, #316]	; (8006cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	494c      	ldr	r1, [pc, #304]	; (8006cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f003 0301 	and.w	r3, r3, #1
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d040      	beq.n	8006c10 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d107      	bne.n	8006ba6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b96:	4b46      	ldr	r3, [pc, #280]	; (8006cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d115      	bne.n	8006bce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e07d      	b.n	8006ca2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	2b02      	cmp	r3, #2
 8006bac:	d107      	bne.n	8006bbe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bae:	4b40      	ldr	r3, [pc, #256]	; (8006cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d109      	bne.n	8006bce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e071      	b.n	8006ca2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bbe:	4b3c      	ldr	r3, [pc, #240]	; (8006cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f003 0302 	and.w	r3, r3, #2
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d101      	bne.n	8006bce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e069      	b.n	8006ca2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006bce:	4b38      	ldr	r3, [pc, #224]	; (8006cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	f023 0203 	bic.w	r2, r3, #3
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	4935      	ldr	r1, [pc, #212]	; (8006cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006be0:	f7fb fea6 	bl	8002930 <HAL_GetTick>
 8006be4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006be6:	e00a      	b.n	8006bfe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006be8:	f7fb fea2 	bl	8002930 <HAL_GetTick>
 8006bec:	4602      	mov	r2, r0
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d901      	bls.n	8006bfe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006bfa:	2303      	movs	r3, #3
 8006bfc:	e051      	b.n	8006ca2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bfe:	4b2c      	ldr	r3, [pc, #176]	; (8006cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	f003 020c 	and.w	r2, r3, #12
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d1eb      	bne.n	8006be8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006c10:	4b26      	ldr	r3, [pc, #152]	; (8006cac <HAL_RCC_ClockConfig+0x1c0>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 030f 	and.w	r3, r3, #15
 8006c18:	683a      	ldr	r2, [r7, #0]
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d210      	bcs.n	8006c40 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c1e:	4b23      	ldr	r3, [pc, #140]	; (8006cac <HAL_RCC_ClockConfig+0x1c0>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f023 020f 	bic.w	r2, r3, #15
 8006c26:	4921      	ldr	r1, [pc, #132]	; (8006cac <HAL_RCC_ClockConfig+0x1c0>)
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c2e:	4b1f      	ldr	r3, [pc, #124]	; (8006cac <HAL_RCC_ClockConfig+0x1c0>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 030f 	and.w	r3, r3, #15
 8006c36:	683a      	ldr	r2, [r7, #0]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d001      	beq.n	8006c40 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e030      	b.n	8006ca2 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f003 0304 	and.w	r3, r3, #4
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d008      	beq.n	8006c5e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c4c:	4b18      	ldr	r3, [pc, #96]	; (8006cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	4915      	ldr	r1, [pc, #84]	; (8006cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f003 0308 	and.w	r3, r3, #8
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d009      	beq.n	8006c7e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006c6a:	4b11      	ldr	r3, [pc, #68]	; (8006cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	691b      	ldr	r3, [r3, #16]
 8006c76:	00db      	lsls	r3, r3, #3
 8006c78:	490d      	ldr	r1, [pc, #52]	; (8006cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006c7e:	f000 f81d 	bl	8006cbc <HAL_RCC_GetSysClockFreq>
 8006c82:	4601      	mov	r1, r0
 8006c84:	4b0a      	ldr	r3, [pc, #40]	; (8006cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	091b      	lsrs	r3, r3, #4
 8006c8a:	f003 030f 	and.w	r3, r3, #15
 8006c8e:	4a09      	ldr	r2, [pc, #36]	; (8006cb4 <HAL_RCC_ClockConfig+0x1c8>)
 8006c90:	5cd3      	ldrb	r3, [r2, r3]
 8006c92:	fa21 f303 	lsr.w	r3, r1, r3
 8006c96:	4a08      	ldr	r2, [pc, #32]	; (8006cb8 <HAL_RCC_ClockConfig+0x1cc>)
 8006c98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006c9a:	2000      	movs	r0, #0
 8006c9c:	f7fb fe04 	bl	80028a8 <HAL_InitTick>

  return HAL_OK;
 8006ca0:	2300      	movs	r3, #0
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3710      	adds	r7, #16
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
 8006caa:	bf00      	nop
 8006cac:	40023c00 	.word	0x40023c00
 8006cb0:	40023800 	.word	0x40023800
 8006cb4:	0812ae34 	.word	0x0812ae34
 8006cb8:	20000048 	.word	0x20000048

08006cbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cbe:	b085      	sub	sp, #20
 8006cc0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	607b      	str	r3, [r7, #4]
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	60fb      	str	r3, [r7, #12]
 8006cca:	2300      	movs	r3, #0
 8006ccc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006cd2:	4b50      	ldr	r3, [pc, #320]	; (8006e14 <HAL_RCC_GetSysClockFreq+0x158>)
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	f003 030c 	and.w	r3, r3, #12
 8006cda:	2b04      	cmp	r3, #4
 8006cdc:	d007      	beq.n	8006cee <HAL_RCC_GetSysClockFreq+0x32>
 8006cde:	2b08      	cmp	r3, #8
 8006ce0:	d008      	beq.n	8006cf4 <HAL_RCC_GetSysClockFreq+0x38>
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	f040 808d 	bne.w	8006e02 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006ce8:	4b4b      	ldr	r3, [pc, #300]	; (8006e18 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006cea:	60bb      	str	r3, [r7, #8]
       break;
 8006cec:	e08c      	b.n	8006e08 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006cee:	4b4b      	ldr	r3, [pc, #300]	; (8006e1c <HAL_RCC_GetSysClockFreq+0x160>)
 8006cf0:	60bb      	str	r3, [r7, #8]
      break;
 8006cf2:	e089      	b.n	8006e08 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006cf4:	4b47      	ldr	r3, [pc, #284]	; (8006e14 <HAL_RCC_GetSysClockFreq+0x158>)
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cfc:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006cfe:	4b45      	ldr	r3, [pc, #276]	; (8006e14 <HAL_RCC_GetSysClockFreq+0x158>)
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d023      	beq.n	8006d52 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d0a:	4b42      	ldr	r3, [pc, #264]	; (8006e14 <HAL_RCC_GetSysClockFreq+0x158>)
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	099b      	lsrs	r3, r3, #6
 8006d10:	f04f 0400 	mov.w	r4, #0
 8006d14:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006d18:	f04f 0200 	mov.w	r2, #0
 8006d1c:	ea03 0501 	and.w	r5, r3, r1
 8006d20:	ea04 0602 	and.w	r6, r4, r2
 8006d24:	4a3d      	ldr	r2, [pc, #244]	; (8006e1c <HAL_RCC_GetSysClockFreq+0x160>)
 8006d26:	fb02 f106 	mul.w	r1, r2, r6
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	fb02 f205 	mul.w	r2, r2, r5
 8006d30:	440a      	add	r2, r1
 8006d32:	493a      	ldr	r1, [pc, #232]	; (8006e1c <HAL_RCC_GetSysClockFreq+0x160>)
 8006d34:	fba5 0101 	umull	r0, r1, r5, r1
 8006d38:	1853      	adds	r3, r2, r1
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f04f 0400 	mov.w	r4, #0
 8006d42:	461a      	mov	r2, r3
 8006d44:	4623      	mov	r3, r4
 8006d46:	f7f9 fad3 	bl	80002f0 <__aeabi_uldivmod>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	460c      	mov	r4, r1
 8006d4e:	60fb      	str	r3, [r7, #12]
 8006d50:	e049      	b.n	8006de6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d52:	4b30      	ldr	r3, [pc, #192]	; (8006e14 <HAL_RCC_GetSysClockFreq+0x158>)
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	099b      	lsrs	r3, r3, #6
 8006d58:	f04f 0400 	mov.w	r4, #0
 8006d5c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006d60:	f04f 0200 	mov.w	r2, #0
 8006d64:	ea03 0501 	and.w	r5, r3, r1
 8006d68:	ea04 0602 	and.w	r6, r4, r2
 8006d6c:	4629      	mov	r1, r5
 8006d6e:	4632      	mov	r2, r6
 8006d70:	f04f 0300 	mov.w	r3, #0
 8006d74:	f04f 0400 	mov.w	r4, #0
 8006d78:	0154      	lsls	r4, r2, #5
 8006d7a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006d7e:	014b      	lsls	r3, r1, #5
 8006d80:	4619      	mov	r1, r3
 8006d82:	4622      	mov	r2, r4
 8006d84:	1b49      	subs	r1, r1, r5
 8006d86:	eb62 0206 	sbc.w	r2, r2, r6
 8006d8a:	f04f 0300 	mov.w	r3, #0
 8006d8e:	f04f 0400 	mov.w	r4, #0
 8006d92:	0194      	lsls	r4, r2, #6
 8006d94:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006d98:	018b      	lsls	r3, r1, #6
 8006d9a:	1a5b      	subs	r3, r3, r1
 8006d9c:	eb64 0402 	sbc.w	r4, r4, r2
 8006da0:	f04f 0100 	mov.w	r1, #0
 8006da4:	f04f 0200 	mov.w	r2, #0
 8006da8:	00e2      	lsls	r2, r4, #3
 8006daa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006dae:	00d9      	lsls	r1, r3, #3
 8006db0:	460b      	mov	r3, r1
 8006db2:	4614      	mov	r4, r2
 8006db4:	195b      	adds	r3, r3, r5
 8006db6:	eb44 0406 	adc.w	r4, r4, r6
 8006dba:	f04f 0100 	mov.w	r1, #0
 8006dbe:	f04f 0200 	mov.w	r2, #0
 8006dc2:	02a2      	lsls	r2, r4, #10
 8006dc4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006dc8:	0299      	lsls	r1, r3, #10
 8006dca:	460b      	mov	r3, r1
 8006dcc:	4614      	mov	r4, r2
 8006dce:	4618      	mov	r0, r3
 8006dd0:	4621      	mov	r1, r4
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f04f 0400 	mov.w	r4, #0
 8006dd8:	461a      	mov	r2, r3
 8006dda:	4623      	mov	r3, r4
 8006ddc:	f7f9 fa88 	bl	80002f0 <__aeabi_uldivmod>
 8006de0:	4603      	mov	r3, r0
 8006de2:	460c      	mov	r4, r1
 8006de4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8006de6:	4b0b      	ldr	r3, [pc, #44]	; (8006e14 <HAL_RCC_GetSysClockFreq+0x158>)
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	0c1b      	lsrs	r3, r3, #16
 8006dec:	f003 0303 	and.w	r3, r3, #3
 8006df0:	3301      	adds	r3, #1
 8006df2:	005b      	lsls	r3, r3, #1
 8006df4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006df6:	68fa      	ldr	r2, [r7, #12]
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dfe:	60bb      	str	r3, [r7, #8]
      break;
 8006e00:	e002      	b.n	8006e08 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e02:	4b05      	ldr	r3, [pc, #20]	; (8006e18 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006e04:	60bb      	str	r3, [r7, #8]
      break;
 8006e06:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e08:	68bb      	ldr	r3, [r7, #8]
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3714      	adds	r7, #20
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e12:	bf00      	nop
 8006e14:	40023800 	.word	0x40023800
 8006e18:	00f42400 	.word	0x00f42400
 8006e1c:	017d7840 	.word	0x017d7840

08006e20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b088      	sub	sp, #32
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006e30:	2300      	movs	r3, #0
 8006e32:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006e34:	2300      	movs	r3, #0
 8006e36:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f003 0301 	and.w	r3, r3, #1
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d012      	beq.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006e48:	4b69      	ldr	r3, [pc, #420]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	4a68      	ldr	r2, [pc, #416]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e4e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006e52:	6093      	str	r3, [r2, #8]
 8006e54:	4b66      	ldr	r3, [pc, #408]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e56:	689a      	ldr	r2, [r3, #8]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e5c:	4964      	ldr	r1, [pc, #400]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d101      	bne.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d017      	beq.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006e7a:	4b5d      	ldr	r3, [pc, #372]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e88:	4959      	ldr	r1, [pc, #356]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e98:	d101      	bne.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d101      	bne.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d017      	beq.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006eb6:	4b4e      	ldr	r3, [pc, #312]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006eb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ebc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec4:	494a      	ldr	r1, [pc, #296]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ed4:	d101      	bne.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d101      	bne.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d001      	beq.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f003 0320 	and.w	r3, r3, #32
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	f000 808b 	beq.w	800701a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006f04:	4b3a      	ldr	r3, [pc, #232]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f08:	4a39      	ldr	r2, [pc, #228]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f0e:	6413      	str	r3, [r2, #64]	; 0x40
 8006f10:	4b37      	ldr	r3, [pc, #220]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f18:	60bb      	str	r3, [r7, #8]
 8006f1a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006f1c:	4b35      	ldr	r3, [pc, #212]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a34      	ldr	r2, [pc, #208]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006f22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f28:	f7fb fd02 	bl	8002930 <HAL_GetTick>
 8006f2c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006f2e:	e008      	b.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f30:	f7fb fcfe 	bl	8002930 <HAL_GetTick>
 8006f34:	4602      	mov	r2, r0
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	1ad3      	subs	r3, r2, r3
 8006f3a:	2b64      	cmp	r3, #100	; 0x64
 8006f3c:	d901      	bls.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006f3e:	2303      	movs	r3, #3
 8006f40:	e38d      	b.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006f42:	4b2c      	ldr	r3, [pc, #176]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d0f0      	beq.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006f4e:	4b28      	ldr	r3, [pc, #160]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f56:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d035      	beq.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f66:	693a      	ldr	r2, [r7, #16]
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d02e      	beq.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006f6c:	4b20      	ldr	r3, [pc, #128]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f74:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006f76:	4b1e      	ldr	r3, [pc, #120]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f7a:	4a1d      	ldr	r2, [pc, #116]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f80:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006f82:	4b1b      	ldr	r3, [pc, #108]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f86:	4a1a      	ldr	r2, [pc, #104]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f8c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006f8e:	4a18      	ldr	r2, [pc, #96]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006f94:	4b16      	ldr	r3, [pc, #88]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f98:	f003 0301 	and.w	r3, r3, #1
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d114      	bne.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fa0:	f7fb fcc6 	bl	8002930 <HAL_GetTick>
 8006fa4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fa6:	e00a      	b.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006fa8:	f7fb fcc2 	bl	8002930 <HAL_GetTick>
 8006fac:	4602      	mov	r2, r0
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	1ad3      	subs	r3, r2, r3
 8006fb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d901      	bls.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006fba:	2303      	movs	r3, #3
 8006fbc:	e34f      	b.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fbe:	4b0c      	ldr	r3, [pc, #48]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fc2:	f003 0302 	and.w	r3, r3, #2
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d0ee      	beq.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fd6:	d111      	bne.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006fd8:	4b05      	ldr	r3, [pc, #20]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006fe4:	4b04      	ldr	r3, [pc, #16]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006fe6:	400b      	ands	r3, r1
 8006fe8:	4901      	ldr	r1, [pc, #4]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fea:	4313      	orrs	r3, r2
 8006fec:	608b      	str	r3, [r1, #8]
 8006fee:	e00b      	b.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006ff0:	40023800 	.word	0x40023800
 8006ff4:	40007000 	.word	0x40007000
 8006ff8:	0ffffcff 	.word	0x0ffffcff
 8006ffc:	4bb3      	ldr	r3, [pc, #716]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	4ab2      	ldr	r2, [pc, #712]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007002:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007006:	6093      	str	r3, [r2, #8]
 8007008:	4bb0      	ldr	r3, [pc, #704]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800700a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007010:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007014:	49ad      	ldr	r1, [pc, #692]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007016:	4313      	orrs	r3, r2
 8007018:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f003 0310 	and.w	r3, r3, #16
 8007022:	2b00      	cmp	r3, #0
 8007024:	d010      	beq.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007026:	4ba9      	ldr	r3, [pc, #676]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007028:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800702c:	4aa7      	ldr	r2, [pc, #668]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800702e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007032:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007036:	4ba5      	ldr	r3, [pc, #660]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007038:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007040:	49a2      	ldr	r1, [pc, #648]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007042:	4313      	orrs	r3, r2
 8007044:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007050:	2b00      	cmp	r3, #0
 8007052:	d00a      	beq.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007054:	4b9d      	ldr	r3, [pc, #628]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800705a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007062:	499a      	ldr	r1, [pc, #616]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007064:	4313      	orrs	r3, r2
 8007066:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007072:	2b00      	cmp	r3, #0
 8007074:	d00a      	beq.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007076:	4b95      	ldr	r3, [pc, #596]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800707c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007084:	4991      	ldr	r1, [pc, #580]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007086:	4313      	orrs	r3, r2
 8007088:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007094:	2b00      	cmp	r3, #0
 8007096:	d00a      	beq.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007098:	4b8c      	ldr	r3, [pc, #560]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800709a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800709e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070a6:	4989      	ldr	r1, [pc, #548]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070a8:	4313      	orrs	r3, r2
 80070aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d00a      	beq.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80070ba:	4b84      	ldr	r3, [pc, #528]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070c0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070c8:	4980      	ldr	r1, [pc, #512]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070ca:	4313      	orrs	r3, r2
 80070cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d00a      	beq.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80070dc:	4b7b      	ldr	r3, [pc, #492]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070e2:	f023 0203 	bic.w	r2, r3, #3
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ea:	4978      	ldr	r1, [pc, #480]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80070ec:	4313      	orrs	r3, r2
 80070ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d00a      	beq.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80070fe:	4b73      	ldr	r3, [pc, #460]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007104:	f023 020c 	bic.w	r2, r3, #12
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800710c:	496f      	ldr	r1, [pc, #444]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800710e:	4313      	orrs	r3, r2
 8007110:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00a      	beq.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007120:	4b6a      	ldr	r3, [pc, #424]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007126:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800712e:	4967      	ldr	r1, [pc, #412]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007130:	4313      	orrs	r3, r2
 8007132:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800713e:	2b00      	cmp	r3, #0
 8007140:	d00a      	beq.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007142:	4b62      	ldr	r3, [pc, #392]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007148:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007150:	495e      	ldr	r1, [pc, #376]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007152:	4313      	orrs	r3, r2
 8007154:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007160:	2b00      	cmp	r3, #0
 8007162:	d00a      	beq.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007164:	4b59      	ldr	r3, [pc, #356]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800716a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007172:	4956      	ldr	r1, [pc, #344]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007174:	4313      	orrs	r3, r2
 8007176:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007182:	2b00      	cmp	r3, #0
 8007184:	d00a      	beq.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007186:	4b51      	ldr	r3, [pc, #324]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800718c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007194:	494d      	ldr	r1, [pc, #308]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007196:	4313      	orrs	r3, r2
 8007198:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d00a      	beq.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80071a8:	4b48      	ldr	r3, [pc, #288]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80071aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071ae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071b6:	4945      	ldr	r1, [pc, #276]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80071b8:	4313      	orrs	r3, r2
 80071ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d00a      	beq.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80071ca:	4b40      	ldr	r3, [pc, #256]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80071cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071d0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071d8:	493c      	ldr	r1, [pc, #240]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80071da:	4313      	orrs	r3, r2
 80071dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d00a      	beq.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80071ec:	4b37      	ldr	r3, [pc, #220]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80071ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071f2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071fa:	4934      	ldr	r1, [pc, #208]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80071fc:	4313      	orrs	r3, r2
 80071fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800720a:	2b00      	cmp	r3, #0
 800720c:	d011      	beq.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800720e:	4b2f      	ldr	r3, [pc, #188]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007214:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800721c:	492b      	ldr	r1, [pc, #172]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800721e:	4313      	orrs	r3, r2
 8007220:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007228:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800722c:	d101      	bne.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800722e:	2301      	movs	r3, #1
 8007230:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f003 0308 	and.w	r3, r3, #8
 800723a:	2b00      	cmp	r3, #0
 800723c:	d001      	beq.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800723e:	2301      	movs	r3, #1
 8007240:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800724a:	2b00      	cmp	r3, #0
 800724c:	d00a      	beq.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800724e:	4b1f      	ldr	r3, [pc, #124]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007254:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800725c:	491b      	ldr	r1, [pc, #108]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800725e:	4313      	orrs	r3, r2
 8007260:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800726c:	2b00      	cmp	r3, #0
 800726e:	d00b      	beq.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007270:	4b16      	ldr	r3, [pc, #88]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007276:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007280:	4912      	ldr	r1, [pc, #72]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007282:	4313      	orrs	r3, r2
 8007284:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007290:	2b00      	cmp	r3, #0
 8007292:	d00b      	beq.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8007294:	4b0d      	ldr	r3, [pc, #52]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800729a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072a4:	4909      	ldr	r1, [pc, #36]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80072a6:	4313      	orrs	r3, r2
 80072a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d00f      	beq.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80072b8:	4b04      	ldr	r3, [pc, #16]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80072ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072be:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072c8:	e002      	b.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80072ca:	bf00      	nop
 80072cc:	40023800 	.word	0x40023800
 80072d0:	4985      	ldr	r1, [pc, #532]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80072d2:	4313      	orrs	r3, r2
 80072d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d00b      	beq.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80072e4:	4b80      	ldr	r3, [pc, #512]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80072e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072ea:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072f4:	497c      	ldr	r1, [pc, #496]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80072f6:	4313      	orrs	r3, r2
 80072f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80072fc:	69fb      	ldr	r3, [r7, #28]
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d005      	beq.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800730a:	f040 80d6 	bne.w	80074ba <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800730e:	4b76      	ldr	r3, [pc, #472]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a75      	ldr	r2, [pc, #468]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007314:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007318:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800731a:	f7fb fb09 	bl	8002930 <HAL_GetTick>
 800731e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007320:	e008      	b.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007322:	f7fb fb05 	bl	8002930 <HAL_GetTick>
 8007326:	4602      	mov	r2, r0
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	1ad3      	subs	r3, r2, r3
 800732c:	2b64      	cmp	r3, #100	; 0x64
 800732e:	d901      	bls.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007330:	2303      	movs	r3, #3
 8007332:	e194      	b.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007334:	4b6c      	ldr	r3, [pc, #432]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800733c:	2b00      	cmp	r3, #0
 800733e:	d1f0      	bne.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f003 0301 	and.w	r3, r3, #1
 8007348:	2b00      	cmp	r3, #0
 800734a:	d021      	beq.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x570>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007350:	2b00      	cmp	r3, #0
 8007352:	d11d      	bne.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007354:	4b64      	ldr	r3, [pc, #400]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007356:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800735a:	0c1b      	lsrs	r3, r3, #16
 800735c:	f003 0303 	and.w	r3, r3, #3
 8007360:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007362:	4b61      	ldr	r3, [pc, #388]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007364:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007368:	0e1b      	lsrs	r3, r3, #24
 800736a:	f003 030f 	and.w	r3, r3, #15
 800736e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	019a      	lsls	r2, r3, #6
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	041b      	lsls	r3, r3, #16
 800737a:	431a      	orrs	r2, r3
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	061b      	lsls	r3, r3, #24
 8007380:	431a      	orrs	r2, r3
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	071b      	lsls	r3, r3, #28
 8007388:	4957      	ldr	r1, [pc, #348]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800738a:	4313      	orrs	r3, r2
 800738c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007398:	2b00      	cmp	r3, #0
 800739a:	d004      	beq.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x586>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073a4:	d00a      	beq.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d02e      	beq.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80073ba:	d129      	bne.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80073bc:	4b4a      	ldr	r3, [pc, #296]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80073be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073c2:	0c1b      	lsrs	r3, r3, #16
 80073c4:	f003 0303 	and.w	r3, r3, #3
 80073c8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80073ca:	4b47      	ldr	r3, [pc, #284]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80073cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073d0:	0f1b      	lsrs	r3, r3, #28
 80073d2:	f003 0307 	and.w	r3, r3, #7
 80073d6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	019a      	lsls	r2, r3, #6
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	041b      	lsls	r3, r3, #16
 80073e2:	431a      	orrs	r2, r3
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	061b      	lsls	r3, r3, #24
 80073ea:	431a      	orrs	r2, r3
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	071b      	lsls	r3, r3, #28
 80073f0:	493d      	ldr	r1, [pc, #244]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80073f2:	4313      	orrs	r3, r2
 80073f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80073f8:	4b3b      	ldr	r3, [pc, #236]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80073fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073fe:	f023 021f 	bic.w	r2, r3, #31
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007406:	3b01      	subs	r3, #1
 8007408:	4937      	ldr	r1, [pc, #220]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800740a:	4313      	orrs	r3, r2
 800740c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007418:	2b00      	cmp	r3, #0
 800741a:	d01d      	beq.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800741c:	4b32      	ldr	r3, [pc, #200]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800741e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007422:	0e1b      	lsrs	r3, r3, #24
 8007424:	f003 030f 	and.w	r3, r3, #15
 8007428:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800742a:	4b2f      	ldr	r3, [pc, #188]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800742c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007430:	0f1b      	lsrs	r3, r3, #28
 8007432:	f003 0307 	and.w	r3, r3, #7
 8007436:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	019a      	lsls	r2, r3, #6
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	691b      	ldr	r3, [r3, #16]
 8007442:	041b      	lsls	r3, r3, #16
 8007444:	431a      	orrs	r2, r3
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	061b      	lsls	r3, r3, #24
 800744a:	431a      	orrs	r2, r3
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	071b      	lsls	r3, r3, #28
 8007450:	4925      	ldr	r1, [pc, #148]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007452:	4313      	orrs	r3, r2
 8007454:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007460:	2b00      	cmp	r3, #0
 8007462:	d011      	beq.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	019a      	lsls	r2, r3, #6
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	041b      	lsls	r3, r3, #16
 8007470:	431a      	orrs	r2, r3
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	68db      	ldr	r3, [r3, #12]
 8007476:	061b      	lsls	r3, r3, #24
 8007478:	431a      	orrs	r2, r3
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	071b      	lsls	r3, r3, #28
 8007480:	4919      	ldr	r1, [pc, #100]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007482:	4313      	orrs	r3, r2
 8007484:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007488:	4b17      	ldr	r3, [pc, #92]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a16      	ldr	r2, [pc, #88]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800748e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007492:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007494:	f7fb fa4c 	bl	8002930 <HAL_GetTick>
 8007498:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800749a:	e008      	b.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800749c:	f7fb fa48 	bl	8002930 <HAL_GetTick>
 80074a0:	4602      	mov	r2, r0
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	1ad3      	subs	r3, r2, r3
 80074a6:	2b64      	cmp	r3, #100	; 0x64
 80074a8:	d901      	bls.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80074aa:	2303      	movs	r3, #3
 80074ac:	e0d7      	b.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80074ae:	4b0e      	ldr	r3, [pc, #56]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d0f0      	beq.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	2b01      	cmp	r3, #1
 80074be:	f040 80cd 	bne.w	800765c <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80074c2:	4b09      	ldr	r3, [pc, #36]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a08      	ldr	r2, [pc, #32]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80074c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074ce:	f7fb fa2f 	bl	8002930 <HAL_GetTick>
 80074d2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80074d4:	e00a      	b.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80074d6:	f7fb fa2b 	bl	8002930 <HAL_GetTick>
 80074da:	4602      	mov	r2, r0
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	1ad3      	subs	r3, r2, r3
 80074e0:	2b64      	cmp	r3, #100	; 0x64
 80074e2:	d903      	bls.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80074e4:	2303      	movs	r3, #3
 80074e6:	e0ba      	b.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x83e>
 80074e8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80074ec:	4b5e      	ldr	r3, [pc, #376]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80074f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074f8:	d0ed      	beq.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007502:	2b00      	cmp	r3, #0
 8007504:	d003      	beq.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800750a:	2b00      	cmp	r3, #0
 800750c:	d009      	beq.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007516:	2b00      	cmp	r3, #0
 8007518:	d02e      	beq.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751e:	2b00      	cmp	r3, #0
 8007520:	d12a      	bne.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007522:	4b51      	ldr	r3, [pc, #324]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007528:	0c1b      	lsrs	r3, r3, #16
 800752a:	f003 0303 	and.w	r3, r3, #3
 800752e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007530:	4b4d      	ldr	r3, [pc, #308]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007536:	0f1b      	lsrs	r3, r3, #28
 8007538:	f003 0307 	and.w	r3, r3, #7
 800753c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	695b      	ldr	r3, [r3, #20]
 8007542:	019a      	lsls	r2, r3, #6
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	041b      	lsls	r3, r3, #16
 8007548:	431a      	orrs	r2, r3
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	699b      	ldr	r3, [r3, #24]
 800754e:	061b      	lsls	r3, r3, #24
 8007550:	431a      	orrs	r2, r3
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	071b      	lsls	r3, r3, #28
 8007556:	4944      	ldr	r1, [pc, #272]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007558:	4313      	orrs	r3, r2
 800755a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800755e:	4b42      	ldr	r3, [pc, #264]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007560:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007564:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800756c:	3b01      	subs	r3, #1
 800756e:	021b      	lsls	r3, r3, #8
 8007570:	493d      	ldr	r1, [pc, #244]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007572:	4313      	orrs	r3, r2
 8007574:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007580:	2b00      	cmp	r3, #0
 8007582:	d022      	beq.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007588:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800758c:	d11d      	bne.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800758e:	4b36      	ldr	r3, [pc, #216]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007594:	0e1b      	lsrs	r3, r3, #24
 8007596:	f003 030f 	and.w	r3, r3, #15
 800759a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800759c:	4b32      	ldr	r3, [pc, #200]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800759e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075a2:	0f1b      	lsrs	r3, r3, #28
 80075a4:	f003 0307 	and.w	r3, r3, #7
 80075a8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	695b      	ldr	r3, [r3, #20]
 80075ae:	019a      	lsls	r2, r3, #6
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6a1b      	ldr	r3, [r3, #32]
 80075b4:	041b      	lsls	r3, r3, #16
 80075b6:	431a      	orrs	r2, r3
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	061b      	lsls	r3, r3, #24
 80075bc:	431a      	orrs	r2, r3
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	071b      	lsls	r3, r3, #28
 80075c2:	4929      	ldr	r1, [pc, #164]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80075c4:	4313      	orrs	r3, r2
 80075c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f003 0308 	and.w	r3, r3, #8
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d028      	beq.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80075d6:	4b24      	ldr	r3, [pc, #144]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80075d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075dc:	0e1b      	lsrs	r3, r3, #24
 80075de:	f003 030f 	and.w	r3, r3, #15
 80075e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80075e4:	4b20      	ldr	r3, [pc, #128]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80075e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075ea:	0c1b      	lsrs	r3, r3, #16
 80075ec:	f003 0303 	and.w	r3, r3, #3
 80075f0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	695b      	ldr	r3, [r3, #20]
 80075f6:	019a      	lsls	r2, r3, #6
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	041b      	lsls	r3, r3, #16
 80075fc:	431a      	orrs	r2, r3
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	061b      	lsls	r3, r3, #24
 8007602:	431a      	orrs	r2, r3
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	69db      	ldr	r3, [r3, #28]
 8007608:	071b      	lsls	r3, r3, #28
 800760a:	4917      	ldr	r1, [pc, #92]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800760c:	4313      	orrs	r3, r2
 800760e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007612:	4b15      	ldr	r3, [pc, #84]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007614:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007618:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007620:	4911      	ldr	r1, [pc, #68]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007622:	4313      	orrs	r3, r2
 8007624:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007628:	4b0f      	ldr	r3, [pc, #60]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a0e      	ldr	r2, [pc, #56]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800762e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007632:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007634:	f7fb f97c 	bl	8002930 <HAL_GetTick>
 8007638:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800763a:	e008      	b.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800763c:	f7fb f978 	bl	8002930 <HAL_GetTick>
 8007640:	4602      	mov	r2, r0
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	1ad3      	subs	r3, r2, r3
 8007646:	2b64      	cmp	r3, #100	; 0x64
 8007648:	d901      	bls.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800764a:	2303      	movs	r3, #3
 800764c:	e007      	b.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800764e:	4b06      	ldr	r3, [pc, #24]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007656:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800765a:	d1ef      	bne.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 800765c:	2300      	movs	r3, #0
}
 800765e:	4618      	mov	r0, r3
 8007660:	3720      	adds	r7, #32
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
 8007666:	bf00      	nop
 8007668:	40023800 	.word	0x40023800

0800766c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b082      	sub	sp, #8
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d101      	bne.n	800767e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800767a:	2301      	movs	r3, #1
 800767c:	e01d      	b.n	80076ba <HAL_SD_Init+0x4e>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007684:	b2db      	uxtb	r3, r3
 8007686:	2b00      	cmp	r3, #0
 8007688:	d105      	bne.n	8007696 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f007 fafd 	bl	800ec90 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2203      	movs	r2, #3
 800769a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 f80f 	bl	80076c2 <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2201      	movs	r2, #1
 80076b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80076b8:	2300      	movs	r3, #0
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3708      	adds	r7, #8
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}

080076c2 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80076c2:	b5b0      	push	{r4, r5, r7, lr}
 80076c4:	b08e      	sub	sp, #56	; 0x38
 80076c6:	af04      	add	r7, sp, #16
 80076c8:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80076ca:	2300      	movs	r3, #0
 80076cc:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80076ce:	2300      	movs	r3, #0
 80076d0:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80076d2:	2300      	movs	r3, #0
 80076d4:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80076d6:	2300      	movs	r3, #0
 80076d8:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80076da:	2300      	movs	r3, #0
 80076dc:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80076de:	2300      	movs	r3, #0
 80076e0:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80076e2:	2376      	movs	r3, #118	; 0x76
 80076e4:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681d      	ldr	r5, [r3, #0]
 80076ea:	466c      	mov	r4, sp
 80076ec:	f107 0318 	add.w	r3, r7, #24
 80076f0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80076f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80076f8:	f107 030c 	add.w	r3, r7, #12
 80076fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80076fe:	4628      	mov	r0, r5
 8007700:	f001 fd90 	bl	8009224 <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd); 
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	685a      	ldr	r2, [r3, #4]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007712:	605a      	str	r2, [r3, #4]
  
  /* Set Power State to ON */
  SDMMC_PowerState_ON(hsd->Instance);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4618      	mov	r0, r3
 800771a:	f001 fdcd 	bl	80092b8 <SDMMC_PowerState_ON>
  
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	685a      	ldr	r2, [r3, #4]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800772c:	605a      	str	r2, [r3, #4]
  
  /* Required power up waiting time before starting the SD initialization sequence */
  HAL_Delay(2);
 800772e:	2002      	movs	r0, #2
 8007730:	f7fb f90a 	bl	8002948 <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 fee3 	bl	8008500 <SD_PowerON>
 800773a:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800773c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773e:	2b00      	cmp	r3, #0
 8007740:	d00b      	beq.n	800775a <HAL_SD_InitCard+0x98>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2201      	movs	r2, #1
 8007746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800774e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007750:	431a      	orrs	r2, r3
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007756:	2301      	movs	r3, #1
 8007758:	e013      	b.n	8007782 <HAL_SD_InitCard+0xc0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 fe07 	bl	800836e <SD_InitCard>
 8007760:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8007762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007764:	2b00      	cmp	r3, #0
 8007766:	d00b      	beq.n	8007780 <HAL_SD_InitCard+0xbe>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2201      	movs	r2, #1
 800776c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007776:	431a      	orrs	r2, r3
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800777c:	2301      	movs	r3, #1
 800777e:	e000      	b.n	8007782 <HAL_SD_InitCard+0xc0>
  }

  return HAL_OK;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3728      	adds	r7, #40	; 0x28
 8007786:	46bd      	mov	sp, r7
 8007788:	bdb0      	pop	{r4, r5, r7, pc}

0800778a <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800778a:	b590      	push	{r4, r7, lr}
 800778c:	b08f      	sub	sp, #60	; 0x3c
 800778e:	af00      	add	r7, sp, #0
 8007790:	60f8      	str	r0, [r7, #12]
 8007792:	60b9      	str	r1, [r7, #8]
 8007794:	607a      	str	r2, [r7, #4]
 8007796:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007798:	2300      	movs	r3, #0
 800779a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 800779c:	f7fb f8c8 	bl	8002930 <HAL_GetTick>
 80077a0:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0, *tempbuff = (uint32_t *)pData;
 80077a2:	2300      	movs	r3, #0
 80077a4:	633b      	str	r3, [r7, #48]	; 0x30
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d107      	bne.n	80077c0 <HAL_SD_ReadBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80077bc:	2301      	movs	r3, #1
 80077be:	e176      	b.n	8007aae <HAL_SD_ReadBlocks+0x324>
  }
 
  if(hsd->State == HAL_SD_STATE_READY)
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	f040 8169 	bne.w	8007aa0 <HAL_SD_ReadBlocks+0x316>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2200      	movs	r2, #0
 80077d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80077d4:	687a      	ldr	r2, [r7, #4]
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	441a      	add	r2, r3
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077de:	429a      	cmp	r2, r3
 80077e0:	d907      	bls.n	80077f2 <HAL_SD_ReadBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80077ee:	2301      	movs	r3, #1
 80077f0:	e15d      	b.n	8007aae <HAL_SD_ReadBlocks+0x324>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2203      	movs	r2, #3
 80077f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	2200      	movs	r2, #0
 8007800:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007806:	2b01      	cmp	r3, #1
 8007808:	d002      	beq.n	8007810 <HAL_SD_ReadBlocks+0x86>
    {
      BlockAdd *= 512;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	025b      	lsls	r3, r3, #9
 800780e:	607b      	str	r3, [r7, #4]
    }
      
    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007818:	4618      	mov	r0, r3
 800781a:	f001 fde1 	bl	80093e0 <SDMMC_CmdBlockLength>
 800781e:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 8007820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007822:	2b00      	cmp	r3, #0
 8007824:	d010      	beq.n	8007848 <HAL_SD_ReadBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);      
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800782e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007836:	431a      	orrs	r2, r3
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2201      	movs	r2, #1
 8007840:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007844:	2301      	movs	r3, #1
 8007846:	e132      	b.n	8007aae <HAL_SD_ReadBlocks+0x324>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007848:	f04f 33ff 	mov.w	r3, #4294967295
 800784c:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	025b      	lsls	r3, r3, #9
 8007852:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007854:	2390      	movs	r3, #144	; 0x90
 8007856:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007858:	2302      	movs	r3, #2
 800785a:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800785c:	2300      	movs	r3, #0
 800785e:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8007860:	2301      	movs	r3, #1
 8007862:	627b      	str	r3, [r7, #36]	; 0x24
    SDMMC_ConfigData(hsd->Instance, &config);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f107 0210 	add.w	r2, r7, #16
 800786c:	4611      	mov	r1, r2
 800786e:	4618      	mov	r0, r3
 8007870:	f001 fd8a 	bl	8009388 <SDMMC_ConfigData>
    
    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1)
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	2b01      	cmp	r3, #1
 8007878:	d90a      	bls.n	8007890 <HAL_SD_ReadBlocks+0x106>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2202      	movs	r2, #2
 800787e:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	6879      	ldr	r1, [r7, #4]
 8007886:	4618      	mov	r0, r3
 8007888:	f001 fdf2 	bl	8009470 <SDMMC_CmdReadMultiBlock>
 800788c:	6378      	str	r0, [r7, #52]	; 0x34
 800788e:	e009      	b.n	80078a4 <HAL_SD_ReadBlocks+0x11a>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2201      	movs	r2, #1
 8007894:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	6879      	ldr	r1, [r7, #4]
 800789c:	4618      	mov	r0, r3
 800789e:	f001 fdc3 	bl	8009428 <SDMMC_CmdReadSingleBlock>
 80078a2:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80078a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d04a      	beq.n	8007940 <HAL_SD_ReadBlocks+0x1b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80078b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078ba:	431a      	orrs	r2, r3
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2201      	movs	r2, #1
 80078c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	e0f0      	b.n	8007aae <HAL_SD_ReadBlocks+0x324>
    }
      
    /* Poll on SDMMC flags */
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d016      	beq.n	8007908 <HAL_SD_ReadBlocks+0x17e>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80078da:	2300      	movs	r3, #0
 80078dc:	633b      	str	r3, [r7, #48]	; 0x30
 80078de:	e00d      	b.n	80078fc <HAL_SD_ReadBlocks+0x172>
        {
          *(tempbuff + count) = SDMMC_ReadFIFO(hsd->Instance);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	6819      	ldr	r1, [r3, #0]
 80078e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e6:	009b      	lsls	r3, r3, #2
 80078e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078ea:	18d4      	adds	r4, r2, r3
 80078ec:	4608      	mov	r0, r1
 80078ee:	f001 fcc5 	bl	800927c <SDMMC_ReadFIFO>
 80078f2:	4603      	mov	r3, r0
 80078f4:	6023      	str	r3, [r4, #0]
        for(count = 0U; count < 8U; count++)
 80078f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f8:	3301      	adds	r3, #1
 80078fa:	633b      	str	r3, [r7, #48]	; 0x30
 80078fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078fe:	2b07      	cmp	r3, #7
 8007900:	d9ee      	bls.n	80078e0 <HAL_SD_ReadBlocks+0x156>
        }
        tempbuff += 8U;
 8007902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007904:	3320      	adds	r3, #32
 8007906:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8007908:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800790a:	2b00      	cmp	r3, #0
 800790c:	d007      	beq.n	800791e <HAL_SD_ReadBlocks+0x194>
 800790e:	f7fb f80f 	bl	8002930 <HAL_GetTick>
 8007912:	4602      	mov	r2, r0
 8007914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007916:	1ad3      	subs	r3, r2, r3
 8007918:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800791a:	429a      	cmp	r2, r3
 800791c:	d810      	bhi.n	8007940 <HAL_SD_ReadBlocks+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007926:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800792c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2201      	movs	r2, #1
 8007938:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 800793c:	2303      	movs	r3, #3
 800793e:	e0b6      	b.n	8007aae <HAL_SD_ReadBlocks+0x324>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007946:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800794a:	2b00      	cmp	r3, #0
 800794c:	d0be      	beq.n	80078cc <HAL_SD_ReadBlocks+0x142>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007958:	2b00      	cmp	r3, #0
 800795a:	d020      	beq.n	800799e <HAL_SD_ReadBlocks+0x214>
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	2b01      	cmp	r3, #1
 8007960:	d91d      	bls.n	800799e <HAL_SD_ReadBlocks+0x214>
    {    
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007966:	2b03      	cmp	r3, #3
 8007968:	d019      	beq.n	800799e <HAL_SD_ReadBlocks+0x214>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4618      	mov	r0, r3
 8007970:	f001 fdea 	bl	8009548 <SDMMC_CmdStopTransfer>
 8007974:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 8007976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007978:	2b00      	cmp	r3, #0
 800797a:	d010      	beq.n	800799e <HAL_SD_ReadBlocks+0x214>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007984:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800798a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800798c:	431a      	orrs	r2, r3
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2201      	movs	r2, #1
 8007996:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 800799a:	2301      	movs	r3, #1
 800799c:	e087      	b.n	8007aae <HAL_SD_ReadBlocks+0x324>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079a4:	f003 0308 	and.w	r3, r3, #8
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d010      	beq.n	80079ce <HAL_SD_ReadBlocks+0x244>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80079b4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ba:	f043 0208 	orr.w	r2, r3, #8
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2201      	movs	r2, #1
 80079c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80079ca:	2301      	movs	r3, #1
 80079cc:	e06f      	b.n	8007aae <HAL_SD_ReadBlocks+0x324>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079d4:	f003 0302 	and.w	r3, r3, #2
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d010      	beq.n	80079fe <HAL_SD_ReadBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80079e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ea:	f043 0202 	orr.w	r2, r3, #2
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2201      	movs	r2, #1
 80079f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80079fa:	2301      	movs	r3, #1
 80079fc:	e057      	b.n	8007aae <HAL_SD_ReadBlocks+0x324>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a04:	f003 0320 	and.w	r3, r3, #32
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d037      	beq.n	8007a7c <HAL_SD_ReadBlocks+0x2f2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007a14:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a1a:	f043 0220 	orr.w	r2, r3, #32
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2201      	movs	r2, #1
 8007a26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	e03f      	b.n	8007aae <HAL_SD_ReadBlocks+0x324>
    }
    
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
    {
      *tempbuff = SDMMC_ReadFIFO(hsd->Instance);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4618      	mov	r0, r3
 8007a34:	f001 fc22 	bl	800927c <SDMMC_ReadFIFO>
 8007a38:	4602      	mov	r2, r0
 8007a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a3c:	601a      	str	r2, [r3, #0]
      tempbuff++;
 8007a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a40:	3304      	adds	r3, #4
 8007a42:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8007a44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d007      	beq.n	8007a5a <HAL_SD_ReadBlocks+0x2d0>
 8007a4a:	f7fa ff71 	bl	8002930 <HAL_GetTick>
 8007a4e:	4602      	mov	r2, r0
 8007a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a52:	1ad3      	subs	r3, r2, r3
 8007a54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d810      	bhi.n	8007a7c <HAL_SD_ReadBlocks+0x2f2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);        
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007a62:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a68:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2201      	movs	r2, #1
 8007a74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	e018      	b.n	8007aae <HAL_SD_ReadBlocks+0x324>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d1d1      	bne.n	8007a2e <HAL_SD_ReadBlocks+0x2a4>
      }
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007a92:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2201      	movs	r2, #1
 8007a98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	e006      	b.n	8007aae <HAL_SD_ReadBlocks+0x324>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007aac:	2301      	movs	r3, #1
  }
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	373c      	adds	r7, #60	; 0x3c
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd90      	pop	{r4, r7, pc}

08007ab6 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007ab6:	b580      	push	{r7, lr}
 8007ab8:	b08e      	sub	sp, #56	; 0x38
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	60f8      	str	r0, [r7, #12]
 8007abe:	60b9      	str	r1, [r7, #8]
 8007ac0:	607a      	str	r2, [r7, #4]
 8007ac2:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 8007ac8:	f7fa ff32 	bl	8002930 <HAL_GetTick>
 8007acc:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t *tempbuff = (uint32_t *)pData;
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d107      	bne.n	8007aec <HAL_SD_WriteBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	e147      	b.n	8007d7c <HAL_SD_WriteBlocks+0x2c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	f040 813a 	bne.w	8007d6e <HAL_SD_WriteBlocks+0x2b8>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2200      	movs	r2, #0
 8007afe:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	441a      	add	r2, r3
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d907      	bls.n	8007b1e <HAL_SD_WriteBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b12:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	e12e      	b.n	8007d7c <HAL_SD_WriteBlocks+0x2c6>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2203      	movs	r2, #3
 8007b22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	62da      	str	r2, [r3, #44]	; 0x2c
     
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d002      	beq.n	8007b3c <HAL_SD_WriteBlocks+0x86>
    {
      BlockAdd *= 512;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	025b      	lsls	r3, r3, #9
 8007b3a:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007b44:	4618      	mov	r0, r3
 8007b46:	f001 fc4b 	bl	80093e0 <SDMMC_CmdBlockLength>
 8007b4a:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d010      	beq.n	8007b74 <HAL_SD_WriteBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007b5a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b62:	431a      	orrs	r2, r3
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007b70:	2301      	movs	r3, #1
 8007b72:	e103      	b.n	8007d7c <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d90a      	bls.n	8007b90 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2220      	movs	r2, #32
 8007b7e:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	6879      	ldr	r1, [r7, #4]
 8007b86:	4618      	mov	r0, r3
 8007b88:	f001 fcba 	bl	8009500 <SDMMC_CmdWriteMultiBlock>
 8007b8c:	6378      	str	r0, [r7, #52]	; 0x34
 8007b8e:	e009      	b.n	8007ba4 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2210      	movs	r2, #16
 8007b94:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	6879      	ldr	r1, [r7, #4]
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f001 fc8b 	bl	80094b8 <SDMMC_CmdWriteSingleBlock>
 8007ba2:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d010      	beq.n	8007bcc <HAL_SD_WriteBlocks+0x116>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007bb2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bba:	431a      	orrs	r2, r3
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	e0d7      	b.n	8007d7c <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8007bd0:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	025b      	lsls	r3, r3, #9
 8007bd6:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007bd8:	2390      	movs	r3, #144	; 0x90
 8007bda:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007be0:	2300      	movs	r3, #0
 8007be2:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8007be4:	2301      	movs	r3, #1
 8007be6:	627b      	str	r3, [r7, #36]	; 0x24
    SDMMC_ConfigData(hsd->Instance, &config);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f107 0210 	add.w	r2, r7, #16
 8007bf0:	4611      	mov	r1, r2
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f001 fbc8 	bl	8009388 <SDMMC_ConfigData>
    
    /* Write block(s) in polling mode */
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007bf8:	e037      	b.n	8007c6a <HAL_SD_WriteBlocks+0x1b4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE))
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d014      	beq.n	8007c32 <HAL_SD_WriteBlocks+0x17c>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8007c08:	2300      	movs	r3, #0
 8007c0a:	633b      	str	r3, [r7, #48]	; 0x30
 8007c0c:	e00b      	b.n	8007c26 <HAL_SD_WriteBlocks+0x170>
        {
          SDMMC_WriteFIFO(hsd->Instance, (tempbuff + count));
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	6818      	ldr	r0, [r3, #0]
 8007c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c18:	4413      	add	r3, r2
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	f001 fb3b 	bl	8009296 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8007c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c22:	3301      	adds	r3, #1
 8007c24:	633b      	str	r3, [r7, #48]	; 0x30
 8007c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c28:	2b07      	cmp	r3, #7
 8007c2a:	d9f0      	bls.n	8007c0e <HAL_SD_WriteBlocks+0x158>
        }
        tempbuff += 8U;
 8007c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c2e:	3320      	adds	r3, #32
 8007c30:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8007c32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d007      	beq.n	8007c48 <HAL_SD_WriteBlocks+0x192>
 8007c38:	f7fa fe7a 	bl	8002930 <HAL_GetTick>
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c40:	1ad3      	subs	r3, r2, r3
 8007c42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d810      	bhi.n	8007c6a <HAL_SD_WriteBlocks+0x1b4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007c50:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c58:	431a      	orrs	r2, r3
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2201      	movs	r2, #1
 8007c62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 8007c66:	2303      	movs	r3, #3
 8007c68:	e088      	b.n	8007d7c <HAL_SD_WriteBlocks+0x2c6>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c70:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d0c0      	beq.n	8007bfa <HAL_SD_WriteBlocks+0x144>
      }
    }
    
    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d020      	beq.n	8007cc8 <HAL_SD_WriteBlocks+0x212>
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d91d      	bls.n	8007cc8 <HAL_SD_WriteBlocks+0x212>
    { 
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c90:	2b03      	cmp	r3, #3
 8007c92:	d019      	beq.n	8007cc8 <HAL_SD_WriteBlocks+0x212>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f001 fc55 	bl	8009548 <SDMMC_CmdStopTransfer>
 8007c9e:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 8007ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d010      	beq.n	8007cc8 <HAL_SD_WriteBlocks+0x212>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007cae:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cb6:	431a      	orrs	r2, r3
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	e059      	b.n	8007d7c <HAL_SD_WriteBlocks+0x2c6>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cce:	f003 0308 	and.w	r3, r3, #8
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d010      	beq.n	8007cf8 <HAL_SD_WriteBlocks+0x242>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007cde:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce4:	f043 0208 	orr.w	r2, r3, #8
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	e041      	b.n	8007d7c <HAL_SD_WriteBlocks+0x2c6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cfe:	f003 0302 	and.w	r3, r3, #2
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d010      	beq.n	8007d28 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007d0e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d14:	f043 0202 	orr.w	r2, r3, #2
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007d24:	2301      	movs	r3, #1
 8007d26:	e029      	b.n	8007d7c <HAL_SD_WriteBlocks+0x2c6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d2e:	f003 0310 	and.w	r3, r3, #16
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d010      	beq.n	8007d58 <HAL_SD_WriteBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007d3e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d44:	f043 0210 	orr.w	r2, r3, #16
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007d54:	2301      	movs	r3, #1
 8007d56:	e011      	b.n	8007d7c <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007d60:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2201      	movs	r2, #1
 8007d66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	e006      	b.n	8007d7c <HAL_SD_WriteBlocks+0x2c6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d72:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007d7a:	2301      	movs	r3, #1
  }
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3738      	adds	r7, #56	; 0x38
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b085      	sub	sp, #20
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d96:	0e1b      	lsrs	r3, r3, #24
 8007d98:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	099b      	lsrs	r3, r3, #6
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	f003 0303 	and.w	r3, r3, #3
 8007da4:	b2da      	uxtb	r2, r3
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	089b      	lsrs	r3, r3, #2
 8007dae:	b2db      	uxtb	r3, r3
 8007db0:	f003 030f 	and.w	r3, r3, #15
 8007db4:	b2da      	uxtb	r2, r3
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	f003 0303 	and.w	r3, r3, #3
 8007dc2:	b2da      	uxtb	r2, r3
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0] & 0x00FF0000) >> 16;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dcc:	0c1b      	lsrs	r3, r3, #16
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	b2da      	uxtb	r2, r3
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0] & 0x0000FF00) >> 8;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dde:	0a1b      	lsrs	r3, r3, #8
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	b2da      	uxtb	r2, r3
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0] & 0x000000FF;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	b2da      	uxtb	r2, r3
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e00:	0e1b      	lsrs	r3, r3, #24
 8007e02:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	011b      	lsls	r3, r3, #4
 8007e0a:	b29a      	uxth	r2, r3
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1] & 0x00FF0000U) >> 16;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e14:	0c1b      	lsrs	r3, r3, #16
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	88db      	ldrh	r3, [r3, #6]
 8007e1e:	b29a      	uxth	r2, r3
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	091b      	lsrs	r3, r3, #4
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	f003 030f 	and.w	r3, r3, #15
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	b29a      	uxth	r2, r3
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	b2db      	uxtb	r3, r3
 8007e38:	f003 030f 	and.w	r3, r3, #15
 8007e3c:	b2da      	uxtb	r2, r3
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e46:	0a1b      	lsrs	r3, r3, #8
 8007e48:	b2db      	uxtb	r3, r3
 8007e4a:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	09db      	lsrs	r3, r3, #7
 8007e50:	b2db      	uxtb	r3, r3
 8007e52:	f003 0301 	and.w	r3, r3, #1
 8007e56:	b2da      	uxtb	r2, r3
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	099b      	lsrs	r3, r3, #6
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	f003 0301 	and.w	r3, r3, #1
 8007e66:	b2da      	uxtb	r2, r3
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	095b      	lsrs	r3, r3, #5
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	f003 0301 	and.w	r3, r3, #1
 8007e76:	b2da      	uxtb	r2, r3
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	091b      	lsrs	r3, r3, #4
 8007e80:	b2db      	uxtb	r3, r3
 8007e82:	f003 0301 	and.w	r3, r3, #1
 8007e86:	b2da      	uxtb	r2, r3
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	f040 8086 	bne.w	8007fa8 <HAL_SD_GetCardCSD+0x224>
  {
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	029b      	lsls	r3, r3, #10
 8007ea0:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007eac:	b2db      	uxtb	r3, r3
 8007eae:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2;
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	691a      	ldr	r2, [r3, #16]
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	009b      	lsls	r3, r3, #2
 8007eb8:	431a      	orrs	r2, r3
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ec2:	0e1b      	lsrs	r3, r3, #24
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	691a      	ldr	r2, [r3, #16]
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	099b      	lsrs	r3, r3, #6
 8007ed0:	f003 0303 	and.w	r3, r3, #3
 8007ed4:	431a      	orrs	r2, r3
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	08db      	lsrs	r3, r3, #3
 8007ede:	b2db      	uxtb	r3, r3
 8007ee0:	f003 0307 	and.w	r3, r3, #7
 8007ee4:	b2da      	uxtb	r2, r3
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	f003 0307 	and.w	r3, r3, #7
 8007ef2:	b2da      	uxtb	r2, r3
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007efc:	0c1b      	lsrs	r3, r3, #16
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	095b      	lsrs	r3, r3, #5
 8007f06:	b2db      	uxtb	r3, r3
 8007f08:	f003 0307 	and.w	r3, r3, #7
 8007f0c:	b2da      	uxtb	r2, r3
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	089b      	lsrs	r3, r3, #2
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	f003 0307 	and.w	r3, r3, #7
 8007f1c:	b2da      	uxtb	r2, r3
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	005b      	lsls	r3, r3, #1
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	f003 0306 	and.w	r3, r3, #6
 8007f2e:	b2da      	uxtb	r2, r3
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f38:	0a1b      	lsrs	r3, r3, #8
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	7e1b      	ldrb	r3, [r3, #24]
 8007f42:	b2da      	uxtb	r2, r3
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	09db      	lsrs	r3, r3, #7
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	f003 0301 	and.w	r3, r3, #1
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	4313      	orrs	r3, r2
 8007f52:	b2da      	uxtb	r2, r3
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	691b      	ldr	r3, [r3, #16]
 8007f5c:	1c5a      	adds	r2, r3, #1
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	7e1b      	ldrb	r3, [r3, #24]
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	3302      	adds	r3, #2
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	409a      	lsls	r2, r3
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f72:	fb02 f203 	mul.w	r2, r2, r3
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	7a1b      	ldrb	r3, [r3, #8]
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	461a      	mov	r2, r3
 8007f82:	2301      	movs	r3, #1
 8007f84:	4093      	lsls	r3, r2
 8007f86:	461a      	mov	r2, r3
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007f94:	0a52      	lsrs	r2, r2, #9
 8007f96:	fb02 f203 	mul.w	r2, r2, r3
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fa4:	661a      	str	r2, [r3, #96]	; 0x60
 8007fa6:	e04d      	b.n	8008044 <HAL_SD_GetCardCSD+0x2c0>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d138      	bne.n	8008022 <HAL_SD_GetCardCSD+0x29e>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007fb4:	b2db      	uxtb	r3, r3
 8007fb6:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	041b      	lsls	r3, r3, #16
 8007fbc:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fc8:	0e1b      	lsrs	r3, r3, #24
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8);
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	691a      	ldr	r2, [r3, #16]
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	021b      	lsls	r3, r3, #8
 8007fd6:	431a      	orrs	r2, r3
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fe0:	0c1b      	lsrs	r3, r3, #16
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	691a      	ldr	r2, [r3, #16]
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	431a      	orrs	r2, r3
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ff6:	0a1b      	lsrs	r3, r3, #8
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	691b      	ldr	r3, [r3, #16]
 8008000:	3301      	adds	r3, #1
 8008002:	029a      	lsls	r2, r3, #10
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	655a      	str	r2, [r3, #84]	; 0x54
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008016:	659a      	str	r2, [r3, #88]	; 0x58
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	661a      	str	r2, [r3, #96]	; 0x60
 8008020:	e010      	b.n	8008044 <HAL_SD_GetCardCSD+0x2c0>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800802a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008030:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2201      	movs	r2, #1
 800803c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008040:	2301      	movs	r3, #1
 8008042:	e0c1      	b.n	80081c8 <HAL_SD_GetCardCSD+0x444>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	099b      	lsrs	r3, r3, #6
 8008048:	b2db      	uxtb	r3, r3
 800804a:	f003 0301 	and.w	r3, r3, #1
 800804e:	b2da      	uxtb	r2, r3
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	b2db      	uxtb	r3, r3
 8008058:	005b      	lsls	r3, r3, #1
 800805a:	b2db      	uxtb	r3, r3
 800805c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8008060:	b2da      	uxtb	r2, r3
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800806a:	b2db      	uxtb	r3, r3
 800806c:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	7e9b      	ldrb	r3, [r3, #26]
 8008072:	b2da      	uxtb	r2, r3
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	09db      	lsrs	r3, r3, #7
 8008078:	b2db      	uxtb	r3, r3
 800807a:	f003 0301 	and.w	r3, r3, #1
 800807e:	b2db      	uxtb	r3, r3
 8008080:	4313      	orrs	r3, r2
 8008082:	b2da      	uxtb	r2, r3
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	b2db      	uxtb	r3, r3
 800808c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008090:	b2da      	uxtb	r2, r3
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800809a:	0e1b      	lsrs	r3, r3, #24
 800809c:	b2db      	uxtb	r3, r3
 800809e:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	09db      	lsrs	r3, r3, #7
 80080a4:	b2db      	uxtb	r3, r3
 80080a6:	f003 0301 	and.w	r3, r3, #1
 80080aa:	b2da      	uxtb	r2, r3
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	095b      	lsrs	r3, r3, #5
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	f003 0303 	and.w	r3, r3, #3
 80080ba:	b2da      	uxtb	r2, r3
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	089b      	lsrs	r3, r3, #2
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	f003 0307 	and.w	r3, r3, #7
 80080ca:	b2da      	uxtb	r2, r3
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	b2db      	uxtb	r3, r3
 80080d4:	009b      	lsls	r3, r3, #2
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	f003 030c 	and.w	r3, r3, #12
 80080dc:	b2da      	uxtb	r2, r3
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x00FF0000) >> 16);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080e6:	0c1b      	lsrs	r3, r3, #16
 80080e8:	b2db      	uxtb	r3, r3
 80080ea:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	7fdb      	ldrb	r3, [r3, #31]
 80080f0:	b2da      	uxtb	r2, r3
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	099b      	lsrs	r3, r3, #6
 80080f6:	b2db      	uxtb	r3, r3
 80080f8:	f003 0303 	and.w	r3, r3, #3
 80080fc:	b2db      	uxtb	r3, r3
 80080fe:	4313      	orrs	r3, r2
 8008100:	b2da      	uxtb	r2, r3
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	095b      	lsrs	r3, r3, #5
 800810a:	b2db      	uxtb	r3, r3
 800810c:	f003 0301 	and.w	r3, r3, #1
 8008110:	b2da      	uxtb	r2, r3
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0;
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	2200      	movs	r2, #0
 800811c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	b2db      	uxtb	r3, r3
 8008124:	f003 0301 	and.w	r3, r3, #1
 8008128:	b2da      	uxtb	r2, r3
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x0000FF00) >> 8);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008134:	0a1b      	lsrs	r3, r3, #8
 8008136:	b2db      	uxtb	r3, r3
 8008138:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	09db      	lsrs	r3, r3, #7
 800813e:	b2db      	uxtb	r3, r3
 8008140:	f003 0301 	and.w	r3, r3, #1
 8008144:	b2da      	uxtb	r2, r3
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	099b      	lsrs	r3, r3, #6
 8008150:	b2db      	uxtb	r3, r3
 8008152:	f003 0301 	and.w	r3, r3, #1
 8008156:	b2da      	uxtb	r2, r3
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	095b      	lsrs	r3, r3, #5
 8008162:	b2db      	uxtb	r3, r3
 8008164:	f003 0301 	and.w	r3, r3, #1
 8008168:	b2da      	uxtb	r2, r3
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	091b      	lsrs	r3, r3, #4
 8008174:	b2db      	uxtb	r3, r3
 8008176:	f003 0301 	and.w	r3, r3, #1
 800817a:	b2da      	uxtb	r2, r3
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	089b      	lsrs	r3, r3, #2
 8008186:	b2db      	uxtb	r3, r3
 8008188:	f003 0303 	and.w	r3, r3, #3
 800818c:	b2da      	uxtb	r2, r3
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	b2db      	uxtb	r3, r3
 8008198:	f003 0303 	and.w	r3, r3, #3
 800819c:	b2da      	uxtb	r2, r3
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3] & 0x000000FF);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081a8:	b2db      	uxtb	r3, r3
 80081aa:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	085b      	lsrs	r3, r3, #1
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081b6:	b2da      	uxtb	r2, r3
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1;
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	2201      	movs	r2, #1
 80081c2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 80081c6:	2300      	movs	r3, #0
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3714      	adds	r7, #20
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr

080081d4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b083      	sub	sp, #12
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 800821e:	2300      	movs	r3, #0
}
 8008220:	4618      	mov	r0, r3
 8008222:	370c      	adds	r7, #12
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr

0800822c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800822c:	b5b0      	push	{r4, r5, r7, lr}
 800822e:	b08e      	sub	sp, #56	; 0x38
 8008230:	af04      	add	r7, sp, #16
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008236:	2300      	movs	r3, #0
 8008238:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2203      	movs	r2, #3
 800823e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008246:	2b03      	cmp	r3, #3
 8008248:	d02e      	beq.n	80082a8 <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008250:	d106      	bne.n	8008260 <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008256:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	639a      	str	r2, [r3, #56]	; 0x38
 800825e:	e029      	b.n	80082b4 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008266:	d10a      	bne.n	800827e <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 fa1b 	bl	80086a4 <SD_WideBus_Enable>
 800826e:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008276:	431a      	orrs	r2, r3
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	639a      	str	r2, [r3, #56]	; 0x38
 800827c:	e01a      	b.n	80082b4 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d10a      	bne.n	800829a <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 fa5a 	bl	800873e <SD_WideBus_Disable>
 800828a:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008292:	431a      	orrs	r2, r3
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	639a      	str	r2, [r3, #56]	; 0x38
 8008298:	e00c      	b.n	80082b4 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800829e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	639a      	str	r2, [r3, #56]	; 0x38
 80082a6:	e005      	b.n	80082b4 <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d00a      	beq.n	80082d2 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80082c4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2201      	movs	r2, #1
 80082ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80082ce:	2301      	movs	r3, #1
 80082d0:	e024      	b.n	800831c <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	68db      	ldr	r3, [r3, #12]
 80082e2:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	695b      	ldr	r3, [r3, #20]
 80082ec:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	699b      	ldr	r3, [r3, #24]
 80082f2:	623b      	str	r3, [r7, #32]
    SDMMC_Init(hsd->Instance, Init);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681d      	ldr	r5, [r3, #0]
 80082f8:	466c      	mov	r4, sp
 80082fa:	f107 0318 	add.w	r3, r7, #24
 80082fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008302:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008306:	f107 030c 	add.w	r3, r7, #12
 800830a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800830c:	4628      	mov	r0, r5
 800830e:	f000 ff89 	bl	8009224 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2201      	movs	r2, #1
 8008316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 800831a:	2300      	movs	r3, #0
}
 800831c:	4618      	mov	r0, r3
 800831e:	3728      	adds	r7, #40	; 0x28
 8008320:	46bd      	mov	sp, r7
 8008322:	bdb0      	pop	{r4, r5, r7, pc}

08008324 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b086      	sub	sp, #24
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 800832c:	2304      	movs	r3, #4
 800832e:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008330:	2300      	movs	r3, #0
 8008332:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 8008334:	2300      	movs	r3, #0
 8008336:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 8008338:	f107 030c 	add.w	r3, r7, #12
 800833c:	4619      	mov	r1, r3
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 f986 	bl	8008650 <SD_SendStatus>
 8008344:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d005      	beq.n	8008358 <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	431a      	orrs	r2, r3
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9) & 0x0F);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	0a5b      	lsrs	r3, r3, #9
 800835c:	b2db      	uxtb	r3, r3
 800835e:	f003 030f 	and.w	r3, r3, #15
 8008362:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 8008364:	7dfb      	ldrb	r3, [r7, #23]
}
 8008366:	4618      	mov	r0, r3
 8008368:	3718      	adds	r7, #24
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}

0800836e <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800836e:	b5b0      	push	{r4, r5, r7, lr}
 8008370:	b094      	sub	sp, #80	; 0x50
 8008372:	af04      	add	r7, sp, #16
 8008374:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008376:	2300      	movs	r3, #0
 8008378:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1;
 800837a:	2301      	movs	r3, #1
 800837c:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4618      	mov	r0, r3
 8008384:	f000 ffa6 	bl	80092d4 <SDMMC_GetPowerState>
 8008388:	4603      	mov	r3, r0
 800838a:	2b00      	cmp	r3, #0
 800838c:	d102      	bne.n	8008394 <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800838e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008392:	e0b1      	b.n	80084f8 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008398:	2b03      	cmp	r3, #3
 800839a:	d02f      	beq.n	80083fc <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4618      	mov	r0, r3
 80083a2:	f001 f9ec 	bl	800977e <SDMMC_CmdSendCID>
 80083a6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80083a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d001      	beq.n	80083b2 <SD_InitCard+0x44>
    {
      return errorstate;
 80083ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083b0:	e0a2      	b.n	80084f8 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	2100      	movs	r1, #0
 80083b8:	4618      	mov	r0, r3
 80083ba:	f000 ffd0 	bl	800935e <SDMMC_GetResponse>
 80083be:	4602      	mov	r2, r0
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	2104      	movs	r1, #4
 80083ca:	4618      	mov	r0, r3
 80083cc:	f000 ffc7 	bl	800935e <SDMMC_GetResponse>
 80083d0:	4602      	mov	r2, r0
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	2108      	movs	r1, #8
 80083dc:	4618      	mov	r0, r3
 80083de:	f000 ffbe 	bl	800935e <SDMMC_GetResponse>
 80083e2:	4602      	mov	r2, r0
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	210c      	movs	r1, #12
 80083ee:	4618      	mov	r0, r3
 80083f0:	f000 ffb5 	bl	800935e <SDMMC_GetResponse>
 80083f4:	4602      	mov	r2, r0
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008400:	2b03      	cmp	r3, #3
 8008402:	d00d      	beq.n	8008420 <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f107 020e 	add.w	r2, r7, #14
 800840c:	4611      	mov	r1, r2
 800840e:	4618      	mov	r0, r3
 8008410:	f001 f9f6 	bl	8009800 <SDMMC_CmdSetRelAdd>
 8008414:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008418:	2b00      	cmp	r3, #0
 800841a:	d001      	beq.n	8008420 <SD_InitCard+0xb2>
    {
      return errorstate;
 800841c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800841e:	e06b      	b.n	80084f8 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008424:	2b03      	cmp	r3, #3
 8008426:	d036      	beq.n	8008496 <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008428:	89fb      	ldrh	r3, [r7, #14]
 800842a:	461a      	mov	r2, r3
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681a      	ldr	r2, [r3, #0]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008438:	041b      	lsls	r3, r3, #16
 800843a:	4619      	mov	r1, r3
 800843c:	4610      	mov	r0, r2
 800843e:	f001 f9be 	bl	80097be <SDMMC_CmdSendCSD>
 8008442:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008446:	2b00      	cmp	r3, #0
 8008448:	d001      	beq.n	800844e <SD_InitCard+0xe0>
    {
      return errorstate;
 800844a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800844c:	e054      	b.n	80084f8 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	2100      	movs	r1, #0
 8008454:	4618      	mov	r0, r3
 8008456:	f000 ff82 	bl	800935e <SDMMC_GetResponse>
 800845a:	4602      	mov	r2, r0
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	2104      	movs	r1, #4
 8008466:	4618      	mov	r0, r3
 8008468:	f000 ff79 	bl	800935e <SDMMC_GetResponse>
 800846c:	4602      	mov	r2, r0
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	2108      	movs	r1, #8
 8008478:	4618      	mov	r0, r3
 800847a:	f000 ff70 	bl	800935e <SDMMC_GetResponse>
 800847e:	4602      	mov	r2, r0
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	210c      	movs	r1, #12
 800848a:	4618      	mov	r0, r3
 800848c:	f000 ff67 	bl	800935e <SDMMC_GetResponse>
 8008490:	4602      	mov	r2, r0
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	2104      	movs	r1, #4
 800849c:	4618      	mov	r0, r3
 800849e:	f000 ff5e 	bl	800935e <SDMMC_GetResponse>
 80084a2:	4603      	mov	r3, r0
 80084a4:	0d1a      	lsrs	r2, r3, #20
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 80084aa:	f107 0310 	add.w	r3, r7, #16
 80084ae:	4619      	mov	r1, r3
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f7ff fc67 	bl	8007d84 <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6819      	ldr	r1, [r3, #0]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084be:	041b      	lsls	r3, r3, #16
 80084c0:	f04f 0400 	mov.w	r4, #0
 80084c4:	461a      	mov	r2, r3
 80084c6:	4623      	mov	r3, r4
 80084c8:	4608      	mov	r0, r1
 80084ca:	f001 f861 	bl	8009590 <SDMMC_CmdSelDesel>
 80084ce:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80084d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d001      	beq.n	80084da <SD_InitCard+0x16c>
  {
    return errorstate;
 80084d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084d8:	e00e      	b.n	80084f8 <SD_InitCard+0x18a>
  }

  /* Configure SDMMC peripheral interface */     
  SDMMC_Init(hsd->Instance, hsd->Init);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681d      	ldr	r5, [r3, #0]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	466c      	mov	r4, sp
 80084e2:	f103 0210 	add.w	r2, r3, #16
 80084e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80084e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80084ec:	3304      	adds	r3, #4
 80084ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80084f0:	4628      	mov	r0, r5
 80084f2:	f000 fe97 	bl	8009224 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80084f6:	2300      	movs	r3, #0
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3740      	adds	r7, #64	; 0x40
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bdb0      	pop	{r4, r5, r7, pc}

08008500 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b086      	sub	sp, #24
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8008508:	2300      	movs	r3, #0
 800850a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0, validvoltage = 0;
 800850c:	2300      	movs	r3, #0
 800850e:	617b      	str	r3, [r7, #20]
 8008510:	2300      	movs	r3, #0
 8008512:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008514:	2300      	movs	r3, #0
 8008516:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4618      	mov	r0, r3
 800851e:	f001 f85c 	bl	80095da <SDMMC_CmdGoIdleState>
 8008522:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d001      	beq.n	800852e <SD_PowerON+0x2e>
  {
    return errorstate;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	e08c      	b.n	8008648 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4618      	mov	r0, r3
 8008534:	f001 f871 	bl	800961a <SDMMC_CmdOperCond>
 8008538:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d03d      	beq.n	80085bc <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2200      	movs	r2, #0
 8008544:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 8008546:	e032      	b.n	80085ae <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	1c5a      	adds	r2, r3, #1
 800854c:	60ba      	str	r2, [r7, #8]
 800854e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008552:	4293      	cmp	r3, r2
 8008554:	d102      	bne.n	800855c <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008556:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800855a:	e075      	b.n	8008648 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	2100      	movs	r1, #0
 8008562:	4618      	mov	r0, r3
 8008564:	f001 f87a 	bl	800965c <SDMMC_CmdAppCommand>
 8008568:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d002      	beq.n	8008576 <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008570:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008574:	e068      	b.n	8008648 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	2100      	movs	r1, #0
 800857c:	4618      	mov	r0, r3
 800857e:	f001 f891 	bl	80096a4 <SDMMC_CmdAppOperCommand>
 8008582:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d002      	beq.n	8008590 <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800858a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800858e:	e05b      	b.n	8008648 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	2100      	movs	r1, #0
 8008596:	4618      	mov	r0, r3
 8008598:	f000 fee1 	bl	800935e <SDMMC_GetResponse>
 800859c:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	0fdb      	lsrs	r3, r3, #31
 80085a2:	2b01      	cmp	r3, #1
 80085a4:	bf0c      	ite	eq
 80085a6:	2301      	moveq	r3, #1
 80085a8:	2300      	movne	r3, #0
 80085aa:	b2db      	uxtb	r3, r3
 80085ac:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d0c9      	beq.n	8008548 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2200      	movs	r2, #0
 80085b8:	645a      	str	r2, [r3, #68]	; 0x44
 80085ba:	e044      	b.n	8008646 <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2201      	movs	r2, #1
 80085c0:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 80085c2:	e031      	b.n	8008628 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	1c5a      	adds	r2, r3, #1
 80085c8:	60ba      	str	r2, [r7, #8]
 80085ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d102      	bne.n	80085d8 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80085d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80085d6:	e037      	b.n	8008648 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	2100      	movs	r1, #0
 80085de:	4618      	mov	r0, r3
 80085e0:	f001 f83c 	bl	800965c <SDMMC_CmdAppCommand>
 80085e4:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d001      	beq.n	80085f0 <SD_PowerON+0xf0>
      {
        return errorstate;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	e02b      	b.n	8008648 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80085f8:	4618      	mov	r0, r3
 80085fa:	f001 f853 	bl	80096a4 <SDMMC_CmdAppOperCommand>
 80085fe:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d001      	beq.n	800860a <SD_PowerON+0x10a>
      {
        return errorstate;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	e01e      	b.n	8008648 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	2100      	movs	r1, #0
 8008610:	4618      	mov	r0, r3
 8008612:	f000 fea4 	bl	800935e <SDMMC_GetResponse>
 8008616:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	0fdb      	lsrs	r3, r3, #31
 800861c:	2b01      	cmp	r3, #1
 800861e:	bf0c      	ite	eq
 8008620:	2301      	moveq	r3, #1
 8008622:	2300      	movne	r3, #0
 8008624:	b2db      	uxtb	r3, r3
 8008626:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d0ca      	beq.n	80085c4 <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008634:	2b00      	cmp	r3, #0
 8008636:	d003      	beq.n	8008640 <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2201      	movs	r2, #1
 800863c:	645a      	str	r2, [r3, #68]	; 0x44
 800863e:	e002      	b.n	8008646 <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2200      	movs	r2, #0
 8008644:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 8008646:	2300      	movs	r3, #0
}
 8008648:	4618      	mov	r0, r3
 800864a:	3718      	adds	r7, #24
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}

08008650 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800865a:	2300      	movs	r3, #0
 800865c:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d102      	bne.n	800866a <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 8008664:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008668:	e018      	b.n	800869c <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681a      	ldr	r2, [r3, #0]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008672:	041b      	lsls	r3, r3, #16
 8008674:	4619      	mov	r1, r3
 8008676:	4610      	mov	r0, r2
 8008678:	f001 f8e5 	bl	8009846 <SDMMC_CmdSendStatus>
 800867c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d001      	beq.n	8008688 <SD_SendStatus+0x38>
  {
    return errorstate;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	e009      	b.n	800869c <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	2100      	movs	r1, #0
 800868e:	4618      	mov	r0, r3
 8008690:	f000 fe65 	bl	800935e <SDMMC_GetResponse>
 8008694:	4602      	mov	r2, r0
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 800869a:	2300      	movs	r3, #0
}
 800869c:	4618      	mov	r0, r3
 800869e:	3710      	adds	r7, #16
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b086      	sub	sp, #24
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 80086ac:	2300      	movs	r3, #0
 80086ae:	60fb      	str	r3, [r7, #12]
 80086b0:	2300      	movs	r3, #0
 80086b2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80086b4:	2300      	movs	r3, #0
 80086b6:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	2100      	movs	r1, #0
 80086be:	4618      	mov	r0, r3
 80086c0:	f000 fe4d 	bl	800935e <SDMMC_GetResponse>
 80086c4:	4603      	mov	r3, r0
 80086c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80086ce:	d102      	bne.n	80086d6 <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80086d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80086d4:	e02f      	b.n	8008736 <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80086d6:	f107 030c 	add.w	r3, r7, #12
 80086da:	4619      	mov	r1, r3
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f000 f87b 	bl	80087d8 <SD_FindSCR>
 80086e2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d001      	beq.n	80086ee <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	e023      	b.n	8008736 <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d01c      	beq.n	8008732 <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681a      	ldr	r2, [r3, #0]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008700:	041b      	lsls	r3, r3, #16
 8008702:	4619      	mov	r1, r3
 8008704:	4610      	mov	r0, r2
 8008706:	f000 ffa9 	bl	800965c <SDMMC_CmdAppCommand>
 800870a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d001      	beq.n	8008716 <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	e00f      	b.n	8008736 <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	2102      	movs	r1, #2
 800871c:	4618      	mov	r0, r3
 800871e:	f000 ffe7 	bl	80096f0 <SDMMC_CmdBusWidth>
 8008722:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d001      	beq.n	800872e <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	e003      	b.n	8008736 <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 800872e:	2300      	movs	r3, #0
 8008730:	e001      	b.n	8008736 <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008732:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008736:	4618      	mov	r0, r3
 8008738:	3718      	adds	r7, #24
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}

0800873e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800873e:	b580      	push	{r7, lr}
 8008740:	b086      	sub	sp, #24
 8008742:	af00      	add	r7, sp, #0
 8008744:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 8008746:	2300      	movs	r3, #0
 8008748:	60fb      	str	r3, [r7, #12]
 800874a:	2300      	movs	r3, #0
 800874c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800874e:	2300      	movs	r3, #0
 8008750:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	2100      	movs	r1, #0
 8008758:	4618      	mov	r0, r3
 800875a:	f000 fe00 	bl	800935e <SDMMC_GetResponse>
 800875e:	4603      	mov	r3, r0
 8008760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008764:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008768:	d102      	bne.n	8008770 <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800876a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800876e:	e02f      	b.n	80087d0 <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008770:	f107 030c 	add.w	r3, r7, #12
 8008774:	4619      	mov	r1, r3
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 f82e 	bl	80087d8 <SD_FindSCR>
 800877c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d001      	beq.n	8008788 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	e023      	b.n	80087d0 <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800878e:	2b00      	cmp	r3, #0
 8008790:	d01c      	beq.n	80087cc <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681a      	ldr	r2, [r3, #0]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800879a:	041b      	lsls	r3, r3, #16
 800879c:	4619      	mov	r1, r3
 800879e:	4610      	mov	r0, r2
 80087a0:	f000 ff5c 	bl	800965c <SDMMC_CmdAppCommand>
 80087a4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d001      	beq.n	80087b0 <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	e00f      	b.n	80087d0 <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	2100      	movs	r1, #0
 80087b6:	4618      	mov	r0, r3
 80087b8:	f000 ff9a 	bl	80096f0 <SDMMC_CmdBusWidth>
 80087bc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d001      	beq.n	80087c8 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	e003      	b.n	80087d0 <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 80087c8:	2300      	movs	r3, #0
 80087ca:	e001      	b.n	80087d0 <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80087cc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3718      	adds	r7, #24
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}

080087d8 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80087d8:	b590      	push	{r4, r7, lr}
 80087da:	b08f      	sub	sp, #60	; 0x3c
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
 80087e0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80087e2:	2300      	movs	r3, #0
 80087e4:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 80087e6:	f7fa f8a3 	bl	8002930 <HAL_GetTick>
 80087ea:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0;
 80087ec:	2300      	movs	r3, #0
 80087ee:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2] = {0, 0};
 80087f0:	2300      	movs	r3, #0
 80087f2:	60fb      	str	r3, [r7, #12]
 80087f4:	2300      	movs	r3, #0
 80087f6:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	2108      	movs	r1, #8
 80087fe:	4618      	mov	r0, r3
 8008800:	f000 fdee 	bl	80093e0 <SDMMC_CmdBlockLength>
 8008804:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8008806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008808:	2b00      	cmp	r3, #0
 800880a:	d001      	beq.n	8008810 <SD_FindSCR+0x38>
  {
    return errorstate;
 800880c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800880e:	e0a8      	b.n	8008962 <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681a      	ldr	r2, [r3, #0]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008818:	041b      	lsls	r3, r3, #16
 800881a:	4619      	mov	r1, r3
 800881c:	4610      	mov	r0, r2
 800881e:	f000 ff1d 	bl	800965c <SDMMC_CmdAppCommand>
 8008822:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8008824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008826:	2b00      	cmp	r3, #0
 8008828:	d001      	beq.n	800882e <SD_FindSCR+0x56>
  {
    return errorstate;
 800882a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800882c:	e099      	b.n	8008962 <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800882e:	f04f 33ff 	mov.w	r3, #4294967295
 8008832:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8;
 8008834:	2308      	movs	r3, #8
 8008836:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008838:	2330      	movs	r3, #48	; 0x30
 800883a:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800883c:	2302      	movs	r3, #2
 800883e:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008840:	2300      	movs	r3, #0
 8008842:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008844:	2301      	movs	r3, #1
 8008846:	62bb      	str	r3, [r7, #40]	; 0x28
  SDMMC_ConfigData(hsd->Instance, &config);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f107 0214 	add.w	r2, r7, #20
 8008850:	4611      	mov	r1, r2
 8008852:	4618      	mov	r0, r3
 8008854:	f000 fd98 	bl	8009388 <SDMMC_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4618      	mov	r0, r3
 800885e:	f000 ff6b 	bl	8009738 <SDMMC_CmdSendSCR>
 8008862:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8008864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008866:	2b00      	cmp	r3, #0
 8008868:	d022      	beq.n	80088b0 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800886a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800886c:	e079      	b.n	8008962 <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008874:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008878:	2b00      	cmp	r3, #0
 800887a:	d00e      	beq.n	800889a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6819      	ldr	r1, [r3, #0]
 8008880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008882:	009b      	lsls	r3, r3, #2
 8008884:	f107 020c 	add.w	r2, r7, #12
 8008888:	18d4      	adds	r4, r2, r3
 800888a:	4608      	mov	r0, r1
 800888c:	f000 fcf6 	bl	800927c <SDMMC_ReadFIFO>
 8008890:	4603      	mov	r3, r0
 8008892:	6023      	str	r3, [r4, #0]
      index++;
 8008894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008896:	3301      	adds	r3, #1
 8008898:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800889a:	f7fa f849 	bl	8002930 <HAL_GetTick>
 800889e:	4602      	mov	r2, r0
 80088a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a2:	1ad3      	subs	r3, r2, r3
 80088a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088a8:	d102      	bne.n	80088b0 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80088aa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80088ae:	e058      	b.n	8008962 <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088b6:	f240 432a 	movw	r3, #1066	; 0x42a
 80088ba:	4013      	ands	r3, r2
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d0d6      	beq.n	800886e <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088c6:	f003 0308 	and.w	r3, r3, #8
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d005      	beq.n	80088da <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	2208      	movs	r2, #8
 80088d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80088d6:	2308      	movs	r3, #8
 80088d8:	e043      	b.n	8008962 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088e0:	f003 0302 	and.w	r3, r3, #2
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d005      	beq.n	80088f4 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	2202      	movs	r2, #2
 80088ee:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80088f0:	2302      	movs	r3, #2
 80088f2:	e036      	b.n	8008962 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088fa:	f003 0320 	and.w	r3, r3, #32
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d005      	beq.n	800890e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	2220      	movs	r2, #32
 8008908:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 800890a:	2320      	movs	r3, #32
 800890c:	e029      	b.n	8008962 <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008916:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	061a      	lsls	r2, r3, #24
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	021b      	lsls	r3, r3, #8
 8008920:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008924:	431a      	orrs	r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	0a1b      	lsrs	r3, r3, #8
 800892a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800892e:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	3304      	adds	r3, #4
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 800893a:	430a      	orrs	r2, r1
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800893c:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	061a      	lsls	r2, r3, #24
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	021b      	lsls	r3, r3, #8
 8008946:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800894a:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	0a1b      	lsrs	r3, r3, #8
 8008950:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008954:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	0e1b      	lsrs	r3, r3, #24
 800895a:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 8008960:	2300      	movs	r3, #0
}
 8008962:	4618      	mov	r0, r3
 8008964:	373c      	adds	r7, #60	; 0x3c
 8008966:	46bd      	mov	sp, r7
 8008968:	bd90      	pop	{r4, r7, pc}

0800896a <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800896a:	b580      	push	{r7, lr}
 800896c:	b082      	sub	sp, #8
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
 8008972:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d101      	bne.n	800897e <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800897a:	2301      	movs	r3, #1
 800897c:	e025      	b.n	80089ca <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008984:	b2db      	uxtb	r3, r3
 8008986:	2b00      	cmp	r3, #0
 8008988:	d106      	bne.n	8008998 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2200      	movs	r2, #0
 800898e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f006 fae2 	bl	800ef5c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2202      	movs	r2, #2
 800899c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	3304      	adds	r3, #4
 80089a8:	4619      	mov	r1, r3
 80089aa:	4610      	mov	r0, r2
 80089ac:	f000 fb14 	bl	8008fd8 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6818      	ldr	r0, [r3, #0]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	461a      	mov	r2, r3
 80089ba:	6839      	ldr	r1, [r7, #0]
 80089bc:	f000 fb7e 	bl	80090bc <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2201      	movs	r2, #1
 80089c4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80089c8:	2300      	movs	r3, #0
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3708      	adds	r7, #8
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}

080089d2 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80089d2:	b580      	push	{r7, lr}
 80089d4:	b084      	sub	sp, #16
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	60f8      	str	r0, [r7, #12]
 80089da:	60b9      	str	r1, [r7, #8]
 80089dc:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80089e4:	b2db      	uxtb	r3, r3
 80089e6:	2b02      	cmp	r3, #2
 80089e8:	d101      	bne.n	80089ee <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80089ea:	2302      	movs	r3, #2
 80089ec:	e018      	b.n	8008a20 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2202      	movs	r2, #2
 80089f2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	68b9      	ldr	r1, [r7, #8]
 80089fe:	4618      	mov	r0, r3
 8008a00:	f000 fbdc 	bl	80091bc <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	2b02      	cmp	r3, #2
 8008a0a:	d104      	bne.n	8008a16 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2205      	movs	r2, #5
 8008a10:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8008a14:	e003      	b.n	8008a1e <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2201      	movs	r2, #1
 8008a1a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8008a1e:	2300      	movs	r3, #0
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3710      	adds	r7, #16
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}

08008a28 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b082      	sub	sp, #8
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
 8008a30:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008a38:	b2db      	uxtb	r3, r3
 8008a3a:	2b02      	cmp	r3, #2
 8008a3c:	d101      	bne.n	8008a42 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008a3e:	2302      	movs	r3, #2
 8008a40:	e00e      	b.n	8008a60 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2202      	movs	r2, #2
 8008a46:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	6839      	ldr	r1, [r7, #0]
 8008a50:	4618      	mov	r0, r3
 8008a52:	f000 fbd4 	bl	80091fe <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2201      	movs	r2, #1
 8008a5a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8008a5e:	2300      	movs	r3, #0
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3708      	adds	r7, #8
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b082      	sub	sp, #8
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d101      	bne.n	8008a7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008a76:	2301      	movs	r3, #1
 8008a78:	e01d      	b.n	8008ab6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a80:	b2db      	uxtb	r3, r3
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d106      	bne.n	8008a94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f006 f97e 	bl	800ed90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2202      	movs	r2, #2
 8008a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681a      	ldr	r2, [r3, #0]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	3304      	adds	r3, #4
 8008aa4:	4619      	mov	r1, r3
 8008aa6:	4610      	mov	r0, r2
 8008aa8:	f000 f97c 	bl	8008da4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2201      	movs	r2, #1
 8008ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008ab4:	2300      	movs	r3, #0
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3708      	adds	r7, #8
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
	...

08008ac0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b085      	sub	sp, #20
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	68da      	ldr	r2, [r3, #12]
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f042 0201 	orr.w	r2, r2, #1
 8008ad6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	689a      	ldr	r2, [r3, #8]
 8008ade:	4b0c      	ldr	r3, [pc, #48]	; (8008b10 <HAL_TIM_Base_Start_IT+0x50>)
 8008ae0:	4013      	ands	r3, r2
 8008ae2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	2b06      	cmp	r3, #6
 8008ae8:	d00b      	beq.n	8008b02 <HAL_TIM_Base_Start_IT+0x42>
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008af0:	d007      	beq.n	8008b02 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	681a      	ldr	r2, [r3, #0]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f042 0201 	orr.w	r2, r2, #1
 8008b00:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008b02:	2300      	movs	r3, #0
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3714      	adds	r7, #20
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0e:	4770      	bx	lr
 8008b10:	00010007 	.word	0x00010007

08008b14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b082      	sub	sp, #8
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	691b      	ldr	r3, [r3, #16]
 8008b22:	f003 0302 	and.w	r3, r3, #2
 8008b26:	2b02      	cmp	r3, #2
 8008b28:	d122      	bne.n	8008b70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	68db      	ldr	r3, [r3, #12]
 8008b30:	f003 0302 	and.w	r3, r3, #2
 8008b34:	2b02      	cmp	r3, #2
 8008b36:	d11b      	bne.n	8008b70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f06f 0202 	mvn.w	r2, #2
 8008b40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2201      	movs	r2, #1
 8008b46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	699b      	ldr	r3, [r3, #24]
 8008b4e:	f003 0303 	and.w	r3, r3, #3
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d003      	beq.n	8008b5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f000 f905 	bl	8008d66 <HAL_TIM_IC_CaptureCallback>
 8008b5c:	e005      	b.n	8008b6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f000 f8f7 	bl	8008d52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f000 f908 	bl	8008d7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	691b      	ldr	r3, [r3, #16]
 8008b76:	f003 0304 	and.w	r3, r3, #4
 8008b7a:	2b04      	cmp	r3, #4
 8008b7c:	d122      	bne.n	8008bc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	68db      	ldr	r3, [r3, #12]
 8008b84:	f003 0304 	and.w	r3, r3, #4
 8008b88:	2b04      	cmp	r3, #4
 8008b8a:	d11b      	bne.n	8008bc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f06f 0204 	mvn.w	r2, #4
 8008b94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2202      	movs	r2, #2
 8008b9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	699b      	ldr	r3, [r3, #24]
 8008ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d003      	beq.n	8008bb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f000 f8db 	bl	8008d66 <HAL_TIM_IC_CaptureCallback>
 8008bb0:	e005      	b.n	8008bbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 f8cd 	bl	8008d52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f000 f8de 	bl	8008d7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	691b      	ldr	r3, [r3, #16]
 8008bca:	f003 0308 	and.w	r3, r3, #8
 8008bce:	2b08      	cmp	r3, #8
 8008bd0:	d122      	bne.n	8008c18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	68db      	ldr	r3, [r3, #12]
 8008bd8:	f003 0308 	and.w	r3, r3, #8
 8008bdc:	2b08      	cmp	r3, #8
 8008bde:	d11b      	bne.n	8008c18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f06f 0208 	mvn.w	r2, #8
 8008be8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2204      	movs	r2, #4
 8008bee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	69db      	ldr	r3, [r3, #28]
 8008bf6:	f003 0303 	and.w	r3, r3, #3
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d003      	beq.n	8008c06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 f8b1 	bl	8008d66 <HAL_TIM_IC_CaptureCallback>
 8008c04:	e005      	b.n	8008c12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 f8a3 	bl	8008d52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f000 f8b4 	bl	8008d7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2200      	movs	r2, #0
 8008c16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	691b      	ldr	r3, [r3, #16]
 8008c1e:	f003 0310 	and.w	r3, r3, #16
 8008c22:	2b10      	cmp	r3, #16
 8008c24:	d122      	bne.n	8008c6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	68db      	ldr	r3, [r3, #12]
 8008c2c:	f003 0310 	and.w	r3, r3, #16
 8008c30:	2b10      	cmp	r3, #16
 8008c32:	d11b      	bne.n	8008c6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f06f 0210 	mvn.w	r2, #16
 8008c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2208      	movs	r2, #8
 8008c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	69db      	ldr	r3, [r3, #28]
 8008c4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d003      	beq.n	8008c5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 f887 	bl	8008d66 <HAL_TIM_IC_CaptureCallback>
 8008c58:	e005      	b.n	8008c66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 f879 	bl	8008d52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 f88a 	bl	8008d7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	691b      	ldr	r3, [r3, #16]
 8008c72:	f003 0301 	and.w	r3, r3, #1
 8008c76:	2b01      	cmp	r3, #1
 8008c78:	d10e      	bne.n	8008c98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	68db      	ldr	r3, [r3, #12]
 8008c80:	f003 0301 	and.w	r3, r3, #1
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	d107      	bne.n	8008c98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f06f 0201 	mvn.w	r2, #1
 8008c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f004 fb9c 	bl	800d3d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	691b      	ldr	r3, [r3, #16]
 8008c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ca2:	2b80      	cmp	r3, #128	; 0x80
 8008ca4:	d10e      	bne.n	8008cc4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	68db      	ldr	r3, [r3, #12]
 8008cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cb0:	2b80      	cmp	r3, #128	; 0x80
 8008cb2:	d107      	bne.n	8008cc4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f000 f976 	bl	8008fb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	691b      	ldr	r3, [r3, #16]
 8008cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cd2:	d10e      	bne.n	8008cf2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	68db      	ldr	r3, [r3, #12]
 8008cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cde:	2b80      	cmp	r3, #128	; 0x80
 8008ce0:	d107      	bne.n	8008cf2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008cea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 f969 	bl	8008fc4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	691b      	ldr	r3, [r3, #16]
 8008cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cfc:	2b40      	cmp	r3, #64	; 0x40
 8008cfe:	d10e      	bne.n	8008d1e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	68db      	ldr	r3, [r3, #12]
 8008d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d0a:	2b40      	cmp	r3, #64	; 0x40
 8008d0c:	d107      	bne.n	8008d1e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008d16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f000 f838 	bl	8008d8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	691b      	ldr	r3, [r3, #16]
 8008d24:	f003 0320 	and.w	r3, r3, #32
 8008d28:	2b20      	cmp	r3, #32
 8008d2a:	d10e      	bne.n	8008d4a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	68db      	ldr	r3, [r3, #12]
 8008d32:	f003 0320 	and.w	r3, r3, #32
 8008d36:	2b20      	cmp	r3, #32
 8008d38:	d107      	bne.n	8008d4a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f06f 0220 	mvn.w	r2, #32
 8008d42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f000 f929 	bl	8008f9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008d4a:	bf00      	nop
 8008d4c:	3708      	adds	r7, #8
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}

08008d52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008d52:	b480      	push	{r7}
 8008d54:	b083      	sub	sp, #12
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008d5a:	bf00      	nop
 8008d5c:	370c      	adds	r7, #12
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d64:	4770      	bx	lr

08008d66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008d66:	b480      	push	{r7}
 8008d68:	b083      	sub	sp, #12
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008d6e:	bf00      	nop
 8008d70:	370c      	adds	r7, #12
 8008d72:	46bd      	mov	sp, r7
 8008d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d78:	4770      	bx	lr

08008d7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008d7a:	b480      	push	{r7}
 8008d7c:	b083      	sub	sp, #12
 8008d7e:	af00      	add	r7, sp, #0
 8008d80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008d82:	bf00      	nop
 8008d84:	370c      	adds	r7, #12
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr

08008d8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008d8e:	b480      	push	{r7}
 8008d90:	b083      	sub	sp, #12
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008d96:	bf00      	nop
 8008d98:	370c      	adds	r7, #12
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr
	...

08008da4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b085      	sub	sp, #20
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	4a40      	ldr	r2, [pc, #256]	; (8008eb8 <TIM_Base_SetConfig+0x114>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d013      	beq.n	8008de4 <TIM_Base_SetConfig+0x40>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dc2:	d00f      	beq.n	8008de4 <TIM_Base_SetConfig+0x40>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	4a3d      	ldr	r2, [pc, #244]	; (8008ebc <TIM_Base_SetConfig+0x118>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d00b      	beq.n	8008de4 <TIM_Base_SetConfig+0x40>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	4a3c      	ldr	r2, [pc, #240]	; (8008ec0 <TIM_Base_SetConfig+0x11c>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d007      	beq.n	8008de4 <TIM_Base_SetConfig+0x40>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	4a3b      	ldr	r2, [pc, #236]	; (8008ec4 <TIM_Base_SetConfig+0x120>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d003      	beq.n	8008de4 <TIM_Base_SetConfig+0x40>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	4a3a      	ldr	r2, [pc, #232]	; (8008ec8 <TIM_Base_SetConfig+0x124>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d108      	bne.n	8008df6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	68fa      	ldr	r2, [r7, #12]
 8008df2:	4313      	orrs	r3, r2
 8008df4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	4a2f      	ldr	r2, [pc, #188]	; (8008eb8 <TIM_Base_SetConfig+0x114>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d02b      	beq.n	8008e56 <TIM_Base_SetConfig+0xb2>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e04:	d027      	beq.n	8008e56 <TIM_Base_SetConfig+0xb2>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	4a2c      	ldr	r2, [pc, #176]	; (8008ebc <TIM_Base_SetConfig+0x118>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d023      	beq.n	8008e56 <TIM_Base_SetConfig+0xb2>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	4a2b      	ldr	r2, [pc, #172]	; (8008ec0 <TIM_Base_SetConfig+0x11c>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d01f      	beq.n	8008e56 <TIM_Base_SetConfig+0xb2>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	4a2a      	ldr	r2, [pc, #168]	; (8008ec4 <TIM_Base_SetConfig+0x120>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d01b      	beq.n	8008e56 <TIM_Base_SetConfig+0xb2>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	4a29      	ldr	r2, [pc, #164]	; (8008ec8 <TIM_Base_SetConfig+0x124>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d017      	beq.n	8008e56 <TIM_Base_SetConfig+0xb2>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	4a28      	ldr	r2, [pc, #160]	; (8008ecc <TIM_Base_SetConfig+0x128>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d013      	beq.n	8008e56 <TIM_Base_SetConfig+0xb2>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	4a27      	ldr	r2, [pc, #156]	; (8008ed0 <TIM_Base_SetConfig+0x12c>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d00f      	beq.n	8008e56 <TIM_Base_SetConfig+0xb2>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	4a26      	ldr	r2, [pc, #152]	; (8008ed4 <TIM_Base_SetConfig+0x130>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d00b      	beq.n	8008e56 <TIM_Base_SetConfig+0xb2>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	4a25      	ldr	r2, [pc, #148]	; (8008ed8 <TIM_Base_SetConfig+0x134>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d007      	beq.n	8008e56 <TIM_Base_SetConfig+0xb2>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	4a24      	ldr	r2, [pc, #144]	; (8008edc <TIM_Base_SetConfig+0x138>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d003      	beq.n	8008e56 <TIM_Base_SetConfig+0xb2>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	4a23      	ldr	r2, [pc, #140]	; (8008ee0 <TIM_Base_SetConfig+0x13c>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d108      	bne.n	8008e68 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	68db      	ldr	r3, [r3, #12]
 8008e62:	68fa      	ldr	r2, [r7, #12]
 8008e64:	4313      	orrs	r3, r2
 8008e66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	695b      	ldr	r3, [r3, #20]
 8008e72:	4313      	orrs	r3, r2
 8008e74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	68fa      	ldr	r2, [r7, #12]
 8008e7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	689a      	ldr	r2, [r3, #8]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	681a      	ldr	r2, [r3, #0]
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	4a0a      	ldr	r2, [pc, #40]	; (8008eb8 <TIM_Base_SetConfig+0x114>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d003      	beq.n	8008e9c <TIM_Base_SetConfig+0xf8>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	4a0c      	ldr	r2, [pc, #48]	; (8008ec8 <TIM_Base_SetConfig+0x124>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d103      	bne.n	8008ea4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	691a      	ldr	r2, [r3, #16]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	615a      	str	r2, [r3, #20]
}
 8008eaa:	bf00      	nop
 8008eac:	3714      	adds	r7, #20
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb4:	4770      	bx	lr
 8008eb6:	bf00      	nop
 8008eb8:	40010000 	.word	0x40010000
 8008ebc:	40000400 	.word	0x40000400
 8008ec0:	40000800 	.word	0x40000800
 8008ec4:	40000c00 	.word	0x40000c00
 8008ec8:	40010400 	.word	0x40010400
 8008ecc:	40014000 	.word	0x40014000
 8008ed0:	40014400 	.word	0x40014400
 8008ed4:	40014800 	.word	0x40014800
 8008ed8:	40001800 	.word	0x40001800
 8008edc:	40001c00 	.word	0x40001c00
 8008ee0:	40002000 	.word	0x40002000

08008ee4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b085      	sub	sp, #20
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d101      	bne.n	8008efc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ef8:	2302      	movs	r3, #2
 8008efa:	e045      	b.n	8008f88 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2201      	movs	r2, #1
 8008f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2202      	movs	r2, #2
 8008f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	689b      	ldr	r3, [r3, #8]
 8008f1a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a1c      	ldr	r2, [pc, #112]	; (8008f94 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d004      	beq.n	8008f30 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4a1b      	ldr	r2, [pc, #108]	; (8008f98 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d108      	bne.n	8008f42 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008f36:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	68fa      	ldr	r2, [r7, #12]
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f48:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	68fa      	ldr	r2, [r7, #12]
 8008f50:	4313      	orrs	r3, r2
 8008f52:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f5a:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	689b      	ldr	r3, [r3, #8]
 8008f60:	68ba      	ldr	r2, [r7, #8]
 8008f62:	4313      	orrs	r3, r2
 8008f64:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	68fa      	ldr	r2, [r7, #12]
 8008f6c:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	68ba      	ldr	r2, [r7, #8]
 8008f74:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2201      	movs	r2, #1
 8008f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2200      	movs	r2, #0
 8008f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f86:	2300      	movs	r3, #0
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3714      	adds	r7, #20
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f92:	4770      	bx	lr
 8008f94:	40010000 	.word	0x40010000
 8008f98:	40010400 	.word	0x40010400

08008f9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b083      	sub	sp, #12
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008fa4:	bf00      	nop
 8008fa6:	370c      	adds	r7, #12
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr

08008fb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b083      	sub	sp, #12
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008fb8:	bf00      	nop
 8008fba:	370c      	adds	r7, #12
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr

08008fc4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b083      	sub	sp, #12
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008fcc:	bf00      	nop
 8008fce:	370c      	adds	r7, #12
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr

08008fd8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b085      	sub	sp, #20
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	2b01      	cmp	r3, #1
 8008ff0:	d027      	beq.n	8009042 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008ff8:	68fa      	ldr	r2, [r7, #12]
 8008ffa:	4b2f      	ldr	r3, [pc, #188]	; (80090b8 <FMC_SDRAM_Init+0xe0>)
 8008ffc:	4013      	ands	r3, r2
 8008ffe:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009008:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800900e:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8009014:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800901a:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8009020:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8009026:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800902c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8009032:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009034:	68fa      	ldr	r2, [r7, #12]
 8009036:	4313      	orrs	r3, r2
 8009038:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	68fa      	ldr	r2, [r7, #12]
 800903e:	601a      	str	r2, [r3, #0]
 8009040:	e032      	b.n	80090a8 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800904e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009058:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800905e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009060:	68fa      	ldr	r2, [r7, #12]
 8009062:	4313      	orrs	r3, r2
 8009064:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800906c:	68ba      	ldr	r2, [r7, #8]
 800906e:	4b12      	ldr	r3, [pc, #72]	; (80090b8 <FMC_SDRAM_Init+0xe0>)
 8009070:	4013      	ands	r3, r2
 8009072:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800907c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8009082:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8009088:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800908e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8009094:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009096:	68ba      	ldr	r2, [r7, #8]
 8009098:	4313      	orrs	r3, r2
 800909a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	68fa      	ldr	r2, [r7, #12]
 80090a0:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	68ba      	ldr	r2, [r7, #8]
 80090a6:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 80090a8:	2300      	movs	r3, #0
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3714      	adds	r7, #20
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	4770      	bx	lr
 80090b6:	bf00      	nop
 80090b8:	ffff8000 	.word	0xffff8000

080090bc <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80090bc:	b480      	push	{r7}
 80090be:	b087      	sub	sp, #28
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	60f8      	str	r0, [r7, #12]
 80090c4:	60b9      	str	r1, [r7, #8]
 80090c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 80090c8:	2300      	movs	r3, #0
 80090ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 80090cc:	2300      	movs	r3, #0
 80090ce:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2b01      	cmp	r3, #1
 80090d4:	d02e      	beq.n	8009134 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	689b      	ldr	r3, [r3, #8]
 80090da:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80090e2:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	685b      	ldr	r3, [r3, #4]
 80090ee:	3b01      	subs	r3, #1
 80090f0:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80090f2:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	689b      	ldr	r3, [r3, #8]
 80090f8:	3b01      	subs	r3, #1
 80090fa:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80090fc:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	68db      	ldr	r3, [r3, #12]
 8009102:	3b01      	subs	r3, #1
 8009104:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8009106:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	691b      	ldr	r3, [r3, #16]
 800910c:	3b01      	subs	r3, #1
 800910e:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8009110:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	695b      	ldr	r3, [r3, #20]
 8009116:	3b01      	subs	r3, #1
 8009118:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800911a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	699b      	ldr	r3, [r3, #24]
 8009120:	3b01      	subs	r3, #1
 8009122:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8009124:	4313      	orrs	r3, r2
 8009126:	697a      	ldr	r2, [r7, #20]
 8009128:	4313      	orrs	r3, r2
 800912a:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	697a      	ldr	r2, [r7, #20]
 8009130:	609a      	str	r2, [r3, #8]
 8009132:	e039      	b.n	80091a8 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	689b      	ldr	r3, [r3, #8]
 8009138:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800913a:	697a      	ldr	r2, [r7, #20]
 800913c:	4b1e      	ldr	r3, [pc, #120]	; (80091b8 <FMC_SDRAM_Timing_Init+0xfc>)
 800913e:	4013      	ands	r3, r2
 8009140:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	68db      	ldr	r3, [r3, #12]
 8009146:	3b01      	subs	r3, #1
 8009148:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	695b      	ldr	r3, [r3, #20]
 800914e:	3b01      	subs	r3, #1
 8009150:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8009152:	4313      	orrs	r3, r2
 8009154:	697a      	ldr	r2, [r7, #20]
 8009156:	4313      	orrs	r3, r2
 8009158:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	68db      	ldr	r3, [r3, #12]
 800915e:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009166:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	3b01      	subs	r3, #1
 8009174:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8009176:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	689b      	ldr	r3, [r3, #8]
 800917c:	3b01      	subs	r3, #1
 800917e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8009180:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	691b      	ldr	r3, [r3, #16]
 8009186:	3b01      	subs	r3, #1
 8009188:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800918a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	699b      	ldr	r3, [r3, #24]
 8009190:	3b01      	subs	r3, #1
 8009192:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8009194:	4313      	orrs	r3, r2
 8009196:	693a      	ldr	r2, [r7, #16]
 8009198:	4313      	orrs	r3, r2
 800919a:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	697a      	ldr	r2, [r7, #20]
 80091a0:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	693a      	ldr	r2, [r7, #16]
 80091a6:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 80091a8:	2300      	movs	r3, #0
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	371c      	adds	r7, #28
 80091ae:	46bd      	mov	sp, r7
 80091b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b4:	4770      	bx	lr
 80091b6:	bf00      	nop
 80091b8:	ff0f0fff 	.word	0xff0f0fff

080091bc <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80091bc:	b480      	push	{r7}
 80091be:	b087      	sub	sp, #28
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	60f8      	str	r0, [r7, #12]
 80091c4:	60b9      	str	r1, [r7, #8]
 80091c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 80091c8:	2300      	movs	r3, #0
 80091ca:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80091d4:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	689b      	ldr	r3, [r3, #8]
 80091da:	3b01      	subs	r3, #1
 80091dc:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 80091de:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	68db      	ldr	r3, [r3, #12]
 80091e4:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80091e6:	4313      	orrs	r3, r2
 80091e8:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 80091ea:	697a      	ldr	r2, [r7, #20]
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 80091f0:	2300      	movs	r3, #0
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	371c      	adds	r7, #28
 80091f6:	46bd      	mov	sp, r7
 80091f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fc:	4770      	bx	lr

080091fe <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80091fe:	b480      	push	{r7}
 8009200:	b083      	sub	sp, #12
 8009202:	af00      	add	r7, sp, #0
 8009204:	6078      	str	r0, [r7, #4]
 8009206:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	695a      	ldr	r2, [r3, #20]
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	005b      	lsls	r3, r3, #1
 8009210:	431a      	orrs	r2, r3
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8009216:	2300      	movs	r3, #0
}
 8009218:	4618      	mov	r0, r3
 800921a:	370c      	adds	r7, #12
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr

08009224 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8009224:	b084      	sub	sp, #16
 8009226:	b480      	push	{r7}
 8009228:	b085      	sub	sp, #20
 800922a:	af00      	add	r7, sp, #0
 800922c:	6078      	str	r0, [r7, #4]
 800922e:	f107 001c 	add.w	r0, r7, #28
 8009232:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009236:	2300      	movs	r3, #0
 8009238:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800923a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800923c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800923e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8009242:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009244:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8009246:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800924a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800924c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800924e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009250:	68fa      	ldr	r2, [r7, #12]
 8009252:	4313      	orrs	r3, r2
 8009254:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	685a      	ldr	r2, [r3, #4]
 800925a:	4b07      	ldr	r3, [pc, #28]	; (8009278 <SDMMC_Init+0x54>)
 800925c:	4013      	ands	r3, r2
 800925e:	68fa      	ldr	r2, [r7, #12]
 8009260:	431a      	orrs	r2, r3
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009266:	2300      	movs	r3, #0
}
 8009268:	4618      	mov	r0, r3
 800926a:	3714      	adds	r7, #20
 800926c:	46bd      	mov	sp, r7
 800926e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009272:	b004      	add	sp, #16
 8009274:	4770      	bx	lr
 8009276:	bf00      	nop
 8009278:	ffff8100 	.word	0xffff8100

0800927c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800927c:	b480      	push	{r7}
 800927e:	b083      	sub	sp, #12
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800928a:	4618      	mov	r0, r3
 800928c:	370c      	adds	r7, #12
 800928e:	46bd      	mov	sp, r7
 8009290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009294:	4770      	bx	lr

08009296 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8009296:	b480      	push	{r7}
 8009298:	b083      	sub	sp, #12
 800929a:	af00      	add	r7, sp, #0
 800929c:	6078      	str	r0, [r7, #4]
 800929e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80092aa:	2300      	movs	r3, #0
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	370c      	adds	r7, #12
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr

080092b8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 80092b8:	b480      	push	{r7}
 80092ba:	b083      	sub	sp, #12
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2203      	movs	r2, #3
 80092c4:	601a      	str	r2, [r3, #0]
  
  return HAL_OK; 
 80092c6:	2300      	movs	r3, #0
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	370c      	adds	r7, #12
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr

080092d4 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 80092d4:	b480      	push	{r7}
 80092d6:	b083      	sub	sp, #12
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f003 0303 	and.w	r3, r3, #3
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	370c      	adds	r7, #12
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr

080092f0 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b085      	sub	sp, #20
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80092fa:	2300      	movs	r3, #0
 80092fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	681a      	ldr	r2, [r3, #0]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800930e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009314:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800931a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800931c:	68fa      	ldr	r2, [r7, #12]
 800931e:	4313      	orrs	r3, r2
 8009320:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	68da      	ldr	r2, [r3, #12]
 8009326:	4b06      	ldr	r3, [pc, #24]	; (8009340 <SDMMC_SendCommand+0x50>)
 8009328:	4013      	ands	r3, r2
 800932a:	68fa      	ldr	r2, [r7, #12]
 800932c:	431a      	orrs	r2, r3
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009332:	2300      	movs	r3, #0
}
 8009334:	4618      	mov	r0, r3
 8009336:	3714      	adds	r7, #20
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr
 8009340:	fffff000 	.word	0xfffff000

08009344 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009344:	b480      	push	{r7}
 8009346:	b083      	sub	sp, #12
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	691b      	ldr	r3, [r3, #16]
 8009350:	b2db      	uxtb	r3, r3
}
 8009352:	4618      	mov	r0, r3
 8009354:	370c      	adds	r7, #12
 8009356:	46bd      	mov	sp, r7
 8009358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935c:	4770      	bx	lr

0800935e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800935e:	b480      	push	{r7}
 8009360:	b085      	sub	sp, #20
 8009362:	af00      	add	r7, sp, #0
 8009364:	6078      	str	r0, [r7, #4]
 8009366:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 8009368:	2300      	movs	r3, #0
 800936a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	3314      	adds	r3, #20
 8009370:	461a      	mov	r2, r3
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	4413      	add	r3, r2
 8009376:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
}  
 800937c:	4618      	mov	r0, r3
 800937e:	3714      	adds	r7, #20
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr

08009388 <SDMMC_ConfigData>:
  * @param  Data  pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8009388:	b480      	push	{r7}
 800938a:	b085      	sub	sp, #20
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009392:	2300      	movs	r3, #0
 8009394:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	681a      	ldr	r2, [r3, #0]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	685a      	ldr	r2, [r3, #4]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80093ae:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80093b4:	431a      	orrs	r2, r3
                       Data->DPSM);
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80093ba:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80093bc:	68fa      	ldr	r2, [r7, #12]
 80093be:	4313      	orrs	r3, r2
 80093c0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093c6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	431a      	orrs	r2, r3
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80093d2:	2300      	movs	r3, #0

}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3714      	adds	r7, #20
 80093d8:	46bd      	mov	sp, r7
 80093da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093de:	4770      	bx	lr

080093e0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b088      	sub	sp, #32
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80093ea:	2300      	movs	r3, #0
 80093ec:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80093f2:	2310      	movs	r3, #16
 80093f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80093f6:	2340      	movs	r3, #64	; 0x40
 80093f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80093fa:	2300      	movs	r3, #0
 80093fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80093fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009402:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009404:	f107 0308 	add.w	r3, r7, #8
 8009408:	4619      	mov	r1, r3
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f7ff ff70 	bl	80092f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8009410:	f241 3288 	movw	r2, #5000	; 0x1388
 8009414:	2110      	movs	r1, #16
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f000 fa64 	bl	80098e4 <SDMMC_GetCmdResp1>
 800941c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800941e:	69fb      	ldr	r3, [r7, #28]
}
 8009420:	4618      	mov	r0, r3
 8009422:	3720      	adds	r7, #32
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}

08009428 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b088      	sub	sp, #32
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009432:	2300      	movs	r3, #0
 8009434:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800943a:	2311      	movs	r3, #17
 800943c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800943e:	2340      	movs	r3, #64	; 0x40
 8009440:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009442:	2300      	movs	r3, #0
 8009444:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009446:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800944a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800944c:	f107 0308 	add.w	r3, r7, #8
 8009450:	4619      	mov	r1, r3
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f7ff ff4c 	bl	80092f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009458:	f241 3288 	movw	r2, #5000	; 0x1388
 800945c:	2111      	movs	r1, #17
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f000 fa40 	bl	80098e4 <SDMMC_GetCmdResp1>
 8009464:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009466:	69fb      	ldr	r3, [r7, #28]
}
 8009468:	4618      	mov	r0, r3
 800946a:	3720      	adds	r7, #32
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}

08009470 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b088      	sub	sp, #32
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800947a:	2300      	movs	r3, #0
 800947c:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009482:	2312      	movs	r3, #18
 8009484:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009486:	2340      	movs	r3, #64	; 0x40
 8009488:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800948a:	2300      	movs	r3, #0
 800948c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800948e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009492:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009494:	f107 0308 	add.w	r3, r7, #8
 8009498:	4619      	mov	r1, r3
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f7ff ff28 	bl	80092f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80094a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80094a4:	2112      	movs	r1, #18
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f000 fa1c 	bl	80098e4 <SDMMC_GetCmdResp1>
 80094ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80094ae:	69fb      	ldr	r3, [r7, #28]
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3720      	adds	r7, #32
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}

080094b8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b088      	sub	sp, #32
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80094c2:	2300      	movs	r3, #0
 80094c4:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80094ca:	2318      	movs	r3, #24
 80094cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80094ce:	2340      	movs	r3, #64	; 0x40
 80094d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80094d2:	2300      	movs	r3, #0
 80094d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80094d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094da:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80094dc:	f107 0308 	add.w	r3, r7, #8
 80094e0:	4619      	mov	r1, r3
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f7ff ff04 	bl	80092f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80094e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80094ec:	2118      	movs	r1, #24
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f000 f9f8 	bl	80098e4 <SDMMC_GetCmdResp1>
 80094f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80094f6:	69fb      	ldr	r3, [r7, #28]
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3720      	adds	r7, #32
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b088      	sub	sp, #32
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800950a:	2300      	movs	r3, #0
 800950c:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009512:	2319      	movs	r3, #25
 8009514:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009516:	2340      	movs	r3, #64	; 0x40
 8009518:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800951a:	2300      	movs	r3, #0
 800951c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800951e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009522:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009524:	f107 0308 	add.w	r3, r7, #8
 8009528:	4619      	mov	r1, r3
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f7ff fee0 	bl	80092f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009530:	f241 3288 	movw	r2, #5000	; 0x1388
 8009534:	2119      	movs	r1, #25
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f000 f9d4 	bl	80098e4 <SDMMC_GetCmdResp1>
 800953c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800953e:	69fb      	ldr	r3, [r7, #28]
}
 8009540:	4618      	mov	r0, r3
 8009542:	3720      	adds	r7, #32
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}

08009548 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b088      	sub	sp, #32
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009550:	2300      	movs	r3, #0
 8009552:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0;
 8009554:	2300      	movs	r3, #0
 8009556:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009558:	230c      	movs	r3, #12
 800955a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800955c:	2340      	movs	r3, #64	; 0x40
 800955e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009560:	2300      	movs	r3, #0
 8009562:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009564:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009568:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800956a:	f107 0308 	add.w	r3, r7, #8
 800956e:	4619      	mov	r1, r3
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f7ff febd 	bl	80092f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, 100000000/*SDMMC_CMDTIMEOUT*/);
 8009576:	4a05      	ldr	r2, [pc, #20]	; (800958c <SDMMC_CmdStopTransfer+0x44>)
 8009578:	210c      	movs	r1, #12
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f000 f9b2 	bl	80098e4 <SDMMC_GetCmdResp1>
 8009580:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009582:	69fb      	ldr	r3, [r7, #28]
}
 8009584:	4618      	mov	r0, r3
 8009586:	3720      	adds	r7, #32
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}
 800958c:	05f5e100 	.word	0x05f5e100

08009590 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b08a      	sub	sp, #40	; 0x28
 8009594:	af00      	add	r7, sp, #0
 8009596:	60f8      	str	r0, [r7, #12]
 8009598:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800959c:	2300      	movs	r3, #0
 800959e:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80095a4:	2307      	movs	r3, #7
 80095a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80095a8:	2340      	movs	r3, #64	; 0x40
 80095aa:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80095ac:	2300      	movs	r3, #0
 80095ae:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80095b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095b4:	623b      	str	r3, [r7, #32]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80095b6:	f107 0310 	add.w	r3, r7, #16
 80095ba:	4619      	mov	r1, r3
 80095bc:	68f8      	ldr	r0, [r7, #12]
 80095be:	f7ff fe97 	bl	80092f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80095c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80095c6:	2107      	movs	r1, #7
 80095c8:	68f8      	ldr	r0, [r7, #12]
 80095ca:	f000 f98b 	bl	80098e4 <SDMMC_GetCmdResp1>
 80095ce:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80095d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	3728      	adds	r7, #40	; 0x28
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}

080095da <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80095da:	b580      	push	{r7, lr}
 80095dc:	b088      	sub	sp, #32
 80095de:	af00      	add	r7, sp, #0
 80095e0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80095e2:	2300      	movs	r3, #0
 80095e4:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0;
 80095e6:	2300      	movs	r3, #0
 80095e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80095ea:	2300      	movs	r3, #0
 80095ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80095ee:	2300      	movs	r3, #0
 80095f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80095f2:	2300      	movs	r3, #0
 80095f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80095f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095fa:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80095fc:	f107 0308 	add.w	r3, r7, #8
 8009600:	4619      	mov	r1, r3
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f7ff fe74 	bl	80092f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f000 f941 	bl	8009890 <SDMMC_GetCmdError>
 800960e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009610:	69fb      	ldr	r3, [r7, #28]
}
 8009612:	4618      	mov	r0, r3
 8009614:	3720      	adds	r7, #32
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}

0800961a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800961a:	b580      	push	{r7, lr}
 800961c:	b088      	sub	sp, #32
 800961e:	af00      	add	r7, sp, #0
 8009620:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009622:	2300      	movs	r3, #0
 8009624:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009626:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800962a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800962c:	2308      	movs	r3, #8
 800962e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009630:	2340      	movs	r3, #64	; 0x40
 8009632:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009634:	2300      	movs	r3, #0
 8009636:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009638:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800963c:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800963e:	f107 0308 	add.w	r3, r7, #8
 8009642:	4619      	mov	r1, r3
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f7ff fe53 	bl	80092f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f000 fb12 	bl	8009c74 <SDMMC_GetCmdResp7>
 8009650:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009652:	69fb      	ldr	r3, [r7, #28]
}
 8009654:	4618      	mov	r0, r3
 8009656:	3720      	adds	r7, #32
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b088      	sub	sp, #32
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009666:	2300      	movs	r3, #0
 8009668:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800966e:	2337      	movs	r3, #55	; 0x37
 8009670:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009672:	2340      	movs	r3, #64	; 0x40
 8009674:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009676:	2300      	movs	r3, #0
 8009678:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800967a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800967e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009680:	f107 0308 	add.w	r3, r7, #8
 8009684:	4619      	mov	r1, r3
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f7ff fe32 	bl	80092f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800968c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009690:	2137      	movs	r1, #55	; 0x37
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f000 f926 	bl	80098e4 <SDMMC_GetCmdResp1>
 8009698:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800969a:	69fb      	ldr	r3, [r7, #28]
}
 800969c:	4618      	mov	r0, r3
 800969e:	3720      	adds	r7, #32
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t SdType)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b088      	sub	sp, #32
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80096ae:	2300      	movs	r3, #0
 80096b0:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 80096b2:	683a      	ldr	r2, [r7, #0]
 80096b4:	4b0d      	ldr	r3, [pc, #52]	; (80096ec <SDMMC_CmdAppOperCommand+0x48>)
 80096b6:	4313      	orrs	r3, r2
 80096b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80096ba:	2329      	movs	r3, #41	; 0x29
 80096bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80096be:	2340      	movs	r3, #64	; 0x40
 80096c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80096c2:	2300      	movs	r3, #0
 80096c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80096c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096ca:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80096cc:	f107 0308 	add.w	r3, r7, #8
 80096d0:	4619      	mov	r1, r3
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f7ff fe0c 	bl	80092f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f000 fa29 	bl	8009b30 <SDMMC_GetCmdResp3>
 80096de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80096e0:	69fb      	ldr	r3, [r7, #28]
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	3720      	adds	r7, #32
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}
 80096ea:	bf00      	nop
 80096ec:	80100000 	.word	0x80100000

080096f0 <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b088      	sub	sp, #32
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
 80096f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80096fa:	2300      	movs	r3, #0
 80096fc:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009702:	2306      	movs	r3, #6
 8009704:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009706:	2340      	movs	r3, #64	; 0x40
 8009708:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800970a:	2300      	movs	r3, #0
 800970c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800970e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009712:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009714:	f107 0308 	add.w	r3, r7, #8
 8009718:	4619      	mov	r1, r3
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f7ff fde8 	bl	80092f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8009720:	f241 3288 	movw	r2, #5000	; 0x1388
 8009724:	2106      	movs	r1, #6
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f000 f8dc 	bl	80098e4 <SDMMC_GetCmdResp1>
 800972c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800972e:	69fb      	ldr	r3, [r7, #28]
}
 8009730:	4618      	mov	r0, r3
 8009732:	3720      	adds	r7, #32
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}

08009738 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b088      	sub	sp, #32
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009740:	2300      	movs	r3, #0
 8009742:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0;
 8009744:	2300      	movs	r3, #0
 8009746:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009748:	2333      	movs	r3, #51	; 0x33
 800974a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800974c:	2340      	movs	r3, #64	; 0x40
 800974e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009750:	2300      	movs	r3, #0
 8009752:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009754:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009758:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800975a:	f107 0308 	add.w	r3, r7, #8
 800975e:	4619      	mov	r1, r3
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f7ff fdc5 	bl	80092f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8009766:	f241 3288 	movw	r2, #5000	; 0x1388
 800976a:	2133      	movs	r1, #51	; 0x33
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f000 f8b9 	bl	80098e4 <SDMMC_GetCmdResp1>
 8009772:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009774:	69fb      	ldr	r3, [r7, #28]
}
 8009776:	4618      	mov	r0, r3
 8009778:	3720      	adds	r7, #32
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}

0800977e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800977e:	b580      	push	{r7, lr}
 8009780:	b088      	sub	sp, #32
 8009782:	af00      	add	r7, sp, #0
 8009784:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009786:	2300      	movs	r3, #0
 8009788:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0;
 800978a:	2300      	movs	r3, #0
 800978c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800978e:	2302      	movs	r3, #2
 8009790:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009792:	23c0      	movs	r3, #192	; 0xc0
 8009794:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009796:	2300      	movs	r3, #0
 8009798:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800979a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800979e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80097a0:	f107 0308 	add.w	r3, r7, #8
 80097a4:	4619      	mov	r1, r3
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f7ff fda2 	bl	80092f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f000 f97f 	bl	8009ab0 <SDMMC_GetCmdResp2>
 80097b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80097b4:	69fb      	ldr	r3, [r7, #28]
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3720      	adds	r7, #32
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}

080097be <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80097be:	b580      	push	{r7, lr}
 80097c0:	b088      	sub	sp, #32
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	6078      	str	r0, [r7, #4]
 80097c6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80097c8:	2300      	movs	r3, #0
 80097ca:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80097d0:	2309      	movs	r3, #9
 80097d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80097d4:	23c0      	movs	r3, #192	; 0xc0
 80097d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80097d8:	2300      	movs	r3, #0
 80097da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80097dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097e0:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80097e2:	f107 0308 	add.w	r3, r7, #8
 80097e6:	4619      	mov	r1, r3
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f7ff fd81 	bl	80092f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 f95e 	bl	8009ab0 <SDMMC_GetCmdResp2>
 80097f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80097f6:	69fb      	ldr	r3, [r7, #28]
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3720      	adds	r7, #32
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}

08009800 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b088      	sub	sp, #32
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
 8009808:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800980a:	2300      	movs	r3, #0
 800980c:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0;
 800980e:	2300      	movs	r3, #0
 8009810:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009812:	2303      	movs	r3, #3
 8009814:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009816:	2340      	movs	r3, #64	; 0x40
 8009818:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800981a:	2300      	movs	r3, #0
 800981c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800981e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009822:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009824:	f107 0308 	add.w	r3, r7, #8
 8009828:	4619      	mov	r1, r3
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f7ff fd60 	bl	80092f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009830:	683a      	ldr	r2, [r7, #0]
 8009832:	2103      	movs	r1, #3
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f000 f9af 	bl	8009b98 <SDMMC_GetCmdResp6>
 800983a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800983c:	69fb      	ldr	r3, [r7, #28]
}
 800983e:	4618      	mov	r0, r3
 8009840:	3720      	adds	r7, #32
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}

08009846 <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009846:	b580      	push	{r7, lr}
 8009848:	b088      	sub	sp, #32
 800984a:	af00      	add	r7, sp, #0
 800984c:	6078      	str	r0, [r7, #4]
 800984e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009850:	2300      	movs	r3, #0
 8009852:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009858:	230d      	movs	r3, #13
 800985a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800985c:	2340      	movs	r3, #64	; 0x40
 800985e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009860:	2300      	movs	r3, #0
 8009862:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009864:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009868:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800986a:	f107 0308 	add.w	r3, r7, #8
 800986e:	4619      	mov	r1, r3
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f7ff fd3d 	bl	80092f0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009876:	f241 3288 	movw	r2, #5000	; 0x1388
 800987a:	210d      	movs	r1, #13
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f000 f831 	bl	80098e4 <SDMMC_GetCmdResp1>
 8009882:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009884:	69fb      	ldr	r3, [r7, #28]
}
 8009886:	4618      	mov	r0, r3
 8009888:	3720      	adds	r7, #32
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}
	...

08009890 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8009890:	b490      	push	{r4, r7}
 8009892:	b082      	sub	sp, #8
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8009898:	4b10      	ldr	r3, [pc, #64]	; (80098dc <SDMMC_GetCmdError+0x4c>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4a10      	ldr	r2, [pc, #64]	; (80098e0 <SDMMC_GetCmdError+0x50>)
 800989e:	fba2 2303 	umull	r2, r3, r2, r3
 80098a2:	0a5b      	lsrs	r3, r3, #9
 80098a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80098a8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 80098ac:	4623      	mov	r3, r4
 80098ae:	1e5c      	subs	r4, r3, #1
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d102      	bne.n	80098ba <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80098b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80098b8:	e00a      	b.n	80098d0 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d0f2      	beq.n	80098ac <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80098cc:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80098ce:	2300      	movs	r3, #0
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	3708      	adds	r7, #8
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bc90      	pop	{r4, r7}
 80098d8:	4770      	bx	lr
 80098da:	bf00      	nop
 80098dc:	20000048 	.word	0x20000048
 80098e0:	10624dd3 	.word	0x10624dd3

080098e4 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80098e4:	b590      	push	{r4, r7, lr}
 80098e6:	b087      	sub	sp, #28
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	60f8      	str	r0, [r7, #12]
 80098ec:	460b      	mov	r3, r1
 80098ee:	607a      	str	r2, [r7, #4]
 80098f0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 80098f2:	4b6c      	ldr	r3, [pc, #432]	; (8009aa4 <SDMMC_GetCmdResp1+0x1c0>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	4a6c      	ldr	r2, [pc, #432]	; (8009aa8 <SDMMC_GetCmdResp1+0x1c4>)
 80098f8:	fba2 2303 	umull	r2, r3, r2, r3
 80098fc:	0a5b      	lsrs	r3, r3, #9
 80098fe:	687a      	ldr	r2, [r7, #4]
 8009900:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8009904:	4623      	mov	r3, r4
 8009906:	1e5c      	subs	r4, r3, #1
 8009908:	2b00      	cmp	r3, #0
 800990a:	d102      	bne.n	8009912 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800990c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009910:	e0c3      	b.n	8009a9a <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009916:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800991a:	2b00      	cmp	r3, #0
 800991c:	d0f2      	beq.n	8009904 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009922:	f003 0304 	and.w	r3, r3, #4
 8009926:	2b00      	cmp	r3, #0
 8009928:	d004      	beq.n	8009934 <SDMMC_GetCmdResp1+0x50>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2204      	movs	r2, #4
 800992e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009930:	2304      	movs	r3, #4
 8009932:	e0b2      	b.n	8009a9a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009938:	f003 0301 	and.w	r3, r3, #1
 800993c:	2b00      	cmp	r3, #0
 800993e:	d004      	beq.n	800994a <SDMMC_GetCmdResp1+0x66>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	2201      	movs	r2, #1
 8009944:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009946:	2301      	movs	r3, #1
 8009948:	e0a7      	b.n	8009a9a <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800994a:	68f8      	ldr	r0, [r7, #12]
 800994c:	f7ff fcfa 	bl	8009344 <SDMMC_GetCommandResponse>
 8009950:	4603      	mov	r3, r0
 8009952:	461a      	mov	r2, r3
 8009954:	7afb      	ldrb	r3, [r7, #11]
 8009956:	4293      	cmp	r3, r2
 8009958:	d001      	beq.n	800995e <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800995a:	2301      	movs	r3, #1
 800995c:	e09d      	b.n	8009a9a <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009964:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009966:	2100      	movs	r1, #0
 8009968:	68f8      	ldr	r0, [r7, #12]
 800996a:	f7ff fcf8 	bl	800935e <SDMMC_GetResponse>
 800996e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009970:	697a      	ldr	r2, [r7, #20]
 8009972:	4b4e      	ldr	r3, [pc, #312]	; (8009aac <SDMMC_GetCmdResp1+0x1c8>)
 8009974:	4013      	ands	r3, r2
 8009976:	2b00      	cmp	r3, #0
 8009978:	d101      	bne.n	800997e <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 800997a:	2300      	movs	r3, #0
 800997c:	e08d      	b.n	8009a9a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	2b00      	cmp	r3, #0
 8009982:	da02      	bge.n	800998a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009984:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009988:	e087      	b.n	8009a9a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800998a:	697b      	ldr	r3, [r7, #20]
 800998c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009990:	2b00      	cmp	r3, #0
 8009992:	d001      	beq.n	8009998 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009994:	2340      	movs	r3, #64	; 0x40
 8009996:	e080      	b.n	8009a9a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d001      	beq.n	80099a6 <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80099a2:	2380      	movs	r3, #128	; 0x80
 80099a4:	e079      	b.n	8009a9a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d002      	beq.n	80099b6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80099b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80099b4:	e071      	b.n	8009a9a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d002      	beq.n	80099c6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80099c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80099c4:	e069      	b.n	8009a9a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d002      	beq.n	80099d6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80099d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099d4:	e061      	b.n	8009a9a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d002      	beq.n	80099e6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80099e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80099e4:	e059      	b.n	8009a9a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d002      	beq.n	80099f6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80099f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80099f4:	e051      	b.n	8009a9a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d002      	beq.n	8009a06 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009a00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009a04:	e049      	b.n	8009a9a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d002      	beq.n	8009a16 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009a10:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009a14:	e041      	b.n	8009a9a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d002      	beq.n	8009a26 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 8009a20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a24:	e039      	b.n	8009a9a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d002      	beq.n	8009a36 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009a30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009a34:	e031      	b.n	8009a9a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d002      	beq.n	8009a46 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009a40:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009a44:	e029      	b.n	8009a9a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d002      	beq.n	8009a56 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009a50:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009a54:	e021      	b.n	8009a9a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d002      	beq.n	8009a66 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009a60:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009a64:	e019      	b.n	8009a9a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d002      	beq.n	8009a76 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009a70:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009a74:	e011      	b.n	8009a9a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d002      	beq.n	8009a86 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009a80:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009a84:	e009      	b.n	8009a9a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	f003 0308 	and.w	r3, r3, #8
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d002      	beq.n	8009a96 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009a90:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009a94:	e001      	b.n	8009a9a <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009a96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	371c      	adds	r7, #28
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd90      	pop	{r4, r7, pc}
 8009aa2:	bf00      	nop
 8009aa4:	20000048 	.word	0x20000048
 8009aa8:	10624dd3 	.word	0x10624dd3
 8009aac:	fdffe008 	.word	0xfdffe008

08009ab0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8009ab0:	b490      	push	{r4, r7}
 8009ab2:	b082      	sub	sp, #8
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8009ab8:	4b1b      	ldr	r3, [pc, #108]	; (8009b28 <SDMMC_GetCmdResp2+0x78>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	4a1b      	ldr	r2, [pc, #108]	; (8009b2c <SDMMC_GetCmdResp2+0x7c>)
 8009abe:	fba2 2303 	umull	r2, r3, r2, r3
 8009ac2:	0a5b      	lsrs	r3, r3, #9
 8009ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ac8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8009acc:	4623      	mov	r3, r4
 8009ace:	1e5c      	subs	r4, r3, #1
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d102      	bne.n	8009ada <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009ad4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009ad8:	e020      	b.n	8009b1c <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ade:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d0f2      	beq.n	8009acc <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009aea:	f003 0304 	and.w	r3, r3, #4
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d004      	beq.n	8009afc <SDMMC_GetCmdResp2+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2204      	movs	r2, #4
 8009af6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009af8:	2304      	movs	r3, #4
 8009afa:	e00f      	b.n	8009b1c <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b00:	f003 0301 	and.w	r3, r3, #1
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d004      	beq.n	8009b12 <SDMMC_GetCmdResp2+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009b0e:	2301      	movs	r3, #1
 8009b10:	e004      	b.n	8009b1c <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009b18:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009b1a:	2300      	movs	r3, #0
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3708      	adds	r7, #8
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bc90      	pop	{r4, r7}
 8009b24:	4770      	bx	lr
 8009b26:	bf00      	nop
 8009b28:	20000048 	.word	0x20000048
 8009b2c:	10624dd3 	.word	0x10624dd3

08009b30 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009b30:	b490      	push	{r4, r7}
 8009b32:	b082      	sub	sp, #8
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8009b38:	4b15      	ldr	r3, [pc, #84]	; (8009b90 <SDMMC_GetCmdResp3+0x60>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	4a15      	ldr	r2, [pc, #84]	; (8009b94 <SDMMC_GetCmdResp3+0x64>)
 8009b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8009b42:	0a5b      	lsrs	r3, r3, #9
 8009b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b48:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8009b4c:	4623      	mov	r3, r4
 8009b4e:	1e5c      	subs	r4, r3, #1
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d102      	bne.n	8009b5a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009b54:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009b58:	e015      	b.n	8009b86 <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b5e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d0f2      	beq.n	8009b4c <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b6a:	f003 0304 	and.w	r3, r3, #4
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d004      	beq.n	8009b7c <SDMMC_GetCmdResp3+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2204      	movs	r2, #4
 8009b76:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009b78:	2304      	movs	r3, #4
 8009b7a:	e004      	b.n	8009b86 <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009b82:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009b84:	2300      	movs	r3, #0
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3708      	adds	r7, #8
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bc90      	pop	{r4, r7}
 8009b8e:	4770      	bx	lr
 8009b90:	20000048 	.word	0x20000048
 8009b94:	10624dd3 	.word	0x10624dd3

08009b98 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009b98:	b590      	push	{r4, r7, lr}
 8009b9a:	b087      	sub	sp, #28
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	60f8      	str	r0, [r7, #12]
 8009ba0:	460b      	mov	r3, r1
 8009ba2:	607a      	str	r2, [r7, #4]
 8009ba4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8009ba6:	4b31      	ldr	r3, [pc, #196]	; (8009c6c <SDMMC_GetCmdResp6+0xd4>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	4a31      	ldr	r2, [pc, #196]	; (8009c70 <SDMMC_GetCmdResp6+0xd8>)
 8009bac:	fba2 2303 	umull	r2, r3, r2, r3
 8009bb0:	0a5b      	lsrs	r3, r3, #9
 8009bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bb6:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8009bba:	4623      	mov	r3, r4
 8009bbc:	1e5c      	subs	r4, r3, #1
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d102      	bne.n	8009bc8 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009bc2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009bc6:	e04c      	b.n	8009c62 <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bcc:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d0f2      	beq.n	8009bba <SDMMC_GetCmdResp6+0x22>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bd8:	f003 0304 	and.w	r3, r3, #4
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d004      	beq.n	8009bea <SDMMC_GetCmdResp6+0x52>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	2204      	movs	r2, #4
 8009be4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009be6:	2304      	movs	r3, #4
 8009be8:	e03b      	b.n	8009c62 <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bee:	f003 0301 	and.w	r3, r3, #1
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d004      	beq.n	8009c00 <SDMMC_GetCmdResp6+0x68>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	2201      	movs	r2, #1
 8009bfa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	e030      	b.n	8009c62 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009c00:	68f8      	ldr	r0, [r7, #12]
 8009c02:	f7ff fb9f 	bl	8009344 <SDMMC_GetCommandResponse>
 8009c06:	4603      	mov	r3, r0
 8009c08:	461a      	mov	r2, r3
 8009c0a:	7afb      	ldrb	r3, [r7, #11]
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	d001      	beq.n	8009c14 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009c10:	2301      	movs	r3, #1
 8009c12:	e026      	b.n	8009c62 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009c1a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009c1c:	2100      	movs	r1, #0
 8009c1e:	68f8      	ldr	r0, [r7, #12]
 8009c20:	f7ff fb9d 	bl	800935e <SDMMC_GetResponse>
 8009c24:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d106      	bne.n	8009c3e <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	0c1b      	lsrs	r3, r3, #16
 8009c34:	b29a      	uxth	r2, r3
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	e011      	b.n	8009c62 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d002      	beq.n	8009c4e <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009c48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009c4c:	e009      	b.n	8009c62 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d002      	beq.n	8009c5e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009c58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c5c:	e001      	b.n	8009c62 <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009c5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	371c      	adds	r7, #28
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd90      	pop	{r4, r7, pc}
 8009c6a:	bf00      	nop
 8009c6c:	20000048 	.word	0x20000048
 8009c70:	10624dd3 	.word	0x10624dd3

08009c74 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8009c74:	b490      	push	{r4, r7}
 8009c76:	b082      	sub	sp, #8
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8009c7c:	4b18      	ldr	r3, [pc, #96]	; (8009ce0 <SDMMC_GetCmdResp7+0x6c>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	4a18      	ldr	r2, [pc, #96]	; (8009ce4 <SDMMC_GetCmdResp7+0x70>)
 8009c82:	fba2 2303 	umull	r2, r3, r2, r3
 8009c86:	0a5b      	lsrs	r3, r3, #9
 8009c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c8c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8009c90:	4623      	mov	r3, r4
 8009c92:	1e5c      	subs	r4, r3, #1
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d102      	bne.n	8009c9e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009c98:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009c9c:	e01a      	b.n	8009cd4 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ca2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d0f2      	beq.n	8009c90 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cae:	f003 0304 	and.w	r3, r3, #4
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d004      	beq.n	8009cc0 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2240      	movs	r2, #64	; 0x40
 8009cba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009cbc:	2304      	movs	r3, #4
 8009cbe:	e009      	b.n	8009cd4 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d002      	beq.n	8009cd2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2240      	movs	r2, #64	; 0x40
 8009cd0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009cd2:	2300      	movs	r3, #0
  
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3708      	adds	r7, #8
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bc90      	pop	{r4, r7}
 8009cdc:	4770      	bx	lr
 8009cde:	bf00      	nop
 8009ce0:	20000048 	.word	0x20000048
 8009ce4:	10624dd3 	.word	0x10624dd3

08009ce8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b084      	sub	sp, #16
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	4603      	mov	r3, r0
 8009cf0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009cf2:	79fb      	ldrb	r3, [r7, #7]
 8009cf4:	4a08      	ldr	r2, [pc, #32]	; (8009d18 <disk_status+0x30>)
 8009cf6:	009b      	lsls	r3, r3, #2
 8009cf8:	4413      	add	r3, r2
 8009cfa:	685b      	ldr	r3, [r3, #4]
 8009cfc:	685b      	ldr	r3, [r3, #4]
 8009cfe:	79fa      	ldrb	r2, [r7, #7]
 8009d00:	4905      	ldr	r1, [pc, #20]	; (8009d18 <disk_status+0x30>)
 8009d02:	440a      	add	r2, r1
 8009d04:	7a12      	ldrb	r2, [r2, #8]
 8009d06:	4610      	mov	r0, r2
 8009d08:	4798      	blx	r3
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3710      	adds	r7, #16
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}
 8009d18:	20000304 	.word	0x20000304

08009d1c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b084      	sub	sp, #16
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	4603      	mov	r3, r0
 8009d24:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009d26:	2300      	movs	r3, #0
 8009d28:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009d2a:	79fb      	ldrb	r3, [r7, #7]
 8009d2c:	4a0d      	ldr	r2, [pc, #52]	; (8009d64 <disk_initialize+0x48>)
 8009d2e:	5cd3      	ldrb	r3, [r2, r3]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d111      	bne.n	8009d58 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009d34:	79fb      	ldrb	r3, [r7, #7]
 8009d36:	4a0b      	ldr	r2, [pc, #44]	; (8009d64 <disk_initialize+0x48>)
 8009d38:	2101      	movs	r1, #1
 8009d3a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009d3c:	79fb      	ldrb	r3, [r7, #7]
 8009d3e:	4a09      	ldr	r2, [pc, #36]	; (8009d64 <disk_initialize+0x48>)
 8009d40:	009b      	lsls	r3, r3, #2
 8009d42:	4413      	add	r3, r2
 8009d44:	685b      	ldr	r3, [r3, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	79fa      	ldrb	r2, [r7, #7]
 8009d4a:	4906      	ldr	r1, [pc, #24]	; (8009d64 <disk_initialize+0x48>)
 8009d4c:	440a      	add	r2, r1
 8009d4e:	7a12      	ldrb	r2, [r2, #8]
 8009d50:	4610      	mov	r0, r2
 8009d52:	4798      	blx	r3
 8009d54:	4603      	mov	r3, r0
 8009d56:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3710      	adds	r7, #16
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}
 8009d62:	bf00      	nop
 8009d64:	20000304 	.word	0x20000304

08009d68 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009d68:	b590      	push	{r4, r7, lr}
 8009d6a:	b087      	sub	sp, #28
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	60b9      	str	r1, [r7, #8]
 8009d70:	607a      	str	r2, [r7, #4]
 8009d72:	603b      	str	r3, [r7, #0]
 8009d74:	4603      	mov	r3, r0
 8009d76:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009d78:	7bfb      	ldrb	r3, [r7, #15]
 8009d7a:	4a0a      	ldr	r2, [pc, #40]	; (8009da4 <disk_read+0x3c>)
 8009d7c:	009b      	lsls	r3, r3, #2
 8009d7e:	4413      	add	r3, r2
 8009d80:	685b      	ldr	r3, [r3, #4]
 8009d82:	689c      	ldr	r4, [r3, #8]
 8009d84:	7bfb      	ldrb	r3, [r7, #15]
 8009d86:	4a07      	ldr	r2, [pc, #28]	; (8009da4 <disk_read+0x3c>)
 8009d88:	4413      	add	r3, r2
 8009d8a:	7a18      	ldrb	r0, [r3, #8]
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	687a      	ldr	r2, [r7, #4]
 8009d90:	68b9      	ldr	r1, [r7, #8]
 8009d92:	47a0      	blx	r4
 8009d94:	4603      	mov	r3, r0
 8009d96:	75fb      	strb	r3, [r7, #23]
  return res;
 8009d98:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	371c      	adds	r7, #28
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd90      	pop	{r4, r7, pc}
 8009da2:	bf00      	nop
 8009da4:	20000304 	.word	0x20000304

08009da8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009da8:	b590      	push	{r4, r7, lr}
 8009daa:	b087      	sub	sp, #28
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	60b9      	str	r1, [r7, #8]
 8009db0:	607a      	str	r2, [r7, #4]
 8009db2:	603b      	str	r3, [r7, #0]
 8009db4:	4603      	mov	r3, r0
 8009db6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009db8:	7bfb      	ldrb	r3, [r7, #15]
 8009dba:	4a0a      	ldr	r2, [pc, #40]	; (8009de4 <disk_write+0x3c>)
 8009dbc:	009b      	lsls	r3, r3, #2
 8009dbe:	4413      	add	r3, r2
 8009dc0:	685b      	ldr	r3, [r3, #4]
 8009dc2:	68dc      	ldr	r4, [r3, #12]
 8009dc4:	7bfb      	ldrb	r3, [r7, #15]
 8009dc6:	4a07      	ldr	r2, [pc, #28]	; (8009de4 <disk_write+0x3c>)
 8009dc8:	4413      	add	r3, r2
 8009dca:	7a18      	ldrb	r0, [r3, #8]
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	687a      	ldr	r2, [r7, #4]
 8009dd0:	68b9      	ldr	r1, [r7, #8]
 8009dd2:	47a0      	blx	r4
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	75fb      	strb	r3, [r7, #23]
  return res;
 8009dd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	371c      	adds	r7, #28
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd90      	pop	{r4, r7, pc}
 8009de2:	bf00      	nop
 8009de4:	20000304 	.word	0x20000304

08009de8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b084      	sub	sp, #16
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	4603      	mov	r3, r0
 8009df0:	603a      	str	r2, [r7, #0]
 8009df2:	71fb      	strb	r3, [r7, #7]
 8009df4:	460b      	mov	r3, r1
 8009df6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009df8:	79fb      	ldrb	r3, [r7, #7]
 8009dfa:	4a09      	ldr	r2, [pc, #36]	; (8009e20 <disk_ioctl+0x38>)
 8009dfc:	009b      	lsls	r3, r3, #2
 8009dfe:	4413      	add	r3, r2
 8009e00:	685b      	ldr	r3, [r3, #4]
 8009e02:	691b      	ldr	r3, [r3, #16]
 8009e04:	79fa      	ldrb	r2, [r7, #7]
 8009e06:	4906      	ldr	r1, [pc, #24]	; (8009e20 <disk_ioctl+0x38>)
 8009e08:	440a      	add	r2, r1
 8009e0a:	7a10      	ldrb	r0, [r2, #8]
 8009e0c:	79b9      	ldrb	r1, [r7, #6]
 8009e0e:	683a      	ldr	r2, [r7, #0]
 8009e10:	4798      	blx	r3
 8009e12:	4603      	mov	r3, r0
 8009e14:	73fb      	strb	r3, [r7, #15]
  return res;
 8009e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3710      	adds	r7, #16
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}
 8009e20:	20000304 	.word	0x20000304

08009e24 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009e24:	b480      	push	{r7}
 8009e26:	b085      	sub	sp, #20
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	3301      	adds	r3, #1
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009e34:	89fb      	ldrh	r3, [r7, #14]
 8009e36:	021b      	lsls	r3, r3, #8
 8009e38:	b21a      	sxth	r2, r3
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	781b      	ldrb	r3, [r3, #0]
 8009e3e:	b21b      	sxth	r3, r3
 8009e40:	4313      	orrs	r3, r2
 8009e42:	b21b      	sxth	r3, r3
 8009e44:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009e46:	89fb      	ldrh	r3, [r7, #14]
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	3714      	adds	r7, #20
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e52:	4770      	bx	lr

08009e54 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009e54:	b480      	push	{r7}
 8009e56:	b085      	sub	sp, #20
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	3303      	adds	r3, #3
 8009e60:	781b      	ldrb	r3, [r3, #0]
 8009e62:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	021b      	lsls	r3, r3, #8
 8009e68:	687a      	ldr	r2, [r7, #4]
 8009e6a:	3202      	adds	r2, #2
 8009e6c:	7812      	ldrb	r2, [r2, #0]
 8009e6e:	4313      	orrs	r3, r2
 8009e70:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	021b      	lsls	r3, r3, #8
 8009e76:	687a      	ldr	r2, [r7, #4]
 8009e78:	3201      	adds	r2, #1
 8009e7a:	7812      	ldrb	r2, [r2, #0]
 8009e7c:	4313      	orrs	r3, r2
 8009e7e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	021b      	lsls	r3, r3, #8
 8009e84:	687a      	ldr	r2, [r7, #4]
 8009e86:	7812      	ldrb	r2, [r2, #0]
 8009e88:	4313      	orrs	r3, r2
 8009e8a:	60fb      	str	r3, [r7, #12]
	return rv;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3714      	adds	r7, #20
 8009e92:	46bd      	mov	sp, r7
 8009e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e98:	4770      	bx	lr

08009e9a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009e9a:	b480      	push	{r7}
 8009e9c:	b083      	sub	sp, #12
 8009e9e:	af00      	add	r7, sp, #0
 8009ea0:	6078      	str	r0, [r7, #4]
 8009ea2:	460b      	mov	r3, r1
 8009ea4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	1c5a      	adds	r2, r3, #1
 8009eaa:	607a      	str	r2, [r7, #4]
 8009eac:	887a      	ldrh	r2, [r7, #2]
 8009eae:	b2d2      	uxtb	r2, r2
 8009eb0:	701a      	strb	r2, [r3, #0]
 8009eb2:	887b      	ldrh	r3, [r7, #2]
 8009eb4:	0a1b      	lsrs	r3, r3, #8
 8009eb6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	1c5a      	adds	r2, r3, #1
 8009ebc:	607a      	str	r2, [r7, #4]
 8009ebe:	887a      	ldrh	r2, [r7, #2]
 8009ec0:	b2d2      	uxtb	r2, r2
 8009ec2:	701a      	strb	r2, [r3, #0]
}
 8009ec4:	bf00      	nop
 8009ec6:	370c      	adds	r7, #12
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ece:	4770      	bx	lr

08009ed0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b083      	sub	sp, #12
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
 8009ed8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	1c5a      	adds	r2, r3, #1
 8009ede:	607a      	str	r2, [r7, #4]
 8009ee0:	683a      	ldr	r2, [r7, #0]
 8009ee2:	b2d2      	uxtb	r2, r2
 8009ee4:	701a      	strb	r2, [r3, #0]
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	0a1b      	lsrs	r3, r3, #8
 8009eea:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	1c5a      	adds	r2, r3, #1
 8009ef0:	607a      	str	r2, [r7, #4]
 8009ef2:	683a      	ldr	r2, [r7, #0]
 8009ef4:	b2d2      	uxtb	r2, r2
 8009ef6:	701a      	strb	r2, [r3, #0]
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	0a1b      	lsrs	r3, r3, #8
 8009efc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	1c5a      	adds	r2, r3, #1
 8009f02:	607a      	str	r2, [r7, #4]
 8009f04:	683a      	ldr	r2, [r7, #0]
 8009f06:	b2d2      	uxtb	r2, r2
 8009f08:	701a      	strb	r2, [r3, #0]
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	0a1b      	lsrs	r3, r3, #8
 8009f0e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	1c5a      	adds	r2, r3, #1
 8009f14:	607a      	str	r2, [r7, #4]
 8009f16:	683a      	ldr	r2, [r7, #0]
 8009f18:	b2d2      	uxtb	r2, r2
 8009f1a:	701a      	strb	r2, [r3, #0]
}
 8009f1c:	bf00      	nop
 8009f1e:	370c      	adds	r7, #12
 8009f20:	46bd      	mov	sp, r7
 8009f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f26:	4770      	bx	lr

08009f28 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009f28:	b480      	push	{r7}
 8009f2a:	b087      	sub	sp, #28
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	60f8      	str	r0, [r7, #12]
 8009f30:	60b9      	str	r1, [r7, #8]
 8009f32:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d00d      	beq.n	8009f5e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009f42:	693a      	ldr	r2, [r7, #16]
 8009f44:	1c53      	adds	r3, r2, #1
 8009f46:	613b      	str	r3, [r7, #16]
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	1c59      	adds	r1, r3, #1
 8009f4c:	6179      	str	r1, [r7, #20]
 8009f4e:	7812      	ldrb	r2, [r2, #0]
 8009f50:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	3b01      	subs	r3, #1
 8009f56:	607b      	str	r3, [r7, #4]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d1f1      	bne.n	8009f42 <mem_cpy+0x1a>
	}
}
 8009f5e:	bf00      	nop
 8009f60:	371c      	adds	r7, #28
 8009f62:	46bd      	mov	sp, r7
 8009f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f68:	4770      	bx	lr

08009f6a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009f6a:	b480      	push	{r7}
 8009f6c:	b087      	sub	sp, #28
 8009f6e:	af00      	add	r7, sp, #0
 8009f70:	60f8      	str	r0, [r7, #12]
 8009f72:	60b9      	str	r1, [r7, #8]
 8009f74:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	1c5a      	adds	r2, r3, #1
 8009f7e:	617a      	str	r2, [r7, #20]
 8009f80:	68ba      	ldr	r2, [r7, #8]
 8009f82:	b2d2      	uxtb	r2, r2
 8009f84:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	3b01      	subs	r3, #1
 8009f8a:	607b      	str	r3, [r7, #4]
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d1f3      	bne.n	8009f7a <mem_set+0x10>
}
 8009f92:	bf00      	nop
 8009f94:	371c      	adds	r7, #28
 8009f96:	46bd      	mov	sp, r7
 8009f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9c:	4770      	bx	lr

08009f9e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009f9e:	b480      	push	{r7}
 8009fa0:	b089      	sub	sp, #36	; 0x24
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	60f8      	str	r0, [r7, #12]
 8009fa6:	60b9      	str	r1, [r7, #8]
 8009fa8:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	61fb      	str	r3, [r7, #28]
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009fb6:	69fb      	ldr	r3, [r7, #28]
 8009fb8:	1c5a      	adds	r2, r3, #1
 8009fba:	61fa      	str	r2, [r7, #28]
 8009fbc:	781b      	ldrb	r3, [r3, #0]
 8009fbe:	4619      	mov	r1, r3
 8009fc0:	69bb      	ldr	r3, [r7, #24]
 8009fc2:	1c5a      	adds	r2, r3, #1
 8009fc4:	61ba      	str	r2, [r7, #24]
 8009fc6:	781b      	ldrb	r3, [r3, #0]
 8009fc8:	1acb      	subs	r3, r1, r3
 8009fca:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	3b01      	subs	r3, #1
 8009fd0:	607b      	str	r3, [r7, #4]
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d002      	beq.n	8009fde <mem_cmp+0x40>
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d0eb      	beq.n	8009fb6 <mem_cmp+0x18>

	return r;
 8009fde:	697b      	ldr	r3, [r7, #20]
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	3724      	adds	r7, #36	; 0x24
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fea:	4770      	bx	lr

08009fec <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009fec:	b480      	push	{r7}
 8009fee:	b083      	sub	sp, #12
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
 8009ff4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009ff6:	e002      	b.n	8009ffe <chk_chr+0x12>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	3301      	adds	r3, #1
 8009ffc:	607b      	str	r3, [r7, #4]
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	781b      	ldrb	r3, [r3, #0]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d005      	beq.n	800a012 <chk_chr+0x26>
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	781b      	ldrb	r3, [r3, #0]
 800a00a:	461a      	mov	r2, r3
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	4293      	cmp	r3, r2
 800a010:	d1f2      	bne.n	8009ff8 <chk_chr+0xc>
	return *str;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	781b      	ldrb	r3, [r3, #0]
}
 800a016:	4618      	mov	r0, r3
 800a018:	370c      	adds	r7, #12
 800a01a:	46bd      	mov	sp, r7
 800a01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a020:	4770      	bx	lr
	...

0800a024 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a024:	b480      	push	{r7}
 800a026:	b085      	sub	sp, #20
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
 800a02c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a02e:	2300      	movs	r3, #0
 800a030:	60bb      	str	r3, [r7, #8]
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	60fb      	str	r3, [r7, #12]
 800a036:	e029      	b.n	800a08c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a038:	4a27      	ldr	r2, [pc, #156]	; (800a0d8 <chk_lock+0xb4>)
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	011b      	lsls	r3, r3, #4
 800a03e:	4413      	add	r3, r2
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d01d      	beq.n	800a082 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a046:	4a24      	ldr	r2, [pc, #144]	; (800a0d8 <chk_lock+0xb4>)
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	011b      	lsls	r3, r3, #4
 800a04c:	4413      	add	r3, r2
 800a04e:	681a      	ldr	r2, [r3, #0]
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	429a      	cmp	r2, r3
 800a056:	d116      	bne.n	800a086 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a058:	4a1f      	ldr	r2, [pc, #124]	; (800a0d8 <chk_lock+0xb4>)
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	011b      	lsls	r3, r3, #4
 800a05e:	4413      	add	r3, r2
 800a060:	3304      	adds	r3, #4
 800a062:	681a      	ldr	r2, [r3, #0]
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a068:	429a      	cmp	r2, r3
 800a06a:	d10c      	bne.n	800a086 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a06c:	4a1a      	ldr	r2, [pc, #104]	; (800a0d8 <chk_lock+0xb4>)
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	011b      	lsls	r3, r3, #4
 800a072:	4413      	add	r3, r2
 800a074:	3308      	adds	r3, #8
 800a076:	681a      	ldr	r2, [r3, #0]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d102      	bne.n	800a086 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a080:	e007      	b.n	800a092 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a082:	2301      	movs	r3, #1
 800a084:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	3301      	adds	r3, #1
 800a08a:	60fb      	str	r3, [r7, #12]
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	2b01      	cmp	r3, #1
 800a090:	d9d2      	bls.n	800a038 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	2b02      	cmp	r3, #2
 800a096:	d109      	bne.n	800a0ac <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d102      	bne.n	800a0a4 <chk_lock+0x80>
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	2b02      	cmp	r3, #2
 800a0a2:	d101      	bne.n	800a0a8 <chk_lock+0x84>
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	e010      	b.n	800a0ca <chk_lock+0xa6>
 800a0a8:	2312      	movs	r3, #18
 800a0aa:	e00e      	b.n	800a0ca <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d108      	bne.n	800a0c4 <chk_lock+0xa0>
 800a0b2:	4a09      	ldr	r2, [pc, #36]	; (800a0d8 <chk_lock+0xb4>)
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	011b      	lsls	r3, r3, #4
 800a0b8:	4413      	add	r3, r2
 800a0ba:	330c      	adds	r3, #12
 800a0bc:	881b      	ldrh	r3, [r3, #0]
 800a0be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0c2:	d101      	bne.n	800a0c8 <chk_lock+0xa4>
 800a0c4:	2310      	movs	r3, #16
 800a0c6:	e000      	b.n	800a0ca <chk_lock+0xa6>
 800a0c8:	2300      	movs	r3, #0
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3714      	adds	r7, #20
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d4:	4770      	bx	lr
 800a0d6:	bf00      	nop
 800a0d8:	200002e4 	.word	0x200002e4

0800a0dc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b083      	sub	sp, #12
 800a0e0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	607b      	str	r3, [r7, #4]
 800a0e6:	e002      	b.n	800a0ee <enq_lock+0x12>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	3301      	adds	r3, #1
 800a0ec:	607b      	str	r3, [r7, #4]
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2b01      	cmp	r3, #1
 800a0f2:	d806      	bhi.n	800a102 <enq_lock+0x26>
 800a0f4:	4a09      	ldr	r2, [pc, #36]	; (800a11c <enq_lock+0x40>)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	011b      	lsls	r3, r3, #4
 800a0fa:	4413      	add	r3, r2
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d1f2      	bne.n	800a0e8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2b02      	cmp	r3, #2
 800a106:	bf14      	ite	ne
 800a108:	2301      	movne	r3, #1
 800a10a:	2300      	moveq	r3, #0
 800a10c:	b2db      	uxtb	r3, r3
}
 800a10e:	4618      	mov	r0, r3
 800a110:	370c      	adds	r7, #12
 800a112:	46bd      	mov	sp, r7
 800a114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a118:	4770      	bx	lr
 800a11a:	bf00      	nop
 800a11c:	200002e4 	.word	0x200002e4

0800a120 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a120:	b480      	push	{r7}
 800a122:	b085      	sub	sp, #20
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
 800a128:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a12a:	2300      	movs	r3, #0
 800a12c:	60fb      	str	r3, [r7, #12]
 800a12e:	e01f      	b.n	800a170 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a130:	4a41      	ldr	r2, [pc, #260]	; (800a238 <inc_lock+0x118>)
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	011b      	lsls	r3, r3, #4
 800a136:	4413      	add	r3, r2
 800a138:	681a      	ldr	r2, [r3, #0]
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	429a      	cmp	r2, r3
 800a140:	d113      	bne.n	800a16a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a142:	4a3d      	ldr	r2, [pc, #244]	; (800a238 <inc_lock+0x118>)
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	011b      	lsls	r3, r3, #4
 800a148:	4413      	add	r3, r2
 800a14a:	3304      	adds	r3, #4
 800a14c:	681a      	ldr	r2, [r3, #0]
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a152:	429a      	cmp	r2, r3
 800a154:	d109      	bne.n	800a16a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a156:	4a38      	ldr	r2, [pc, #224]	; (800a238 <inc_lock+0x118>)
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	011b      	lsls	r3, r3, #4
 800a15c:	4413      	add	r3, r2
 800a15e:	3308      	adds	r3, #8
 800a160:	681a      	ldr	r2, [r3, #0]
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a166:	429a      	cmp	r2, r3
 800a168:	d006      	beq.n	800a178 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	3301      	adds	r3, #1
 800a16e:	60fb      	str	r3, [r7, #12]
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	2b01      	cmp	r3, #1
 800a174:	d9dc      	bls.n	800a130 <inc_lock+0x10>
 800a176:	e000      	b.n	800a17a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a178:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	2b02      	cmp	r3, #2
 800a17e:	d132      	bne.n	800a1e6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a180:	2300      	movs	r3, #0
 800a182:	60fb      	str	r3, [r7, #12]
 800a184:	e002      	b.n	800a18c <inc_lock+0x6c>
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	3301      	adds	r3, #1
 800a18a:	60fb      	str	r3, [r7, #12]
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	2b01      	cmp	r3, #1
 800a190:	d806      	bhi.n	800a1a0 <inc_lock+0x80>
 800a192:	4a29      	ldr	r2, [pc, #164]	; (800a238 <inc_lock+0x118>)
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	011b      	lsls	r3, r3, #4
 800a198:	4413      	add	r3, r2
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d1f2      	bne.n	800a186 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	2b02      	cmp	r3, #2
 800a1a4:	d101      	bne.n	800a1aa <inc_lock+0x8a>
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	e040      	b.n	800a22c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681a      	ldr	r2, [r3, #0]
 800a1ae:	4922      	ldr	r1, [pc, #136]	; (800a238 <inc_lock+0x118>)
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	011b      	lsls	r3, r3, #4
 800a1b4:	440b      	add	r3, r1
 800a1b6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	689a      	ldr	r2, [r3, #8]
 800a1bc:	491e      	ldr	r1, [pc, #120]	; (800a238 <inc_lock+0x118>)
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	011b      	lsls	r3, r3, #4
 800a1c2:	440b      	add	r3, r1
 800a1c4:	3304      	adds	r3, #4
 800a1c6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	695a      	ldr	r2, [r3, #20]
 800a1cc:	491a      	ldr	r1, [pc, #104]	; (800a238 <inc_lock+0x118>)
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	011b      	lsls	r3, r3, #4
 800a1d2:	440b      	add	r3, r1
 800a1d4:	3308      	adds	r3, #8
 800a1d6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a1d8:	4a17      	ldr	r2, [pc, #92]	; (800a238 <inc_lock+0x118>)
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	011b      	lsls	r3, r3, #4
 800a1de:	4413      	add	r3, r2
 800a1e0:	330c      	adds	r3, #12
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d009      	beq.n	800a200 <inc_lock+0xe0>
 800a1ec:	4a12      	ldr	r2, [pc, #72]	; (800a238 <inc_lock+0x118>)
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	011b      	lsls	r3, r3, #4
 800a1f2:	4413      	add	r3, r2
 800a1f4:	330c      	adds	r3, #12
 800a1f6:	881b      	ldrh	r3, [r3, #0]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d001      	beq.n	800a200 <inc_lock+0xe0>
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	e015      	b.n	800a22c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d108      	bne.n	800a218 <inc_lock+0xf8>
 800a206:	4a0c      	ldr	r2, [pc, #48]	; (800a238 <inc_lock+0x118>)
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	011b      	lsls	r3, r3, #4
 800a20c:	4413      	add	r3, r2
 800a20e:	330c      	adds	r3, #12
 800a210:	881b      	ldrh	r3, [r3, #0]
 800a212:	3301      	adds	r3, #1
 800a214:	b29a      	uxth	r2, r3
 800a216:	e001      	b.n	800a21c <inc_lock+0xfc>
 800a218:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a21c:	4906      	ldr	r1, [pc, #24]	; (800a238 <inc_lock+0x118>)
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	011b      	lsls	r3, r3, #4
 800a222:	440b      	add	r3, r1
 800a224:	330c      	adds	r3, #12
 800a226:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	3301      	adds	r3, #1
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	3714      	adds	r7, #20
 800a230:	46bd      	mov	sp, r7
 800a232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a236:	4770      	bx	lr
 800a238:	200002e4 	.word	0x200002e4

0800a23c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a23c:	b480      	push	{r7}
 800a23e:	b085      	sub	sp, #20
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	3b01      	subs	r3, #1
 800a248:	607b      	str	r3, [r7, #4]
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2b01      	cmp	r3, #1
 800a24e:	d825      	bhi.n	800a29c <dec_lock+0x60>
		n = Files[i].ctr;
 800a250:	4a17      	ldr	r2, [pc, #92]	; (800a2b0 <dec_lock+0x74>)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	011b      	lsls	r3, r3, #4
 800a256:	4413      	add	r3, r2
 800a258:	330c      	adds	r3, #12
 800a25a:	881b      	ldrh	r3, [r3, #0]
 800a25c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a25e:	89fb      	ldrh	r3, [r7, #14]
 800a260:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a264:	d101      	bne.n	800a26a <dec_lock+0x2e>
 800a266:	2300      	movs	r3, #0
 800a268:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a26a:	89fb      	ldrh	r3, [r7, #14]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d002      	beq.n	800a276 <dec_lock+0x3a>
 800a270:	89fb      	ldrh	r3, [r7, #14]
 800a272:	3b01      	subs	r3, #1
 800a274:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a276:	4a0e      	ldr	r2, [pc, #56]	; (800a2b0 <dec_lock+0x74>)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	011b      	lsls	r3, r3, #4
 800a27c:	4413      	add	r3, r2
 800a27e:	330c      	adds	r3, #12
 800a280:	89fa      	ldrh	r2, [r7, #14]
 800a282:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a284:	89fb      	ldrh	r3, [r7, #14]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d105      	bne.n	800a296 <dec_lock+0x5a>
 800a28a:	4a09      	ldr	r2, [pc, #36]	; (800a2b0 <dec_lock+0x74>)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	011b      	lsls	r3, r3, #4
 800a290:	4413      	add	r3, r2
 800a292:	2200      	movs	r2, #0
 800a294:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a296:	2300      	movs	r3, #0
 800a298:	737b      	strb	r3, [r7, #13]
 800a29a:	e001      	b.n	800a2a0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a29c:	2302      	movs	r3, #2
 800a29e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a2a0:	7b7b      	ldrb	r3, [r7, #13]
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3714      	adds	r7, #20
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ac:	4770      	bx	lr
 800a2ae:	bf00      	nop
 800a2b0:	200002e4 	.word	0x200002e4

0800a2b4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b085      	sub	sp, #20
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a2bc:	2300      	movs	r3, #0
 800a2be:	60fb      	str	r3, [r7, #12]
 800a2c0:	e010      	b.n	800a2e4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a2c2:	4a0d      	ldr	r2, [pc, #52]	; (800a2f8 <clear_lock+0x44>)
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	011b      	lsls	r3, r3, #4
 800a2c8:	4413      	add	r3, r2
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	687a      	ldr	r2, [r7, #4]
 800a2ce:	429a      	cmp	r2, r3
 800a2d0:	d105      	bne.n	800a2de <clear_lock+0x2a>
 800a2d2:	4a09      	ldr	r2, [pc, #36]	; (800a2f8 <clear_lock+0x44>)
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	011b      	lsls	r3, r3, #4
 800a2d8:	4413      	add	r3, r2
 800a2da:	2200      	movs	r2, #0
 800a2dc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	3301      	adds	r3, #1
 800a2e2:	60fb      	str	r3, [r7, #12]
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	2b01      	cmp	r3, #1
 800a2e8:	d9eb      	bls.n	800a2c2 <clear_lock+0xe>
	}
}
 800a2ea:	bf00      	nop
 800a2ec:	3714      	adds	r7, #20
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f4:	4770      	bx	lr
 800a2f6:	bf00      	nop
 800a2f8:	200002e4 	.word	0x200002e4

0800a2fc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b086      	sub	sp, #24
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a304:	2300      	movs	r3, #0
 800a306:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	78db      	ldrb	r3, [r3, #3]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d034      	beq.n	800a37a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a314:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	7858      	ldrb	r0, [r3, #1]
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a320:	2301      	movs	r3, #1
 800a322:	697a      	ldr	r2, [r7, #20]
 800a324:	f7ff fd40 	bl	8009da8 <disk_write>
 800a328:	4603      	mov	r3, r0
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d002      	beq.n	800a334 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a32e:	2301      	movs	r3, #1
 800a330:	73fb      	strb	r3, [r7, #15]
 800a332:	e022      	b.n	800a37a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2200      	movs	r2, #0
 800a338:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6a1b      	ldr	r3, [r3, #32]
 800a33e:	697a      	ldr	r2, [r7, #20]
 800a340:	1ad2      	subs	r2, r2, r3
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	699b      	ldr	r3, [r3, #24]
 800a346:	429a      	cmp	r2, r3
 800a348:	d217      	bcs.n	800a37a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	789b      	ldrb	r3, [r3, #2]
 800a34e:	613b      	str	r3, [r7, #16]
 800a350:	e010      	b.n	800a374 <sync_window+0x78>
					wsect += fs->fsize;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	699b      	ldr	r3, [r3, #24]
 800a356:	697a      	ldr	r2, [r7, #20]
 800a358:	4413      	add	r3, r2
 800a35a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	7858      	ldrb	r0, [r3, #1]
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a366:	2301      	movs	r3, #1
 800a368:	697a      	ldr	r2, [r7, #20]
 800a36a:	f7ff fd1d 	bl	8009da8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a36e:	693b      	ldr	r3, [r7, #16]
 800a370:	3b01      	subs	r3, #1
 800a372:	613b      	str	r3, [r7, #16]
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	2b01      	cmp	r3, #1
 800a378:	d8eb      	bhi.n	800a352 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a37a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3718      	adds	r7, #24
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}

0800a384 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b084      	sub	sp, #16
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
 800a38c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a38e:	2300      	movs	r3, #0
 800a390:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a396:	683a      	ldr	r2, [r7, #0]
 800a398:	429a      	cmp	r2, r3
 800a39a:	d01b      	beq.n	800a3d4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	f7ff ffad 	bl	800a2fc <sync_window>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a3a6:	7bfb      	ldrb	r3, [r7, #15]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d113      	bne.n	800a3d4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	7858      	ldrb	r0, [r3, #1]
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	683a      	ldr	r2, [r7, #0]
 800a3ba:	f7ff fcd5 	bl	8009d68 <disk_read>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d004      	beq.n	800a3ce <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a3c4:	f04f 33ff 	mov.w	r3, #4294967295
 800a3c8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	683a      	ldr	r2, [r7, #0]
 800a3d2:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800a3d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3710      	adds	r7, #16
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}
	...

0800a3e0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b084      	sub	sp, #16
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f7ff ff87 	bl	800a2fc <sync_window>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a3f2:	7bfb      	ldrb	r3, [r7, #15]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d158      	bne.n	800a4aa <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	781b      	ldrb	r3, [r3, #0]
 800a3fc:	2b03      	cmp	r3, #3
 800a3fe:	d148      	bne.n	800a492 <sync_fs+0xb2>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	791b      	ldrb	r3, [r3, #4]
 800a404:	2b01      	cmp	r3, #1
 800a406:	d144      	bne.n	800a492 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	3330      	adds	r3, #48	; 0x30
 800a40c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a410:	2100      	movs	r1, #0
 800a412:	4618      	mov	r0, r3
 800a414:	f7ff fda9 	bl	8009f6a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	3330      	adds	r3, #48	; 0x30
 800a41c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a420:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a424:	4618      	mov	r0, r3
 800a426:	f7ff fd38 	bl	8009e9a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	3330      	adds	r3, #48	; 0x30
 800a42e:	4921      	ldr	r1, [pc, #132]	; (800a4b4 <sync_fs+0xd4>)
 800a430:	4618      	mov	r0, r3
 800a432:	f7ff fd4d 	bl	8009ed0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	3330      	adds	r3, #48	; 0x30
 800a43a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a43e:	491e      	ldr	r1, [pc, #120]	; (800a4b8 <sync_fs+0xd8>)
 800a440:	4618      	mov	r0, r3
 800a442:	f7ff fd45 	bl	8009ed0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	3330      	adds	r3, #48	; 0x30
 800a44a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	691b      	ldr	r3, [r3, #16]
 800a452:	4619      	mov	r1, r3
 800a454:	4610      	mov	r0, r2
 800a456:	f7ff fd3b 	bl	8009ed0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	3330      	adds	r3, #48	; 0x30
 800a45e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	68db      	ldr	r3, [r3, #12]
 800a466:	4619      	mov	r1, r3
 800a468:	4610      	mov	r0, r2
 800a46a:	f7ff fd31 	bl	8009ed0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	69db      	ldr	r3, [r3, #28]
 800a472:	1c5a      	adds	r2, r3, #1
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	7858      	ldrb	r0, [r3, #1]
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a486:	2301      	movs	r3, #1
 800a488:	f7ff fc8e 	bl	8009da8 <disk_write>
			fs->fsi_flag = 0;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2200      	movs	r2, #0
 800a490:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	785b      	ldrb	r3, [r3, #1]
 800a496:	2200      	movs	r2, #0
 800a498:	2100      	movs	r1, #0
 800a49a:	4618      	mov	r0, r3
 800a49c:	f7ff fca4 	bl	8009de8 <disk_ioctl>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d001      	beq.n	800a4aa <sync_fs+0xca>
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a4aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3710      	adds	r7, #16
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}
 800a4b4:	41615252 	.word	0x41615252
 800a4b8:	61417272 	.word	0x61417272

0800a4bc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b083      	sub	sp, #12
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
 800a4c4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	3b02      	subs	r3, #2
 800a4ca:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	695b      	ldr	r3, [r3, #20]
 800a4d0:	3b02      	subs	r3, #2
 800a4d2:	683a      	ldr	r2, [r7, #0]
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	d301      	bcc.n	800a4dc <clust2sect+0x20>
 800a4d8:	2300      	movs	r3, #0
 800a4da:	e008      	b.n	800a4ee <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	895b      	ldrh	r3, [r3, #10]
 800a4e0:	461a      	mov	r2, r3
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	fb03 f202 	mul.w	r2, r3, r2
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4ec:	4413      	add	r3, r2
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	370c      	adds	r7, #12
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f8:	4770      	bx	lr

0800a4fa <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a4fa:	b580      	push	{r7, lr}
 800a4fc:	b086      	sub	sp, #24
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	6078      	str	r0, [r7, #4]
 800a502:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	2b01      	cmp	r3, #1
 800a50e:	d904      	bls.n	800a51a <get_fat+0x20>
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	695b      	ldr	r3, [r3, #20]
 800a514:	683a      	ldr	r2, [r7, #0]
 800a516:	429a      	cmp	r2, r3
 800a518:	d302      	bcc.n	800a520 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a51a:	2301      	movs	r3, #1
 800a51c:	617b      	str	r3, [r7, #20]
 800a51e:	e08c      	b.n	800a63a <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a520:	f04f 33ff 	mov.w	r3, #4294967295
 800a524:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	781b      	ldrb	r3, [r3, #0]
 800a52a:	2b02      	cmp	r3, #2
 800a52c:	d045      	beq.n	800a5ba <get_fat+0xc0>
 800a52e:	2b03      	cmp	r3, #3
 800a530:	d05d      	beq.n	800a5ee <get_fat+0xf4>
 800a532:	2b01      	cmp	r3, #1
 800a534:	d177      	bne.n	800a626 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	60fb      	str	r3, [r7, #12]
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	085b      	lsrs	r3, r3, #1
 800a53e:	68fa      	ldr	r2, [r7, #12]
 800a540:	4413      	add	r3, r2
 800a542:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a544:	693b      	ldr	r3, [r7, #16]
 800a546:	6a1a      	ldr	r2, [r3, #32]
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	0a5b      	lsrs	r3, r3, #9
 800a54c:	4413      	add	r3, r2
 800a54e:	4619      	mov	r1, r3
 800a550:	6938      	ldr	r0, [r7, #16]
 800a552:	f7ff ff17 	bl	800a384 <move_window>
 800a556:	4603      	mov	r3, r0
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d167      	bne.n	800a62c <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	1c5a      	adds	r2, r3, #1
 800a560:	60fa      	str	r2, [r7, #12]
 800a562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a566:	693a      	ldr	r2, [r7, #16]
 800a568:	4413      	add	r3, r2
 800a56a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a56e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	6a1a      	ldr	r2, [r3, #32]
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	0a5b      	lsrs	r3, r3, #9
 800a578:	4413      	add	r3, r2
 800a57a:	4619      	mov	r1, r3
 800a57c:	6938      	ldr	r0, [r7, #16]
 800a57e:	f7ff ff01 	bl	800a384 <move_window>
 800a582:	4603      	mov	r3, r0
 800a584:	2b00      	cmp	r3, #0
 800a586:	d153      	bne.n	800a630 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a58e:	693a      	ldr	r2, [r7, #16]
 800a590:	4413      	add	r3, r2
 800a592:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a596:	021b      	lsls	r3, r3, #8
 800a598:	461a      	mov	r2, r3
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	4313      	orrs	r3, r2
 800a59e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	f003 0301 	and.w	r3, r3, #1
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d002      	beq.n	800a5b0 <get_fat+0xb6>
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	091b      	lsrs	r3, r3, #4
 800a5ae:	e002      	b.n	800a5b6 <get_fat+0xbc>
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a5b6:	617b      	str	r3, [r7, #20]
			break;
 800a5b8:	e03f      	b.n	800a63a <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	6a1a      	ldr	r2, [r3, #32]
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	0a1b      	lsrs	r3, r3, #8
 800a5c2:	4413      	add	r3, r2
 800a5c4:	4619      	mov	r1, r3
 800a5c6:	6938      	ldr	r0, [r7, #16]
 800a5c8:	f7ff fedc 	bl	800a384 <move_window>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d130      	bne.n	800a634 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	005b      	lsls	r3, r3, #1
 800a5dc:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a5e0:	4413      	add	r3, r2
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f7ff fc1e 	bl	8009e24 <ld_word>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	617b      	str	r3, [r7, #20]
			break;
 800a5ec:	e025      	b.n	800a63a <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a5ee:	693b      	ldr	r3, [r7, #16]
 800a5f0:	6a1a      	ldr	r2, [r3, #32]
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	09db      	lsrs	r3, r3, #7
 800a5f6:	4413      	add	r3, r2
 800a5f8:	4619      	mov	r1, r3
 800a5fa:	6938      	ldr	r0, [r7, #16]
 800a5fc:	f7ff fec2 	bl	800a384 <move_window>
 800a600:	4603      	mov	r3, r0
 800a602:	2b00      	cmp	r3, #0
 800a604:	d118      	bne.n	800a638 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a606:	693b      	ldr	r3, [r7, #16]
 800a608:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	009b      	lsls	r3, r3, #2
 800a610:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a614:	4413      	add	r3, r2
 800a616:	4618      	mov	r0, r3
 800a618:	f7ff fc1c 	bl	8009e54 <ld_dword>
 800a61c:	4603      	mov	r3, r0
 800a61e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a622:	617b      	str	r3, [r7, #20]
			break;
 800a624:	e009      	b.n	800a63a <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a626:	2301      	movs	r3, #1
 800a628:	617b      	str	r3, [r7, #20]
 800a62a:	e006      	b.n	800a63a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a62c:	bf00      	nop
 800a62e:	e004      	b.n	800a63a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a630:	bf00      	nop
 800a632:	e002      	b.n	800a63a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a634:	bf00      	nop
 800a636:	e000      	b.n	800a63a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a638:	bf00      	nop
		}
	}

	return val;
 800a63a:	697b      	ldr	r3, [r7, #20]
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	3718      	adds	r7, #24
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}

0800a644 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a644:	b590      	push	{r4, r7, lr}
 800a646:	b089      	sub	sp, #36	; 0x24
 800a648:	af00      	add	r7, sp, #0
 800a64a:	60f8      	str	r0, [r7, #12]
 800a64c:	60b9      	str	r1, [r7, #8]
 800a64e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a650:	2302      	movs	r3, #2
 800a652:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	2b01      	cmp	r3, #1
 800a658:	f240 80d6 	bls.w	800a808 <put_fat+0x1c4>
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	695b      	ldr	r3, [r3, #20]
 800a660:	68ba      	ldr	r2, [r7, #8]
 800a662:	429a      	cmp	r2, r3
 800a664:	f080 80d0 	bcs.w	800a808 <put_fat+0x1c4>
		switch (fs->fs_type) {
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	781b      	ldrb	r3, [r3, #0]
 800a66c:	2b02      	cmp	r3, #2
 800a66e:	d073      	beq.n	800a758 <put_fat+0x114>
 800a670:	2b03      	cmp	r3, #3
 800a672:	f000 8091 	beq.w	800a798 <put_fat+0x154>
 800a676:	2b01      	cmp	r3, #1
 800a678:	f040 80c6 	bne.w	800a808 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	61bb      	str	r3, [r7, #24]
 800a680:	69bb      	ldr	r3, [r7, #24]
 800a682:	085b      	lsrs	r3, r3, #1
 800a684:	69ba      	ldr	r2, [r7, #24]
 800a686:	4413      	add	r3, r2
 800a688:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	6a1a      	ldr	r2, [r3, #32]
 800a68e:	69bb      	ldr	r3, [r7, #24]
 800a690:	0a5b      	lsrs	r3, r3, #9
 800a692:	4413      	add	r3, r2
 800a694:	4619      	mov	r1, r3
 800a696:	68f8      	ldr	r0, [r7, #12]
 800a698:	f7ff fe74 	bl	800a384 <move_window>
 800a69c:	4603      	mov	r3, r0
 800a69e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a6a0:	7ffb      	ldrb	r3, [r7, #31]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	f040 80a9 	bne.w	800a7fa <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a6ae:	69bb      	ldr	r3, [r7, #24]
 800a6b0:	1c59      	adds	r1, r3, #1
 800a6b2:	61b9      	str	r1, [r7, #24]
 800a6b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6b8:	4413      	add	r3, r2
 800a6ba:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	f003 0301 	and.w	r3, r3, #1
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d00d      	beq.n	800a6e2 <put_fat+0x9e>
 800a6c6:	697b      	ldr	r3, [r7, #20]
 800a6c8:	781b      	ldrb	r3, [r3, #0]
 800a6ca:	b25b      	sxtb	r3, r3
 800a6cc:	f003 030f 	and.w	r3, r3, #15
 800a6d0:	b25a      	sxtb	r2, r3
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	b2db      	uxtb	r3, r3
 800a6d6:	011b      	lsls	r3, r3, #4
 800a6d8:	b25b      	sxtb	r3, r3
 800a6da:	4313      	orrs	r3, r2
 800a6dc:	b25b      	sxtb	r3, r3
 800a6de:	b2db      	uxtb	r3, r3
 800a6e0:	e001      	b.n	800a6e6 <put_fat+0xa2>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	b2db      	uxtb	r3, r3
 800a6e6:	697a      	ldr	r2, [r7, #20]
 800a6e8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	2201      	movs	r2, #1
 800a6ee:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	6a1a      	ldr	r2, [r3, #32]
 800a6f4:	69bb      	ldr	r3, [r7, #24]
 800a6f6:	0a5b      	lsrs	r3, r3, #9
 800a6f8:	4413      	add	r3, r2
 800a6fa:	4619      	mov	r1, r3
 800a6fc:	68f8      	ldr	r0, [r7, #12]
 800a6fe:	f7ff fe41 	bl	800a384 <move_window>
 800a702:	4603      	mov	r3, r0
 800a704:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a706:	7ffb      	ldrb	r3, [r7, #31]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d178      	bne.n	800a7fe <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a712:	69bb      	ldr	r3, [r7, #24]
 800a714:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a718:	4413      	add	r3, r2
 800a71a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a71c:	68bb      	ldr	r3, [r7, #8]
 800a71e:	f003 0301 	and.w	r3, r3, #1
 800a722:	2b00      	cmp	r3, #0
 800a724:	d003      	beq.n	800a72e <put_fat+0xea>
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	091b      	lsrs	r3, r3, #4
 800a72a:	b2db      	uxtb	r3, r3
 800a72c:	e00e      	b.n	800a74c <put_fat+0x108>
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	781b      	ldrb	r3, [r3, #0]
 800a732:	b25b      	sxtb	r3, r3
 800a734:	f023 030f 	bic.w	r3, r3, #15
 800a738:	b25a      	sxtb	r2, r3
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	0a1b      	lsrs	r3, r3, #8
 800a73e:	b25b      	sxtb	r3, r3
 800a740:	f003 030f 	and.w	r3, r3, #15
 800a744:	b25b      	sxtb	r3, r3
 800a746:	4313      	orrs	r3, r2
 800a748:	b25b      	sxtb	r3, r3
 800a74a:	b2db      	uxtb	r3, r3
 800a74c:	697a      	ldr	r2, [r7, #20]
 800a74e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	2201      	movs	r2, #1
 800a754:	70da      	strb	r2, [r3, #3]
			break;
 800a756:	e057      	b.n	800a808 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	6a1a      	ldr	r2, [r3, #32]
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	0a1b      	lsrs	r3, r3, #8
 800a760:	4413      	add	r3, r2
 800a762:	4619      	mov	r1, r3
 800a764:	68f8      	ldr	r0, [r7, #12]
 800a766:	f7ff fe0d 	bl	800a384 <move_window>
 800a76a:	4603      	mov	r3, r0
 800a76c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a76e:	7ffb      	ldrb	r3, [r7, #31]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d146      	bne.n	800a802 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	005b      	lsls	r3, r3, #1
 800a77e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a782:	4413      	add	r3, r2
 800a784:	687a      	ldr	r2, [r7, #4]
 800a786:	b292      	uxth	r2, r2
 800a788:	4611      	mov	r1, r2
 800a78a:	4618      	mov	r0, r3
 800a78c:	f7ff fb85 	bl	8009e9a <st_word>
			fs->wflag = 1;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2201      	movs	r2, #1
 800a794:	70da      	strb	r2, [r3, #3]
			break;
 800a796:	e037      	b.n	800a808 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	6a1a      	ldr	r2, [r3, #32]
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	09db      	lsrs	r3, r3, #7
 800a7a0:	4413      	add	r3, r2
 800a7a2:	4619      	mov	r1, r3
 800a7a4:	68f8      	ldr	r0, [r7, #12]
 800a7a6:	f7ff fded 	bl	800a384 <move_window>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a7ae:	7ffb      	ldrb	r3, [r7, #31]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d128      	bne.n	800a806 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	009b      	lsls	r3, r3, #2
 800a7c4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a7c8:	4413      	add	r3, r2
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f7ff fb42 	bl	8009e54 <ld_dword>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a7d6:	4323      	orrs	r3, r4
 800a7d8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	009b      	lsls	r3, r3, #2
 800a7e4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a7e8:	4413      	add	r3, r2
 800a7ea:	6879      	ldr	r1, [r7, #4]
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	f7ff fb6f 	bl	8009ed0 <st_dword>
			fs->wflag = 1;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	2201      	movs	r2, #1
 800a7f6:	70da      	strb	r2, [r3, #3]
			break;
 800a7f8:	e006      	b.n	800a808 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800a7fa:	bf00      	nop
 800a7fc:	e004      	b.n	800a808 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800a7fe:	bf00      	nop
 800a800:	e002      	b.n	800a808 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800a802:	bf00      	nop
 800a804:	e000      	b.n	800a808 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800a806:	bf00      	nop
		}
	}
	return res;
 800a808:	7ffb      	ldrb	r3, [r7, #31]
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3724      	adds	r7, #36	; 0x24
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd90      	pop	{r4, r7, pc}

0800a812 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a812:	b580      	push	{r7, lr}
 800a814:	b088      	sub	sp, #32
 800a816:	af00      	add	r7, sp, #0
 800a818:	60f8      	str	r0, [r7, #12]
 800a81a:	60b9      	str	r1, [r7, #8]
 800a81c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a81e:	2300      	movs	r3, #0
 800a820:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	2b01      	cmp	r3, #1
 800a82c:	d904      	bls.n	800a838 <remove_chain+0x26>
 800a82e:	69bb      	ldr	r3, [r7, #24]
 800a830:	695b      	ldr	r3, [r3, #20]
 800a832:	68ba      	ldr	r2, [r7, #8]
 800a834:	429a      	cmp	r2, r3
 800a836:	d301      	bcc.n	800a83c <remove_chain+0x2a>
 800a838:	2302      	movs	r3, #2
 800a83a:	e04b      	b.n	800a8d4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d00c      	beq.n	800a85c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a842:	f04f 32ff 	mov.w	r2, #4294967295
 800a846:	6879      	ldr	r1, [r7, #4]
 800a848:	69b8      	ldr	r0, [r7, #24]
 800a84a:	f7ff fefb 	bl	800a644 <put_fat>
 800a84e:	4603      	mov	r3, r0
 800a850:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a852:	7ffb      	ldrb	r3, [r7, #31]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d001      	beq.n	800a85c <remove_chain+0x4a>
 800a858:	7ffb      	ldrb	r3, [r7, #31]
 800a85a:	e03b      	b.n	800a8d4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a85c:	68b9      	ldr	r1, [r7, #8]
 800a85e:	68f8      	ldr	r0, [r7, #12]
 800a860:	f7ff fe4b 	bl	800a4fa <get_fat>
 800a864:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d031      	beq.n	800a8d0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a86c:	697b      	ldr	r3, [r7, #20]
 800a86e:	2b01      	cmp	r3, #1
 800a870:	d101      	bne.n	800a876 <remove_chain+0x64>
 800a872:	2302      	movs	r3, #2
 800a874:	e02e      	b.n	800a8d4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a876:	697b      	ldr	r3, [r7, #20]
 800a878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a87c:	d101      	bne.n	800a882 <remove_chain+0x70>
 800a87e:	2301      	movs	r3, #1
 800a880:	e028      	b.n	800a8d4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a882:	2200      	movs	r2, #0
 800a884:	68b9      	ldr	r1, [r7, #8]
 800a886:	69b8      	ldr	r0, [r7, #24]
 800a888:	f7ff fedc 	bl	800a644 <put_fat>
 800a88c:	4603      	mov	r3, r0
 800a88e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a890:	7ffb      	ldrb	r3, [r7, #31]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d001      	beq.n	800a89a <remove_chain+0x88>
 800a896:	7ffb      	ldrb	r3, [r7, #31]
 800a898:	e01c      	b.n	800a8d4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a89a:	69bb      	ldr	r3, [r7, #24]
 800a89c:	691a      	ldr	r2, [r3, #16]
 800a89e:	69bb      	ldr	r3, [r7, #24]
 800a8a0:	695b      	ldr	r3, [r3, #20]
 800a8a2:	3b02      	subs	r3, #2
 800a8a4:	429a      	cmp	r2, r3
 800a8a6:	d20b      	bcs.n	800a8c0 <remove_chain+0xae>
			fs->free_clst++;
 800a8a8:	69bb      	ldr	r3, [r7, #24]
 800a8aa:	691b      	ldr	r3, [r3, #16]
 800a8ac:	1c5a      	adds	r2, r3, #1
 800a8ae:	69bb      	ldr	r3, [r7, #24]
 800a8b0:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800a8b2:	69bb      	ldr	r3, [r7, #24]
 800a8b4:	791b      	ldrb	r3, [r3, #4]
 800a8b6:	f043 0301 	orr.w	r3, r3, #1
 800a8ba:	b2da      	uxtb	r2, r3
 800a8bc:	69bb      	ldr	r3, [r7, #24]
 800a8be:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a8c0:	697b      	ldr	r3, [r7, #20]
 800a8c2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a8c4:	69bb      	ldr	r3, [r7, #24]
 800a8c6:	695b      	ldr	r3, [r3, #20]
 800a8c8:	68ba      	ldr	r2, [r7, #8]
 800a8ca:	429a      	cmp	r2, r3
 800a8cc:	d3c6      	bcc.n	800a85c <remove_chain+0x4a>
 800a8ce:	e000      	b.n	800a8d2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a8d0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a8d2:	2300      	movs	r3, #0
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	3720      	adds	r7, #32
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}

0800a8dc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b088      	sub	sp, #32
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
 800a8e4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d10d      	bne.n	800a90e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a8f2:	693b      	ldr	r3, [r7, #16]
 800a8f4:	68db      	ldr	r3, [r3, #12]
 800a8f6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a8f8:	69bb      	ldr	r3, [r7, #24]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d004      	beq.n	800a908 <create_chain+0x2c>
 800a8fe:	693b      	ldr	r3, [r7, #16]
 800a900:	695b      	ldr	r3, [r3, #20]
 800a902:	69ba      	ldr	r2, [r7, #24]
 800a904:	429a      	cmp	r2, r3
 800a906:	d31b      	bcc.n	800a940 <create_chain+0x64>
 800a908:	2301      	movs	r3, #1
 800a90a:	61bb      	str	r3, [r7, #24]
 800a90c:	e018      	b.n	800a940 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a90e:	6839      	ldr	r1, [r7, #0]
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f7ff fdf2 	bl	800a4fa <get_fat>
 800a916:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	2b01      	cmp	r3, #1
 800a91c:	d801      	bhi.n	800a922 <create_chain+0x46>
 800a91e:	2301      	movs	r3, #1
 800a920:	e070      	b.n	800aa04 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a928:	d101      	bne.n	800a92e <create_chain+0x52>
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	e06a      	b.n	800aa04 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a92e:	693b      	ldr	r3, [r7, #16]
 800a930:	695b      	ldr	r3, [r3, #20]
 800a932:	68fa      	ldr	r2, [r7, #12]
 800a934:	429a      	cmp	r2, r3
 800a936:	d201      	bcs.n	800a93c <create_chain+0x60>
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	e063      	b.n	800aa04 <create_chain+0x128>
		scl = clst;
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a940:	69bb      	ldr	r3, [r7, #24]
 800a942:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a944:	69fb      	ldr	r3, [r7, #28]
 800a946:	3301      	adds	r3, #1
 800a948:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	695b      	ldr	r3, [r3, #20]
 800a94e:	69fa      	ldr	r2, [r7, #28]
 800a950:	429a      	cmp	r2, r3
 800a952:	d307      	bcc.n	800a964 <create_chain+0x88>
				ncl = 2;
 800a954:	2302      	movs	r3, #2
 800a956:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a958:	69fa      	ldr	r2, [r7, #28]
 800a95a:	69bb      	ldr	r3, [r7, #24]
 800a95c:	429a      	cmp	r2, r3
 800a95e:	d901      	bls.n	800a964 <create_chain+0x88>
 800a960:	2300      	movs	r3, #0
 800a962:	e04f      	b.n	800aa04 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a964:	69f9      	ldr	r1, [r7, #28]
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f7ff fdc7 	bl	800a4fa <get_fat>
 800a96c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d00e      	beq.n	800a992 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	2b01      	cmp	r3, #1
 800a978:	d003      	beq.n	800a982 <create_chain+0xa6>
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a980:	d101      	bne.n	800a986 <create_chain+0xaa>
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	e03e      	b.n	800aa04 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a986:	69fa      	ldr	r2, [r7, #28]
 800a988:	69bb      	ldr	r3, [r7, #24]
 800a98a:	429a      	cmp	r2, r3
 800a98c:	d1da      	bne.n	800a944 <create_chain+0x68>
 800a98e:	2300      	movs	r3, #0
 800a990:	e038      	b.n	800aa04 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a992:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a994:	f04f 32ff 	mov.w	r2, #4294967295
 800a998:	69f9      	ldr	r1, [r7, #28]
 800a99a:	6938      	ldr	r0, [r7, #16]
 800a99c:	f7ff fe52 	bl	800a644 <put_fat>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a9a4:	7dfb      	ldrb	r3, [r7, #23]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d109      	bne.n	800a9be <create_chain+0xe2>
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d006      	beq.n	800a9be <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a9b0:	69fa      	ldr	r2, [r7, #28]
 800a9b2:	6839      	ldr	r1, [r7, #0]
 800a9b4:	6938      	ldr	r0, [r7, #16]
 800a9b6:	f7ff fe45 	bl	800a644 <put_fat>
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a9be:	7dfb      	ldrb	r3, [r7, #23]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d116      	bne.n	800a9f2 <create_chain+0x116>
		fs->last_clst = ncl;
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	69fa      	ldr	r2, [r7, #28]
 800a9c8:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a9ca:	693b      	ldr	r3, [r7, #16]
 800a9cc:	691a      	ldr	r2, [r3, #16]
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	695b      	ldr	r3, [r3, #20]
 800a9d2:	3b02      	subs	r3, #2
 800a9d4:	429a      	cmp	r2, r3
 800a9d6:	d804      	bhi.n	800a9e2 <create_chain+0x106>
 800a9d8:	693b      	ldr	r3, [r7, #16]
 800a9da:	691b      	ldr	r3, [r3, #16]
 800a9dc:	1e5a      	subs	r2, r3, #1
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800a9e2:	693b      	ldr	r3, [r7, #16]
 800a9e4:	791b      	ldrb	r3, [r3, #4]
 800a9e6:	f043 0301 	orr.w	r3, r3, #1
 800a9ea:	b2da      	uxtb	r2, r3
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	711a      	strb	r2, [r3, #4]
 800a9f0:	e007      	b.n	800aa02 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a9f2:	7dfb      	ldrb	r3, [r7, #23]
 800a9f4:	2b01      	cmp	r3, #1
 800a9f6:	d102      	bne.n	800a9fe <create_chain+0x122>
 800a9f8:	f04f 33ff 	mov.w	r3, #4294967295
 800a9fc:	e000      	b.n	800aa00 <create_chain+0x124>
 800a9fe:	2301      	movs	r3, #1
 800aa00:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800aa02:	69fb      	ldr	r3, [r7, #28]
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	3720      	adds	r7, #32
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}

0800aa0c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b087      	sub	sp, #28
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
 800aa14:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa20:	3304      	adds	r3, #4
 800aa22:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	0a5b      	lsrs	r3, r3, #9
 800aa28:	68fa      	ldr	r2, [r7, #12]
 800aa2a:	8952      	ldrh	r2, [r2, #10]
 800aa2c:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa30:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	1d1a      	adds	r2, r3, #4
 800aa36:	613a      	str	r2, [r7, #16]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d101      	bne.n	800aa46 <clmt_clust+0x3a>
 800aa42:	2300      	movs	r3, #0
 800aa44:	e010      	b.n	800aa68 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800aa46:	697a      	ldr	r2, [r7, #20]
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	429a      	cmp	r2, r3
 800aa4c:	d307      	bcc.n	800aa5e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800aa4e:	697a      	ldr	r2, [r7, #20]
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	1ad3      	subs	r3, r2, r3
 800aa54:	617b      	str	r3, [r7, #20]
 800aa56:	693b      	ldr	r3, [r7, #16]
 800aa58:	3304      	adds	r3, #4
 800aa5a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800aa5c:	e7e9      	b.n	800aa32 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800aa5e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	681a      	ldr	r2, [r3, #0]
 800aa64:	697b      	ldr	r3, [r7, #20]
 800aa66:	4413      	add	r3, r2
}
 800aa68:	4618      	mov	r0, r3
 800aa6a:	371c      	adds	r7, #28
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa72:	4770      	bx	lr

0800aa74 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b086      	sub	sp, #24
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
 800aa7c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aa8a:	d204      	bcs.n	800aa96 <dir_sdi+0x22>
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	f003 031f 	and.w	r3, r3, #31
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d001      	beq.n	800aa9a <dir_sdi+0x26>
		return FR_INT_ERR;
 800aa96:	2302      	movs	r3, #2
 800aa98:	e063      	b.n	800ab62 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	683a      	ldr	r2, [r7, #0]
 800aa9e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	689b      	ldr	r3, [r3, #8]
 800aaa4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800aaa6:	697b      	ldr	r3, [r7, #20]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d106      	bne.n	800aaba <dir_sdi+0x46>
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	781b      	ldrb	r3, [r3, #0]
 800aab0:	2b02      	cmp	r3, #2
 800aab2:	d902      	bls.n	800aaba <dir_sdi+0x46>
		clst = fs->dirbase;
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aab8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800aaba:	697b      	ldr	r3, [r7, #20]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d10c      	bne.n	800aada <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	095b      	lsrs	r3, r3, #5
 800aac4:	693a      	ldr	r2, [r7, #16]
 800aac6:	8912      	ldrh	r2, [r2, #8]
 800aac8:	4293      	cmp	r3, r2
 800aaca:	d301      	bcc.n	800aad0 <dir_sdi+0x5c>
 800aacc:	2302      	movs	r3, #2
 800aace:	e048      	b.n	800ab62 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800aad0:	693b      	ldr	r3, [r7, #16]
 800aad2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	61da      	str	r2, [r3, #28]
 800aad8:	e029      	b.n	800ab2e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800aada:	693b      	ldr	r3, [r7, #16]
 800aadc:	895b      	ldrh	r3, [r3, #10]
 800aade:	025b      	lsls	r3, r3, #9
 800aae0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800aae2:	e019      	b.n	800ab18 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6979      	ldr	r1, [r7, #20]
 800aae8:	4618      	mov	r0, r3
 800aaea:	f7ff fd06 	bl	800a4fa <get_fat>
 800aaee:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800aaf0:	697b      	ldr	r3, [r7, #20]
 800aaf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaf6:	d101      	bne.n	800aafc <dir_sdi+0x88>
 800aaf8:	2301      	movs	r3, #1
 800aafa:	e032      	b.n	800ab62 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	2b01      	cmp	r3, #1
 800ab00:	d904      	bls.n	800ab0c <dir_sdi+0x98>
 800ab02:	693b      	ldr	r3, [r7, #16]
 800ab04:	695b      	ldr	r3, [r3, #20]
 800ab06:	697a      	ldr	r2, [r7, #20]
 800ab08:	429a      	cmp	r2, r3
 800ab0a:	d301      	bcc.n	800ab10 <dir_sdi+0x9c>
 800ab0c:	2302      	movs	r3, #2
 800ab0e:	e028      	b.n	800ab62 <dir_sdi+0xee>
			ofs -= csz;
 800ab10:	683a      	ldr	r2, [r7, #0]
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	1ad3      	subs	r3, r2, r3
 800ab16:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ab18:	683a      	ldr	r2, [r7, #0]
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	429a      	cmp	r2, r3
 800ab1e:	d2e1      	bcs.n	800aae4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800ab20:	6979      	ldr	r1, [r7, #20]
 800ab22:	6938      	ldr	r0, [r7, #16]
 800ab24:	f7ff fcca 	bl	800a4bc <clust2sect>
 800ab28:	4602      	mov	r2, r0
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	697a      	ldr	r2, [r7, #20]
 800ab32:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	69db      	ldr	r3, [r3, #28]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d101      	bne.n	800ab40 <dir_sdi+0xcc>
 800ab3c:	2302      	movs	r3, #2
 800ab3e:	e010      	b.n	800ab62 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	69da      	ldr	r2, [r3, #28]
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	0a5b      	lsrs	r3, r3, #9
 800ab48:	441a      	add	r2, r3
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ab4e:	693b      	ldr	r3, [r7, #16]
 800ab50:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab5a:	441a      	add	r2, r3
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ab60:	2300      	movs	r3, #0
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	3718      	adds	r7, #24
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}

0800ab6a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ab6a:	b580      	push	{r7, lr}
 800ab6c:	b086      	sub	sp, #24
 800ab6e:	af00      	add	r7, sp, #0
 800ab70:	6078      	str	r0, [r7, #4]
 800ab72:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	695b      	ldr	r3, [r3, #20]
 800ab7e:	3320      	adds	r3, #32
 800ab80:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	69db      	ldr	r3, [r3, #28]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d003      	beq.n	800ab92 <dir_next+0x28>
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ab90:	d301      	bcc.n	800ab96 <dir_next+0x2c>
 800ab92:	2304      	movs	r3, #4
 800ab94:	e0aa      	b.n	800acec <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	f040 8098 	bne.w	800acd2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	69db      	ldr	r3, [r3, #28]
 800aba6:	1c5a      	adds	r2, r3, #1
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	699b      	ldr	r3, [r3, #24]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d10b      	bne.n	800abcc <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	095b      	lsrs	r3, r3, #5
 800abb8:	68fa      	ldr	r2, [r7, #12]
 800abba:	8912      	ldrh	r2, [r2, #8]
 800abbc:	4293      	cmp	r3, r2
 800abbe:	f0c0 8088 	bcc.w	800acd2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2200      	movs	r2, #0
 800abc6:	61da      	str	r2, [r3, #28]
 800abc8:	2304      	movs	r3, #4
 800abca:	e08f      	b.n	800acec <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	0a5b      	lsrs	r3, r3, #9
 800abd0:	68fa      	ldr	r2, [r7, #12]
 800abd2:	8952      	ldrh	r2, [r2, #10]
 800abd4:	3a01      	subs	r2, #1
 800abd6:	4013      	ands	r3, r2
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d17a      	bne.n	800acd2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800abdc:	687a      	ldr	r2, [r7, #4]
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	699b      	ldr	r3, [r3, #24]
 800abe2:	4619      	mov	r1, r3
 800abe4:	4610      	mov	r0, r2
 800abe6:	f7ff fc88 	bl	800a4fa <get_fat>
 800abea:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800abec:	697b      	ldr	r3, [r7, #20]
 800abee:	2b01      	cmp	r3, #1
 800abf0:	d801      	bhi.n	800abf6 <dir_next+0x8c>
 800abf2:	2302      	movs	r3, #2
 800abf4:	e07a      	b.n	800acec <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800abf6:	697b      	ldr	r3, [r7, #20]
 800abf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abfc:	d101      	bne.n	800ac02 <dir_next+0x98>
 800abfe:	2301      	movs	r3, #1
 800ac00:	e074      	b.n	800acec <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	695b      	ldr	r3, [r3, #20]
 800ac06:	697a      	ldr	r2, [r7, #20]
 800ac08:	429a      	cmp	r2, r3
 800ac0a:	d358      	bcc.n	800acbe <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d104      	bne.n	800ac1c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2200      	movs	r2, #0
 800ac16:	61da      	str	r2, [r3, #28]
 800ac18:	2304      	movs	r3, #4
 800ac1a:	e067      	b.n	800acec <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ac1c:	687a      	ldr	r2, [r7, #4]
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	699b      	ldr	r3, [r3, #24]
 800ac22:	4619      	mov	r1, r3
 800ac24:	4610      	mov	r0, r2
 800ac26:	f7ff fe59 	bl	800a8dc <create_chain>
 800ac2a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ac2c:	697b      	ldr	r3, [r7, #20]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d101      	bne.n	800ac36 <dir_next+0xcc>
 800ac32:	2307      	movs	r3, #7
 800ac34:	e05a      	b.n	800acec <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	2b01      	cmp	r3, #1
 800ac3a:	d101      	bne.n	800ac40 <dir_next+0xd6>
 800ac3c:	2302      	movs	r3, #2
 800ac3e:	e055      	b.n	800acec <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ac40:	697b      	ldr	r3, [r7, #20]
 800ac42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac46:	d101      	bne.n	800ac4c <dir_next+0xe2>
 800ac48:	2301      	movs	r3, #1
 800ac4a:	e04f      	b.n	800acec <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ac4c:	68f8      	ldr	r0, [r7, #12]
 800ac4e:	f7ff fb55 	bl	800a2fc <sync_window>
 800ac52:	4603      	mov	r3, r0
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d001      	beq.n	800ac5c <dir_next+0xf2>
 800ac58:	2301      	movs	r3, #1
 800ac5a:	e047      	b.n	800acec <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	3330      	adds	r3, #48	; 0x30
 800ac60:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ac64:	2100      	movs	r1, #0
 800ac66:	4618      	mov	r0, r3
 800ac68:	f7ff f97f 	bl	8009f6a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	613b      	str	r3, [r7, #16]
 800ac70:	6979      	ldr	r1, [r7, #20]
 800ac72:	68f8      	ldr	r0, [r7, #12]
 800ac74:	f7ff fc22 	bl	800a4bc <clust2sect>
 800ac78:	4602      	mov	r2, r0
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	62da      	str	r2, [r3, #44]	; 0x2c
 800ac7e:	e012      	b.n	800aca6 <dir_next+0x13c>
						fs->wflag = 1;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	2201      	movs	r2, #1
 800ac84:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ac86:	68f8      	ldr	r0, [r7, #12]
 800ac88:	f7ff fb38 	bl	800a2fc <sync_window>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d001      	beq.n	800ac96 <dir_next+0x12c>
 800ac92:	2301      	movs	r3, #1
 800ac94:	e02a      	b.n	800acec <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ac96:	693b      	ldr	r3, [r7, #16]
 800ac98:	3301      	adds	r3, #1
 800ac9a:	613b      	str	r3, [r7, #16]
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aca0:	1c5a      	adds	r2, r3, #1
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	62da      	str	r2, [r3, #44]	; 0x2c
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	895b      	ldrh	r3, [r3, #10]
 800acaa:	461a      	mov	r2, r3
 800acac:	693b      	ldr	r3, [r7, #16]
 800acae:	4293      	cmp	r3, r2
 800acb0:	d3e6      	bcc.n	800ac80 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acb6:	693b      	ldr	r3, [r7, #16]
 800acb8:	1ad2      	subs	r2, r2, r3
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	697a      	ldr	r2, [r7, #20]
 800acc2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800acc4:	6979      	ldr	r1, [r7, #20]
 800acc6:	68f8      	ldr	r0, [r7, #12]
 800acc8:	f7ff fbf8 	bl	800a4bc <clust2sect>
 800accc:	4602      	mov	r2, r0
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	68ba      	ldr	r2, [r7, #8]
 800acd6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ace4:	441a      	add	r2, r3
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800acea:	2300      	movs	r3, #0
}
 800acec:	4618      	mov	r0, r3
 800acee:	3718      	adds	r7, #24
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}

0800acf4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b086      	sub	sp, #24
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ad04:	2100      	movs	r1, #0
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f7ff feb4 	bl	800aa74 <dir_sdi>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ad10:	7dfb      	ldrb	r3, [r7, #23]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d12b      	bne.n	800ad6e <dir_alloc+0x7a>
		n = 0;
 800ad16:	2300      	movs	r3, #0
 800ad18:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	69db      	ldr	r3, [r3, #28]
 800ad1e:	4619      	mov	r1, r3
 800ad20:	68f8      	ldr	r0, [r7, #12]
 800ad22:	f7ff fb2f 	bl	800a384 <move_window>
 800ad26:	4603      	mov	r3, r0
 800ad28:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ad2a:	7dfb      	ldrb	r3, [r7, #23]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d11d      	bne.n	800ad6c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6a1b      	ldr	r3, [r3, #32]
 800ad34:	781b      	ldrb	r3, [r3, #0]
 800ad36:	2be5      	cmp	r3, #229	; 0xe5
 800ad38:	d004      	beq.n	800ad44 <dir_alloc+0x50>
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6a1b      	ldr	r3, [r3, #32]
 800ad3e:	781b      	ldrb	r3, [r3, #0]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d107      	bne.n	800ad54 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	3301      	adds	r3, #1
 800ad48:	613b      	str	r3, [r7, #16]
 800ad4a:	693a      	ldr	r2, [r7, #16]
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	429a      	cmp	r2, r3
 800ad50:	d102      	bne.n	800ad58 <dir_alloc+0x64>
 800ad52:	e00c      	b.n	800ad6e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ad54:	2300      	movs	r3, #0
 800ad56:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ad58:	2101      	movs	r1, #1
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f7ff ff05 	bl	800ab6a <dir_next>
 800ad60:	4603      	mov	r3, r0
 800ad62:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ad64:	7dfb      	ldrb	r3, [r7, #23]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d0d7      	beq.n	800ad1a <dir_alloc+0x26>
 800ad6a:	e000      	b.n	800ad6e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ad6c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ad6e:	7dfb      	ldrb	r3, [r7, #23]
 800ad70:	2b04      	cmp	r3, #4
 800ad72:	d101      	bne.n	800ad78 <dir_alloc+0x84>
 800ad74:	2307      	movs	r3, #7
 800ad76:	75fb      	strb	r3, [r7, #23]
	return res;
 800ad78:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3718      	adds	r7, #24
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}

0800ad82 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ad82:	b580      	push	{r7, lr}
 800ad84:	b084      	sub	sp, #16
 800ad86:	af00      	add	r7, sp, #0
 800ad88:	6078      	str	r0, [r7, #4]
 800ad8a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	331a      	adds	r3, #26
 800ad90:	4618      	mov	r0, r3
 800ad92:	f7ff f847 	bl	8009e24 <ld_word>
 800ad96:	4603      	mov	r3, r0
 800ad98:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	781b      	ldrb	r3, [r3, #0]
 800ad9e:	2b03      	cmp	r3, #3
 800ada0:	d109      	bne.n	800adb6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	3314      	adds	r3, #20
 800ada6:	4618      	mov	r0, r3
 800ada8:	f7ff f83c 	bl	8009e24 <ld_word>
 800adac:	4603      	mov	r3, r0
 800adae:	041b      	lsls	r3, r3, #16
 800adb0:	68fa      	ldr	r2, [r7, #12]
 800adb2:	4313      	orrs	r3, r2
 800adb4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800adb6:	68fb      	ldr	r3, [r7, #12]
}
 800adb8:	4618      	mov	r0, r3
 800adba:	3710      	adds	r7, #16
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd80      	pop	{r7, pc}

0800adc0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b084      	sub	sp, #16
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	60f8      	str	r0, [r7, #12]
 800adc8:	60b9      	str	r1, [r7, #8]
 800adca:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	331a      	adds	r3, #26
 800add0:	687a      	ldr	r2, [r7, #4]
 800add2:	b292      	uxth	r2, r2
 800add4:	4611      	mov	r1, r2
 800add6:	4618      	mov	r0, r3
 800add8:	f7ff f85f 	bl	8009e9a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	781b      	ldrb	r3, [r3, #0]
 800ade0:	2b03      	cmp	r3, #3
 800ade2:	d109      	bne.n	800adf8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	f103 0214 	add.w	r2, r3, #20
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	0c1b      	lsrs	r3, r3, #16
 800adee:	b29b      	uxth	r3, r3
 800adf0:	4619      	mov	r1, r3
 800adf2:	4610      	mov	r0, r2
 800adf4:	f7ff f851 	bl	8009e9a <st_word>
	}
}
 800adf8:	bf00      	nop
 800adfa:	3710      	adds	r7, #16
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}

0800ae00 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b086      	sub	sp, #24
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ae0e:	2100      	movs	r1, #0
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f7ff fe2f 	bl	800aa74 <dir_sdi>
 800ae16:	4603      	mov	r3, r0
 800ae18:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ae1a:	7dfb      	ldrb	r3, [r7, #23]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d001      	beq.n	800ae24 <dir_find+0x24>
 800ae20:	7dfb      	ldrb	r3, [r7, #23]
 800ae22:	e03e      	b.n	800aea2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	69db      	ldr	r3, [r3, #28]
 800ae28:	4619      	mov	r1, r3
 800ae2a:	6938      	ldr	r0, [r7, #16]
 800ae2c:	f7ff faaa 	bl	800a384 <move_window>
 800ae30:	4603      	mov	r3, r0
 800ae32:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ae34:	7dfb      	ldrb	r3, [r7, #23]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d12f      	bne.n	800ae9a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6a1b      	ldr	r3, [r3, #32]
 800ae3e:	781b      	ldrb	r3, [r3, #0]
 800ae40:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ae42:	7bfb      	ldrb	r3, [r7, #15]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d102      	bne.n	800ae4e <dir_find+0x4e>
 800ae48:	2304      	movs	r3, #4
 800ae4a:	75fb      	strb	r3, [r7, #23]
 800ae4c:	e028      	b.n	800aea0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6a1b      	ldr	r3, [r3, #32]
 800ae52:	330b      	adds	r3, #11
 800ae54:	781b      	ldrb	r3, [r3, #0]
 800ae56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ae5a:	b2da      	uxtb	r2, r3
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	6a1b      	ldr	r3, [r3, #32]
 800ae64:	330b      	adds	r3, #11
 800ae66:	781b      	ldrb	r3, [r3, #0]
 800ae68:	f003 0308 	and.w	r3, r3, #8
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d10a      	bne.n	800ae86 <dir_find+0x86>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6a18      	ldr	r0, [r3, #32]
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	3324      	adds	r3, #36	; 0x24
 800ae78:	220b      	movs	r2, #11
 800ae7a:	4619      	mov	r1, r3
 800ae7c:	f7ff f88f 	bl	8009f9e <mem_cmp>
 800ae80:	4603      	mov	r3, r0
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d00b      	beq.n	800ae9e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ae86:	2100      	movs	r1, #0
 800ae88:	6878      	ldr	r0, [r7, #4]
 800ae8a:	f7ff fe6e 	bl	800ab6a <dir_next>
 800ae8e:	4603      	mov	r3, r0
 800ae90:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ae92:	7dfb      	ldrb	r3, [r7, #23]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d0c5      	beq.n	800ae24 <dir_find+0x24>
 800ae98:	e002      	b.n	800aea0 <dir_find+0xa0>
		if (res != FR_OK) break;
 800ae9a:	bf00      	nop
 800ae9c:	e000      	b.n	800aea0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ae9e:	bf00      	nop

	return res;
 800aea0:	7dfb      	ldrb	r3, [r7, #23]
}
 800aea2:	4618      	mov	r0, r3
 800aea4:	3718      	adds	r7, #24
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}

0800aeaa <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800aeaa:	b580      	push	{r7, lr}
 800aeac:	b084      	sub	sp, #16
 800aeae:	af00      	add	r7, sp, #0
 800aeb0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800aeb8:	2101      	movs	r1, #1
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f7ff ff1a 	bl	800acf4 <dir_alloc>
 800aec0:	4603      	mov	r3, r0
 800aec2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800aec4:	7bfb      	ldrb	r3, [r7, #15]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d11c      	bne.n	800af04 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	69db      	ldr	r3, [r3, #28]
 800aece:	4619      	mov	r1, r3
 800aed0:	68b8      	ldr	r0, [r7, #8]
 800aed2:	f7ff fa57 	bl	800a384 <move_window>
 800aed6:	4603      	mov	r3, r0
 800aed8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800aeda:	7bfb      	ldrb	r3, [r7, #15]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d111      	bne.n	800af04 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6a1b      	ldr	r3, [r3, #32]
 800aee4:	2220      	movs	r2, #32
 800aee6:	2100      	movs	r1, #0
 800aee8:	4618      	mov	r0, r3
 800aeea:	f7ff f83e 	bl	8009f6a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	6a18      	ldr	r0, [r3, #32]
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	3324      	adds	r3, #36	; 0x24
 800aef6:	220b      	movs	r2, #11
 800aef8:	4619      	mov	r1, r3
 800aefa:	f7ff f815 	bl	8009f28 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	2201      	movs	r2, #1
 800af02:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800af04:	7bfb      	ldrb	r3, [r7, #15]
}
 800af06:	4618      	mov	r0, r3
 800af08:	3710      	adds	r7, #16
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}
	...

0800af10 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b088      	sub	sp, #32
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
 800af18:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	60fb      	str	r3, [r7, #12]
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	3324      	adds	r3, #36	; 0x24
 800af24:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800af26:	220b      	movs	r2, #11
 800af28:	2120      	movs	r1, #32
 800af2a:	68b8      	ldr	r0, [r7, #8]
 800af2c:	f7ff f81d 	bl	8009f6a <mem_set>
	si = i = 0; ni = 8;
 800af30:	2300      	movs	r3, #0
 800af32:	613b      	str	r3, [r7, #16]
 800af34:	693b      	ldr	r3, [r7, #16]
 800af36:	617b      	str	r3, [r7, #20]
 800af38:	2308      	movs	r3, #8
 800af3a:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800af3c:	697b      	ldr	r3, [r7, #20]
 800af3e:	1c5a      	adds	r2, r3, #1
 800af40:	617a      	str	r2, [r7, #20]
 800af42:	68fa      	ldr	r2, [r7, #12]
 800af44:	4413      	add	r3, r2
 800af46:	781b      	ldrb	r3, [r3, #0]
 800af48:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800af4a:	7ffb      	ldrb	r3, [r7, #31]
 800af4c:	2b20      	cmp	r3, #32
 800af4e:	d94e      	bls.n	800afee <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800af50:	7ffb      	ldrb	r3, [r7, #31]
 800af52:	2b2f      	cmp	r3, #47	; 0x2f
 800af54:	d006      	beq.n	800af64 <create_name+0x54>
 800af56:	7ffb      	ldrb	r3, [r7, #31]
 800af58:	2b5c      	cmp	r3, #92	; 0x5c
 800af5a:	d110      	bne.n	800af7e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800af5c:	e002      	b.n	800af64 <create_name+0x54>
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	3301      	adds	r3, #1
 800af62:	617b      	str	r3, [r7, #20]
 800af64:	68fa      	ldr	r2, [r7, #12]
 800af66:	697b      	ldr	r3, [r7, #20]
 800af68:	4413      	add	r3, r2
 800af6a:	781b      	ldrb	r3, [r3, #0]
 800af6c:	2b2f      	cmp	r3, #47	; 0x2f
 800af6e:	d0f6      	beq.n	800af5e <create_name+0x4e>
 800af70:	68fa      	ldr	r2, [r7, #12]
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	4413      	add	r3, r2
 800af76:	781b      	ldrb	r3, [r3, #0]
 800af78:	2b5c      	cmp	r3, #92	; 0x5c
 800af7a:	d0f0      	beq.n	800af5e <create_name+0x4e>
			break;
 800af7c:	e038      	b.n	800aff0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800af7e:	7ffb      	ldrb	r3, [r7, #31]
 800af80:	2b2e      	cmp	r3, #46	; 0x2e
 800af82:	d003      	beq.n	800af8c <create_name+0x7c>
 800af84:	693a      	ldr	r2, [r7, #16]
 800af86:	69bb      	ldr	r3, [r7, #24]
 800af88:	429a      	cmp	r2, r3
 800af8a:	d30c      	bcc.n	800afa6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800af8c:	69bb      	ldr	r3, [r7, #24]
 800af8e:	2b0b      	cmp	r3, #11
 800af90:	d002      	beq.n	800af98 <create_name+0x88>
 800af92:	7ffb      	ldrb	r3, [r7, #31]
 800af94:	2b2e      	cmp	r3, #46	; 0x2e
 800af96:	d001      	beq.n	800af9c <create_name+0x8c>
 800af98:	2306      	movs	r3, #6
 800af9a:	e044      	b.n	800b026 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800af9c:	2308      	movs	r3, #8
 800af9e:	613b      	str	r3, [r7, #16]
 800afa0:	230b      	movs	r3, #11
 800afa2:	61bb      	str	r3, [r7, #24]
			continue;
 800afa4:	e022      	b.n	800afec <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800afa6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	da04      	bge.n	800afb8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800afae:	7ffb      	ldrb	r3, [r7, #31]
 800afb0:	3b80      	subs	r3, #128	; 0x80
 800afb2:	4a1f      	ldr	r2, [pc, #124]	; (800b030 <create_name+0x120>)
 800afb4:	5cd3      	ldrb	r3, [r2, r3]
 800afb6:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800afb8:	7ffb      	ldrb	r3, [r7, #31]
 800afba:	4619      	mov	r1, r3
 800afbc:	481d      	ldr	r0, [pc, #116]	; (800b034 <create_name+0x124>)
 800afbe:	f7ff f815 	bl	8009fec <chk_chr>
 800afc2:	4603      	mov	r3, r0
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d001      	beq.n	800afcc <create_name+0xbc>
 800afc8:	2306      	movs	r3, #6
 800afca:	e02c      	b.n	800b026 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800afcc:	7ffb      	ldrb	r3, [r7, #31]
 800afce:	2b60      	cmp	r3, #96	; 0x60
 800afd0:	d905      	bls.n	800afde <create_name+0xce>
 800afd2:	7ffb      	ldrb	r3, [r7, #31]
 800afd4:	2b7a      	cmp	r3, #122	; 0x7a
 800afd6:	d802      	bhi.n	800afde <create_name+0xce>
 800afd8:	7ffb      	ldrb	r3, [r7, #31]
 800afda:	3b20      	subs	r3, #32
 800afdc:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800afde:	693b      	ldr	r3, [r7, #16]
 800afe0:	1c5a      	adds	r2, r3, #1
 800afe2:	613a      	str	r2, [r7, #16]
 800afe4:	68ba      	ldr	r2, [r7, #8]
 800afe6:	4413      	add	r3, r2
 800afe8:	7ffa      	ldrb	r2, [r7, #31]
 800afea:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800afec:	e7a6      	b.n	800af3c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800afee:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800aff0:	68fa      	ldr	r2, [r7, #12]
 800aff2:	697b      	ldr	r3, [r7, #20]
 800aff4:	441a      	add	r2, r3
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800affa:	693b      	ldr	r3, [r7, #16]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d101      	bne.n	800b004 <create_name+0xf4>
 800b000:	2306      	movs	r3, #6
 800b002:	e010      	b.n	800b026 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	781b      	ldrb	r3, [r3, #0]
 800b008:	2be5      	cmp	r3, #229	; 0xe5
 800b00a:	d102      	bne.n	800b012 <create_name+0x102>
 800b00c:	68bb      	ldr	r3, [r7, #8]
 800b00e:	2205      	movs	r2, #5
 800b010:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b012:	7ffb      	ldrb	r3, [r7, #31]
 800b014:	2b20      	cmp	r3, #32
 800b016:	d801      	bhi.n	800b01c <create_name+0x10c>
 800b018:	2204      	movs	r2, #4
 800b01a:	e000      	b.n	800b01e <create_name+0x10e>
 800b01c:	2200      	movs	r2, #0
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	330b      	adds	r3, #11
 800b022:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800b024:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800b026:	4618      	mov	r0, r3
 800b028:	3720      	adds	r7, #32
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}
 800b02e:	bf00      	nop
 800b030:	08011968 	.word	0x08011968
 800b034:	0800fa90 	.word	0x0800fa90

0800b038 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b086      	sub	sp, #24
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
 800b040:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b046:	693b      	ldr	r3, [r7, #16]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b04c:	e002      	b.n	800b054 <follow_path+0x1c>
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	3301      	adds	r3, #1
 800b052:	603b      	str	r3, [r7, #0]
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	781b      	ldrb	r3, [r3, #0]
 800b058:	2b2f      	cmp	r3, #47	; 0x2f
 800b05a:	d0f8      	beq.n	800b04e <follow_path+0x16>
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	781b      	ldrb	r3, [r3, #0]
 800b060:	2b5c      	cmp	r3, #92	; 0x5c
 800b062:	d0f4      	beq.n	800b04e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b064:	693b      	ldr	r3, [r7, #16]
 800b066:	2200      	movs	r2, #0
 800b068:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	781b      	ldrb	r3, [r3, #0]
 800b06e:	2b1f      	cmp	r3, #31
 800b070:	d80a      	bhi.n	800b088 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2280      	movs	r2, #128	; 0x80
 800b076:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800b07a:	2100      	movs	r1, #0
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f7ff fcf9 	bl	800aa74 <dir_sdi>
 800b082:	4603      	mov	r3, r0
 800b084:	75fb      	strb	r3, [r7, #23]
 800b086:	e043      	b.n	800b110 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b088:	463b      	mov	r3, r7
 800b08a:	4619      	mov	r1, r3
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f7ff ff3f 	bl	800af10 <create_name>
 800b092:	4603      	mov	r3, r0
 800b094:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b096:	7dfb      	ldrb	r3, [r7, #23]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d134      	bne.n	800b106 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b09c:	6878      	ldr	r0, [r7, #4]
 800b09e:	f7ff feaf 	bl	800ae00 <dir_find>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b0ac:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b0ae:	7dfb      	ldrb	r3, [r7, #23]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d00a      	beq.n	800b0ca <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b0b4:	7dfb      	ldrb	r3, [r7, #23]
 800b0b6:	2b04      	cmp	r3, #4
 800b0b8:	d127      	bne.n	800b10a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b0ba:	7afb      	ldrb	r3, [r7, #11]
 800b0bc:	f003 0304 	and.w	r3, r3, #4
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d122      	bne.n	800b10a <follow_path+0xd2>
 800b0c4:	2305      	movs	r3, #5
 800b0c6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b0c8:	e01f      	b.n	800b10a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b0ca:	7afb      	ldrb	r3, [r7, #11]
 800b0cc:	f003 0304 	and.w	r3, r3, #4
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d11c      	bne.n	800b10e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b0d4:	693b      	ldr	r3, [r7, #16]
 800b0d6:	799b      	ldrb	r3, [r3, #6]
 800b0d8:	f003 0310 	and.w	r3, r3, #16
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d102      	bne.n	800b0e6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b0e0:	2305      	movs	r3, #5
 800b0e2:	75fb      	strb	r3, [r7, #23]
 800b0e4:	e014      	b.n	800b110 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	695b      	ldr	r3, [r3, #20]
 800b0f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0f4:	4413      	add	r3, r2
 800b0f6:	4619      	mov	r1, r3
 800b0f8:	68f8      	ldr	r0, [r7, #12]
 800b0fa:	f7ff fe42 	bl	800ad82 <ld_clust>
 800b0fe:	4602      	mov	r2, r0
 800b100:	693b      	ldr	r3, [r7, #16]
 800b102:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b104:	e7c0      	b.n	800b088 <follow_path+0x50>
			if (res != FR_OK) break;
 800b106:	bf00      	nop
 800b108:	e002      	b.n	800b110 <follow_path+0xd8>
				break;
 800b10a:	bf00      	nop
 800b10c:	e000      	b.n	800b110 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b10e:	bf00      	nop
			}
		}
	}

	return res;
 800b110:	7dfb      	ldrb	r3, [r7, #23]
}
 800b112:	4618      	mov	r0, r3
 800b114:	3718      	adds	r7, #24
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}

0800b11a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b11a:	b480      	push	{r7}
 800b11c:	b087      	sub	sp, #28
 800b11e:	af00      	add	r7, sp, #0
 800b120:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b122:	f04f 33ff 	mov.w	r3, #4294967295
 800b126:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d031      	beq.n	800b194 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	617b      	str	r3, [r7, #20]
 800b136:	e002      	b.n	800b13e <get_ldnumber+0x24>
 800b138:	697b      	ldr	r3, [r7, #20]
 800b13a:	3301      	adds	r3, #1
 800b13c:	617b      	str	r3, [r7, #20]
 800b13e:	697b      	ldr	r3, [r7, #20]
 800b140:	781b      	ldrb	r3, [r3, #0]
 800b142:	2b20      	cmp	r3, #32
 800b144:	d903      	bls.n	800b14e <get_ldnumber+0x34>
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	781b      	ldrb	r3, [r3, #0]
 800b14a:	2b3a      	cmp	r3, #58	; 0x3a
 800b14c:	d1f4      	bne.n	800b138 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b14e:	697b      	ldr	r3, [r7, #20]
 800b150:	781b      	ldrb	r3, [r3, #0]
 800b152:	2b3a      	cmp	r3, #58	; 0x3a
 800b154:	d11c      	bne.n	800b190 <get_ldnumber+0x76>
			tp = *path;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	1c5a      	adds	r2, r3, #1
 800b160:	60fa      	str	r2, [r7, #12]
 800b162:	781b      	ldrb	r3, [r3, #0]
 800b164:	3b30      	subs	r3, #48	; 0x30
 800b166:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b168:	68bb      	ldr	r3, [r7, #8]
 800b16a:	2b09      	cmp	r3, #9
 800b16c:	d80e      	bhi.n	800b18c <get_ldnumber+0x72>
 800b16e:	68fa      	ldr	r2, [r7, #12]
 800b170:	697b      	ldr	r3, [r7, #20]
 800b172:	429a      	cmp	r2, r3
 800b174:	d10a      	bne.n	800b18c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d107      	bne.n	800b18c <get_ldnumber+0x72>
					vol = (int)i;
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b180:	697b      	ldr	r3, [r7, #20]
 800b182:	3301      	adds	r3, #1
 800b184:	617b      	str	r3, [r7, #20]
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	697a      	ldr	r2, [r7, #20]
 800b18a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	e002      	b.n	800b196 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b190:	2300      	movs	r3, #0
 800b192:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b194:	693b      	ldr	r3, [r7, #16]
}
 800b196:	4618      	mov	r0, r3
 800b198:	371c      	adds	r7, #28
 800b19a:	46bd      	mov	sp, r7
 800b19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a0:	4770      	bx	lr
	...

0800b1a4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b082      	sub	sp, #8
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
 800b1ac:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	70da      	strb	r2, [r3, #3]
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f04f 32ff 	mov.w	r2, #4294967295
 800b1ba:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b1bc:	6839      	ldr	r1, [r7, #0]
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f7ff f8e0 	bl	800a384 <move_window>
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d001      	beq.n	800b1ce <check_fs+0x2a>
 800b1ca:	2304      	movs	r3, #4
 800b1cc:	e038      	b.n	800b240 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	3330      	adds	r3, #48	; 0x30
 800b1d2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f7fe fe24 	bl	8009e24 <ld_word>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	461a      	mov	r2, r3
 800b1e0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b1e4:	429a      	cmp	r2, r3
 800b1e6:	d001      	beq.n	800b1ec <check_fs+0x48>
 800b1e8:	2303      	movs	r3, #3
 800b1ea:	e029      	b.n	800b240 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b1f2:	2be9      	cmp	r3, #233	; 0xe9
 800b1f4:	d009      	beq.n	800b20a <check_fs+0x66>
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b1fc:	2beb      	cmp	r3, #235	; 0xeb
 800b1fe:	d11e      	bne.n	800b23e <check_fs+0x9a>
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800b206:	2b90      	cmp	r3, #144	; 0x90
 800b208:	d119      	bne.n	800b23e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	3330      	adds	r3, #48	; 0x30
 800b20e:	3336      	adds	r3, #54	; 0x36
 800b210:	4618      	mov	r0, r3
 800b212:	f7fe fe1f 	bl	8009e54 <ld_dword>
 800b216:	4603      	mov	r3, r0
 800b218:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b21c:	4a0a      	ldr	r2, [pc, #40]	; (800b248 <check_fs+0xa4>)
 800b21e:	4293      	cmp	r3, r2
 800b220:	d101      	bne.n	800b226 <check_fs+0x82>
 800b222:	2300      	movs	r3, #0
 800b224:	e00c      	b.n	800b240 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	3330      	adds	r3, #48	; 0x30
 800b22a:	3352      	adds	r3, #82	; 0x52
 800b22c:	4618      	mov	r0, r3
 800b22e:	f7fe fe11 	bl	8009e54 <ld_dword>
 800b232:	4602      	mov	r2, r0
 800b234:	4b05      	ldr	r3, [pc, #20]	; (800b24c <check_fs+0xa8>)
 800b236:	429a      	cmp	r2, r3
 800b238:	d101      	bne.n	800b23e <check_fs+0x9a>
 800b23a:	2300      	movs	r3, #0
 800b23c:	e000      	b.n	800b240 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b23e:	2302      	movs	r3, #2
}
 800b240:	4618      	mov	r0, r3
 800b242:	3708      	adds	r7, #8
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}
 800b248:	00544146 	.word	0x00544146
 800b24c:	33544146 	.word	0x33544146

0800b250 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b096      	sub	sp, #88	; 0x58
 800b254:	af00      	add	r7, sp, #0
 800b256:	60f8      	str	r0, [r7, #12]
 800b258:	60b9      	str	r1, [r7, #8]
 800b25a:	4613      	mov	r3, r2
 800b25c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b25e:	68bb      	ldr	r3, [r7, #8]
 800b260:	2200      	movs	r2, #0
 800b262:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b264:	68f8      	ldr	r0, [r7, #12]
 800b266:	f7ff ff58 	bl	800b11a <get_ldnumber>
 800b26a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b26c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b26e:	2b00      	cmp	r3, #0
 800b270:	da01      	bge.n	800b276 <find_volume+0x26>
 800b272:	230b      	movs	r3, #11
 800b274:	e22e      	b.n	800b6d4 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b276:	4aa8      	ldr	r2, [pc, #672]	; (800b518 <find_volume+0x2c8>)
 800b278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b27a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b27e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b282:	2b00      	cmp	r3, #0
 800b284:	d101      	bne.n	800b28a <find_volume+0x3a>
 800b286:	230c      	movs	r3, #12
 800b288:	e224      	b.n	800b6d4 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b28a:	68bb      	ldr	r3, [r7, #8]
 800b28c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b28e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b290:	79fb      	ldrb	r3, [r7, #7]
 800b292:	f023 0301 	bic.w	r3, r3, #1
 800b296:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b29a:	781b      	ldrb	r3, [r3, #0]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d01a      	beq.n	800b2d6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b2a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2a2:	785b      	ldrb	r3, [r3, #1]
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	f7fe fd1f 	bl	8009ce8 <disk_status>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b2b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b2b4:	f003 0301 	and.w	r3, r3, #1
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d10c      	bne.n	800b2d6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b2bc:	79fb      	ldrb	r3, [r7, #7]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d007      	beq.n	800b2d2 <find_volume+0x82>
 800b2c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b2c6:	f003 0304 	and.w	r3, r3, #4
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d001      	beq.n	800b2d2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b2ce:	230a      	movs	r3, #10
 800b2d0:	e200      	b.n	800b6d4 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	e1fe      	b.n	800b6d4 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b2d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2d8:	2200      	movs	r2, #0
 800b2da:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b2dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2de:	b2da      	uxtb	r2, r3
 800b2e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2e2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2e6:	785b      	ldrb	r3, [r3, #1]
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f7fe fd17 	bl	8009d1c <disk_initialize>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b2f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b2f8:	f003 0301 	and.w	r3, r3, #1
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d001      	beq.n	800b304 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b300:	2303      	movs	r3, #3
 800b302:	e1e7      	b.n	800b6d4 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b304:	79fb      	ldrb	r3, [r7, #7]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d007      	beq.n	800b31a <find_volume+0xca>
 800b30a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b30e:	f003 0304 	and.w	r3, r3, #4
 800b312:	2b00      	cmp	r3, #0
 800b314:	d001      	beq.n	800b31a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b316:	230a      	movs	r3, #10
 800b318:	e1dc      	b.n	800b6d4 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b31a:	2300      	movs	r3, #0
 800b31c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b31e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b320:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b322:	f7ff ff3f 	bl	800b1a4 <check_fs>
 800b326:	4603      	mov	r3, r0
 800b328:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b32c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b330:	2b02      	cmp	r3, #2
 800b332:	d14b      	bne.n	800b3cc <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b334:	2300      	movs	r3, #0
 800b336:	643b      	str	r3, [r7, #64]	; 0x40
 800b338:	e01f      	b.n	800b37a <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b33a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b33c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b340:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b342:	011b      	lsls	r3, r3, #4
 800b344:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b348:	4413      	add	r3, r2
 800b34a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b34c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b34e:	3304      	adds	r3, #4
 800b350:	781b      	ldrb	r3, [r3, #0]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d006      	beq.n	800b364 <find_volume+0x114>
 800b356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b358:	3308      	adds	r3, #8
 800b35a:	4618      	mov	r0, r3
 800b35c:	f7fe fd7a 	bl	8009e54 <ld_dword>
 800b360:	4602      	mov	r2, r0
 800b362:	e000      	b.n	800b366 <find_volume+0x116>
 800b364:	2200      	movs	r2, #0
 800b366:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b368:	009b      	lsls	r3, r3, #2
 800b36a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800b36e:	440b      	add	r3, r1
 800b370:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b374:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b376:	3301      	adds	r3, #1
 800b378:	643b      	str	r3, [r7, #64]	; 0x40
 800b37a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b37c:	2b03      	cmp	r3, #3
 800b37e:	d9dc      	bls.n	800b33a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b380:	2300      	movs	r3, #0
 800b382:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b384:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b386:	2b00      	cmp	r3, #0
 800b388:	d002      	beq.n	800b390 <find_volume+0x140>
 800b38a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b38c:	3b01      	subs	r3, #1
 800b38e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b392:	009b      	lsls	r3, r3, #2
 800b394:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b398:	4413      	add	r3, r2
 800b39a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b39e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b3a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d005      	beq.n	800b3b2 <find_volume+0x162>
 800b3a6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b3a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b3aa:	f7ff fefb 	bl	800b1a4 <check_fs>
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	e000      	b.n	800b3b4 <find_volume+0x164>
 800b3b2:	2303      	movs	r3, #3
 800b3b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b3b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b3bc:	2b01      	cmp	r3, #1
 800b3be:	d905      	bls.n	800b3cc <find_volume+0x17c>
 800b3c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3c2:	3301      	adds	r3, #1
 800b3c4:	643b      	str	r3, [r7, #64]	; 0x40
 800b3c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3c8:	2b03      	cmp	r3, #3
 800b3ca:	d9e1      	bls.n	800b390 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b3cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b3d0:	2b04      	cmp	r3, #4
 800b3d2:	d101      	bne.n	800b3d8 <find_volume+0x188>
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	e17d      	b.n	800b6d4 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b3d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b3dc:	2b01      	cmp	r3, #1
 800b3de:	d901      	bls.n	800b3e4 <find_volume+0x194>
 800b3e0:	230d      	movs	r3, #13
 800b3e2:	e177      	b.n	800b6d4 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b3e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3e6:	3330      	adds	r3, #48	; 0x30
 800b3e8:	330b      	adds	r3, #11
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	f7fe fd1a 	bl	8009e24 <ld_word>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b3f6:	d001      	beq.n	800b3fc <find_volume+0x1ac>
 800b3f8:	230d      	movs	r3, #13
 800b3fa:	e16b      	b.n	800b6d4 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b3fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3fe:	3330      	adds	r3, #48	; 0x30
 800b400:	3316      	adds	r3, #22
 800b402:	4618      	mov	r0, r3
 800b404:	f7fe fd0e 	bl	8009e24 <ld_word>
 800b408:	4603      	mov	r3, r0
 800b40a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b40c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d106      	bne.n	800b420 <find_volume+0x1d0>
 800b412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b414:	3330      	adds	r3, #48	; 0x30
 800b416:	3324      	adds	r3, #36	; 0x24
 800b418:	4618      	mov	r0, r3
 800b41a:	f7fe fd1b 	bl	8009e54 <ld_dword>
 800b41e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b422:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b424:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b428:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800b42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b42e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b432:	789b      	ldrb	r3, [r3, #2]
 800b434:	2b01      	cmp	r3, #1
 800b436:	d005      	beq.n	800b444 <find_volume+0x1f4>
 800b438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b43a:	789b      	ldrb	r3, [r3, #2]
 800b43c:	2b02      	cmp	r3, #2
 800b43e:	d001      	beq.n	800b444 <find_volume+0x1f4>
 800b440:	230d      	movs	r3, #13
 800b442:	e147      	b.n	800b6d4 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b446:	789b      	ldrb	r3, [r3, #2]
 800b448:	461a      	mov	r2, r3
 800b44a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b44c:	fb02 f303 	mul.w	r3, r2, r3
 800b450:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b458:	b29a      	uxth	r2, r3
 800b45a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b45c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b45e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b460:	895b      	ldrh	r3, [r3, #10]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d008      	beq.n	800b478 <find_volume+0x228>
 800b466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b468:	895b      	ldrh	r3, [r3, #10]
 800b46a:	461a      	mov	r2, r3
 800b46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b46e:	895b      	ldrh	r3, [r3, #10]
 800b470:	3b01      	subs	r3, #1
 800b472:	4013      	ands	r3, r2
 800b474:	2b00      	cmp	r3, #0
 800b476:	d001      	beq.n	800b47c <find_volume+0x22c>
 800b478:	230d      	movs	r3, #13
 800b47a:	e12b      	b.n	800b6d4 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b47c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b47e:	3330      	adds	r3, #48	; 0x30
 800b480:	3311      	adds	r3, #17
 800b482:	4618      	mov	r0, r3
 800b484:	f7fe fcce 	bl	8009e24 <ld_word>
 800b488:	4603      	mov	r3, r0
 800b48a:	461a      	mov	r2, r3
 800b48c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b48e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b492:	891b      	ldrh	r3, [r3, #8]
 800b494:	f003 030f 	and.w	r3, r3, #15
 800b498:	b29b      	uxth	r3, r3
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d001      	beq.n	800b4a2 <find_volume+0x252>
 800b49e:	230d      	movs	r3, #13
 800b4a0:	e118      	b.n	800b6d4 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4a4:	3330      	adds	r3, #48	; 0x30
 800b4a6:	3313      	adds	r3, #19
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	f7fe fcbb 	bl	8009e24 <ld_word>
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b4b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d106      	bne.n	800b4c6 <find_volume+0x276>
 800b4b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ba:	3330      	adds	r3, #48	; 0x30
 800b4bc:	3320      	adds	r3, #32
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f7fe fcc8 	bl	8009e54 <ld_dword>
 800b4c4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b4c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4c8:	3330      	adds	r3, #48	; 0x30
 800b4ca:	330e      	adds	r3, #14
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	f7fe fca9 	bl	8009e24 <ld_word>
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b4d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d101      	bne.n	800b4e0 <find_volume+0x290>
 800b4dc:	230d      	movs	r3, #13
 800b4de:	e0f9      	b.n	800b6d4 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b4e0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b4e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4e4:	4413      	add	r3, r2
 800b4e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b4e8:	8912      	ldrh	r2, [r2, #8]
 800b4ea:	0912      	lsrs	r2, r2, #4
 800b4ec:	b292      	uxth	r2, r2
 800b4ee:	4413      	add	r3, r2
 800b4f0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b4f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b4f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4f6:	429a      	cmp	r2, r3
 800b4f8:	d201      	bcs.n	800b4fe <find_volume+0x2ae>
 800b4fa:	230d      	movs	r3, #13
 800b4fc:	e0ea      	b.n	800b6d4 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b4fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b502:	1ad3      	subs	r3, r2, r3
 800b504:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b506:	8952      	ldrh	r2, [r2, #10]
 800b508:	fbb3 f3f2 	udiv	r3, r3, r2
 800b50c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b510:	2b00      	cmp	r3, #0
 800b512:	d103      	bne.n	800b51c <find_volume+0x2cc>
 800b514:	230d      	movs	r3, #13
 800b516:	e0dd      	b.n	800b6d4 <find_volume+0x484>
 800b518:	200002dc 	.word	0x200002dc
		fmt = FS_FAT32;
 800b51c:	2303      	movs	r3, #3
 800b51e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b524:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b528:	4293      	cmp	r3, r2
 800b52a:	d802      	bhi.n	800b532 <find_volume+0x2e2>
 800b52c:	2302      	movs	r3, #2
 800b52e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b534:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b538:	4293      	cmp	r3, r2
 800b53a:	d802      	bhi.n	800b542 <find_volume+0x2f2>
 800b53c:	2301      	movs	r3, #1
 800b53e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b544:	1c9a      	adds	r2, r3, #2
 800b546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b548:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800b54a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b54c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b54e:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b550:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b552:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b554:	441a      	add	r2, r3
 800b556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b558:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800b55a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b55c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b55e:	441a      	add	r2, r3
 800b560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b562:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800b564:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b568:	2b03      	cmp	r3, #3
 800b56a:	d11e      	bne.n	800b5aa <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b56c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b56e:	3330      	adds	r3, #48	; 0x30
 800b570:	332a      	adds	r3, #42	; 0x2a
 800b572:	4618      	mov	r0, r3
 800b574:	f7fe fc56 	bl	8009e24 <ld_word>
 800b578:	4603      	mov	r3, r0
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d001      	beq.n	800b582 <find_volume+0x332>
 800b57e:	230d      	movs	r3, #13
 800b580:	e0a8      	b.n	800b6d4 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b584:	891b      	ldrh	r3, [r3, #8]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d001      	beq.n	800b58e <find_volume+0x33e>
 800b58a:	230d      	movs	r3, #13
 800b58c:	e0a2      	b.n	800b6d4 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b58e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b590:	3330      	adds	r3, #48	; 0x30
 800b592:	332c      	adds	r3, #44	; 0x2c
 800b594:	4618      	mov	r0, r3
 800b596:	f7fe fc5d 	bl	8009e54 <ld_dword>
 800b59a:	4602      	mov	r2, r0
 800b59c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b59e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b5a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5a2:	695b      	ldr	r3, [r3, #20]
 800b5a4:	009b      	lsls	r3, r3, #2
 800b5a6:	647b      	str	r3, [r7, #68]	; 0x44
 800b5a8:	e01f      	b.n	800b5ea <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b5aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ac:	891b      	ldrh	r3, [r3, #8]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d101      	bne.n	800b5b6 <find_volume+0x366>
 800b5b2:	230d      	movs	r3, #13
 800b5b4:	e08e      	b.n	800b6d4 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b5b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5b8:	6a1a      	ldr	r2, [r3, #32]
 800b5ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5bc:	441a      	add	r2, r3
 800b5be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5c0:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b5c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b5c6:	2b02      	cmp	r3, #2
 800b5c8:	d103      	bne.n	800b5d2 <find_volume+0x382>
 800b5ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5cc:	695b      	ldr	r3, [r3, #20]
 800b5ce:	005b      	lsls	r3, r3, #1
 800b5d0:	e00a      	b.n	800b5e8 <find_volume+0x398>
 800b5d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5d4:	695a      	ldr	r2, [r3, #20]
 800b5d6:	4613      	mov	r3, r2
 800b5d8:	005b      	lsls	r3, r3, #1
 800b5da:	4413      	add	r3, r2
 800b5dc:	085a      	lsrs	r2, r3, #1
 800b5de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5e0:	695b      	ldr	r3, [r3, #20]
 800b5e2:	f003 0301 	and.w	r3, r3, #1
 800b5e6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b5e8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b5ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ec:	699a      	ldr	r2, [r3, #24]
 800b5ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b5f0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b5f4:	0a5b      	lsrs	r3, r3, #9
 800b5f6:	429a      	cmp	r2, r3
 800b5f8:	d201      	bcs.n	800b5fe <find_volume+0x3ae>
 800b5fa:	230d      	movs	r3, #13
 800b5fc:	e06a      	b.n	800b6d4 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b5fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b600:	f04f 32ff 	mov.w	r2, #4294967295
 800b604:	611a      	str	r2, [r3, #16]
 800b606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b608:	691a      	ldr	r2, [r3, #16]
 800b60a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b60c:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800b60e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b610:	2280      	movs	r2, #128	; 0x80
 800b612:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b614:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b618:	2b03      	cmp	r3, #3
 800b61a:	d149      	bne.n	800b6b0 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b61c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b61e:	3330      	adds	r3, #48	; 0x30
 800b620:	3330      	adds	r3, #48	; 0x30
 800b622:	4618      	mov	r0, r3
 800b624:	f7fe fbfe 	bl	8009e24 <ld_word>
 800b628:	4603      	mov	r3, r0
 800b62a:	2b01      	cmp	r3, #1
 800b62c:	d140      	bne.n	800b6b0 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b62e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b630:	3301      	adds	r3, #1
 800b632:	4619      	mov	r1, r3
 800b634:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b636:	f7fe fea5 	bl	800a384 <move_window>
 800b63a:	4603      	mov	r3, r0
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d137      	bne.n	800b6b0 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800b640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b642:	2200      	movs	r2, #0
 800b644:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b648:	3330      	adds	r3, #48	; 0x30
 800b64a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b64e:	4618      	mov	r0, r3
 800b650:	f7fe fbe8 	bl	8009e24 <ld_word>
 800b654:	4603      	mov	r3, r0
 800b656:	461a      	mov	r2, r3
 800b658:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b65c:	429a      	cmp	r2, r3
 800b65e:	d127      	bne.n	800b6b0 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b662:	3330      	adds	r3, #48	; 0x30
 800b664:	4618      	mov	r0, r3
 800b666:	f7fe fbf5 	bl	8009e54 <ld_dword>
 800b66a:	4602      	mov	r2, r0
 800b66c:	4b1b      	ldr	r3, [pc, #108]	; (800b6dc <find_volume+0x48c>)
 800b66e:	429a      	cmp	r2, r3
 800b670:	d11e      	bne.n	800b6b0 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b674:	3330      	adds	r3, #48	; 0x30
 800b676:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b67a:	4618      	mov	r0, r3
 800b67c:	f7fe fbea 	bl	8009e54 <ld_dword>
 800b680:	4602      	mov	r2, r0
 800b682:	4b17      	ldr	r3, [pc, #92]	; (800b6e0 <find_volume+0x490>)
 800b684:	429a      	cmp	r2, r3
 800b686:	d113      	bne.n	800b6b0 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b68a:	3330      	adds	r3, #48	; 0x30
 800b68c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b690:	4618      	mov	r0, r3
 800b692:	f7fe fbdf 	bl	8009e54 <ld_dword>
 800b696:	4602      	mov	r2, r0
 800b698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b69a:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b69c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b69e:	3330      	adds	r3, #48	; 0x30
 800b6a0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	f7fe fbd5 	bl	8009e54 <ld_dword>
 800b6aa:	4602      	mov	r2, r0
 800b6ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6ae:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b6b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6b2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b6b6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b6b8:	4b0a      	ldr	r3, [pc, #40]	; (800b6e4 <find_volume+0x494>)
 800b6ba:	881b      	ldrh	r3, [r3, #0]
 800b6bc:	3301      	adds	r3, #1
 800b6be:	b29a      	uxth	r2, r3
 800b6c0:	4b08      	ldr	r3, [pc, #32]	; (800b6e4 <find_volume+0x494>)
 800b6c2:	801a      	strh	r2, [r3, #0]
 800b6c4:	4b07      	ldr	r3, [pc, #28]	; (800b6e4 <find_volume+0x494>)
 800b6c6:	881a      	ldrh	r2, [r3, #0]
 800b6c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6ca:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b6cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b6ce:	f7fe fdf1 	bl	800a2b4 <clear_lock>
#endif
	return FR_OK;
 800b6d2:	2300      	movs	r3, #0
}
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	3758      	adds	r7, #88	; 0x58
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	bd80      	pop	{r7, pc}
 800b6dc:	41615252 	.word	0x41615252
 800b6e0:	61417272 	.word	0x61417272
 800b6e4:	200002e0 	.word	0x200002e0

0800b6e8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b084      	sub	sp, #16
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
 800b6f0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b6f2:	2309      	movs	r3, #9
 800b6f4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d01c      	beq.n	800b736 <validate+0x4e>
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d018      	beq.n	800b736 <validate+0x4e>
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	781b      	ldrb	r3, [r3, #0]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d013      	beq.n	800b736 <validate+0x4e>
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	889a      	ldrh	r2, [r3, #4]
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	88db      	ldrh	r3, [r3, #6]
 800b718:	429a      	cmp	r2, r3
 800b71a:	d10c      	bne.n	800b736 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	785b      	ldrb	r3, [r3, #1]
 800b722:	4618      	mov	r0, r3
 800b724:	f7fe fae0 	bl	8009ce8 <disk_status>
 800b728:	4603      	mov	r3, r0
 800b72a:	f003 0301 	and.w	r3, r3, #1
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d101      	bne.n	800b736 <validate+0x4e>
			res = FR_OK;
 800b732:	2300      	movs	r3, #0
 800b734:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b736:	7bfb      	ldrb	r3, [r7, #15]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d102      	bne.n	800b742 <validate+0x5a>
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	e000      	b.n	800b744 <validate+0x5c>
 800b742:	2300      	movs	r3, #0
 800b744:	683a      	ldr	r2, [r7, #0]
 800b746:	6013      	str	r3, [r2, #0]
	return res;
 800b748:	7bfb      	ldrb	r3, [r7, #15]
}
 800b74a:	4618      	mov	r0, r3
 800b74c:	3710      	adds	r7, #16
 800b74e:	46bd      	mov	sp, r7
 800b750:	bd80      	pop	{r7, pc}
	...

0800b754 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b088      	sub	sp, #32
 800b758:	af00      	add	r7, sp, #0
 800b75a:	60f8      	str	r0, [r7, #12]
 800b75c:	60b9      	str	r1, [r7, #8]
 800b75e:	4613      	mov	r3, r2
 800b760:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b762:	68bb      	ldr	r3, [r7, #8]
 800b764:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b766:	f107 0310 	add.w	r3, r7, #16
 800b76a:	4618      	mov	r0, r3
 800b76c:	f7ff fcd5 	bl	800b11a <get_ldnumber>
 800b770:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b772:	69fb      	ldr	r3, [r7, #28]
 800b774:	2b00      	cmp	r3, #0
 800b776:	da01      	bge.n	800b77c <f_mount+0x28>
 800b778:	230b      	movs	r3, #11
 800b77a:	e02b      	b.n	800b7d4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b77c:	4a17      	ldr	r2, [pc, #92]	; (800b7dc <f_mount+0x88>)
 800b77e:	69fb      	ldr	r3, [r7, #28]
 800b780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b784:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b786:	69bb      	ldr	r3, [r7, #24]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d005      	beq.n	800b798 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b78c:	69b8      	ldr	r0, [r7, #24]
 800b78e:	f7fe fd91 	bl	800a2b4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b792:	69bb      	ldr	r3, [r7, #24]
 800b794:	2200      	movs	r2, #0
 800b796:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d002      	beq.n	800b7a4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b7a4:	68fa      	ldr	r2, [r7, #12]
 800b7a6:	490d      	ldr	r1, [pc, #52]	; (800b7dc <f_mount+0x88>)
 800b7a8:	69fb      	ldr	r3, [r7, #28]
 800b7aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d002      	beq.n	800b7ba <f_mount+0x66>
 800b7b4:	79fb      	ldrb	r3, [r7, #7]
 800b7b6:	2b01      	cmp	r3, #1
 800b7b8:	d001      	beq.n	800b7be <f_mount+0x6a>
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	e00a      	b.n	800b7d4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b7be:	f107 010c 	add.w	r1, r7, #12
 800b7c2:	f107 0308 	add.w	r3, r7, #8
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	f7ff fd41 	bl	800b250 <find_volume>
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b7d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	3720      	adds	r7, #32
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	bd80      	pop	{r7, pc}
 800b7dc:	200002dc 	.word	0x200002dc

0800b7e0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b098      	sub	sp, #96	; 0x60
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	60f8      	str	r0, [r7, #12]
 800b7e8:	60b9      	str	r1, [r7, #8]
 800b7ea:	4613      	mov	r3, r2
 800b7ec:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d101      	bne.n	800b7f8 <f_open+0x18>
 800b7f4:	2309      	movs	r3, #9
 800b7f6:	e1ad      	b.n	800bb54 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b7f8:	79fb      	ldrb	r3, [r7, #7]
 800b7fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b7fe:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b800:	79fa      	ldrb	r2, [r7, #7]
 800b802:	f107 0110 	add.w	r1, r7, #16
 800b806:	f107 0308 	add.w	r3, r7, #8
 800b80a:	4618      	mov	r0, r3
 800b80c:	f7ff fd20 	bl	800b250 <find_volume>
 800b810:	4603      	mov	r3, r0
 800b812:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800b816:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	f040 8191 	bne.w	800bb42 <f_open+0x362>
		dj.obj.fs = fs;
 800b820:	693b      	ldr	r3, [r7, #16]
 800b822:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b824:	68ba      	ldr	r2, [r7, #8]
 800b826:	f107 0314 	add.w	r3, r7, #20
 800b82a:	4611      	mov	r1, r2
 800b82c:	4618      	mov	r0, r3
 800b82e:	f7ff fc03 	bl	800b038 <follow_path>
 800b832:	4603      	mov	r3, r0
 800b834:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b838:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d11a      	bne.n	800b876 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b840:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b844:	b25b      	sxtb	r3, r3
 800b846:	2b00      	cmp	r3, #0
 800b848:	da03      	bge.n	800b852 <f_open+0x72>
				res = FR_INVALID_NAME;
 800b84a:	2306      	movs	r3, #6
 800b84c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b850:	e011      	b.n	800b876 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b852:	79fb      	ldrb	r3, [r7, #7]
 800b854:	f023 0301 	bic.w	r3, r3, #1
 800b858:	2b00      	cmp	r3, #0
 800b85a:	bf14      	ite	ne
 800b85c:	2301      	movne	r3, #1
 800b85e:	2300      	moveq	r3, #0
 800b860:	b2db      	uxtb	r3, r3
 800b862:	461a      	mov	r2, r3
 800b864:	f107 0314 	add.w	r3, r7, #20
 800b868:	4611      	mov	r1, r2
 800b86a:	4618      	mov	r0, r3
 800b86c:	f7fe fbda 	bl	800a024 <chk_lock>
 800b870:	4603      	mov	r3, r0
 800b872:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b876:	79fb      	ldrb	r3, [r7, #7]
 800b878:	f003 031c 	and.w	r3, r3, #28
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d07f      	beq.n	800b980 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800b880:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b884:	2b00      	cmp	r3, #0
 800b886:	d017      	beq.n	800b8b8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b888:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b88c:	2b04      	cmp	r3, #4
 800b88e:	d10e      	bne.n	800b8ae <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b890:	f7fe fc24 	bl	800a0dc <enq_lock>
 800b894:	4603      	mov	r3, r0
 800b896:	2b00      	cmp	r3, #0
 800b898:	d006      	beq.n	800b8a8 <f_open+0xc8>
 800b89a:	f107 0314 	add.w	r3, r7, #20
 800b89e:	4618      	mov	r0, r3
 800b8a0:	f7ff fb03 	bl	800aeaa <dir_register>
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	e000      	b.n	800b8aa <f_open+0xca>
 800b8a8:	2312      	movs	r3, #18
 800b8aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b8ae:	79fb      	ldrb	r3, [r7, #7]
 800b8b0:	f043 0308 	orr.w	r3, r3, #8
 800b8b4:	71fb      	strb	r3, [r7, #7]
 800b8b6:	e010      	b.n	800b8da <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b8b8:	7ebb      	ldrb	r3, [r7, #26]
 800b8ba:	f003 0311 	and.w	r3, r3, #17
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d003      	beq.n	800b8ca <f_open+0xea>
					res = FR_DENIED;
 800b8c2:	2307      	movs	r3, #7
 800b8c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b8c8:	e007      	b.n	800b8da <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b8ca:	79fb      	ldrb	r3, [r7, #7]
 800b8cc:	f003 0304 	and.w	r3, r3, #4
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d002      	beq.n	800b8da <f_open+0xfa>
 800b8d4:	2308      	movs	r3, #8
 800b8d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b8da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d168      	bne.n	800b9b4 <f_open+0x1d4>
 800b8e2:	79fb      	ldrb	r3, [r7, #7]
 800b8e4:	f003 0308 	and.w	r3, r3, #8
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d063      	beq.n	800b9b4 <f_open+0x1d4>
				dw = GET_FATTIME();
 800b8ec:	f000 fd92 	bl	800c414 <get_fattime>
 800b8f0:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b8f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8f4:	330e      	adds	r3, #14
 800b8f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f7fe fae9 	bl	8009ed0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b8fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b900:	3316      	adds	r3, #22
 800b902:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b904:	4618      	mov	r0, r3
 800b906:	f7fe fae3 	bl	8009ed0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b90a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b90c:	330b      	adds	r3, #11
 800b90e:	2220      	movs	r2, #32
 800b910:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b912:	693b      	ldr	r3, [r7, #16]
 800b914:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b916:	4611      	mov	r1, r2
 800b918:	4618      	mov	r0, r3
 800b91a:	f7ff fa32 	bl	800ad82 <ld_clust>
 800b91e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b924:	2200      	movs	r2, #0
 800b926:	4618      	mov	r0, r3
 800b928:	f7ff fa4a 	bl	800adc0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b92c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b92e:	331c      	adds	r3, #28
 800b930:	2100      	movs	r1, #0
 800b932:	4618      	mov	r0, r3
 800b934:	f7fe facc 	bl	8009ed0 <st_dword>
					fs->wflag = 1;
 800b938:	693b      	ldr	r3, [r7, #16]
 800b93a:	2201      	movs	r2, #1
 800b93c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b93e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b940:	2b00      	cmp	r3, #0
 800b942:	d037      	beq.n	800b9b4 <f_open+0x1d4>
						dw = fs->winsect;
 800b944:	693b      	ldr	r3, [r7, #16]
 800b946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b948:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800b94a:	f107 0314 	add.w	r3, r7, #20
 800b94e:	2200      	movs	r2, #0
 800b950:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b952:	4618      	mov	r0, r3
 800b954:	f7fe ff5d 	bl	800a812 <remove_chain>
 800b958:	4603      	mov	r3, r0
 800b95a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800b95e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b962:	2b00      	cmp	r3, #0
 800b964:	d126      	bne.n	800b9b4 <f_open+0x1d4>
							res = move_window(fs, dw);
 800b966:	693b      	ldr	r3, [r7, #16]
 800b968:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b96a:	4618      	mov	r0, r3
 800b96c:	f7fe fd0a 	bl	800a384 <move_window>
 800b970:	4603      	mov	r3, r0
 800b972:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b976:	693b      	ldr	r3, [r7, #16]
 800b978:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b97a:	3a01      	subs	r2, #1
 800b97c:	60da      	str	r2, [r3, #12]
 800b97e:	e019      	b.n	800b9b4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b980:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b984:	2b00      	cmp	r3, #0
 800b986:	d115      	bne.n	800b9b4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b988:	7ebb      	ldrb	r3, [r7, #26]
 800b98a:	f003 0310 	and.w	r3, r3, #16
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d003      	beq.n	800b99a <f_open+0x1ba>
					res = FR_NO_FILE;
 800b992:	2304      	movs	r3, #4
 800b994:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b998:	e00c      	b.n	800b9b4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b99a:	79fb      	ldrb	r3, [r7, #7]
 800b99c:	f003 0302 	and.w	r3, r3, #2
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d007      	beq.n	800b9b4 <f_open+0x1d4>
 800b9a4:	7ebb      	ldrb	r3, [r7, #26]
 800b9a6:	f003 0301 	and.w	r3, r3, #1
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d002      	beq.n	800b9b4 <f_open+0x1d4>
						res = FR_DENIED;
 800b9ae:	2307      	movs	r3, #7
 800b9b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800b9b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d128      	bne.n	800ba0e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b9bc:	79fb      	ldrb	r3, [r7, #7]
 800b9be:	f003 0308 	and.w	r3, r3, #8
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d003      	beq.n	800b9ce <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800b9c6:	79fb      	ldrb	r3, [r7, #7]
 800b9c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9cc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b9ce:	693b      	ldr	r3, [r7, #16]
 800b9d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800b9d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b9dc:	79fb      	ldrb	r3, [r7, #7]
 800b9de:	f023 0301 	bic.w	r3, r3, #1
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	bf14      	ite	ne
 800b9e6:	2301      	movne	r3, #1
 800b9e8:	2300      	moveq	r3, #0
 800b9ea:	b2db      	uxtb	r3, r3
 800b9ec:	461a      	mov	r2, r3
 800b9ee:	f107 0314 	add.w	r3, r7, #20
 800b9f2:	4611      	mov	r1, r2
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f7fe fb93 	bl	800a120 <inc_lock>
 800b9fa:	4602      	mov	r2, r0
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	691b      	ldr	r3, [r3, #16]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d102      	bne.n	800ba0e <f_open+0x22e>
 800ba08:	2302      	movs	r3, #2
 800ba0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ba0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	f040 8095 	bne.w	800bb42 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ba18:	693b      	ldr	r3, [r7, #16]
 800ba1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba1c:	4611      	mov	r1, r2
 800ba1e:	4618      	mov	r0, r3
 800ba20:	f7ff f9af 	bl	800ad82 <ld_clust>
 800ba24:	4602      	mov	r2, r0
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ba2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba2c:	331c      	adds	r3, #28
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f7fe fa10 	bl	8009e54 <ld_dword>
 800ba34:	4602      	mov	r2, r0
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ba40:	693a      	ldr	r2, [r7, #16]
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ba46:	693b      	ldr	r3, [r7, #16]
 800ba48:	88da      	ldrh	r2, [r3, #6]
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	79fa      	ldrb	r2, [r7, #7]
 800ba52:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	2200      	movs	r2, #0
 800ba58:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	2200      	movs	r2, #0
 800ba64:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	3330      	adds	r3, #48	; 0x30
 800ba6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ba6e:	2100      	movs	r1, #0
 800ba70:	4618      	mov	r0, r3
 800ba72:	f7fe fa7a 	bl	8009f6a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ba76:	79fb      	ldrb	r3, [r7, #7]
 800ba78:	f003 0320 	and.w	r3, r3, #32
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d060      	beq.n	800bb42 <f_open+0x362>
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	68db      	ldr	r3, [r3, #12]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d05c      	beq.n	800bb42 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	68da      	ldr	r2, [r3, #12]
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ba90:	693b      	ldr	r3, [r7, #16]
 800ba92:	895b      	ldrh	r3, [r3, #10]
 800ba94:	025b      	lsls	r3, r3, #9
 800ba96:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	689b      	ldr	r3, [r3, #8]
 800ba9c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	68db      	ldr	r3, [r3, #12]
 800baa2:	657b      	str	r3, [r7, #84]	; 0x54
 800baa4:	e016      	b.n	800bad4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800baaa:	4618      	mov	r0, r3
 800baac:	f7fe fd25 	bl	800a4fa <get_fat>
 800bab0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800bab2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bab4:	2b01      	cmp	r3, #1
 800bab6:	d802      	bhi.n	800babe <f_open+0x2de>
 800bab8:	2302      	movs	r3, #2
 800baba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800babe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bac4:	d102      	bne.n	800bacc <f_open+0x2ec>
 800bac6:	2301      	movs	r3, #1
 800bac8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bacc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bace:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bad0:	1ad3      	subs	r3, r2, r3
 800bad2:	657b      	str	r3, [r7, #84]	; 0x54
 800bad4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d103      	bne.n	800bae4 <f_open+0x304>
 800badc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bade:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bae0:	429a      	cmp	r2, r3
 800bae2:	d8e0      	bhi.n	800baa6 <f_open+0x2c6>
				}
				fp->clust = clst;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bae8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800baea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d127      	bne.n	800bb42 <f_open+0x362>
 800baf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800baf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d022      	beq.n	800bb42 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800bafc:	693b      	ldr	r3, [r7, #16]
 800bafe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bb00:	4618      	mov	r0, r3
 800bb02:	f7fe fcdb 	bl	800a4bc <clust2sect>
 800bb06:	6478      	str	r0, [r7, #68]	; 0x44
 800bb08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d103      	bne.n	800bb16 <f_open+0x336>
						res = FR_INT_ERR;
 800bb0e:	2302      	movs	r3, #2
 800bb10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800bb14:	e015      	b.n	800bb42 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800bb16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb18:	0a5a      	lsrs	r2, r3, #9
 800bb1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb1c:	441a      	add	r2, r3
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800bb22:	693b      	ldr	r3, [r7, #16]
 800bb24:	7858      	ldrb	r0, [r3, #1]
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	6a1a      	ldr	r2, [r3, #32]
 800bb30:	2301      	movs	r3, #1
 800bb32:	f7fe f919 	bl	8009d68 <disk_read>
 800bb36:	4603      	mov	r3, r0
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d002      	beq.n	800bb42 <f_open+0x362>
 800bb3c:	2301      	movs	r3, #1
 800bb3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800bb42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d002      	beq.n	800bb50 <f_open+0x370>
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800bb50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800bb54:	4618      	mov	r0, r3
 800bb56:	3760      	adds	r7, #96	; 0x60
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	bd80      	pop	{r7, pc}

0800bb5c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b08e      	sub	sp, #56	; 0x38
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	60f8      	str	r0, [r7, #12]
 800bb64:	60b9      	str	r1, [r7, #8]
 800bb66:	607a      	str	r2, [r7, #4]
 800bb68:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800bb6a:	68bb      	ldr	r3, [r7, #8]
 800bb6c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	2200      	movs	r2, #0
 800bb72:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	f107 0214 	add.w	r2, r7, #20
 800bb7a:	4611      	mov	r1, r2
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f7ff fdb3 	bl	800b6e8 <validate>
 800bb82:	4603      	mov	r3, r0
 800bb84:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800bb88:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d107      	bne.n	800bba0 <f_read+0x44>
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	7d5b      	ldrb	r3, [r3, #21]
 800bb94:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800bb98:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d002      	beq.n	800bba6 <f_read+0x4a>
 800bba0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bba4:	e115      	b.n	800bdd2 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	7d1b      	ldrb	r3, [r3, #20]
 800bbaa:	f003 0301 	and.w	r3, r3, #1
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d101      	bne.n	800bbb6 <f_read+0x5a>
 800bbb2:	2307      	movs	r3, #7
 800bbb4:	e10d      	b.n	800bdd2 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	68da      	ldr	r2, [r3, #12]
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	699b      	ldr	r3, [r3, #24]
 800bbbe:	1ad3      	subs	r3, r2, r3
 800bbc0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800bbc2:	687a      	ldr	r2, [r7, #4]
 800bbc4:	6a3b      	ldr	r3, [r7, #32]
 800bbc6:	429a      	cmp	r2, r3
 800bbc8:	f240 80fe 	bls.w	800bdc8 <f_read+0x26c>
 800bbcc:	6a3b      	ldr	r3, [r7, #32]
 800bbce:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800bbd0:	e0fa      	b.n	800bdc8 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	699b      	ldr	r3, [r3, #24]
 800bbd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	f040 80c6 	bne.w	800bd6c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	699b      	ldr	r3, [r3, #24]
 800bbe4:	0a5b      	lsrs	r3, r3, #9
 800bbe6:	697a      	ldr	r2, [r7, #20]
 800bbe8:	8952      	ldrh	r2, [r2, #10]
 800bbea:	3a01      	subs	r2, #1
 800bbec:	4013      	ands	r3, r2
 800bbee:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800bbf0:	69fb      	ldr	r3, [r7, #28]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d12f      	bne.n	800bc56 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	699b      	ldr	r3, [r3, #24]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d103      	bne.n	800bc06 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	689b      	ldr	r3, [r3, #8]
 800bc02:	633b      	str	r3, [r7, #48]	; 0x30
 800bc04:	e013      	b.n	800bc2e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d007      	beq.n	800bc1e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	699b      	ldr	r3, [r3, #24]
 800bc12:	4619      	mov	r1, r3
 800bc14:	68f8      	ldr	r0, [r7, #12]
 800bc16:	f7fe fef9 	bl	800aa0c <clmt_clust>
 800bc1a:	6338      	str	r0, [r7, #48]	; 0x30
 800bc1c:	e007      	b.n	800bc2e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800bc1e:	68fa      	ldr	r2, [r7, #12]
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	69db      	ldr	r3, [r3, #28]
 800bc24:	4619      	mov	r1, r3
 800bc26:	4610      	mov	r0, r2
 800bc28:	f7fe fc67 	bl	800a4fa <get_fat>
 800bc2c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800bc2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc30:	2b01      	cmp	r3, #1
 800bc32:	d804      	bhi.n	800bc3e <f_read+0xe2>
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	2202      	movs	r2, #2
 800bc38:	755a      	strb	r2, [r3, #21]
 800bc3a:	2302      	movs	r3, #2
 800bc3c:	e0c9      	b.n	800bdd2 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bc3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc44:	d104      	bne.n	800bc50 <f_read+0xf4>
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	2201      	movs	r2, #1
 800bc4a:	755a      	strb	r2, [r3, #21]
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	e0c0      	b.n	800bdd2 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc54:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800bc56:	697a      	ldr	r2, [r7, #20]
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	69db      	ldr	r3, [r3, #28]
 800bc5c:	4619      	mov	r1, r3
 800bc5e:	4610      	mov	r0, r2
 800bc60:	f7fe fc2c 	bl	800a4bc <clust2sect>
 800bc64:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800bc66:	69bb      	ldr	r3, [r7, #24]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d104      	bne.n	800bc76 <f_read+0x11a>
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	2202      	movs	r2, #2
 800bc70:	755a      	strb	r2, [r3, #21]
 800bc72:	2302      	movs	r3, #2
 800bc74:	e0ad      	b.n	800bdd2 <f_read+0x276>
			sect += csect;
 800bc76:	69ba      	ldr	r2, [r7, #24]
 800bc78:	69fb      	ldr	r3, [r7, #28]
 800bc7a:	4413      	add	r3, r2
 800bc7c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	0a5b      	lsrs	r3, r3, #9
 800bc82:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800bc84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d039      	beq.n	800bcfe <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800bc8a:	69fa      	ldr	r2, [r7, #28]
 800bc8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc8e:	4413      	add	r3, r2
 800bc90:	697a      	ldr	r2, [r7, #20]
 800bc92:	8952      	ldrh	r2, [r2, #10]
 800bc94:	4293      	cmp	r3, r2
 800bc96:	d905      	bls.n	800bca4 <f_read+0x148>
					cc = fs->csize - csect;
 800bc98:	697b      	ldr	r3, [r7, #20]
 800bc9a:	895b      	ldrh	r3, [r3, #10]
 800bc9c:	461a      	mov	r2, r3
 800bc9e:	69fb      	ldr	r3, [r7, #28]
 800bca0:	1ad3      	subs	r3, r2, r3
 800bca2:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bca4:	697b      	ldr	r3, [r7, #20]
 800bca6:	7858      	ldrb	r0, [r3, #1]
 800bca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcaa:	69ba      	ldr	r2, [r7, #24]
 800bcac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bcae:	f7fe f85b 	bl	8009d68 <disk_read>
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d004      	beq.n	800bcc2 <f_read+0x166>
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	2201      	movs	r2, #1
 800bcbc:	755a      	strb	r2, [r3, #21]
 800bcbe:	2301      	movs	r3, #1
 800bcc0:	e087      	b.n	800bdd2 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	7d1b      	ldrb	r3, [r3, #20]
 800bcc6:	b25b      	sxtb	r3, r3
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	da14      	bge.n	800bcf6 <f_read+0x19a>
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	6a1a      	ldr	r2, [r3, #32]
 800bcd0:	69bb      	ldr	r3, [r7, #24]
 800bcd2:	1ad3      	subs	r3, r2, r3
 800bcd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bcd6:	429a      	cmp	r2, r3
 800bcd8:	d90d      	bls.n	800bcf6 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	6a1a      	ldr	r2, [r3, #32]
 800bcde:	69bb      	ldr	r3, [r7, #24]
 800bce0:	1ad3      	subs	r3, r2, r3
 800bce2:	025b      	lsls	r3, r3, #9
 800bce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bce6:	18d0      	adds	r0, r2, r3
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	3330      	adds	r3, #48	; 0x30
 800bcec:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bcf0:	4619      	mov	r1, r3
 800bcf2:	f7fe f919 	bl	8009f28 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800bcf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcf8:	025b      	lsls	r3, r3, #9
 800bcfa:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800bcfc:	e050      	b.n	800bda0 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	6a1b      	ldr	r3, [r3, #32]
 800bd02:	69ba      	ldr	r2, [r7, #24]
 800bd04:	429a      	cmp	r2, r3
 800bd06:	d02e      	beq.n	800bd66 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	7d1b      	ldrb	r3, [r3, #20]
 800bd0c:	b25b      	sxtb	r3, r3
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	da18      	bge.n	800bd44 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bd12:	697b      	ldr	r3, [r7, #20]
 800bd14:	7858      	ldrb	r0, [r3, #1]
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	6a1a      	ldr	r2, [r3, #32]
 800bd20:	2301      	movs	r3, #1
 800bd22:	f7fe f841 	bl	8009da8 <disk_write>
 800bd26:	4603      	mov	r3, r0
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d004      	beq.n	800bd36 <f_read+0x1da>
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	2201      	movs	r2, #1
 800bd30:	755a      	strb	r2, [r3, #21]
 800bd32:	2301      	movs	r3, #1
 800bd34:	e04d      	b.n	800bdd2 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	7d1b      	ldrb	r3, [r3, #20]
 800bd3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd3e:	b2da      	uxtb	r2, r3
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800bd44:	697b      	ldr	r3, [r7, #20]
 800bd46:	7858      	ldrb	r0, [r3, #1]
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bd4e:	2301      	movs	r3, #1
 800bd50:	69ba      	ldr	r2, [r7, #24]
 800bd52:	f7fe f809 	bl	8009d68 <disk_read>
 800bd56:	4603      	mov	r3, r0
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d004      	beq.n	800bd66 <f_read+0x20a>
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	2201      	movs	r2, #1
 800bd60:	755a      	strb	r2, [r3, #21]
 800bd62:	2301      	movs	r3, #1
 800bd64:	e035      	b.n	800bdd2 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	69ba      	ldr	r2, [r7, #24]
 800bd6a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	699b      	ldr	r3, [r3, #24]
 800bd70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd74:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800bd78:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800bd7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	429a      	cmp	r2, r3
 800bd80:	d901      	bls.n	800bd86 <f_read+0x22a>
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	699b      	ldr	r3, [r3, #24]
 800bd90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd94:	4413      	add	r3, r2
 800bd96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd98:	4619      	mov	r1, r3
 800bd9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bd9c:	f7fe f8c4 	bl	8009f28 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800bda0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bda2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bda4:	4413      	add	r3, r2
 800bda6:	627b      	str	r3, [r7, #36]	; 0x24
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	699a      	ldr	r2, [r3, #24]
 800bdac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdae:	441a      	add	r2, r3
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	619a      	str	r2, [r3, #24]
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	681a      	ldr	r2, [r3, #0]
 800bdb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdba:	441a      	add	r2, r3
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	601a      	str	r2, [r3, #0]
 800bdc0:	687a      	ldr	r2, [r7, #4]
 800bdc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdc4:	1ad3      	subs	r3, r2, r3
 800bdc6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	f47f af01 	bne.w	800bbd2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800bdd0:	2300      	movs	r3, #0
}
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	3738      	adds	r7, #56	; 0x38
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd80      	pop	{r7, pc}

0800bdda <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800bdda:	b580      	push	{r7, lr}
 800bddc:	b08c      	sub	sp, #48	; 0x30
 800bdde:	af00      	add	r7, sp, #0
 800bde0:	60f8      	str	r0, [r7, #12]
 800bde2:	60b9      	str	r1, [r7, #8]
 800bde4:	607a      	str	r2, [r7, #4]
 800bde6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	2200      	movs	r2, #0
 800bdf0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	f107 0210 	add.w	r2, r7, #16
 800bdf8:	4611      	mov	r1, r2
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	f7ff fc74 	bl	800b6e8 <validate>
 800be00:	4603      	mov	r3, r0
 800be02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800be06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d107      	bne.n	800be1e <f_write+0x44>
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	7d5b      	ldrb	r3, [r3, #21]
 800be12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800be16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d002      	beq.n	800be24 <f_write+0x4a>
 800be1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800be22:	e14b      	b.n	800c0bc <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	7d1b      	ldrb	r3, [r3, #20]
 800be28:	f003 0302 	and.w	r3, r3, #2
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d101      	bne.n	800be34 <f_write+0x5a>
 800be30:	2307      	movs	r3, #7
 800be32:	e143      	b.n	800c0bc <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	699a      	ldr	r2, [r3, #24]
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	441a      	add	r2, r3
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	699b      	ldr	r3, [r3, #24]
 800be40:	429a      	cmp	r2, r3
 800be42:	f080 812d 	bcs.w	800c0a0 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	699b      	ldr	r3, [r3, #24]
 800be4a:	43db      	mvns	r3, r3
 800be4c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800be4e:	e127      	b.n	800c0a0 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	699b      	ldr	r3, [r3, #24]
 800be54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be58:	2b00      	cmp	r3, #0
 800be5a:	f040 80e3 	bne.w	800c024 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	699b      	ldr	r3, [r3, #24]
 800be62:	0a5b      	lsrs	r3, r3, #9
 800be64:	693a      	ldr	r2, [r7, #16]
 800be66:	8952      	ldrh	r2, [r2, #10]
 800be68:	3a01      	subs	r2, #1
 800be6a:	4013      	ands	r3, r2
 800be6c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800be6e:	69bb      	ldr	r3, [r7, #24]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d143      	bne.n	800befc <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	699b      	ldr	r3, [r3, #24]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d10c      	bne.n	800be96 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	689b      	ldr	r3, [r3, #8]
 800be80:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800be82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be84:	2b00      	cmp	r3, #0
 800be86:	d11a      	bne.n	800bebe <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	2100      	movs	r1, #0
 800be8c:	4618      	mov	r0, r3
 800be8e:	f7fe fd25 	bl	800a8dc <create_chain>
 800be92:	62b8      	str	r0, [r7, #40]	; 0x28
 800be94:	e013      	b.n	800bebe <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d007      	beq.n	800beae <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	699b      	ldr	r3, [r3, #24]
 800bea2:	4619      	mov	r1, r3
 800bea4:	68f8      	ldr	r0, [r7, #12]
 800bea6:	f7fe fdb1 	bl	800aa0c <clmt_clust>
 800beaa:	62b8      	str	r0, [r7, #40]	; 0x28
 800beac:	e007      	b.n	800bebe <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800beae:	68fa      	ldr	r2, [r7, #12]
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	69db      	ldr	r3, [r3, #28]
 800beb4:	4619      	mov	r1, r3
 800beb6:	4610      	mov	r0, r2
 800beb8:	f7fe fd10 	bl	800a8dc <create_chain>
 800bebc:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	f000 80f2 	beq.w	800c0aa <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800bec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bec8:	2b01      	cmp	r3, #1
 800beca:	d104      	bne.n	800bed6 <f_write+0xfc>
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	2202      	movs	r2, #2
 800bed0:	755a      	strb	r2, [r3, #21]
 800bed2:	2302      	movs	r3, #2
 800bed4:	e0f2      	b.n	800c0bc <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bedc:	d104      	bne.n	800bee8 <f_write+0x10e>
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	2201      	movs	r2, #1
 800bee2:	755a      	strb	r2, [r3, #21]
 800bee4:	2301      	movs	r3, #1
 800bee6:	e0e9      	b.n	800c0bc <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800beec:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	689b      	ldr	r3, [r3, #8]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d102      	bne.n	800befc <f_write+0x122>
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800befa:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	7d1b      	ldrb	r3, [r3, #20]
 800bf00:	b25b      	sxtb	r3, r3
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	da18      	bge.n	800bf38 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bf06:	693b      	ldr	r3, [r7, #16]
 800bf08:	7858      	ldrb	r0, [r3, #1]
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	6a1a      	ldr	r2, [r3, #32]
 800bf14:	2301      	movs	r3, #1
 800bf16:	f7fd ff47 	bl	8009da8 <disk_write>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d004      	beq.n	800bf2a <f_write+0x150>
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	2201      	movs	r2, #1
 800bf24:	755a      	strb	r2, [r3, #21]
 800bf26:	2301      	movs	r3, #1
 800bf28:	e0c8      	b.n	800c0bc <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	7d1b      	ldrb	r3, [r3, #20]
 800bf2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf32:	b2da      	uxtb	r2, r3
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800bf38:	693a      	ldr	r2, [r7, #16]
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	69db      	ldr	r3, [r3, #28]
 800bf3e:	4619      	mov	r1, r3
 800bf40:	4610      	mov	r0, r2
 800bf42:	f7fe fabb 	bl	800a4bc <clust2sect>
 800bf46:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800bf48:	697b      	ldr	r3, [r7, #20]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d104      	bne.n	800bf58 <f_write+0x17e>
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	2202      	movs	r2, #2
 800bf52:	755a      	strb	r2, [r3, #21]
 800bf54:	2302      	movs	r3, #2
 800bf56:	e0b1      	b.n	800c0bc <f_write+0x2e2>
			sect += csect;
 800bf58:	697a      	ldr	r2, [r7, #20]
 800bf5a:	69bb      	ldr	r3, [r7, #24]
 800bf5c:	4413      	add	r3, r2
 800bf5e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	0a5b      	lsrs	r3, r3, #9
 800bf64:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800bf66:	6a3b      	ldr	r3, [r7, #32]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d03c      	beq.n	800bfe6 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800bf6c:	69ba      	ldr	r2, [r7, #24]
 800bf6e:	6a3b      	ldr	r3, [r7, #32]
 800bf70:	4413      	add	r3, r2
 800bf72:	693a      	ldr	r2, [r7, #16]
 800bf74:	8952      	ldrh	r2, [r2, #10]
 800bf76:	4293      	cmp	r3, r2
 800bf78:	d905      	bls.n	800bf86 <f_write+0x1ac>
					cc = fs->csize - csect;
 800bf7a:	693b      	ldr	r3, [r7, #16]
 800bf7c:	895b      	ldrh	r3, [r3, #10]
 800bf7e:	461a      	mov	r2, r3
 800bf80:	69bb      	ldr	r3, [r7, #24]
 800bf82:	1ad3      	subs	r3, r2, r3
 800bf84:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bf86:	693b      	ldr	r3, [r7, #16]
 800bf88:	7858      	ldrb	r0, [r3, #1]
 800bf8a:	6a3b      	ldr	r3, [r7, #32]
 800bf8c:	697a      	ldr	r2, [r7, #20]
 800bf8e:	69f9      	ldr	r1, [r7, #28]
 800bf90:	f7fd ff0a 	bl	8009da8 <disk_write>
 800bf94:	4603      	mov	r3, r0
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d004      	beq.n	800bfa4 <f_write+0x1ca>
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	2201      	movs	r2, #1
 800bf9e:	755a      	strb	r2, [r3, #21]
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	e08b      	b.n	800c0bc <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	6a1a      	ldr	r2, [r3, #32]
 800bfa8:	697b      	ldr	r3, [r7, #20]
 800bfaa:	1ad3      	subs	r3, r2, r3
 800bfac:	6a3a      	ldr	r2, [r7, #32]
 800bfae:	429a      	cmp	r2, r3
 800bfb0:	d915      	bls.n	800bfde <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	6a1a      	ldr	r2, [r3, #32]
 800bfbc:	697b      	ldr	r3, [r7, #20]
 800bfbe:	1ad3      	subs	r3, r2, r3
 800bfc0:	025b      	lsls	r3, r3, #9
 800bfc2:	69fa      	ldr	r2, [r7, #28]
 800bfc4:	4413      	add	r3, r2
 800bfc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bfca:	4619      	mov	r1, r3
 800bfcc:	f7fd ffac 	bl	8009f28 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	7d1b      	ldrb	r3, [r3, #20]
 800bfd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bfd8:	b2da      	uxtb	r2, r3
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800bfde:	6a3b      	ldr	r3, [r7, #32]
 800bfe0:	025b      	lsls	r3, r3, #9
 800bfe2:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800bfe4:	e03f      	b.n	800c066 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	6a1b      	ldr	r3, [r3, #32]
 800bfea:	697a      	ldr	r2, [r7, #20]
 800bfec:	429a      	cmp	r2, r3
 800bfee:	d016      	beq.n	800c01e <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	699a      	ldr	r2, [r3, #24]
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bff8:	429a      	cmp	r2, r3
 800bffa:	d210      	bcs.n	800c01e <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800bffc:	693b      	ldr	r3, [r7, #16]
 800bffe:	7858      	ldrb	r0, [r3, #1]
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c006:	2301      	movs	r3, #1
 800c008:	697a      	ldr	r2, [r7, #20]
 800c00a:	f7fd fead 	bl	8009d68 <disk_read>
 800c00e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c010:	2b00      	cmp	r3, #0
 800c012:	d004      	beq.n	800c01e <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	2201      	movs	r2, #1
 800c018:	755a      	strb	r2, [r3, #21]
 800c01a:	2301      	movs	r3, #1
 800c01c:	e04e      	b.n	800c0bc <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	697a      	ldr	r2, [r7, #20]
 800c022:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	699b      	ldr	r3, [r3, #24]
 800c028:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c02c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800c030:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c032:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	429a      	cmp	r2, r3
 800c038:	d901      	bls.n	800c03e <f_write+0x264>
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	699b      	ldr	r3, [r3, #24]
 800c048:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c04c:	4413      	add	r3, r2
 800c04e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c050:	69f9      	ldr	r1, [r7, #28]
 800c052:	4618      	mov	r0, r3
 800c054:	f7fd ff68 	bl	8009f28 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	7d1b      	ldrb	r3, [r3, #20]
 800c05c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c060:	b2da      	uxtb	r2, r3
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c066:	69fa      	ldr	r2, [r7, #28]
 800c068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c06a:	4413      	add	r3, r2
 800c06c:	61fb      	str	r3, [r7, #28]
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	699a      	ldr	r2, [r3, #24]
 800c072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c074:	441a      	add	r2, r3
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	619a      	str	r2, [r3, #24]
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	68da      	ldr	r2, [r3, #12]
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	699b      	ldr	r3, [r3, #24]
 800c082:	429a      	cmp	r2, r3
 800c084:	bf38      	it	cc
 800c086:	461a      	movcc	r2, r3
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	60da      	str	r2, [r3, #12]
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	681a      	ldr	r2, [r3, #0]
 800c090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c092:	441a      	add	r2, r3
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	601a      	str	r2, [r3, #0]
 800c098:	687a      	ldr	r2, [r7, #4]
 800c09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c09c:	1ad3      	subs	r3, r2, r3
 800c09e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	f47f aed4 	bne.w	800be50 <f_write+0x76>
 800c0a8:	e000      	b.n	800c0ac <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c0aa:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	7d1b      	ldrb	r3, [r3, #20]
 800c0b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0b4:	b2da      	uxtb	r2, r3
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c0ba:	2300      	movs	r3, #0
}
 800c0bc:	4618      	mov	r0, r3
 800c0be:	3730      	adds	r7, #48	; 0x30
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}

0800c0c4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b086      	sub	sp, #24
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f107 0208 	add.w	r2, r7, #8
 800c0d2:	4611      	mov	r1, r2
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	f7ff fb07 	bl	800b6e8 <validate>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c0de:	7dfb      	ldrb	r3, [r7, #23]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d168      	bne.n	800c1b6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	7d1b      	ldrb	r3, [r3, #20]
 800c0e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d062      	beq.n	800c1b6 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	7d1b      	ldrb	r3, [r3, #20]
 800c0f4:	b25b      	sxtb	r3, r3
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	da15      	bge.n	800c126 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c0fa:	68bb      	ldr	r3, [r7, #8]
 800c0fc:	7858      	ldrb	r0, [r3, #1]
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	6a1a      	ldr	r2, [r3, #32]
 800c108:	2301      	movs	r3, #1
 800c10a:	f7fd fe4d 	bl	8009da8 <disk_write>
 800c10e:	4603      	mov	r3, r0
 800c110:	2b00      	cmp	r3, #0
 800c112:	d001      	beq.n	800c118 <f_sync+0x54>
 800c114:	2301      	movs	r3, #1
 800c116:	e04f      	b.n	800c1b8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	7d1b      	ldrb	r3, [r3, #20]
 800c11c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c120:	b2da      	uxtb	r2, r3
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c126:	f000 f975 	bl	800c414 <get_fattime>
 800c12a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c12c:	68ba      	ldr	r2, [r7, #8]
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c132:	4619      	mov	r1, r3
 800c134:	4610      	mov	r0, r2
 800c136:	f7fe f925 	bl	800a384 <move_window>
 800c13a:	4603      	mov	r3, r0
 800c13c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c13e:	7dfb      	ldrb	r3, [r7, #23]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d138      	bne.n	800c1b6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c148:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	330b      	adds	r3, #11
 800c14e:	781a      	ldrb	r2, [r3, #0]
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	330b      	adds	r3, #11
 800c154:	f042 0220 	orr.w	r2, r2, #32
 800c158:	b2d2      	uxtb	r2, r2
 800c15a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	6818      	ldr	r0, [r3, #0]
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	689b      	ldr	r3, [r3, #8]
 800c164:	461a      	mov	r2, r3
 800c166:	68f9      	ldr	r1, [r7, #12]
 800c168:	f7fe fe2a 	bl	800adc0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	f103 021c 	add.w	r2, r3, #28
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	68db      	ldr	r3, [r3, #12]
 800c176:	4619      	mov	r1, r3
 800c178:	4610      	mov	r0, r2
 800c17a:	f7fd fea9 	bl	8009ed0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	3316      	adds	r3, #22
 800c182:	6939      	ldr	r1, [r7, #16]
 800c184:	4618      	mov	r0, r3
 800c186:	f7fd fea3 	bl	8009ed0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	3312      	adds	r3, #18
 800c18e:	2100      	movs	r1, #0
 800c190:	4618      	mov	r0, r3
 800c192:	f7fd fe82 	bl	8009e9a <st_word>
					fs->wflag = 1;
 800c196:	68bb      	ldr	r3, [r7, #8]
 800c198:	2201      	movs	r2, #1
 800c19a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c19c:	68bb      	ldr	r3, [r7, #8]
 800c19e:	4618      	mov	r0, r3
 800c1a0:	f7fe f91e 	bl	800a3e0 <sync_fs>
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	7d1b      	ldrb	r3, [r3, #20]
 800c1ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c1b0:	b2da      	uxtb	r2, r3
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c1b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	3718      	adds	r7, #24
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bd80      	pop	{r7, pc}

0800c1c0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b084      	sub	sp, #16
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c1c8:	6878      	ldr	r0, [r7, #4]
 800c1ca:	f7ff ff7b 	bl	800c0c4 <f_sync>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c1d2:	7bfb      	ldrb	r3, [r7, #15]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d118      	bne.n	800c20a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	f107 0208 	add.w	r2, r7, #8
 800c1de:	4611      	mov	r1, r2
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	f7ff fa81 	bl	800b6e8 <validate>
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c1ea:	7bfb      	ldrb	r3, [r7, #15]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d10c      	bne.n	800c20a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	691b      	ldr	r3, [r3, #16]
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f7fe f821 	bl	800a23c <dec_lock>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c1fe:	7bfb      	ldrb	r3, [r7, #15]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d102      	bne.n	800c20a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2200      	movs	r2, #0
 800c208:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c20a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c20c:	4618      	mov	r0, r3
 800c20e:	3710      	adds	r7, #16
 800c210:	46bd      	mov	sp, r7
 800c212:	bd80      	pop	{r7, pc}

0800c214 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c214:	b480      	push	{r7}
 800c216:	b087      	sub	sp, #28
 800c218:	af00      	add	r7, sp, #0
 800c21a:	60f8      	str	r0, [r7, #12]
 800c21c:	60b9      	str	r1, [r7, #8]
 800c21e:	4613      	mov	r3, r2
 800c220:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c222:	2301      	movs	r3, #1
 800c224:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c226:	2300      	movs	r3, #0
 800c228:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c22a:	4b1f      	ldr	r3, [pc, #124]	; (800c2a8 <FATFS_LinkDriverEx+0x94>)
 800c22c:	7a5b      	ldrb	r3, [r3, #9]
 800c22e:	b2db      	uxtb	r3, r3
 800c230:	2b00      	cmp	r3, #0
 800c232:	d131      	bne.n	800c298 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c234:	4b1c      	ldr	r3, [pc, #112]	; (800c2a8 <FATFS_LinkDriverEx+0x94>)
 800c236:	7a5b      	ldrb	r3, [r3, #9]
 800c238:	b2db      	uxtb	r3, r3
 800c23a:	461a      	mov	r2, r3
 800c23c:	4b1a      	ldr	r3, [pc, #104]	; (800c2a8 <FATFS_LinkDriverEx+0x94>)
 800c23e:	2100      	movs	r1, #0
 800c240:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c242:	4b19      	ldr	r3, [pc, #100]	; (800c2a8 <FATFS_LinkDriverEx+0x94>)
 800c244:	7a5b      	ldrb	r3, [r3, #9]
 800c246:	b2db      	uxtb	r3, r3
 800c248:	4a17      	ldr	r2, [pc, #92]	; (800c2a8 <FATFS_LinkDriverEx+0x94>)
 800c24a:	009b      	lsls	r3, r3, #2
 800c24c:	4413      	add	r3, r2
 800c24e:	68fa      	ldr	r2, [r7, #12]
 800c250:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c252:	4b15      	ldr	r3, [pc, #84]	; (800c2a8 <FATFS_LinkDriverEx+0x94>)
 800c254:	7a5b      	ldrb	r3, [r3, #9]
 800c256:	b2db      	uxtb	r3, r3
 800c258:	461a      	mov	r2, r3
 800c25a:	4b13      	ldr	r3, [pc, #76]	; (800c2a8 <FATFS_LinkDriverEx+0x94>)
 800c25c:	4413      	add	r3, r2
 800c25e:	79fa      	ldrb	r2, [r7, #7]
 800c260:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c262:	4b11      	ldr	r3, [pc, #68]	; (800c2a8 <FATFS_LinkDriverEx+0x94>)
 800c264:	7a5b      	ldrb	r3, [r3, #9]
 800c266:	b2db      	uxtb	r3, r3
 800c268:	1c5a      	adds	r2, r3, #1
 800c26a:	b2d1      	uxtb	r1, r2
 800c26c:	4a0e      	ldr	r2, [pc, #56]	; (800c2a8 <FATFS_LinkDriverEx+0x94>)
 800c26e:	7251      	strb	r1, [r2, #9]
 800c270:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c272:	7dbb      	ldrb	r3, [r7, #22]
 800c274:	3330      	adds	r3, #48	; 0x30
 800c276:	b2da      	uxtb	r2, r3
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c27c:	68bb      	ldr	r3, [r7, #8]
 800c27e:	3301      	adds	r3, #1
 800c280:	223a      	movs	r2, #58	; 0x3a
 800c282:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c284:	68bb      	ldr	r3, [r7, #8]
 800c286:	3302      	adds	r3, #2
 800c288:	222f      	movs	r2, #47	; 0x2f
 800c28a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	3303      	adds	r3, #3
 800c290:	2200      	movs	r2, #0
 800c292:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c294:	2300      	movs	r3, #0
 800c296:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c298:	7dfb      	ldrb	r3, [r7, #23]
}
 800c29a:	4618      	mov	r0, r3
 800c29c:	371c      	adds	r7, #28
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a4:	4770      	bx	lr
 800c2a6:	bf00      	nop
 800c2a8:	20000304 	.word	0x20000304

0800c2ac <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b082      	sub	sp, #8
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
 800c2b4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	6839      	ldr	r1, [r7, #0]
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	f7ff ffaa 	bl	800c214 <FATFS_LinkDriverEx>
 800c2c0:	4603      	mov	r3, r0
}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	3708      	adds	r7, #8
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}
	...

0800c2cc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b082      	sub	sp, #8
 800c2d0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c2d6:	f000 f879 	bl	800c3cc <BSP_SD_IsDetected>
 800c2da:	4603      	mov	r3, r0
 800c2dc:	2b01      	cmp	r3, #1
 800c2de:	d001      	beq.n	800c2e4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800c2e0:	2302      	movs	r3, #2
 800c2e2:	e012      	b.n	800c30a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 800c2e4:	480b      	ldr	r0, [pc, #44]	; (800c314 <BSP_SD_Init+0x48>)
 800c2e6:	f7fb f9c1 	bl	800766c <HAL_SD_Init>
 800c2ea:	4603      	mov	r3, r0
 800c2ec:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800c2ee:	79fb      	ldrb	r3, [r7, #7]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d109      	bne.n	800c308 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800c2f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c2f8:	4806      	ldr	r0, [pc, #24]	; (800c314 <BSP_SD_Init+0x48>)
 800c2fa:	f7fb ff97 	bl	800822c <HAL_SD_ConfigWideBusOperation>
 800c2fe:	4603      	mov	r3, r0
 800c300:	2b00      	cmp	r3, #0
 800c302:	d001      	beq.n	800c308 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800c304:	2301      	movs	r3, #1
 800c306:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800c308:	79fb      	ldrb	r3, [r7, #7]
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	3708      	adds	r7, #8
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}
 800c312:	bf00      	nop
 800c314:	2000096c 	.word	0x2000096c

0800c318 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b088      	sub	sp, #32
 800c31c:	af02      	add	r7, sp, #8
 800c31e:	60f8      	str	r0, [r7, #12]
 800c320:	60b9      	str	r1, [r7, #8]
 800c322:	607a      	str	r2, [r7, #4]
 800c324:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800c326:	2300      	movs	r3, #0
 800c328:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	9300      	str	r3, [sp, #0]
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	68ba      	ldr	r2, [r7, #8]
 800c332:	68f9      	ldr	r1, [r7, #12]
 800c334:	4806      	ldr	r0, [pc, #24]	; (800c350 <BSP_SD_ReadBlocks+0x38>)
 800c336:	f7fb fa28 	bl	800778a <HAL_SD_ReadBlocks>
 800c33a:	4603      	mov	r3, r0
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d001      	beq.n	800c344 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800c340:	2301      	movs	r3, #1
 800c342:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800c344:	7dfb      	ldrb	r3, [r7, #23]
}
 800c346:	4618      	mov	r0, r3
 800c348:	3718      	adds	r7, #24
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bd80      	pop	{r7, pc}
 800c34e:	bf00      	nop
 800c350:	2000096c 	.word	0x2000096c

0800c354 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b088      	sub	sp, #32
 800c358:	af02      	add	r7, sp, #8
 800c35a:	60f8      	str	r0, [r7, #12]
 800c35c:	60b9      	str	r1, [r7, #8]
 800c35e:	607a      	str	r2, [r7, #4]
 800c360:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800c362:	2300      	movs	r3, #0
 800c364:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	9300      	str	r3, [sp, #0]
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	68ba      	ldr	r2, [r7, #8]
 800c36e:	68f9      	ldr	r1, [r7, #12]
 800c370:	4806      	ldr	r0, [pc, #24]	; (800c38c <BSP_SD_WriteBlocks+0x38>)
 800c372:	f7fb fba0 	bl	8007ab6 <HAL_SD_WriteBlocks>
 800c376:	4603      	mov	r3, r0
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d001      	beq.n	800c380 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800c37c:	2301      	movs	r3, #1
 800c37e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800c380:	7dfb      	ldrb	r3, [r7, #23]
}
 800c382:	4618      	mov	r0, r3
 800c384:	3718      	adds	r7, #24
 800c386:	46bd      	mov	sp, r7
 800c388:	bd80      	pop	{r7, pc}
 800c38a:	bf00      	nop
 800c38c:	2000096c 	.word	0x2000096c

0800c390 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c394:	4805      	ldr	r0, [pc, #20]	; (800c3ac <BSP_SD_GetCardState+0x1c>)
 800c396:	f7fb ffc5 	bl	8008324 <HAL_SD_GetCardState>
 800c39a:	4603      	mov	r3, r0
 800c39c:	2b04      	cmp	r3, #4
 800c39e:	bf14      	ite	ne
 800c3a0:	2301      	movne	r3, #1
 800c3a2:	2300      	moveq	r3, #0
 800c3a4:	b2db      	uxtb	r3, r3
}
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	bd80      	pop	{r7, pc}
 800c3aa:	bf00      	nop
 800c3ac:	2000096c 	.word	0x2000096c

0800c3b0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b082      	sub	sp, #8
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 800c3b8:	6879      	ldr	r1, [r7, #4]
 800c3ba:	4803      	ldr	r0, [pc, #12]	; (800c3c8 <BSP_SD_GetCardInfo+0x18>)
 800c3bc:	f7fb ff0a 	bl	80081d4 <HAL_SD_GetCardInfo>
}
 800c3c0:	bf00      	nop
 800c3c2:	3708      	adds	r7, #8
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	bd80      	pop	{r7, pc}
 800c3c8:	2000096c 	.word	0x2000096c

0800c3cc <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b082      	sub	sp, #8
 800c3d0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c3d2:	2301      	movs	r3, #1
 800c3d4:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800c3d6:	f000 f825 	bl	800c424 <BSP_PlatformIsDetected>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d101      	bne.n	800c3e4 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800c3e4:	79fb      	ldrb	r3, [r7, #7]
 800c3e6:	b2db      	uxtb	r3, r3
}
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	3708      	adds	r7, #8
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bd80      	pop	{r7, pc}

0800c3f0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c3f4:	4904      	ldr	r1, [pc, #16]	; (800c408 <MX_FATFS_Init+0x18>)
 800c3f6:	4805      	ldr	r0, [pc, #20]	; (800c40c <MX_FATFS_Init+0x1c>)
 800c3f8:	f7ff ff58 	bl	800c2ac <FATFS_LinkDriver>
 800c3fc:	4603      	mov	r3, r0
 800c3fe:	461a      	mov	r2, r3
 800c400:	4b03      	ldr	r3, [pc, #12]	; (800c410 <MX_FATFS_Init+0x20>)
 800c402:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800c404:	bf00      	nop
 800c406:	bd80      	pop	{r7, pc}
 800c408:	20000484 	.word	0x20000484
 800c40c:	0812ae20 	.word	0x0812ae20
 800c410:	20000480 	.word	0x20000480

0800c414 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c414:	b480      	push	{r7}
 800c416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c418:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800c41a:	4618      	mov	r0, r3
 800c41c:	46bd      	mov	sp, r7
 800c41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c422:	4770      	bx	lr

0800c424 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800c424:	b580      	push	{r7, lr}
 800c426:	b082      	sub	sp, #8
 800c428:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800c42a:	2301      	movs	r3, #1
 800c42c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800c42e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c432:	4806      	ldr	r0, [pc, #24]	; (800c44c <BSP_PlatformIsDetected+0x28>)
 800c434:	f7f9 f82a 	bl	800548c <HAL_GPIO_ReadPin>
 800c438:	4603      	mov	r3, r0
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d001      	beq.n	800c442 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800c43e:	2300      	movs	r3, #0
 800c440:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800c442:	79fb      	ldrb	r3, [r7, #7]
}  
 800c444:	4618      	mov	r0, r3
 800c446:	3708      	adds	r7, #8
 800c448:	46bd      	mov	sp, r7
 800c44a:	bd80      	pop	{r7, pc}
 800c44c:	40022000 	.word	0x40022000

0800c450 <drawGrid>:

#include "game.h"
#include "stm32f769i_discovery_lcd.h"

void drawGrid(void)
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b082      	sub	sp, #8
 800c454:	af00      	add	r7, sp, #0
	uint8_t offset;

	// Draw the background
	BSP_LCD_SetTextColor(BOARD_COLOR);
 800c456:	4823      	ldr	r0, [pc, #140]	; (800c4e4 <drawGrid+0x94>)
 800c458:	f7f5 f824 	bl	80014a4 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 0, GRID_SIZE, GRID_SIZE);
 800c45c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800c460:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c464:	2100      	movs	r1, #0
 800c466:	2000      	movs	r0, #0
 800c468:	f7f5 fb8c 	bl	8001b84 <BSP_LCD_FillRect>

	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800c46c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800c470:	f7f5 f818 	bl	80014a4 <BSP_LCD_SetTextColor>

	for(uint8_t i=0; i<=BOARD_SIZE; i++)
 800c474:	2300      	movs	r3, #0
 800c476:	71bb      	strb	r3, [r7, #6]
 800c478:	e02c      	b.n	800c4d4 <drawGrid+0x84>
	{

		// Para i=0 el offset seria -2
		if(i == 0)
 800c47a:	79bb      	ldrb	r3, [r7, #6]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d102      	bne.n	800c486 <drawGrid+0x36>
		{
			offset = 0;
 800c480:	2300      	movs	r3, #0
 800c482:	71fb      	strb	r3, [r7, #7]
 800c484:	e001      	b.n	800c48a <drawGrid+0x3a>
		}
		else
		{
			offset = LINE_WIDTH/2;
 800c486:	2302      	movs	r3, #2
 800c488:	71fb      	strb	r3, [r7, #7]
		}

		// Horizontal
		BSP_LCD_FillRect(0, (i * SQUARE_SIZE)-offset, GRID_SIZE, LINE_WIDTH);
 800c48a:	79bb      	ldrb	r3, [r7, #6]
 800c48c:	b29b      	uxth	r3, r3
 800c48e:	461a      	mov	r2, r3
 800c490:	0112      	lsls	r2, r2, #4
 800c492:	1ad3      	subs	r3, r2, r3
 800c494:	009b      	lsls	r3, r3, #2
 800c496:	b29a      	uxth	r2, r3
 800c498:	79fb      	ldrb	r3, [r7, #7]
 800c49a:	b29b      	uxth	r3, r3
 800c49c:	1ad3      	subs	r3, r2, r3
 800c49e:	b299      	uxth	r1, r3
 800c4a0:	2304      	movs	r3, #4
 800c4a2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c4a6:	2000      	movs	r0, #0
 800c4a8:	f7f5 fb6c 	bl	8001b84 <BSP_LCD_FillRect>

		// Vertical
		BSP_LCD_FillRect((i * SQUARE_SIZE)-offset, 0, LINE_WIDTH, GRID_SIZE);
 800c4ac:	79bb      	ldrb	r3, [r7, #6]
 800c4ae:	b29b      	uxth	r3, r3
 800c4b0:	461a      	mov	r2, r3
 800c4b2:	0112      	lsls	r2, r2, #4
 800c4b4:	1ad3      	subs	r3, r2, r3
 800c4b6:	009b      	lsls	r3, r3, #2
 800c4b8:	b29a      	uxth	r2, r3
 800c4ba:	79fb      	ldrb	r3, [r7, #7]
 800c4bc:	b29b      	uxth	r3, r3
 800c4be:	1ad3      	subs	r3, r2, r3
 800c4c0:	b298      	uxth	r0, r3
 800c4c2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800c4c6:	2204      	movs	r2, #4
 800c4c8:	2100      	movs	r1, #0
 800c4ca:	f7f5 fb5b 	bl	8001b84 <BSP_LCD_FillRect>
	for(uint8_t i=0; i<=BOARD_SIZE; i++)
 800c4ce:	79bb      	ldrb	r3, [r7, #6]
 800c4d0:	3301      	adds	r3, #1
 800c4d2:	71bb      	strb	r3, [r7, #6]
 800c4d4:	79bb      	ldrb	r3, [r7, #6]
 800c4d6:	2b08      	cmp	r3, #8
 800c4d8:	d9cf      	bls.n	800c47a <drawGrid+0x2a>
	}
}
 800c4da:	bf00      	nop
 800c4dc:	3708      	adds	r7, #8
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}
 800c4e2:	bf00      	nop
 800c4e4:	ff4c9572 	.word	0xff4c9572

0800c4e8 <gameTitle>:

void gameTitle(void)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	af00      	add	r7, sp, #0
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800c4ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c4f0:	f7f5 f83a 	bl	8001568 <BSP_LCD_Clear>

  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800c4f4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800c4f8:	f7f4 ffd4 	bl	80014a4 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(480, 0, 320, 50);
 800c4fc:	2332      	movs	r3, #50	; 0x32
 800c4fe:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800c502:	2100      	movs	r1, #0
 800c504:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 800c508:	f7f5 fb3c 	bl	8001b84 <BSP_LCD_FillRect>

  BSP_LCD_SetFont(&Font24);
 800c50c:	4809      	ldr	r0, [pc, #36]	; (800c534 <gameTitle+0x4c>)
 800c50e:	f7f4 fffb 	bl	8001508 <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800c512:	f04f 30ff 	mov.w	r0, #4294967295
 800c516:	f7f4 ffc5 	bl	80014a4 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 800c51a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800c51e:	f7f4 ffd9 	bl	80014d4 <BSP_LCD_SetBackColor>
  BSP_LCD_DisplayStringAt(100, 10, (uint8_t *)"REVERSI", RIGHT_MODE); //función quiere uint8_t
 800c522:	2302      	movs	r3, #2
 800c524:	4a04      	ldr	r2, [pc, #16]	; (800c538 <gameTitle+0x50>)
 800c526:	210a      	movs	r1, #10
 800c528:	2064      	movs	r0, #100	; 0x64
 800c52a:	f7f5 f889 	bl	8001640 <BSP_LCD_DisplayStringAt>
}
 800c52e:	bf00      	nop
 800c530:	bd80      	pop	{r7, pc}
 800c532:	bf00      	nop
 800c534:	20000028 	.word	0x20000028
 800c538:	0800fad4 	.word	0x0800fad4

0800c53c <init_game>:

void init_game(char *p1Name, char*p2Name)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b084      	sub	sp, #16
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
 800c544:	6039      	str	r1, [r7, #0]
	gameTitle();
 800c546:	f7ff ffcf 	bl	800c4e8 <gameTitle>
	drawGrid();
 800c54a:	f7ff ff81 	bl	800c450 <drawGrid>

    // Clear the board
    for(uint8_t i=0; i<BOARD_SIZE; i++)
 800c54e:	2300      	movs	r3, #0
 800c550:	73fb      	strb	r3, [r7, #15]
 800c552:	e013      	b.n	800c57c <init_game+0x40>
    {
        for(uint8_t j=0; j<BOARD_SIZE; j++)
 800c554:	2300      	movs	r3, #0
 800c556:	73bb      	strb	r3, [r7, #14]
 800c558:	e00a      	b.n	800c570 <init_game+0x34>
        {
             mat[i][j] = 0;
 800c55a:	7bfa      	ldrb	r2, [r7, #15]
 800c55c:	7bbb      	ldrb	r3, [r7, #14]
 800c55e:	4915      	ldr	r1, [pc, #84]	; (800c5b4 <init_game+0x78>)
 800c560:	00d2      	lsls	r2, r2, #3
 800c562:	440a      	add	r2, r1
 800c564:	4413      	add	r3, r2
 800c566:	2200      	movs	r2, #0
 800c568:	701a      	strb	r2, [r3, #0]
        for(uint8_t j=0; j<BOARD_SIZE; j++)
 800c56a:	7bbb      	ldrb	r3, [r7, #14]
 800c56c:	3301      	adds	r3, #1
 800c56e:	73bb      	strb	r3, [r7, #14]
 800c570:	7bbb      	ldrb	r3, [r7, #14]
 800c572:	2b07      	cmp	r3, #7
 800c574:	d9f1      	bls.n	800c55a <init_game+0x1e>
    for(uint8_t i=0; i<BOARD_SIZE; i++)
 800c576:	7bfb      	ldrb	r3, [r7, #15]
 800c578:	3301      	adds	r3, #1
 800c57a:	73fb      	strb	r3, [r7, #15]
 800c57c:	7bfb      	ldrb	r3, [r7, #15]
 800c57e:	2b07      	cmp	r3, #7
 800c580:	d9e8      	bls.n	800c554 <init_game+0x18>
        }
    }

    mat[3][3] = 1;
 800c582:	4b0c      	ldr	r3, [pc, #48]	; (800c5b4 <init_game+0x78>)
 800c584:	2201      	movs	r2, #1
 800c586:	76da      	strb	r2, [r3, #27]
    mat[4][4] = 1;
 800c588:	4b0a      	ldr	r3, [pc, #40]	; (800c5b4 <init_game+0x78>)
 800c58a:	2201      	movs	r2, #1
 800c58c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    mat[4][3] = 2;
 800c590:	4b08      	ldr	r3, [pc, #32]	; (800c5b4 <init_game+0x78>)
 800c592:	2202      	movs	r2, #2
 800c594:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    mat[3][4] = 2;
 800c598:	4b06      	ldr	r3, [pc, #24]	; (800c5b4 <init_game+0x78>)
 800c59a:	2202      	movs	r2, #2
 800c59c:	771a      	strb	r2, [r3, #28]

	printInfo(p1Name, p2Name);
 800c59e:	6839      	ldr	r1, [r7, #0]
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f000 f867 	bl	800c674 <printInfo>
    printBoard();
 800c5a6:	f000 f807 	bl	800c5b8 <printBoard>
}
 800c5aa:	bf00      	nop
 800c5ac:	3710      	adds	r7, #16
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd80      	pop	{r7, pc}
 800c5b2:	bf00      	nop
 800c5b4:	200008e8 	.word	0x200008e8

0800c5b8 <printBoard>:

//imprime el tablero
void printBoard(void)
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b082      	sub	sp, #8
 800c5bc:	af00      	add	r7, sp, #0
	uint8_t i, j;
	uint8_t value;

    for (i = 0; i < BOARD_SIZE; i++)
 800c5be:	2300      	movs	r3, #0
 800c5c0:	71fb      	strb	r3, [r7, #7]
 800c5c2:	e04e      	b.n	800c662 <printBoard+0xaa>
    {
        for (j = 0; j < BOARD_SIZE; j++)
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	71bb      	strb	r3, [r7, #6]
 800c5c8:	e045      	b.n	800c656 <printBoard+0x9e>
        {
            value = mat[i][j]; //para leer que está almacenado en la matriz
 800c5ca:	79fa      	ldrb	r2, [r7, #7]
 800c5cc:	79bb      	ldrb	r3, [r7, #6]
 800c5ce:	4928      	ldr	r1, [pc, #160]	; (800c670 <printBoard+0xb8>)
 800c5d0:	00d2      	lsls	r2, r2, #3
 800c5d2:	440a      	add	r2, r1
 800c5d4:	4413      	add	r3, r2
 800c5d6:	781b      	ldrb	r3, [r3, #0]
 800c5d8:	717b      	strb	r3, [r7, #5]

            if (value == 1)
 800c5da:	797b      	ldrb	r3, [r7, #5]
 800c5dc:	2b01      	cmp	r3, #1
 800c5de:	d11a      	bne.n	800c616 <printBoard+0x5e>
            {
            	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800c5e0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800c5e4:	f7f4 ff5e 	bl	80014a4 <BSP_LCD_SetTextColor>
            	BSP_LCD_FillCircle((j*SQUARE_SIZE)+HALF_SQUARE_SIZE, (i*SQUARE_SIZE)+HALF_SQUARE_SIZE, PIECE_RADIUS);
 800c5e8:	79bb      	ldrb	r3, [r7, #6]
 800c5ea:	b29b      	uxth	r3, r3
 800c5ec:	461a      	mov	r2, r3
 800c5ee:	0112      	lsls	r2, r2, #4
 800c5f0:	1ad3      	subs	r3, r2, r3
 800c5f2:	009b      	lsls	r3, r3, #2
 800c5f4:	b29b      	uxth	r3, r3
 800c5f6:	331e      	adds	r3, #30
 800c5f8:	b298      	uxth	r0, r3
 800c5fa:	79fb      	ldrb	r3, [r7, #7]
 800c5fc:	b29b      	uxth	r3, r3
 800c5fe:	461a      	mov	r2, r3
 800c600:	0112      	lsls	r2, r2, #4
 800c602:	1ad3      	subs	r3, r2, r3
 800c604:	009b      	lsls	r3, r3, #2
 800c606:	b29b      	uxth	r3, r3
 800c608:	331e      	adds	r3, #30
 800c60a:	b29b      	uxth	r3, r3
 800c60c:	2219      	movs	r2, #25
 800c60e:	4619      	mov	r1, r3
 800c610:	f7f5 fb12 	bl	8001c38 <BSP_LCD_FillCircle>
 800c614:	e01c      	b.n	800c650 <printBoard+0x98>
            }
            else if (value == 2)
 800c616:	797b      	ldrb	r3, [r7, #5]
 800c618:	2b02      	cmp	r3, #2
 800c61a:	d119      	bne.n	800c650 <printBoard+0x98>
            {
        		 BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800c61c:	f04f 30ff 	mov.w	r0, #4294967295
 800c620:	f7f4 ff40 	bl	80014a4 <BSP_LCD_SetTextColor>
             	 BSP_LCD_FillCircle((j*SQUARE_SIZE)+HALF_SQUARE_SIZE, (i*SQUARE_SIZE)+HALF_SQUARE_SIZE, PIECE_RADIUS);
 800c624:	79bb      	ldrb	r3, [r7, #6]
 800c626:	b29b      	uxth	r3, r3
 800c628:	461a      	mov	r2, r3
 800c62a:	0112      	lsls	r2, r2, #4
 800c62c:	1ad3      	subs	r3, r2, r3
 800c62e:	009b      	lsls	r3, r3, #2
 800c630:	b29b      	uxth	r3, r3
 800c632:	331e      	adds	r3, #30
 800c634:	b298      	uxth	r0, r3
 800c636:	79fb      	ldrb	r3, [r7, #7]
 800c638:	b29b      	uxth	r3, r3
 800c63a:	461a      	mov	r2, r3
 800c63c:	0112      	lsls	r2, r2, #4
 800c63e:	1ad3      	subs	r3, r2, r3
 800c640:	009b      	lsls	r3, r3, #2
 800c642:	b29b      	uxth	r3, r3
 800c644:	331e      	adds	r3, #30
 800c646:	b29b      	uxth	r3, r3
 800c648:	2219      	movs	r2, #25
 800c64a:	4619      	mov	r1, r3
 800c64c:	f7f5 faf4 	bl	8001c38 <BSP_LCD_FillCircle>
        for (j = 0; j < BOARD_SIZE; j++)
 800c650:	79bb      	ldrb	r3, [r7, #6]
 800c652:	3301      	adds	r3, #1
 800c654:	71bb      	strb	r3, [r7, #6]
 800c656:	79bb      	ldrb	r3, [r7, #6]
 800c658:	2b07      	cmp	r3, #7
 800c65a:	d9b6      	bls.n	800c5ca <printBoard+0x12>
    for (i = 0; i < BOARD_SIZE; i++)
 800c65c:	79fb      	ldrb	r3, [r7, #7]
 800c65e:	3301      	adds	r3, #1
 800c660:	71fb      	strb	r3, [r7, #7]
 800c662:	79fb      	ldrb	r3, [r7, #7]
 800c664:	2b07      	cmp	r3, #7
 800c666:	d9ad      	bls.n	800c5c4 <printBoard+0xc>
            }
        }
    }
}
 800c668:	bf00      	nop
 800c66a:	3708      	adds	r7, #8
 800c66c:	46bd      	mov	sp, r7
 800c66e:	bd80      	pop	{r7, pc}
 800c670:	200008e8 	.word	0x200008e8

0800c674 <printInfo>:

void printInfo(char * p1Name, char * p2Name)
{
 800c674:	b5b0      	push	{r4, r5, r7, lr}
 800c676:	b08e      	sub	sp, #56	; 0x38
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
 800c67c:	6039      	str	r1, [r7, #0]
	uint8_t player1Counter, player2Counter;
	char pieces[20];
	char information[20];

    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800c67e:	f04f 30ff 	mov.w	r0, #4294967295
 800c682:	f7f4 ff0f 	bl	80014a4 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(485, LINE(5), BSP_LCD_GetXSize()-485, 350);
 800c686:	f7f4 ff59 	bl	800153c <BSP_LCD_GetFont>
 800c68a:	4603      	mov	r3, r0
 800c68c:	88db      	ldrh	r3, [r3, #6]
 800c68e:	461a      	mov	r2, r3
 800c690:	0092      	lsls	r2, r2, #2
 800c692:	4413      	add	r3, r2
 800c694:	b29c      	uxth	r4, r3
 800c696:	f7f4 fe8d 	bl	80013b4 <BSP_LCD_GetXSize>
 800c69a:	4603      	mov	r3, r0
 800c69c:	b29b      	uxth	r3, r3
 800c69e:	f2a3 13e5 	subw	r3, r3, #485	; 0x1e5
 800c6a2:	b29a      	uxth	r2, r3
 800c6a4:	f44f 73af 	mov.w	r3, #350	; 0x15e
 800c6a8:	4621      	mov	r1, r4
 800c6aa:	f240 10e5 	movw	r0, #485	; 0x1e5
 800c6ae:	f7f5 fa69 	bl	8001b84 <BSP_LCD_FillRect>

    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800c6b2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800c6b6:	f7f4 fef5 	bl	80014a4 <BSP_LCD_SetTextColor>
    BSP_LCD_DrawHLine(480, LINE(5), 420);
 800c6ba:	f7f4 ff3f 	bl	800153c <BSP_LCD_GetFont>
 800c6be:	4603      	mov	r3, r0
 800c6c0:	88db      	ldrh	r3, [r3, #6]
 800c6c2:	461a      	mov	r2, r3
 800c6c4:	0092      	lsls	r2, r2, #2
 800c6c6:	4413      	add	r3, r2
 800c6c8:	b29b      	uxth	r3, r3
 800c6ca:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800c6ce:	4619      	mov	r1, r3
 800c6d0:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 800c6d4:	f7f5 f878 	bl	80017c8 <BSP_LCD_DrawHLine>

    countPieces(&player1Counter, &player2Counter);
 800c6d8:	f107 0236 	add.w	r2, r7, #54	; 0x36
 800c6dc:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800c6e0:	4611      	mov	r1, r2
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	f000 f852 	bl	800c78c <countPieces>

	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800c6e8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800c6ec:	f7f4 feda 	bl	80014a4 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800c6f0:	f04f 30ff 	mov.w	r0, #4294967295
 800c6f4:	f7f4 feee 	bl	80014d4 <BSP_LCD_SetBackColor>

	sprintf(information, "GAME INFORMATION");
 800c6f8:	f107 030c 	add.w	r3, r7, #12
 800c6fc:	4a21      	ldr	r2, [pc, #132]	; (800c784 <printInfo+0x110>)
 800c6fe:	461c      	mov	r4, r3
 800c700:	4615      	mov	r5, r2
 800c702:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c704:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c706:	682b      	ldr	r3, [r5, #0]
 800c708:	7023      	strb	r3, [r4, #0]
	BSP_LCD_DisplayStringAt(20, LINE(6), (uint8_t*) information, RIGHT_MODE);
 800c70a:	f7f4 ff17 	bl	800153c <BSP_LCD_GetFont>
 800c70e:	4603      	mov	r3, r0
 800c710:	88db      	ldrh	r3, [r3, #6]
 800c712:	461a      	mov	r2, r3
 800c714:	0052      	lsls	r2, r2, #1
 800c716:	4413      	add	r3, r2
 800c718:	005b      	lsls	r3, r3, #1
 800c71a:	b299      	uxth	r1, r3
 800c71c:	f107 020c 	add.w	r2, r7, #12
 800c720:	2302      	movs	r3, #2
 800c722:	2014      	movs	r0, #20
 800c724:	f7f4 ff8c 	bl	8001640 <BSP_LCD_DisplayStringAt>

	sprintf(pieces, "Pieces %s=%.2d", p1Name, player1Counter);
 800c728:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c72c:	f107 0020 	add.w	r0, r7, #32
 800c730:	687a      	ldr	r2, [r7, #4]
 800c732:	4915      	ldr	r1, [pc, #84]	; (800c788 <printInfo+0x114>)
 800c734:	f002 fd36 	bl	800f1a4 <siprintf>
	BSP_LCD_DisplayStringAt(5, LINE(8), (uint8_t*) pieces, RIGHT_MODE);
 800c738:	f7f4 ff00 	bl	800153c <BSP_LCD_GetFont>
 800c73c:	4603      	mov	r3, r0
 800c73e:	88db      	ldrh	r3, [r3, #6]
 800c740:	00db      	lsls	r3, r3, #3
 800c742:	b299      	uxth	r1, r3
 800c744:	f107 0220 	add.w	r2, r7, #32
 800c748:	2302      	movs	r3, #2
 800c74a:	2005      	movs	r0, #5
 800c74c:	f7f4 ff78 	bl	8001640 <BSP_LCD_DisplayStringAt>

	sprintf(pieces, "Pieces %s=%.2d", p2Name, player2Counter);
 800c750:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800c754:	f107 0020 	add.w	r0, r7, #32
 800c758:	683a      	ldr	r2, [r7, #0]
 800c75a:	490b      	ldr	r1, [pc, #44]	; (800c788 <printInfo+0x114>)
 800c75c:	f002 fd22 	bl	800f1a4 <siprintf>
	BSP_LCD_DisplayStringAt(5, LINE(9), (uint8_t*) pieces, RIGHT_MODE);
 800c760:	f7f4 feec 	bl	800153c <BSP_LCD_GetFont>
 800c764:	4603      	mov	r3, r0
 800c766:	88db      	ldrh	r3, [r3, #6]
 800c768:	461a      	mov	r2, r3
 800c76a:	00d2      	lsls	r2, r2, #3
 800c76c:	4413      	add	r3, r2
 800c76e:	b299      	uxth	r1, r3
 800c770:	f107 0220 	add.w	r2, r7, #32
 800c774:	2302      	movs	r3, #2
 800c776:	2005      	movs	r0, #5
 800c778:	f7f4 ff62 	bl	8001640 <BSP_LCD_DisplayStringAt>

}
 800c77c:	bf00      	nop
 800c77e:	3738      	adds	r7, #56	; 0x38
 800c780:	46bd      	mov	sp, r7
 800c782:	bdb0      	pop	{r4, r5, r7, pc}
 800c784:	0800fadc 	.word	0x0800fadc
 800c788:	0800faf0 	.word	0x0800faf0

0800c78c <countPieces>:

//hace el recuento despues de cada movimiento de las fichas de cada jugador
void countPieces (uint8_t *player1Counter, uint8_t *player2Counter)
{
 800c78c:	b480      	push	{r7}
 800c78e:	b085      	sub	sp, #20
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
 800c794:	6039      	str	r1, [r7, #0]
    *player1Counter=0;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	2200      	movs	r2, #0
 800c79a:	701a      	strb	r2, [r3, #0]
    *player2Counter=0;
 800c79c:	683b      	ldr	r3, [r7, #0]
 800c79e:	2200      	movs	r2, #0
 800c7a0:	701a      	strb	r2, [r3, #0]

    for(uint8_t i=0; i<BOARD_SIZE; i++)
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	73fb      	strb	r3, [r7, #15]
 800c7a6:	e02a      	b.n	800c7fe <countPieces+0x72>
    {
        for(uint8_t j=0; j<BOARD_SIZE; j++)
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	73bb      	strb	r3, [r7, #14]
 800c7ac:	e021      	b.n	800c7f2 <countPieces+0x66>
        {
            if(mat[i][j] == 1)
 800c7ae:	7bfa      	ldrb	r2, [r7, #15]
 800c7b0:	7bbb      	ldrb	r3, [r7, #14]
 800c7b2:	4917      	ldr	r1, [pc, #92]	; (800c810 <countPieces+0x84>)
 800c7b4:	00d2      	lsls	r2, r2, #3
 800c7b6:	440a      	add	r2, r1
 800c7b8:	4413      	add	r3, r2
 800c7ba:	781b      	ldrb	r3, [r3, #0]
 800c7bc:	2b01      	cmp	r3, #1
 800c7be:	d106      	bne.n	800c7ce <countPieces+0x42>
            {
                (*player1Counter)++;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	781b      	ldrb	r3, [r3, #0]
 800c7c4:	3301      	adds	r3, #1
 800c7c6:	b2da      	uxtb	r2, r3
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	701a      	strb	r2, [r3, #0]
 800c7cc:	e00e      	b.n	800c7ec <countPieces+0x60>
            }
            else if(mat[i][j] == 2)
 800c7ce:	7bfa      	ldrb	r2, [r7, #15]
 800c7d0:	7bbb      	ldrb	r3, [r7, #14]
 800c7d2:	490f      	ldr	r1, [pc, #60]	; (800c810 <countPieces+0x84>)
 800c7d4:	00d2      	lsls	r2, r2, #3
 800c7d6:	440a      	add	r2, r1
 800c7d8:	4413      	add	r3, r2
 800c7da:	781b      	ldrb	r3, [r3, #0]
 800c7dc:	2b02      	cmp	r3, #2
 800c7de:	d105      	bne.n	800c7ec <countPieces+0x60>
            {
                (*player2Counter)++;
 800c7e0:	683b      	ldr	r3, [r7, #0]
 800c7e2:	781b      	ldrb	r3, [r3, #0]
 800c7e4:	3301      	adds	r3, #1
 800c7e6:	b2da      	uxtb	r2, r3
 800c7e8:	683b      	ldr	r3, [r7, #0]
 800c7ea:	701a      	strb	r2, [r3, #0]
        for(uint8_t j=0; j<BOARD_SIZE; j++)
 800c7ec:	7bbb      	ldrb	r3, [r7, #14]
 800c7ee:	3301      	adds	r3, #1
 800c7f0:	73bb      	strb	r3, [r7, #14]
 800c7f2:	7bbb      	ldrb	r3, [r7, #14]
 800c7f4:	2b07      	cmp	r3, #7
 800c7f6:	d9da      	bls.n	800c7ae <countPieces+0x22>
    for(uint8_t i=0; i<BOARD_SIZE; i++)
 800c7f8:	7bfb      	ldrb	r3, [r7, #15]
 800c7fa:	3301      	adds	r3, #1
 800c7fc:	73fb      	strb	r3, [r7, #15]
 800c7fe:	7bfb      	ldrb	r3, [r7, #15]
 800c800:	2b07      	cmp	r3, #7
 800c802:	d9d1      	bls.n	800c7a8 <countPieces+0x1c>
            }
        }
    }
}
 800c804:	bf00      	nop
 800c806:	3714      	adds	r7, #20
 800c808:	46bd      	mov	sp, r7
 800c80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80e:	4770      	bx	lr
 800c810:	200008e8 	.word	0x200008e8

0800c814 <flip>:

//cambia la pieza del jugador opuesto
//asumese que i e j ya son contados desde 0 hasta 7 en lugar de 1 a 8
void flip(uint8_t player, uint8_t i, uint8_t j)
{
 800c814:	b480      	push	{r7}
 800c816:	b089      	sub	sp, #36	; 0x24
 800c818:	af00      	add	r7, sp, #0
 800c81a:	4603      	mov	r3, r0
 800c81c:	71fb      	strb	r3, [r7, #7]
 800c81e:	460b      	mov	r3, r1
 800c820:	71bb      	strb	r3, [r7, #6]
 800c822:	4613      	mov	r3, r2
 800c824:	717b      	strb	r3, [r7, #5]
    uint8_t oppositePlayer;

    if(player==1)
 800c826:	79fb      	ldrb	r3, [r7, #7]
 800c828:	2b01      	cmp	r3, #1
 800c82a:	d102      	bne.n	800c832 <flip+0x1e>
    {
        oppositePlayer=2;
 800c82c:	2302      	movs	r3, #2
 800c82e:	77fb      	strb	r3, [r7, #31]
 800c830:	e001      	b.n	800c836 <flip+0x22>
    }
    else
    {
        oppositePlayer=1;
 800c832:	2301      	movs	r3, #1
 800c834:	77fb      	strb	r3, [r7, #31]
     *  L (i,j) R
     * BL   B   BR
     */

    // top left
    if(i > 0 && j > 0)
 800c836:	79bb      	ldrb	r3, [r7, #6]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d05b      	beq.n	800c8f4 <flip+0xe0>
 800c83c:	797b      	ldrb	r3, [r7, #5]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d058      	beq.n	800c8f4 <flip+0xe0>
    {
        if(mat[i-1][j-1] == oppositePlayer)
 800c842:	79bb      	ldrb	r3, [r7, #6]
 800c844:	1e5a      	subs	r2, r3, #1
 800c846:	797b      	ldrb	r3, [r7, #5]
 800c848:	3b01      	subs	r3, #1
 800c84a:	49b0      	ldr	r1, [pc, #704]	; (800cb0c <flip+0x2f8>)
 800c84c:	00d2      	lsls	r2, r2, #3
 800c84e:	440a      	add	r2, r1
 800c850:	4413      	add	r3, r2
 800c852:	781b      	ldrb	r3, [r3, #0]
 800c854:	7ffa      	ldrb	r2, [r7, #31]
 800c856:	429a      	cmp	r2, r3
 800c858:	d14c      	bne.n	800c8f4 <flip+0xe0>
        {
            // posicao adjacent
        	int8_t startI = i - 1;
 800c85a:	79bb      	ldrb	r3, [r7, #6]
 800c85c:	3b01      	subs	r3, #1
 800c85e:	b2db      	uxtb	r3, r3
 800c860:	77bb      	strb	r3, [r7, #30]
            int8_t startJ = j - 1;
 800c862:	797b      	ldrb	r3, [r7, #5]
 800c864:	3b01      	subs	r3, #1
 800c866:	b2db      	uxtb	r3, r3
 800c868:	777b      	strb	r3, [r7, #29]

            while (startI >= 0 && startJ >= 0)//para no salir fuera de la raiz
 800c86a:	e039      	b.n	800c8e0 <flip+0xcc>
            {
                if(mat [startI][startJ]==player)
 800c86c:	f997 201e 	ldrsb.w	r2, [r7, #30]
 800c870:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800c874:	49a5      	ldr	r1, [pc, #660]	; (800cb0c <flip+0x2f8>)
 800c876:	00d2      	lsls	r2, r2, #3
 800c878:	440a      	add	r2, r1
 800c87a:	4413      	add	r3, r2
 800c87c:	781b      	ldrb	r3, [r3, #0]
 800c87e:	79fa      	ldrb	r2, [r7, #7]
 800c880:	429a      	cmp	r2, r3
 800c882:	d121      	bne.n	800c8c8 <flip+0xb4>
                {
                    while(startI != i && startJ!=j)
 800c884:	e015      	b.n	800c8b2 <flip+0x9e>
                    {
                        mat[startI][startJ] = player;//Aqui muda las fichas
 800c886:	f997 201e 	ldrsb.w	r2, [r7, #30]
 800c88a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800c88e:	499f      	ldr	r1, [pc, #636]	; (800cb0c <flip+0x2f8>)
 800c890:	00d2      	lsls	r2, r2, #3
 800c892:	440a      	add	r2, r1
 800c894:	4413      	add	r3, r2
 800c896:	79fa      	ldrb	r2, [r7, #7]
 800c898:	701a      	strb	r2, [r3, #0]

                        startI++;
 800c89a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800c89e:	b2db      	uxtb	r3, r3
 800c8a0:	3301      	adds	r3, #1
 800c8a2:	b2db      	uxtb	r3, r3
 800c8a4:	77bb      	strb	r3, [r7, #30]
                        startJ++;
 800c8a6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800c8aa:	b2db      	uxtb	r3, r3
 800c8ac:	3301      	adds	r3, #1
 800c8ae:	b2db      	uxtb	r3, r3
 800c8b0:	777b      	strb	r3, [r7, #29]
                    while(startI != i && startJ!=j)
 800c8b2:	f997 201e 	ldrsb.w	r2, [r7, #30]
 800c8b6:	79bb      	ldrb	r3, [r7, #6]
 800c8b8:	429a      	cmp	r2, r3
 800c8ba:	d01a      	beq.n	800c8f2 <flip+0xde>
 800c8bc:	f997 201d 	ldrsb.w	r2, [r7, #29]
 800c8c0:	797b      	ldrb	r3, [r7, #5]
 800c8c2:	429a      	cmp	r2, r3
 800c8c4:	d1df      	bne.n	800c886 <flip+0x72>
                    }
                    break; // sale del while porque ya sabemos que esta posicion es valida
 800c8c6:	e014      	b.n	800c8f2 <flip+0xde>
                }

                startI--;
 800c8c8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800c8cc:	b2db      	uxtb	r3, r3
 800c8ce:	3b01      	subs	r3, #1
 800c8d0:	b2db      	uxtb	r3, r3
 800c8d2:	77bb      	strb	r3, [r7, #30]
                startJ--;
 800c8d4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800c8d8:	b2db      	uxtb	r3, r3
 800c8da:	3b01      	subs	r3, #1
 800c8dc:	b2db      	uxtb	r3, r3
 800c8de:	777b      	strb	r3, [r7, #29]
            while (startI >= 0 && startJ >= 0)//para no salir fuera de la raiz
 800c8e0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	db05      	blt.n	800c8f4 <flip+0xe0>
 800c8e8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	dabd      	bge.n	800c86c <flip+0x58>
 800c8f0:	e000      	b.n	800c8f4 <flip+0xe0>
                    break; // sale del while porque ya sabemos que esta posicion es valida
 800c8f2:	bf00      	nop
            }
        }
    }

    // top
    if(i>0)
 800c8f4:	79bb      	ldrb	r3, [r7, #6]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d03e      	beq.n	800c978 <flip+0x164>
    {
        if(mat[i-1][j] == oppositePlayer)
 800c8fa:	79bb      	ldrb	r3, [r7, #6]
 800c8fc:	1e5a      	subs	r2, r3, #1
 800c8fe:	797b      	ldrb	r3, [r7, #5]
 800c900:	4982      	ldr	r1, [pc, #520]	; (800cb0c <flip+0x2f8>)
 800c902:	00d2      	lsls	r2, r2, #3
 800c904:	440a      	add	r2, r1
 800c906:	4413      	add	r3, r2
 800c908:	781b      	ldrb	r3, [r3, #0]
 800c90a:	7ffa      	ldrb	r2, [r7, #31]
 800c90c:	429a      	cmp	r2, r3
 800c90e:	d133      	bne.n	800c978 <flip+0x164>
        {
        	int8_t startI = i - 1;
 800c910:	79bb      	ldrb	r3, [r7, #6]
 800c912:	3b01      	subs	r3, #1
 800c914:	b2db      	uxtb	r3, r3
 800c916:	773b      	strb	r3, [r7, #28]
            int8_t startJ = j;
 800c918:	797b      	ldrb	r3, [r7, #5]
 800c91a:	74bb      	strb	r3, [r7, #18]

            while (startI >= 0)
 800c91c:	e028      	b.n	800c970 <flip+0x15c>
            {
                if(mat [startI][startJ]==player)
 800c91e:	f997 201c 	ldrsb.w	r2, [r7, #28]
 800c922:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800c926:	4979      	ldr	r1, [pc, #484]	; (800cb0c <flip+0x2f8>)
 800c928:	00d2      	lsls	r2, r2, #3
 800c92a:	440a      	add	r2, r1
 800c92c:	4413      	add	r3, r2
 800c92e:	781b      	ldrb	r3, [r3, #0]
 800c930:	79fa      	ldrb	r2, [r7, #7]
 800c932:	429a      	cmp	r2, r3
 800c934:	d116      	bne.n	800c964 <flip+0x150>
                {
                    while(startI != i)
 800c936:	e00f      	b.n	800c958 <flip+0x144>
                    {
                        mat[startI][startJ] = player;
 800c938:	f997 201c 	ldrsb.w	r2, [r7, #28]
 800c93c:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800c940:	4972      	ldr	r1, [pc, #456]	; (800cb0c <flip+0x2f8>)
 800c942:	00d2      	lsls	r2, r2, #3
 800c944:	440a      	add	r2, r1
 800c946:	4413      	add	r3, r2
 800c948:	79fa      	ldrb	r2, [r7, #7]
 800c94a:	701a      	strb	r2, [r3, #0]

                        startI++;
 800c94c:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800c950:	b2db      	uxtb	r3, r3
 800c952:	3301      	adds	r3, #1
 800c954:	b2db      	uxtb	r3, r3
 800c956:	773b      	strb	r3, [r7, #28]
                    while(startI != i)
 800c958:	f997 201c 	ldrsb.w	r2, [r7, #28]
 800c95c:	79bb      	ldrb	r3, [r7, #6]
 800c95e:	429a      	cmp	r2, r3
 800c960:	d1ea      	bne.n	800c938 <flip+0x124>
                    }
                     break; // sale del while porque ya sabemos que esta posicion es valida
 800c962:	e009      	b.n	800c978 <flip+0x164>
                }
                startI--;
 800c964:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800c968:	b2db      	uxtb	r3, r3
 800c96a:	3b01      	subs	r3, #1
 800c96c:	b2db      	uxtb	r3, r3
 800c96e:	773b      	strb	r3, [r7, #28]
            while (startI >= 0)
 800c970:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800c974:	2b00      	cmp	r3, #0
 800c976:	dad2      	bge.n	800c91e <flip+0x10a>
            }
        }
    }

    // top right
    if(i > 0 && j <7)
 800c978:	79bb      	ldrb	r3, [r7, #6]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d05b      	beq.n	800ca36 <flip+0x222>
 800c97e:	797b      	ldrb	r3, [r7, #5]
 800c980:	2b06      	cmp	r3, #6
 800c982:	d858      	bhi.n	800ca36 <flip+0x222>
    {
        if(mat[i-1][j+1] == oppositePlayer)
 800c984:	79bb      	ldrb	r3, [r7, #6]
 800c986:	1e5a      	subs	r2, r3, #1
 800c988:	797b      	ldrb	r3, [r7, #5]
 800c98a:	3301      	adds	r3, #1
 800c98c:	495f      	ldr	r1, [pc, #380]	; (800cb0c <flip+0x2f8>)
 800c98e:	00d2      	lsls	r2, r2, #3
 800c990:	440a      	add	r2, r1
 800c992:	4413      	add	r3, r2
 800c994:	781b      	ldrb	r3, [r3, #0]
 800c996:	7ffa      	ldrb	r2, [r7, #31]
 800c998:	429a      	cmp	r2, r3
 800c99a:	d14c      	bne.n	800ca36 <flip+0x222>
        {
        	int8_t startI = i - 1;
 800c99c:	79bb      	ldrb	r3, [r7, #6]
 800c99e:	3b01      	subs	r3, #1
 800c9a0:	b2db      	uxtb	r3, r3
 800c9a2:	76fb      	strb	r3, [r7, #27]
            int8_t startJ = j + 1;
 800c9a4:	797b      	ldrb	r3, [r7, #5]
 800c9a6:	3301      	adds	r3, #1
 800c9a8:	b2db      	uxtb	r3, r3
 800c9aa:	76bb      	strb	r3, [r7, #26]

            while (startI >= 0 && startJ <= 7)
 800c9ac:	e039      	b.n	800ca22 <flip+0x20e>
            {
                if(mat [startI][startJ]==player)
 800c9ae:	f997 201b 	ldrsb.w	r2, [r7, #27]
 800c9b2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c9b6:	4955      	ldr	r1, [pc, #340]	; (800cb0c <flip+0x2f8>)
 800c9b8:	00d2      	lsls	r2, r2, #3
 800c9ba:	440a      	add	r2, r1
 800c9bc:	4413      	add	r3, r2
 800c9be:	781b      	ldrb	r3, [r3, #0]
 800c9c0:	79fa      	ldrb	r2, [r7, #7]
 800c9c2:	429a      	cmp	r2, r3
 800c9c4:	d121      	bne.n	800ca0a <flip+0x1f6>
                {
                    while(startI != i && startJ!=j)
 800c9c6:	e015      	b.n	800c9f4 <flip+0x1e0>
                    {
                        mat[startI][startJ] = player;
 800c9c8:	f997 201b 	ldrsb.w	r2, [r7, #27]
 800c9cc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c9d0:	494e      	ldr	r1, [pc, #312]	; (800cb0c <flip+0x2f8>)
 800c9d2:	00d2      	lsls	r2, r2, #3
 800c9d4:	440a      	add	r2, r1
 800c9d6:	4413      	add	r3, r2
 800c9d8:	79fa      	ldrb	r2, [r7, #7]
 800c9da:	701a      	strb	r2, [r3, #0]

                        startI++;
 800c9dc:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c9e0:	b2db      	uxtb	r3, r3
 800c9e2:	3301      	adds	r3, #1
 800c9e4:	b2db      	uxtb	r3, r3
 800c9e6:	76fb      	strb	r3, [r7, #27]
                        startJ--;
 800c9e8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c9ec:	b2db      	uxtb	r3, r3
 800c9ee:	3b01      	subs	r3, #1
 800c9f0:	b2db      	uxtb	r3, r3
 800c9f2:	76bb      	strb	r3, [r7, #26]
                    while(startI != i && startJ!=j)
 800c9f4:	f997 201b 	ldrsb.w	r2, [r7, #27]
 800c9f8:	79bb      	ldrb	r3, [r7, #6]
 800c9fa:	429a      	cmp	r2, r3
 800c9fc:	d01a      	beq.n	800ca34 <flip+0x220>
 800c9fe:	f997 201a 	ldrsb.w	r2, [r7, #26]
 800ca02:	797b      	ldrb	r3, [r7, #5]
 800ca04:	429a      	cmp	r2, r3
 800ca06:	d1df      	bne.n	800c9c8 <flip+0x1b4>
                    }
                     break; // sale del while porque ya sabemos que esta posicion es valida
 800ca08:	e014      	b.n	800ca34 <flip+0x220>
                }
                startI--;
 800ca0a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ca0e:	b2db      	uxtb	r3, r3
 800ca10:	3b01      	subs	r3, #1
 800ca12:	b2db      	uxtb	r3, r3
 800ca14:	76fb      	strb	r3, [r7, #27]
                startJ++;
 800ca16:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ca1a:	b2db      	uxtb	r3, r3
 800ca1c:	3301      	adds	r3, #1
 800ca1e:	b2db      	uxtb	r3, r3
 800ca20:	76bb      	strb	r3, [r7, #26]
            while (startI >= 0 && startJ <= 7)
 800ca22:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	db05      	blt.n	800ca36 <flip+0x222>
 800ca2a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ca2e:	2b07      	cmp	r3, #7
 800ca30:	ddbd      	ble.n	800c9ae <flip+0x19a>
 800ca32:	e000      	b.n	800ca36 <flip+0x222>
                     break; // sale del while porque ya sabemos que esta posicion es valida
 800ca34:	bf00      	nop
            }
        }
    }

    // right
    if(j < 7)
 800ca36:	797b      	ldrb	r3, [r7, #5]
 800ca38:	2b06      	cmp	r3, #6
 800ca3a:	d83e      	bhi.n	800caba <flip+0x2a6>
    {
        if(mat[i][j+1] == oppositePlayer)
 800ca3c:	79ba      	ldrb	r2, [r7, #6]
 800ca3e:	797b      	ldrb	r3, [r7, #5]
 800ca40:	3301      	adds	r3, #1
 800ca42:	4932      	ldr	r1, [pc, #200]	; (800cb0c <flip+0x2f8>)
 800ca44:	00d2      	lsls	r2, r2, #3
 800ca46:	440a      	add	r2, r1
 800ca48:	4413      	add	r3, r2
 800ca4a:	781b      	ldrb	r3, [r3, #0]
 800ca4c:	7ffa      	ldrb	r2, [r7, #31]
 800ca4e:	429a      	cmp	r2, r3
 800ca50:	d133      	bne.n	800caba <flip+0x2a6>
        {
        	int8_t startI = i;
 800ca52:	79bb      	ldrb	r3, [r7, #6]
 800ca54:	747b      	strb	r3, [r7, #17]
            int8_t startJ = j + 1;
 800ca56:	797b      	ldrb	r3, [r7, #5]
 800ca58:	3301      	adds	r3, #1
 800ca5a:	b2db      	uxtb	r3, r3
 800ca5c:	767b      	strb	r3, [r7, #25]

            while (startJ <= 7)
 800ca5e:	e028      	b.n	800cab2 <flip+0x29e>
            {
                if(mat [startI][startJ]==player)
 800ca60:	f997 2011 	ldrsb.w	r2, [r7, #17]
 800ca64:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800ca68:	4928      	ldr	r1, [pc, #160]	; (800cb0c <flip+0x2f8>)
 800ca6a:	00d2      	lsls	r2, r2, #3
 800ca6c:	440a      	add	r2, r1
 800ca6e:	4413      	add	r3, r2
 800ca70:	781b      	ldrb	r3, [r3, #0]
 800ca72:	79fa      	ldrb	r2, [r7, #7]
 800ca74:	429a      	cmp	r2, r3
 800ca76:	d116      	bne.n	800caa6 <flip+0x292>
                {
                    while(startJ!=j)
 800ca78:	e00f      	b.n	800ca9a <flip+0x286>
                    {
                        mat[startI][startJ] = player;
 800ca7a:	f997 2011 	ldrsb.w	r2, [r7, #17]
 800ca7e:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800ca82:	4922      	ldr	r1, [pc, #136]	; (800cb0c <flip+0x2f8>)
 800ca84:	00d2      	lsls	r2, r2, #3
 800ca86:	440a      	add	r2, r1
 800ca88:	4413      	add	r3, r2
 800ca8a:	79fa      	ldrb	r2, [r7, #7]
 800ca8c:	701a      	strb	r2, [r3, #0]

                        startJ--;
 800ca8e:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800ca92:	b2db      	uxtb	r3, r3
 800ca94:	3b01      	subs	r3, #1
 800ca96:	b2db      	uxtb	r3, r3
 800ca98:	767b      	strb	r3, [r7, #25]
                    while(startJ!=j)
 800ca9a:	f997 2019 	ldrsb.w	r2, [r7, #25]
 800ca9e:	797b      	ldrb	r3, [r7, #5]
 800caa0:	429a      	cmp	r2, r3
 800caa2:	d1ea      	bne.n	800ca7a <flip+0x266>
                    }
                     break; // sale del while porque ya sabemos que esta posicion es valida
 800caa4:	e009      	b.n	800caba <flip+0x2a6>
                }
                startJ++;
 800caa6:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800caaa:	b2db      	uxtb	r3, r3
 800caac:	3301      	adds	r3, #1
 800caae:	b2db      	uxtb	r3, r3
 800cab0:	767b      	strb	r3, [r7, #25]
            while (startJ <= 7)
 800cab2:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800cab6:	2b07      	cmp	r3, #7
 800cab8:	ddd2      	ble.n	800ca60 <flip+0x24c>
            }
        }
    }

    // bottom right
    if (i < 7 && j < 7)
 800caba:	79bb      	ldrb	r3, [r7, #6]
 800cabc:	2b06      	cmp	r3, #6
 800cabe:	d85e      	bhi.n	800cb7e <flip+0x36a>
 800cac0:	797b      	ldrb	r3, [r7, #5]
 800cac2:	2b06      	cmp	r3, #6
 800cac4:	d85b      	bhi.n	800cb7e <flip+0x36a>
    {
        if(mat[i+1][j+1] == oppositePlayer)
 800cac6:	79bb      	ldrb	r3, [r7, #6]
 800cac8:	1c5a      	adds	r2, r3, #1
 800caca:	797b      	ldrb	r3, [r7, #5]
 800cacc:	3301      	adds	r3, #1
 800cace:	490f      	ldr	r1, [pc, #60]	; (800cb0c <flip+0x2f8>)
 800cad0:	00d2      	lsls	r2, r2, #3
 800cad2:	440a      	add	r2, r1
 800cad4:	4413      	add	r3, r2
 800cad6:	781b      	ldrb	r3, [r3, #0]
 800cad8:	7ffa      	ldrb	r2, [r7, #31]
 800cada:	429a      	cmp	r2, r3
 800cadc:	d14f      	bne.n	800cb7e <flip+0x36a>
        {
        	int8_t startI = i + 1;
 800cade:	79bb      	ldrb	r3, [r7, #6]
 800cae0:	3301      	adds	r3, #1
 800cae2:	b2db      	uxtb	r3, r3
 800cae4:	763b      	strb	r3, [r7, #24]
            int8_t startJ = j + 1;
 800cae6:	797b      	ldrb	r3, [r7, #5]
 800cae8:	3301      	adds	r3, #1
 800caea:	b2db      	uxtb	r3, r3
 800caec:	75fb      	strb	r3, [r7, #23]

            while (startI <= 7 && startJ <= 7)
 800caee:	e03c      	b.n	800cb6a <flip+0x356>
            {
                if(mat [startI][startJ]==player)
 800caf0:	f997 2018 	ldrsb.w	r2, [r7, #24]
 800caf4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800caf8:	4904      	ldr	r1, [pc, #16]	; (800cb0c <flip+0x2f8>)
 800cafa:	00d2      	lsls	r2, r2, #3
 800cafc:	440a      	add	r2, r1
 800cafe:	4413      	add	r3, r2
 800cb00:	781b      	ldrb	r3, [r3, #0]
 800cb02:	79fa      	ldrb	r2, [r7, #7]
 800cb04:	429a      	cmp	r2, r3
 800cb06:	d124      	bne.n	800cb52 <flip+0x33e>
                {
                     while(startI != i && startJ!=j)
 800cb08:	e018      	b.n	800cb3c <flip+0x328>
 800cb0a:	bf00      	nop
 800cb0c:	200008e8 	.word	0x200008e8
                    {
                        mat[startI][startJ] = player;
 800cb10:	f997 2018 	ldrsb.w	r2, [r7, #24]
 800cb14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cb18:	498e      	ldr	r1, [pc, #568]	; (800cd54 <flip+0x540>)
 800cb1a:	00d2      	lsls	r2, r2, #3
 800cb1c:	440a      	add	r2, r1
 800cb1e:	4413      	add	r3, r2
 800cb20:	79fa      	ldrb	r2, [r7, #7]
 800cb22:	701a      	strb	r2, [r3, #0]

                        startI--;
 800cb24:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800cb28:	b2db      	uxtb	r3, r3
 800cb2a:	3b01      	subs	r3, #1
 800cb2c:	b2db      	uxtb	r3, r3
 800cb2e:	763b      	strb	r3, [r7, #24]
                        startJ--;
 800cb30:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cb34:	b2db      	uxtb	r3, r3
 800cb36:	3b01      	subs	r3, #1
 800cb38:	b2db      	uxtb	r3, r3
 800cb3a:	75fb      	strb	r3, [r7, #23]
                     while(startI != i && startJ!=j)
 800cb3c:	f997 2018 	ldrsb.w	r2, [r7, #24]
 800cb40:	79bb      	ldrb	r3, [r7, #6]
 800cb42:	429a      	cmp	r2, r3
 800cb44:	d01a      	beq.n	800cb7c <flip+0x368>
 800cb46:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800cb4a:	797b      	ldrb	r3, [r7, #5]
 800cb4c:	429a      	cmp	r2, r3
 800cb4e:	d1df      	bne.n	800cb10 <flip+0x2fc>
                    }
                     break; // sale del while porque ya sabemos que esta posicion es valida
 800cb50:	e014      	b.n	800cb7c <flip+0x368>
                }
                startI++;
 800cb52:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800cb56:	b2db      	uxtb	r3, r3
 800cb58:	3301      	adds	r3, #1
 800cb5a:	b2db      	uxtb	r3, r3
 800cb5c:	763b      	strb	r3, [r7, #24]
                startJ++;
 800cb5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cb62:	b2db      	uxtb	r3, r3
 800cb64:	3301      	adds	r3, #1
 800cb66:	b2db      	uxtb	r3, r3
 800cb68:	75fb      	strb	r3, [r7, #23]
            while (startI <= 7 && startJ <= 7)
 800cb6a:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800cb6e:	2b07      	cmp	r3, #7
 800cb70:	dc05      	bgt.n	800cb7e <flip+0x36a>
 800cb72:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cb76:	2b07      	cmp	r3, #7
 800cb78:	ddba      	ble.n	800caf0 <flip+0x2dc>
 800cb7a:	e000      	b.n	800cb7e <flip+0x36a>
                     break; // sale del while porque ya sabemos que esta posicion es valida
 800cb7c:	bf00      	nop
            }
        }
    }

    // bottom
    if(i < 7)
 800cb7e:	79bb      	ldrb	r3, [r7, #6]
 800cb80:	2b06      	cmp	r3, #6
 800cb82:	d83e      	bhi.n	800cc02 <flip+0x3ee>
    {
            if(mat[i+1][j] == oppositePlayer)
 800cb84:	79bb      	ldrb	r3, [r7, #6]
 800cb86:	1c5a      	adds	r2, r3, #1
 800cb88:	797b      	ldrb	r3, [r7, #5]
 800cb8a:	4972      	ldr	r1, [pc, #456]	; (800cd54 <flip+0x540>)
 800cb8c:	00d2      	lsls	r2, r2, #3
 800cb8e:	440a      	add	r2, r1
 800cb90:	4413      	add	r3, r2
 800cb92:	781b      	ldrb	r3, [r3, #0]
 800cb94:	7ffa      	ldrb	r2, [r7, #31]
 800cb96:	429a      	cmp	r2, r3
 800cb98:	d133      	bne.n	800cc02 <flip+0x3ee>
            {
            	int8_t startI = i + 1;
 800cb9a:	79bb      	ldrb	r3, [r7, #6]
 800cb9c:	3301      	adds	r3, #1
 800cb9e:	b2db      	uxtb	r3, r3
 800cba0:	75bb      	strb	r3, [r7, #22]
                int8_t startJ = j;
 800cba2:	797b      	ldrb	r3, [r7, #5]
 800cba4:	743b      	strb	r3, [r7, #16]

                while (startI <=7)
 800cba6:	e028      	b.n	800cbfa <flip+0x3e6>
                {
                    if(mat [startI][startJ]==player)
 800cba8:	f997 2016 	ldrsb.w	r2, [r7, #22]
 800cbac:	f997 3010 	ldrsb.w	r3, [r7, #16]
 800cbb0:	4968      	ldr	r1, [pc, #416]	; (800cd54 <flip+0x540>)
 800cbb2:	00d2      	lsls	r2, r2, #3
 800cbb4:	440a      	add	r2, r1
 800cbb6:	4413      	add	r3, r2
 800cbb8:	781b      	ldrb	r3, [r3, #0]
 800cbba:	79fa      	ldrb	r2, [r7, #7]
 800cbbc:	429a      	cmp	r2, r3
 800cbbe:	d116      	bne.n	800cbee <flip+0x3da>
                    {
                        while(startI != i)
 800cbc0:	e00f      	b.n	800cbe2 <flip+0x3ce>
                        {
                            mat[startI][startJ] = player;
 800cbc2:	f997 2016 	ldrsb.w	r2, [r7, #22]
 800cbc6:	f997 3010 	ldrsb.w	r3, [r7, #16]
 800cbca:	4962      	ldr	r1, [pc, #392]	; (800cd54 <flip+0x540>)
 800cbcc:	00d2      	lsls	r2, r2, #3
 800cbce:	440a      	add	r2, r1
 800cbd0:	4413      	add	r3, r2
 800cbd2:	79fa      	ldrb	r2, [r7, #7]
 800cbd4:	701a      	strb	r2, [r3, #0]

                            startI--;
 800cbd6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800cbda:	b2db      	uxtb	r3, r3
 800cbdc:	3b01      	subs	r3, #1
 800cbde:	b2db      	uxtb	r3, r3
 800cbe0:	75bb      	strb	r3, [r7, #22]
                        while(startI != i)
 800cbe2:	f997 2016 	ldrsb.w	r2, [r7, #22]
 800cbe6:	79bb      	ldrb	r3, [r7, #6]
 800cbe8:	429a      	cmp	r2, r3
 800cbea:	d1ea      	bne.n	800cbc2 <flip+0x3ae>
                         }
                         break; // sale del while porque ya sabemos que esta posicion es valida
 800cbec:	e009      	b.n	800cc02 <flip+0x3ee>
                    }
                    startI++;
 800cbee:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800cbf2:	b2db      	uxtb	r3, r3
 800cbf4:	3301      	adds	r3, #1
 800cbf6:	b2db      	uxtb	r3, r3
 800cbf8:	75bb      	strb	r3, [r7, #22]
                while (startI <=7)
 800cbfa:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800cbfe:	2b07      	cmp	r3, #7
 800cc00:	ddd2      	ble.n	800cba8 <flip+0x394>
                }
            }
    }

    // bottom left
    if(i < 7 && j > 0)
 800cc02:	79bb      	ldrb	r3, [r7, #6]
 800cc04:	2b06      	cmp	r3, #6
 800cc06:	d85b      	bhi.n	800ccc0 <flip+0x4ac>
 800cc08:	797b      	ldrb	r3, [r7, #5]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d058      	beq.n	800ccc0 <flip+0x4ac>
    {
        if(mat[i+1][j-1] == oppositePlayer)
 800cc0e:	79bb      	ldrb	r3, [r7, #6]
 800cc10:	1c5a      	adds	r2, r3, #1
 800cc12:	797b      	ldrb	r3, [r7, #5]
 800cc14:	3b01      	subs	r3, #1
 800cc16:	494f      	ldr	r1, [pc, #316]	; (800cd54 <flip+0x540>)
 800cc18:	00d2      	lsls	r2, r2, #3
 800cc1a:	440a      	add	r2, r1
 800cc1c:	4413      	add	r3, r2
 800cc1e:	781b      	ldrb	r3, [r3, #0]
 800cc20:	7ffa      	ldrb	r2, [r7, #31]
 800cc22:	429a      	cmp	r2, r3
 800cc24:	d14c      	bne.n	800ccc0 <flip+0x4ac>
        {
        	int8_t startI = i + 1;
 800cc26:	79bb      	ldrb	r3, [r7, #6]
 800cc28:	3301      	adds	r3, #1
 800cc2a:	b2db      	uxtb	r3, r3
 800cc2c:	757b      	strb	r3, [r7, #21]
            int8_t startJ = j - 1;
 800cc2e:	797b      	ldrb	r3, [r7, #5]
 800cc30:	3b01      	subs	r3, #1
 800cc32:	b2db      	uxtb	r3, r3
 800cc34:	753b      	strb	r3, [r7, #20]

            while (startI <=7  && startJ >= 0)
 800cc36:	e039      	b.n	800ccac <flip+0x498>
            {
                if(mat [startI][startJ]==player)
 800cc38:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800cc3c:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800cc40:	4944      	ldr	r1, [pc, #272]	; (800cd54 <flip+0x540>)
 800cc42:	00d2      	lsls	r2, r2, #3
 800cc44:	440a      	add	r2, r1
 800cc46:	4413      	add	r3, r2
 800cc48:	781b      	ldrb	r3, [r3, #0]
 800cc4a:	79fa      	ldrb	r2, [r7, #7]
 800cc4c:	429a      	cmp	r2, r3
 800cc4e:	d121      	bne.n	800cc94 <flip+0x480>
                {
                     while(startI != i && startJ!=j)
 800cc50:	e015      	b.n	800cc7e <flip+0x46a>
                    {
                        mat[startI][startJ] = player;
 800cc52:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800cc56:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800cc5a:	493e      	ldr	r1, [pc, #248]	; (800cd54 <flip+0x540>)
 800cc5c:	00d2      	lsls	r2, r2, #3
 800cc5e:	440a      	add	r2, r1
 800cc60:	4413      	add	r3, r2
 800cc62:	79fa      	ldrb	r2, [r7, #7]
 800cc64:	701a      	strb	r2, [r3, #0]

                        startI--;
 800cc66:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800cc6a:	b2db      	uxtb	r3, r3
 800cc6c:	3b01      	subs	r3, #1
 800cc6e:	b2db      	uxtb	r3, r3
 800cc70:	757b      	strb	r3, [r7, #21]
                        startJ++;
 800cc72:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800cc76:	b2db      	uxtb	r3, r3
 800cc78:	3301      	adds	r3, #1
 800cc7a:	b2db      	uxtb	r3, r3
 800cc7c:	753b      	strb	r3, [r7, #20]
                     while(startI != i && startJ!=j)
 800cc7e:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800cc82:	79bb      	ldrb	r3, [r7, #6]
 800cc84:	429a      	cmp	r2, r3
 800cc86:	d01a      	beq.n	800ccbe <flip+0x4aa>
 800cc88:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800cc8c:	797b      	ldrb	r3, [r7, #5]
 800cc8e:	429a      	cmp	r2, r3
 800cc90:	d1df      	bne.n	800cc52 <flip+0x43e>
                    }
                     break; // sale del while porque ya sabemos que esta posicion es valida
 800cc92:	e014      	b.n	800ccbe <flip+0x4aa>
                }
                startI++;
 800cc94:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800cc98:	b2db      	uxtb	r3, r3
 800cc9a:	3301      	adds	r3, #1
 800cc9c:	b2db      	uxtb	r3, r3
 800cc9e:	757b      	strb	r3, [r7, #21]
                startJ--;
 800cca0:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800cca4:	b2db      	uxtb	r3, r3
 800cca6:	3b01      	subs	r3, #1
 800cca8:	b2db      	uxtb	r3, r3
 800ccaa:	753b      	strb	r3, [r7, #20]
            while (startI <=7  && startJ >= 0)
 800ccac:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800ccb0:	2b07      	cmp	r3, #7
 800ccb2:	dc05      	bgt.n	800ccc0 <flip+0x4ac>
 800ccb4:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	dabd      	bge.n	800cc38 <flip+0x424>
 800ccbc:	e000      	b.n	800ccc0 <flip+0x4ac>
                     break; // sale del while porque ya sabemos que esta posicion es valida
 800ccbe:	bf00      	nop
        }
    }


    // left
    if(j > 0)
 800ccc0:	797b      	ldrb	r3, [r7, #5]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d03f      	beq.n	800cd46 <flip+0x532>
    {
        if(mat[i][j-1] == oppositePlayer)
 800ccc6:	79ba      	ldrb	r2, [r7, #6]
 800ccc8:	797b      	ldrb	r3, [r7, #5]
 800ccca:	3b01      	subs	r3, #1
 800cccc:	4921      	ldr	r1, [pc, #132]	; (800cd54 <flip+0x540>)
 800ccce:	00d2      	lsls	r2, r2, #3
 800ccd0:	440a      	add	r2, r1
 800ccd2:	4413      	add	r3, r2
 800ccd4:	781b      	ldrb	r3, [r3, #0]
 800ccd6:	7ffa      	ldrb	r2, [r7, #31]
 800ccd8:	429a      	cmp	r2, r3
 800ccda:	d134      	bne.n	800cd46 <flip+0x532>
        {
        	int8_t startI = i;
 800ccdc:	79bb      	ldrb	r3, [r7, #6]
 800ccde:	73fb      	strb	r3, [r7, #15]
        	int8_t startJ = j - 1;
 800cce0:	797b      	ldrb	r3, [r7, #5]
 800cce2:	3b01      	subs	r3, #1
 800cce4:	b2db      	uxtb	r3, r3
 800cce6:	74fb      	strb	r3, [r7, #19]

            while ( startJ >= 0)
 800cce8:	e028      	b.n	800cd3c <flip+0x528>
            {
                if(mat [startI][startJ]==player)
 800ccea:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800ccee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ccf2:	4918      	ldr	r1, [pc, #96]	; (800cd54 <flip+0x540>)
 800ccf4:	00d2      	lsls	r2, r2, #3
 800ccf6:	440a      	add	r2, r1
 800ccf8:	4413      	add	r3, r2
 800ccfa:	781b      	ldrb	r3, [r3, #0]
 800ccfc:	79fa      	ldrb	r2, [r7, #7]
 800ccfe:	429a      	cmp	r2, r3
 800cd00:	d116      	bne.n	800cd30 <flip+0x51c>
                {
                     while(startJ!=j)
 800cd02:	e00f      	b.n	800cd24 <flip+0x510>
                    {
                        mat[startI][startJ] = player;
 800cd04:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800cd08:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cd0c:	4911      	ldr	r1, [pc, #68]	; (800cd54 <flip+0x540>)
 800cd0e:	00d2      	lsls	r2, r2, #3
 800cd10:	440a      	add	r2, r1
 800cd12:	4413      	add	r3, r2
 800cd14:	79fa      	ldrb	r2, [r7, #7]
 800cd16:	701a      	strb	r2, [r3, #0]

                        startJ++;
 800cd18:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cd1c:	b2db      	uxtb	r3, r3
 800cd1e:	3301      	adds	r3, #1
 800cd20:	b2db      	uxtb	r3, r3
 800cd22:	74fb      	strb	r3, [r7, #19]
                     while(startJ!=j)
 800cd24:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800cd28:	797b      	ldrb	r3, [r7, #5]
 800cd2a:	429a      	cmp	r2, r3
 800cd2c:	d1ea      	bne.n	800cd04 <flip+0x4f0>
                    }
                     break; // sale del while porque ya sabemos que esta posicion es valida
 800cd2e:	e00a      	b.n	800cd46 <flip+0x532>
                }
                startJ--;
 800cd30:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cd34:	b2db      	uxtb	r3, r3
 800cd36:	3b01      	subs	r3, #1
 800cd38:	b2db      	uxtb	r3, r3
 800cd3a:	74fb      	strb	r3, [r7, #19]
            while ( startJ >= 0)
 800cd3c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	dad2      	bge.n	800ccea <flip+0x4d6>
            }
        }
    }
}
 800cd44:	e7ff      	b.n	800cd46 <flip+0x532>
 800cd46:	bf00      	nop
 800cd48:	3724      	adds	r7, #36	; 0x24
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd50:	4770      	bx	lr
 800cd52:	bf00      	nop
 800cd54:	200008e8 	.word	0x200008e8

0800cd58 <getAvailableMoves>:

// Busca en el tablero entero los movimientos validos
void getAvailableMoves(uint8_t player, uint8_t availablePosition[], uint8_t *numAvailablePosition)
{
 800cd58:	b480      	push	{r7}
 800cd5a:	b08d      	sub	sp, #52	; 0x34
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	4603      	mov	r3, r0
 800cd60:	60b9      	str	r1, [r7, #8]
 800cd62:	607a      	str	r2, [r7, #4]
 800cd64:	73fb      	strb	r3, [r7, #15]
	uint8_t oppositePlayer;

    if(player==1)
 800cd66:	7bfb      	ldrb	r3, [r7, #15]
 800cd68:	2b01      	cmp	r3, #1
 800cd6a:	d103      	bne.n	800cd74 <getAvailableMoves+0x1c>
    {
        oppositePlayer=2;
 800cd6c:	2302      	movs	r3, #2
 800cd6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800cd72:	e002      	b.n	800cd7a <getAvailableMoves+0x22>
    }
    else
    {
        oppositePlayer=1;
 800cd74:	2301      	movs	r3, #1
 800cd76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }


    *numAvailablePosition = 0;//todavia no sabemos cuantas hay por eso la igualamos a  0
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	701a      	strb	r2, [r3, #0]

    for(int i=0; i<8; i++)
 800cd80:	2300      	movs	r3, #0
 800cd82:	62bb      	str	r3, [r7, #40]	; 0x28
 800cd84:	e20c      	b.n	800d1a0 <getAvailableMoves+0x448>
    {
        for(int j=0; j<8; j++)
 800cd86:	2300      	movs	r3, #0
 800cd88:	627b      	str	r3, [r7, #36]	; 0x24
 800cd8a:	e202      	b.n	800d192 <getAvailableMoves+0x43a>
        {
            //Si encontramos en una posicion i,j algo diferente sabemos que no esta disponible y que tiene que pasar a la prox posicion
            if(mat[i][j] != 0)
 800cd8c:	4ab0      	ldr	r2, [pc, #704]	; (800d050 <getAvailableMoves+0x2f8>)
 800cd8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd90:	00db      	lsls	r3, r3, #3
 800cd92:	441a      	add	r2, r3
 800cd94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd96:	4413      	add	r3, r2
 800cd98:	781b      	ldrb	r3, [r3, #0]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	f040 81f5 	bne.w	800d18a <getAvailableMoves+0x432>
            /* TL   T   TR
             *  L (i,j) R
             * BL   B   BR
             */

            uint8_t positionValid = 0;//al inicio declaramos que la posición en invalida
 800cda0:	2300      	movs	r3, #0
 800cda2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

            // top left
            if(i > 0 && j > 0) // Esta condición sirve para no acceder a posiciones fuera de la tabla
 800cda6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	dd42      	ble.n	800ce32 <getAvailableMoves+0xda>
 800cdac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	dd3f      	ble.n	800ce32 <getAvailableMoves+0xda>
            {
                if(mat[i-1][j-1] == oppositePlayer)
 800cdb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdb4:	1e5a      	subs	r2, r3, #1
 800cdb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdb8:	3b01      	subs	r3, #1
 800cdba:	49a5      	ldr	r1, [pc, #660]	; (800d050 <getAvailableMoves+0x2f8>)
 800cdbc:	00d2      	lsls	r2, r2, #3
 800cdbe:	440a      	add	r2, r1
 800cdc0:	4413      	add	r3, r2
 800cdc2:	781b      	ldrb	r3, [r3, #0]
 800cdc4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800cdc8:	429a      	cmp	r2, r3
 800cdca:	d132      	bne.n	800ce32 <getAvailableMoves+0xda>
                {
                    // posicao adjacent
                	int8_t startI = i - 1;//comienza en el mismo sitio de la ficha opuesta
 800cdcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdce:	b2db      	uxtb	r3, r3
 800cdd0:	3b01      	subs	r3, #1
 800cdd2:	b2db      	uxtb	r3, r3
 800cdd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
                	int8_t startJ = j - 1;
 800cdd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdda:	b2db      	uxtb	r3, r3
 800cddc:	3b01      	subs	r3, #1
 800cdde:	b2db      	uxtb	r3, r3
 800cde0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

                    while (startI >= 0 && startJ >= 0)//hasta los limites de la tabla
 800cde4:	e01d      	b.n	800ce22 <getAvailableMoves+0xca>
                    {
                        if(mat [startI][startJ]==player)
 800cde6:	f997 2022 	ldrsb.w	r2, [r7, #34]	; 0x22
 800cdea:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800cdee:	4998      	ldr	r1, [pc, #608]	; (800d050 <getAvailableMoves+0x2f8>)
 800cdf0:	00d2      	lsls	r2, r2, #3
 800cdf2:	440a      	add	r2, r1
 800cdf4:	4413      	add	r3, r2
 800cdf6:	781b      	ldrb	r3, [r3, #0]
 800cdf8:	7bfa      	ldrb	r2, [r7, #15]
 800cdfa:	429a      	cmp	r2, r3
 800cdfc:	d103      	bne.n	800ce06 <getAvailableMoves+0xae>
                        {
                             positionValid = 1;
 800cdfe:	2301      	movs	r3, #1
 800ce00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                             break; // sale del while porque ya sabemos que esta posicion es valida
 800ce04:	e015      	b.n	800ce32 <getAvailableMoves+0xda>
                        }
                        startI--;
 800ce06:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 800ce0a:	b2db      	uxtb	r3, r3
 800ce0c:	3b01      	subs	r3, #1
 800ce0e:	b2db      	uxtb	r3, r3
 800ce10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
                        startJ--;
 800ce14:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800ce18:	b2db      	uxtb	r3, r3
 800ce1a:	3b01      	subs	r3, #1
 800ce1c:	b2db      	uxtb	r3, r3
 800ce1e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
                    while (startI >= 0 && startJ >= 0)//hasta los limites de la tabla
 800ce22:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	db03      	blt.n	800ce32 <getAvailableMoves+0xda>
 800ce2a:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	dad9      	bge.n	800cde6 <getAvailableMoves+0x8e>
                    }
                }
            }

            // top
            if(i>0)
 800ce32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	dd2f      	ble.n	800ce98 <getAvailableMoves+0x140>
            {
                if(mat[i-1][j] == oppositePlayer)
 800ce38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce3a:	3b01      	subs	r3, #1
 800ce3c:	4a84      	ldr	r2, [pc, #528]	; (800d050 <getAvailableMoves+0x2f8>)
 800ce3e:	00db      	lsls	r3, r3, #3
 800ce40:	441a      	add	r2, r3
 800ce42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce44:	4413      	add	r3, r2
 800ce46:	781b      	ldrb	r3, [r3, #0]
 800ce48:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ce4c:	429a      	cmp	r2, r3
 800ce4e:	d123      	bne.n	800ce98 <getAvailableMoves+0x140>
                {
                    int8_t startI = i - 1;
 800ce50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce52:	b2db      	uxtb	r3, r3
 800ce54:	3b01      	subs	r3, #1
 800ce56:	b2db      	uxtb	r3, r3
 800ce58:	f887 3020 	strb.w	r3, [r7, #32]
                    int8_t startJ = j;
 800ce5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce5e:	75bb      	strb	r3, [r7, #22]

                    while (startI >= 0)
 800ce60:	e016      	b.n	800ce90 <getAvailableMoves+0x138>
                    {
                        if(mat [startI][startJ]==player)
 800ce62:	f997 2020 	ldrsb.w	r2, [r7, #32]
 800ce66:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800ce6a:	4979      	ldr	r1, [pc, #484]	; (800d050 <getAvailableMoves+0x2f8>)
 800ce6c:	00d2      	lsls	r2, r2, #3
 800ce6e:	440a      	add	r2, r1
 800ce70:	4413      	add	r3, r2
 800ce72:	781b      	ldrb	r3, [r3, #0]
 800ce74:	7bfa      	ldrb	r2, [r7, #15]
 800ce76:	429a      	cmp	r2, r3
 800ce78:	d103      	bne.n	800ce82 <getAvailableMoves+0x12a>
                        {
                             positionValid = 1;
 800ce7a:	2301      	movs	r3, #1
 800ce7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                             break; // sale del while porque ya sabemos que esta posicion es valida
 800ce80:	e00a      	b.n	800ce98 <getAvailableMoves+0x140>
                        }
                        startI--;
 800ce82:	f997 3020 	ldrsb.w	r3, [r7, #32]
 800ce86:	b2db      	uxtb	r3, r3
 800ce88:	3b01      	subs	r3, #1
 800ce8a:	b2db      	uxtb	r3, r3
 800ce8c:	f887 3020 	strb.w	r3, [r7, #32]
                    while (startI >= 0)
 800ce90:	f997 3020 	ldrsb.w	r3, [r7, #32]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	dae4      	bge.n	800ce62 <getAvailableMoves+0x10a>
                    }
                }
            }

            // top right
            if(i > 0 && j <7)
 800ce98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	dd3e      	ble.n	800cf1c <getAvailableMoves+0x1c4>
 800ce9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cea0:	2b06      	cmp	r3, #6
 800cea2:	dc3b      	bgt.n	800cf1c <getAvailableMoves+0x1c4>
            {
                if(mat[i-1][j+1] == oppositePlayer)
 800cea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cea6:	1e5a      	subs	r2, r3, #1
 800cea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceaa:	3301      	adds	r3, #1
 800ceac:	4968      	ldr	r1, [pc, #416]	; (800d050 <getAvailableMoves+0x2f8>)
 800ceae:	00d2      	lsls	r2, r2, #3
 800ceb0:	440a      	add	r2, r1
 800ceb2:	4413      	add	r3, r2
 800ceb4:	781b      	ldrb	r3, [r3, #0]
 800ceb6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ceba:	429a      	cmp	r2, r3
 800cebc:	d12e      	bne.n	800cf1c <getAvailableMoves+0x1c4>
                {
                	int8_t startI = i - 1;
 800cebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cec0:	b2db      	uxtb	r3, r3
 800cec2:	3b01      	subs	r3, #1
 800cec4:	b2db      	uxtb	r3, r3
 800cec6:	77fb      	strb	r3, [r7, #31]
                	int8_t startJ = j + 1;
 800cec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceca:	b2db      	uxtb	r3, r3
 800cecc:	3301      	adds	r3, #1
 800cece:	b2db      	uxtb	r3, r3
 800ced0:	77bb      	strb	r3, [r7, #30]

                    while (startI >= 0 && startJ <= 7)
 800ced2:	e01b      	b.n	800cf0c <getAvailableMoves+0x1b4>
                    {
                        if(mat [startI][startJ]==player)
 800ced4:	f997 201f 	ldrsb.w	r2, [r7, #31]
 800ced8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800cedc:	495c      	ldr	r1, [pc, #368]	; (800d050 <getAvailableMoves+0x2f8>)
 800cede:	00d2      	lsls	r2, r2, #3
 800cee0:	440a      	add	r2, r1
 800cee2:	4413      	add	r3, r2
 800cee4:	781b      	ldrb	r3, [r3, #0]
 800cee6:	7bfa      	ldrb	r2, [r7, #15]
 800cee8:	429a      	cmp	r2, r3
 800ceea:	d103      	bne.n	800cef4 <getAvailableMoves+0x19c>
                        {
                             positionValid = 1;
 800ceec:	2301      	movs	r3, #1
 800ceee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                             break; // sale del while porque ya sabemos que esta posicion es valida
 800cef2:	e013      	b.n	800cf1c <getAvailableMoves+0x1c4>
                        }
                        startI--;
 800cef4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cef8:	b2db      	uxtb	r3, r3
 800cefa:	3b01      	subs	r3, #1
 800cefc:	b2db      	uxtb	r3, r3
 800cefe:	77fb      	strb	r3, [r7, #31]
                        startJ++;
 800cf00:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800cf04:	b2db      	uxtb	r3, r3
 800cf06:	3301      	adds	r3, #1
 800cf08:	b2db      	uxtb	r3, r3
 800cf0a:	77bb      	strb	r3, [r7, #30]
                    while (startI >= 0 && startJ <= 7)
 800cf0c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	db03      	blt.n	800cf1c <getAvailableMoves+0x1c4>
 800cf14:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800cf18:	2b07      	cmp	r3, #7
 800cf1a:	dddb      	ble.n	800ced4 <getAvailableMoves+0x17c>
                    }
                }
            }

            // right
            if(j < 7)
 800cf1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf1e:	2b06      	cmp	r3, #6
 800cf20:	dc2d      	bgt.n	800cf7e <getAvailableMoves+0x226>
            {
                if(mat[i][j+1] == oppositePlayer)
 800cf22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf24:	3301      	adds	r3, #1
 800cf26:	494a      	ldr	r1, [pc, #296]	; (800d050 <getAvailableMoves+0x2f8>)
 800cf28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf2a:	00d2      	lsls	r2, r2, #3
 800cf2c:	440a      	add	r2, r1
 800cf2e:	4413      	add	r3, r2
 800cf30:	781b      	ldrb	r3, [r3, #0]
 800cf32:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800cf36:	429a      	cmp	r2, r3
 800cf38:	d121      	bne.n	800cf7e <getAvailableMoves+0x226>
                {
                	int8_t startI = i;
 800cf3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf3c:	757b      	strb	r3, [r7, #21]
                	int8_t startJ = j + 1;
 800cf3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf40:	b2db      	uxtb	r3, r3
 800cf42:	3301      	adds	r3, #1
 800cf44:	b2db      	uxtb	r3, r3
 800cf46:	777b      	strb	r3, [r7, #29]

                    while (startJ <= 7)
 800cf48:	e015      	b.n	800cf76 <getAvailableMoves+0x21e>
                    {
                        if(mat [startI][startJ]==player)
 800cf4a:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800cf4e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800cf52:	493f      	ldr	r1, [pc, #252]	; (800d050 <getAvailableMoves+0x2f8>)
 800cf54:	00d2      	lsls	r2, r2, #3
 800cf56:	440a      	add	r2, r1
 800cf58:	4413      	add	r3, r2
 800cf5a:	781b      	ldrb	r3, [r3, #0]
 800cf5c:	7bfa      	ldrb	r2, [r7, #15]
 800cf5e:	429a      	cmp	r2, r3
 800cf60:	d103      	bne.n	800cf6a <getAvailableMoves+0x212>
                        {
                             positionValid = 1;
 800cf62:	2301      	movs	r3, #1
 800cf64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                             break; // sale del while porque ya sabemos que esta posicion es valida
 800cf68:	e009      	b.n	800cf7e <getAvailableMoves+0x226>
                        }
                        startJ++;
 800cf6a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800cf6e:	b2db      	uxtb	r3, r3
 800cf70:	3301      	adds	r3, #1
 800cf72:	b2db      	uxtb	r3, r3
 800cf74:	777b      	strb	r3, [r7, #29]
                    while (startJ <= 7)
 800cf76:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800cf7a:	2b07      	cmp	r3, #7
 800cf7c:	dde5      	ble.n	800cf4a <getAvailableMoves+0x1f2>
                    }
                }
            }

            // bottom right
            if (i < 7 && j < 7)
 800cf7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf80:	2b06      	cmp	r3, #6
 800cf82:	dc3e      	bgt.n	800d002 <getAvailableMoves+0x2aa>
 800cf84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf86:	2b06      	cmp	r3, #6
 800cf88:	dc3b      	bgt.n	800d002 <getAvailableMoves+0x2aa>
            {
                if(mat[i+1][j+1] == oppositePlayer)
 800cf8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf8c:	1c5a      	adds	r2, r3, #1
 800cf8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf90:	3301      	adds	r3, #1
 800cf92:	492f      	ldr	r1, [pc, #188]	; (800d050 <getAvailableMoves+0x2f8>)
 800cf94:	00d2      	lsls	r2, r2, #3
 800cf96:	440a      	add	r2, r1
 800cf98:	4413      	add	r3, r2
 800cf9a:	781b      	ldrb	r3, [r3, #0]
 800cf9c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800cfa0:	429a      	cmp	r2, r3
 800cfa2:	d12e      	bne.n	800d002 <getAvailableMoves+0x2aa>
                {
                	int8_t startI = i + 1;
 800cfa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfa6:	b2db      	uxtb	r3, r3
 800cfa8:	3301      	adds	r3, #1
 800cfaa:	b2db      	uxtb	r3, r3
 800cfac:	773b      	strb	r3, [r7, #28]
                	int8_t startJ = j + 1;
 800cfae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfb0:	b2db      	uxtb	r3, r3
 800cfb2:	3301      	adds	r3, #1
 800cfb4:	b2db      	uxtb	r3, r3
 800cfb6:	76fb      	strb	r3, [r7, #27]

                    while (startI <= 7 && startJ <= 7)
 800cfb8:	e01b      	b.n	800cff2 <getAvailableMoves+0x29a>
                    {
                        if(mat [startI][startJ]==player)
 800cfba:	f997 201c 	ldrsb.w	r2, [r7, #28]
 800cfbe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800cfc2:	4923      	ldr	r1, [pc, #140]	; (800d050 <getAvailableMoves+0x2f8>)
 800cfc4:	00d2      	lsls	r2, r2, #3
 800cfc6:	440a      	add	r2, r1
 800cfc8:	4413      	add	r3, r2
 800cfca:	781b      	ldrb	r3, [r3, #0]
 800cfcc:	7bfa      	ldrb	r2, [r7, #15]
 800cfce:	429a      	cmp	r2, r3
 800cfd0:	d103      	bne.n	800cfda <getAvailableMoves+0x282>
                        {
                             positionValid = 1;
 800cfd2:	2301      	movs	r3, #1
 800cfd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                             break; // sale del while porque ya sabemos que esta posicion es valida
 800cfd8:	e013      	b.n	800d002 <getAvailableMoves+0x2aa>
                        }
                        startI++;
 800cfda:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800cfde:	b2db      	uxtb	r3, r3
 800cfe0:	3301      	adds	r3, #1
 800cfe2:	b2db      	uxtb	r3, r3
 800cfe4:	773b      	strb	r3, [r7, #28]
                        startJ++;
 800cfe6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800cfea:	b2db      	uxtb	r3, r3
 800cfec:	3301      	adds	r3, #1
 800cfee:	b2db      	uxtb	r3, r3
 800cff0:	76fb      	strb	r3, [r7, #27]
                    while (startI <= 7 && startJ <= 7)
 800cff2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800cff6:	2b07      	cmp	r3, #7
 800cff8:	dc03      	bgt.n	800d002 <getAvailableMoves+0x2aa>
 800cffa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800cffe:	2b07      	cmp	r3, #7
 800d000:	dddb      	ble.n	800cfba <getAvailableMoves+0x262>
                    }
                }
            }

            // bottom
            if(i < 7)
 800d002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d004:	2b06      	cmp	r3, #6
 800d006:	dc2f      	bgt.n	800d068 <getAvailableMoves+0x310>
            {
                if(mat[i+1][j] == oppositePlayer)
 800d008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d00a:	3301      	adds	r3, #1
 800d00c:	4a10      	ldr	r2, [pc, #64]	; (800d050 <getAvailableMoves+0x2f8>)
 800d00e:	00db      	lsls	r3, r3, #3
 800d010:	441a      	add	r2, r3
 800d012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d014:	4413      	add	r3, r2
 800d016:	781b      	ldrb	r3, [r3, #0]
 800d018:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d01c:	429a      	cmp	r2, r3
 800d01e:	d123      	bne.n	800d068 <getAvailableMoves+0x310>
                {
                	int8_t startI = i + 1;
 800d020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d022:	b2db      	uxtb	r3, r3
 800d024:	3301      	adds	r3, #1
 800d026:	b2db      	uxtb	r3, r3
 800d028:	76bb      	strb	r3, [r7, #26]
                	int8_t startJ = j;
 800d02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d02c:	753b      	strb	r3, [r7, #20]

                    while (startI <=7)
 800d02e:	e017      	b.n	800d060 <getAvailableMoves+0x308>
                    {
                        if(mat [startI][startJ]==player)
 800d030:	f997 201a 	ldrsb.w	r2, [r7, #26]
 800d034:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800d038:	4905      	ldr	r1, [pc, #20]	; (800d050 <getAvailableMoves+0x2f8>)
 800d03a:	00d2      	lsls	r2, r2, #3
 800d03c:	440a      	add	r2, r1
 800d03e:	4413      	add	r3, r2
 800d040:	781b      	ldrb	r3, [r3, #0]
 800d042:	7bfa      	ldrb	r2, [r7, #15]
 800d044:	429a      	cmp	r2, r3
 800d046:	d105      	bne.n	800d054 <getAvailableMoves+0x2fc>
                        {
                             positionValid = 1;
 800d048:	2301      	movs	r3, #1
 800d04a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                             break; // sale del while porque ya sabemos que esta posicion es valida
 800d04e:	e00b      	b.n	800d068 <getAvailableMoves+0x310>
 800d050:	200008e8 	.word	0x200008e8
                        }
                        startI++;
 800d054:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d058:	b2db      	uxtb	r3, r3
 800d05a:	3301      	adds	r3, #1
 800d05c:	b2db      	uxtb	r3, r3
 800d05e:	76bb      	strb	r3, [r7, #26]
                    while (startI <=7)
 800d060:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d064:	2b07      	cmp	r3, #7
 800d066:	dde3      	ble.n	800d030 <getAvailableMoves+0x2d8>
                    }
                }
            }

            // bottom left
            if(i < 7 && j > 0)
 800d068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d06a:	2b06      	cmp	r3, #6
 800d06c:	dc3e      	bgt.n	800d0ec <getAvailableMoves+0x394>
 800d06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d070:	2b00      	cmp	r3, #0
 800d072:	dd3b      	ble.n	800d0ec <getAvailableMoves+0x394>
            {
                if(mat[i+1][j-1] == oppositePlayer)
 800d074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d076:	1c5a      	adds	r2, r3, #1
 800d078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d07a:	3b01      	subs	r3, #1
 800d07c:	494d      	ldr	r1, [pc, #308]	; (800d1b4 <getAvailableMoves+0x45c>)
 800d07e:	00d2      	lsls	r2, r2, #3
 800d080:	440a      	add	r2, r1
 800d082:	4413      	add	r3, r2
 800d084:	781b      	ldrb	r3, [r3, #0]
 800d086:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d08a:	429a      	cmp	r2, r3
 800d08c:	d12e      	bne.n	800d0ec <getAvailableMoves+0x394>
                {
                	int8_t startI = i + 1;
 800d08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d090:	b2db      	uxtb	r3, r3
 800d092:	3301      	adds	r3, #1
 800d094:	b2db      	uxtb	r3, r3
 800d096:	767b      	strb	r3, [r7, #25]
                	int8_t startJ = j - 1;
 800d098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d09a:	b2db      	uxtb	r3, r3
 800d09c:	3b01      	subs	r3, #1
 800d09e:	b2db      	uxtb	r3, r3
 800d0a0:	763b      	strb	r3, [r7, #24]

                    while (startI <=7  && startJ >= 0)
 800d0a2:	e01b      	b.n	800d0dc <getAvailableMoves+0x384>
                    {
                        if(mat [startI][startJ]==player)
 800d0a4:	f997 2019 	ldrsb.w	r2, [r7, #25]
 800d0a8:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800d0ac:	4941      	ldr	r1, [pc, #260]	; (800d1b4 <getAvailableMoves+0x45c>)
 800d0ae:	00d2      	lsls	r2, r2, #3
 800d0b0:	440a      	add	r2, r1
 800d0b2:	4413      	add	r3, r2
 800d0b4:	781b      	ldrb	r3, [r3, #0]
 800d0b6:	7bfa      	ldrb	r2, [r7, #15]
 800d0b8:	429a      	cmp	r2, r3
 800d0ba:	d103      	bne.n	800d0c4 <getAvailableMoves+0x36c>
                        {
                             positionValid = 1;
 800d0bc:	2301      	movs	r3, #1
 800d0be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                             break; // sale del while porque ya sabemos que esta posicion es valida
 800d0c2:	e013      	b.n	800d0ec <getAvailableMoves+0x394>
                        }
                        startI++;
 800d0c4:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800d0c8:	b2db      	uxtb	r3, r3
 800d0ca:	3301      	adds	r3, #1
 800d0cc:	b2db      	uxtb	r3, r3
 800d0ce:	767b      	strb	r3, [r7, #25]
                        startJ--;
 800d0d0:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800d0d4:	b2db      	uxtb	r3, r3
 800d0d6:	3b01      	subs	r3, #1
 800d0d8:	b2db      	uxtb	r3, r3
 800d0da:	763b      	strb	r3, [r7, #24]
                    while (startI <=7  && startJ >= 0)
 800d0dc:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800d0e0:	2b07      	cmp	r3, #7
 800d0e2:	dc03      	bgt.n	800d0ec <getAvailableMoves+0x394>
 800d0e4:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	dadb      	bge.n	800d0a4 <getAvailableMoves+0x34c>
                    }
                }
            }

            // left
            if(j > 0)
 800d0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	dd2d      	ble.n	800d14e <getAvailableMoves+0x3f6>
            {
                if(mat[i][j-1] == oppositePlayer)
 800d0f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0f4:	3b01      	subs	r3, #1
 800d0f6:	492f      	ldr	r1, [pc, #188]	; (800d1b4 <getAvailableMoves+0x45c>)
 800d0f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d0fa:	00d2      	lsls	r2, r2, #3
 800d0fc:	440a      	add	r2, r1
 800d0fe:	4413      	add	r3, r2
 800d100:	781b      	ldrb	r3, [r3, #0]
 800d102:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d106:	429a      	cmp	r2, r3
 800d108:	d121      	bne.n	800d14e <getAvailableMoves+0x3f6>
                {
                	int8_t startI = i;
 800d10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d10c:	74fb      	strb	r3, [r7, #19]
                	int8_t startJ = j - 1;
 800d10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d110:	b2db      	uxtb	r3, r3
 800d112:	3b01      	subs	r3, #1
 800d114:	b2db      	uxtb	r3, r3
 800d116:	75fb      	strb	r3, [r7, #23]

                    while ( startJ >= 0)
 800d118:	e015      	b.n	800d146 <getAvailableMoves+0x3ee>
                    {
                        if(mat [startI][startJ]==player)
 800d11a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800d11e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d122:	4924      	ldr	r1, [pc, #144]	; (800d1b4 <getAvailableMoves+0x45c>)
 800d124:	00d2      	lsls	r2, r2, #3
 800d126:	440a      	add	r2, r1
 800d128:	4413      	add	r3, r2
 800d12a:	781b      	ldrb	r3, [r3, #0]
 800d12c:	7bfa      	ldrb	r2, [r7, #15]
 800d12e:	429a      	cmp	r2, r3
 800d130:	d103      	bne.n	800d13a <getAvailableMoves+0x3e2>
                        {
                             positionValid = 1;
 800d132:	2301      	movs	r3, #1
 800d134:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                             break; // sale del while porque ya sabemos que esta posicion es valida
 800d138:	e009      	b.n	800d14e <getAvailableMoves+0x3f6>
                        }
                        startJ--;
 800d13a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d13e:	b2db      	uxtb	r3, r3
 800d140:	3b01      	subs	r3, #1
 800d142:	b2db      	uxtb	r3, r3
 800d144:	75fb      	strb	r3, [r7, #23]
                    while ( startJ >= 0)
 800d146:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	dae5      	bge.n	800d11a <getAvailableMoves+0x3c2>
                    }
                }
            }

            if (positionValid == 1)
 800d14e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d152:	2b01      	cmp	r3, #1
 800d154:	d11a      	bne.n	800d18c <getAvailableMoves+0x434>
            {
                *availablePosition=(i+1)*10+j+1;//almacenar esta posicion que esta disponible, podria utilizar otro puntero para j
 800d156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d158:	3301      	adds	r3, #1
 800d15a:	b2db      	uxtb	r3, r3
 800d15c:	461a      	mov	r2, r3
 800d15e:	0092      	lsls	r2, r2, #2
 800d160:	4413      	add	r3, r2
 800d162:	005b      	lsls	r3, r3, #1
 800d164:	b2da      	uxtb	r2, r3
 800d166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d168:	b2db      	uxtb	r3, r3
 800d16a:	4413      	add	r3, r2
 800d16c:	b2db      	uxtb	r3, r3
 800d16e:	3301      	adds	r3, #1
 800d170:	b2da      	uxtb	r2, r3
 800d172:	68bb      	ldr	r3, [r7, #8]
 800d174:	701a      	strb	r2, [r3, #0]
                availablePosition++;//para que la proxima vez que encontraras una posición disponible la almacenaras en el enderezo de memoria
 800d176:	68bb      	ldr	r3, [r7, #8]
 800d178:	3301      	adds	r3, #1
 800d17a:	60bb      	str	r3, [r7, #8]

                (*numAvailablePosition)++;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	781b      	ldrb	r3, [r3, #0]
 800d180:	3301      	adds	r3, #1
 800d182:	b2da      	uxtb	r2, r3
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	701a      	strb	r2, [r3, #0]
 800d188:	e000      	b.n	800d18c <getAvailableMoves+0x434>
                continue;
 800d18a:	bf00      	nop
        for(int j=0; j<8; j++)
 800d18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d18e:	3301      	adds	r3, #1
 800d190:	627b      	str	r3, [r7, #36]	; 0x24
 800d192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d194:	2b07      	cmp	r3, #7
 800d196:	f77f adf9 	ble.w	800cd8c <getAvailableMoves+0x34>
    for(int i=0; i<8; i++)
 800d19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d19c:	3301      	adds	r3, #1
 800d19e:	62bb      	str	r3, [r7, #40]	; 0x28
 800d1a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1a2:	2b07      	cmp	r3, #7
 800d1a4:	f77f adef 	ble.w	800cd86 <getAvailableMoves+0x2e>
            }
        }
    }
}
 800d1a8:	bf00      	nop
 800d1aa:	3734      	adds	r7, #52	; 0x34
 800d1ac:	46bd      	mov	sp, r7
 800d1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b2:	4770      	bx	lr
 800d1b4:	200008e8 	.word	0x200008e8

0800d1b8 <insertMove>:


//inserta una posición en el tablero para el jugador, pasada por parámetro(player) si la posición fuera valida
//retorna 0 cuando la posición es invalida, retorna 1 cuando es valida
int insertMove(uint8_t i, uint8_t j, uint8_t player, uint8_t availablePosition[], uint8_t numAvailablePosition)//como necesito de saber las jugadas en el tablero, paso la matrix por parametros
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b084      	sub	sp, #16
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	603b      	str	r3, [r7, #0]
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	71fb      	strb	r3, [r7, #7]
 800d1c4:	460b      	mov	r3, r1
 800d1c6:	71bb      	strb	r3, [r7, #6]
 800d1c8:	4613      	mov	r3, r2
 800d1ca:	717b      	strb	r3, [r7, #5]
	uint8_t n = (i+1)*10+(j+1);
 800d1cc:	79fb      	ldrb	r3, [r7, #7]
 800d1ce:	3301      	adds	r3, #1
 800d1d0:	b2db      	uxtb	r3, r3
 800d1d2:	461a      	mov	r2, r3
 800d1d4:	0092      	lsls	r2, r2, #2
 800d1d6:	4413      	add	r3, r2
 800d1d8:	005b      	lsls	r3, r3, #1
 800d1da:	b2da      	uxtb	r2, r3
 800d1dc:	79bb      	ldrb	r3, [r7, #6]
 800d1de:	4413      	add	r3, r2
 800d1e0:	b2db      	uxtb	r3, r3
 800d1e2:	3301      	adds	r3, #1
 800d1e4:	73bb      	strb	r3, [r7, #14]

    for(uint8_t k=0; k<numAvailablePosition; k++)
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	73fb      	strb	r3, [r7, #15]
 800d1ea:	e019      	b.n	800d220 <insertMove+0x68>
    {
        if(availablePosition[k]==n)//quiero saber si el valor que la persona escribio esta en las posiciones disponibles
 800d1ec:	7bfb      	ldrb	r3, [r7, #15]
 800d1ee:	683a      	ldr	r2, [r7, #0]
 800d1f0:	4413      	add	r3, r2
 800d1f2:	781b      	ldrb	r3, [r3, #0]
 800d1f4:	7bba      	ldrb	r2, [r7, #14]
 800d1f6:	429a      	cmp	r2, r3
 800d1f8:	d10f      	bne.n	800d21a <insertMove+0x62>
        {
            mat[i][j] = player;
 800d1fa:	79fa      	ldrb	r2, [r7, #7]
 800d1fc:	79bb      	ldrb	r3, [r7, #6]
 800d1fe:	490d      	ldr	r1, [pc, #52]	; (800d234 <insertMove+0x7c>)
 800d200:	00d2      	lsls	r2, r2, #3
 800d202:	440a      	add	r2, r1
 800d204:	4413      	add	r3, r2
 800d206:	797a      	ldrb	r2, [r7, #5]
 800d208:	701a      	strb	r2, [r3, #0]
            flip(player, i, j);
 800d20a:	79ba      	ldrb	r2, [r7, #6]
 800d20c:	79f9      	ldrb	r1, [r7, #7]
 800d20e:	797b      	ldrb	r3, [r7, #5]
 800d210:	4618      	mov	r0, r3
 800d212:	f7ff faff 	bl	800c814 <flip>
            return 1;
 800d216:	2301      	movs	r3, #1
 800d218:	e007      	b.n	800d22a <insertMove+0x72>
    for(uint8_t k=0; k<numAvailablePosition; k++)
 800d21a:	7bfb      	ldrb	r3, [r7, #15]
 800d21c:	3301      	adds	r3, #1
 800d21e:	73fb      	strb	r3, [r7, #15]
 800d220:	7bfa      	ldrb	r2, [r7, #15]
 800d222:	7e3b      	ldrb	r3, [r7, #24]
 800d224:	429a      	cmp	r2, r3
 800d226:	d3e1      	bcc.n	800d1ec <insertMove+0x34>
        }
    }

    return 0;
 800d228:	2300      	movs	r3, #0
}
 800d22a:	4618      	mov	r0, r3
 800d22c:	3710      	adds	r7, #16
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}
 800d232:	bf00      	nop
 800d234:	200008e8 	.word	0x200008e8

0800d238 <SCB_EnableICache>:
{
 800d238:	b480      	push	{r7}
 800d23a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800d23c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800d240:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800d244:	4b0b      	ldr	r3, [pc, #44]	; (800d274 <SCB_EnableICache+0x3c>)
 800d246:	2200      	movs	r2, #0
 800d248:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800d24c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800d250:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800d254:	4b07      	ldr	r3, [pc, #28]	; (800d274 <SCB_EnableICache+0x3c>)
 800d256:	695b      	ldr	r3, [r3, #20]
 800d258:	4a06      	ldr	r2, [pc, #24]	; (800d274 <SCB_EnableICache+0x3c>)
 800d25a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d25e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800d260:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800d264:	f3bf 8f6f 	isb	sy
}
 800d268:	bf00      	nop
 800d26a:	46bd      	mov	sp, r7
 800d26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d270:	4770      	bx	lr
 800d272:	bf00      	nop
 800d274:	e000ed00 	.word	0xe000ed00

0800d278 <SCB_EnableDCache>:
{
 800d278:	b480      	push	{r7}
 800d27a:	b085      	sub	sp, #20
 800d27c:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800d27e:	4b1d      	ldr	r3, [pc, #116]	; (800d2f4 <SCB_EnableDCache+0x7c>)
 800d280:	2200      	movs	r2, #0
 800d282:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800d286:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800d28a:	4b1a      	ldr	r3, [pc, #104]	; (800d2f4 <SCB_EnableDCache+0x7c>)
 800d28c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d290:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	0b5b      	lsrs	r3, r3, #13
 800d296:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800d29a:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	08db      	lsrs	r3, r3, #3
 800d2a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d2a4:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	015a      	lsls	r2, r3, #5
 800d2aa:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800d2ae:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800d2b0:	68ba      	ldr	r2, [r7, #8]
 800d2b2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800d2b4:	490f      	ldr	r1, [pc, #60]	; (800d2f4 <SCB_EnableDCache+0x7c>)
 800d2b6:	4313      	orrs	r3, r2
 800d2b8:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 800d2bc:	68bb      	ldr	r3, [r7, #8]
 800d2be:	1e5a      	subs	r2, r3, #1
 800d2c0:	60ba      	str	r2, [r7, #8]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d1ef      	bne.n	800d2a6 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	1e5a      	subs	r2, r3, #1
 800d2ca:	60fa      	str	r2, [r7, #12]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d1e5      	bne.n	800d29c <SCB_EnableDCache+0x24>
 800d2d0:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800d2d4:	4b07      	ldr	r3, [pc, #28]	; (800d2f4 <SCB_EnableDCache+0x7c>)
 800d2d6:	695b      	ldr	r3, [r3, #20]
 800d2d8:	4a06      	ldr	r2, [pc, #24]	; (800d2f4 <SCB_EnableDCache+0x7c>)
 800d2da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d2de:	6153      	str	r3, [r2, #20]
 800d2e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800d2e4:	f3bf 8f6f 	isb	sy
}
 800d2e8:	bf00      	nop
 800d2ea:	3714      	adds	r7, #20
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f2:	4770      	bx	lr
 800d2f4:	e000ed00 	.word	0xe000ed00

0800d2f8 <HAL_ADC_ConvCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//Interrupción del ADC
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b082      	sub	sp, #8
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
	ADC1value = HAL_ADC_GetValue(hadc);//Va a guardar el valor convertido de ADC, esta int va a ser llamada cuando el ADC termina la conversión
 800d300:	6878      	ldr	r0, [r7, #4]
 800d302:	f7f5 fdd0 	bl	8002ea6 <HAL_ADC_GetValue>
 800d306:	4603      	mov	r3, r0
 800d308:	461a      	mov	r2, r3
 800d30a:	4b03      	ldr	r3, [pc, #12]	; (800d318 <HAL_ADC_ConvCpltCallback+0x20>)
 800d30c:	601a      	str	r2, [r3, #0]
}
 800d30e:	bf00      	nop
 800d310:	3708      	adds	r7, #8
 800d312:	46bd      	mov	sp, r7
 800d314:	bd80      	pop	{r7, pc}
 800d316:	bf00      	nop
 800d318:	20000b60 	.word	0x20000b60

0800d31c <HAL_GPIO_EXTI_Callback>:

//Interrupción generada por el botón y para el touch screen
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b082      	sub	sp, #8
 800d320:	af00      	add	r7, sp, #0
 800d322:	4603      	mov	r3, r0
 800d324:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0)
 800d326:	88fb      	ldrh	r3, [r7, #6]
 800d328:	2b01      	cmp	r3, #1
 800d32a:	d102      	bne.n	800d332 <HAL_GPIO_EXTI_Callback+0x16>
	{
		resetPressed = 1;//flag que dice cargamos en el boton reset
 800d32c:	4b20      	ldr	r3, [pc, #128]	; (800d3b0 <HAL_GPIO_EXTI_Callback+0x94>)
 800d32e:	2201      	movs	r2, #1
 800d330:	701a      	strb	r2, [r3, #0]
		//programPhase = 1;//vuelve a la fase 1
		//touchedPosX = 0;
		//touchedPosY = 0;
	}

	if(GPIO_Pin == GPIO_PIN_13)
 800d332:	88fb      	ldrh	r3, [r7, #6]
 800d334:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d338:	d136      	bne.n	800d3a8 <HAL_GPIO_EXTI_Callback+0x8c>
	{
		  BSP_TS_GetState(&TS_State);//funcion del sistema que va a obtener el estado del TS y lo va a guardar en el TS_State
 800d33a:	481e      	ldr	r0, [pc, #120]	; (800d3b4 <HAL_GPIO_EXTI_Callback+0x98>)
 800d33c:	f7f5 f95c 	bl	80025f8 <BSP_TS_GetState>

		  if(TS_State.touchDetected >= 1 && alreadyTouched==0)
 800d340:	4b1c      	ldr	r3, [pc, #112]	; (800d3b4 <HAL_GPIO_EXTI_Callback+0x98>)
 800d342:	781b      	ldrb	r3, [r3, #0]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d028      	beq.n	800d39a <HAL_GPIO_EXTI_Callback+0x7e>
 800d348:	4b1b      	ldr	r3, [pc, #108]	; (800d3b8 <HAL_GPIO_EXTI_Callback+0x9c>)
 800d34a:	781b      	ldrb	r3, [r3, #0]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d124      	bne.n	800d39a <HAL_GPIO_EXTI_Callback+0x7e>
		  {
			  alreadyTouched=1;
 800d350:	4b19      	ldr	r3, [pc, #100]	; (800d3b8 <HAL_GPIO_EXTI_Callback+0x9c>)
 800d352:	2201      	movs	r2, #1
 800d354:	701a      	strb	r2, [r3, #0]

			  // Lineas=Y; Columnas=X
			  // El tablero solo va estar entre 0 e 480 dividimos por 60 y va estar entre 0 e 7
			  if(TS_State.touchX[0] <= 480)
 800d356:	4b17      	ldr	r3, [pc, #92]	; (800d3b4 <HAL_GPIO_EXTI_Callback+0x98>)
 800d358:	885b      	ldrh	r3, [r3, #2]
 800d35a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800d35e:	d813      	bhi.n	800d388 <HAL_GPIO_EXTI_Callback+0x6c>
			  {
				  touchedX = TS_State.touchY[0]/60;
 800d360:	4b14      	ldr	r3, [pc, #80]	; (800d3b4 <HAL_GPIO_EXTI_Callback+0x98>)
 800d362:	88db      	ldrh	r3, [r3, #6]
 800d364:	4a15      	ldr	r2, [pc, #84]	; (800d3bc <HAL_GPIO_EXTI_Callback+0xa0>)
 800d366:	fba2 2303 	umull	r2, r3, r2, r3
 800d36a:	095b      	lsrs	r3, r3, #5
 800d36c:	b29b      	uxth	r3, r3
 800d36e:	b2da      	uxtb	r2, r3
 800d370:	4b13      	ldr	r3, [pc, #76]	; (800d3c0 <HAL_GPIO_EXTI_Callback+0xa4>)
 800d372:	701a      	strb	r2, [r3, #0]
				  touchedY = TS_State.touchX[0]/60;
 800d374:	4b0f      	ldr	r3, [pc, #60]	; (800d3b4 <HAL_GPIO_EXTI_Callback+0x98>)
 800d376:	885b      	ldrh	r3, [r3, #2]
 800d378:	4a10      	ldr	r2, [pc, #64]	; (800d3bc <HAL_GPIO_EXTI_Callback+0xa0>)
 800d37a:	fba2 2303 	umull	r2, r3, r2, r3
 800d37e:	095b      	lsrs	r3, r3, #5
 800d380:	b29b      	uxth	r3, r3
 800d382:	b2da      	uxtb	r2, r3
 800d384:	4b0f      	ldr	r3, [pc, #60]	; (800d3c4 <HAL_GPIO_EXTI_Callback+0xa8>)
 800d386:	701a      	strb	r2, [r3, #0]
			  }
			  //guardamos la posición de 0 a 800(para el menú)
			  touchedPosX = TS_State.touchX[0];
 800d388:	4b0a      	ldr	r3, [pc, #40]	; (800d3b4 <HAL_GPIO_EXTI_Callback+0x98>)
 800d38a:	885a      	ldrh	r2, [r3, #2]
 800d38c:	4b0e      	ldr	r3, [pc, #56]	; (800d3c8 <HAL_GPIO_EXTI_Callback+0xac>)
 800d38e:	801a      	strh	r2, [r3, #0]
			  touchedPosY = TS_State.touchY[0];
 800d390:	4b08      	ldr	r3, [pc, #32]	; (800d3b4 <HAL_GPIO_EXTI_Callback+0x98>)
 800d392:	88da      	ldrh	r2, [r3, #6]
 800d394:	4b0d      	ldr	r3, [pc, #52]	; (800d3cc <HAL_GPIO_EXTI_Callback+0xb0>)
 800d396:	801a      	strh	r2, [r3, #0]
		  else if(TS_State.touchDetected == 0)
		  {
			  alreadyTouched=0;
		  }
	}
}
 800d398:	e006      	b.n	800d3a8 <HAL_GPIO_EXTI_Callback+0x8c>
		  else if(TS_State.touchDetected == 0)
 800d39a:	4b06      	ldr	r3, [pc, #24]	; (800d3b4 <HAL_GPIO_EXTI_Callback+0x98>)
 800d39c:	781b      	ldrb	r3, [r3, #0]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d102      	bne.n	800d3a8 <HAL_GPIO_EXTI_Callback+0x8c>
			  alreadyTouched=0;
 800d3a2:	4b05      	ldr	r3, [pc, #20]	; (800d3b8 <HAL_GPIO_EXTI_Callback+0x9c>)
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	701a      	strb	r2, [r3, #0]
}
 800d3a8:	bf00      	nop
 800d3aa:	3708      	adds	r7, #8
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	bd80      	pop	{r7, pc}
 800d3b0:	20000318 	.word	0x20000318
 800d3b4:	20000bbc 	.word	0x20000bbc
 800d3b8:	20000310 	.word	0x20000310
 800d3bc:	88888889 	.word	0x88888889
 800d3c0:	20000afe 	.word	0x20000afe
 800d3c4:	20000928 	.word	0x20000928
 800d3c8:	2000092a 	.word	0x2000092a
 800d3cc:	2000092c 	.word	0x2000092c

0800d3d0 <HAL_TIM_PeriodElapsedCallback>:

//Interrupción de los timers
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d3d0:	b480      	push	{r7}
 800d3d2:	b083      	sub	sp, #12
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)//utilizado para saber cuando pasan 2 segundos
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	4a0e      	ldr	r2, [pc, #56]	; (800d418 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800d3de:	4293      	cmp	r3, r2
 800d3e0:	d103      	bne.n	800d3ea <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		twoSecondsPass = 1;
 800d3e2:	4b0e      	ldr	r3, [pc, #56]	; (800d41c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800d3e4:	2201      	movs	r2, #1
 800d3e6:	701a      	strb	r2, [r3, #0]
	else if(htim->Instance == TIM7)//utilizado para cada segundo
	{
		counterTurn--;
		counterGame++;
	}
}
 800d3e8:	e010      	b.n	800d40c <HAL_TIM_PeriodElapsedCallback+0x3c>
	else if(htim->Instance == TIM7)//utilizado para cada segundo
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	4a0c      	ldr	r2, [pc, #48]	; (800d420 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800d3f0:	4293      	cmp	r3, r2
 800d3f2:	d10b      	bne.n	800d40c <HAL_TIM_PeriodElapsedCallback+0x3c>
		counterTurn--;
 800d3f4:	4b0b      	ldr	r3, [pc, #44]	; (800d424 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800d3f6:	781b      	ldrb	r3, [r3, #0]
 800d3f8:	3b01      	subs	r3, #1
 800d3fa:	b2da      	uxtb	r2, r3
 800d3fc:	4b09      	ldr	r3, [pc, #36]	; (800d424 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800d3fe:	701a      	strb	r2, [r3, #0]
		counterGame++;
 800d400:	4b09      	ldr	r3, [pc, #36]	; (800d428 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800d402:	881b      	ldrh	r3, [r3, #0]
 800d404:	3301      	adds	r3, #1
 800d406:	b29a      	uxth	r2, r3
 800d408:	4b07      	ldr	r3, [pc, #28]	; (800d428 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800d40a:	801a      	strh	r2, [r3, #0]
}
 800d40c:	bf00      	nop
 800d40e:	370c      	adds	r7, #12
 800d410:	46bd      	mov	sp, r7
 800d412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d416:	4770      	bx	lr
 800d418:	40001000 	.word	0x40001000
 800d41c:	20000311 	.word	0x20000311
 800d420:	40001400 	.word	0x40001400
 800d424:	20000042 	.word	0x20000042
 800d428:	20000316 	.word	0x20000316

0800d42c <readPlayers>:

void readPlayers(void)
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b09c      	sub	sp, #112	; 0x70
 800d430:	af00      	add	r7, sp, #0
	 HAL_ADC_Stop_IT(&hadc1);
 800d432:	4829      	ldr	r0, [pc, #164]	; (800d4d8 <readPlayers+0xac>)
 800d434:	f7f5 fbb8 	bl	8002ba8 <HAL_ADC_Stop_IT>

	char string[100] = {'\0'};
 800d438:	1d3b      	adds	r3, r7, #4
 800d43a:	2264      	movs	r2, #100	; 0x64
 800d43c:	2100      	movs	r1, #0
 800d43e:	4618      	mov	r0, r3
 800d440:	f001 fea8 	bl	800f194 <memset>
	UINT nBytes;
	uint8_t i = 0;
 800d444:	2300      	movs	r3, #0
 800d446:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

	 if( f_mount (&SDFatFS, SDPath, 0)!=FR_OK)
 800d44a:	2200      	movs	r2, #0
 800d44c:	4923      	ldr	r1, [pc, #140]	; (800d4dc <readPlayers+0xb0>)
 800d44e:	4824      	ldr	r0, [pc, #144]	; (800d4e0 <readPlayers+0xb4>)
 800d450:	f7fe f980 	bl	800b754 <f_mount>
 800d454:	4603      	mov	r3, r0
 800d456:	2b00      	cmp	r3, #0
 800d458:	d001      	beq.n	800d45e <readPlayers+0x32>
		 Error_Handler();
 800d45a:	f001 fa35 	bl	800e8c8 <Error_Handler>

	 if(f_open(&SDFile, "Read.txt", FA_READ)!=FR_OK)
 800d45e:	2201      	movs	r2, #1
 800d460:	4920      	ldr	r1, [pc, #128]	; (800d4e4 <readPlayers+0xb8>)
 800d462:	4821      	ldr	r0, [pc, #132]	; (800d4e8 <readPlayers+0xbc>)
 800d464:	f7fe f9bc 	bl	800b7e0 <f_open>
 800d468:	4603      	mov	r3, r0
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d001      	beq.n	800d472 <readPlayers+0x46>
		 Error_Handler();
 800d46e:	f001 fa2b 	bl	800e8c8 <Error_Handler>

	 if(f_read(&SDFile, string, sizeof(string), &nBytes) !=FR_OK)
 800d472:	463b      	mov	r3, r7
 800d474:	1d39      	adds	r1, r7, #4
 800d476:	2264      	movs	r2, #100	; 0x64
 800d478:	481b      	ldr	r0, [pc, #108]	; (800d4e8 <readPlayers+0xbc>)
 800d47a:	f7fe fb6f 	bl	800bb5c <f_read>
 800d47e:	4603      	mov	r3, r0
 800d480:	2b00      	cmp	r3, #0
 800d482:	d001      	beq.n	800d488 <readPlayers+0x5c>
		 Error_Handler();
 800d484:	f001 fa20 	bl	800e8c8 <Error_Handler>

	 // split strings: strtok no funciona como debe ser
	 // lo que esta a hacer es poner un \0 donde aparece el \r
	 strtok(string, "\r");//strtok deberia retornar un puntero para donde aparece el \r
 800d488:	1d3b      	adds	r3, r7, #4
 800d48a:	4918      	ldr	r1, [pc, #96]	; (800d4ec <readPlayers+0xc0>)
 800d48c:	4618      	mov	r0, r3
 800d48e:	f001 feb1 	bl	800f1f4 <strtok>

	 strcpy(p1Name, string);
 800d492:	1d3b      	adds	r3, r7, #4
 800d494:	4619      	mov	r1, r3
 800d496:	4816      	ldr	r0, [pc, #88]	; (800d4f0 <readPlayers+0xc4>)
 800d498:	f001 fea4 	bl	800f1e4 <strcpy>

	 char *aux;
	 for(aux = string; *aux !='\0'; aux++);
 800d49c:	1d3b      	adds	r3, r7, #4
 800d49e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d4a0:	e002      	b.n	800d4a8 <readPlayers+0x7c>
 800d4a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4a4:	3301      	adds	r3, #1
 800d4a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d4a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4aa:	781b      	ldrb	r3, [r3, #0]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d1f8      	bne.n	800d4a2 <readPlayers+0x76>

	 // mover para despues del primer \0 y para despues del \n
	 aux++;
 800d4b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4b2:	3301      	adds	r3, #1
 800d4b4:	66fb      	str	r3, [r7, #108]	; 0x6c
	 aux++;
 800d4b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4b8:	3301      	adds	r3, #1
 800d4ba:	66fb      	str	r3, [r7, #108]	; 0x6c

	 strcpy(p2Name, aux);
 800d4bc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d4be:	480d      	ldr	r0, [pc, #52]	; (800d4f4 <readPlayers+0xc8>)
 800d4c0:	f001 fe90 	bl	800f1e4 <strcpy>

	 f_close(&SDFile);
 800d4c4:	4808      	ldr	r0, [pc, #32]	; (800d4e8 <readPlayers+0xbc>)
 800d4c6:	f7fe fe7b 	bl	800c1c0 <f_close>

	  HAL_ADC_Start_IT(&hadc1);
 800d4ca:	4803      	ldr	r0, [pc, #12]	; (800d4d8 <readPlayers+0xac>)
 800d4cc:	f7f5 faa2 	bl	8002a14 <HAL_ADC_Start_IT>
}
 800d4d0:	bf00      	nop
 800d4d2:	3770      	adds	r7, #112	; 0x70
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	bd80      	pop	{r7, pc}
 800d4d8:	20000a98 	.word	0x20000a98
 800d4dc:	20000484 	.word	0x20000484
 800d4e0:	200006b8 	.word	0x200006b8
 800d4e4:	0800fb00 	.word	0x0800fb00
 800d4e8:	20000488 	.word	0x20000488
 800d4ec:	0800fb0c 	.word	0x0800fb0c
 800d4f0:	20000ae0 	.word	0x20000ae0
 800d4f4:	20000b40 	.word	0x20000b40

0800d4f8 <insideRectangle>:

//retorna 1 si tocamos dentro del rectangulo y 0 en caso contrario
uint8_t insideRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height)
{
 800d4f8:	b490      	push	{r4, r7}
 800d4fa:	b082      	sub	sp, #8
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	4604      	mov	r4, r0
 800d500:	4608      	mov	r0, r1
 800d502:	4611      	mov	r1, r2
 800d504:	461a      	mov	r2, r3
 800d506:	4623      	mov	r3, r4
 800d508:	80fb      	strh	r3, [r7, #6]
 800d50a:	4603      	mov	r3, r0
 800d50c:	80bb      	strh	r3, [r7, #4]
 800d50e:	460b      	mov	r3, r1
 800d510:	807b      	strh	r3, [r7, #2]
 800d512:	4613      	mov	r3, r2
 800d514:	803b      	strh	r3, [r7, #0]
	if(touchedPosX >= x && touchedPosX <= x+width)
 800d516:	4b11      	ldr	r3, [pc, #68]	; (800d55c <insideRectangle+0x64>)
 800d518:	881b      	ldrh	r3, [r3, #0]
 800d51a:	88fa      	ldrh	r2, [r7, #6]
 800d51c:	429a      	cmp	r2, r3
 800d51e:	d816      	bhi.n	800d54e <insideRectangle+0x56>
 800d520:	4b0e      	ldr	r3, [pc, #56]	; (800d55c <insideRectangle+0x64>)
 800d522:	881b      	ldrh	r3, [r3, #0]
 800d524:	4619      	mov	r1, r3
 800d526:	88fa      	ldrh	r2, [r7, #6]
 800d528:	887b      	ldrh	r3, [r7, #2]
 800d52a:	4413      	add	r3, r2
 800d52c:	4299      	cmp	r1, r3
 800d52e:	dc0e      	bgt.n	800d54e <insideRectangle+0x56>
	{
		if(touchedPosY >= y && touchedPosY <= y+height)
 800d530:	4b0b      	ldr	r3, [pc, #44]	; (800d560 <insideRectangle+0x68>)
 800d532:	881b      	ldrh	r3, [r3, #0]
 800d534:	88ba      	ldrh	r2, [r7, #4]
 800d536:	429a      	cmp	r2, r3
 800d538:	d809      	bhi.n	800d54e <insideRectangle+0x56>
 800d53a:	4b09      	ldr	r3, [pc, #36]	; (800d560 <insideRectangle+0x68>)
 800d53c:	881b      	ldrh	r3, [r3, #0]
 800d53e:	4619      	mov	r1, r3
 800d540:	88ba      	ldrh	r2, [r7, #4]
 800d542:	883b      	ldrh	r3, [r7, #0]
 800d544:	4413      	add	r3, r2
 800d546:	4299      	cmp	r1, r3
 800d548:	dc01      	bgt.n	800d54e <insideRectangle+0x56>
		{
			return 1;
 800d54a:	2301      	movs	r3, #1
 800d54c:	e000      	b.n	800d550 <insideRectangle+0x58>
		}
	}

	return 0;
 800d54e:	2300      	movs	r3, #0

}
 800d550:	4618      	mov	r0, r3
 800d552:	3708      	adds	r7, #8
 800d554:	46bd      	mov	sp, r7
 800d556:	bc90      	pop	{r4, r7}
 800d558:	4770      	bx	lr
 800d55a:	bf00      	nop
 800d55c:	2000092a 	.word	0x2000092a
 800d560:	2000092c 	.word	0x2000092c

0800d564 <mainMenu>:

//función del menú de inicio, en ella vemos si el utilizador cargó dentro de algún rectangulo
void mainMenu(void)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b084      	sub	sp, #16
 800d568:	af00      	add	r7, sp, #0
	char tempStr1[10];

	if(insideRectangle(xPlayerGame, yPlayerGame, widthPlayerGame, heightPlayerGame)==1)
 800d56a:	2346      	movs	r3, #70	; 0x46
 800d56c:	f240 1227 	movw	r2, #295	; 0x127
 800d570:	21b4      	movs	r1, #180	; 0xb4
 800d572:	20fa      	movs	r0, #250	; 0xfa
 800d574:	f7ff ffc0 	bl	800d4f8 <insideRectangle>
 800d578:	4603      	mov	r3, r0
 800d57a:	2b01      	cmp	r3, #1
 800d57c:	d11e      	bne.n	800d5bc <mainMenu+0x58>
	{
    	BSP_LCD_Clear(LCD_COLOR_WHITE);
 800d57e:	f04f 30ff 	mov.w	r0, #4294967295
 800d582:	f7f3 fff1 	bl	8001568 <BSP_LCD_Clear>

		readPlayers();
 800d586:	f7ff ff51 	bl	800d42c <readPlayers>

		if(numberPlayers == 1)
 800d58a:	4b3c      	ldr	r3, [pc, #240]	; (800d67c <mainMenu+0x118>)
 800d58c:	781b      	ldrb	r3, [r3, #0]
 800d58e:	2b01      	cmp	r3, #1
 800d590:	d103      	bne.n	800d59a <mainMenu+0x36>
		{
			strcpy(p2Name, "ARM");
 800d592:	4b3b      	ldr	r3, [pc, #236]	; (800d680 <mainMenu+0x11c>)
 800d594:	4a3b      	ldr	r2, [pc, #236]	; (800d684 <mainMenu+0x120>)
 800d596:	6810      	ldr	r0, [r2, #0]
 800d598:	6018      	str	r0, [r3, #0]
		}

		init_game(p1Name, p2Name);
 800d59a:	4939      	ldr	r1, [pc, #228]	; (800d680 <mainMenu+0x11c>)
 800d59c:	483a      	ldr	r0, [pc, #232]	; (800d688 <mainMenu+0x124>)
 800d59e:	f7fe ffcd 	bl	800c53c <init_game>
		programPhase=2;
 800d5a2:	4b3a      	ldr	r3, [pc, #232]	; (800d68c <mainMenu+0x128>)
 800d5a4:	2202      	movs	r2, #2
 800d5a6:	701a      	strb	r2, [r3, #0]
		counterGame = 0;
 800d5a8:	4b39      	ldr	r3, [pc, #228]	; (800d690 <mainMenu+0x12c>)
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	801a      	strh	r2, [r3, #0]
		passCounter1 = 0;
 800d5ae:	4b39      	ldr	r3, [pc, #228]	; (800d694 <mainMenu+0x130>)
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	701a      	strb	r2, [r3, #0]
		passCounter2 = 0;
 800d5b4:	4b38      	ldr	r3, [pc, #224]	; (800d698 <mainMenu+0x134>)
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	701a      	strb	r2, [r3, #0]

		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
		sprintf(tempStr1, "2 PLAYERS");
		BSP_LCD_DisplayStringAt(80, 350, (uint8_t*) tempStr1, RIGHT_MODE);
	}
}
 800d5ba:	e05b      	b.n	800d674 <mainMenu+0x110>
	else if (insideRectangle(x1Player, y1Player, width1Player, height1Player)==1)
 800d5bc:	2341      	movs	r3, #65	; 0x41
 800d5be:	22b9      	movs	r2, #185	; 0xb9
 800d5c0:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800d5c4:	2037      	movs	r0, #55	; 0x37
 800d5c6:	f7ff ff97 	bl	800d4f8 <insideRectangle>
 800d5ca:	4603      	mov	r3, r0
 800d5cc:	2b01      	cmp	r3, #1
 800d5ce:	d123      	bne.n	800d618 <mainMenu+0xb4>
		numberPlayers=1;
 800d5d0:	4b2a      	ldr	r3, [pc, #168]	; (800d67c <mainMenu+0x118>)
 800d5d2:	2201      	movs	r2, #1
 800d5d4:	701a      	strb	r2, [r3, #0]
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800d5d6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800d5da:	f7f3 ff63 	bl	80014a4 <BSP_LCD_SetTextColor>
		sprintf(tempStr1, "1 PLAYER");
 800d5de:	1d3b      	adds	r3, r7, #4
 800d5e0:	4a2e      	ldr	r2, [pc, #184]	; (800d69c <mainMenu+0x138>)
 800d5e2:	ca07      	ldmia	r2, {r0, r1, r2}
 800d5e4:	c303      	stmia	r3!, {r0, r1}
 800d5e6:	701a      	strb	r2, [r3, #0]
		BSP_LCD_DisplayStringAt(80, 350, (uint8_t*) tempStr1, LEFT_MODE);
 800d5e8:	1d3a      	adds	r2, r7, #4
 800d5ea:	2303      	movs	r3, #3
 800d5ec:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800d5f0:	2050      	movs	r0, #80	; 0x50
 800d5f2:	f7f4 f825 	bl	8001640 <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800d5f6:	f04f 30ff 	mov.w	r0, #4294967295
 800d5fa:	f7f3 ff53 	bl	80014a4 <BSP_LCD_SetTextColor>
		sprintf(tempStr1, "2 PLAYERS");
 800d5fe:	4a28      	ldr	r2, [pc, #160]	; (800d6a0 <mainMenu+0x13c>)
 800d600:	1d3b      	adds	r3, r7, #4
 800d602:	ca07      	ldmia	r2, {r0, r1, r2}
 800d604:	c303      	stmia	r3!, {r0, r1}
 800d606:	801a      	strh	r2, [r3, #0]
		BSP_LCD_DisplayStringAt(80, 350, (uint8_t*) tempStr1, RIGHT_MODE);
 800d608:	1d3a      	adds	r2, r7, #4
 800d60a:	2302      	movs	r3, #2
 800d60c:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800d610:	2050      	movs	r0, #80	; 0x50
 800d612:	f7f4 f815 	bl	8001640 <BSP_LCD_DisplayStringAt>
}
 800d616:	e02d      	b.n	800d674 <mainMenu+0x110>
	else if (insideRectangle(x2Players, y2Players, width2Players, height2Players)==1)
 800d618:	2341      	movs	r3, #65	; 0x41
 800d61a:	22b9      	movs	r2, #185	; 0xb9
 800d61c:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800d620:	f240 2026 	movw	r0, #550	; 0x226
 800d624:	f7ff ff68 	bl	800d4f8 <insideRectangle>
 800d628:	4603      	mov	r3, r0
 800d62a:	2b01      	cmp	r3, #1
 800d62c:	d122      	bne.n	800d674 <mainMenu+0x110>
		numberPlayers=2;
 800d62e:	4b13      	ldr	r3, [pc, #76]	; (800d67c <mainMenu+0x118>)
 800d630:	2202      	movs	r2, #2
 800d632:	701a      	strb	r2, [r3, #0]
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800d634:	f04f 30ff 	mov.w	r0, #4294967295
 800d638:	f7f3 ff34 	bl	80014a4 <BSP_LCD_SetTextColor>
		sprintf(tempStr1, "1 PLAYER");
 800d63c:	1d3b      	adds	r3, r7, #4
 800d63e:	4a17      	ldr	r2, [pc, #92]	; (800d69c <mainMenu+0x138>)
 800d640:	ca07      	ldmia	r2, {r0, r1, r2}
 800d642:	c303      	stmia	r3!, {r0, r1}
 800d644:	701a      	strb	r2, [r3, #0]
		BSP_LCD_DisplayStringAt(80, 350, (uint8_t*) tempStr1, LEFT_MODE);
 800d646:	1d3a      	adds	r2, r7, #4
 800d648:	2303      	movs	r3, #3
 800d64a:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800d64e:	2050      	movs	r0, #80	; 0x50
 800d650:	f7f3 fff6 	bl	8001640 <BSP_LCD_DisplayStringAt>
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800d654:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800d658:	f7f3 ff24 	bl	80014a4 <BSP_LCD_SetTextColor>
		sprintf(tempStr1, "2 PLAYERS");
 800d65c:	4a10      	ldr	r2, [pc, #64]	; (800d6a0 <mainMenu+0x13c>)
 800d65e:	1d3b      	adds	r3, r7, #4
 800d660:	ca07      	ldmia	r2, {r0, r1, r2}
 800d662:	c303      	stmia	r3!, {r0, r1}
 800d664:	801a      	strh	r2, [r3, #0]
		BSP_LCD_DisplayStringAt(80, 350, (uint8_t*) tempStr1, RIGHT_MODE);
 800d666:	1d3a      	adds	r2, r7, #4
 800d668:	2302      	movs	r3, #2
 800d66a:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800d66e:	2050      	movs	r0, #80	; 0x50
 800d670:	f7f3 ffe6 	bl	8001640 <BSP_LCD_DisplayStringAt>
}
 800d674:	bf00      	nop
 800d676:	3710      	adds	r7, #16
 800d678:	46bd      	mov	sp, r7
 800d67a:	bd80      	pop	{r7, pc}
 800d67c:	20000041 	.word	0x20000041
 800d680:	20000b40 	.word	0x20000b40
 800d684:	0800fb10 	.word	0x0800fb10
 800d688:	20000ae0 	.word	0x20000ae0
 800d68c:	20000043 	.word	0x20000043
 800d690:	20000316 	.word	0x20000316
 800d694:	20000312 	.word	0x20000312
 800d698:	20000313 	.word	0x20000313
 800d69c:	0800fb14 	.word	0x0800fb14
 800d6a0:	0800fb20 	.word	0x0800fb20

0800d6a4 <printMainMenu>:

//imprime el menú principal
void printMainMenu(void)
{
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	af00      	add	r7, sp, #0
	BSP_LCD_SetBackColor(backColor);
 800d6a8:	481e      	ldr	r0, [pc, #120]	; (800d724 <printMainMenu+0x80>)
 800d6aa:	f7f3 ff13 	bl	80014d4 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800d6ae:	f04f 30ff 	mov.w	r0, #4294967295
 800d6b2:	f7f3 fef7 	bl	80014a4 <BSP_LCD_SetTextColor>

    BSP_LCD_DrawBitmap(0, 0, image);
 800d6b6:	4a1c      	ldr	r2, [pc, #112]	; (800d728 <printMainMenu+0x84>)
 800d6b8:	2100      	movs	r1, #0
 800d6ba:	2000      	movs	r0, #0
 800d6bc:	f7f4 f9b2 	bl	8001a24 <BSP_LCD_DrawBitmap>

	BSP_LCD_DisplayStringAt(0, 10, (uint8_t *)"REVERSI", CENTER_MODE);//funcion quiere uint8_t
 800d6c0:	2301      	movs	r3, #1
 800d6c2:	4a1a      	ldr	r2, [pc, #104]	; (800d72c <printMainMenu+0x88>)
 800d6c4:	210a      	movs	r1, #10
 800d6c6:	2000      	movs	r0, #0
 800d6c8:	f7f3 ffba 	bl	8001640 <BSP_LCD_DisplayStringAt>

	////////////////////////////////////
	//JUGAR JUEGO

	sprintf(auxStr, "PLAY GAME");
 800d6cc:	4a18      	ldr	r2, [pc, #96]	; (800d730 <printMainMenu+0x8c>)
 800d6ce:	4b19      	ldr	r3, [pc, #100]	; (800d734 <printMainMenu+0x90>)
 800d6d0:	cb03      	ldmia	r3!, {r0, r1}
 800d6d2:	6010      	str	r0, [r2, #0]
 800d6d4:	6051      	str	r1, [r2, #4]
 800d6d6:	881b      	ldrh	r3, [r3, #0]
 800d6d8:	8113      	strh	r3, [r2, #8]
	BSP_LCD_DisplayStringAt(0, 200, (uint8_t*) auxStr, CENTER_MODE);
 800d6da:	2301      	movs	r3, #1
 800d6dc:	4a14      	ldr	r2, [pc, #80]	; (800d730 <printMainMenu+0x8c>)
 800d6de:	21c8      	movs	r1, #200	; 0xc8
 800d6e0:	2000      	movs	r0, #0
 800d6e2:	f7f3 ffad 	bl	8001640 <BSP_LCD_DisplayStringAt>

	////////////////////////////////////
	//1 JUGADOR

	sprintf(auxStr, "1 PLAYER");
 800d6e6:	4a12      	ldr	r2, [pc, #72]	; (800d730 <printMainMenu+0x8c>)
 800d6e8:	4b13      	ldr	r3, [pc, #76]	; (800d738 <printMainMenu+0x94>)
 800d6ea:	cb03      	ldmia	r3!, {r0, r1}
 800d6ec:	6010      	str	r0, [r2, #0]
 800d6ee:	6051      	str	r1, [r2, #4]
 800d6f0:	781b      	ldrb	r3, [r3, #0]
 800d6f2:	7213      	strb	r3, [r2, #8]
	BSP_LCD_DisplayStringAt(80, 350, (uint8_t*) auxStr, LEFT_MODE);
 800d6f4:	2303      	movs	r3, #3
 800d6f6:	4a0e      	ldr	r2, [pc, #56]	; (800d730 <printMainMenu+0x8c>)
 800d6f8:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800d6fc:	2050      	movs	r0, #80	; 0x50
 800d6fe:	f7f3 ff9f 	bl	8001640 <BSP_LCD_DisplayStringAt>

	////////////////////////////////////
	//2 JUGADORES

	sprintf(auxStr, "2 PLAYERS");
 800d702:	4a0b      	ldr	r2, [pc, #44]	; (800d730 <printMainMenu+0x8c>)
 800d704:	4b0d      	ldr	r3, [pc, #52]	; (800d73c <printMainMenu+0x98>)
 800d706:	cb03      	ldmia	r3!, {r0, r1}
 800d708:	6010      	str	r0, [r2, #0]
 800d70a:	6051      	str	r1, [r2, #4]
 800d70c:	881b      	ldrh	r3, [r3, #0]
 800d70e:	8113      	strh	r3, [r2, #8]
	BSP_LCD_DisplayStringAt(80, 350, (uint8_t*) auxStr, RIGHT_MODE);
 800d710:	2302      	movs	r3, #2
 800d712:	4a07      	ldr	r2, [pc, #28]	; (800d730 <printMainMenu+0x8c>)
 800d714:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800d718:	2050      	movs	r0, #80	; 0x50
 800d71a:	f7f3 ff91 	bl	8001640 <BSP_LCD_DisplayStringAt>
}
 800d71e:	bf00      	nop
 800d720:	bd80      	pop	{r7, pc}
 800d722:	bf00      	nop
 800d724:	ffac7644 	.word	0xffac7644
 800d728:	080119e8 	.word	0x080119e8
 800d72c:	0800fb2c 	.word	0x0800fb2c
 800d730:	2000094c 	.word	0x2000094c
 800d734:	0800fb34 	.word	0x0800fb34
 800d738:	0800fb14 	.word	0x0800fb14
 800d73c:	0800fb20 	.word	0x0800fb20

0800d740 <printTime>:

//función que imprime el tiempo de jugada y el tiempo total
void printTime(void)
{
 800d740:	b580      	push	{r7, lr}
 800d742:	af00      	add	r7, sp, #0
	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800d744:	4829      	ldr	r0, [pc, #164]	; (800d7ec <printTime+0xac>)
 800d746:	f7f3 fead 	bl	80014a4 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800d74a:	f04f 30ff 	mov.w	r0, #4294967295
 800d74e:	f7f3 fec1 	bl	80014d4 <BSP_LCD_SetBackColor>

	sprintf(auxStr, "Time remaining: %.2d", counterTurn);
 800d752:	4b27      	ldr	r3, [pc, #156]	; (800d7f0 <printTime+0xb0>)
 800d754:	781b      	ldrb	r3, [r3, #0]
 800d756:	461a      	mov	r2, r3
 800d758:	4926      	ldr	r1, [pc, #152]	; (800d7f4 <printTime+0xb4>)
 800d75a:	4827      	ldr	r0, [pc, #156]	; (800d7f8 <printTime+0xb8>)
 800d75c:	f001 fd22 	bl	800f1a4 <siprintf>
	BSP_LCD_DisplayStringAt(3, LINE(18), (uint8_t*) auxStr, RIGHT_MODE);
 800d760:	f7f3 feec 	bl	800153c <BSP_LCD_GetFont>
 800d764:	4603      	mov	r3, r0
 800d766:	88db      	ldrh	r3, [r3, #6]
 800d768:	461a      	mov	r2, r3
 800d76a:	00d2      	lsls	r2, r2, #3
 800d76c:	4413      	add	r3, r2
 800d76e:	005b      	lsls	r3, r3, #1
 800d770:	b299      	uxth	r1, r3
 800d772:	2302      	movs	r3, #2
 800d774:	4a20      	ldr	r2, [pc, #128]	; (800d7f8 <printTime+0xb8>)
 800d776:	2003      	movs	r0, #3
 800d778:	f7f3 ff62 	bl	8001640 <BSP_LCD_DisplayStringAt>

	counterMin = counterGame/60;
 800d77c:	4b1f      	ldr	r3, [pc, #124]	; (800d7fc <printTime+0xbc>)
 800d77e:	881b      	ldrh	r3, [r3, #0]
 800d780:	4a1f      	ldr	r2, [pc, #124]	; (800d800 <printTime+0xc0>)
 800d782:	fba2 2303 	umull	r2, r3, r2, r3
 800d786:	095b      	lsrs	r3, r3, #5
 800d788:	b29b      	uxth	r3, r3
 800d78a:	b2da      	uxtb	r2, r3
 800d78c:	4b1d      	ldr	r3, [pc, #116]	; (800d804 <printTime+0xc4>)
 800d78e:	701a      	strb	r2, [r3, #0]

	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800d790:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800d794:	f7f3 fe86 	bl	80014a4 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800d798:	f04f 30ff 	mov.w	r0, #4294967295
 800d79c:	f7f3 fe9a 	bl	80014d4 <BSP_LCD_SetBackColor>

	sprintf(auxStr, "Total time: %.2d:%.2d", counterMin, counterGame %60);//modulo de los segundos, que es el resto de la division entera
 800d7a0:	4b18      	ldr	r3, [pc, #96]	; (800d804 <printTime+0xc4>)
 800d7a2:	781b      	ldrb	r3, [r3, #0]
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	4b15      	ldr	r3, [pc, #84]	; (800d7fc <printTime+0xbc>)
 800d7a8:	881a      	ldrh	r2, [r3, #0]
 800d7aa:	4b15      	ldr	r3, [pc, #84]	; (800d800 <printTime+0xc0>)
 800d7ac:	fba3 1302 	umull	r1, r3, r3, r2
 800d7b0:	0959      	lsrs	r1, r3, #5
 800d7b2:	460b      	mov	r3, r1
 800d7b4:	011b      	lsls	r3, r3, #4
 800d7b6:	1a5b      	subs	r3, r3, r1
 800d7b8:	009b      	lsls	r3, r3, #2
 800d7ba:	1ad3      	subs	r3, r2, r3
 800d7bc:	b29b      	uxth	r3, r3
 800d7be:	4602      	mov	r2, r0
 800d7c0:	4911      	ldr	r1, [pc, #68]	; (800d808 <printTime+0xc8>)
 800d7c2:	480d      	ldr	r0, [pc, #52]	; (800d7f8 <printTime+0xb8>)
 800d7c4:	f001 fcee 	bl	800f1a4 <siprintf>
	BSP_LCD_DisplayStringAt(10, LINE(11), (uint8_t*) auxStr, RIGHT_MODE);
 800d7c8:	f7f3 feb8 	bl	800153c <BSP_LCD_GetFont>
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	88db      	ldrh	r3, [r3, #6]
 800d7d0:	461a      	mov	r2, r3
 800d7d2:	0092      	lsls	r2, r2, #2
 800d7d4:	441a      	add	r2, r3
 800d7d6:	0052      	lsls	r2, r2, #1
 800d7d8:	4413      	add	r3, r2
 800d7da:	b299      	uxth	r1, r3
 800d7dc:	2302      	movs	r3, #2
 800d7de:	4a06      	ldr	r2, [pc, #24]	; (800d7f8 <printTime+0xb8>)
 800d7e0:	200a      	movs	r0, #10
 800d7e2:	f7f3 ff2d 	bl	8001640 <BSP_LCD_DisplayStringAt>
}
 800d7e6:	bf00      	nop
 800d7e8:	bd80      	pop	{r7, pc}
 800d7ea:	bf00      	nop
 800d7ec:	ffff0000 	.word	0xffff0000
 800d7f0:	20000042 	.word	0x20000042
 800d7f4:	0800fb40 	.word	0x0800fb40
 800d7f8:	2000094c 	.word	0x2000094c
 800d7fc:	20000316 	.word	0x20000316
 800d800:	88888889 	.word	0x88888889
 800d804:	20000314 	.word	0x20000314
 800d808:	0800fb58 	.word	0x0800fb58

0800d80c <printTemperature>:

//función que imprime la temperatura en la pantalla actualizada cada dos segundos
void printTemperature(void)
{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b082      	sub	sp, #8
 800d810:	af00      	add	r7, sp, #0
	int temperature;

	if(twoSecondsPass == 1)
 800d812:	4b20      	ldr	r3, [pc, #128]	; (800d894 <printTemperature+0x88>)
 800d814:	781b      	ldrb	r3, [r3, #0]
 800d816:	2b01      	cmp	r3, #1
 800d818:	d137      	bne.n	800d88a <printTemperature+0x7e>
    {
	    temperature = ((((ADC1value * VREF)/MAX_CONVERTED_VALUE) - VSENS_AT_AMBIENT_TEMP) * 10 / AVG_SLOPE) + AMBIENT_TEMP;//convierte el valor de ADC para temperatura y lo guarda
 800d81a:	4b1f      	ldr	r3, [pc, #124]	; (800d898 <printTemperature+0x8c>)
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	f640 42e4 	movw	r2, #3300	; 0xce4
 800d822:	fb02 f303 	mul.w	r3, r2, r3
 800d826:	4a1d      	ldr	r2, [pc, #116]	; (800d89c <printTemperature+0x90>)
 800d828:	fb82 1203 	smull	r1, r2, r2, r3
 800d82c:	441a      	add	r2, r3
 800d82e:	12d2      	asrs	r2, r2, #11
 800d830:	17db      	asrs	r3, r3, #31
 800d832:	1ad3      	subs	r3, r2, r3
 800d834:	f5a3 723e 	sub.w	r2, r3, #760	; 0x2f8
 800d838:	4613      	mov	r3, r2
 800d83a:	009b      	lsls	r3, r3, #2
 800d83c:	4413      	add	r3, r2
 800d83e:	005b      	lsls	r3, r3, #1
 800d840:	4a17      	ldr	r2, [pc, #92]	; (800d8a0 <printTemperature+0x94>)
 800d842:	fb82 1203 	smull	r1, r2, r2, r3
 800d846:	10d2      	asrs	r2, r2, #3
 800d848:	17db      	asrs	r3, r3, #31
 800d84a:	1ad3      	subs	r3, r2, r3
 800d84c:	3319      	adds	r3, #25
 800d84e:	607b      	str	r3, [r7, #4]

	    // Display temperature on the lcd

	    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800d850:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800d854:	f7f3 fe26 	bl	80014a4 <BSP_LCD_SetTextColor>
	    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800d858:	f04f 30ff 	mov.w	r0, #4294967295
 800d85c:	f7f3 fe3a 	bl	80014d4 <BSP_LCD_SetBackColor>

    	sprintf(auxStr, "Temperature %d C", temperature);
 800d860:	687a      	ldr	r2, [r7, #4]
 800d862:	4910      	ldr	r1, [pc, #64]	; (800d8a4 <printTemperature+0x98>)
 800d864:	4810      	ldr	r0, [pc, #64]	; (800d8a8 <printTemperature+0x9c>)
 800d866:	f001 fc9d 	bl	800f1a4 <siprintf>
	    BSP_LCD_DisplayStringAt(20, LINE(3), (uint8_t*) auxStr, RIGHT_MODE);
 800d86a:	f7f3 fe67 	bl	800153c <BSP_LCD_GetFont>
 800d86e:	4603      	mov	r3, r0
 800d870:	88db      	ldrh	r3, [r3, #6]
 800d872:	461a      	mov	r2, r3
 800d874:	0052      	lsls	r2, r2, #1
 800d876:	4413      	add	r3, r2
 800d878:	b299      	uxth	r1, r3
 800d87a:	2302      	movs	r3, #2
 800d87c:	4a0a      	ldr	r2, [pc, #40]	; (800d8a8 <printTemperature+0x9c>)
 800d87e:	2014      	movs	r0, #20
 800d880:	f7f3 fede 	bl	8001640 <BSP_LCD_DisplayStringAt>

	    twoSecondsPass=0;
 800d884:	4b03      	ldr	r3, [pc, #12]	; (800d894 <printTemperature+0x88>)
 800d886:	2200      	movs	r2, #0
 800d888:	701a      	strb	r2, [r3, #0]
    }
}
 800d88a:	bf00      	nop
 800d88c:	3708      	adds	r7, #8
 800d88e:	46bd      	mov	sp, r7
 800d890:	bd80      	pop	{r7, pc}
 800d892:	bf00      	nop
 800d894:	20000311 	.word	0x20000311
 800d898:	20000b60 	.word	0x20000b60
 800d89c:	80080081 	.word	0x80080081
 800d8a0:	51eb851f 	.word	0x51eb851f
 800d8a4:	0800fb70 	.word	0x0800fb70
 800d8a8:	2000094c 	.word	0x2000094c

0800d8ac <mainCycle>:

//función importante del programa donde pasa todo el juego
uint8_t mainCycle(void)
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b094      	sub	sp, #80	; 0x50
 800d8b0:	af02      	add	r7, sp, #8
    uint8_t availablePosition[8*8], numAvailablePosition;

	////////////////////////////
	// Player 1

	uint8_t validPosition = 0;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	getAvailableMoves(1, availablePosition, &numAvailablePosition);//recibe el jugador, las posiciones disponibles y el numero de pos. disponibles
 800d8b8:	1cfa      	adds	r2, r7, #3
 800d8ba:	1d3b      	adds	r3, r7, #4
 800d8bc:	4619      	mov	r1, r3
 800d8be:	2001      	movs	r0, #1
 800d8c0:	f7ff fa4a 	bl	800cd58 <getAvailableMoves>

	if(numAvailablePosition == 0)
 800d8c4:	78fb      	ldrb	r3, [r7, #3]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d101      	bne.n	800d8ce <mainCycle+0x22>
	{
		return 0;// 0 significa que no hay posiciones disponibles
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	e103      	b.n	800dad6 <mainCycle+0x22a>
	}

	sprintf(auxStr, "%s Turn", p1Name);
 800d8ce:	4a84      	ldr	r2, [pc, #528]	; (800dae0 <mainCycle+0x234>)
 800d8d0:	4984      	ldr	r1, [pc, #528]	; (800dae4 <mainCycle+0x238>)
 800d8d2:	4885      	ldr	r0, [pc, #532]	; (800dae8 <mainCycle+0x23c>)
 800d8d4:	f001 fc66 	bl	800f1a4 <siprintf>
	BSP_LCD_DisplayStringAt(45, LINE(17), (uint8_t*) auxStr, RIGHT_MODE);
 800d8d8:	f7f3 fe30 	bl	800153c <BSP_LCD_GetFont>
 800d8dc:	4603      	mov	r3, r0
 800d8de:	88db      	ldrh	r3, [r3, #6]
 800d8e0:	461a      	mov	r2, r3
 800d8e2:	0112      	lsls	r2, r2, #4
 800d8e4:	4413      	add	r3, r2
 800d8e6:	b299      	uxth	r1, r3
 800d8e8:	2302      	movs	r3, #2
 800d8ea:	4a7f      	ldr	r2, [pc, #508]	; (800dae8 <mainCycle+0x23c>)
 800d8ec:	202d      	movs	r0, #45	; 0x2d
 800d8ee:	f7f3 fea7 	bl	8001640 <BSP_LCD_DisplayStringAt>
	counterTurn = 20;
 800d8f2:	4b7e      	ldr	r3, [pc, #504]	; (800daec <mainCycle+0x240>)
 800d8f4:	2214      	movs	r2, #20
 800d8f6:	701a      	strb	r2, [r3, #0]

	while (validPosition == 0)//mientras la posicion del usuario no fuera valida permanece en el while
 800d8f8:	e045      	b.n	800d986 <mainCycle+0xda>
	{
		printTime();
 800d8fa:	f7ff ff21 	bl	800d740 <printTime>
		  if(insideRectangle(x2Players, y2Players, width2Players, height2Players)==1)
 800d8fe:	2341      	movs	r3, #65	; 0x41
 800d900:	22b9      	movs	r2, #185	; 0xb9
 800d902:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800d906:	f240 2026 	movw	r0, #550	; 0x226
 800d90a:	f7ff fdf5 	bl	800d4f8 <insideRectangle>
 800d90e:	4603      	mov	r3, r0
 800d910:	2b01      	cmp	r3, #1
 800d912:	d108      	bne.n	800d926 <mainCycle+0x7a>
		  {
				counterTurn = 20;
 800d914:	4b75      	ldr	r3, [pc, #468]	; (800daec <mainCycle+0x240>)
 800d916:	2214      	movs	r2, #20
 800d918:	701a      	strb	r2, [r3, #0]
				touchedPosX = 0;
 800d91a:	4b75      	ldr	r3, [pc, #468]	; (800daf0 <mainCycle+0x244>)
 800d91c:	2200      	movs	r2, #0
 800d91e:	801a      	strh	r2, [r3, #0]
				touchedPosY=0;
 800d920:	4b74      	ldr	r3, [pc, #464]	; (800daf4 <mainCycle+0x248>)
 800d922:	2200      	movs	r2, #0
 800d924:	801a      	strh	r2, [r3, #0]
		  }
		printTemperature();
 800d926:	f7ff ff71 	bl	800d80c <printTemperature>

		if(counterTurn == 0)
 800d92a:	4b70      	ldr	r3, [pc, #448]	; (800daec <mainCycle+0x240>)
 800d92c:	781b      	ldrb	r3, [r3, #0]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d10b      	bne.n	800d94a <mainCycle+0x9e>
		{
			passCounter1++;
 800d932:	4b71      	ldr	r3, [pc, #452]	; (800daf8 <mainCycle+0x24c>)
 800d934:	781b      	ldrb	r3, [r3, #0]
 800d936:	3301      	adds	r3, #1
 800d938:	b2da      	uxtb	r2, r3
 800d93a:	4b6f      	ldr	r3, [pc, #444]	; (800daf8 <mainCycle+0x24c>)
 800d93c:	701a      	strb	r2, [r3, #0]

			if(passCounter1 == 3)
 800d93e:	4b6e      	ldr	r3, [pc, #440]	; (800daf8 <mainCycle+0x24c>)
 800d940:	781b      	ldrb	r3, [r3, #0]
 800d942:	2b03      	cmp	r3, #3
 800d944:	d124      	bne.n	800d990 <mainCycle+0xe4>
			{
				return 1;//para ser diferente a 0, sale debido a que ya pasó 3 turnos
 800d946:	2301      	movs	r3, #1
 800d948:	e0c5      	b.n	800dad6 <mainCycle+0x22a>
			}

			break;//cuando pasa un turno sale del ciclo while para continuar para el jugador 2
		}

		if(resetPressed == 1)//en caso de presionar el boton del reset sale de la función
 800d94a:	4b6c      	ldr	r3, [pc, #432]	; (800dafc <mainCycle+0x250>)
 800d94c:	781b      	ldrb	r3, [r3, #0]
 800d94e:	2b01      	cmp	r3, #1
 800d950:	d103      	bne.n	800d95a <mainCycle+0xae>
		{
			  resetPressed = 0;
 800d952:	4b6a      	ldr	r3, [pc, #424]	; (800dafc <mainCycle+0x250>)
 800d954:	2200      	movs	r2, #0
 800d956:	701a      	strb	r2, [r3, #0]
			  break;
 800d958:	e01b      	b.n	800d992 <mainCycle+0xe6>
		}

		// VER POSICION EN LA TOUCH SCREEN
		playeri = touchedX;//ahora son lineas, cambiamos arriba
 800d95a:	4b69      	ldr	r3, [pc, #420]	; (800db00 <mainCycle+0x254>)
 800d95c:	781b      	ldrb	r3, [r3, #0]
 800d95e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		playerj = touchedY;//columnas
 800d962:	4b68      	ldr	r3, [pc, #416]	; (800db04 <mainCycle+0x258>)
 800d964:	781b      	ldrb	r3, [r3, #0]
 800d966:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

		validPosition = insertMove(playeri, playerj, 1, availablePosition, numAvailablePosition);//si consigue insertar validPosition es 1, en caso contrario es 0
 800d96a:	78fb      	ldrb	r3, [r7, #3]
 800d96c:	1d3a      	adds	r2, r7, #4
 800d96e:	f897 1046 	ldrb.w	r1, [r7, #70]	; 0x46
 800d972:	f897 0047 	ldrb.w	r0, [r7, #71]	; 0x47
 800d976:	9300      	str	r3, [sp, #0]
 800d978:	4613      	mov	r3, r2
 800d97a:	2201      	movs	r2, #1
 800d97c:	f7ff fc1c 	bl	800d1b8 <insertMove>
 800d980:	4603      	mov	r3, r0
 800d982:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	while (validPosition == 0)//mientras la posicion del usuario no fuera valida permanece en el while
 800d986:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d0b5      	beq.n	800d8fa <mainCycle+0x4e>
 800d98e:	e000      	b.n	800d992 <mainCycle+0xe6>
			break;//cuando pasa un turno sale del ciclo while para continuar para el jugador 2
 800d990:	bf00      	nop
	}

	printInfo(p1Name, p2Name);
 800d992:	495d      	ldr	r1, [pc, #372]	; (800db08 <mainCycle+0x25c>)
 800d994:	4852      	ldr	r0, [pc, #328]	; (800dae0 <mainCycle+0x234>)
 800d996:	f7fe fe6d 	bl	800c674 <printInfo>
	printBoard();//vuelve a imprimir el tablero
 800d99a:	f7fe fe0d 	bl	800c5b8 <printBoard>


	////////////////////////////
	// Player 2

	validPosition = 0;
 800d99e:	2300      	movs	r3, #0
 800d9a0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	counterTurn = 20;
 800d9a4:	4b51      	ldr	r3, [pc, #324]	; (800daec <mainCycle+0x240>)
 800d9a6:	2214      	movs	r2, #20
 800d9a8:	701a      	strb	r2, [r3, #0]
	getAvailableMoves(2, availablePosition, &numAvailablePosition);
 800d9aa:	1cfa      	adds	r2, r7, #3
 800d9ac:	1d3b      	adds	r3, r7, #4
 800d9ae:	4619      	mov	r1, r3
 800d9b0:	2002      	movs	r0, #2
 800d9b2:	f7ff f9d1 	bl	800cd58 <getAvailableMoves>

	if(numAvailablePosition == 0)
 800d9b6:	78fb      	ldrb	r3, [r7, #3]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d101      	bne.n	800d9c0 <mainCycle+0x114>
	{
		return 0;
 800d9bc:	2300      	movs	r3, #0
 800d9be:	e08a      	b.n	800dad6 <mainCycle+0x22a>
	}

	sprintf(auxStr, "%s Turn", p2Name);
 800d9c0:	4a51      	ldr	r2, [pc, #324]	; (800db08 <mainCycle+0x25c>)
 800d9c2:	4948      	ldr	r1, [pc, #288]	; (800dae4 <mainCycle+0x238>)
 800d9c4:	4848      	ldr	r0, [pc, #288]	; (800dae8 <mainCycle+0x23c>)
 800d9c6:	f001 fbed 	bl	800f1a4 <siprintf>
	BSP_LCD_DisplayStringAt(45, LINE(17), (uint8_t*) auxStr, RIGHT_MODE);
 800d9ca:	f7f3 fdb7 	bl	800153c <BSP_LCD_GetFont>
 800d9ce:	4603      	mov	r3, r0
 800d9d0:	88db      	ldrh	r3, [r3, #6]
 800d9d2:	461a      	mov	r2, r3
 800d9d4:	0112      	lsls	r2, r2, #4
 800d9d6:	4413      	add	r3, r2
 800d9d8:	b299      	uxth	r1, r3
 800d9da:	2302      	movs	r3, #2
 800d9dc:	4a42      	ldr	r2, [pc, #264]	; (800dae8 <mainCycle+0x23c>)
 800d9de:	202d      	movs	r0, #45	; 0x2d
 800d9e0:	f7f3 fe2e 	bl	8001640 <BSP_LCD_DisplayStringAt>

	while (validPosition == 0)
 800d9e4:	e06a      	b.n	800dabc <mainCycle+0x210>
	{
		printTime();
 800d9e6:	f7ff feab 	bl	800d740 <printTime>
		  if(insideRectangle(x2Players, y2Players, width2Players, height2Players)==1)
 800d9ea:	2341      	movs	r3, #65	; 0x41
 800d9ec:	22b9      	movs	r2, #185	; 0xb9
 800d9ee:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800d9f2:	f240 2026 	movw	r0, #550	; 0x226
 800d9f6:	f7ff fd7f 	bl	800d4f8 <insideRectangle>
 800d9fa:	4603      	mov	r3, r0
 800d9fc:	2b01      	cmp	r3, #1
 800d9fe:	d108      	bne.n	800da12 <mainCycle+0x166>
		  {
				counterTurn = 20;
 800da00:	4b3a      	ldr	r3, [pc, #232]	; (800daec <mainCycle+0x240>)
 800da02:	2214      	movs	r2, #20
 800da04:	701a      	strb	r2, [r3, #0]
				touchedPosX = 0;
 800da06:	4b3a      	ldr	r3, [pc, #232]	; (800daf0 <mainCycle+0x244>)
 800da08:	2200      	movs	r2, #0
 800da0a:	801a      	strh	r2, [r3, #0]
				touchedPosY=0;
 800da0c:	4b39      	ldr	r3, [pc, #228]	; (800daf4 <mainCycle+0x248>)
 800da0e:	2200      	movs	r2, #0
 800da10:	801a      	strh	r2, [r3, #0]
		  }
		printTemperature();
 800da12:	f7ff fefb 	bl	800d80c <printTemperature>

		if(counterTurn == 0)
 800da16:	4b35      	ldr	r3, [pc, #212]	; (800daec <mainCycle+0x240>)
 800da18:	781b      	ldrb	r3, [r3, #0]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d10b      	bne.n	800da36 <mainCycle+0x18a>
		{
			passCounter2++;
 800da1e:	4b3b      	ldr	r3, [pc, #236]	; (800db0c <mainCycle+0x260>)
 800da20:	781b      	ldrb	r3, [r3, #0]
 800da22:	3301      	adds	r3, #1
 800da24:	b2da      	uxtb	r2, r3
 800da26:	4b39      	ldr	r3, [pc, #228]	; (800db0c <mainCycle+0x260>)
 800da28:	701a      	strb	r2, [r3, #0]

			if(passCounter2 == 3)
 800da2a:	4b38      	ldr	r3, [pc, #224]	; (800db0c <mainCycle+0x260>)
 800da2c:	781b      	ldrb	r3, [r3, #0]
 800da2e:	2b03      	cmp	r3, #3
 800da30:	d149      	bne.n	800dac6 <mainCycle+0x21a>
			{
				return 1;
 800da32:	2301      	movs	r3, #1
 800da34:	e04f      	b.n	800dad6 <mainCycle+0x22a>
			}

			break;
		}

		if(resetPressed == 1)
 800da36:	4b31      	ldr	r3, [pc, #196]	; (800dafc <mainCycle+0x250>)
 800da38:	781b      	ldrb	r3, [r3, #0]
 800da3a:	2b01      	cmp	r3, #1
 800da3c:	d103      	bne.n	800da46 <mainCycle+0x19a>
		{
			  resetPressed = 0;
 800da3e:	4b2f      	ldr	r3, [pc, #188]	; (800dafc <mainCycle+0x250>)
 800da40:	2200      	movs	r2, #0
 800da42:	701a      	strb	r2, [r3, #0]
			  break;
 800da44:	e040      	b.n	800dac8 <mainCycle+0x21c>
		}

		if(numberPlayers == 2)
 800da46:	4b32      	ldr	r3, [pc, #200]	; (800db10 <mainCycle+0x264>)
 800da48:	781b      	ldrb	r3, [r3, #0]
 800da4a:	2b02      	cmp	r3, #2
 800da4c:	d108      	bne.n	800da60 <mainCycle+0x1b4>
		{
			playeri = touchedX;
 800da4e:	4b2c      	ldr	r3, [pc, #176]	; (800db00 <mainCycle+0x254>)
 800da50:	781b      	ldrb	r3, [r3, #0]
 800da52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			playerj = touchedY;
 800da56:	4b2b      	ldr	r3, [pc, #172]	; (800db04 <mainCycle+0x258>)
 800da58:	781b      	ldrb	r3, [r3, #0]
 800da5a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800da5e:	e01f      	b.n	800daa0 <mainCycle+0x1f4>
		}
		else // AI player
		{
			HAL_Delay(1000);
 800da60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800da64:	f7f4 ff70 	bl	8002948 <HAL_Delay>
			uint8_t selectedPosition = availablePosition[0];
 800da68:	793b      	ldrb	r3, [r7, #4]
 800da6a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

			//convierte selectedPosition en dos posiciones, linea y columna (de 0 a 7)
			playeri = (selectedPosition / 10) - 1;//la función insertMove requiere los parametros separados
 800da6e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800da72:	4a28      	ldr	r2, [pc, #160]	; (800db14 <mainCycle+0x268>)
 800da74:	fba2 2303 	umull	r2, r3, r2, r3
 800da78:	08db      	lsrs	r3, r3, #3
 800da7a:	b2db      	uxtb	r3, r3
 800da7c:	3b01      	subs	r3, #1
 800da7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			playerj = (selectedPosition % 10) - 1;
 800da82:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 800da86:	4b23      	ldr	r3, [pc, #140]	; (800db14 <mainCycle+0x268>)
 800da88:	fba3 1302 	umull	r1, r3, r3, r2
 800da8c:	08d9      	lsrs	r1, r3, #3
 800da8e:	460b      	mov	r3, r1
 800da90:	009b      	lsls	r3, r3, #2
 800da92:	440b      	add	r3, r1
 800da94:	005b      	lsls	r3, r3, #1
 800da96:	1ad3      	subs	r3, r2, r3
 800da98:	b2db      	uxtb	r3, r3
 800da9a:	3b01      	subs	r3, #1
 800da9c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

		}

		validPosition = insertMove(playeri, playerj, 2, availablePosition, numAvailablePosition);
 800daa0:	78fb      	ldrb	r3, [r7, #3]
 800daa2:	1d3a      	adds	r2, r7, #4
 800daa4:	f897 1046 	ldrb.w	r1, [r7, #70]	; 0x46
 800daa8:	f897 0047 	ldrb.w	r0, [r7, #71]	; 0x47
 800daac:	9300      	str	r3, [sp, #0]
 800daae:	4613      	mov	r3, r2
 800dab0:	2202      	movs	r2, #2
 800dab2:	f7ff fb81 	bl	800d1b8 <insertMove>
 800dab6:	4603      	mov	r3, r0
 800dab8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	while (validPosition == 0)
 800dabc:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d090      	beq.n	800d9e6 <mainCycle+0x13a>
 800dac4:	e000      	b.n	800dac8 <mainCycle+0x21c>
			break;
 800dac6:	bf00      	nop
	}

	printInfo(p1Name, p2Name);
 800dac8:	490f      	ldr	r1, [pc, #60]	; (800db08 <mainCycle+0x25c>)
 800daca:	4805      	ldr	r0, [pc, #20]	; (800dae0 <mainCycle+0x234>)
 800dacc:	f7fe fdd2 	bl	800c674 <printInfo>
	printBoard();//vuelve a imprimir el tablero
 800dad0:	f7fe fd72 	bl	800c5b8 <printBoard>

	return numAvailablePosition;
 800dad4:	78fb      	ldrb	r3, [r7, #3]
}
 800dad6:	4618      	mov	r0, r3
 800dad8:	3748      	adds	r7, #72	; 0x48
 800dada:	46bd      	mov	sp, r7
 800dadc:	bd80      	pop	{r7, pc}
 800dade:	bf00      	nop
 800dae0:	20000ae0 	.word	0x20000ae0
 800dae4:	0800fb84 	.word	0x0800fb84
 800dae8:	2000094c 	.word	0x2000094c
 800daec:	20000042 	.word	0x20000042
 800daf0:	2000092a 	.word	0x2000092a
 800daf4:	2000092c 	.word	0x2000092c
 800daf8:	20000312 	.word	0x20000312
 800dafc:	20000318 	.word	0x20000318
 800db00:	20000afe 	.word	0x20000afe
 800db04:	20000928 	.word	0x20000928
 800db08:	20000b40 	.word	0x20000b40
 800db0c:	20000313 	.word	0x20000313
 800db10:	20000041 	.word	0x20000041
 800db14:	cccccccd 	.word	0xcccccccd

0800db18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800db18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db1a:	b0af      	sub	sp, #188	; 0xbc
 800db1c:	af06      	add	r7, sp, #24

  /* USER CODE END 1 */
  

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800db1e:	f7ff fb8b 	bl	800d238 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800db22:	f7ff fba9 	bl	800d278 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800db26:	f7f4 feb1 	bl	800288c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800db2a:	f000 fa47 	bl	800dfbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800db2e:	f000 fdf7 	bl	800e720 <MX_GPIO_Init>
  MX_DMA2D_Init();
 800db32:	f000 fb39 	bl	800e1a8 <MX_DMA2D_Init>
  MX_FMC_Init();
 800db36:	f000 fda5 	bl	800e684 <MX_FMC_Init>
  MX_LTDC_Init();
 800db3a:	f000 fc61 	bl	800e400 <MX_LTDC_Init>
  MX_ADC1_Init();
 800db3e:	f000 fadf 	bl	800e100 <MX_ADC1_Init>
  MX_DSIHOST_DSI_Init();
 800db42:	f000 fb69 	bl	800e218 <MX_DSIHOST_DSI_Init>
  MX_TIM6_Init();
 800db46:	f000 fd2d 	bl	800e5a4 <MX_TIM6_Init>
  MX_TIM7_Init();
 800db4a:	f000 fd63 	bl	800e614 <MX_TIM7_Init>
  MX_SDMMC2_SD_Init();
 800db4e:	f000 fd09 	bl	800e564 <MX_SDMMC2_SD_Init>
  MX_FATFS_Init();
 800db52:	f7fe fc4d 	bl	800c3f0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  LCD_Config();
 800db56:	f000 fe9d 	bl	800e894 <LCD_Config>
  HAL_ADC_Start_IT(&hadc1);
 800db5a:	48b2      	ldr	r0, [pc, #712]	; (800de24 <main+0x30c>)
 800db5c:	f7f4 ff5a 	bl	8002a14 <HAL_ADC_Start_IT>
  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 800db60:	f7f3 fc28 	bl	80013b4 <BSP_LCD_GetXSize>
 800db64:	4603      	mov	r3, r0
 800db66:	b29c      	uxth	r4, r3
 800db68:	f7f3 fc30 	bl	80013cc <BSP_LCD_GetYSize>
 800db6c:	4603      	mov	r3, r0
 800db6e:	b29b      	uxth	r3, r3
 800db70:	4619      	mov	r1, r3
 800db72:	4620      	mov	r0, r4
 800db74:	f7f4 fcae 	bl	80024d4 <BSP_TS_Init>
  BSP_TS_ITConfig();
 800db78:	f7f4 fd0c 	bl	8002594 <BSP_TS_ITConfig>
  HAL_TIM_Base_Start_IT(&htim6);
 800db7c:	48aa      	ldr	r0, [pc, #680]	; (800de28 <main+0x310>)
 800db7e:	f7fa ff9f 	bl	8008ac0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 800db82:	48aa      	ldr	r0, [pc, #680]	; (800de2c <main+0x314>)
 800db84:	f7fa ff9c 	bl	8008ac0 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(programPhase == 1)
 800db88:	4ba9      	ldr	r3, [pc, #676]	; (800de30 <main+0x318>)
 800db8a:	781b      	ldrb	r3, [r3, #0]
 800db8c:	2b01      	cmp	r3, #1
 800db8e:	d101      	bne.n	800db94 <main+0x7c>
	  {


		  mainMenu();//llamamos a esta función para ver si la persona carga en algún sitio
 800db90:	f7ff fce8 	bl	800d564 <mainMenu>
	  }
	  if(programPhase == 2)
 800db94:	4ba6      	ldr	r3, [pc, #664]	; (800de30 <main+0x318>)
 800db96:	781b      	ldrb	r3, [r3, #0]
 800db98:	2b02      	cmp	r3, #2
 800db9a:	f040 80df 	bne.w	800dd5c <main+0x244>
	  {
		  ////////////////////////////////////
		  // TOUCH SCREEN


		  if(mainCycle() == 0)//No más movimientos
 800db9e:	f7ff fe85 	bl	800d8ac <mainCycle>
 800dba2:	4603      	mov	r3, r0
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d16c      	bne.n	800dc82 <main+0x16a>
		  {

			  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800dba8:	48a2      	ldr	r0, [pc, #648]	; (800de34 <main+0x31c>)
 800dbaa:	f7f3 fc7b 	bl	80014a4 <BSP_LCD_SetTextColor>
			  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800dbae:	f04f 30ff 	mov.w	r0, #4294967295
 800dbb2:	f7f3 fc8f 	bl	80014d4 <BSP_LCD_SetBackColor>

			  sprintf(auxStr, "GAME OVER!");
 800dbb6:	4aa0      	ldr	r2, [pc, #640]	; (800de38 <main+0x320>)
 800dbb8:	4ba0      	ldr	r3, [pc, #640]	; (800de3c <main+0x324>)
 800dbba:	cb03      	ldmia	r3!, {r0, r1}
 800dbbc:	6010      	str	r0, [r2, #0]
 800dbbe:	6051      	str	r1, [r2, #4]
 800dbc0:	8819      	ldrh	r1, [r3, #0]
 800dbc2:	789b      	ldrb	r3, [r3, #2]
 800dbc4:	8111      	strh	r1, [r2, #8]
 800dbc6:	7293      	strb	r3, [r2, #10]
			  BSP_LCD_DisplayStringAt(65, LINE(14), (uint8_t*) auxStr, RIGHT_MODE);
 800dbc8:	f7f3 fcb8 	bl	800153c <BSP_LCD_GetFont>
 800dbcc:	4603      	mov	r3, r0
 800dbce:	88db      	ldrh	r3, [r3, #6]
 800dbd0:	461a      	mov	r2, r3
 800dbd2:	00d2      	lsls	r2, r2, #3
 800dbd4:	1ad3      	subs	r3, r2, r3
 800dbd6:	005b      	lsls	r3, r3, #1
 800dbd8:	b299      	uxth	r1, r3
 800dbda:	2302      	movs	r3, #2
 800dbdc:	4a96      	ldr	r2, [pc, #600]	; (800de38 <main+0x320>)
 800dbde:	2041      	movs	r0, #65	; 0x41
 800dbe0:	f7f3 fd2e 	bl	8001640 <BSP_LCD_DisplayStringAt>

			  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800dbe4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800dbe8:	f7f3 fc5c 	bl	80014a4 <BSP_LCD_SetTextColor>

			  countPieces(&player1Counter, &player2Counter);
 800dbec:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 800dbf0:	f107 039d 	add.w	r3, r7, #157	; 0x9d
 800dbf4:	4611      	mov	r1, r2
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	f7fe fdc8 	bl	800c78c <countPieces>
			  if(player1Counter > player2Counter)
 800dbfc:	f897 209d 	ldrb.w	r2, [r7, #157]	; 0x9d
 800dc00:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 800dc04:	429a      	cmp	r2, r3
 800dc06:	d908      	bls.n	800dc1a <main+0x102>
			  {
				 winner = 1;
 800dc08:	2301      	movs	r3, #1
 800dc0a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				 sprintf(auxStr, "Winner = %s", p1Name);
 800dc0e:	4a8c      	ldr	r2, [pc, #560]	; (800de40 <main+0x328>)
 800dc10:	498c      	ldr	r1, [pc, #560]	; (800de44 <main+0x32c>)
 800dc12:	4889      	ldr	r0, [pc, #548]	; (800de38 <main+0x320>)
 800dc14:	f001 fac6 	bl	800f1a4 <siprintf>
 800dc18:	e020      	b.n	800dc5c <main+0x144>

			  }
			  else if(player1Counter < player2Counter)
 800dc1a:	f897 209d 	ldrb.w	r2, [r7, #157]	; 0x9d
 800dc1e:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 800dc22:	429a      	cmp	r2, r3
 800dc24:	d208      	bcs.n	800dc38 <main+0x120>
			  {
				 winner= 2;
 800dc26:	2302      	movs	r3, #2
 800dc28:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				 sprintf(auxStr,  "Winner = %s", p2Name);
 800dc2c:	4a86      	ldr	r2, [pc, #536]	; (800de48 <main+0x330>)
 800dc2e:	4985      	ldr	r1, [pc, #532]	; (800de44 <main+0x32c>)
 800dc30:	4881      	ldr	r0, [pc, #516]	; (800de38 <main+0x320>)
 800dc32:	f001 fab7 	bl	800f1a4 <siprintf>
 800dc36:	e011      	b.n	800dc5c <main+0x144>
			  }
			  else if(player1Counter == player2Counter)
 800dc38:	f897 209d 	ldrb.w	r2, [r7, #157]	; 0x9d
 800dc3c:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 800dc40:	429a      	cmp	r2, r3
 800dc42:	d10b      	bne.n	800dc5c <main+0x144>
			  {
				  winner=0;
 800dc44:	2300      	movs	r3, #0
 800dc46:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				  sprintf(auxStr, "It's a tie");
 800dc4a:	4a7b      	ldr	r2, [pc, #492]	; (800de38 <main+0x320>)
 800dc4c:	4b7f      	ldr	r3, [pc, #508]	; (800de4c <main+0x334>)
 800dc4e:	cb03      	ldmia	r3!, {r0, r1}
 800dc50:	6010      	str	r0, [r2, #0]
 800dc52:	6051      	str	r1, [r2, #4]
 800dc54:	8819      	ldrh	r1, [r3, #0]
 800dc56:	789b      	ldrb	r3, [r3, #2]
 800dc58:	8111      	strh	r1, [r2, #8]
 800dc5a:	7293      	strb	r3, [r2, #10]
			  }

			  BSP_LCD_DisplayStringAt(10, LINE(15), (uint8_t*) auxStr, RIGHT_MODE);
 800dc5c:	f7f3 fc6e 	bl	800153c <BSP_LCD_GetFont>
 800dc60:	4603      	mov	r3, r0
 800dc62:	88db      	ldrh	r3, [r3, #6]
 800dc64:	461a      	mov	r2, r3
 800dc66:	0112      	lsls	r2, r2, #4
 800dc68:	1ad3      	subs	r3, r2, r3
 800dc6a:	b299      	uxth	r1, r3
 800dc6c:	2302      	movs	r3, #2
 800dc6e:	4a72      	ldr	r2, [pc, #456]	; (800de38 <main+0x320>)
 800dc70:	200a      	movs	r0, #10
 800dc72:	f7f3 fce5 	bl	8001640 <BSP_LCD_DisplayStringAt>

			  programPhase=3;
 800dc76:	4b6e      	ldr	r3, [pc, #440]	; (800de30 <main+0x318>)
 800dc78:	2203      	movs	r2, #3
 800dc7a:	701a      	strb	r2, [r3, #0]
			  writeToFile = 1;
 800dc7c:	4b74      	ldr	r3, [pc, #464]	; (800de50 <main+0x338>)
 800dc7e:	2201      	movs	r2, #1
 800dc80:	701a      	strb	r2, [r3, #0]
		  }

		  if(passCounter1 == 3)
 800dc82:	4b74      	ldr	r3, [pc, #464]	; (800de54 <main+0x33c>)
 800dc84:	781b      	ldrb	r3, [r3, #0]
 800dc86:	2b03      	cmp	r3, #3
 800dc88:	d132      	bne.n	800dcf0 <main+0x1d8>
		  {
			  sprintf(auxStr, "GAME OVER!");
 800dc8a:	4a6b      	ldr	r2, [pc, #428]	; (800de38 <main+0x320>)
 800dc8c:	4b6b      	ldr	r3, [pc, #428]	; (800de3c <main+0x324>)
 800dc8e:	cb03      	ldmia	r3!, {r0, r1}
 800dc90:	6010      	str	r0, [r2, #0]
 800dc92:	6051      	str	r1, [r2, #4]
 800dc94:	8819      	ldrh	r1, [r3, #0]
 800dc96:	789b      	ldrb	r3, [r3, #2]
 800dc98:	8111      	strh	r1, [r2, #8]
 800dc9a:	7293      	strb	r3, [r2, #10]
			  BSP_LCD_DisplayStringAt(65, LINE(14), (uint8_t*) auxStr, RIGHT_MODE);
 800dc9c:	f7f3 fc4e 	bl	800153c <BSP_LCD_GetFont>
 800dca0:	4603      	mov	r3, r0
 800dca2:	88db      	ldrh	r3, [r3, #6]
 800dca4:	461a      	mov	r2, r3
 800dca6:	00d2      	lsls	r2, r2, #3
 800dca8:	1ad3      	subs	r3, r2, r3
 800dcaa:	005b      	lsls	r3, r3, #1
 800dcac:	b299      	uxth	r1, r3
 800dcae:	2302      	movs	r3, #2
 800dcb0:	4a61      	ldr	r2, [pc, #388]	; (800de38 <main+0x320>)
 800dcb2:	2041      	movs	r0, #65	; 0x41
 800dcb4:	f7f3 fcc4 	bl	8001640 <BSP_LCD_DisplayStringAt>
			  sprintf(auxStr,  "Winner = %s", p2Name);
 800dcb8:	4a63      	ldr	r2, [pc, #396]	; (800de48 <main+0x330>)
 800dcba:	4962      	ldr	r1, [pc, #392]	; (800de44 <main+0x32c>)
 800dcbc:	485e      	ldr	r0, [pc, #376]	; (800de38 <main+0x320>)
 800dcbe:	f001 fa71 	bl	800f1a4 <siprintf>
			  BSP_LCD_DisplayStringAt(10, LINE(15), (uint8_t*) auxStr, RIGHT_MODE);
 800dcc2:	f7f3 fc3b 	bl	800153c <BSP_LCD_GetFont>
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	88db      	ldrh	r3, [r3, #6]
 800dcca:	461a      	mov	r2, r3
 800dccc:	0112      	lsls	r2, r2, #4
 800dcce:	1ad3      	subs	r3, r2, r3
 800dcd0:	b299      	uxth	r1, r3
 800dcd2:	2302      	movs	r3, #2
 800dcd4:	4a58      	ldr	r2, [pc, #352]	; (800de38 <main+0x320>)
 800dcd6:	200a      	movs	r0, #10
 800dcd8:	f7f3 fcb2 	bl	8001640 <BSP_LCD_DisplayStringAt>

			  winner = 2;
 800dcdc:	2302      	movs	r3, #2
 800dcde:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			  programPhase = 3;
 800dce2:	4b53      	ldr	r3, [pc, #332]	; (800de30 <main+0x318>)
 800dce4:	2203      	movs	r2, #3
 800dce6:	701a      	strb	r2, [r3, #0]
			  writeToFile = 1;
 800dce8:	4b59      	ldr	r3, [pc, #356]	; (800de50 <main+0x338>)
 800dcea:	2201      	movs	r2, #1
 800dcec:	701a      	strb	r2, [r3, #0]
 800dcee:	e035      	b.n	800dd5c <main+0x244>
		  }
		  else if(passCounter2 == 3)
 800dcf0:	4b59      	ldr	r3, [pc, #356]	; (800de58 <main+0x340>)
 800dcf2:	781b      	ldrb	r3, [r3, #0]
 800dcf4:	2b03      	cmp	r3, #3
 800dcf6:	d131      	bne.n	800dd5c <main+0x244>
		  {
			  sprintf(auxStr, "GAME OVER!");
 800dcf8:	4a4f      	ldr	r2, [pc, #316]	; (800de38 <main+0x320>)
 800dcfa:	4b50      	ldr	r3, [pc, #320]	; (800de3c <main+0x324>)
 800dcfc:	cb03      	ldmia	r3!, {r0, r1}
 800dcfe:	6010      	str	r0, [r2, #0]
 800dd00:	6051      	str	r1, [r2, #4]
 800dd02:	8819      	ldrh	r1, [r3, #0]
 800dd04:	789b      	ldrb	r3, [r3, #2]
 800dd06:	8111      	strh	r1, [r2, #8]
 800dd08:	7293      	strb	r3, [r2, #10]
			  BSP_LCD_DisplayStringAt(65, LINE(14), (uint8_t*) auxStr, RIGHT_MODE);
 800dd0a:	f7f3 fc17 	bl	800153c <BSP_LCD_GetFont>
 800dd0e:	4603      	mov	r3, r0
 800dd10:	88db      	ldrh	r3, [r3, #6]
 800dd12:	461a      	mov	r2, r3
 800dd14:	00d2      	lsls	r2, r2, #3
 800dd16:	1ad3      	subs	r3, r2, r3
 800dd18:	005b      	lsls	r3, r3, #1
 800dd1a:	b299      	uxth	r1, r3
 800dd1c:	2302      	movs	r3, #2
 800dd1e:	4a46      	ldr	r2, [pc, #280]	; (800de38 <main+0x320>)
 800dd20:	2041      	movs	r0, #65	; 0x41
 800dd22:	f7f3 fc8d 	bl	8001640 <BSP_LCD_DisplayStringAt>
			  sprintf(auxStr,  "Winner = %s", p1Name);
 800dd26:	4a46      	ldr	r2, [pc, #280]	; (800de40 <main+0x328>)
 800dd28:	4946      	ldr	r1, [pc, #280]	; (800de44 <main+0x32c>)
 800dd2a:	4843      	ldr	r0, [pc, #268]	; (800de38 <main+0x320>)
 800dd2c:	f001 fa3a 	bl	800f1a4 <siprintf>
			  BSP_LCD_DisplayStringAt(10, LINE(15), (uint8_t*) auxStr, RIGHT_MODE);
 800dd30:	f7f3 fc04 	bl	800153c <BSP_LCD_GetFont>
 800dd34:	4603      	mov	r3, r0
 800dd36:	88db      	ldrh	r3, [r3, #6]
 800dd38:	461a      	mov	r2, r3
 800dd3a:	0112      	lsls	r2, r2, #4
 800dd3c:	1ad3      	subs	r3, r2, r3
 800dd3e:	b299      	uxth	r1, r3
 800dd40:	2302      	movs	r3, #2
 800dd42:	4a3d      	ldr	r2, [pc, #244]	; (800de38 <main+0x320>)
 800dd44:	200a      	movs	r0, #10
 800dd46:	f7f3 fc7b 	bl	8001640 <BSP_LCD_DisplayStringAt>

			  winner = 1;
 800dd4a:	2301      	movs	r3, #1
 800dd4c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			  programPhase =3;
 800dd50:	4b37      	ldr	r3, [pc, #220]	; (800de30 <main+0x318>)
 800dd52:	2203      	movs	r2, #3
 800dd54:	701a      	strb	r2, [r3, #0]
			  writeToFile = 1;
 800dd56:	4b3e      	ldr	r3, [pc, #248]	; (800de50 <main+0x338>)
 800dd58:	2201      	movs	r2, #1
 800dd5a:	701a      	strb	r2, [r3, #0]
		  }
	   }

	  if(programPhase==3)
 800dd5c:	4b34      	ldr	r3, [pc, #208]	; (800de30 <main+0x318>)
 800dd5e:	781b      	ldrb	r3, [r3, #0]
 800dd60:	2b03      	cmp	r3, #3
 800dd62:	f47f af11 	bne.w	800db88 <main+0x70>
	  {
		  printTemperature();
 800dd66:	f7ff fd51 	bl	800d80c <printTemperature>

		  if(writeToFile == 1)//para no estar siempre escribiendo en el fichero
 800dd6a:	4b39      	ldr	r3, [pc, #228]	; (800de50 <main+0x338>)
 800dd6c:	781b      	ldrb	r3, [r3, #0]
 800dd6e:	2b01      	cmp	r3, #1
 800dd70:	f47f af0a 	bne.w	800db88 <main+0x70>
		  {
			 writeToFile = 0;
 800dd74:	4b36      	ldr	r3, [pc, #216]	; (800de50 <main+0x338>)
 800dd76:	2200      	movs	r2, #0
 800dd78:	701a      	strb	r2, [r3, #0]

			 // Desacctivación de la interrupción ADC para poder escribir en el SD card
			  HAL_ADC_Stop_IT(&hadc1);
 800dd7a:	482a      	ldr	r0, [pc, #168]	; (800de24 <main+0x30c>)
 800dd7c:	f7f4 ff14 	bl	8002ba8 <HAL_ADC_Stop_IT>

			 char auxStr2[150];

			 FRESULT res;

			  res = f_mount (&SDFatFS, SDPath, 0);
 800dd80:	2200      	movs	r2, #0
 800dd82:	4936      	ldr	r1, [pc, #216]	; (800de5c <main+0x344>)
 800dd84:	4836      	ldr	r0, [pc, #216]	; (800de60 <main+0x348>)
 800dd86:	f7fd fce5 	bl	800b754 <f_mount>
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
		      if(res != FR_OK)
 800dd90:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d009      	beq.n	800ddac <main+0x294>
			  {
				sprintf(auxStr, "Error in fmount: %d", res);
 800dd98:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 800dd9c:	461a      	mov	r2, r3
 800dd9e:	4931      	ldr	r1, [pc, #196]	; (800de64 <main+0x34c>)
 800dda0:	4825      	ldr	r0, [pc, #148]	; (800de38 <main+0x320>)
 800dda2:	f001 f9ff 	bl	800f1a4 <siprintf>
				Error_Handler();
 800dda6:	f000 fd8f 	bl	800e8c8 <Error_Handler>
				break;
 800ddaa:	e0e9      	b.n	800df80 <main+0x468>
			  }

		      res = f_open(&SDFile, "Rev.txt", FA_CREATE_ALWAYS | FA_WRITE);
 800ddac:	220a      	movs	r2, #10
 800ddae:	492e      	ldr	r1, [pc, #184]	; (800de68 <main+0x350>)
 800ddb0:	482e      	ldr	r0, [pc, #184]	; (800de6c <main+0x354>)
 800ddb2:	f7fd fd15 	bl	800b7e0 <f_open>
 800ddb6:	4603      	mov	r3, r0
 800ddb8:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
			  if(res != FR_OK)
 800ddbc:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d009      	beq.n	800ddd8 <main+0x2c0>
			  {
				sprintf(auxStr, "Error in fopen: %d", res);
 800ddc4:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 800ddc8:	461a      	mov	r2, r3
 800ddca:	4929      	ldr	r1, [pc, #164]	; (800de70 <main+0x358>)
 800ddcc:	481a      	ldr	r0, [pc, #104]	; (800de38 <main+0x320>)
 800ddce:	f001 f9e9 	bl	800f1a4 <siprintf>
				Error_Handler();
 800ddd2:	f000 fd79 	bl	800e8c8 <Error_Handler>
				break;
 800ddd6:	e0d3      	b.n	800df80 <main+0x468>
			  }

			  if(winner == 1)
 800ddd8:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800dddc:	2b01      	cmp	r3, #1
 800ddde:	d151      	bne.n	800de84 <main+0x36c>
			  {
				  sprintf(auxStr2, "Winner = %s\nPieces %s = %.2d\nPieces %s = %.2d\nTotal time: %.2d:%.2d\n", p1Name, p1Name, player1Counter, p2Name, player2Counter, counterMin, counterGame %60);
 800dde0:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 800dde4:	461c      	mov	r4, r3
 800dde6:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 800ddea:	461d      	mov	r5, r3
 800ddec:	4b21      	ldr	r3, [pc, #132]	; (800de74 <main+0x35c>)
 800ddee:	781b      	ldrb	r3, [r3, #0]
 800ddf0:	461e      	mov	r6, r3
 800ddf2:	4b21      	ldr	r3, [pc, #132]	; (800de78 <main+0x360>)
 800ddf4:	881a      	ldrh	r2, [r3, #0]
 800ddf6:	4b21      	ldr	r3, [pc, #132]	; (800de7c <main+0x364>)
 800ddf8:	fba3 1302 	umull	r1, r3, r3, r2
 800ddfc:	0959      	lsrs	r1, r3, #5
 800ddfe:	460b      	mov	r3, r1
 800de00:	011b      	lsls	r3, r3, #4
 800de02:	1a5b      	subs	r3, r3, r1
 800de04:	009b      	lsls	r3, r3, #2
 800de06:	1ad3      	subs	r3, r2, r3
 800de08:	b29b      	uxth	r3, r3
 800de0a:	4638      	mov	r0, r7
 800de0c:	9304      	str	r3, [sp, #16]
 800de0e:	9603      	str	r6, [sp, #12]
 800de10:	9502      	str	r5, [sp, #8]
 800de12:	4b0d      	ldr	r3, [pc, #52]	; (800de48 <main+0x330>)
 800de14:	9301      	str	r3, [sp, #4]
 800de16:	9400      	str	r4, [sp, #0]
 800de18:	4b09      	ldr	r3, [pc, #36]	; (800de40 <main+0x328>)
 800de1a:	4a09      	ldr	r2, [pc, #36]	; (800de40 <main+0x328>)
 800de1c:	4918      	ldr	r1, [pc, #96]	; (800de80 <main+0x368>)
 800de1e:	f001 f9c1 	bl	800f1a4 <siprintf>
 800de22:	e079      	b.n	800df18 <main+0x400>
 800de24:	20000a98 	.word	0x20000a98
 800de28:	20000b00 	.word	0x20000b00
 800de2c:	20000bfc 	.word	0x20000bfc
 800de30:	20000043 	.word	0x20000043
 800de34:	ffff0000 	.word	0xffff0000
 800de38:	2000094c 	.word	0x2000094c
 800de3c:	0800fb8c 	.word	0x0800fb8c
 800de40:	20000ae0 	.word	0x20000ae0
 800de44:	0800fb98 	.word	0x0800fb98
 800de48:	20000b40 	.word	0x20000b40
 800de4c:	0800fba4 	.word	0x0800fba4
 800de50:	20000319 	.word	0x20000319
 800de54:	20000312 	.word	0x20000312
 800de58:	20000313 	.word	0x20000313
 800de5c:	20000484 	.word	0x20000484
 800de60:	200006b8 	.word	0x200006b8
 800de64:	0800fbb0 	.word	0x0800fbb0
 800de68:	0800fbc4 	.word	0x0800fbc4
 800de6c:	20000488 	.word	0x20000488
 800de70:	0800fbcc 	.word	0x0800fbcc
 800de74:	20000314 	.word	0x20000314
 800de78:	20000316 	.word	0x20000316
 800de7c:	88888889 	.word	0x88888889
 800de80:	0800fbe0 	.word	0x0800fbe0
			  }
			  else if( winner == 2)
 800de84:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800de88:	2b02      	cmp	r3, #2
 800de8a:	d121      	bne.n	800ded0 <main+0x3b8>
			  {
				  sprintf(auxStr2, "Winner = %s\nPieces %s = %.2d\nPieces %s = %.2d\nTotal time: %.2d:%.2d\n", p2Name, p1Name, player1Counter, p2Name, player2Counter, counterMin, counterGame %60);
 800de8c:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 800de90:	461c      	mov	r4, r3
 800de92:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 800de96:	461d      	mov	r5, r3
 800de98:	4b3c      	ldr	r3, [pc, #240]	; (800df8c <main+0x474>)
 800de9a:	781b      	ldrb	r3, [r3, #0]
 800de9c:	461e      	mov	r6, r3
 800de9e:	4b3c      	ldr	r3, [pc, #240]	; (800df90 <main+0x478>)
 800dea0:	881a      	ldrh	r2, [r3, #0]
 800dea2:	4b3c      	ldr	r3, [pc, #240]	; (800df94 <main+0x47c>)
 800dea4:	fba3 1302 	umull	r1, r3, r3, r2
 800dea8:	0959      	lsrs	r1, r3, #5
 800deaa:	460b      	mov	r3, r1
 800deac:	011b      	lsls	r3, r3, #4
 800deae:	1a5b      	subs	r3, r3, r1
 800deb0:	009b      	lsls	r3, r3, #2
 800deb2:	1ad3      	subs	r3, r2, r3
 800deb4:	b29b      	uxth	r3, r3
 800deb6:	4638      	mov	r0, r7
 800deb8:	9304      	str	r3, [sp, #16]
 800deba:	9603      	str	r6, [sp, #12]
 800debc:	9502      	str	r5, [sp, #8]
 800debe:	4b36      	ldr	r3, [pc, #216]	; (800df98 <main+0x480>)
 800dec0:	9301      	str	r3, [sp, #4]
 800dec2:	9400      	str	r4, [sp, #0]
 800dec4:	4b35      	ldr	r3, [pc, #212]	; (800df9c <main+0x484>)
 800dec6:	4a34      	ldr	r2, [pc, #208]	; (800df98 <main+0x480>)
 800dec8:	4935      	ldr	r1, [pc, #212]	; (800dfa0 <main+0x488>)
 800deca:	f001 f96b 	bl	800f1a4 <siprintf>
 800dece:	e023      	b.n	800df18 <main+0x400>
			  }
			  else if(winner == 0)
 800ded0:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d11f      	bne.n	800df18 <main+0x400>
			  {
				  sprintf(auxStr2, "It's a tie\nPieces %s = %.2d\nPieces %s = %.2d\nTotal time: %.2d:%.2d\n",  p1Name, player1Counter, p2Name, player2Counter, counterMin, counterGame %60);
 800ded8:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 800dedc:	461e      	mov	r6, r3
 800dede:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 800dee2:	461c      	mov	r4, r3
 800dee4:	4b29      	ldr	r3, [pc, #164]	; (800df8c <main+0x474>)
 800dee6:	781b      	ldrb	r3, [r3, #0]
 800dee8:	461d      	mov	r5, r3
 800deea:	4b29      	ldr	r3, [pc, #164]	; (800df90 <main+0x478>)
 800deec:	881a      	ldrh	r2, [r3, #0]
 800deee:	4b29      	ldr	r3, [pc, #164]	; (800df94 <main+0x47c>)
 800def0:	fba3 1302 	umull	r1, r3, r3, r2
 800def4:	0959      	lsrs	r1, r3, #5
 800def6:	460b      	mov	r3, r1
 800def8:	011b      	lsls	r3, r3, #4
 800defa:	1a5b      	subs	r3, r3, r1
 800defc:	009b      	lsls	r3, r3, #2
 800defe:	1ad3      	subs	r3, r2, r3
 800df00:	b29b      	uxth	r3, r3
 800df02:	4638      	mov	r0, r7
 800df04:	9303      	str	r3, [sp, #12]
 800df06:	9502      	str	r5, [sp, #8]
 800df08:	9401      	str	r4, [sp, #4]
 800df0a:	4b23      	ldr	r3, [pc, #140]	; (800df98 <main+0x480>)
 800df0c:	9300      	str	r3, [sp, #0]
 800df0e:	4633      	mov	r3, r6
 800df10:	4a22      	ldr	r2, [pc, #136]	; (800df9c <main+0x484>)
 800df12:	4924      	ldr	r1, [pc, #144]	; (800dfa4 <main+0x48c>)
 800df14:	f001 f946 	bl	800f1a4 <siprintf>
		      }

			  res = f_write(&SDFile, auxStr2, strlen(auxStr2), &nBytes);
 800df18:	463b      	mov	r3, r7
 800df1a:	4618      	mov	r0, r3
 800df1c:	f7f2 f990 	bl	8000240 <strlen>
 800df20:	4602      	mov	r2, r0
 800df22:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800df26:	4639      	mov	r1, r7
 800df28:	481f      	ldr	r0, [pc, #124]	; (800dfa8 <main+0x490>)
 800df2a:	f7fd ff56 	bl	800bdda <f_write>
 800df2e:	4603      	mov	r3, r0
 800df30:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
			  if(res != FR_OK)
 800df34:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d009      	beq.n	800df50 <main+0x438>
			  {
				sprintf(auxStr, "Error in fwrite: %d", res);
 800df3c:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 800df40:	461a      	mov	r2, r3
 800df42:	491a      	ldr	r1, [pc, #104]	; (800dfac <main+0x494>)
 800df44:	481a      	ldr	r0, [pc, #104]	; (800dfb0 <main+0x498>)
 800df46:	f001 f92d 	bl	800f1a4 <siprintf>
				Error_Handler();
 800df4a:	f000 fcbd 	bl	800e8c8 <Error_Handler>
				break;
 800df4e:	e017      	b.n	800df80 <main+0x468>
			  }

			  res = f_close(&SDFile);
 800df50:	4815      	ldr	r0, [pc, #84]	; (800dfa8 <main+0x490>)
 800df52:	f7fe f935 	bl	800c1c0 <f_close>
 800df56:	4603      	mov	r3, r0
 800df58:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
			  if(res != FR_OK)
 800df5c:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 800df60:	2b00      	cmp	r3, #0
 800df62:	d009      	beq.n	800df78 <main+0x460>
			  {
				sprintf(auxStr, "Error in fclose: %d", res);
 800df64:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 800df68:	461a      	mov	r2, r3
 800df6a:	4912      	ldr	r1, [pc, #72]	; (800dfb4 <main+0x49c>)
 800df6c:	4810      	ldr	r0, [pc, #64]	; (800dfb0 <main+0x498>)
 800df6e:	f001 f919 	bl	800f1a4 <siprintf>
				Error_Handler();
 800df72:	f000 fca9 	bl	800e8c8 <Error_Handler>
				break;
 800df76:	e003      	b.n	800df80 <main+0x468>
			  }

			  // Activación interrupción ADC
			 HAL_ADC_Start_IT(&hadc1);
 800df78:	480f      	ldr	r0, [pc, #60]	; (800dfb8 <main+0x4a0>)
 800df7a:	f7f4 fd4b 	bl	8002a14 <HAL_ADC_Start_IT>
 800df7e:	e603      	b.n	800db88 <main+0x70>
 800df80:	2300      	movs	r3, #0
		  }
	  }
  }
  /* USER CODE END 3 */
}
 800df82:	4618      	mov	r0, r3
 800df84:	37a4      	adds	r7, #164	; 0xa4
 800df86:	46bd      	mov	sp, r7
 800df88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df8a:	bf00      	nop
 800df8c:	20000314 	.word	0x20000314
 800df90:	20000316 	.word	0x20000316
 800df94:	88888889 	.word	0x88888889
 800df98:	20000b40 	.word	0x20000b40
 800df9c:	20000ae0 	.word	0x20000ae0
 800dfa0:	0800fbe0 	.word	0x0800fbe0
 800dfa4:	0800fc28 	.word	0x0800fc28
 800dfa8:	20000488 	.word	0x20000488
 800dfac:	0800fc6c 	.word	0x0800fc6c
 800dfb0:	2000094c 	.word	0x2000094c
 800dfb4:	0800fc80 	.word	0x0800fc80
 800dfb8:	20000a98 	.word	0x20000a98

0800dfbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	b0b8      	sub	sp, #224	; 0xe0
 800dfc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800dfc2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800dfc6:	2234      	movs	r2, #52	; 0x34
 800dfc8:	2100      	movs	r1, #0
 800dfca:	4618      	mov	r0, r3
 800dfcc:	f001 f8e2 	bl	800f194 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800dfd0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800dfd4:	2200      	movs	r2, #0
 800dfd6:	601a      	str	r2, [r3, #0]
 800dfd8:	605a      	str	r2, [r3, #4]
 800dfda:	609a      	str	r2, [r3, #8]
 800dfdc:	60da      	str	r2, [r3, #12]
 800dfde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800dfe0:	f107 0308 	add.w	r3, r7, #8
 800dfe4:	2290      	movs	r2, #144	; 0x90
 800dfe6:	2100      	movs	r1, #0
 800dfe8:	4618      	mov	r0, r3
 800dfea:	f001 f8d3 	bl	800f194 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800dfee:	4b41      	ldr	r3, [pc, #260]	; (800e0f4 <SystemClock_Config+0x138>)
 800dff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dff2:	4a40      	ldr	r2, [pc, #256]	; (800e0f4 <SystemClock_Config+0x138>)
 800dff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dff8:	6413      	str	r3, [r2, #64]	; 0x40
 800dffa:	4b3e      	ldr	r3, [pc, #248]	; (800e0f4 <SystemClock_Config+0x138>)
 800dffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e002:	607b      	str	r3, [r7, #4]
 800e004:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800e006:	4b3c      	ldr	r3, [pc, #240]	; (800e0f8 <SystemClock_Config+0x13c>)
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	4a3b      	ldr	r2, [pc, #236]	; (800e0f8 <SystemClock_Config+0x13c>)
 800e00c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e010:	6013      	str	r3, [r2, #0]
 800e012:	4b39      	ldr	r3, [pc, #228]	; (800e0f8 <SystemClock_Config+0x13c>)
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800e01a:	603b      	str	r3, [r7, #0]
 800e01c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800e01e:	2301      	movs	r3, #1
 800e020:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800e024:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800e028:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800e02c:	2302      	movs	r3, #2
 800e02e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800e032:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e036:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 800e03a:	2319      	movs	r3, #25
 800e03c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 400;
 800e040:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800e044:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800e048:	2302      	movs	r3, #2
 800e04a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800e04e:	2308      	movs	r3, #8
 800e050:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800e054:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800e058:	4618      	mov	r0, r3
 800e05a:	f7f8 fad5 	bl	8006608 <HAL_RCC_OscConfig>
 800e05e:	4603      	mov	r3, r0
 800e060:	2b00      	cmp	r3, #0
 800e062:	d001      	beq.n	800e068 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800e064:	f000 fc30 	bl	800e8c8 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800e068:	f7f8 fa7e 	bl	8006568 <HAL_PWREx_EnableOverDrive>
 800e06c:	4603      	mov	r3, r0
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d001      	beq.n	800e076 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800e072:	f000 fc29 	bl	800e8c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800e076:	230f      	movs	r3, #15
 800e078:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800e07c:	2302      	movs	r3, #2
 800e07e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800e082:	2300      	movs	r3, #0
 800e084:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800e088:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800e08c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800e090:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e094:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800e098:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800e09c:	2106      	movs	r1, #6
 800e09e:	4618      	mov	r0, r3
 800e0a0:	f7f8 fd24 	bl	8006aec <HAL_RCC_ClockConfig>
 800e0a4:	4603      	mov	r3, r0
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d001      	beq.n	800e0ae <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800e0aa:	f000 fc0d 	bl	800e8c8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SDMMC2
 800e0ae:	4b13      	ldr	r3, [pc, #76]	; (800e0fc <SystemClock_Config+0x140>)
 800e0b0:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800e0b2:	23c0      	movs	r3, #192	; 0xc0
 800e0b4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800e0b6:	2302      	movs	r3, #2
 800e0b8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800e0ba:	2302      	movs	r3, #2
 800e0bc:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 800e0be:	2300      	movs	r3, #0
 800e0c0:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800e0c2:	2301      	movs	r3, #1
 800e0c4:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc2ClockSelection = RCC_SDMMC2CLKSOURCE_CLK48;
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800e0d6:	f107 0308 	add.w	r3, r7, #8
 800e0da:	4618      	mov	r0, r3
 800e0dc:	f7f8 fea0 	bl	8006e20 <HAL_RCCEx_PeriphCLKConfig>
 800e0e0:	4603      	mov	r3, r0
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d001      	beq.n	800e0ea <SystemClock_Config+0x12e>
  {
    Error_Handler();
 800e0e6:	f000 fbef 	bl	800e8c8 <Error_Handler>
  }
}
 800e0ea:	bf00      	nop
 800e0ec:	37e0      	adds	r7, #224	; 0xe0
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	bd80      	pop	{r7, pc}
 800e0f2:	bf00      	nop
 800e0f4:	40023800 	.word	0x40023800
 800e0f8:	40007000 	.word	0x40007000
 800e0fc:	04200008 	.word	0x04200008

0800e100 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b084      	sub	sp, #16
 800e104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800e106:	463b      	mov	r3, r7
 800e108:	2200      	movs	r2, #0
 800e10a:	601a      	str	r2, [r3, #0]
 800e10c:	605a      	str	r2, [r3, #4]
 800e10e:	609a      	str	r2, [r3, #8]
 800e110:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800e112:	4b21      	ldr	r3, [pc, #132]	; (800e198 <MX_ADC1_Init+0x98>)
 800e114:	4a21      	ldr	r2, [pc, #132]	; (800e19c <MX_ADC1_Init+0x9c>)
 800e116:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800e118:	4b1f      	ldr	r3, [pc, #124]	; (800e198 <MX_ADC1_Init+0x98>)
 800e11a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800e11e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800e120:	4b1d      	ldr	r3, [pc, #116]	; (800e198 <MX_ADC1_Init+0x98>)
 800e122:	2200      	movs	r2, #0
 800e124:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800e126:	4b1c      	ldr	r3, [pc, #112]	; (800e198 <MX_ADC1_Init+0x98>)
 800e128:	2200      	movs	r2, #0
 800e12a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800e12c:	4b1a      	ldr	r3, [pc, #104]	; (800e198 <MX_ADC1_Init+0x98>)
 800e12e:	2201      	movs	r2, #1
 800e130:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800e132:	4b19      	ldr	r3, [pc, #100]	; (800e198 <MX_ADC1_Init+0x98>)
 800e134:	2200      	movs	r2, #0
 800e136:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800e13a:	4b17      	ldr	r3, [pc, #92]	; (800e198 <MX_ADC1_Init+0x98>)
 800e13c:	2200      	movs	r2, #0
 800e13e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800e140:	4b15      	ldr	r3, [pc, #84]	; (800e198 <MX_ADC1_Init+0x98>)
 800e142:	4a17      	ldr	r2, [pc, #92]	; (800e1a0 <MX_ADC1_Init+0xa0>)
 800e144:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800e146:	4b14      	ldr	r3, [pc, #80]	; (800e198 <MX_ADC1_Init+0x98>)
 800e148:	2200      	movs	r2, #0
 800e14a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800e14c:	4b12      	ldr	r3, [pc, #72]	; (800e198 <MX_ADC1_Init+0x98>)
 800e14e:	2201      	movs	r2, #1
 800e150:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800e152:	4b11      	ldr	r3, [pc, #68]	; (800e198 <MX_ADC1_Init+0x98>)
 800e154:	2200      	movs	r2, #0
 800e156:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800e15a:	4b0f      	ldr	r3, [pc, #60]	; (800e198 <MX_ADC1_Init+0x98>)
 800e15c:	2201      	movs	r2, #1
 800e15e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800e160:	480d      	ldr	r0, [pc, #52]	; (800e198 <MX_ADC1_Init+0x98>)
 800e162:	f7f4 fc13 	bl	800298c <HAL_ADC_Init>
 800e166:	4603      	mov	r3, r0
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d001      	beq.n	800e170 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800e16c:	f000 fbac 	bl	800e8c8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800e170:	4b0c      	ldr	r3, [pc, #48]	; (800e1a4 <MX_ADC1_Init+0xa4>)
 800e172:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800e174:	2301      	movs	r3, #1
 800e176:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800e178:	2303      	movs	r3, #3
 800e17a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800e17c:	463b      	mov	r3, r7
 800e17e:	4619      	mov	r1, r3
 800e180:	4805      	ldr	r0, [pc, #20]	; (800e198 <MX_ADC1_Init+0x98>)
 800e182:	f7f4 feb1 	bl	8002ee8 <HAL_ADC_ConfigChannel>
 800e186:	4603      	mov	r3, r0
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d001      	beq.n	800e190 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800e18c:	f000 fb9c 	bl	800e8c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800e190:	bf00      	nop
 800e192:	3710      	adds	r7, #16
 800e194:	46bd      	mov	sp, r7
 800e196:	bd80      	pop	{r7, pc}
 800e198:	20000a98 	.word	0x20000a98
 800e19c:	40012000 	.word	0x40012000
 800e1a0:	0f000001 	.word	0x0f000001
 800e1a4:	10000012 	.word	0x10000012

0800e1a8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800e1ac:	4b18      	ldr	r3, [pc, #96]	; (800e210 <MX_DMA2D_Init+0x68>)
 800e1ae:	4a19      	ldr	r2, [pc, #100]	; (800e214 <MX_DMA2D_Init+0x6c>)
 800e1b0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800e1b2:	4b17      	ldr	r3, [pc, #92]	; (800e210 <MX_DMA2D_Init+0x68>)
 800e1b4:	2200      	movs	r2, #0
 800e1b6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800e1b8:	4b15      	ldr	r3, [pc, #84]	; (800e210 <MX_DMA2D_Init+0x68>)
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800e1be:	4b14      	ldr	r3, [pc, #80]	; (800e210 <MX_DMA2D_Init+0x68>)
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800e1c4:	4b12      	ldr	r3, [pc, #72]	; (800e210 <MX_DMA2D_Init+0x68>)
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	639a      	str	r2, [r3, #56]	; 0x38
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800e1ca:	4b11      	ldr	r3, [pc, #68]	; (800e210 <MX_DMA2D_Init+0x68>)
 800e1cc:	2200      	movs	r2, #0
 800e1ce:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800e1d0:	4b0f      	ldr	r3, [pc, #60]	; (800e210 <MX_DMA2D_Init+0x68>)
 800e1d2:	2200      	movs	r2, #0
 800e1d4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800e1d6:	4b0e      	ldr	r3, [pc, #56]	; (800e210 <MX_DMA2D_Init+0x68>)
 800e1d8:	2200      	movs	r2, #0
 800e1da:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 800e1dc:	4b0c      	ldr	r3, [pc, #48]	; (800e210 <MX_DMA2D_Init+0x68>)
 800e1de:	2200      	movs	r2, #0
 800e1e0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 800e1e2:	4b0b      	ldr	r3, [pc, #44]	; (800e210 <MX_DMA2D_Init+0x68>)
 800e1e4:	2200      	movs	r2, #0
 800e1e6:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800e1e8:	4809      	ldr	r0, [pc, #36]	; (800e210 <MX_DMA2D_Init+0x68>)
 800e1ea:	f7f5 fb83 	bl	80038f4 <HAL_DMA2D_Init>
 800e1ee:	4603      	mov	r3, r0
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d001      	beq.n	800e1f8 <MX_DMA2D_Init+0x50>
  {
    Error_Handler();
 800e1f4:	f000 fb68 	bl	800e8c8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800e1f8:	2101      	movs	r1, #1
 800e1fa:	4805      	ldr	r0, [pc, #20]	; (800e210 <MX_DMA2D_Init+0x68>)
 800e1fc:	f7f5 fce8 	bl	8003bd0 <HAL_DMA2D_ConfigLayer>
 800e200:	4603      	mov	r3, r0
 800e202:	2b00      	cmp	r3, #0
 800e204:	d001      	beq.n	800e20a <MX_DMA2D_Init+0x62>
  {
    Error_Handler();
 800e206:	f000 fb5f 	bl	800e8c8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800e20a:	bf00      	nop
 800e20c:	bd80      	pop	{r7, pc}
 800e20e:	bf00      	nop
 800e210:	20000b64 	.word	0x20000b64
 800e214:	4002b000 	.word	0x4002b000

0800e218 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 800e218:	b580      	push	{r7, lr}
 800e21a:	b0aa      	sub	sp, #168	; 0xa8
 800e21c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 800e21e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800e222:	2200      	movs	r2, #0
 800e224:	601a      	str	r2, [r3, #0]
 800e226:	605a      	str	r2, [r3, #4]
 800e228:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 800e22a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800e22e:	2224      	movs	r2, #36	; 0x24
 800e230:	2100      	movs	r1, #0
 800e232:	4618      	mov	r0, r3
 800e234:	f000 ffae 	bl	800f194 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 800e238:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800e23c:	2200      	movs	r2, #0
 800e23e:	601a      	str	r2, [r3, #0]
 800e240:	605a      	str	r2, [r3, #4]
 800e242:	609a      	str	r2, [r3, #8]
 800e244:	60da      	str	r2, [r3, #12]
 800e246:	611a      	str	r2, [r3, #16]
 800e248:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 800e24a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e24e:	2234      	movs	r2, #52	; 0x34
 800e250:	2100      	movs	r1, #0
 800e252:	4618      	mov	r0, r3
 800e254:	f000 ff9e 	bl	800f194 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 800e258:	463b      	mov	r3, r7
 800e25a:	222c      	movs	r2, #44	; 0x2c
 800e25c:	2100      	movs	r1, #0
 800e25e:	4618      	mov	r0, r3
 800e260:	f000 ff98 	bl	800f194 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 800e264:	4b64      	ldr	r3, [pc, #400]	; (800e3f8 <MX_DSIHOST_DSI_Init+0x1e0>)
 800e266:	4a65      	ldr	r2, [pc, #404]	; (800e3fc <MX_DSIHOST_DSI_Init+0x1e4>)
 800e268:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 800e26a:	4b63      	ldr	r3, [pc, #396]	; (800e3f8 <MX_DSIHOST_DSI_Init+0x1e0>)
 800e26c:	2200      	movs	r2, #0
 800e26e:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 800e270:	4b61      	ldr	r3, [pc, #388]	; (800e3f8 <MX_DSIHOST_DSI_Init+0x1e0>)
 800e272:	2204      	movs	r2, #4
 800e274:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 800e276:	4b60      	ldr	r3, [pc, #384]	; (800e3f8 <MX_DSIHOST_DSI_Init+0x1e0>)
 800e278:	2200      	movs	r2, #0
 800e27a:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 20;
 800e27c:	2314      	movs	r3, #20
 800e27e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 800e282:	2301      	movs	r3, #1
 800e284:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 800e288:	2300      	movs	r3, #0
 800e28a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 800e28e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800e292:	4619      	mov	r1, r3
 800e294:	4858      	ldr	r0, [pc, #352]	; (800e3f8 <MX_DSIHOST_DSI_Init+0x1e0>)
 800e296:	f7f5 fe1d 	bl	8003ed4 <HAL_DSI_Init>
 800e29a:	4603      	mov	r3, r0
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d001      	beq.n	800e2a4 <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 800e2a0:	f000 fb12 	bl	800e8c8 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 800e2a4:	2301      	movs	r3, #1
 800e2a6:	67bb      	str	r3, [r7, #120]	; 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	67fb      	str	r3, [r7, #124]	; 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 800e2be:	2300      	movs	r3, #0
 800e2c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.BTATimeout = 0;
 800e2d0:	2300      	movs	r3, #0
 800e2d2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 800e2d6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800e2da:	4619      	mov	r1, r3
 800e2dc:	4846      	ldr	r0, [pc, #280]	; (800e3f8 <MX_DSIHOST_DSI_Init+0x1e0>)
 800e2de:	f7f6 fc35 	bl	8004b4c <HAL_DSI_ConfigHostTimeouts>
 800e2e2:	4603      	mov	r3, r0
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d001      	beq.n	800e2ec <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 800e2e8:	f000 faee 	bl	800e8c8 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 800e2ec:	231c      	movs	r3, #28
 800e2ee:	663b      	str	r3, [r7, #96]	; 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 800e2f0:	2321      	movs	r3, #33	; 0x21
 800e2f2:	667b      	str	r3, [r7, #100]	; 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 800e2f4:	230f      	movs	r3, #15
 800e2f6:	66bb      	str	r3, [r7, #104]	; 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 800e2f8:	2319      	movs	r3, #25
 800e2fa:	66fb      	str	r3, [r7, #108]	; 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.StopWaitTime = 0;
 800e300:	2300      	movs	r3, #0
 800e302:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 800e304:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800e308:	4619      	mov	r1, r3
 800e30a:	483b      	ldr	r0, [pc, #236]	; (800e3f8 <MX_DSIHOST_DSI_Init+0x1e0>)
 800e30c:	f7f6 fbb4 	bl	8004a78 <HAL_DSI_ConfigPhyTimer>
 800e310:	4603      	mov	r3, r0
 800e312:	2b00      	cmp	r3, #0
 800e314:	d001      	beq.n	800e31a <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 800e316:	f000 fad7 	bl	800e8c8 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 800e31a:	2104      	movs	r1, #4
 800e31c:	4836      	ldr	r0, [pc, #216]	; (800e3f8 <MX_DSIHOST_DSI_Init+0x1e0>)
 800e31e:	f7f6 fb83 	bl	8004a28 <HAL_DSI_ConfigFlowControl>
 800e322:	4603      	mov	r3, r0
 800e324:	2b00      	cmp	r3, #0
 800e326:	d001      	beq.n	800e32c <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 800e328:	f000 face 	bl	800e8c8 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 800e32c:	f242 7110 	movw	r1, #10000	; 0x2710
 800e330:	4831      	ldr	r0, [pc, #196]	; (800e3f8 <MX_DSIHOST_DSI_Init+0x1e0>)
 800e332:	f7f6 fdc9 	bl	8004ec8 <HAL_DSI_SetLowPowerRXFilter>
 800e336:	4603      	mov	r3, r0
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d001      	beq.n	800e340 <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 800e33c:	f000 fac4 	bl	800e8c8 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 800e340:	2100      	movs	r1, #0
 800e342:	482d      	ldr	r0, [pc, #180]	; (800e3f8 <MX_DSIHOST_DSI_Init+0x1e0>)
 800e344:	f7f5 ff54 	bl	80041f0 <HAL_DSI_ConfigErrorMonitor>
 800e348:	4603      	mov	r3, r0
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d001      	beq.n	800e352 <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 800e34e:	f000 fabb 	bl	800e8c8 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_DISABLE;
 800e352:	2300      	movs	r3, #0
 800e354:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 800e356:	2300      	movs	r3, #0
 800e358:	633b      	str	r3, [r7, #48]	; 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_DISABLE;
 800e35a:	2300      	movs	r3, #0
 800e35c:	637b      	str	r3, [r7, #52]	; 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 800e35e:	2300      	movs	r3, #0
 800e360:	63bb      	str	r3, [r7, #56]	; 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_DISABLE;
 800e362:	2300      	movs	r3, #0
 800e364:	63fb      	str	r3, [r7, #60]	; 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 800e366:	2300      	movs	r3, #0
 800e368:	643b      	str	r3, [r7, #64]	; 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_DISABLE;
 800e36a:	2300      	movs	r3, #0
 800e36c:	647b      	str	r3, [r7, #68]	; 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 800e36e:	2300      	movs	r3, #0
 800e370:	64bb      	str	r3, [r7, #72]	; 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_DISABLE;
 800e372:	2300      	movs	r3, #0
 800e374:	64fb      	str	r3, [r7, #76]	; 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 800e376:	2300      	movs	r3, #0
 800e378:	653b      	str	r3, [r7, #80]	; 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 800e37a:	2300      	movs	r3, #0
 800e37c:	657b      	str	r3, [r7, #84]	; 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_DISABLE;
 800e37e:	2300      	movs	r3, #0
 800e380:	65bb      	str	r3, [r7, #88]	; 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 800e382:	2300      	movs	r3, #0
 800e384:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 800e386:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e38a:	4619      	mov	r1, r3
 800e38c:	481a      	ldr	r0, [pc, #104]	; (800e3f8 <MX_DSIHOST_DSI_Init+0x1e0>)
 800e38e:	f7f6 faed 	bl	800496c <HAL_DSI_ConfigCommand>
 800e392:	4603      	mov	r3, r0
 800e394:	2b00      	cmp	r3, #0
 800e396:	d001      	beq.n	800e39c <MX_DSIHOST_DSI_Init+0x184>
  {
    Error_Handler();
 800e398:	f000 fa96 	bl	800e8c8 <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 800e39c:	2300      	movs	r3, #0
 800e39e:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 800e3a0:	2305      	movs	r3, #5
 800e3a2:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 640;
 800e3a4:	f44f 7320 	mov.w	r3, #640	; 0x280
 800e3a8:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 800e3aa:	2310      	movs	r3, #16
 800e3ac:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 800e3b2:	2304      	movs	r3, #4
 800e3b4:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 800e3b6:	2302      	movs	r3, #2
 800e3b8:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 800e3be:	2300      	movs	r3, #0
 800e3c0:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 800e3c2:	2340      	movs	r3, #64	; 0x40
 800e3c4:	627b      	str	r3, [r7, #36]	; 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_DISABLE;
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 800e3ca:	463b      	mov	r3, r7
 800e3cc:	4619      	mov	r1, r3
 800e3ce:	480a      	ldr	r0, [pc, #40]	; (800e3f8 <MX_DSIHOST_DSI_Init+0x1e0>)
 800e3d0:	f7f6 f9f2 	bl	80047b8 <HAL_DSI_ConfigAdaptedCommandMode>
 800e3d4:	4603      	mov	r3, r0
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d001      	beq.n	800e3de <MX_DSIHOST_DSI_Init+0x1c6>
  {
    Error_Handler();
 800e3da:	f000 fa75 	bl	800e8c8 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 800e3de:	2100      	movs	r1, #0
 800e3e0:	4805      	ldr	r0, [pc, #20]	; (800e3f8 <MX_DSIHOST_DSI_Init+0x1e0>)
 800e3e2:	f7f5 ffc1 	bl	8004368 <HAL_DSI_SetGenericVCID>
 800e3e6:	4603      	mov	r3, r0
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d001      	beq.n	800e3f0 <MX_DSIHOST_DSI_Init+0x1d8>
  {
    Error_Handler();
 800e3ec:	f000 fa6c 	bl	800e8c8 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 800e3f0:	bf00      	nop
 800e3f2:	37a8      	adds	r7, #168	; 0xa8
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	bd80      	pop	{r7, pc}
 800e3f8:	20000930 	.word	0x20000930
 800e3fc:	40016c00 	.word	0x40016c00

0800e400 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800e400:	b580      	push	{r7, lr}
 800e402:	b09a      	sub	sp, #104	; 0x68
 800e404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800e406:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e40a:	2234      	movs	r2, #52	; 0x34
 800e40c:	2100      	movs	r1, #0
 800e40e:	4618      	mov	r0, r3
 800e410:	f000 fec0 	bl	800f194 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 800e414:	463b      	mov	r3, r7
 800e416:	2234      	movs	r2, #52	; 0x34
 800e418:	2100      	movs	r1, #0
 800e41a:	4618      	mov	r0, r3
 800e41c:	f000 feba 	bl	800f194 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800e420:	4b4e      	ldr	r3, [pc, #312]	; (800e55c <MX_LTDC_Init+0x15c>)
 800e422:	4a4f      	ldr	r2, [pc, #316]	; (800e560 <MX_LTDC_Init+0x160>)
 800e424:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800e426:	4b4d      	ldr	r3, [pc, #308]	; (800e55c <MX_LTDC_Init+0x15c>)
 800e428:	2200      	movs	r2, #0
 800e42a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800e42c:	4b4b      	ldr	r3, [pc, #300]	; (800e55c <MX_LTDC_Init+0x15c>)
 800e42e:	2200      	movs	r2, #0
 800e430:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800e432:	4b4a      	ldr	r3, [pc, #296]	; (800e55c <MX_LTDC_Init+0x15c>)
 800e434:	2200      	movs	r2, #0
 800e436:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800e438:	4b48      	ldr	r3, [pc, #288]	; (800e55c <MX_LTDC_Init+0x15c>)
 800e43a:	2200      	movs	r2, #0
 800e43c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 800e43e:	4b47      	ldr	r3, [pc, #284]	; (800e55c <MX_LTDC_Init+0x15c>)
 800e440:	2207      	movs	r2, #7
 800e442:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 800e444:	4b45      	ldr	r3, [pc, #276]	; (800e55c <MX_LTDC_Init+0x15c>)
 800e446:	2203      	movs	r2, #3
 800e448:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 800e44a:	4b44      	ldr	r3, [pc, #272]	; (800e55c <MX_LTDC_Init+0x15c>)
 800e44c:	220e      	movs	r2, #14
 800e44e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 800e450:	4b42      	ldr	r3, [pc, #264]	; (800e55c <MX_LTDC_Init+0x15c>)
 800e452:	2205      	movs	r2, #5
 800e454:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 800e456:	4b41      	ldr	r3, [pc, #260]	; (800e55c <MX_LTDC_Init+0x15c>)
 800e458:	f240 228e 	movw	r2, #654	; 0x28e
 800e45c:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 800e45e:	4b3f      	ldr	r3, [pc, #252]	; (800e55c <MX_LTDC_Init+0x15c>)
 800e460:	f240 12e5 	movw	r2, #485	; 0x1e5
 800e464:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 800e466:	4b3d      	ldr	r3, [pc, #244]	; (800e55c <MX_LTDC_Init+0x15c>)
 800e468:	f44f 7225 	mov.w	r2, #660	; 0x294
 800e46c:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 800e46e:	4b3b      	ldr	r3, [pc, #236]	; (800e55c <MX_LTDC_Init+0x15c>)
 800e470:	f240 12e7 	movw	r2, #487	; 0x1e7
 800e474:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800e476:	4b39      	ldr	r3, [pc, #228]	; (800e55c <MX_LTDC_Init+0x15c>)
 800e478:	2200      	movs	r2, #0
 800e47a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800e47e:	4b37      	ldr	r3, [pc, #220]	; (800e55c <MX_LTDC_Init+0x15c>)
 800e480:	2200      	movs	r2, #0
 800e482:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800e486:	4b35      	ldr	r3, [pc, #212]	; (800e55c <MX_LTDC_Init+0x15c>)
 800e488:	2200      	movs	r2, #0
 800e48a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800e48e:	4833      	ldr	r0, [pc, #204]	; (800e55c <MX_LTDC_Init+0x15c>)
 800e490:	f7f7 fd72 	bl	8005f78 <HAL_LTDC_Init>
 800e494:	4603      	mov	r3, r0
 800e496:	2b00      	cmp	r3, #0
 800e498:	d001      	beq.n	800e49e <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800e49a:	f000 fa15 	bl	800e8c8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800e49e:	2300      	movs	r3, #0
 800e4a0:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800e4ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e4be:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800e4c0:	2305      	movs	r3, #5
 800e4c2:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 800e4c8:	2300      	movs	r3, #0
 800e4ca:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 800e4dc:	2300      	movs	r3, #0
 800e4de:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800e4e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e4e6:	2200      	movs	r2, #0
 800e4e8:	4619      	mov	r1, r3
 800e4ea:	481c      	ldr	r0, [pc, #112]	; (800e55c <MX_LTDC_Init+0x15c>)
 800e4ec:	f7f7 fe14 	bl	8006118 <HAL_LTDC_ConfigLayer>
 800e4f0:	4603      	mov	r3, r0
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d001      	beq.n	800e4fa <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 800e4f6:	f000 f9e7 	bl	800e8c8 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800e4fe:	2300      	movs	r3, #0
 800e500:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800e502:	2300      	movs	r3, #0
 800e504:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 800e506:	2300      	movs	r3, #0
 800e508:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800e50a:	2300      	movs	r3, #0
 800e50c:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 800e50e:	2300      	movs	r3, #0
 800e510:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800e512:	2300      	movs	r3, #0
 800e514:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800e516:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e51a:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800e51c:	2305      	movs	r3, #5
 800e51e:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 800e520:	2300      	movs	r3, #0
 800e522:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 800e524:	2300      	movs	r3, #0
 800e526:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 800e528:	2300      	movs	r3, #0
 800e52a:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 800e52c:	2300      	movs	r3, #0
 800e52e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800e532:	2300      	movs	r3, #0
 800e534:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 800e538:	2300      	movs	r3, #0
 800e53a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800e53e:	463b      	mov	r3, r7
 800e540:	2201      	movs	r2, #1
 800e542:	4619      	mov	r1, r3
 800e544:	4805      	ldr	r0, [pc, #20]	; (800e55c <MX_LTDC_Init+0x15c>)
 800e546:	f7f7 fde7 	bl	8006118 <HAL_LTDC_ConfigLayer>
 800e54a:	4603      	mov	r3, r0
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d001      	beq.n	800e554 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 800e550:	f000 f9ba 	bl	800e8c8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800e554:	bf00      	nop
 800e556:	3768      	adds	r7, #104	; 0x68
 800e558:	46bd      	mov	sp, r7
 800e55a:	bd80      	pop	{r7, pc}
 800e55c:	200009f0 	.word	0x200009f0
 800e560:	40016800 	.word	0x40016800

0800e564 <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 800e564:	b480      	push	{r7}
 800e566:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 800e568:	4b0c      	ldr	r3, [pc, #48]	; (800e59c <MX_SDMMC2_SD_Init+0x38>)
 800e56a:	4a0d      	ldr	r2, [pc, #52]	; (800e5a0 <MX_SDMMC2_SD_Init+0x3c>)
 800e56c:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800e56e:	4b0b      	ldr	r3, [pc, #44]	; (800e59c <MX_SDMMC2_SD_Init+0x38>)
 800e570:	2200      	movs	r2, #0
 800e572:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 800e574:	4b09      	ldr	r3, [pc, #36]	; (800e59c <MX_SDMMC2_SD_Init+0x38>)
 800e576:	2200      	movs	r2, #0
 800e578:	609a      	str	r2, [r3, #8]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800e57a:	4b08      	ldr	r3, [pc, #32]	; (800e59c <MX_SDMMC2_SD_Init+0x38>)
 800e57c:	2200      	movs	r2, #0
 800e57e:	60da      	str	r2, [r3, #12]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800e580:	4b06      	ldr	r3, [pc, #24]	; (800e59c <MX_SDMMC2_SD_Init+0x38>)
 800e582:	2200      	movs	r2, #0
 800e584:	611a      	str	r2, [r3, #16]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800e586:	4b05      	ldr	r3, [pc, #20]	; (800e59c <MX_SDMMC2_SD_Init+0x38>)
 800e588:	2200      	movs	r2, #0
 800e58a:	615a      	str	r2, [r3, #20]
  hsd2.Init.ClockDiv = 0;
 800e58c:	4b03      	ldr	r3, [pc, #12]	; (800e59c <MX_SDMMC2_SD_Init+0x38>)
 800e58e:	2200      	movs	r2, #0
 800e590:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 800e592:	bf00      	nop
 800e594:	46bd      	mov	sp, r7
 800e596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e59a:	4770      	bx	lr
 800e59c:	2000096c 	.word	0x2000096c
 800e5a0:	40011c00 	.word	0x40011c00

0800e5a4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b084      	sub	sp, #16
 800e5a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e5aa:	1d3b      	adds	r3, r7, #4
 800e5ac:	2200      	movs	r2, #0
 800e5ae:	601a      	str	r2, [r3, #0]
 800e5b0:	605a      	str	r2, [r3, #4]
 800e5b2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800e5b4:	4b15      	ldr	r3, [pc, #84]	; (800e60c <MX_TIM6_Init+0x68>)
 800e5b6:	4a16      	ldr	r2, [pc, #88]	; (800e610 <MX_TIM6_Init+0x6c>)
 800e5b8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 19999;
 800e5ba:	4b14      	ldr	r3, [pc, #80]	; (800e60c <MX_TIM6_Init+0x68>)
 800e5bc:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800e5c0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e5c2:	4b12      	ldr	r3, [pc, #72]	; (800e60c <MX_TIM6_Init+0x68>)
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 800e5c8:	4b10      	ldr	r3, [pc, #64]	; (800e60c <MX_TIM6_Init+0x68>)
 800e5ca:	f242 720f 	movw	r2, #9999	; 0x270f
 800e5ce:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e5d0:	4b0e      	ldr	r3, [pc, #56]	; (800e60c <MX_TIM6_Init+0x68>)
 800e5d2:	2200      	movs	r2, #0
 800e5d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800e5d6:	480d      	ldr	r0, [pc, #52]	; (800e60c <MX_TIM6_Init+0x68>)
 800e5d8:	f7fa fa46 	bl	8008a68 <HAL_TIM_Base_Init>
 800e5dc:	4603      	mov	r3, r0
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d001      	beq.n	800e5e6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800e5e2:	f000 f971 	bl	800e8c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800e5ee:	1d3b      	adds	r3, r7, #4
 800e5f0:	4619      	mov	r1, r3
 800e5f2:	4806      	ldr	r0, [pc, #24]	; (800e60c <MX_TIM6_Init+0x68>)
 800e5f4:	f7fa fc76 	bl	8008ee4 <HAL_TIMEx_MasterConfigSynchronization>
 800e5f8:	4603      	mov	r3, r0
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d001      	beq.n	800e602 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800e5fe:	f000 f963 	bl	800e8c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800e602:	bf00      	nop
 800e604:	3710      	adds	r7, #16
 800e606:	46bd      	mov	sp, r7
 800e608:	bd80      	pop	{r7, pc}
 800e60a:	bf00      	nop
 800e60c:	20000b00 	.word	0x20000b00
 800e610:	40001000 	.word	0x40001000

0800e614 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800e614:	b580      	push	{r7, lr}
 800e616:	b084      	sub	sp, #16
 800e618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e61a:	1d3b      	adds	r3, r7, #4
 800e61c:	2200      	movs	r2, #0
 800e61e:	601a      	str	r2, [r3, #0]
 800e620:	605a      	str	r2, [r3, #4]
 800e622:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800e624:	4b15      	ldr	r3, [pc, #84]	; (800e67c <MX_TIM7_Init+0x68>)
 800e626:	4a16      	ldr	r2, [pc, #88]	; (800e680 <MX_TIM7_Init+0x6c>)
 800e628:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9999;
 800e62a:	4b14      	ldr	r3, [pc, #80]	; (800e67c <MX_TIM7_Init+0x68>)
 800e62c:	f242 720f 	movw	r2, #9999	; 0x270f
 800e630:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e632:	4b12      	ldr	r3, [pc, #72]	; (800e67c <MX_TIM7_Init+0x68>)
 800e634:	2200      	movs	r2, #0
 800e636:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 800e638:	4b10      	ldr	r3, [pc, #64]	; (800e67c <MX_TIM7_Init+0x68>)
 800e63a:	f242 720f 	movw	r2, #9999	; 0x270f
 800e63e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e640:	4b0e      	ldr	r3, [pc, #56]	; (800e67c <MX_TIM7_Init+0x68>)
 800e642:	2200      	movs	r2, #0
 800e644:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800e646:	480d      	ldr	r0, [pc, #52]	; (800e67c <MX_TIM7_Init+0x68>)
 800e648:	f7fa fa0e 	bl	8008a68 <HAL_TIM_Base_Init>
 800e64c:	4603      	mov	r3, r0
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d001      	beq.n	800e656 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800e652:	f000 f939 	bl	800e8c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e656:	2300      	movs	r3, #0
 800e658:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e65a:	2300      	movs	r3, #0
 800e65c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800e65e:	1d3b      	adds	r3, r7, #4
 800e660:	4619      	mov	r1, r3
 800e662:	4806      	ldr	r0, [pc, #24]	; (800e67c <MX_TIM7_Init+0x68>)
 800e664:	f7fa fc3e 	bl	8008ee4 <HAL_TIMEx_MasterConfigSynchronization>
 800e668:	4603      	mov	r3, r0
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d001      	beq.n	800e672 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800e66e:	f000 f92b 	bl	800e8c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800e672:	bf00      	nop
 800e674:	3710      	adds	r7, #16
 800e676:	46bd      	mov	sp, r7
 800e678:	bd80      	pop	{r7, pc}
 800e67a:	bf00      	nop
 800e67c:	20000bfc 	.word	0x20000bfc
 800e680:	40001400 	.word	0x40001400

0800e684 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800e684:	b580      	push	{r7, lr}
 800e686:	b088      	sub	sp, #32
 800e688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800e68a:	1d3b      	adds	r3, r7, #4
 800e68c:	2200      	movs	r2, #0
 800e68e:	601a      	str	r2, [r3, #0]
 800e690:	605a      	str	r2, [r3, #4]
 800e692:	609a      	str	r2, [r3, #8]
 800e694:	60da      	str	r2, [r3, #12]
 800e696:	611a      	str	r2, [r3, #16]
 800e698:	615a      	str	r2, [r3, #20]
 800e69a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800e69c:	4b1e      	ldr	r3, [pc, #120]	; (800e718 <MX_FMC_Init+0x94>)
 800e69e:	4a1f      	ldr	r2, [pc, #124]	; (800e71c <MX_FMC_Init+0x98>)
 800e6a0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800e6a2:	4b1d      	ldr	r3, [pc, #116]	; (800e718 <MX_FMC_Init+0x94>)
 800e6a4:	2201      	movs	r2, #1
 800e6a6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800e6a8:	4b1b      	ldr	r3, [pc, #108]	; (800e718 <MX_FMC_Init+0x94>)
 800e6aa:	2200      	movs	r2, #0
 800e6ac:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 800e6ae:	4b1a      	ldr	r3, [pc, #104]	; (800e718 <MX_FMC_Init+0x94>)
 800e6b0:	2208      	movs	r2, #8
 800e6b2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 800e6b4:	4b18      	ldr	r3, [pc, #96]	; (800e718 <MX_FMC_Init+0x94>)
 800e6b6:	2220      	movs	r2, #32
 800e6b8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800e6ba:	4b17      	ldr	r3, [pc, #92]	; (800e718 <MX_FMC_Init+0x94>)
 800e6bc:	2240      	movs	r2, #64	; 0x40
 800e6be:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 800e6c0:	4b15      	ldr	r3, [pc, #84]	; (800e718 <MX_FMC_Init+0x94>)
 800e6c2:	2280      	movs	r2, #128	; 0x80
 800e6c4:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800e6c6:	4b14      	ldr	r3, [pc, #80]	; (800e718 <MX_FMC_Init+0x94>)
 800e6c8:	2200      	movs	r2, #0
 800e6ca:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 800e6cc:	4b12      	ldr	r3, [pc, #72]	; (800e718 <MX_FMC_Init+0x94>)
 800e6ce:	2200      	movs	r2, #0
 800e6d0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800e6d2:	4b11      	ldr	r3, [pc, #68]	; (800e718 <MX_FMC_Init+0x94>)
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800e6d8:	4b0f      	ldr	r3, [pc, #60]	; (800e718 <MX_FMC_Init+0x94>)
 800e6da:	2200      	movs	r2, #0
 800e6dc:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 800e6de:	2310      	movs	r3, #16
 800e6e0:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 800e6e2:	2310      	movs	r3, #16
 800e6e4:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 800e6e6:	2310      	movs	r3, #16
 800e6e8:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 800e6ea:	2310      	movs	r3, #16
 800e6ec:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 800e6ee:	2310      	movs	r3, #16
 800e6f0:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 800e6f2:	2310      	movs	r3, #16
 800e6f4:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 800e6f6:	2310      	movs	r3, #16
 800e6f8:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800e6fa:	1d3b      	adds	r3, r7, #4
 800e6fc:	4619      	mov	r1, r3
 800e6fe:	4806      	ldr	r0, [pc, #24]	; (800e718 <MX_FMC_Init+0x94>)
 800e700:	f7fa f933 	bl	800896a <HAL_SDRAM_Init>
 800e704:	4603      	mov	r3, r0
 800e706:	2b00      	cmp	r3, #0
 800e708:	d001      	beq.n	800e70e <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 800e70a:	f000 f8dd 	bl	800e8c8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800e70e:	bf00      	nop
 800e710:	3720      	adds	r7, #32
 800e712:	46bd      	mov	sp, r7
 800e714:	bd80      	pop	{r7, pc}
 800e716:	bf00      	nop
 800e718:	20000bc8 	.word	0x20000bc8
 800e71c:	a0000140 	.word	0xa0000140

0800e720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800e720:	b580      	push	{r7, lr}
 800e722:	b08e      	sub	sp, #56	; 0x38
 800e724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e726:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e72a:	2200      	movs	r2, #0
 800e72c:	601a      	str	r2, [r3, #0]
 800e72e:	605a      	str	r2, [r3, #4]
 800e730:	609a      	str	r2, [r3, #8]
 800e732:	60da      	str	r2, [r3, #12]
 800e734:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800e736:	4b53      	ldr	r3, [pc, #332]	; (800e884 <MX_GPIO_Init+0x164>)
 800e738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e73a:	4a52      	ldr	r2, [pc, #328]	; (800e884 <MX_GPIO_Init+0x164>)
 800e73c:	f043 0302 	orr.w	r3, r3, #2
 800e740:	6313      	str	r3, [r2, #48]	; 0x30
 800e742:	4b50      	ldr	r3, [pc, #320]	; (800e884 <MX_GPIO_Init+0x164>)
 800e744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e746:	f003 0302 	and.w	r3, r3, #2
 800e74a:	623b      	str	r3, [r7, #32]
 800e74c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800e74e:	4b4d      	ldr	r3, [pc, #308]	; (800e884 <MX_GPIO_Init+0x164>)
 800e750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e752:	4a4c      	ldr	r2, [pc, #304]	; (800e884 <MX_GPIO_Init+0x164>)
 800e754:	f043 0308 	orr.w	r3, r3, #8
 800e758:	6313      	str	r3, [r2, #48]	; 0x30
 800e75a:	4b4a      	ldr	r3, [pc, #296]	; (800e884 <MX_GPIO_Init+0x164>)
 800e75c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e75e:	f003 0308 	and.w	r3, r3, #8
 800e762:	61fb      	str	r3, [r7, #28]
 800e764:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800e766:	4b47      	ldr	r3, [pc, #284]	; (800e884 <MX_GPIO_Init+0x164>)
 800e768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e76a:	4a46      	ldr	r2, [pc, #280]	; (800e884 <MX_GPIO_Init+0x164>)
 800e76c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e770:	6313      	str	r3, [r2, #48]	; 0x30
 800e772:	4b44      	ldr	r3, [pc, #272]	; (800e884 <MX_GPIO_Init+0x164>)
 800e774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e77a:	61bb      	str	r3, [r7, #24]
 800e77c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800e77e:	4b41      	ldr	r3, [pc, #260]	; (800e884 <MX_GPIO_Init+0x164>)
 800e780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e782:	4a40      	ldr	r2, [pc, #256]	; (800e884 <MX_GPIO_Init+0x164>)
 800e784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e788:	6313      	str	r3, [r2, #48]	; 0x30
 800e78a:	4b3e      	ldr	r3, [pc, #248]	; (800e884 <MX_GPIO_Init+0x164>)
 800e78c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e78e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e792:	617b      	str	r3, [r7, #20]
 800e794:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800e796:	4b3b      	ldr	r3, [pc, #236]	; (800e884 <MX_GPIO_Init+0x164>)
 800e798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e79a:	4a3a      	ldr	r2, [pc, #232]	; (800e884 <MX_GPIO_Init+0x164>)
 800e79c:	f043 0320 	orr.w	r3, r3, #32
 800e7a0:	6313      	str	r3, [r2, #48]	; 0x30
 800e7a2:	4b38      	ldr	r3, [pc, #224]	; (800e884 <MX_GPIO_Init+0x164>)
 800e7a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7a6:	f003 0320 	and.w	r3, r3, #32
 800e7aa:	613b      	str	r3, [r7, #16]
 800e7ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800e7ae:	4b35      	ldr	r3, [pc, #212]	; (800e884 <MX_GPIO_Init+0x164>)
 800e7b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7b2:	4a34      	ldr	r2, [pc, #208]	; (800e884 <MX_GPIO_Init+0x164>)
 800e7b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e7b8:	6313      	str	r3, [r2, #48]	; 0x30
 800e7ba:	4b32      	ldr	r3, [pc, #200]	; (800e884 <MX_GPIO_Init+0x164>)
 800e7bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e7c2:	60fb      	str	r3, [r7, #12]
 800e7c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800e7c6:	4b2f      	ldr	r3, [pc, #188]	; (800e884 <MX_GPIO_Init+0x164>)
 800e7c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7ca:	4a2e      	ldr	r2, [pc, #184]	; (800e884 <MX_GPIO_Init+0x164>)
 800e7cc:	f043 0301 	orr.w	r3, r3, #1
 800e7d0:	6313      	str	r3, [r2, #48]	; 0x30
 800e7d2:	4b2c      	ldr	r3, [pc, #176]	; (800e884 <MX_GPIO_Init+0x164>)
 800e7d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7d6:	f003 0301 	and.w	r3, r3, #1
 800e7da:	60bb      	str	r3, [r7, #8]
 800e7dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800e7de:	4b29      	ldr	r3, [pc, #164]	; (800e884 <MX_GPIO_Init+0x164>)
 800e7e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7e2:	4a28      	ldr	r2, [pc, #160]	; (800e884 <MX_GPIO_Init+0x164>)
 800e7e4:	f043 0310 	orr.w	r3, r3, #16
 800e7e8:	6313      	str	r3, [r2, #48]	; 0x30
 800e7ea:	4b26      	ldr	r3, [pc, #152]	; (800e884 <MX_GPIO_Init+0x164>)
 800e7ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7ee:	f003 0310 	and.w	r3, r3, #16
 800e7f2:	607b      	str	r3, [r7, #4]
 800e7f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800e7f6:	4b23      	ldr	r3, [pc, #140]	; (800e884 <MX_GPIO_Init+0x164>)
 800e7f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7fa:	4a22      	ldr	r2, [pc, #136]	; (800e884 <MX_GPIO_Init+0x164>)
 800e7fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e800:	6313      	str	r3, [r2, #48]	; 0x30
 800e802:	4b20      	ldr	r3, [pc, #128]	; (800e884 <MX_GPIO_Init+0x164>)
 800e804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e806:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e80a:	603b      	str	r3, [r7, #0]
 800e80c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PI13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800e80e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e812:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800e814:	4b1c      	ldr	r3, [pc, #112]	; (800e888 <MX_GPIO_Init+0x168>)
 800e816:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e818:	2300      	movs	r3, #0
 800e81a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800e81c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e820:	4619      	mov	r1, r3
 800e822:	481a      	ldr	r0, [pc, #104]	; (800e88c <MX_GPIO_Init+0x16c>)
 800e824:	f7f6 fb7e 	bl	8004f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800e828:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e82c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e82e:	2300      	movs	r3, #0
 800e830:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e832:	2300      	movs	r3, #0
 800e834:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800e836:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e83a:	4619      	mov	r1, r3
 800e83c:	4813      	ldr	r0, [pc, #76]	; (800e88c <MX_GPIO_Init+0x16c>)
 800e83e:	f7f6 fb71 	bl	8004f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800e842:	2301      	movs	r3, #1
 800e844:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800e846:	4b10      	ldr	r3, [pc, #64]	; (800e888 <MX_GPIO_Init+0x168>)
 800e848:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e84a:	2300      	movs	r3, #0
 800e84c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e84e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e852:	4619      	mov	r1, r3
 800e854:	480e      	ldr	r0, [pc, #56]	; (800e890 <MX_GPIO_Init+0x170>)
 800e856:	f7f6 fb65 	bl	8004f24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800e85a:	2200      	movs	r2, #0
 800e85c:	2100      	movs	r1, #0
 800e85e:	2006      	movs	r0, #6
 800e860:	f7f4 fe55 	bl	800350e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800e864:	2006      	movs	r0, #6
 800e866:	f7f4 fe6e 	bl	8003546 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800e86a:	2200      	movs	r2, #0
 800e86c:	2100      	movs	r1, #0
 800e86e:	2028      	movs	r0, #40	; 0x28
 800e870:	f7f4 fe4d 	bl	800350e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800e874:	2028      	movs	r0, #40	; 0x28
 800e876:	f7f4 fe66 	bl	8003546 <HAL_NVIC_EnableIRQ>

}
 800e87a:	bf00      	nop
 800e87c:	3738      	adds	r7, #56	; 0x38
 800e87e:	46bd      	mov	sp, r7
 800e880:	bd80      	pop	{r7, pc}
 800e882:	bf00      	nop
 800e884:	40023800 	.word	0x40023800
 800e888:	10110000 	.word	0x10110000
 800e88c:	40022000 	.word	0x40022000
 800e890:	40020000 	.word	0x40020000

0800e894 <LCD_Config>:

/* USER CODE BEGIN 4 */
static void LCD_Config(void)
{
 800e894:	b580      	push	{r7, lr}
 800e896:	b082      	sub	sp, #8
 800e898:	af00      	add	r7, sp, #0
  uint32_t  lcd_status;

  /* Initialize the LCD */
  lcd_status = BSP_LCD_Init();
 800e89a:	f7f2 fc06 	bl	80010aa <BSP_LCD_Init>
 800e89e:	4603      	mov	r3, r0
 800e8a0:	607b      	str	r3, [r7, #4]
  while(lcd_status != LCD_OK);//si LCD_init no fuera ok estaría en ciclo infinito
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d1fc      	bne.n	800e8a2 <LCD_Config+0xe>

  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 800e8a8:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800e8ac:	2000      	movs	r0, #0
 800e8ae:	f7f2 fd99 	bl	80013e4 <BSP_LCD_LayerDefaultInit>

  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800e8b2:	f04f 30ff 	mov.w	r0, #4294967295
 800e8b6:	f7f2 fe57 	bl	8001568 <BSP_LCD_Clear>

  printMainMenu();
 800e8ba:	f7fe fef3 	bl	800d6a4 <printMainMenu>
}
 800e8be:	bf00      	nop
 800e8c0:	3708      	adds	r7, #8
 800e8c2:	46bd      	mov	sp, r7
 800e8c4:	bd80      	pop	{r7, pc}
	...

0800e8c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	BSP_LCD_DisplayStringAt(10, LINE(15), (uint8_t*) auxStr, CENTER_MODE);
 800e8cc:	f7f2 fe36 	bl	800153c <BSP_LCD_GetFont>
 800e8d0:	4603      	mov	r3, r0
 800e8d2:	88db      	ldrh	r3, [r3, #6]
 800e8d4:	461a      	mov	r2, r3
 800e8d6:	0112      	lsls	r2, r2, #4
 800e8d8:	1ad3      	subs	r3, r2, r3
 800e8da:	b299      	uxth	r1, r3
 800e8dc:	2301      	movs	r3, #1
 800e8de:	4a03      	ldr	r2, [pc, #12]	; (800e8ec <Error_Handler+0x24>)
 800e8e0:	200a      	movs	r0, #10
 800e8e2:	f7f2 fead 	bl	8001640 <BSP_LCD_DisplayStringAt>

  /* USER CODE END Error_Handler_Debug */
}
 800e8e6:	bf00      	nop
 800e8e8:	bd80      	pop	{r7, pc}
 800e8ea:	bf00      	nop
 800e8ec:	2000094c 	.word	0x2000094c

0800e8f0 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	b082      	sub	sp, #8
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	4603      	mov	r3, r0
 800e8f8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800e8fa:	4b0b      	ldr	r3, [pc, #44]	; (800e928 <SD_CheckStatus+0x38>)
 800e8fc:	2201      	movs	r2, #1
 800e8fe:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800e900:	f7fd fd46 	bl	800c390 <BSP_SD_GetCardState>
 800e904:	4603      	mov	r3, r0
 800e906:	2b00      	cmp	r3, #0
 800e908:	d107      	bne.n	800e91a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800e90a:	4b07      	ldr	r3, [pc, #28]	; (800e928 <SD_CheckStatus+0x38>)
 800e90c:	781b      	ldrb	r3, [r3, #0]
 800e90e:	b2db      	uxtb	r3, r3
 800e910:	f023 0301 	bic.w	r3, r3, #1
 800e914:	b2da      	uxtb	r2, r3
 800e916:	4b04      	ldr	r3, [pc, #16]	; (800e928 <SD_CheckStatus+0x38>)
 800e918:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800e91a:	4b03      	ldr	r3, [pc, #12]	; (800e928 <SD_CheckStatus+0x38>)
 800e91c:	781b      	ldrb	r3, [r3, #0]
 800e91e:	b2db      	uxtb	r3, r3
}
 800e920:	4618      	mov	r0, r3
 800e922:	3708      	adds	r7, #8
 800e924:	46bd      	mov	sp, r7
 800e926:	bd80      	pop	{r7, pc}
 800e928:	20000044 	.word	0x20000044

0800e92c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b082      	sub	sp, #8
 800e930:	af00      	add	r7, sp, #0
 800e932:	4603      	mov	r3, r0
 800e934:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 800e936:	4b0b      	ldr	r3, [pc, #44]	; (800e964 <SD_initialize+0x38>)
 800e938:	2201      	movs	r2, #1
 800e93a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800e93c:	f7fd fcc6 	bl	800c2cc <BSP_SD_Init>
 800e940:	4603      	mov	r3, r0
 800e942:	2b00      	cmp	r3, #0
 800e944:	d107      	bne.n	800e956 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800e946:	79fb      	ldrb	r3, [r7, #7]
 800e948:	4618      	mov	r0, r3
 800e94a:	f7ff ffd1 	bl	800e8f0 <SD_CheckStatus>
 800e94e:	4603      	mov	r3, r0
 800e950:	461a      	mov	r2, r3
 800e952:	4b04      	ldr	r3, [pc, #16]	; (800e964 <SD_initialize+0x38>)
 800e954:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 800e956:	4b03      	ldr	r3, [pc, #12]	; (800e964 <SD_initialize+0x38>)
 800e958:	781b      	ldrb	r3, [r3, #0]
 800e95a:	b2db      	uxtb	r3, r3
}
 800e95c:	4618      	mov	r0, r3
 800e95e:	3708      	adds	r7, #8
 800e960:	46bd      	mov	sp, r7
 800e962:	bd80      	pop	{r7, pc}
 800e964:	20000044 	.word	0x20000044

0800e968 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800e968:	b580      	push	{r7, lr}
 800e96a:	b082      	sub	sp, #8
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	4603      	mov	r3, r0
 800e970:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800e972:	79fb      	ldrb	r3, [r7, #7]
 800e974:	4618      	mov	r0, r3
 800e976:	f7ff ffbb 	bl	800e8f0 <SD_CheckStatus>
 800e97a:	4603      	mov	r3, r0
}
 800e97c:	4618      	mov	r0, r3
 800e97e:	3708      	adds	r7, #8
 800e980:	46bd      	mov	sp, r7
 800e982:	bd80      	pop	{r7, pc}

0800e984 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800e984:	b580      	push	{r7, lr}
 800e986:	b086      	sub	sp, #24
 800e988:	af00      	add	r7, sp, #0
 800e98a:	60b9      	str	r1, [r7, #8]
 800e98c:	607a      	str	r2, [r7, #4]
 800e98e:	603b      	str	r3, [r7, #0]
 800e990:	4603      	mov	r3, r0
 800e992:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e994:	2301      	movs	r3, #1
 800e996:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800e998:	f04f 33ff 	mov.w	r3, #4294967295
 800e99c:	683a      	ldr	r2, [r7, #0]
 800e99e:	6879      	ldr	r1, [r7, #4]
 800e9a0:	68b8      	ldr	r0, [r7, #8]
 800e9a2:	f7fd fcb9 	bl	800c318 <BSP_SD_ReadBlocks>
 800e9a6:	4603      	mov	r3, r0
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d107      	bne.n	800e9bc <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800e9ac:	bf00      	nop
 800e9ae:	f7fd fcef 	bl	800c390 <BSP_SD_GetCardState>
 800e9b2:	4603      	mov	r3, r0
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d1fa      	bne.n	800e9ae <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800e9bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9be:	4618      	mov	r0, r3
 800e9c0:	3718      	adds	r7, #24
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	bd80      	pop	{r7, pc}

0800e9c6 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800e9c6:	b580      	push	{r7, lr}
 800e9c8:	b086      	sub	sp, #24
 800e9ca:	af00      	add	r7, sp, #0
 800e9cc:	60b9      	str	r1, [r7, #8]
 800e9ce:	607a      	str	r2, [r7, #4]
 800e9d0:	603b      	str	r3, [r7, #0]
 800e9d2:	4603      	mov	r3, r0
 800e9d4:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e9d6:	2301      	movs	r3, #1
 800e9d8:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800e9da:	f04f 33ff 	mov.w	r3, #4294967295
 800e9de:	683a      	ldr	r2, [r7, #0]
 800e9e0:	6879      	ldr	r1, [r7, #4]
 800e9e2:	68b8      	ldr	r0, [r7, #8]
 800e9e4:	f7fd fcb6 	bl	800c354 <BSP_SD_WriteBlocks>
 800e9e8:	4603      	mov	r3, r0
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d107      	bne.n	800e9fe <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800e9ee:	bf00      	nop
 800e9f0:	f7fd fcce 	bl	800c390 <BSP_SD_GetCardState>
 800e9f4:	4603      	mov	r3, r0
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d1fa      	bne.n	800e9f0 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800e9fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea00:	4618      	mov	r0, r3
 800ea02:	3718      	adds	r7, #24
 800ea04:	46bd      	mov	sp, r7
 800ea06:	bd80      	pop	{r7, pc}

0800ea08 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	b08c      	sub	sp, #48	; 0x30
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	4603      	mov	r3, r0
 800ea10:	603a      	str	r2, [r7, #0]
 800ea12:	71fb      	strb	r3, [r7, #7]
 800ea14:	460b      	mov	r3, r1
 800ea16:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ea18:	2301      	movs	r3, #1
 800ea1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ea1e:	4b25      	ldr	r3, [pc, #148]	; (800eab4 <SD_ioctl+0xac>)
 800ea20:	781b      	ldrb	r3, [r3, #0]
 800ea22:	b2db      	uxtb	r3, r3
 800ea24:	f003 0301 	and.w	r3, r3, #1
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d001      	beq.n	800ea30 <SD_ioctl+0x28>
 800ea2c:	2303      	movs	r3, #3
 800ea2e:	e03c      	b.n	800eaaa <SD_ioctl+0xa2>

  switch (cmd)
 800ea30:	79bb      	ldrb	r3, [r7, #6]
 800ea32:	2b03      	cmp	r3, #3
 800ea34:	d834      	bhi.n	800eaa0 <SD_ioctl+0x98>
 800ea36:	a201      	add	r2, pc, #4	; (adr r2, 800ea3c <SD_ioctl+0x34>)
 800ea38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea3c:	0800ea4d 	.word	0x0800ea4d
 800ea40:	0800ea55 	.word	0x0800ea55
 800ea44:	0800ea6d 	.word	0x0800ea6d
 800ea48:	0800ea87 	.word	0x0800ea87
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ea52:	e028      	b.n	800eaa6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800ea54:	f107 030c 	add.w	r3, r7, #12
 800ea58:	4618      	mov	r0, r3
 800ea5a:	f7fd fca9 	bl	800c3b0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ea5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea60:	683b      	ldr	r3, [r7, #0]
 800ea62:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ea64:	2300      	movs	r3, #0
 800ea66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ea6a:	e01c      	b.n	800eaa6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ea6c:	f107 030c 	add.w	r3, r7, #12
 800ea70:	4618      	mov	r0, r3
 800ea72:	f7fd fc9d 	bl	800c3b0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ea76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea78:	b29a      	uxth	r2, r3
 800ea7a:	683b      	ldr	r3, [r7, #0]
 800ea7c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800ea7e:	2300      	movs	r3, #0
 800ea80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ea84:	e00f      	b.n	800eaa6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ea86:	f107 030c 	add.w	r3, r7, #12
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	f7fd fc90 	bl	800c3b0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ea90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea92:	0a5a      	lsrs	r2, r3, #9
 800ea94:	683b      	ldr	r3, [r7, #0]
 800ea96:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ea98:	2300      	movs	r3, #0
 800ea9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ea9e:	e002      	b.n	800eaa6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800eaa0:	2304      	movs	r3, #4
 800eaa2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800eaa6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800eaaa:	4618      	mov	r0, r3
 800eaac:	3730      	adds	r7, #48	; 0x30
 800eaae:	46bd      	mov	sp, r7
 800eab0:	bd80      	pop	{r7, pc}
 800eab2:	bf00      	nop
 800eab4:	20000044 	.word	0x20000044

0800eab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800eab8:	b480      	push	{r7}
 800eaba:	b083      	sub	sp, #12
 800eabc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800eabe:	4b0f      	ldr	r3, [pc, #60]	; (800eafc <HAL_MspInit+0x44>)
 800eac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eac2:	4a0e      	ldr	r2, [pc, #56]	; (800eafc <HAL_MspInit+0x44>)
 800eac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800eac8:	6413      	str	r3, [r2, #64]	; 0x40
 800eaca:	4b0c      	ldr	r3, [pc, #48]	; (800eafc <HAL_MspInit+0x44>)
 800eacc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ead2:	607b      	str	r3, [r7, #4]
 800ead4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ead6:	4b09      	ldr	r3, [pc, #36]	; (800eafc <HAL_MspInit+0x44>)
 800ead8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eada:	4a08      	ldr	r2, [pc, #32]	; (800eafc <HAL_MspInit+0x44>)
 800eadc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800eae0:	6453      	str	r3, [r2, #68]	; 0x44
 800eae2:	4b06      	ldr	r3, [pc, #24]	; (800eafc <HAL_MspInit+0x44>)
 800eae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800eaea:	603b      	str	r3, [r7, #0]
 800eaec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800eaee:	bf00      	nop
 800eaf0:	370c      	adds	r7, #12
 800eaf2:	46bd      	mov	sp, r7
 800eaf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf8:	4770      	bx	lr
 800eafa:	bf00      	nop
 800eafc:	40023800 	.word	0x40023800

0800eb00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800eb00:	b580      	push	{r7, lr}
 800eb02:	b084      	sub	sp, #16
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	4a0d      	ldr	r2, [pc, #52]	; (800eb44 <HAL_ADC_MspInit+0x44>)
 800eb0e:	4293      	cmp	r3, r2
 800eb10:	d113      	bne.n	800eb3a <HAL_ADC_MspInit+0x3a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800eb12:	4b0d      	ldr	r3, [pc, #52]	; (800eb48 <HAL_ADC_MspInit+0x48>)
 800eb14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb16:	4a0c      	ldr	r2, [pc, #48]	; (800eb48 <HAL_ADC_MspInit+0x48>)
 800eb18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800eb1c:	6453      	str	r3, [r2, #68]	; 0x44
 800eb1e:	4b0a      	ldr	r3, [pc, #40]	; (800eb48 <HAL_ADC_MspInit+0x48>)
 800eb20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eb26:	60fb      	str	r3, [r7, #12]
 800eb28:	68fb      	ldr	r3, [r7, #12]
    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	2100      	movs	r1, #0
 800eb2e:	2012      	movs	r0, #18
 800eb30:	f7f4 fced 	bl	800350e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800eb34:	2012      	movs	r0, #18
 800eb36:	f7f4 fd06 	bl	8003546 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800eb3a:	bf00      	nop
 800eb3c:	3710      	adds	r7, #16
 800eb3e:	46bd      	mov	sp, r7
 800eb40:	bd80      	pop	{r7, pc}
 800eb42:	bf00      	nop
 800eb44:	40012000 	.word	0x40012000
 800eb48:	40023800 	.word	0x40023800

0800eb4c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800eb4c:	b480      	push	{r7}
 800eb4e:	b085      	sub	sp, #20
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	4a0a      	ldr	r2, [pc, #40]	; (800eb84 <HAL_DMA2D_MspInit+0x38>)
 800eb5a:	4293      	cmp	r3, r2
 800eb5c:	d10b      	bne.n	800eb76 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800eb5e:	4b0a      	ldr	r3, [pc, #40]	; (800eb88 <HAL_DMA2D_MspInit+0x3c>)
 800eb60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb62:	4a09      	ldr	r2, [pc, #36]	; (800eb88 <HAL_DMA2D_MspInit+0x3c>)
 800eb64:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800eb68:	6313      	str	r3, [r2, #48]	; 0x30
 800eb6a:	4b07      	ldr	r3, [pc, #28]	; (800eb88 <HAL_DMA2D_MspInit+0x3c>)
 800eb6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eb72:	60fb      	str	r3, [r7, #12]
 800eb74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800eb76:	bf00      	nop
 800eb78:	3714      	adds	r7, #20
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb80:	4770      	bx	lr
 800eb82:	bf00      	nop
 800eb84:	4002b000 	.word	0x4002b000
 800eb88:	40023800 	.word	0x40023800

0800eb8c <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	b08a      	sub	sp, #40	; 0x28
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800eb94:	f107 0314 	add.w	r3, r7, #20
 800eb98:	2200      	movs	r2, #0
 800eb9a:	601a      	str	r2, [r3, #0]
 800eb9c:	605a      	str	r2, [r3, #4]
 800eb9e:	609a      	str	r2, [r3, #8]
 800eba0:	60da      	str	r2, [r3, #12]
 800eba2:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	4a17      	ldr	r2, [pc, #92]	; (800ec08 <HAL_DSI_MspInit+0x7c>)
 800ebaa:	4293      	cmp	r3, r2
 800ebac:	d127      	bne.n	800ebfe <HAL_DSI_MspInit+0x72>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 800ebae:	4b17      	ldr	r3, [pc, #92]	; (800ec0c <HAL_DSI_MspInit+0x80>)
 800ebb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ebb2:	4a16      	ldr	r2, [pc, #88]	; (800ec0c <HAL_DSI_MspInit+0x80>)
 800ebb4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ebb8:	6453      	str	r3, [r2, #68]	; 0x44
 800ebba:	4b14      	ldr	r3, [pc, #80]	; (800ec0c <HAL_DSI_MspInit+0x80>)
 800ebbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ebbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ebc2:	613b      	str	r3, [r7, #16]
 800ebc4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800ebc6:	4b11      	ldr	r3, [pc, #68]	; (800ec0c <HAL_DSI_MspInit+0x80>)
 800ebc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebca:	4a10      	ldr	r2, [pc, #64]	; (800ec0c <HAL_DSI_MspInit+0x80>)
 800ebcc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ebd0:	6313      	str	r3, [r2, #48]	; 0x30
 800ebd2:	4b0e      	ldr	r3, [pc, #56]	; (800ec0c <HAL_DSI_MspInit+0x80>)
 800ebd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ebda:	60fb      	str	r3, [r7, #12]
 800ebdc:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration    
    PJ2     ------> DSIHOST_TE 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800ebde:	2304      	movs	r3, #4
 800ebe0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ebe2:	2302      	movs	r3, #2
 800ebe4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ebea:	2300      	movs	r3, #0
 800ebec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 800ebee:	230d      	movs	r3, #13
 800ebf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800ebf2:	f107 0314 	add.w	r3, r7, #20
 800ebf6:	4619      	mov	r1, r3
 800ebf8:	4805      	ldr	r0, [pc, #20]	; (800ec10 <HAL_DSI_MspInit+0x84>)
 800ebfa:	f7f6 f993 	bl	8004f24 <HAL_GPIO_Init>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 800ebfe:	bf00      	nop
 800ec00:	3728      	adds	r7, #40	; 0x28
 800ec02:	46bd      	mov	sp, r7
 800ec04:	bd80      	pop	{r7, pc}
 800ec06:	bf00      	nop
 800ec08:	40016c00 	.word	0x40016c00
 800ec0c:	40023800 	.word	0x40023800
 800ec10:	40022400 	.word	0x40022400

0800ec14 <HAL_DSI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspDeInit(DSI_HandleTypeDef* hdsi)
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b082      	sub	sp, #8
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]
  if(hdsi->Instance==DSI)
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	4a08      	ldr	r2, [pc, #32]	; (800ec44 <HAL_DSI_MspDeInit+0x30>)
 800ec22:	4293      	cmp	r3, r2
 800ec24:	d109      	bne.n	800ec3a <HAL_DSI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN DSI_MspDeInit 0 */

  /* USER CODE END DSI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DSI_CLK_DISABLE();
 800ec26:	4b08      	ldr	r3, [pc, #32]	; (800ec48 <HAL_DSI_MspDeInit+0x34>)
 800ec28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec2a:	4a07      	ldr	r2, [pc, #28]	; (800ec48 <HAL_DSI_MspDeInit+0x34>)
 800ec2c:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800ec30:	6453      	str	r3, [r2, #68]	; 0x44
  
    /**DSIHOST GPIO Configuration    
    PJ2     ------> DSIHOST_TE 
    */
    HAL_GPIO_DeInit(GPIOJ, GPIO_PIN_2);
 800ec32:	2104      	movs	r1, #4
 800ec34:	4805      	ldr	r0, [pc, #20]	; (800ec4c <HAL_DSI_MspDeInit+0x38>)
 800ec36:	f7f6 fb1f 	bl	8005278 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN DSI_MspDeInit 1 */

  /* USER CODE END DSI_MspDeInit 1 */
  }

}
 800ec3a:	bf00      	nop
 800ec3c:	3708      	adds	r7, #8
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	bd80      	pop	{r7, pc}
 800ec42:	bf00      	nop
 800ec44:	40016c00 	.word	0x40016c00
 800ec48:	40023800 	.word	0x40023800
 800ec4c:	40022400 	.word	0x40022400

0800ec50 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800ec50:	b480      	push	{r7}
 800ec52:	b085      	sub	sp, #20
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	4a0a      	ldr	r2, [pc, #40]	; (800ec88 <HAL_LTDC_MspInit+0x38>)
 800ec5e:	4293      	cmp	r3, r2
 800ec60:	d10b      	bne.n	800ec7a <HAL_LTDC_MspInit+0x2a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800ec62:	4b0a      	ldr	r3, [pc, #40]	; (800ec8c <HAL_LTDC_MspInit+0x3c>)
 800ec64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec66:	4a09      	ldr	r2, [pc, #36]	; (800ec8c <HAL_LTDC_MspInit+0x3c>)
 800ec68:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ec6c:	6453      	str	r3, [r2, #68]	; 0x44
 800ec6e:	4b07      	ldr	r3, [pc, #28]	; (800ec8c <HAL_LTDC_MspInit+0x3c>)
 800ec70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec72:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ec76:	60fb      	str	r3, [r7, #12]
 800ec78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800ec7a:	bf00      	nop
 800ec7c:	3714      	adds	r7, #20
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec84:	4770      	bx	lr
 800ec86:	bf00      	nop
 800ec88:	40016800 	.word	0x40016800
 800ec8c:	40023800 	.word	0x40023800

0800ec90 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b08c      	sub	sp, #48	; 0x30
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ec98:	f107 031c 	add.w	r3, r7, #28
 800ec9c:	2200      	movs	r2, #0
 800ec9e:	601a      	str	r2, [r3, #0]
 800eca0:	605a      	str	r2, [r3, #4]
 800eca2:	609a      	str	r2, [r3, #8]
 800eca4:	60da      	str	r2, [r3, #12]
 800eca6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC2)
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	4a33      	ldr	r2, [pc, #204]	; (800ed7c <HAL_SD_MspInit+0xec>)
 800ecae:	4293      	cmp	r3, r2
 800ecb0:	d160      	bne.n	800ed74 <HAL_SD_MspInit+0xe4>
  {
  /* USER CODE BEGIN SDMMC2_MspInit 0 */

  /* USER CODE END SDMMC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 800ecb2:	4b33      	ldr	r3, [pc, #204]	; (800ed80 <HAL_SD_MspInit+0xf0>)
 800ecb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ecb6:	4a32      	ldr	r2, [pc, #200]	; (800ed80 <HAL_SD_MspInit+0xf0>)
 800ecb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ecbc:	6453      	str	r3, [r2, #68]	; 0x44
 800ecbe:	4b30      	ldr	r3, [pc, #192]	; (800ed80 <HAL_SD_MspInit+0xf0>)
 800ecc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ecc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ecc6:	61bb      	str	r3, [r7, #24]
 800ecc8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ecca:	4b2d      	ldr	r3, [pc, #180]	; (800ed80 <HAL_SD_MspInit+0xf0>)
 800eccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecce:	4a2c      	ldr	r2, [pc, #176]	; (800ed80 <HAL_SD_MspInit+0xf0>)
 800ecd0:	f043 0302 	orr.w	r3, r3, #2
 800ecd4:	6313      	str	r3, [r2, #48]	; 0x30
 800ecd6:	4b2a      	ldr	r3, [pc, #168]	; (800ed80 <HAL_SD_MspInit+0xf0>)
 800ecd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecda:	f003 0302 	and.w	r3, r3, #2
 800ecde:	617b      	str	r3, [r7, #20]
 800ece0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800ece2:	4b27      	ldr	r3, [pc, #156]	; (800ed80 <HAL_SD_MspInit+0xf0>)
 800ece4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ece6:	4a26      	ldr	r2, [pc, #152]	; (800ed80 <HAL_SD_MspInit+0xf0>)
 800ece8:	f043 0308 	orr.w	r3, r3, #8
 800ecec:	6313      	str	r3, [r2, #48]	; 0x30
 800ecee:	4b24      	ldr	r3, [pc, #144]	; (800ed80 <HAL_SD_MspInit+0xf0>)
 800ecf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecf2:	f003 0308 	and.w	r3, r3, #8
 800ecf6:	613b      	str	r3, [r7, #16]
 800ecf8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800ecfa:	4b21      	ldr	r3, [pc, #132]	; (800ed80 <HAL_SD_MspInit+0xf0>)
 800ecfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecfe:	4a20      	ldr	r2, [pc, #128]	; (800ed80 <HAL_SD_MspInit+0xf0>)
 800ed00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed04:	6313      	str	r3, [r2, #48]	; 0x30
 800ed06:	4b1e      	ldr	r3, [pc, #120]	; (800ed80 <HAL_SD_MspInit+0xf0>)
 800ed08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed0e:	60fb      	str	r3, [r7, #12]
 800ed10:	68fb      	ldr	r3, [r7, #12]
    PD7     ------> SDMMC2_CMD
    PD6     ------> SDMMC2_CK
    PG10     ------> SDMMC2_D1
    PG9     ------> SDMMC2_D0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 800ed12:	2318      	movs	r3, #24
 800ed14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ed16:	2302      	movs	r3, #2
 800ed18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ed1e:	2303      	movs	r3, #3
 800ed20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 800ed22:	230a      	movs	r3, #10
 800ed24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ed26:	f107 031c 	add.w	r3, r7, #28
 800ed2a:	4619      	mov	r1, r3
 800ed2c:	4815      	ldr	r0, [pc, #84]	; (800ed84 <HAL_SD_MspInit+0xf4>)
 800ed2e:	f7f6 f8f9 	bl	8004f24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800ed32:	23c0      	movs	r3, #192	; 0xc0
 800ed34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ed36:	2302      	movs	r3, #2
 800ed38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ed3e:	2303      	movs	r3, #3
 800ed40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800ed42:	230b      	movs	r3, #11
 800ed44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ed46:	f107 031c 	add.w	r3, r7, #28
 800ed4a:	4619      	mov	r1, r3
 800ed4c:	480e      	ldr	r0, [pc, #56]	; (800ed88 <HAL_SD_MspInit+0xf8>)
 800ed4e:	f7f6 f8e9 	bl	8004f24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 800ed52:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800ed56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ed58:	2302      	movs	r3, #2
 800ed5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ed60:	2303      	movs	r3, #3
 800ed62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800ed64:	230b      	movs	r3, #11
 800ed66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800ed68:	f107 031c 	add.w	r3, r7, #28
 800ed6c:	4619      	mov	r1, r3
 800ed6e:	4807      	ldr	r0, [pc, #28]	; (800ed8c <HAL_SD_MspInit+0xfc>)
 800ed70:	f7f6 f8d8 	bl	8004f24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 800ed74:	bf00      	nop
 800ed76:	3730      	adds	r7, #48	; 0x30
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	bd80      	pop	{r7, pc}
 800ed7c:	40011c00 	.word	0x40011c00
 800ed80:	40023800 	.word	0x40023800
 800ed84:	40020400 	.word	0x40020400
 800ed88:	40020c00 	.word	0x40020c00
 800ed8c:	40021800 	.word	0x40021800

0800ed90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800ed90:	b580      	push	{r7, lr}
 800ed92:	b084      	sub	sp, #16
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	4a1a      	ldr	r2, [pc, #104]	; (800ee08 <HAL_TIM_Base_MspInit+0x78>)
 800ed9e:	4293      	cmp	r3, r2
 800eda0:	d114      	bne.n	800edcc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800eda2:	4b1a      	ldr	r3, [pc, #104]	; (800ee0c <HAL_TIM_Base_MspInit+0x7c>)
 800eda4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eda6:	4a19      	ldr	r2, [pc, #100]	; (800ee0c <HAL_TIM_Base_MspInit+0x7c>)
 800eda8:	f043 0310 	orr.w	r3, r3, #16
 800edac:	6413      	str	r3, [r2, #64]	; 0x40
 800edae:	4b17      	ldr	r3, [pc, #92]	; (800ee0c <HAL_TIM_Base_MspInit+0x7c>)
 800edb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800edb2:	f003 0310 	and.w	r3, r3, #16
 800edb6:	60fb      	str	r3, [r7, #12]
 800edb8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800edba:	2200      	movs	r2, #0
 800edbc:	2100      	movs	r1, #0
 800edbe:	2036      	movs	r0, #54	; 0x36
 800edc0:	f7f4 fba5 	bl	800350e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800edc4:	2036      	movs	r0, #54	; 0x36
 800edc6:	f7f4 fbbe 	bl	8003546 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800edca:	e018      	b.n	800edfe <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	4a0f      	ldr	r2, [pc, #60]	; (800ee10 <HAL_TIM_Base_MspInit+0x80>)
 800edd2:	4293      	cmp	r3, r2
 800edd4:	d113      	bne.n	800edfe <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800edd6:	4b0d      	ldr	r3, [pc, #52]	; (800ee0c <HAL_TIM_Base_MspInit+0x7c>)
 800edd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800edda:	4a0c      	ldr	r2, [pc, #48]	; (800ee0c <HAL_TIM_Base_MspInit+0x7c>)
 800eddc:	f043 0320 	orr.w	r3, r3, #32
 800ede0:	6413      	str	r3, [r2, #64]	; 0x40
 800ede2:	4b0a      	ldr	r3, [pc, #40]	; (800ee0c <HAL_TIM_Base_MspInit+0x7c>)
 800ede4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ede6:	f003 0320 	and.w	r3, r3, #32
 800edea:	60bb      	str	r3, [r7, #8]
 800edec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800edee:	2200      	movs	r2, #0
 800edf0:	2100      	movs	r1, #0
 800edf2:	2037      	movs	r0, #55	; 0x37
 800edf4:	f7f4 fb8b 	bl	800350e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800edf8:	2037      	movs	r0, #55	; 0x37
 800edfa:	f7f4 fba4 	bl	8003546 <HAL_NVIC_EnableIRQ>
}
 800edfe:	bf00      	nop
 800ee00:	3710      	adds	r7, #16
 800ee02:	46bd      	mov	sp, r7
 800ee04:	bd80      	pop	{r7, pc}
 800ee06:	bf00      	nop
 800ee08:	40001000 	.word	0x40001000
 800ee0c:	40023800 	.word	0x40023800
 800ee10:	40001400 	.word	0x40001400

0800ee14 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800ee14:	b580      	push	{r7, lr}
 800ee16:	b086      	sub	sp, #24
 800ee18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800ee1a:	1d3b      	adds	r3, r7, #4
 800ee1c:	2200      	movs	r2, #0
 800ee1e:	601a      	str	r2, [r3, #0]
 800ee20:	605a      	str	r2, [r3, #4]
 800ee22:	609a      	str	r2, [r3, #8]
 800ee24:	60da      	str	r2, [r3, #12]
 800ee26:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800ee28:	4b43      	ldr	r3, [pc, #268]	; (800ef38 <HAL_FMC_MspInit+0x124>)
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d17e      	bne.n	800ef2e <HAL_FMC_MspInit+0x11a>
    return;
  }
  FMC_Initialized = 1;
 800ee30:	4b41      	ldr	r3, [pc, #260]	; (800ef38 <HAL_FMC_MspInit+0x124>)
 800ee32:	2201      	movs	r2, #1
 800ee34:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800ee36:	4b41      	ldr	r3, [pc, #260]	; (800ef3c <HAL_FMC_MspInit+0x128>)
 800ee38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee3a:	4a40      	ldr	r2, [pc, #256]	; (800ef3c <HAL_FMC_MspInit+0x128>)
 800ee3c:	f043 0301 	orr.w	r3, r3, #1
 800ee40:	6393      	str	r3, [r2, #56]	; 0x38
 800ee42:	4b3e      	ldr	r3, [pc, #248]	; (800ef3c <HAL_FMC_MspInit+0x128>)
 800ee44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee46:	f003 0301 	and.w	r3, r3, #1
 800ee4a:	603b      	str	r3, [r7, #0]
 800ee4c:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800ee4e:	2360      	movs	r3, #96	; 0x60
 800ee50:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ee52:	2302      	movs	r3, #2
 800ee54:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee56:	2300      	movs	r3, #0
 800ee58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ee5a:	2303      	movs	r3, #3
 800ee5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800ee5e:	230c      	movs	r3, #12
 800ee60:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ee62:	1d3b      	adds	r3, r7, #4
 800ee64:	4619      	mov	r1, r3
 800ee66:	4836      	ldr	r0, [pc, #216]	; (800ef40 <HAL_FMC_MspInit+0x12c>)
 800ee68:	f7f6 f85c 	bl	8004f24 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_2 
 800ee6c:	f248 1337 	movw	r3, #33079	; 0x8137
 800ee70:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ee72:	2302      	movs	r3, #2
 800ee74:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee76:	2300      	movs	r3, #0
 800ee78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ee7a:	2303      	movs	r3, #3
 800ee7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800ee7e:	230c      	movs	r3, #12
 800ee80:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800ee82:	1d3b      	adds	r3, r7, #4
 800ee84:	4619      	mov	r1, r3
 800ee86:	482f      	ldr	r0, [pc, #188]	; (800ef44 <HAL_FMC_MspInit+0x130>)
 800ee88:	f7f6 f84c 	bl	8004f24 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10 
 800ee8c:	f24c 7303 	movw	r3, #50947	; 0xc703
 800ee90:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ee92:	2302      	movs	r3, #2
 800ee94:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee96:	2300      	movs	r3, #0
 800ee98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ee9a:	2303      	movs	r3, #3
 800ee9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800ee9e:	230c      	movs	r3, #12
 800eea0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800eea2:	1d3b      	adds	r3, r7, #4
 800eea4:	4619      	mov	r1, r3
 800eea6:	4828      	ldr	r0, [pc, #160]	; (800ef48 <HAL_FMC_MspInit+0x134>)
 800eea8:	f7f6 f83c 	bl	8004f24 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_7|GPIO_PIN_10 
 800eeac:	f240 63cf 	movw	r3, #1743	; 0x6cf
 800eeb0:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_6|GPIO_PIN_1|GPIO_PIN_9|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eeb2:	2302      	movs	r3, #2
 800eeb4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eeb6:	2300      	movs	r3, #0
 800eeb8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800eeba:	2303      	movs	r3, #3
 800eebc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800eebe:	230c      	movs	r3, #12
 800eec0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800eec2:	1d3b      	adds	r3, r7, #4
 800eec4:	4619      	mov	r1, r3
 800eec6:	4821      	ldr	r0, [pc, #132]	; (800ef4c <HAL_FMC_MspInit+0x138>)
 800eec8:	f7f6 f82c 	bl	8004f24 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800eecc:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800eed0:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eed2:	2302      	movs	r3, #2
 800eed4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eed6:	2300      	movs	r3, #0
 800eed8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800eeda:	2303      	movs	r3, #3
 800eedc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800eede:	230c      	movs	r3, #12
 800eee0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800eee2:	1d3b      	adds	r3, r7, #4
 800eee4:	4619      	mov	r1, r3
 800eee6:	481a      	ldr	r0, [pc, #104]	; (800ef50 <HAL_FMC_MspInit+0x13c>)
 800eee8:	f7f6 f81c 	bl	8004f24 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_5 
 800eeec:	f64f 7320 	movw	r3, #65312	; 0xff20
 800eef0:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_8 
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eef2:	2302      	movs	r3, #2
 800eef4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eef6:	2300      	movs	r3, #0
 800eef8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800eefa:	2303      	movs	r3, #3
 800eefc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800eefe:	230c      	movs	r3, #12
 800ef00:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800ef02:	1d3b      	adds	r3, r7, #4
 800ef04:	4619      	mov	r1, r3
 800ef06:	4813      	ldr	r0, [pc, #76]	; (800ef54 <HAL_FMC_MspInit+0x140>)
 800ef08:	f7f6 f80c 	bl	8004f24 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14 
 800ef0c:	f64f 7380 	movw	r3, #65408	; 0xff80
 800ef10:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15 
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ef12:	2302      	movs	r3, #2
 800ef14:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ef16:	2300      	movs	r3, #0
 800ef18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ef1a:	2303      	movs	r3, #3
 800ef1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800ef1e:	230c      	movs	r3, #12
 800ef20:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800ef22:	1d3b      	adds	r3, r7, #4
 800ef24:	4619      	mov	r1, r3
 800ef26:	480c      	ldr	r0, [pc, #48]	; (800ef58 <HAL_FMC_MspInit+0x144>)
 800ef28:	f7f5 fffc 	bl	8004f24 <HAL_GPIO_Init>
 800ef2c:	e000      	b.n	800ef30 <HAL_FMC_MspInit+0x11c>
    return;
 800ef2e:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800ef30:	3718      	adds	r7, #24
 800ef32:	46bd      	mov	sp, r7
 800ef34:	bd80      	pop	{r7, pc}
 800ef36:	bf00      	nop
 800ef38:	2000031c 	.word	0x2000031c
 800ef3c:	40023800 	.word	0x40023800
 800ef40:	40020400 	.word	0x40020400
 800ef44:	40021800 	.word	0x40021800
 800ef48:	40020c00 	.word	0x40020c00
 800ef4c:	40022000 	.word	0x40022000
 800ef50:	40021400 	.word	0x40021400
 800ef54:	40021c00 	.word	0x40021c00
 800ef58:	40021000 	.word	0x40021000

0800ef5c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b082      	sub	sp, #8
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800ef64:	f7ff ff56 	bl	800ee14 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800ef68:	bf00      	nop
 800ef6a:	3708      	adds	r7, #8
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	bd80      	pop	{r7, pc}

0800ef70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ef70:	b480      	push	{r7}
 800ef72:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800ef74:	bf00      	nop
 800ef76:	46bd      	mov	sp, r7
 800ef78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef7c:	4770      	bx	lr

0800ef7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ef7e:	b480      	push	{r7}
 800ef80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ef82:	e7fe      	b.n	800ef82 <HardFault_Handler+0x4>

0800ef84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ef84:	b480      	push	{r7}
 800ef86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ef88:	e7fe      	b.n	800ef88 <MemManage_Handler+0x4>

0800ef8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ef8a:	b480      	push	{r7}
 800ef8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ef8e:	e7fe      	b.n	800ef8e <BusFault_Handler+0x4>

0800ef90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ef90:	b480      	push	{r7}
 800ef92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ef94:	e7fe      	b.n	800ef94 <UsageFault_Handler+0x4>

0800ef96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800ef96:	b480      	push	{r7}
 800ef98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800ef9a:	bf00      	nop
 800ef9c:	46bd      	mov	sp, r7
 800ef9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa2:	4770      	bx	lr

0800efa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800efa4:	b480      	push	{r7}
 800efa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800efa8:	bf00      	nop
 800efaa:	46bd      	mov	sp, r7
 800efac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb0:	4770      	bx	lr

0800efb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800efb2:	b480      	push	{r7}
 800efb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800efb6:	bf00      	nop
 800efb8:	46bd      	mov	sp, r7
 800efba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efbe:	4770      	bx	lr

0800efc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800efc0:	b580      	push	{r7, lr}
 800efc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800efc4:	f7f3 fca0 	bl	8002908 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800efc8:	bf00      	nop
 800efca:	bd80      	pop	{r7, pc}

0800efcc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800efcc:	b580      	push	{r7, lr}
 800efce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800efd0:	2001      	movs	r0, #1
 800efd2:	f7f6 fa8d 	bl	80054f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800efd6:	bf00      	nop
 800efd8:	bd80      	pop	{r7, pc}
	...

0800efdc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800efdc:	b580      	push	{r7, lr}
 800efde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800efe0:	4802      	ldr	r0, [pc, #8]	; (800efec <ADC_IRQHandler+0x10>)
 800efe2:	f7f3 fe1f 	bl	8002c24 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800efe6:	bf00      	nop
 800efe8:	bd80      	pop	{r7, pc}
 800efea:	bf00      	nop
 800efec:	20000a98 	.word	0x20000a98

0800eff0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800eff0:	b580      	push	{r7, lr}
 800eff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800eff4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800eff8:	f7f6 fa7a 	bl	80054f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800effc:	bf00      	nop
 800effe:	bd80      	pop	{r7, pc}

0800f000 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800f000:	b580      	push	{r7, lr}
 800f002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800f004:	4802      	ldr	r0, [pc, #8]	; (800f010 <TIM6_DAC_IRQHandler+0x10>)
 800f006:	f7f9 fd85 	bl	8008b14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800f00a:	bf00      	nop
 800f00c:	bd80      	pop	{r7, pc}
 800f00e:	bf00      	nop
 800f010:	20000b00 	.word	0x20000b00

0800f014 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800f014:	b580      	push	{r7, lr}
 800f016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800f018:	4802      	ldr	r0, [pc, #8]	; (800f024 <TIM7_IRQHandler+0x10>)
 800f01a:	f7f9 fd7b 	bl	8008b14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800f01e:	bf00      	nop
 800f020:	bd80      	pop	{r7, pc}
 800f022:	bf00      	nop
 800f024:	20000bfc 	.word	0x20000bfc

0800f028 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800f028:	b580      	push	{r7, lr}
 800f02a:	b084      	sub	sp, #16
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800f030:	4b11      	ldr	r3, [pc, #68]	; (800f078 <_sbrk+0x50>)
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d102      	bne.n	800f03e <_sbrk+0x16>
		heap_end = &end;
 800f038:	4b0f      	ldr	r3, [pc, #60]	; (800f078 <_sbrk+0x50>)
 800f03a:	4a10      	ldr	r2, [pc, #64]	; (800f07c <_sbrk+0x54>)
 800f03c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800f03e:	4b0e      	ldr	r3, [pc, #56]	; (800f078 <_sbrk+0x50>)
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800f044:	4b0c      	ldr	r3, [pc, #48]	; (800f078 <_sbrk+0x50>)
 800f046:	681a      	ldr	r2, [r3, #0]
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	4413      	add	r3, r2
 800f04c:	466a      	mov	r2, sp
 800f04e:	4293      	cmp	r3, r2
 800f050:	d907      	bls.n	800f062 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800f052:	f000 f875 	bl	800f140 <__errno>
 800f056:	4602      	mov	r2, r0
 800f058:	230c      	movs	r3, #12
 800f05a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800f05c:	f04f 33ff 	mov.w	r3, #4294967295
 800f060:	e006      	b.n	800f070 <_sbrk+0x48>
	}

	heap_end += incr;
 800f062:	4b05      	ldr	r3, [pc, #20]	; (800f078 <_sbrk+0x50>)
 800f064:	681a      	ldr	r2, [r3, #0]
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	4413      	add	r3, r2
 800f06a:	4a03      	ldr	r2, [pc, #12]	; (800f078 <_sbrk+0x50>)
 800f06c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800f06e:	68fb      	ldr	r3, [r7, #12]
}
 800f070:	4618      	mov	r0, r3
 800f072:	3710      	adds	r7, #16
 800f074:	46bd      	mov	sp, r7
 800f076:	bd80      	pop	{r7, pc}
 800f078:	20000320 	.word	0x20000320
 800f07c:	20000c40 	.word	0x20000c40

0800f080 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800f080:	b480      	push	{r7}
 800f082:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800f084:	4b15      	ldr	r3, [pc, #84]	; (800f0dc <SystemInit+0x5c>)
 800f086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f08a:	4a14      	ldr	r2, [pc, #80]	; (800f0dc <SystemInit+0x5c>)
 800f08c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f090:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800f094:	4b12      	ldr	r3, [pc, #72]	; (800f0e0 <SystemInit+0x60>)
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	4a11      	ldr	r2, [pc, #68]	; (800f0e0 <SystemInit+0x60>)
 800f09a:	f043 0301 	orr.w	r3, r3, #1
 800f09e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800f0a0:	4b0f      	ldr	r3, [pc, #60]	; (800f0e0 <SystemInit+0x60>)
 800f0a2:	2200      	movs	r2, #0
 800f0a4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800f0a6:	4b0e      	ldr	r3, [pc, #56]	; (800f0e0 <SystemInit+0x60>)
 800f0a8:	681a      	ldr	r2, [r3, #0]
 800f0aa:	490d      	ldr	r1, [pc, #52]	; (800f0e0 <SystemInit+0x60>)
 800f0ac:	4b0d      	ldr	r3, [pc, #52]	; (800f0e4 <SystemInit+0x64>)
 800f0ae:	4013      	ands	r3, r2
 800f0b0:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800f0b2:	4b0b      	ldr	r3, [pc, #44]	; (800f0e0 <SystemInit+0x60>)
 800f0b4:	4a0c      	ldr	r2, [pc, #48]	; (800f0e8 <SystemInit+0x68>)
 800f0b6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800f0b8:	4b09      	ldr	r3, [pc, #36]	; (800f0e0 <SystemInit+0x60>)
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	4a08      	ldr	r2, [pc, #32]	; (800f0e0 <SystemInit+0x60>)
 800f0be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f0c2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800f0c4:	4b06      	ldr	r3, [pc, #24]	; (800f0e0 <SystemInit+0x60>)
 800f0c6:	2200      	movs	r2, #0
 800f0c8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800f0ca:	4b04      	ldr	r3, [pc, #16]	; (800f0dc <SystemInit+0x5c>)
 800f0cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800f0d0:	609a      	str	r2, [r3, #8]
#endif
}
 800f0d2:	bf00      	nop
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0da:	4770      	bx	lr
 800f0dc:	e000ed00 	.word	0xe000ed00
 800f0e0:	40023800 	.word	0x40023800
 800f0e4:	fef6ffff 	.word	0xfef6ffff
 800f0e8:	24003010 	.word	0x24003010

0800f0ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800f0ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 800f124 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800f0f0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800f0f2:	e003      	b.n	800f0fc <LoopCopyDataInit>

0800f0f4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800f0f4:	4b0c      	ldr	r3, [pc, #48]	; (800f128 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800f0f6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800f0f8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800f0fa:	3104      	adds	r1, #4

0800f0fc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800f0fc:	480b      	ldr	r0, [pc, #44]	; (800f12c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800f0fe:	4b0c      	ldr	r3, [pc, #48]	; (800f130 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800f100:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800f102:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800f104:	d3f6      	bcc.n	800f0f4 <CopyDataInit>
  ldr  r2, =_sbss
 800f106:	4a0b      	ldr	r2, [pc, #44]	; (800f134 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800f108:	e002      	b.n	800f110 <LoopFillZerobss>

0800f10a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800f10a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800f10c:	f842 3b04 	str.w	r3, [r2], #4

0800f110 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800f110:	4b09      	ldr	r3, [pc, #36]	; (800f138 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800f112:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800f114:	d3f9      	bcc.n	800f10a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800f116:	f7ff ffb3 	bl	800f080 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800f11a:	f000 f817 	bl	800f14c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800f11e:	f7fe fcfb 	bl	800db18 <main>
  bx  lr    
 800f122:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800f124:	2007ffff 	.word	0x2007ffff
  ldr  r3, =_sidata
 800f128:	0812ae88 	.word	0x0812ae88
  ldr  r0, =_sdata
 800f12c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800f130:	200000b0 	.word	0x200000b0
  ldr  r2, =_sbss
 800f134:	200000b0 	.word	0x200000b0
  ldr  r3, = _ebss
 800f138:	20000c40 	.word	0x20000c40

0800f13c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800f13c:	e7fe      	b.n	800f13c <CAN1_RX0_IRQHandler>
	...

0800f140 <__errno>:
 800f140:	4b01      	ldr	r3, [pc, #4]	; (800f148 <__errno+0x8>)
 800f142:	6818      	ldr	r0, [r3, #0]
 800f144:	4770      	bx	lr
 800f146:	bf00      	nop
 800f148:	2000004c 	.word	0x2000004c

0800f14c <__libc_init_array>:
 800f14c:	b570      	push	{r4, r5, r6, lr}
 800f14e:	4e0d      	ldr	r6, [pc, #52]	; (800f184 <__libc_init_array+0x38>)
 800f150:	4c0d      	ldr	r4, [pc, #52]	; (800f188 <__libc_init_array+0x3c>)
 800f152:	1ba4      	subs	r4, r4, r6
 800f154:	10a4      	asrs	r4, r4, #2
 800f156:	2500      	movs	r5, #0
 800f158:	42a5      	cmp	r5, r4
 800f15a:	d109      	bne.n	800f170 <__libc_init_array+0x24>
 800f15c:	4e0b      	ldr	r6, [pc, #44]	; (800f18c <__libc_init_array+0x40>)
 800f15e:	4c0c      	ldr	r4, [pc, #48]	; (800f190 <__libc_init_array+0x44>)
 800f160:	f000 fc8a 	bl	800fa78 <_init>
 800f164:	1ba4      	subs	r4, r4, r6
 800f166:	10a4      	asrs	r4, r4, #2
 800f168:	2500      	movs	r5, #0
 800f16a:	42a5      	cmp	r5, r4
 800f16c:	d105      	bne.n	800f17a <__libc_init_array+0x2e>
 800f16e:	bd70      	pop	{r4, r5, r6, pc}
 800f170:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f174:	4798      	blx	r3
 800f176:	3501      	adds	r5, #1
 800f178:	e7ee      	b.n	800f158 <__libc_init_array+0xc>
 800f17a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f17e:	4798      	blx	r3
 800f180:	3501      	adds	r5, #1
 800f182:	e7f2      	b.n	800f16a <__libc_init_array+0x1e>
 800f184:	0812ae80 	.word	0x0812ae80
 800f188:	0812ae80 	.word	0x0812ae80
 800f18c:	0812ae80 	.word	0x0812ae80
 800f190:	0812ae84 	.word	0x0812ae84

0800f194 <memset>:
 800f194:	4402      	add	r2, r0
 800f196:	4603      	mov	r3, r0
 800f198:	4293      	cmp	r3, r2
 800f19a:	d100      	bne.n	800f19e <memset+0xa>
 800f19c:	4770      	bx	lr
 800f19e:	f803 1b01 	strb.w	r1, [r3], #1
 800f1a2:	e7f9      	b.n	800f198 <memset+0x4>

0800f1a4 <siprintf>:
 800f1a4:	b40e      	push	{r1, r2, r3}
 800f1a6:	b500      	push	{lr}
 800f1a8:	b09c      	sub	sp, #112	; 0x70
 800f1aa:	ab1d      	add	r3, sp, #116	; 0x74
 800f1ac:	9002      	str	r0, [sp, #8]
 800f1ae:	9006      	str	r0, [sp, #24]
 800f1b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f1b4:	4809      	ldr	r0, [pc, #36]	; (800f1dc <siprintf+0x38>)
 800f1b6:	9107      	str	r1, [sp, #28]
 800f1b8:	9104      	str	r1, [sp, #16]
 800f1ba:	4909      	ldr	r1, [pc, #36]	; (800f1e0 <siprintf+0x3c>)
 800f1bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800f1c0:	9105      	str	r1, [sp, #20]
 800f1c2:	6800      	ldr	r0, [r0, #0]
 800f1c4:	9301      	str	r3, [sp, #4]
 800f1c6:	a902      	add	r1, sp, #8
 800f1c8:	f000 f972 	bl	800f4b0 <_svfiprintf_r>
 800f1cc:	9b02      	ldr	r3, [sp, #8]
 800f1ce:	2200      	movs	r2, #0
 800f1d0:	701a      	strb	r2, [r3, #0]
 800f1d2:	b01c      	add	sp, #112	; 0x70
 800f1d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f1d8:	b003      	add	sp, #12
 800f1da:	4770      	bx	lr
 800f1dc:	2000004c 	.word	0x2000004c
 800f1e0:	ffff0208 	.word	0xffff0208

0800f1e4 <strcpy>:
 800f1e4:	4603      	mov	r3, r0
 800f1e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f1ea:	f803 2b01 	strb.w	r2, [r3], #1
 800f1ee:	2a00      	cmp	r2, #0
 800f1f0:	d1f9      	bne.n	800f1e6 <strcpy+0x2>
 800f1f2:	4770      	bx	lr

0800f1f4 <strtok>:
 800f1f4:	4b13      	ldr	r3, [pc, #76]	; (800f244 <strtok+0x50>)
 800f1f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1fa:	681d      	ldr	r5, [r3, #0]
 800f1fc:	6dac      	ldr	r4, [r5, #88]	; 0x58
 800f1fe:	4606      	mov	r6, r0
 800f200:	460f      	mov	r7, r1
 800f202:	b9b4      	cbnz	r4, 800f232 <strtok+0x3e>
 800f204:	2050      	movs	r0, #80	; 0x50
 800f206:	f000 f849 	bl	800f29c <malloc>
 800f20a:	65a8      	str	r0, [r5, #88]	; 0x58
 800f20c:	e9c0 4400 	strd	r4, r4, [r0]
 800f210:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800f214:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800f218:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800f21c:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800f220:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800f224:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800f228:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800f22c:	6184      	str	r4, [r0, #24]
 800f22e:	7704      	strb	r4, [r0, #28]
 800f230:	6244      	str	r4, [r0, #36]	; 0x24
 800f232:	6daa      	ldr	r2, [r5, #88]	; 0x58
 800f234:	4639      	mov	r1, r7
 800f236:	4630      	mov	r0, r6
 800f238:	2301      	movs	r3, #1
 800f23a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f23e:	f000 b803 	b.w	800f248 <__strtok_r>
 800f242:	bf00      	nop
 800f244:	2000004c 	.word	0x2000004c

0800f248 <__strtok_r>:
 800f248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f24a:	b918      	cbnz	r0, 800f254 <__strtok_r+0xc>
 800f24c:	6810      	ldr	r0, [r2, #0]
 800f24e:	b908      	cbnz	r0, 800f254 <__strtok_r+0xc>
 800f250:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f252:	4620      	mov	r0, r4
 800f254:	4604      	mov	r4, r0
 800f256:	460f      	mov	r7, r1
 800f258:	f814 5b01 	ldrb.w	r5, [r4], #1
 800f25c:	f817 6b01 	ldrb.w	r6, [r7], #1
 800f260:	b91e      	cbnz	r6, 800f26a <__strtok_r+0x22>
 800f262:	b96d      	cbnz	r5, 800f280 <__strtok_r+0x38>
 800f264:	6015      	str	r5, [r2, #0]
 800f266:	4628      	mov	r0, r5
 800f268:	e7f2      	b.n	800f250 <__strtok_r+0x8>
 800f26a:	42b5      	cmp	r5, r6
 800f26c:	d1f6      	bne.n	800f25c <__strtok_r+0x14>
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d1ef      	bne.n	800f252 <__strtok_r+0xa>
 800f272:	6014      	str	r4, [r2, #0]
 800f274:	7003      	strb	r3, [r0, #0]
 800f276:	e7eb      	b.n	800f250 <__strtok_r+0x8>
 800f278:	462b      	mov	r3, r5
 800f27a:	e00d      	b.n	800f298 <__strtok_r+0x50>
 800f27c:	b926      	cbnz	r6, 800f288 <__strtok_r+0x40>
 800f27e:	461c      	mov	r4, r3
 800f280:	4623      	mov	r3, r4
 800f282:	460f      	mov	r7, r1
 800f284:	f813 5b01 	ldrb.w	r5, [r3], #1
 800f288:	f817 6b01 	ldrb.w	r6, [r7], #1
 800f28c:	42b5      	cmp	r5, r6
 800f28e:	d1f5      	bne.n	800f27c <__strtok_r+0x34>
 800f290:	2d00      	cmp	r5, #0
 800f292:	d0f1      	beq.n	800f278 <__strtok_r+0x30>
 800f294:	2100      	movs	r1, #0
 800f296:	7021      	strb	r1, [r4, #0]
 800f298:	6013      	str	r3, [r2, #0]
 800f29a:	e7d9      	b.n	800f250 <__strtok_r+0x8>

0800f29c <malloc>:
 800f29c:	4b02      	ldr	r3, [pc, #8]	; (800f2a8 <malloc+0xc>)
 800f29e:	4601      	mov	r1, r0
 800f2a0:	6818      	ldr	r0, [r3, #0]
 800f2a2:	f000 b851 	b.w	800f348 <_malloc_r>
 800f2a6:	bf00      	nop
 800f2a8:	2000004c 	.word	0x2000004c

0800f2ac <_free_r>:
 800f2ac:	b538      	push	{r3, r4, r5, lr}
 800f2ae:	4605      	mov	r5, r0
 800f2b0:	2900      	cmp	r1, #0
 800f2b2:	d045      	beq.n	800f340 <_free_r+0x94>
 800f2b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f2b8:	1f0c      	subs	r4, r1, #4
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	bfb8      	it	lt
 800f2be:	18e4      	addlt	r4, r4, r3
 800f2c0:	f000 fbaa 	bl	800fa18 <__malloc_lock>
 800f2c4:	4a1f      	ldr	r2, [pc, #124]	; (800f344 <_free_r+0x98>)
 800f2c6:	6813      	ldr	r3, [r2, #0]
 800f2c8:	4610      	mov	r0, r2
 800f2ca:	b933      	cbnz	r3, 800f2da <_free_r+0x2e>
 800f2cc:	6063      	str	r3, [r4, #4]
 800f2ce:	6014      	str	r4, [r2, #0]
 800f2d0:	4628      	mov	r0, r5
 800f2d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f2d6:	f000 bba0 	b.w	800fa1a <__malloc_unlock>
 800f2da:	42a3      	cmp	r3, r4
 800f2dc:	d90c      	bls.n	800f2f8 <_free_r+0x4c>
 800f2de:	6821      	ldr	r1, [r4, #0]
 800f2e0:	1862      	adds	r2, r4, r1
 800f2e2:	4293      	cmp	r3, r2
 800f2e4:	bf04      	itt	eq
 800f2e6:	681a      	ldreq	r2, [r3, #0]
 800f2e8:	685b      	ldreq	r3, [r3, #4]
 800f2ea:	6063      	str	r3, [r4, #4]
 800f2ec:	bf04      	itt	eq
 800f2ee:	1852      	addeq	r2, r2, r1
 800f2f0:	6022      	streq	r2, [r4, #0]
 800f2f2:	6004      	str	r4, [r0, #0]
 800f2f4:	e7ec      	b.n	800f2d0 <_free_r+0x24>
 800f2f6:	4613      	mov	r3, r2
 800f2f8:	685a      	ldr	r2, [r3, #4]
 800f2fa:	b10a      	cbz	r2, 800f300 <_free_r+0x54>
 800f2fc:	42a2      	cmp	r2, r4
 800f2fe:	d9fa      	bls.n	800f2f6 <_free_r+0x4a>
 800f300:	6819      	ldr	r1, [r3, #0]
 800f302:	1858      	adds	r0, r3, r1
 800f304:	42a0      	cmp	r0, r4
 800f306:	d10b      	bne.n	800f320 <_free_r+0x74>
 800f308:	6820      	ldr	r0, [r4, #0]
 800f30a:	4401      	add	r1, r0
 800f30c:	1858      	adds	r0, r3, r1
 800f30e:	4282      	cmp	r2, r0
 800f310:	6019      	str	r1, [r3, #0]
 800f312:	d1dd      	bne.n	800f2d0 <_free_r+0x24>
 800f314:	6810      	ldr	r0, [r2, #0]
 800f316:	6852      	ldr	r2, [r2, #4]
 800f318:	605a      	str	r2, [r3, #4]
 800f31a:	4401      	add	r1, r0
 800f31c:	6019      	str	r1, [r3, #0]
 800f31e:	e7d7      	b.n	800f2d0 <_free_r+0x24>
 800f320:	d902      	bls.n	800f328 <_free_r+0x7c>
 800f322:	230c      	movs	r3, #12
 800f324:	602b      	str	r3, [r5, #0]
 800f326:	e7d3      	b.n	800f2d0 <_free_r+0x24>
 800f328:	6820      	ldr	r0, [r4, #0]
 800f32a:	1821      	adds	r1, r4, r0
 800f32c:	428a      	cmp	r2, r1
 800f32e:	bf04      	itt	eq
 800f330:	6811      	ldreq	r1, [r2, #0]
 800f332:	6852      	ldreq	r2, [r2, #4]
 800f334:	6062      	str	r2, [r4, #4]
 800f336:	bf04      	itt	eq
 800f338:	1809      	addeq	r1, r1, r0
 800f33a:	6021      	streq	r1, [r4, #0]
 800f33c:	605c      	str	r4, [r3, #4]
 800f33e:	e7c7      	b.n	800f2d0 <_free_r+0x24>
 800f340:	bd38      	pop	{r3, r4, r5, pc}
 800f342:	bf00      	nop
 800f344:	20000324 	.word	0x20000324

0800f348 <_malloc_r>:
 800f348:	b570      	push	{r4, r5, r6, lr}
 800f34a:	1ccd      	adds	r5, r1, #3
 800f34c:	f025 0503 	bic.w	r5, r5, #3
 800f350:	3508      	adds	r5, #8
 800f352:	2d0c      	cmp	r5, #12
 800f354:	bf38      	it	cc
 800f356:	250c      	movcc	r5, #12
 800f358:	2d00      	cmp	r5, #0
 800f35a:	4606      	mov	r6, r0
 800f35c:	db01      	blt.n	800f362 <_malloc_r+0x1a>
 800f35e:	42a9      	cmp	r1, r5
 800f360:	d903      	bls.n	800f36a <_malloc_r+0x22>
 800f362:	230c      	movs	r3, #12
 800f364:	6033      	str	r3, [r6, #0]
 800f366:	2000      	movs	r0, #0
 800f368:	bd70      	pop	{r4, r5, r6, pc}
 800f36a:	f000 fb55 	bl	800fa18 <__malloc_lock>
 800f36e:	4a21      	ldr	r2, [pc, #132]	; (800f3f4 <_malloc_r+0xac>)
 800f370:	6814      	ldr	r4, [r2, #0]
 800f372:	4621      	mov	r1, r4
 800f374:	b991      	cbnz	r1, 800f39c <_malloc_r+0x54>
 800f376:	4c20      	ldr	r4, [pc, #128]	; (800f3f8 <_malloc_r+0xb0>)
 800f378:	6823      	ldr	r3, [r4, #0]
 800f37a:	b91b      	cbnz	r3, 800f384 <_malloc_r+0x3c>
 800f37c:	4630      	mov	r0, r6
 800f37e:	f000 fb17 	bl	800f9b0 <_sbrk_r>
 800f382:	6020      	str	r0, [r4, #0]
 800f384:	4629      	mov	r1, r5
 800f386:	4630      	mov	r0, r6
 800f388:	f000 fb12 	bl	800f9b0 <_sbrk_r>
 800f38c:	1c43      	adds	r3, r0, #1
 800f38e:	d124      	bne.n	800f3da <_malloc_r+0x92>
 800f390:	230c      	movs	r3, #12
 800f392:	6033      	str	r3, [r6, #0]
 800f394:	4630      	mov	r0, r6
 800f396:	f000 fb40 	bl	800fa1a <__malloc_unlock>
 800f39a:	e7e4      	b.n	800f366 <_malloc_r+0x1e>
 800f39c:	680b      	ldr	r3, [r1, #0]
 800f39e:	1b5b      	subs	r3, r3, r5
 800f3a0:	d418      	bmi.n	800f3d4 <_malloc_r+0x8c>
 800f3a2:	2b0b      	cmp	r3, #11
 800f3a4:	d90f      	bls.n	800f3c6 <_malloc_r+0x7e>
 800f3a6:	600b      	str	r3, [r1, #0]
 800f3a8:	50cd      	str	r5, [r1, r3]
 800f3aa:	18cc      	adds	r4, r1, r3
 800f3ac:	4630      	mov	r0, r6
 800f3ae:	f000 fb34 	bl	800fa1a <__malloc_unlock>
 800f3b2:	f104 000b 	add.w	r0, r4, #11
 800f3b6:	1d23      	adds	r3, r4, #4
 800f3b8:	f020 0007 	bic.w	r0, r0, #7
 800f3bc:	1ac3      	subs	r3, r0, r3
 800f3be:	d0d3      	beq.n	800f368 <_malloc_r+0x20>
 800f3c0:	425a      	negs	r2, r3
 800f3c2:	50e2      	str	r2, [r4, r3]
 800f3c4:	e7d0      	b.n	800f368 <_malloc_r+0x20>
 800f3c6:	428c      	cmp	r4, r1
 800f3c8:	684b      	ldr	r3, [r1, #4]
 800f3ca:	bf16      	itet	ne
 800f3cc:	6063      	strne	r3, [r4, #4]
 800f3ce:	6013      	streq	r3, [r2, #0]
 800f3d0:	460c      	movne	r4, r1
 800f3d2:	e7eb      	b.n	800f3ac <_malloc_r+0x64>
 800f3d4:	460c      	mov	r4, r1
 800f3d6:	6849      	ldr	r1, [r1, #4]
 800f3d8:	e7cc      	b.n	800f374 <_malloc_r+0x2c>
 800f3da:	1cc4      	adds	r4, r0, #3
 800f3dc:	f024 0403 	bic.w	r4, r4, #3
 800f3e0:	42a0      	cmp	r0, r4
 800f3e2:	d005      	beq.n	800f3f0 <_malloc_r+0xa8>
 800f3e4:	1a21      	subs	r1, r4, r0
 800f3e6:	4630      	mov	r0, r6
 800f3e8:	f000 fae2 	bl	800f9b0 <_sbrk_r>
 800f3ec:	3001      	adds	r0, #1
 800f3ee:	d0cf      	beq.n	800f390 <_malloc_r+0x48>
 800f3f0:	6025      	str	r5, [r4, #0]
 800f3f2:	e7db      	b.n	800f3ac <_malloc_r+0x64>
 800f3f4:	20000324 	.word	0x20000324
 800f3f8:	20000328 	.word	0x20000328

0800f3fc <__ssputs_r>:
 800f3fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f400:	688e      	ldr	r6, [r1, #8]
 800f402:	429e      	cmp	r6, r3
 800f404:	4682      	mov	sl, r0
 800f406:	460c      	mov	r4, r1
 800f408:	4690      	mov	r8, r2
 800f40a:	4699      	mov	r9, r3
 800f40c:	d837      	bhi.n	800f47e <__ssputs_r+0x82>
 800f40e:	898a      	ldrh	r2, [r1, #12]
 800f410:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f414:	d031      	beq.n	800f47a <__ssputs_r+0x7e>
 800f416:	6825      	ldr	r5, [r4, #0]
 800f418:	6909      	ldr	r1, [r1, #16]
 800f41a:	1a6f      	subs	r7, r5, r1
 800f41c:	6965      	ldr	r5, [r4, #20]
 800f41e:	2302      	movs	r3, #2
 800f420:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f424:	fb95 f5f3 	sdiv	r5, r5, r3
 800f428:	f109 0301 	add.w	r3, r9, #1
 800f42c:	443b      	add	r3, r7
 800f42e:	429d      	cmp	r5, r3
 800f430:	bf38      	it	cc
 800f432:	461d      	movcc	r5, r3
 800f434:	0553      	lsls	r3, r2, #21
 800f436:	d530      	bpl.n	800f49a <__ssputs_r+0x9e>
 800f438:	4629      	mov	r1, r5
 800f43a:	f7ff ff85 	bl	800f348 <_malloc_r>
 800f43e:	4606      	mov	r6, r0
 800f440:	b950      	cbnz	r0, 800f458 <__ssputs_r+0x5c>
 800f442:	230c      	movs	r3, #12
 800f444:	f8ca 3000 	str.w	r3, [sl]
 800f448:	89a3      	ldrh	r3, [r4, #12]
 800f44a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f44e:	81a3      	strh	r3, [r4, #12]
 800f450:	f04f 30ff 	mov.w	r0, #4294967295
 800f454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f458:	463a      	mov	r2, r7
 800f45a:	6921      	ldr	r1, [r4, #16]
 800f45c:	f000 fab8 	bl	800f9d0 <memcpy>
 800f460:	89a3      	ldrh	r3, [r4, #12]
 800f462:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f46a:	81a3      	strh	r3, [r4, #12]
 800f46c:	6126      	str	r6, [r4, #16]
 800f46e:	6165      	str	r5, [r4, #20]
 800f470:	443e      	add	r6, r7
 800f472:	1bed      	subs	r5, r5, r7
 800f474:	6026      	str	r6, [r4, #0]
 800f476:	60a5      	str	r5, [r4, #8]
 800f478:	464e      	mov	r6, r9
 800f47a:	454e      	cmp	r6, r9
 800f47c:	d900      	bls.n	800f480 <__ssputs_r+0x84>
 800f47e:	464e      	mov	r6, r9
 800f480:	4632      	mov	r2, r6
 800f482:	4641      	mov	r1, r8
 800f484:	6820      	ldr	r0, [r4, #0]
 800f486:	f000 faae 	bl	800f9e6 <memmove>
 800f48a:	68a3      	ldr	r3, [r4, #8]
 800f48c:	1b9b      	subs	r3, r3, r6
 800f48e:	60a3      	str	r3, [r4, #8]
 800f490:	6823      	ldr	r3, [r4, #0]
 800f492:	441e      	add	r6, r3
 800f494:	6026      	str	r6, [r4, #0]
 800f496:	2000      	movs	r0, #0
 800f498:	e7dc      	b.n	800f454 <__ssputs_r+0x58>
 800f49a:	462a      	mov	r2, r5
 800f49c:	f000 fabe 	bl	800fa1c <_realloc_r>
 800f4a0:	4606      	mov	r6, r0
 800f4a2:	2800      	cmp	r0, #0
 800f4a4:	d1e2      	bne.n	800f46c <__ssputs_r+0x70>
 800f4a6:	6921      	ldr	r1, [r4, #16]
 800f4a8:	4650      	mov	r0, sl
 800f4aa:	f7ff feff 	bl	800f2ac <_free_r>
 800f4ae:	e7c8      	b.n	800f442 <__ssputs_r+0x46>

0800f4b0 <_svfiprintf_r>:
 800f4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4b4:	461d      	mov	r5, r3
 800f4b6:	898b      	ldrh	r3, [r1, #12]
 800f4b8:	061f      	lsls	r7, r3, #24
 800f4ba:	b09d      	sub	sp, #116	; 0x74
 800f4bc:	4680      	mov	r8, r0
 800f4be:	460c      	mov	r4, r1
 800f4c0:	4616      	mov	r6, r2
 800f4c2:	d50f      	bpl.n	800f4e4 <_svfiprintf_r+0x34>
 800f4c4:	690b      	ldr	r3, [r1, #16]
 800f4c6:	b96b      	cbnz	r3, 800f4e4 <_svfiprintf_r+0x34>
 800f4c8:	2140      	movs	r1, #64	; 0x40
 800f4ca:	f7ff ff3d 	bl	800f348 <_malloc_r>
 800f4ce:	6020      	str	r0, [r4, #0]
 800f4d0:	6120      	str	r0, [r4, #16]
 800f4d2:	b928      	cbnz	r0, 800f4e0 <_svfiprintf_r+0x30>
 800f4d4:	230c      	movs	r3, #12
 800f4d6:	f8c8 3000 	str.w	r3, [r8]
 800f4da:	f04f 30ff 	mov.w	r0, #4294967295
 800f4de:	e0c8      	b.n	800f672 <_svfiprintf_r+0x1c2>
 800f4e0:	2340      	movs	r3, #64	; 0x40
 800f4e2:	6163      	str	r3, [r4, #20]
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	9309      	str	r3, [sp, #36]	; 0x24
 800f4e8:	2320      	movs	r3, #32
 800f4ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f4ee:	2330      	movs	r3, #48	; 0x30
 800f4f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f4f4:	9503      	str	r5, [sp, #12]
 800f4f6:	f04f 0b01 	mov.w	fp, #1
 800f4fa:	4637      	mov	r7, r6
 800f4fc:	463d      	mov	r5, r7
 800f4fe:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f502:	b10b      	cbz	r3, 800f508 <_svfiprintf_r+0x58>
 800f504:	2b25      	cmp	r3, #37	; 0x25
 800f506:	d13e      	bne.n	800f586 <_svfiprintf_r+0xd6>
 800f508:	ebb7 0a06 	subs.w	sl, r7, r6
 800f50c:	d00b      	beq.n	800f526 <_svfiprintf_r+0x76>
 800f50e:	4653      	mov	r3, sl
 800f510:	4632      	mov	r2, r6
 800f512:	4621      	mov	r1, r4
 800f514:	4640      	mov	r0, r8
 800f516:	f7ff ff71 	bl	800f3fc <__ssputs_r>
 800f51a:	3001      	adds	r0, #1
 800f51c:	f000 80a4 	beq.w	800f668 <_svfiprintf_r+0x1b8>
 800f520:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f522:	4453      	add	r3, sl
 800f524:	9309      	str	r3, [sp, #36]	; 0x24
 800f526:	783b      	ldrb	r3, [r7, #0]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	f000 809d 	beq.w	800f668 <_svfiprintf_r+0x1b8>
 800f52e:	2300      	movs	r3, #0
 800f530:	f04f 32ff 	mov.w	r2, #4294967295
 800f534:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f538:	9304      	str	r3, [sp, #16]
 800f53a:	9307      	str	r3, [sp, #28]
 800f53c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f540:	931a      	str	r3, [sp, #104]	; 0x68
 800f542:	462f      	mov	r7, r5
 800f544:	2205      	movs	r2, #5
 800f546:	f817 1b01 	ldrb.w	r1, [r7], #1
 800f54a:	4850      	ldr	r0, [pc, #320]	; (800f68c <_svfiprintf_r+0x1dc>)
 800f54c:	f7f0 fe80 	bl	8000250 <memchr>
 800f550:	9b04      	ldr	r3, [sp, #16]
 800f552:	b9d0      	cbnz	r0, 800f58a <_svfiprintf_r+0xda>
 800f554:	06d9      	lsls	r1, r3, #27
 800f556:	bf44      	itt	mi
 800f558:	2220      	movmi	r2, #32
 800f55a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f55e:	071a      	lsls	r2, r3, #28
 800f560:	bf44      	itt	mi
 800f562:	222b      	movmi	r2, #43	; 0x2b
 800f564:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f568:	782a      	ldrb	r2, [r5, #0]
 800f56a:	2a2a      	cmp	r2, #42	; 0x2a
 800f56c:	d015      	beq.n	800f59a <_svfiprintf_r+0xea>
 800f56e:	9a07      	ldr	r2, [sp, #28]
 800f570:	462f      	mov	r7, r5
 800f572:	2000      	movs	r0, #0
 800f574:	250a      	movs	r5, #10
 800f576:	4639      	mov	r1, r7
 800f578:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f57c:	3b30      	subs	r3, #48	; 0x30
 800f57e:	2b09      	cmp	r3, #9
 800f580:	d94d      	bls.n	800f61e <_svfiprintf_r+0x16e>
 800f582:	b1b8      	cbz	r0, 800f5b4 <_svfiprintf_r+0x104>
 800f584:	e00f      	b.n	800f5a6 <_svfiprintf_r+0xf6>
 800f586:	462f      	mov	r7, r5
 800f588:	e7b8      	b.n	800f4fc <_svfiprintf_r+0x4c>
 800f58a:	4a40      	ldr	r2, [pc, #256]	; (800f68c <_svfiprintf_r+0x1dc>)
 800f58c:	1a80      	subs	r0, r0, r2
 800f58e:	fa0b f000 	lsl.w	r0, fp, r0
 800f592:	4318      	orrs	r0, r3
 800f594:	9004      	str	r0, [sp, #16]
 800f596:	463d      	mov	r5, r7
 800f598:	e7d3      	b.n	800f542 <_svfiprintf_r+0x92>
 800f59a:	9a03      	ldr	r2, [sp, #12]
 800f59c:	1d11      	adds	r1, r2, #4
 800f59e:	6812      	ldr	r2, [r2, #0]
 800f5a0:	9103      	str	r1, [sp, #12]
 800f5a2:	2a00      	cmp	r2, #0
 800f5a4:	db01      	blt.n	800f5aa <_svfiprintf_r+0xfa>
 800f5a6:	9207      	str	r2, [sp, #28]
 800f5a8:	e004      	b.n	800f5b4 <_svfiprintf_r+0x104>
 800f5aa:	4252      	negs	r2, r2
 800f5ac:	f043 0302 	orr.w	r3, r3, #2
 800f5b0:	9207      	str	r2, [sp, #28]
 800f5b2:	9304      	str	r3, [sp, #16]
 800f5b4:	783b      	ldrb	r3, [r7, #0]
 800f5b6:	2b2e      	cmp	r3, #46	; 0x2e
 800f5b8:	d10c      	bne.n	800f5d4 <_svfiprintf_r+0x124>
 800f5ba:	787b      	ldrb	r3, [r7, #1]
 800f5bc:	2b2a      	cmp	r3, #42	; 0x2a
 800f5be:	d133      	bne.n	800f628 <_svfiprintf_r+0x178>
 800f5c0:	9b03      	ldr	r3, [sp, #12]
 800f5c2:	1d1a      	adds	r2, r3, #4
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	9203      	str	r2, [sp, #12]
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	bfb8      	it	lt
 800f5cc:	f04f 33ff 	movlt.w	r3, #4294967295
 800f5d0:	3702      	adds	r7, #2
 800f5d2:	9305      	str	r3, [sp, #20]
 800f5d4:	4d2e      	ldr	r5, [pc, #184]	; (800f690 <_svfiprintf_r+0x1e0>)
 800f5d6:	7839      	ldrb	r1, [r7, #0]
 800f5d8:	2203      	movs	r2, #3
 800f5da:	4628      	mov	r0, r5
 800f5dc:	f7f0 fe38 	bl	8000250 <memchr>
 800f5e0:	b138      	cbz	r0, 800f5f2 <_svfiprintf_r+0x142>
 800f5e2:	2340      	movs	r3, #64	; 0x40
 800f5e4:	1b40      	subs	r0, r0, r5
 800f5e6:	fa03 f000 	lsl.w	r0, r3, r0
 800f5ea:	9b04      	ldr	r3, [sp, #16]
 800f5ec:	4303      	orrs	r3, r0
 800f5ee:	3701      	adds	r7, #1
 800f5f0:	9304      	str	r3, [sp, #16]
 800f5f2:	7839      	ldrb	r1, [r7, #0]
 800f5f4:	4827      	ldr	r0, [pc, #156]	; (800f694 <_svfiprintf_r+0x1e4>)
 800f5f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f5fa:	2206      	movs	r2, #6
 800f5fc:	1c7e      	adds	r6, r7, #1
 800f5fe:	f7f0 fe27 	bl	8000250 <memchr>
 800f602:	2800      	cmp	r0, #0
 800f604:	d038      	beq.n	800f678 <_svfiprintf_r+0x1c8>
 800f606:	4b24      	ldr	r3, [pc, #144]	; (800f698 <_svfiprintf_r+0x1e8>)
 800f608:	bb13      	cbnz	r3, 800f650 <_svfiprintf_r+0x1a0>
 800f60a:	9b03      	ldr	r3, [sp, #12]
 800f60c:	3307      	adds	r3, #7
 800f60e:	f023 0307 	bic.w	r3, r3, #7
 800f612:	3308      	adds	r3, #8
 800f614:	9303      	str	r3, [sp, #12]
 800f616:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f618:	444b      	add	r3, r9
 800f61a:	9309      	str	r3, [sp, #36]	; 0x24
 800f61c:	e76d      	b.n	800f4fa <_svfiprintf_r+0x4a>
 800f61e:	fb05 3202 	mla	r2, r5, r2, r3
 800f622:	2001      	movs	r0, #1
 800f624:	460f      	mov	r7, r1
 800f626:	e7a6      	b.n	800f576 <_svfiprintf_r+0xc6>
 800f628:	2300      	movs	r3, #0
 800f62a:	3701      	adds	r7, #1
 800f62c:	9305      	str	r3, [sp, #20]
 800f62e:	4619      	mov	r1, r3
 800f630:	250a      	movs	r5, #10
 800f632:	4638      	mov	r0, r7
 800f634:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f638:	3a30      	subs	r2, #48	; 0x30
 800f63a:	2a09      	cmp	r2, #9
 800f63c:	d903      	bls.n	800f646 <_svfiprintf_r+0x196>
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d0c8      	beq.n	800f5d4 <_svfiprintf_r+0x124>
 800f642:	9105      	str	r1, [sp, #20]
 800f644:	e7c6      	b.n	800f5d4 <_svfiprintf_r+0x124>
 800f646:	fb05 2101 	mla	r1, r5, r1, r2
 800f64a:	2301      	movs	r3, #1
 800f64c:	4607      	mov	r7, r0
 800f64e:	e7f0      	b.n	800f632 <_svfiprintf_r+0x182>
 800f650:	ab03      	add	r3, sp, #12
 800f652:	9300      	str	r3, [sp, #0]
 800f654:	4622      	mov	r2, r4
 800f656:	4b11      	ldr	r3, [pc, #68]	; (800f69c <_svfiprintf_r+0x1ec>)
 800f658:	a904      	add	r1, sp, #16
 800f65a:	4640      	mov	r0, r8
 800f65c:	f3af 8000 	nop.w
 800f660:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f664:	4681      	mov	r9, r0
 800f666:	d1d6      	bne.n	800f616 <_svfiprintf_r+0x166>
 800f668:	89a3      	ldrh	r3, [r4, #12]
 800f66a:	065b      	lsls	r3, r3, #25
 800f66c:	f53f af35 	bmi.w	800f4da <_svfiprintf_r+0x2a>
 800f670:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f672:	b01d      	add	sp, #116	; 0x74
 800f674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f678:	ab03      	add	r3, sp, #12
 800f67a:	9300      	str	r3, [sp, #0]
 800f67c:	4622      	mov	r2, r4
 800f67e:	4b07      	ldr	r3, [pc, #28]	; (800f69c <_svfiprintf_r+0x1ec>)
 800f680:	a904      	add	r1, sp, #16
 800f682:	4640      	mov	r0, r8
 800f684:	f000 f882 	bl	800f78c <_printf_i>
 800f688:	e7ea      	b.n	800f660 <_svfiprintf_r+0x1b0>
 800f68a:	bf00      	nop
 800f68c:	0812ae44 	.word	0x0812ae44
 800f690:	0812ae4a 	.word	0x0812ae4a
 800f694:	0812ae4e 	.word	0x0812ae4e
 800f698:	00000000 	.word	0x00000000
 800f69c:	0800f3fd 	.word	0x0800f3fd

0800f6a0 <_printf_common>:
 800f6a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f6a4:	4691      	mov	r9, r2
 800f6a6:	461f      	mov	r7, r3
 800f6a8:	688a      	ldr	r2, [r1, #8]
 800f6aa:	690b      	ldr	r3, [r1, #16]
 800f6ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f6b0:	4293      	cmp	r3, r2
 800f6b2:	bfb8      	it	lt
 800f6b4:	4613      	movlt	r3, r2
 800f6b6:	f8c9 3000 	str.w	r3, [r9]
 800f6ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f6be:	4606      	mov	r6, r0
 800f6c0:	460c      	mov	r4, r1
 800f6c2:	b112      	cbz	r2, 800f6ca <_printf_common+0x2a>
 800f6c4:	3301      	adds	r3, #1
 800f6c6:	f8c9 3000 	str.w	r3, [r9]
 800f6ca:	6823      	ldr	r3, [r4, #0]
 800f6cc:	0699      	lsls	r1, r3, #26
 800f6ce:	bf42      	ittt	mi
 800f6d0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800f6d4:	3302      	addmi	r3, #2
 800f6d6:	f8c9 3000 	strmi.w	r3, [r9]
 800f6da:	6825      	ldr	r5, [r4, #0]
 800f6dc:	f015 0506 	ands.w	r5, r5, #6
 800f6e0:	d107      	bne.n	800f6f2 <_printf_common+0x52>
 800f6e2:	f104 0a19 	add.w	sl, r4, #25
 800f6e6:	68e3      	ldr	r3, [r4, #12]
 800f6e8:	f8d9 2000 	ldr.w	r2, [r9]
 800f6ec:	1a9b      	subs	r3, r3, r2
 800f6ee:	42ab      	cmp	r3, r5
 800f6f0:	dc28      	bgt.n	800f744 <_printf_common+0xa4>
 800f6f2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800f6f6:	6822      	ldr	r2, [r4, #0]
 800f6f8:	3300      	adds	r3, #0
 800f6fa:	bf18      	it	ne
 800f6fc:	2301      	movne	r3, #1
 800f6fe:	0692      	lsls	r2, r2, #26
 800f700:	d42d      	bmi.n	800f75e <_printf_common+0xbe>
 800f702:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f706:	4639      	mov	r1, r7
 800f708:	4630      	mov	r0, r6
 800f70a:	47c0      	blx	r8
 800f70c:	3001      	adds	r0, #1
 800f70e:	d020      	beq.n	800f752 <_printf_common+0xb2>
 800f710:	6823      	ldr	r3, [r4, #0]
 800f712:	68e5      	ldr	r5, [r4, #12]
 800f714:	f8d9 2000 	ldr.w	r2, [r9]
 800f718:	f003 0306 	and.w	r3, r3, #6
 800f71c:	2b04      	cmp	r3, #4
 800f71e:	bf08      	it	eq
 800f720:	1aad      	subeq	r5, r5, r2
 800f722:	68a3      	ldr	r3, [r4, #8]
 800f724:	6922      	ldr	r2, [r4, #16]
 800f726:	bf0c      	ite	eq
 800f728:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f72c:	2500      	movne	r5, #0
 800f72e:	4293      	cmp	r3, r2
 800f730:	bfc4      	itt	gt
 800f732:	1a9b      	subgt	r3, r3, r2
 800f734:	18ed      	addgt	r5, r5, r3
 800f736:	f04f 0900 	mov.w	r9, #0
 800f73a:	341a      	adds	r4, #26
 800f73c:	454d      	cmp	r5, r9
 800f73e:	d11a      	bne.n	800f776 <_printf_common+0xd6>
 800f740:	2000      	movs	r0, #0
 800f742:	e008      	b.n	800f756 <_printf_common+0xb6>
 800f744:	2301      	movs	r3, #1
 800f746:	4652      	mov	r2, sl
 800f748:	4639      	mov	r1, r7
 800f74a:	4630      	mov	r0, r6
 800f74c:	47c0      	blx	r8
 800f74e:	3001      	adds	r0, #1
 800f750:	d103      	bne.n	800f75a <_printf_common+0xba>
 800f752:	f04f 30ff 	mov.w	r0, #4294967295
 800f756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f75a:	3501      	adds	r5, #1
 800f75c:	e7c3      	b.n	800f6e6 <_printf_common+0x46>
 800f75e:	18e1      	adds	r1, r4, r3
 800f760:	1c5a      	adds	r2, r3, #1
 800f762:	2030      	movs	r0, #48	; 0x30
 800f764:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f768:	4422      	add	r2, r4
 800f76a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f76e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f772:	3302      	adds	r3, #2
 800f774:	e7c5      	b.n	800f702 <_printf_common+0x62>
 800f776:	2301      	movs	r3, #1
 800f778:	4622      	mov	r2, r4
 800f77a:	4639      	mov	r1, r7
 800f77c:	4630      	mov	r0, r6
 800f77e:	47c0      	blx	r8
 800f780:	3001      	adds	r0, #1
 800f782:	d0e6      	beq.n	800f752 <_printf_common+0xb2>
 800f784:	f109 0901 	add.w	r9, r9, #1
 800f788:	e7d8      	b.n	800f73c <_printf_common+0x9c>
	...

0800f78c <_printf_i>:
 800f78c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f790:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800f794:	460c      	mov	r4, r1
 800f796:	7e09      	ldrb	r1, [r1, #24]
 800f798:	b085      	sub	sp, #20
 800f79a:	296e      	cmp	r1, #110	; 0x6e
 800f79c:	4617      	mov	r7, r2
 800f79e:	4606      	mov	r6, r0
 800f7a0:	4698      	mov	r8, r3
 800f7a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f7a4:	f000 80b3 	beq.w	800f90e <_printf_i+0x182>
 800f7a8:	d822      	bhi.n	800f7f0 <_printf_i+0x64>
 800f7aa:	2963      	cmp	r1, #99	; 0x63
 800f7ac:	d036      	beq.n	800f81c <_printf_i+0x90>
 800f7ae:	d80a      	bhi.n	800f7c6 <_printf_i+0x3a>
 800f7b0:	2900      	cmp	r1, #0
 800f7b2:	f000 80b9 	beq.w	800f928 <_printf_i+0x19c>
 800f7b6:	2958      	cmp	r1, #88	; 0x58
 800f7b8:	f000 8083 	beq.w	800f8c2 <_printf_i+0x136>
 800f7bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f7c0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800f7c4:	e032      	b.n	800f82c <_printf_i+0xa0>
 800f7c6:	2964      	cmp	r1, #100	; 0x64
 800f7c8:	d001      	beq.n	800f7ce <_printf_i+0x42>
 800f7ca:	2969      	cmp	r1, #105	; 0x69
 800f7cc:	d1f6      	bne.n	800f7bc <_printf_i+0x30>
 800f7ce:	6820      	ldr	r0, [r4, #0]
 800f7d0:	6813      	ldr	r3, [r2, #0]
 800f7d2:	0605      	lsls	r5, r0, #24
 800f7d4:	f103 0104 	add.w	r1, r3, #4
 800f7d8:	d52a      	bpl.n	800f830 <_printf_i+0xa4>
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	6011      	str	r1, [r2, #0]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	da03      	bge.n	800f7ea <_printf_i+0x5e>
 800f7e2:	222d      	movs	r2, #45	; 0x2d
 800f7e4:	425b      	negs	r3, r3
 800f7e6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800f7ea:	486f      	ldr	r0, [pc, #444]	; (800f9a8 <_printf_i+0x21c>)
 800f7ec:	220a      	movs	r2, #10
 800f7ee:	e039      	b.n	800f864 <_printf_i+0xd8>
 800f7f0:	2973      	cmp	r1, #115	; 0x73
 800f7f2:	f000 809d 	beq.w	800f930 <_printf_i+0x1a4>
 800f7f6:	d808      	bhi.n	800f80a <_printf_i+0x7e>
 800f7f8:	296f      	cmp	r1, #111	; 0x6f
 800f7fa:	d020      	beq.n	800f83e <_printf_i+0xb2>
 800f7fc:	2970      	cmp	r1, #112	; 0x70
 800f7fe:	d1dd      	bne.n	800f7bc <_printf_i+0x30>
 800f800:	6823      	ldr	r3, [r4, #0]
 800f802:	f043 0320 	orr.w	r3, r3, #32
 800f806:	6023      	str	r3, [r4, #0]
 800f808:	e003      	b.n	800f812 <_printf_i+0x86>
 800f80a:	2975      	cmp	r1, #117	; 0x75
 800f80c:	d017      	beq.n	800f83e <_printf_i+0xb2>
 800f80e:	2978      	cmp	r1, #120	; 0x78
 800f810:	d1d4      	bne.n	800f7bc <_printf_i+0x30>
 800f812:	2378      	movs	r3, #120	; 0x78
 800f814:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f818:	4864      	ldr	r0, [pc, #400]	; (800f9ac <_printf_i+0x220>)
 800f81a:	e055      	b.n	800f8c8 <_printf_i+0x13c>
 800f81c:	6813      	ldr	r3, [r2, #0]
 800f81e:	1d19      	adds	r1, r3, #4
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	6011      	str	r1, [r2, #0]
 800f824:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f828:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f82c:	2301      	movs	r3, #1
 800f82e:	e08c      	b.n	800f94a <_printf_i+0x1be>
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	6011      	str	r1, [r2, #0]
 800f834:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f838:	bf18      	it	ne
 800f83a:	b21b      	sxthne	r3, r3
 800f83c:	e7cf      	b.n	800f7de <_printf_i+0x52>
 800f83e:	6813      	ldr	r3, [r2, #0]
 800f840:	6825      	ldr	r5, [r4, #0]
 800f842:	1d18      	adds	r0, r3, #4
 800f844:	6010      	str	r0, [r2, #0]
 800f846:	0628      	lsls	r0, r5, #24
 800f848:	d501      	bpl.n	800f84e <_printf_i+0xc2>
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	e002      	b.n	800f854 <_printf_i+0xc8>
 800f84e:	0668      	lsls	r0, r5, #25
 800f850:	d5fb      	bpl.n	800f84a <_printf_i+0xbe>
 800f852:	881b      	ldrh	r3, [r3, #0]
 800f854:	4854      	ldr	r0, [pc, #336]	; (800f9a8 <_printf_i+0x21c>)
 800f856:	296f      	cmp	r1, #111	; 0x6f
 800f858:	bf14      	ite	ne
 800f85a:	220a      	movne	r2, #10
 800f85c:	2208      	moveq	r2, #8
 800f85e:	2100      	movs	r1, #0
 800f860:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f864:	6865      	ldr	r5, [r4, #4]
 800f866:	60a5      	str	r5, [r4, #8]
 800f868:	2d00      	cmp	r5, #0
 800f86a:	f2c0 8095 	blt.w	800f998 <_printf_i+0x20c>
 800f86e:	6821      	ldr	r1, [r4, #0]
 800f870:	f021 0104 	bic.w	r1, r1, #4
 800f874:	6021      	str	r1, [r4, #0]
 800f876:	2b00      	cmp	r3, #0
 800f878:	d13d      	bne.n	800f8f6 <_printf_i+0x16a>
 800f87a:	2d00      	cmp	r5, #0
 800f87c:	f040 808e 	bne.w	800f99c <_printf_i+0x210>
 800f880:	4665      	mov	r5, ip
 800f882:	2a08      	cmp	r2, #8
 800f884:	d10b      	bne.n	800f89e <_printf_i+0x112>
 800f886:	6823      	ldr	r3, [r4, #0]
 800f888:	07db      	lsls	r3, r3, #31
 800f88a:	d508      	bpl.n	800f89e <_printf_i+0x112>
 800f88c:	6923      	ldr	r3, [r4, #16]
 800f88e:	6862      	ldr	r2, [r4, #4]
 800f890:	429a      	cmp	r2, r3
 800f892:	bfde      	ittt	le
 800f894:	2330      	movle	r3, #48	; 0x30
 800f896:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f89a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f89e:	ebac 0305 	sub.w	r3, ip, r5
 800f8a2:	6123      	str	r3, [r4, #16]
 800f8a4:	f8cd 8000 	str.w	r8, [sp]
 800f8a8:	463b      	mov	r3, r7
 800f8aa:	aa03      	add	r2, sp, #12
 800f8ac:	4621      	mov	r1, r4
 800f8ae:	4630      	mov	r0, r6
 800f8b0:	f7ff fef6 	bl	800f6a0 <_printf_common>
 800f8b4:	3001      	adds	r0, #1
 800f8b6:	d14d      	bne.n	800f954 <_printf_i+0x1c8>
 800f8b8:	f04f 30ff 	mov.w	r0, #4294967295
 800f8bc:	b005      	add	sp, #20
 800f8be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f8c2:	4839      	ldr	r0, [pc, #228]	; (800f9a8 <_printf_i+0x21c>)
 800f8c4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800f8c8:	6813      	ldr	r3, [r2, #0]
 800f8ca:	6821      	ldr	r1, [r4, #0]
 800f8cc:	1d1d      	adds	r5, r3, #4
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	6015      	str	r5, [r2, #0]
 800f8d2:	060a      	lsls	r2, r1, #24
 800f8d4:	d50b      	bpl.n	800f8ee <_printf_i+0x162>
 800f8d6:	07ca      	lsls	r2, r1, #31
 800f8d8:	bf44      	itt	mi
 800f8da:	f041 0120 	orrmi.w	r1, r1, #32
 800f8de:	6021      	strmi	r1, [r4, #0]
 800f8e0:	b91b      	cbnz	r3, 800f8ea <_printf_i+0x15e>
 800f8e2:	6822      	ldr	r2, [r4, #0]
 800f8e4:	f022 0220 	bic.w	r2, r2, #32
 800f8e8:	6022      	str	r2, [r4, #0]
 800f8ea:	2210      	movs	r2, #16
 800f8ec:	e7b7      	b.n	800f85e <_printf_i+0xd2>
 800f8ee:	064d      	lsls	r5, r1, #25
 800f8f0:	bf48      	it	mi
 800f8f2:	b29b      	uxthmi	r3, r3
 800f8f4:	e7ef      	b.n	800f8d6 <_printf_i+0x14a>
 800f8f6:	4665      	mov	r5, ip
 800f8f8:	fbb3 f1f2 	udiv	r1, r3, r2
 800f8fc:	fb02 3311 	mls	r3, r2, r1, r3
 800f900:	5cc3      	ldrb	r3, [r0, r3]
 800f902:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800f906:	460b      	mov	r3, r1
 800f908:	2900      	cmp	r1, #0
 800f90a:	d1f5      	bne.n	800f8f8 <_printf_i+0x16c>
 800f90c:	e7b9      	b.n	800f882 <_printf_i+0xf6>
 800f90e:	6813      	ldr	r3, [r2, #0]
 800f910:	6825      	ldr	r5, [r4, #0]
 800f912:	6961      	ldr	r1, [r4, #20]
 800f914:	1d18      	adds	r0, r3, #4
 800f916:	6010      	str	r0, [r2, #0]
 800f918:	0628      	lsls	r0, r5, #24
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	d501      	bpl.n	800f922 <_printf_i+0x196>
 800f91e:	6019      	str	r1, [r3, #0]
 800f920:	e002      	b.n	800f928 <_printf_i+0x19c>
 800f922:	066a      	lsls	r2, r5, #25
 800f924:	d5fb      	bpl.n	800f91e <_printf_i+0x192>
 800f926:	8019      	strh	r1, [r3, #0]
 800f928:	2300      	movs	r3, #0
 800f92a:	6123      	str	r3, [r4, #16]
 800f92c:	4665      	mov	r5, ip
 800f92e:	e7b9      	b.n	800f8a4 <_printf_i+0x118>
 800f930:	6813      	ldr	r3, [r2, #0]
 800f932:	1d19      	adds	r1, r3, #4
 800f934:	6011      	str	r1, [r2, #0]
 800f936:	681d      	ldr	r5, [r3, #0]
 800f938:	6862      	ldr	r2, [r4, #4]
 800f93a:	2100      	movs	r1, #0
 800f93c:	4628      	mov	r0, r5
 800f93e:	f7f0 fc87 	bl	8000250 <memchr>
 800f942:	b108      	cbz	r0, 800f948 <_printf_i+0x1bc>
 800f944:	1b40      	subs	r0, r0, r5
 800f946:	6060      	str	r0, [r4, #4]
 800f948:	6863      	ldr	r3, [r4, #4]
 800f94a:	6123      	str	r3, [r4, #16]
 800f94c:	2300      	movs	r3, #0
 800f94e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f952:	e7a7      	b.n	800f8a4 <_printf_i+0x118>
 800f954:	6923      	ldr	r3, [r4, #16]
 800f956:	462a      	mov	r2, r5
 800f958:	4639      	mov	r1, r7
 800f95a:	4630      	mov	r0, r6
 800f95c:	47c0      	blx	r8
 800f95e:	3001      	adds	r0, #1
 800f960:	d0aa      	beq.n	800f8b8 <_printf_i+0x12c>
 800f962:	6823      	ldr	r3, [r4, #0]
 800f964:	079b      	lsls	r3, r3, #30
 800f966:	d413      	bmi.n	800f990 <_printf_i+0x204>
 800f968:	68e0      	ldr	r0, [r4, #12]
 800f96a:	9b03      	ldr	r3, [sp, #12]
 800f96c:	4298      	cmp	r0, r3
 800f96e:	bfb8      	it	lt
 800f970:	4618      	movlt	r0, r3
 800f972:	e7a3      	b.n	800f8bc <_printf_i+0x130>
 800f974:	2301      	movs	r3, #1
 800f976:	464a      	mov	r2, r9
 800f978:	4639      	mov	r1, r7
 800f97a:	4630      	mov	r0, r6
 800f97c:	47c0      	blx	r8
 800f97e:	3001      	adds	r0, #1
 800f980:	d09a      	beq.n	800f8b8 <_printf_i+0x12c>
 800f982:	3501      	adds	r5, #1
 800f984:	68e3      	ldr	r3, [r4, #12]
 800f986:	9a03      	ldr	r2, [sp, #12]
 800f988:	1a9b      	subs	r3, r3, r2
 800f98a:	42ab      	cmp	r3, r5
 800f98c:	dcf2      	bgt.n	800f974 <_printf_i+0x1e8>
 800f98e:	e7eb      	b.n	800f968 <_printf_i+0x1dc>
 800f990:	2500      	movs	r5, #0
 800f992:	f104 0919 	add.w	r9, r4, #25
 800f996:	e7f5      	b.n	800f984 <_printf_i+0x1f8>
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d1ac      	bne.n	800f8f6 <_printf_i+0x16a>
 800f99c:	7803      	ldrb	r3, [r0, #0]
 800f99e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f9a2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f9a6:	e76c      	b.n	800f882 <_printf_i+0xf6>
 800f9a8:	0812ae55 	.word	0x0812ae55
 800f9ac:	0812ae66 	.word	0x0812ae66

0800f9b0 <_sbrk_r>:
 800f9b0:	b538      	push	{r3, r4, r5, lr}
 800f9b2:	4c06      	ldr	r4, [pc, #24]	; (800f9cc <_sbrk_r+0x1c>)
 800f9b4:	2300      	movs	r3, #0
 800f9b6:	4605      	mov	r5, r0
 800f9b8:	4608      	mov	r0, r1
 800f9ba:	6023      	str	r3, [r4, #0]
 800f9bc:	f7ff fb34 	bl	800f028 <_sbrk>
 800f9c0:	1c43      	adds	r3, r0, #1
 800f9c2:	d102      	bne.n	800f9ca <_sbrk_r+0x1a>
 800f9c4:	6823      	ldr	r3, [r4, #0]
 800f9c6:	b103      	cbz	r3, 800f9ca <_sbrk_r+0x1a>
 800f9c8:	602b      	str	r3, [r5, #0]
 800f9ca:	bd38      	pop	{r3, r4, r5, pc}
 800f9cc:	20000c3c 	.word	0x20000c3c

0800f9d0 <memcpy>:
 800f9d0:	b510      	push	{r4, lr}
 800f9d2:	1e43      	subs	r3, r0, #1
 800f9d4:	440a      	add	r2, r1
 800f9d6:	4291      	cmp	r1, r2
 800f9d8:	d100      	bne.n	800f9dc <memcpy+0xc>
 800f9da:	bd10      	pop	{r4, pc}
 800f9dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f9e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f9e4:	e7f7      	b.n	800f9d6 <memcpy+0x6>

0800f9e6 <memmove>:
 800f9e6:	4288      	cmp	r0, r1
 800f9e8:	b510      	push	{r4, lr}
 800f9ea:	eb01 0302 	add.w	r3, r1, r2
 800f9ee:	d807      	bhi.n	800fa00 <memmove+0x1a>
 800f9f0:	1e42      	subs	r2, r0, #1
 800f9f2:	4299      	cmp	r1, r3
 800f9f4:	d00a      	beq.n	800fa0c <memmove+0x26>
 800f9f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f9fa:	f802 4f01 	strb.w	r4, [r2, #1]!
 800f9fe:	e7f8      	b.n	800f9f2 <memmove+0xc>
 800fa00:	4283      	cmp	r3, r0
 800fa02:	d9f5      	bls.n	800f9f0 <memmove+0xa>
 800fa04:	1881      	adds	r1, r0, r2
 800fa06:	1ad2      	subs	r2, r2, r3
 800fa08:	42d3      	cmn	r3, r2
 800fa0a:	d100      	bne.n	800fa0e <memmove+0x28>
 800fa0c:	bd10      	pop	{r4, pc}
 800fa0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fa12:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800fa16:	e7f7      	b.n	800fa08 <memmove+0x22>

0800fa18 <__malloc_lock>:
 800fa18:	4770      	bx	lr

0800fa1a <__malloc_unlock>:
 800fa1a:	4770      	bx	lr

0800fa1c <_realloc_r>:
 800fa1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa1e:	4607      	mov	r7, r0
 800fa20:	4614      	mov	r4, r2
 800fa22:	460e      	mov	r6, r1
 800fa24:	b921      	cbnz	r1, 800fa30 <_realloc_r+0x14>
 800fa26:	4611      	mov	r1, r2
 800fa28:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fa2c:	f7ff bc8c 	b.w	800f348 <_malloc_r>
 800fa30:	b922      	cbnz	r2, 800fa3c <_realloc_r+0x20>
 800fa32:	f7ff fc3b 	bl	800f2ac <_free_r>
 800fa36:	4625      	mov	r5, r4
 800fa38:	4628      	mov	r0, r5
 800fa3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa3c:	f000 f814 	bl	800fa68 <_malloc_usable_size_r>
 800fa40:	42a0      	cmp	r0, r4
 800fa42:	d20f      	bcs.n	800fa64 <_realloc_r+0x48>
 800fa44:	4621      	mov	r1, r4
 800fa46:	4638      	mov	r0, r7
 800fa48:	f7ff fc7e 	bl	800f348 <_malloc_r>
 800fa4c:	4605      	mov	r5, r0
 800fa4e:	2800      	cmp	r0, #0
 800fa50:	d0f2      	beq.n	800fa38 <_realloc_r+0x1c>
 800fa52:	4631      	mov	r1, r6
 800fa54:	4622      	mov	r2, r4
 800fa56:	f7ff ffbb 	bl	800f9d0 <memcpy>
 800fa5a:	4631      	mov	r1, r6
 800fa5c:	4638      	mov	r0, r7
 800fa5e:	f7ff fc25 	bl	800f2ac <_free_r>
 800fa62:	e7e9      	b.n	800fa38 <_realloc_r+0x1c>
 800fa64:	4635      	mov	r5, r6
 800fa66:	e7e7      	b.n	800fa38 <_realloc_r+0x1c>

0800fa68 <_malloc_usable_size_r>:
 800fa68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fa6c:	1f18      	subs	r0, r3, #4
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	bfbc      	itt	lt
 800fa72:	580b      	ldrlt	r3, [r1, r0]
 800fa74:	18c0      	addlt	r0, r0, r3
 800fa76:	4770      	bx	lr

0800fa78 <_init>:
 800fa78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa7a:	bf00      	nop
 800fa7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa7e:	bc08      	pop	{r3}
 800fa80:	469e      	mov	lr, r3
 800fa82:	4770      	bx	lr

0800fa84 <_fini>:
 800fa84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa86:	bf00      	nop
 800fa88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa8a:	bc08      	pop	{r3}
 800fa8c:	469e      	mov	lr, r3
 800fa8e:	4770      	bx	lr
